{
    "bugs to commit": [
        {
            "bug index": "1",
            "bug id": "JXPATH-12",
            "hexsha": "71ca5c1faae6447f42f363d5157d6391dcc091d7",
            "fix_hash": "fab38abb27f2f92b9340cfc232eb5517434bf138",
            "description": "Given the following XML document: <root id=\"1234\"/>\nand the XPath: //root/@id/text().\n\nJXPath returns null instead of \"1234\".\n\nJXPathContext context = JXPathContext.newContext(doc);\nassertEquals(value, context.selectSingleNode(\"//root/@id/text()\"));\n\nThe attached JUnit test highlights the problem. It seems that JXPath does not\nfind the root node if it is accessed with the axis descendant-or-self.",
            "commit number version hash": 340,
            "commit number": 204,
            "function that changed": [
                {
                    "function name": "testNode",
                    "function params": [
                        "node",
                        "test"
                    ],
                    "file name": "DOMNodePointer.java",
                    "file old path": "src/java/org/apache/commons/jxpath/ri/model/dom/DOMNodePointer.java",
                    "file new path": "src/java/org/apache/commons/jxpath/ri/model/dom/DOMNodePointer.java",
                    "full name": "src.java.org.apache.commons.jxpath.ri.model.dom.DOMNodePointer.testNode"
                },
                {
                    "function name": "testNode",
                    "function params": [
                        "pointer",
                        "node",
                        "test"
                    ],
                    "file name": "JDOMNodePointer.java",
                    "file old path": "src/java/org/apache/commons/jxpath/ri/model/jdom/JDOMNodePointer.java",
                    "file new path": "src/java/org/apache/commons/jxpath/ri/model/jdom/JDOMNodePointer.java",
                    "full name": "src.java.org.apache.commons.jxpath.ri.model.jdom.JDOMNodePointer.testNode"
                },
                {
                    "function name": "testGetNode",
                    "function params": [],
                    "file name": "DOMModelTest.java",
                    "file old path": "src/test/org/apache/commons/jxpath/ri/model/dom/DOMModelTest.java",
                    "file new path": "src/test/org/apache/commons/jxpath/ri/model/dom/DOMModelTest.java",
                    "full name": "src.test.org.apache.commons.jxpath.ri.model.dom.DOMModelTest.testGetNode"
                },
                {
                    "function name": "testGetNode",
                    "function params": [],
                    "file name": "JDOMModelTest.java",
                    "file old path": "src/test/org/apache/commons/jxpath/ri/model/jdom/JDOMModelTest.java",
                    "file new path": "src/test/org/apache/commons/jxpath/ri/model/jdom/JDOMModelTest.java",
                    "full name": "src.test.org.apache.commons.jxpath.ri.model.jdom.JDOMModelTest.testGetNode"
                }
            ],
            "files that changed": [
                "src/java/org/apache/commons/jxpath/ri/model/dom/DOMNodePointer.java",
                "src/java/org/apache/commons/jxpath/ri/model/jdom/JDOMNodePointer.java",
                "src/test/org/apache/commons/jxpath/ri/model/dom/DOMModelTest.java",
                "src/test/org/apache/commons/jxpath/ri/model/jdom/JDOMModelTest.java"
            ]
        },
        {
            "bug index": "2",
            "bug id": "JXPATH-50",
            "hexsha": "71ca5c1faae6447f42f363d5157d6391dcc091d7",
            "fix_hash": "716c03b3b12ec106974898451b149f6eb79c65da",
            "description": "Per the documentation, my function is returning a BasicNodeSet containing zero\nor more pointers:\n\n  public static NodeSet observations(ExpressionContext context) {\n    // the cast below shouldn't break, as this is the only pointer type that\n    // makes sense in this context\n    List<NodePointer> ptrs = extractObservations(\n                                  (NodePointer)context.getContextNodePointer(), \n                                  new ArrayList<NodePointer>());\n    BasicNodeSet result = new BasicNodeSet();\n    for (NodePointer ptr : ptrs) {\n      result.add(ptr);\n    }\n    return result;\n  }\n\nHowever, if I call JXPathContext.selectNodes(\"ems:observations()\"), I'm getting\na single node containing the BasicNodeSet. I notice that there is a testcase for\nfunctions that return NodeSets, but that it uses expressions that actually\nreturn the children of the NodeSet (\"test:nodeSet()/name\").\n\nThere appear to be two problems. First, Expression.iterate() and\nExpression.iteratePointers() do not correctly recognize a NodeSet as something\niterable. I've resolved this by reaching into the NodeSet and getting an\niterator over its pointers.\n\nSecond, Expression.PointerIterator doesn't recognize when it already has a\npointer, and instead tries to wrap it in a new pointer. This ends up treating\nthe pointer as a bean.\n\nI've made these changes, and written a testcase that uses an unadorned NodeSet\nfunction. I also found a class that used a variable named \"enum\", and changed\nthis so that it would compile under 1.5.\n\nThe patch is attached. It's relative to \"commons-jxpath-1.2\" (root of extract\ndirectory).",
            "commit number version hash": 340,
            "commit number": 206,
            "function that changed": [
                {
                    "function name": "iteratePointers",
                    "function params": [
                        "context"
                    ],
                    "file name": "Expression.java",
                    "file old path": "src/java/org/apache/commons/jxpath/ri/compiler/Expression.java",
                    "file new path": "src/java/org/apache/commons/jxpath/ri/compiler/Expression.java",
                    "full name": "src.java.org.apache.commons.jxpath.ri.compiler.Expression.iteratePointers"
                },
                {
                    "function name": "PointerIterator",
                    "function params": [],
                    "file name": "Expression.java",
                    "file old path": "src/java/org/apache/commons/jxpath/ri/compiler/Expression.java",
                    "file new path": "src/java/org/apache/commons/jxpath/ri/compiler/Expression.java",
                    "full name": "src.java.org.apache.commons.jxpath.ri.compiler.Expression.PointerIterator"
                },
                {
                    "function name": "iterate",
                    "function params": [
                        "context"
                    ],
                    "file name": "Expression.java",
                    "file old path": "src/java/org/apache/commons/jxpath/ri/compiler/Expression.java",
                    "file new path": "src/java/org/apache/commons/jxpath/ri/compiler/Expression.java",
                    "full name": "src.java.org.apache.commons.jxpath.ri.compiler.Expression.iterate"
                },
                {
                    "function name": "setUp",
                    "function params": [],
                    "file name": "ExtensionFunctionTest.java",
                    "file old path": "src/test/org/apache/commons/jxpath/ri/compiler/ExtensionFunctionTest.java",
                    "file new path": "src/test/org/apache/commons/jxpath/ri/compiler/ExtensionFunctionTest.java",
                    "full name": "src.test.org.apache.commons.jxpath.ri.compiler.ExtensionFunctionTest.setUp"
                },
                {
                    "function name": "testNodeSetReturn",
                    "function params": [],
                    "file name": "ExtensionFunctionTest.java",
                    "file old path": "src/test/org/apache/commons/jxpath/ri/compiler/ExtensionFunctionTest.java",
                    "file new path": "src/test/org/apache/commons/jxpath/ri/compiler/ExtensionFunctionTest.java",
                    "full name": "src.test.org.apache.commons.jxpath.ri.compiler.ExtensionFunctionTest.testNodeSetReturn"
                }
            ],
            "files that changed": [
                "src/java/org/apache/commons/jxpath/ri/compiler/Expression.java",
                "src/test/org/apache/commons/jxpath/ri/compiler/ExtensionFunctionTest.java"
            ]
        },
        {
            "bug index": "3",
            "bug id": "JXPATH-68",
            "hexsha": "71ca5c1faae6447f42f363d5157d6391dcc091d7",
            "fix_hash": "984778f3c264df5d608eb9697df2a268122ac66f",
            "description": "I'm running into a StackOverflow error on a call to\n'JXPathContext.createPath()' whenever I have a path that looks like\n'a/b[1]/c'.  I took a quick look at the code and it appears JXPath, when\ntrying to create its parent pointer, simply recreates an equivalent\npointer(???).\n\nHere is code to reproduce the problem.\n\n\n    Map map = new HashMap();\n    map.put(\"a\", null);\n    \n    JXPathContext pathContext = JXPathContext.newContext(map);\n    pathContext.setFactory(new AbstractFactory() {\n      public boolean createObject(\n          JXPathContext context, Pointer pointer, Object parent, String\nname, int index) {\n\n        Map parentMap = (Map)parent;\n        System.out.println(parent + \":\" + name + \":\" + index);\n        if (index > -1) {\n          List list = (List)parentMap.get(name);\n          if (list == null) {\n            list = new ArrayList();\n          }\n          int size = list.size();\n          for (int i = size; i <= index; i++) {\n            list.add(i, null);\n          }\n          parentMap.put(name, list);\n        } else {\n          parentMap.put(name, new HashMap());\n        }\n        return true;\n      }\n      \n    });\n    pathContext.createPath(\"a/b[1]/c\");\n\n***************\n\nI have continued looking into this, and found that the problem is that, if\nthe List is created with a 'null' element, JXPath gets stuck in infinite\nrecursion.\n\nTo discover this, I changed my Factory to implement the following method:\n\n      public boolean createObject(\n          JXPathContext context, Pointer pointer, Object parent, \n          String name, int index) {\n\n        if (pointer instanceof NodePointer) {\n          index = ((NodePointer)pointer).getIndex();\n        }\n        System.out.println(parent + \":\" + name + \":\" + index);\n        Map parentMap = (Map)parent;\n        if (index > -1) {\n          List list = (List)parentMap.get(name);\n          if (list == null) {\n            list = new ArrayList();\n          }\n          int size = list.size();\n          for (int i = size; i <= index; i++) {\n            list.add(i, new HashMap());  // !!!!!!  Don't set to 'null'\n          }\n          parentMap.put(name, list);\n        } else {\n          parentMap.put(name, new HashMap());\n        }\n        return true;\n      }\n\nThen I ran the following code:\n\n    pathContext.createPath(\"a/b[1]/c\");\n    pathContext.createPath(\"a/b[2]/c\");  // STACK OVERFLOW HERE\n\nHere is the stack trace at the beginning, where\n'ValueUtils.expandCollection()' is called.  It puts 'null' into the list,\nthus causing the stack overflow as we cycle between createPath() &\ncreateChild().\n\nThread [main] (Suspended (breakpoint at line 227 in DynamicPropertyPointer))\n\tDynamicPropertyPointer.createPath(JXPathContext) line: 227\n\tDynamicPropertyPointer(PropertyPointer).createChild(JXPathContext,\nQName, int) line: 188\n\tNullElementPointer.createPath(JXPathContext) line: 82\n\tNullPointer.createPath(JXPathContext) line: 86\n\tNullPropertyPointer.createPath(JXPathContext) line: 103\n\tNullPointer.createPath(JXPathContext) line: 86\n\tNullPropertyPointer.createPath(JXPathContext) line: 103\n\tJXPathContextReferenceImpl.createPath(String, Expression) line: 447\n\tJXPathContextReferenceImpl.createPath(String) line: 427\n\tTest.test4() line: 75\n\tTest.main(String[]) line: 38",
            "commit number version hash": 340,
            "commit number": 213,
            "function that changed": [
                {
                    "function name": "createPath",
                    "function params": [
                        "context"
                    ],
                    "file name": "NullPropertyPointer.java",
                    "file old path": "src/java/org/apache/commons/jxpath/ri/model/beans/NullPropertyPointer.java",
                    "file new path": "src/java/org/apache/commons/jxpath/ri/model/beans/NullPropertyPointer.java",
                    "full name": "src.java.org.apache.commons.jxpath.ri.model.beans.NullPropertyPointer.createPath"
                },
                {
                    "function name": "createBadFactoryException",
                    "function params": [
                        "factory"
                    ],
                    "file name": "NullPropertyPointer.java",
                    "file old path": "src/java/org/apache/commons/jxpath/ri/model/beans/NullPropertyPointer.java",
                    "file new path": "src/java/org/apache/commons/jxpath/ri/model/beans/NullPropertyPointer.java",
                    "full name": "src.java.org.apache.commons.jxpath.ri.model.beans.NullPropertyPointer.createBadFactoryException"
                },
                {
                    "function name": "createPath",
                    "function params": [
                        "context",
                        "value"
                    ],
                    "file name": "NullPropertyPointer.java",
                    "file old path": "src/java/org/apache/commons/jxpath/ri/model/beans/NullPropertyPointer.java",
                    "file new path": "src/java/org/apache/commons/jxpath/ri/model/beans/NullPropertyPointer.java",
                    "full name": "src.java.org.apache.commons.jxpath.ri.model.beans.NullPropertyPointer.createPath"
                },
                {
                    "function name": "testBadFactoryImplementation",
                    "function params": [],
                    "file name": "BadlyImplementedFactoryTest.java",
                    "file old path": null,
                    "file new path": "src/test/org/apache/commons/jxpath/ri/model/beans/BadlyImplementedFactoryTest.java",
                    "full name": "src.test.org.apache.commons.jxpath.ri.model.beans.BadlyImplementedFactoryTest.testBadFactoryImplementation"
                },
                {
                    "function name": "setUp",
                    "function params": [],
                    "file name": "BadlyImplementedFactoryTest.java",
                    "file old path": null,
                    "file new path": "src/test/org/apache/commons/jxpath/ri/model/beans/BadlyImplementedFactoryTest.java",
                    "full name": "src.test.org.apache.commons.jxpath.ri.model.beans.BadlyImplementedFactoryTest.setUp"
                },
                {
                    "function name": "BadlyImplementedFactoryTest",
                    "function params": [
                        "name"
                    ],
                    "file name": "BadlyImplementedFactoryTest.java",
                    "file old path": null,
                    "file new path": "src/test/org/apache/commons/jxpath/ri/model/beans/BadlyImplementedFactoryTest.java",
                    "full name": "src.test.org.apache.commons.jxpath.ri.model.beans.BadlyImplementedFactoryTest.BadlyImplementedFactoryTest"
                }
            ],
            "files that changed": [
                "src/java/org/apache/commons/jxpath/ri/model/beans/NullPropertyPointer.java"
            ]
        },
        {
            "bug index": "4",
            "bug id": "JXPATH-83",
            "hexsha": "71ca5c1faae6447f42f363d5157d6391dcc091d7",
            "fix_hash": "9f912437a14392f8d4c98aa811e9134fbf7b5a52",
            "description": "When an xml contains a value with leading or trailing spaces, JXPath trims this value.\nexample: <value>     12324 56</value> is retrieved by JXPath as : '1234 56' while I expect '     1234 56'.\n",
            "commit number version hash": 340,
            "commit number": 226,
            "function that changed": [
                {
                    "function name": "getLanguage",
                    "function params": [],
                    "file name": "DOMNodePointer.java",
                    "file old path": "src/java/org/apache/commons/jxpath/ri/model/dom/DOMNodePointer.java",
                    "file new path": "src/java/org/apache/commons/jxpath/ri/model/dom/DOMNodePointer.java",
                    "full name": "src.java.org.apache.commons.jxpath.ri.model.dom.DOMNodePointer.getLanguage"
                },
                {
                    "function name": "getValue",
                    "function params": [],
                    "file name": "DOMNodePointer.java",
                    "file old path": "src/java/org/apache/commons/jxpath/ri/model/dom/DOMNodePointer.java",
                    "file new path": "src/java/org/apache/commons/jxpath/ri/model/dom/DOMNodePointer.java",
                    "full name": "src.java.org.apache.commons.jxpath.ri.model.dom.DOMNodePointer.getValue"
                },
                {
                    "function name": "findEnclosingAttribute",
                    "function params": [
                        "n",
                        "attrName"
                    ],
                    "file name": "DOMNodePointer.java",
                    "file old path": "src/java/org/apache/commons/jxpath/ri/model/dom/DOMNodePointer.java",
                    "file new path": "src/java/org/apache/commons/jxpath/ri/model/dom/DOMNodePointer.java",
                    "full name": "src.java.org.apache.commons.jxpath.ri.model.dom.DOMNodePointer.findEnclosingAttribute"
                },
                {
                    "function name": "stringValue",
                    "function params": [
                        "node"
                    ],
                    "file name": "DOMNodePointer.java",
                    "file old path": "src/java/org/apache/commons/jxpath/ri/model/dom/DOMNodePointer.java",
                    "file new path": "src/java/org/apache/commons/jxpath/ri/model/dom/DOMNodePointer.java",
                    "full name": "src.java.org.apache.commons.jxpath.ri.model.dom.DOMNodePointer.stringValue"
                },
                {
                    "function name": "nodeParent",
                    "function params": [
                        "node"
                    ],
                    "file name": "JDOMNodePointer.java",
                    "file old path": "src/java/org/apache/commons/jxpath/ri/model/jdom/JDOMNodePointer.java",
                    "file new path": "src/java/org/apache/commons/jxpath/ri/model/jdom/JDOMNodePointer.java",
                    "full name": "src.java.org.apache.commons.jxpath.ri.model.jdom.JDOMNodePointer.nodeParent"
                },
                {
                    "function name": "getLanguage",
                    "function params": [],
                    "file name": "JDOMNodePointer.java",
                    "file old path": "src/java/org/apache/commons/jxpath/ri/model/jdom/JDOMNodePointer.java",
                    "file new path": "src/java/org/apache/commons/jxpath/ri/model/jdom/JDOMNodePointer.java",
                    "full name": "src.java.org.apache.commons.jxpath.ri.model.jdom.JDOMNodePointer.getLanguage"
                },
                {
                    "function name": "findEnclosingAttribute",
                    "function params": [
                        "n",
                        "attrName",
                        "ns"
                    ],
                    "file name": "JDOMNodePointer.java",
                    "file old path": "src/java/org/apache/commons/jxpath/ri/model/jdom/JDOMNodePointer.java",
                    "file new path": "src/java/org/apache/commons/jxpath/ri/model/jdom/JDOMNodePointer.java",
                    "full name": "src.java.org.apache.commons.jxpath.ri.model.jdom.JDOMNodePointer.findEnclosingAttribute"
                },
                {
                    "function name": "getValue",
                    "function params": [],
                    "file name": "JDOMNodePointer.java",
                    "file old path": "src/java/org/apache/commons/jxpath/ri/model/jdom/JDOMNodePointer.java",
                    "file new path": "src/java/org/apache/commons/jxpath/ri/model/jdom/JDOMNodePointer.java",
                    "full name": "src.java.org.apache.commons.jxpath.ri.model.jdom.JDOMNodePointer.getValue"
                },
                {
                    "function name": "suite",
                    "function params": [],
                    "file name": "JXPathTestSuite.java",
                    "file old path": "src/test/org/apache/commons/jxpath/JXPathTestSuite.java",
                    "file new path": "src/test/org/apache/commons/jxpath/JXPathTestSuite.java",
                    "full name": "src.test.org.apache.commons.jxpath.JXPathTestSuite.suite"
                },
                {
                    "function name": "testNestedJDOM",
                    "function params": [],
                    "file name": "XMLSpaceTest.java",
                    "file old path": null,
                    "file new path": "src/test/org/apache/commons/jxpath/ri/model/XMLSpaceTest.java",
                    "full name": "src.test.org.apache.commons.jxpath.ri.model.XMLSpaceTest.testNestedJDOM"
                },
                {
                    "function name": "testUnspecifiedDOM",
                    "function params": [],
                    "file name": "XMLSpaceTest.java",
                    "file old path": null,
                    "file new path": "src/test/org/apache/commons/jxpath/ri/model/XMLSpaceTest.java",
                    "full name": "src.test.org.apache.commons.jxpath.ri.model.XMLSpaceTest.testUnspecifiedDOM"
                },
                {
                    "function name": "testNestedWithCommentsDOM",
                    "function params": [],
                    "file name": "XMLSpaceTest.java",
                    "file old path": null,
                    "file new path": "src/test/org/apache/commons/jxpath/ri/model/XMLSpaceTest.java",
                    "full name": "src.test.org.apache.commons.jxpath.ri.model.XMLSpaceTest.testNestedWithCommentsDOM"
                },
                {
                    "function name": "testNestedDOM",
                    "function params": [],
                    "file name": "XMLSpaceTest.java",
                    "file old path": null,
                    "file new path": "src/test/org/apache/commons/jxpath/ri/model/XMLSpaceTest.java",
                    "full name": "src.test.org.apache.commons.jxpath.ri.model.XMLSpaceTest.testNestedDOM"
                },
                {
                    "function name": "testUnspecifiedJDOM",
                    "function params": [],
                    "file name": "XMLSpaceTest.java",
                    "file old path": null,
                    "file new path": "src/test/org/apache/commons/jxpath/ri/model/XMLSpaceTest.java",
                    "full name": "src.test.org.apache.commons.jxpath.ri.model.XMLSpaceTest.testUnspecifiedJDOM"
                },
                {
                    "function name": "testDefaultDOM",
                    "function params": [],
                    "file name": "XMLSpaceTest.java",
                    "file old path": null,
                    "file new path": "src/test/org/apache/commons/jxpath/ri/model/XMLSpaceTest.java",
                    "full name": "src.test.org.apache.commons.jxpath.ri.model.XMLSpaceTest.testDefaultDOM"
                },
                {
                    "function name": "testPreserveDOM",
                    "function params": [],
                    "file name": "XMLSpaceTest.java",
                    "file old path": null,
                    "file new path": "src/test/org/apache/commons/jxpath/ri/model/XMLSpaceTest.java",
                    "full name": "src.test.org.apache.commons.jxpath.ri.model.XMLSpaceTest.testPreserveDOM"
                },
                {
                    "function name": "createDocumentContainer",
                    "function params": [
                        "model"
                    ],
                    "file name": "XMLSpaceTest.java",
                    "file old path": null,
                    "file new path": "src/test/org/apache/commons/jxpath/ri/model/XMLSpaceTest.java",
                    "full name": "src.test.org.apache.commons.jxpath.ri.model.XMLSpaceTest.createDocumentContainer"
                },
                {
                    "function name": "testDefaultJDOM",
                    "function params": [],
                    "file name": "XMLSpaceTest.java",
                    "file old path": null,
                    "file new path": "src/test/org/apache/commons/jxpath/ri/model/XMLSpaceTest.java",
                    "full name": "src.test.org.apache.commons.jxpath.ri.model.XMLSpaceTest.testDefaultJDOM"
                },
                {
                    "function name": "testNestedWithCommentsJDOM",
                    "function params": [],
                    "file name": "XMLSpaceTest.java",
                    "file old path": null,
                    "file new path": "src/test/org/apache/commons/jxpath/ri/model/XMLSpaceTest.java",
                    "full name": "src.test.org.apache.commons.jxpath.ri.model.XMLSpaceTest.testNestedWithCommentsJDOM"
                },
                {
                    "function name": "doTest",
                    "function params": [
                        "id",
                        "model",
                        "expectedValue"
                    ],
                    "file name": "XMLSpaceTest.java",
                    "file old path": null,
                    "file new path": "src/test/org/apache/commons/jxpath/ri/model/XMLSpaceTest.java",
                    "full name": "src.test.org.apache.commons.jxpath.ri.model.XMLSpaceTest.doTest"
                },
                {
                    "function name": "createContext",
                    "function params": [
                        "model"
                    ],
                    "file name": "XMLSpaceTest.java",
                    "file old path": null,
                    "file new path": "src/test/org/apache/commons/jxpath/ri/model/XMLSpaceTest.java",
                    "full name": "src.test.org.apache.commons.jxpath.ri.model.XMLSpaceTest.createContext"
                },
                {
                    "function name": "testPreserveJDOM",
                    "function params": [],
                    "file name": "XMLSpaceTest.java",
                    "file old path": null,
                    "file new path": "src/test/org/apache/commons/jxpath/ri/model/XMLSpaceTest.java",
                    "full name": "src.test.org.apache.commons.jxpath.ri.model.XMLSpaceTest.testPreserveJDOM"
                },
                {
                    "function name": "XMLSpaceTest",
                    "function params": [
                        "name"
                    ],
                    "file name": "XMLSpaceTest.java",
                    "file old path": null,
                    "file new path": "src/test/org/apache/commons/jxpath/ri/model/XMLSpaceTest.java",
                    "full name": "src.test.org.apache.commons.jxpath.ri.model.XMLSpaceTest.XMLSpaceTest"
                }
            ],
            "files that changed": [
                "src/java/org/apache/commons/jxpath/ri/model/dom/DOMNodePointer.java",
                "src/java/org/apache/commons/jxpath/ri/model/jdom/JDOMNodePointer.java",
                "src/test/org/apache/commons/jxpath/JXPathTestSuite.java"
            ]
        },
        {
            "bug index": "5",
            "bug id": "JXPATH-89",
            "hexsha": "71ca5c1faae6447f42f363d5157d6391dcc091d7",
            "fix_hash": "2a01dfaf8d6abbabc7e4cd5cfd05d2e0b4886708",
            "description": "For XPath \"$var | /MAIN/A\" exception is thrown:\n\norg.apache.commons.jxpath.JXPathException: Cannot compare pointers that do not belong to the same tree: '$var' and ''\n\tat org.apache.commons.jxpath.ri.model.NodePointer.compareNodePointers(NodePointer.java:665)\n\tat org.apache.commons.jxpath.ri.model.NodePointer.compareNodePointers(NodePointer.java:649)\n\tat org.apache.commons.jxpath.ri.model.NodePointer.compareNodePointers(NodePointer.java:649)\n\tat org.apache.commons.jxpath.ri.model.NodePointer.compareTo(NodePointer.java:639)\n\tat java.util.Arrays.mergeSort(Arrays.java:1152)\n\tat java.util.Arrays.sort(Arrays.java:1079)\n\tat java.util.Collections.sort(Collections.java:113)\n\tat org.apache.commons.jxpath.ri.EvalContext.constructIterator(EvalContext.java:176)\n\tat org.apache.commons.jxpath.ri.EvalContext.hasNext(EvalContext.java:100)\n\tat org.apache.commons.jxpath.JXPathContext.selectNodes(JXPathContext.java:648)\n\tat org.apache.commons.jxpath.ri.model.VariablePointerTestCase.testUnionOfVariableAndNode(VariablePointerTestCase.java:76)",
            "commit number version hash": 340,
            "commit number": 237,
            "function that changed": [
                {
                    "function name": "compareNodePointers",
                    "function params": [
                        "p1",
                        "depth1",
                        "p2",
                        "depth2"
                    ],
                    "file name": "NodePointer.java",
                    "file old path": "src/java/org/apache/commons/jxpath/ri/model/NodePointer.java",
                    "file new path": "src/java/org/apache/commons/jxpath/ri/model/NodePointer.java",
                    "full name": "src.java.org.apache.commons.jxpath.ri.model.NodePointer.compareNodePointers"
                },
                {
                    "function name": "testUnionOfVariableAndNode",
                    "function params": [],
                    "file name": "VariableTest.java",
                    "file old path": "src/test/org/apache/commons/jxpath/ri/compiler/VariableTest.java",
                    "file new path": "src/test/org/apache/commons/jxpath/ri/compiler/VariableTest.java",
                    "full name": "src.test.org.apache.commons.jxpath.ri.compiler.VariableTest.testUnionOfVariableAndNode"
                },
                {
                    "function name": "testInvalidVariableName",
                    "function params": [],
                    "file name": "VariableTest.java",
                    "file old path": "src/test/org/apache/commons/jxpath/ri/compiler/VariableTest.java",
                    "file new path": "src/test/org/apache/commons/jxpath/ri/compiler/VariableTest.java",
                    "full name": "src.test.org.apache.commons.jxpath.ri.compiler.VariableTest.testInvalidVariableName"
                }
            ],
            "files that changed": [
                "src/java/org/apache/commons/jxpath/ri/model/NodePointer.java",
                "src/test/org/apache/commons/jxpath/ri/compiler/VariableTest.java"
            ]
        },
        {
            "bug index": "6",
            "bug id": "JXPATH-94",
            "hexsha": "71ca5c1faae6447f42f363d5157d6391dcc091d7",
            "fix_hash": "9b6406bf37af48e843b02fa8fd53dc673f3cbd1e",
            "description": "given e.g. variable d={\"a\", \"b\"}, the spec implies that \"$d = 'a'\" and that \"$d = 'b'\".  Instead of iterating the variable's components its immediate content (here, the String[]) is compared, causing the aforementioned assertions to fail.",
            "commit number version hash": 340,
            "commit number": 251,
            "function that changed": [
                {
                    "function name": "equal",
                    "function params": [
                        "context",
                        "left",
                        "right"
                    ],
                    "file name": "CoreOperationCompare.java",
                    "file old path": "src/java/org/apache/commons/jxpath/ri/compiler/CoreOperationCompare.java",
                    "file new path": "src/java/org/apache/commons/jxpath/ri/compiler/CoreOperationCompare.java",
                    "full name": "src.java.org.apache.commons.jxpath.ri.compiler.CoreOperationCompare.equal"
                },
                {
                    "function name": "testIterateVariable",
                    "function params": [],
                    "file name": "VariableTest.java",
                    "file old path": "src/test/org/apache/commons/jxpath/ri/compiler/VariableTest.java",
                    "file new path": "src/test/org/apache/commons/jxpath/ri/compiler/VariableTest.java",
                    "full name": "src.test.org.apache.commons.jxpath.ri.compiler.VariableTest.testIterateVariable"
                }
            ],
            "files that changed": [
                "src/java/org/apache/commons/jxpath/ri/compiler/CoreOperationCompare.java",
                "src/test/org/apache/commons/jxpath/ri/compiler/VariableTest.java"
            ]
        },
        {
            "bug index": "7",
            "bug id": "JXPATH-93",
            "hexsha": "71ca5c1faae6447f42f363d5157d6391dcc091d7",
            "fix_hash": "58fac658aba985ba77f8bd0156c6d01bec8d991b",
            "description": "According to XPath specification:\n\"If both objects to be compared are node-sets, then the comparison will be true if and only if there is a node in the first node-set and a node in the second node-set such that the result of performing the comparison on the string-values of the two nodes is true. If one object to be compared is a node-set and the other is a number, then the comparison will be true if and only if there is a node in the node-set such that the result of performing the comparison on the number to be compared and on the result of converting the string-value of that node to a number using the number function is true.\"\n\nBut following example illustrates, that this is not a JXPath behaviour:\n\n\n        JXPathContext pathContext = JXPathContext\n                .newContext(DocumentBuilderFactory.newInstance()\n                        .newDocumentBuilder().parse(\n                                new InputSource(new StringReader(\n                                        \"<?xml version=\\\"1.0\\\" encoding=\\\"UTF-8\\\"?>\\r\\n\"\n                                                + \"<doc/>\"))));\n        Boolean result = (Boolean) pathContext.getValue(\"2.0 > child1\",\n                Boolean.class);\n        assertFalse(result.booleanValue());\n\n\"child1\" is not found - right operand node set is empty, but result is TRUE, instead of FALSE.\n\nPlease, check greaterThan(), lesserThan(), etc methods of org.apache.xpath.objects.XObject for possible solution :)",
            "commit number version hash": 340,
            "commit number": 252,
            "function that changed": [
                {
                    "function name": "evaluateCompare",
                    "function params": [
                        "compare"
                    ],
                    "file name": "CoreOperationGreaterThan.java",
                    "file old path": "src/java/org/apache/commons/jxpath/ri/compiler/CoreOperationGreaterThan.java",
                    "file new path": "src/java/org/apache/commons/jxpath/ri/compiler/CoreOperationGreaterThan.java",
                    "full name": "src.java.org.apache.commons.jxpath.ri.compiler.CoreOperationGreaterThan.evaluateCompare"
                },
                {
                    "function name": "evaluateCompare",
                    "function params": [
                        "compare"
                    ],
                    "file name": "CoreOperationGreaterThanOrEqual.java",
                    "file old path": "src/java/org/apache/commons/jxpath/ri/compiler/CoreOperationGreaterThanOrEqual.java",
                    "file new path": "src/java/org/apache/commons/jxpath/ri/compiler/CoreOperationGreaterThanOrEqual.java",
                    "full name": "src.java.org.apache.commons.jxpath.ri.compiler.CoreOperationGreaterThanOrEqual.evaluateCompare"
                },
                {
                    "function name": "evaluateCompare",
                    "function params": [
                        "compare"
                    ],
                    "file name": "CoreOperationLessThan.java",
                    "file old path": "src/java/org/apache/commons/jxpath/ri/compiler/CoreOperationLessThan.java",
                    "file new path": "src/java/org/apache/commons/jxpath/ri/compiler/CoreOperationLessThan.java",
                    "full name": "src.java.org.apache.commons.jxpath.ri.compiler.CoreOperationLessThan.evaluateCompare"
                },
                {
                    "function name": "evaluateCompare",
                    "function params": [
                        "compare"
                    ],
                    "file name": "CoreOperationLessThanOrEqual.java",
                    "file old path": "src/java/org/apache/commons/jxpath/ri/compiler/CoreOperationLessThanOrEqual.java",
                    "file new path": "src/java/org/apache/commons/jxpath/ri/compiler/CoreOperationLessThanOrEqual.java",
                    "full name": "src.java.org.apache.commons.jxpath.ri.compiler.CoreOperationLessThanOrEqual.evaluateCompare"
                },
                {
                    "function name": "containsMatch",
                    "function params": [
                        "it",
                        "value"
                    ],
                    "file name": "CoreOperationRelationalExpression.java",
                    "file old path": null,
                    "file new path": "src/java/org/apache/commons/jxpath/ri/compiler/CoreOperationRelationalExpression.java",
                    "full name": "src.java.org.apache.commons.jxpath.ri.compiler.CoreOperationRelationalExpression.containsMatch"
                },
                {
                    "function name": "compute",
                    "function params": [
                        "left",
                        "right"
                    ],
                    "file name": "CoreOperationRelationalExpression.java",
                    "file old path": null,
                    "file new path": "src/java/org/apache/commons/jxpath/ri/compiler/CoreOperationRelationalExpression.java",
                    "full name": "src.java.org.apache.commons.jxpath.ri.compiler.CoreOperationRelationalExpression.compute"
                },
                {
                    "function name": "findMatch",
                    "function params": [
                        "lit",
                        "rit"
                    ],
                    "file name": "CoreOperationRelationalExpression.java",
                    "file old path": null,
                    "file new path": "src/java/org/apache/commons/jxpath/ri/compiler/CoreOperationRelationalExpression.java",
                    "full name": "src.java.org.apache.commons.jxpath.ri.compiler.CoreOperationRelationalExpression.findMatch"
                },
                {
                    "function name": "getPrecedence",
                    "function params": [],
                    "file name": "CoreOperationRelationalExpression.java",
                    "file old path": null,
                    "file new path": "src/java/org/apache/commons/jxpath/ri/compiler/CoreOperationRelationalExpression.java",
                    "full name": "src.java.org.apache.commons.jxpath.ri.compiler.CoreOperationRelationalExpression.getPrecedence"
                },
                {
                    "function name": "computeValue",
                    "function params": [
                        "context"
                    ],
                    "file name": "CoreOperationRelationalExpression.java",
                    "file old path": null,
                    "file new path": "src/java/org/apache/commons/jxpath/ri/compiler/CoreOperationRelationalExpression.java",
                    "full name": "src.java.org.apache.commons.jxpath.ri.compiler.CoreOperationRelationalExpression.computeValue"
                },
                {
                    "function name": "compare",
                    "function params": [
                        "l",
                        "r"
                    ],
                    "file name": "CoreOperationRelationalExpression.java",
                    "file old path": null,
                    "file new path": "src/java/org/apache/commons/jxpath/ri/compiler/CoreOperationRelationalExpression.java",
                    "full name": "src.java.org.apache.commons.jxpath.ri.compiler.CoreOperationRelationalExpression.compare"
                },
                {
                    "function name": "isSymmetric",
                    "function params": [],
                    "file name": "CoreOperationRelationalExpression.java",
                    "file old path": null,
                    "file new path": "src/java/org/apache/commons/jxpath/ri/compiler/CoreOperationRelationalExpression.java",
                    "full name": "src.java.org.apache.commons.jxpath.ri.compiler.CoreOperationRelationalExpression.isSymmetric"
                },
                {
                    "function name": "reduce",
                    "function params": [
                        "o"
                    ],
                    "file name": "CoreOperationRelationalExpression.java",
                    "file old path": null,
                    "file new path": "src/java/org/apache/commons/jxpath/ri/compiler/CoreOperationRelationalExpression.java",
                    "full name": "src.java.org.apache.commons.jxpath.ri.compiler.CoreOperationRelationalExpression.reduce"
                },
                {
                    "function name": "CoreOperationRelationalExpression",
                    "function params": [
                        "args"
                    ],
                    "file name": "CoreOperationRelationalExpression.java",
                    "file old path": null,
                    "file new path": "src/java/org/apache/commons/jxpath/ri/compiler/CoreOperationRelationalExpression.java",
                    "full name": "src.java.org.apache.commons.jxpath.ri.compiler.CoreOperationRelationalExpression.CoreOperationRelationalExpression"
                },
                {
                    "function name": "setUp",
                    "function params": [],
                    "file name": "CoreOperationTest.java",
                    "file old path": "src/test/org/apache/commons/jxpath/ri/compiler/CoreOperationTest.java",
                    "file new path": "src/test/org/apache/commons/jxpath/ri/compiler/CoreOperationTest.java",
                    "full name": "src.test.org.apache.commons.jxpath.ri.compiler.CoreOperationTest.setUp"
                },
                {
                    "function name": "testNodeSetOperations",
                    "function params": [],
                    "file name": "CoreOperationTest.java",
                    "file old path": "src/test/org/apache/commons/jxpath/ri/compiler/CoreOperationTest.java",
                    "file new path": "src/test/org/apache/commons/jxpath/ri/compiler/CoreOperationTest.java",
                    "full name": "src.test.org.apache.commons.jxpath.ri.compiler.CoreOperationTest.testNodeSetOperations"
                }
            ],
            "files that changed": [
                "src/java/org/apache/commons/jxpath/ri/compiler/CoreOperationGreaterThan.java",
                "src/java/org/apache/commons/jxpath/ri/compiler/CoreOperationGreaterThanOrEqual.java",
                "src/java/org/apache/commons/jxpath/ri/compiler/CoreOperationLessThan.java",
                "src/java/org/apache/commons/jxpath/ri/compiler/CoreOperationLessThanOrEqual.java",
                "src/test/org/apache/commons/jxpath/ri/compiler/CoreOperationTest.java"
            ]
        },
        {
            "bug index": "8",
            "bug id": "JXPATH-95",
            "hexsha": "71ca5c1faae6447f42f363d5157d6391dcc091d7",
            "fix_hash": "1befe1b93eec887971e729b89dd4d900319a06b0",
            "description": "'NaN' > 'NaN' is true, but should be FALSE",
            "commit number version hash": 340,
            "commit number": 255,
            "function that changed": [
                {
                    "function name": "containsMatch",
                    "function params": [
                        "it",
                        "value"
                    ],
                    "file name": "CoreOperationRelationalExpression.java",
                    "file old path": "src/java/org/apache/commons/jxpath/ri/compiler/CoreOperationRelationalExpression.java",
                    "file new path": "src/java/org/apache/commons/jxpath/ri/compiler/CoreOperationRelationalExpression.java",
                    "full name": "src.java.org.apache.commons.jxpath.ri.compiler.CoreOperationRelationalExpression.containsMatch"
                },
                {
                    "function name": "compute",
                    "function params": [
                        "left",
                        "right"
                    ],
                    "file name": "CoreOperationRelationalExpression.java",
                    "file old path": "src/java/org/apache/commons/jxpath/ri/compiler/CoreOperationRelationalExpression.java",
                    "file new path": "src/java/org/apache/commons/jxpath/ri/compiler/CoreOperationRelationalExpression.java",
                    "full name": "src.java.org.apache.commons.jxpath.ri.compiler.CoreOperationRelationalExpression.compute"
                },
                {
                    "function name": "setUp",
                    "function params": [],
                    "file name": "CoreOperationTest.java",
                    "file old path": "src/test/org/apache/commons/jxpath/ri/compiler/CoreOperationTest.java",
                    "file new path": "src/test/org/apache/commons/jxpath/ri/compiler/CoreOperationTest.java",
                    "full name": "src.test.org.apache.commons.jxpath.ri.compiler.CoreOperationTest.setUp"
                },
                {
                    "function name": "testNan",
                    "function params": [],
                    "file name": "CoreOperationTest.java",
                    "file old path": "src/test/org/apache/commons/jxpath/ri/compiler/CoreOperationTest.java",
                    "file new path": "src/test/org/apache/commons/jxpath/ri/compiler/CoreOperationTest.java",
                    "full name": "src.test.org.apache.commons.jxpath.ri.compiler.CoreOperationTest.testNan"
                }
            ],
            "files that changed": [
                "src/java/org/apache/commons/jxpath/ri/compiler/CoreOperationRelationalExpression.java",
                "src/test/org/apache/commons/jxpath/ri/compiler/CoreOperationTest.java"
            ]
        },
        {
            "bug index": "9",
            "bug id": "JXPATH-95",
            "hexsha": "71ca5c1faae6447f42f363d5157d6391dcc091d7",
            "fix_hash": "40689aa2f3e6e601b51f6c590dbaf079325da772",
            "description": "'NaN' > 'NaN' is true, but should be FALSE",
            "commit number version hash": 340,
            "commit number": 257,
            "function that changed": [
                {
                    "function name": "CoreOperationCompare",
                    "function params": [
                        "arg1",
                        "arg2",
                        "invert"
                    ],
                    "file name": "CoreOperationCompare.java",
                    "file old path": "src/java/org/apache/commons/jxpath/ri/compiler/CoreOperationCompare.java",
                    "file new path": "src/java/org/apache/commons/jxpath/ri/compiler/CoreOperationCompare.java",
                    "full name": "src.java.org.apache.commons.jxpath.ri.compiler.CoreOperationCompare.CoreOperationCompare"
                },
                {
                    "function name": "CoreOperationCompare",
                    "function params": [
                        "arg1",
                        "arg2"
                    ],
                    "file name": "CoreOperationCompare.java",
                    "file old path": "src/java/org/apache/commons/jxpath/ri/compiler/CoreOperationCompare.java",
                    "file new path": "src/java/org/apache/commons/jxpath/ri/compiler/CoreOperationCompare.java",
                    "full name": "src.java.org.apache.commons.jxpath.ri.compiler.CoreOperationCompare.CoreOperationCompare"
                },
                {
                    "function name": "isSymmetric",
                    "function params": [],
                    "file name": "CoreOperationCompare.java",
                    "file old path": "src/java/org/apache/commons/jxpath/ri/compiler/CoreOperationCompare.java",
                    "file new path": "src/java/org/apache/commons/jxpath/ri/compiler/CoreOperationCompare.java",
                    "full name": "src.java.org.apache.commons.jxpath.ri.compiler.CoreOperationCompare.isSymmetric"
                },
                {
                    "function name": "getPrecedence",
                    "function params": [],
                    "file name": "CoreOperationCompare.java",
                    "file old path": "src/java/org/apache/commons/jxpath/ri/compiler/CoreOperationCompare.java",
                    "file new path": "src/java/org/apache/commons/jxpath/ri/compiler/CoreOperationCompare.java",
                    "full name": "src.java.org.apache.commons.jxpath.ri.compiler.CoreOperationCompare.getPrecedence"
                },
                {
                    "function name": "computeValue",
                    "function params": [
                        "context"
                    ],
                    "file name": "CoreOperationCompare.java",
                    "file old path": "src/java/org/apache/commons/jxpath/ri/compiler/CoreOperationCompare.java",
                    "file new path": "src/java/org/apache/commons/jxpath/ri/compiler/CoreOperationCompare.java",
                    "full name": "src.java.org.apache.commons.jxpath.ri.compiler.CoreOperationCompare.computeValue"
                },
                {
                    "function name": "equal",
                    "function params": [
                        "l",
                        "r"
                    ],
                    "file name": "CoreOperationCompare.java",
                    "file old path": "src/java/org/apache/commons/jxpath/ri/compiler/CoreOperationCompare.java",
                    "file new path": "src/java/org/apache/commons/jxpath/ri/compiler/CoreOperationCompare.java",
                    "full name": "src.java.org.apache.commons.jxpath.ri.compiler.CoreOperationCompare.equal"
                },
                {
                    "function name": "CoreOperationNotEqual",
                    "function params": [
                        "arg1",
                        "arg2"
                    ],
                    "file name": "CoreOperationNotEqual.java",
                    "file old path": "src/java/org/apache/commons/jxpath/ri/compiler/CoreOperationNotEqual.java",
                    "file new path": "src/java/org/apache/commons/jxpath/ri/compiler/CoreOperationNotEqual.java",
                    "full name": "src.java.org.apache.commons.jxpath.ri.compiler.CoreOperationNotEqual.CoreOperationNotEqual"
                },
                {
                    "function name": "testNan",
                    "function params": [],
                    "file name": "CoreOperationTest.java",
                    "file old path": "src/test/org/apache/commons/jxpath/ri/compiler/CoreOperationTest.java",
                    "file new path": "src/test/org/apache/commons/jxpath/ri/compiler/CoreOperationTest.java",
                    "full name": "src.test.org.apache.commons.jxpath.ri.compiler.CoreOperationTest.testNan"
                }
            ],
            "files that changed": [
                "src/java/org/apache/commons/jxpath/ri/compiler/CoreOperationCompare.java",
                "src/java/org/apache/commons/jxpath/ri/compiler/CoreOperationEqual.java",
                "src/java/org/apache/commons/jxpath/ri/compiler/CoreOperationNotEqual.java",
                "src/test/org/apache/commons/jxpath/ri/compiler/CoreOperationTest.java"
            ]
        },
        {
            "bug index": "10",
            "bug id": "JXPATH-93",
            "hexsha": "71ca5c1faae6447f42f363d5157d6391dcc091d7",
            "fix_hash": "3b3e58d3d35aaa7e8e35c0856611f4bfc3f291c7",
            "description": "According to XPath specification:\n\"If both objects to be compared are node-sets, then the comparison will be true if and only if there is a node in the first node-set and a node in the second node-set such that the result of performing the comparison on the string-values of the two nodes is true. If one object to be compared is a node-set and the other is a number, then the comparison will be true if and only if there is a node in the node-set such that the result of performing the comparison on the number to be compared and on the result of converting the string-value of that node to a number using the number function is true.\"\n\nBut following example illustrates, that this is not a JXPath behaviour:\n\n\n        JXPathContext pathContext = JXPathContext\n                .newContext(DocumentBuilderFactory.newInstance()\n                        .newDocumentBuilder().parse(\n                                new InputSource(new StringReader(\n                                        \"<?xml version=\\\"1.0\\\" encoding=\\\"UTF-8\\\"?>\\r\\n\"\n                                                + \"<doc/>\"))));\n        Boolean result = (Boolean) pathContext.getValue(\"2.0 > child1\",\n                Boolean.class);\n        assertFalse(result.booleanValue());\n\n\"child1\" is not found - right operand node set is empty, but result is TRUE, instead of FALSE.\n\nPlease, check greaterThan(), lesserThan(), etc methods of org.apache.xpath.objects.XObject for possible solution :)",
            "commit number version hash": 340,
            "commit number": 259,
            "function that changed": [
                {
                    "function name": "computeValue",
                    "function params": [
                        "context"
                    ],
                    "file name": "CoreOperationRelationalExpression.java",
                    "file old path": "src/java/org/apache/commons/jxpath/ri/compiler/CoreOperationRelationalExpression.java",
                    "file new path": "src/java/org/apache/commons/jxpath/ri/compiler/CoreOperationRelationalExpression.java",
                    "full name": "src.java.org.apache.commons.jxpath.ri.compiler.CoreOperationRelationalExpression.computeValue"
                },
                {
                    "function name": "testEmptyNodeSetOperations",
                    "function params": [],
                    "file name": "CoreOperationTest.java",
                    "file old path": "src/test/org/apache/commons/jxpath/ri/compiler/CoreOperationTest.java",
                    "file new path": "src/test/org/apache/commons/jxpath/ri/compiler/CoreOperationTest.java",
                    "full name": "src.test.org.apache.commons.jxpath.ri.compiler.CoreOperationTest.testEmptyNodeSetOperations"
                }
            ],
            "files that changed": [
                "src/java/org/apache/commons/jxpath/ri/compiler/CoreOperationRelationalExpression.java",
                "src/test/org/apache/commons/jxpath/ri/compiler/CoreOperationTest.java"
            ]
        },
        {
            "bug index": "11",
            "bug id": "JXPATH-97",
            "hexsha": "71ca5c1faae6447f42f363d5157d6391dcc091d7",
            "fix_hash": "52d73022820d163104c6419f25ca955f86464f63",
            "description": "Mcduffey, Joe <jdmcduf@nsa.gov>\n\nCan someone tell me how to register namespaces so that attributes with namespaces does not cause the exception\n\norg.apache.common.ri.model.dom.DOMNodePointer.createAttribute\nunknown namespace prefix: xsi\n\nFor example the following\n<ElementA  A:myAttr=\"Mytype\">\n  <B:ElementB>MY VALUE</B:ElementB>\n</ElementA>\n\nWould result in the following exception:\norg.apache.common.ri.model.dom.DOMNodePointer.createAttribute\nunknown namespace prefix: A\n\nFYI: In this example there was a namespace decaration in the file and I also manually called the\nregisterNamespace(A,\"/http...\");\nregisterNamespace(B,\"/http...\");\n\nThere was no problem encountered for elements. Only attributes. Can someone help? Thanks.",
            "commit number version hash": 340,
            "commit number": 263,
            "function that changed": [
                {
                    "function name": "getAttribute",
                    "function params": [
                        "element",
                        "name"
                    ],
                    "file name": "DOMAttributeIterator.java",
                    "file old path": "src/java/org/apache/commons/jxpath/ri/model/dom/DOMAttributeIterator.java",
                    "file new path": "src/java/org/apache/commons/jxpath/ri/model/dom/DOMAttributeIterator.java",
                    "full name": "src.java.org.apache.commons.jxpath.ri.model.dom.DOMAttributeIterator.getAttribute"
                },
                {
                    "function name": "JDOMAttributeIterator",
                    "function params": [
                        "parent",
                        "name"
                    ],
                    "file name": "JDOMAttributeIterator.java",
                    "file old path": "src/java/org/apache/commons/jxpath/ri/model/jdom/JDOMAttributeIterator.java",
                    "file new path": "src/java/org/apache/commons/jxpath/ri/model/jdom/JDOMAttributeIterator.java",
                    "full name": "src.java.org.apache.commons.jxpath.ri.model.jdom.JDOMAttributeIterator.JDOMAttributeIterator"
                },
                {
                    "function name": "testNamespaceMapping",
                    "function params": [],
                    "file name": "XMLModelTestCase.java",
                    "file old path": "src/test/org/apache/commons/jxpath/ri/model/XMLModelTestCase.java",
                    "file new path": "src/test/org/apache/commons/jxpath/ri/model/XMLModelTestCase.java",
                    "full name": "src.test.org.apache.commons.jxpath.ri.model.XMLModelTestCase.testNamespaceMapping"
                }
            ],
            "files that changed": [
                "src/java/org/apache/commons/jxpath/ri/model/dom/DOMAttributeIterator.java",
                "src/java/org/apache/commons/jxpath/ri/model/jdom/JDOMAttributeIterator.java",
                "src/test/org/apache/commons/jxpath/ri/model/XMLModelTestCase.java"
            ]
        },
        {
            "bug index": "12",
            "bug id": "JXPATH-97",
            "hexsha": "71ca5c1faae6447f42f363d5157d6391dcc091d7",
            "fix_hash": "d52074012200f55cbd3635591b914e2c1b19674f",
            "description": "Mcduffey, Joe <jdmcduf@nsa.gov>\n\nCan someone tell me how to register namespaces so that attributes with namespaces does not cause the exception\n\norg.apache.common.ri.model.dom.DOMNodePointer.createAttribute\nunknown namespace prefix: xsi\n\nFor example the following\n<ElementA  A:myAttr=\"Mytype\">\n  <B:ElementB>MY VALUE</B:ElementB>\n</ElementA>\n\nWould result in the following exception:\norg.apache.common.ri.model.dom.DOMNodePointer.createAttribute\nunknown namespace prefix: A\n\nFYI: In this example there was a namespace decaration in the file and I also manually called the\nregisterNamespace(A,\"/http...\");\nregisterNamespace(B,\"/http...\");\n\nThere was no problem encountered for elements. Only attributes. Can someone help? Thanks.",
            "commit number version hash": 340,
            "commit number": 264,
            "function that changed": [
                {
                    "function name": "testNode",
                    "function params": [
                        "node",
                        "test"
                    ],
                    "file name": "DOMNodePointer.java",
                    "file old path": "src/java/org/apache/commons/jxpath/ri/model/dom/DOMNodePointer.java",
                    "file new path": "src/java/org/apache/commons/jxpath/ri/model/dom/DOMNodePointer.java",
                    "full name": "src.java.org.apache.commons.jxpath.ri.model.dom.DOMNodePointer.testNode"
                },
                {
                    "function name": "testNode",
                    "function params": [
                        "pointer",
                        "node",
                        "test"
                    ],
                    "file name": "JDOMNodePointer.java",
                    "file old path": "src/java/org/apache/commons/jxpath/ri/model/jdom/JDOMNodePointer.java",
                    "file new path": "src/java/org/apache/commons/jxpath/ri/model/jdom/JDOMNodePointer.java",
                    "full name": "src.java.org.apache.commons.jxpath.ri.model.jdom.JDOMNodePointer.testNode"
                },
                {
                    "function name": "suite",
                    "function params": [],
                    "file name": "JXPathTestSuite.java",
                    "file old path": "src/test/org/apache/commons/jxpath/JXPathTestSuite.java",
                    "file new path": "src/test/org/apache/commons/jxpath/JXPathTestSuite.java",
                    "full name": "src.test.org.apache.commons.jxpath.JXPathTestSuite.suite"
                },
                {
                    "function name": "doTestAttribute",
                    "function params": [
                        "model"
                    ],
                    "file name": "ExternalXMLNamespaceTest.java",
                    "file old path": null,
                    "file new path": "src/test/org/apache/commons/jxpath/ri/model/ExternalXMLNamespaceTest.java",
                    "full name": "src.test.org.apache.commons.jxpath.ri.model.ExternalXMLNamespaceTest.doTestAttribute"
                },
                {
                    "function name": "ExternalXMLNamespaceTest",
                    "function params": [
                        "name"
                    ],
                    "file name": "ExternalXMLNamespaceTest.java",
                    "file old path": null,
                    "file new path": "src/test/org/apache/commons/jxpath/ri/model/ExternalXMLNamespaceTest.java",
                    "full name": "src.test.org.apache.commons.jxpath.ri.model.ExternalXMLNamespaceTest.ExternalXMLNamespaceTest"
                },
                {
                    "function name": "doTest",
                    "function params": [
                        "xpath",
                        "model",
                        "expected"
                    ],
                    "file name": "ExternalXMLNamespaceTest.java",
                    "file old path": null,
                    "file new path": "src/test/org/apache/commons/jxpath/ri/model/ExternalXMLNamespaceTest.java",
                    "full name": "src.test.org.apache.commons.jxpath.ri.model.ExternalXMLNamespaceTest.doTest"
                },
                {
                    "function name": "testElementDOM",
                    "function params": [],
                    "file name": "ExternalXMLNamespaceTest.java",
                    "file old path": null,
                    "file new path": "src/test/org/apache/commons/jxpath/ri/model/ExternalXMLNamespaceTest.java",
                    "full name": "src.test.org.apache.commons.jxpath.ri.model.ExternalXMLNamespaceTest.testElementDOM"
                },
                {
                    "function name": "testAttributeDOM",
                    "function params": [],
                    "file name": "ExternalXMLNamespaceTest.java",
                    "file old path": null,
                    "file new path": "src/test/org/apache/commons/jxpath/ri/model/ExternalXMLNamespaceTest.java",
                    "full name": "src.test.org.apache.commons.jxpath.ri.model.ExternalXMLNamespaceTest.testAttributeDOM"
                },
                {
                    "function name": "createDocumentContainer",
                    "function params": [
                        "model"
                    ],
                    "file name": "ExternalXMLNamespaceTest.java",
                    "file old path": null,
                    "file new path": "src/test/org/apache/commons/jxpath/ri/model/ExternalXMLNamespaceTest.java",
                    "full name": "src.test.org.apache.commons.jxpath.ri.model.ExternalXMLNamespaceTest.createDocumentContainer"
                },
                {
                    "function name": "doTestElement",
                    "function params": [
                        "model"
                    ],
                    "file name": "ExternalXMLNamespaceTest.java",
                    "file old path": null,
                    "file new path": "src/test/org/apache/commons/jxpath/ri/model/ExternalXMLNamespaceTest.java",
                    "full name": "src.test.org.apache.commons.jxpath.ri.model.ExternalXMLNamespaceTest.doTestElement"
                }
            ],
            "files that changed": [
                "src/java/org/apache/commons/jxpath/ri/model/dom/DOMNodePointer.java",
                "src/java/org/apache/commons/jxpath/ri/model/jdom/JDOMNodePointer.java",
                "src/test/org/apache/commons/jxpath/JXPathTestSuite.java"
            ]
        },
        {
            "bug index": "13",
            "bug id": "JXPATH-97",
            "hexsha": "71ca5c1faae6447f42f363d5157d6391dcc091d7",
            "fix_hash": "15a67164cbefb9f9ae03b334888947d5fe5dccb4",
            "description": "Mcduffey, Joe <jdmcduf@nsa.gov>\n\nCan someone tell me how to register namespaces so that attributes with namespaces does not cause the exception\n\norg.apache.common.ri.model.dom.DOMNodePointer.createAttribute\nunknown namespace prefix: xsi\n\nFor example the following\n<ElementA  A:myAttr=\"Mytype\">\n  <B:ElementB>MY VALUE</B:ElementB>\n</ElementA>\n\nWould result in the following exception:\norg.apache.common.ri.model.dom.DOMNodePointer.createAttribute\nunknown namespace prefix: A\n\nFYI: In this example there was a namespace decaration in the file and I also manually called the\nregisterNamespace(A,\"/http...\");\nregisterNamespace(B,\"/http...\");\n\nThere was no problem encountered for elements. Only attributes. Can someone help? Thanks.",
            "commit number version hash": 340,
            "commit number": 265,
            "function that changed": [
                {
                    "function name": "getPrefix",
                    "function params": [
                        "namespaceURI"
                    ],
                    "file name": "NamespaceResolver.java",
                    "file old path": "src/java/org/apache/commons/jxpath/ri/NamespaceResolver.java",
                    "file new path": "src/java/org/apache/commons/jxpath/ri/NamespaceResolver.java",
                    "full name": "src.java.org.apache.commons.jxpath.ri.NamespaceResolver.getPrefix"
                },
                {
                    "function name": "getPrefix",
                    "function params": [
                        "pointer",
                        "namespaceURI"
                    ],
                    "file name": "NamespaceResolver.java",
                    "file old path": "src/java/org/apache/commons/jxpath/ri/NamespaceResolver.java",
                    "file new path": "src/java/org/apache/commons/jxpath/ri/NamespaceResolver.java",
                    "full name": "src.java.org.apache.commons.jxpath.ri.NamespaceResolver.getPrefix"
                },
                {
                    "function name": "getExternallyRegisteredNamespaceURI",
                    "function params": [
                        "prefix"
                    ],
                    "file name": "NamespaceResolver.java",
                    "file old path": "src/java/org/apache/commons/jxpath/ri/NamespaceResolver.java",
                    "file new path": "src/java/org/apache/commons/jxpath/ri/NamespaceResolver.java",
                    "full name": "src.java.org.apache.commons.jxpath.ri.NamespaceResolver.getExternallyRegisteredNamespaceURI"
                },
                {
                    "function name": "getExternallyRegisteredPrefix",
                    "function params": [
                        "namespaceURI"
                    ],
                    "file name": "NamespaceResolver.java",
                    "file old path": "src/java/org/apache/commons/jxpath/ri/NamespaceResolver.java",
                    "file new path": "src/java/org/apache/commons/jxpath/ri/NamespaceResolver.java",
                    "full name": "src.java.org.apache.commons.jxpath.ri.NamespaceResolver.getExternallyRegisteredPrefix"
                },
                {
                    "function name": "registerNamespace",
                    "function params": [
                        "prefix",
                        "namespaceURI"
                    ],
                    "file name": "NamespaceResolver.java",
                    "file old path": "src/java/org/apache/commons/jxpath/ri/NamespaceResolver.java",
                    "file new path": "src/java/org/apache/commons/jxpath/ri/NamespaceResolver.java",
                    "full name": "src.java.org.apache.commons.jxpath.ri.NamespaceResolver.registerNamespace"
                },
                {
                    "function name": "getNamespaceURI",
                    "function params": [
                        "prefix"
                    ],
                    "file name": "NamespaceResolver.java",
                    "file old path": "src/java/org/apache/commons/jxpath/ri/NamespaceResolver.java",
                    "file new path": "src/java/org/apache/commons/jxpath/ri/NamespaceResolver.java",
                    "full name": "src.java.org.apache.commons.jxpath.ri.NamespaceResolver.getNamespaceURI"
                },
                {
                    "function name": "getAttribute",
                    "function params": [
                        "element",
                        "name"
                    ],
                    "file name": "DOMAttributeIterator.java",
                    "file old path": "src/java/org/apache/commons/jxpath/ri/model/dom/DOMAttributeIterator.java",
                    "file new path": "src/java/org/apache/commons/jxpath/ri/model/dom/DOMAttributeIterator.java",
                    "full name": "src.java.org.apache.commons.jxpath.ri.model.dom.DOMAttributeIterator.getAttribute"
                },
                {
                    "function name": "createAttribute",
                    "function params": [
                        "context",
                        "name"
                    ],
                    "file name": "DOMNodePointer.java",
                    "file old path": "src/java/org/apache/commons/jxpath/ri/model/dom/DOMNodePointer.java",
                    "file new path": "src/java/org/apache/commons/jxpath/ri/model/dom/DOMNodePointer.java",
                    "full name": "src.java.org.apache.commons.jxpath.ri.model.dom.DOMNodePointer.createAttribute"
                },
                {
                    "function name": "getNamespaceResolver",
                    "function params": [],
                    "file name": "DOMNodePointer.java",
                    "file old path": "src/java/org/apache/commons/jxpath/ri/model/dom/DOMNodePointer.java",
                    "file new path": "src/java/org/apache/commons/jxpath/ri/model/dom/DOMNodePointer.java",
                    "full name": "src.java.org.apache.commons.jxpath.ri.model.dom.DOMNodePointer.getNamespaceResolver"
                },
                {
                    "function name": "JDOMAttributeIterator",
                    "function params": [
                        "parent",
                        "name"
                    ],
                    "file name": "JDOMAttributeIterator.java",
                    "file old path": "src/java/org/apache/commons/jxpath/ri/model/jdom/JDOMAttributeIterator.java",
                    "file new path": "src/java/org/apache/commons/jxpath/ri/model/jdom/JDOMAttributeIterator.java",
                    "full name": "src.java.org.apache.commons.jxpath.ri.model.jdom.JDOMAttributeIterator.JDOMAttributeIterator"
                },
                {
                    "function name": "getNamespaceResolver",
                    "function params": [],
                    "file name": "JDOMNodePointer.java",
                    "file old path": "src/java/org/apache/commons/jxpath/ri/model/jdom/JDOMNodePointer.java",
                    "file new path": "src/java/org/apache/commons/jxpath/ri/model/jdom/JDOMNodePointer.java",
                    "full name": "src.java.org.apache.commons.jxpath.ri.model.jdom.JDOMNodePointer.getNamespaceResolver"
                },
                {
                    "function name": "getNamespaceURI",
                    "function params": [
                        "prefix"
                    ],
                    "file name": "JDOMNodePointer.java",
                    "file old path": "src/java/org/apache/commons/jxpath/ri/model/jdom/JDOMNodePointer.java",
                    "file new path": "src/java/org/apache/commons/jxpath/ri/model/jdom/JDOMNodePointer.java",
                    "full name": "src.java.org.apache.commons.jxpath.ri.model.jdom.JDOMNodePointer.getNamespaceURI"
                },
                {
                    "function name": "createAttribute",
                    "function params": [
                        "context",
                        "name"
                    ],
                    "file name": "JDOMNodePointer.java",
                    "file old path": "src/java/org/apache/commons/jxpath/ri/model/jdom/JDOMNodePointer.java",
                    "file new path": "src/java/org/apache/commons/jxpath/ri/model/jdom/JDOMNodePointer.java",
                    "full name": "src.java.org.apache.commons.jxpath.ri.model.jdom.JDOMNodePointer.createAttribute"
                },
                {
                    "function name": "createContext",
                    "function params": [
                        "model"
                    ],
                    "file name": "ExternalXMLNamespaceTest.java",
                    "file old path": "src/test/org/apache/commons/jxpath/ri/model/ExternalXMLNamespaceTest.java",
                    "file new path": "src/test/org/apache/commons/jxpath/ri/model/ExternalXMLNamespaceTest.java",
                    "full name": "src.test.org.apache.commons.jxpath.ri.model.ExternalXMLNamespaceTest.createContext"
                },
                {
                    "function name": "doTest",
                    "function params": [
                        "xpath",
                        "model",
                        "expected"
                    ],
                    "file name": "ExternalXMLNamespaceTest.java",
                    "file old path": "src/test/org/apache/commons/jxpath/ri/model/ExternalXMLNamespaceTest.java",
                    "file new path": "src/test/org/apache/commons/jxpath/ri/model/ExternalXMLNamespaceTest.java",
                    "full name": "src.test.org.apache.commons.jxpath.ri.model.ExternalXMLNamespaceTest.doTest"
                },
                {
                    "function name": "doTestElement",
                    "function params": [
                        "model"
                    ],
                    "file name": "ExternalXMLNamespaceTest.java",
                    "file old path": "src/test/org/apache/commons/jxpath/ri/model/ExternalXMLNamespaceTest.java",
                    "file new path": "src/test/org/apache/commons/jxpath/ri/model/ExternalXMLNamespaceTest.java",
                    "full name": "src.test.org.apache.commons.jxpath.ri.model.ExternalXMLNamespaceTest.doTestElement"
                },
                {
                    "function name": "testCreateAndSetAttributeDOM",
                    "function params": [],
                    "file name": "ExternalXMLNamespaceTest.java",
                    "file old path": "src/test/org/apache/commons/jxpath/ri/model/ExternalXMLNamespaceTest.java",
                    "file new path": "src/test/org/apache/commons/jxpath/ri/model/ExternalXMLNamespaceTest.java",
                    "full name": "src.test.org.apache.commons.jxpath.ri.model.ExternalXMLNamespaceTest.testCreateAndSetAttributeDOM"
                },
                {
                    "function name": "doTestCreateAndSetAttribute",
                    "function params": [
                        "model"
                    ],
                    "file name": "ExternalXMLNamespaceTest.java",
                    "file old path": "src/test/org/apache/commons/jxpath/ri/model/ExternalXMLNamespaceTest.java",
                    "file new path": "src/test/org/apache/commons/jxpath/ri/model/ExternalXMLNamespaceTest.java",
                    "full name": "src.test.org.apache.commons.jxpath.ri.model.ExternalXMLNamespaceTest.doTestCreateAndSetAttribute"
                },
                {
                    "function name": "createDocumentContainer",
                    "function params": [
                        "model"
                    ],
                    "file name": "ExternalXMLNamespaceTest.java",
                    "file old path": "src/test/org/apache/commons/jxpath/ri/model/ExternalXMLNamespaceTest.java",
                    "file new path": "src/test/org/apache/commons/jxpath/ri/model/ExternalXMLNamespaceTest.java",
                    "full name": "src.test.org.apache.commons.jxpath.ri.model.ExternalXMLNamespaceTest.createDocumentContainer"
                }
            ],
            "files that changed": [
                "src/java/org/apache/commons/jxpath/ri/NamespaceResolver.java",
                "src/java/org/apache/commons/jxpath/ri/model/dom/DOMAttributeIterator.java",
                "src/java/org/apache/commons/jxpath/ri/model/dom/DOMNodePointer.java",
                "src/java/org/apache/commons/jxpath/ri/model/jdom/JDOMAttributeIterator.java",
                "src/java/org/apache/commons/jxpath/ri/model/jdom/JDOMNodePointer.java",
                "src/test/org/apache/commons/jxpath/ri/model/ExternalXMLNamespaceTest.java"
            ]
        },
        {
            "bug index": "14",
            "bug id": "JXPATH-102",
            "hexsha": "71ca5c1faae6447f42f363d5157d6391dcc091d7",
            "fix_hash": "8a04f62fa755ec165152a03a516c186d20e8cd46",
            "description": "        assertXPathValue(context, \"floor('NaN')\", new Double(Double.NaN));\n        assertXPathValue(context, \"floor(-2 div 0)\", new Double(Double.NEGATIVE_INFINITY));\n        assertXPathValue(context, \"floor(2 div 0)\", new Double(Double.POSITIVE_INFINITY));\n\n        assertXPathValue(context, \"ceiling('NaN')\", new Double(Double.NaN));\n        assertXPathValue(context, \"ceiling(-2 div 0)\", new Double(Double.NEGATIVE_INFINITY));\n        assertXPathValue(context, \"ceiling(2 div 0)\", new Double(Double.POSITIVE_INFINITY));\n\n        assertXPathValue(context, \"round('NaN')\", new Double(Double.NaN));\n        assertXPathValue(context, \"round(-2 div 0)\", new Double(Double.NEGATIVE_INFINITY));\n        assertXPathValue(context, \"round(2 div 0)\", new Double(Double.POSITIVE_INFINITY));",
            "commit number version hash": 340,
            "commit number": 271,
            "function that changed": [
                {
                    "function name": "functionFloor",
                    "function params": [
                        "context"
                    ],
                    "file name": "CoreFunction.java",
                    "file old path": "src/java/org/apache/commons/jxpath/ri/compiler/CoreFunction.java",
                    "file new path": "src/java/org/apache/commons/jxpath/ri/compiler/CoreFunction.java",
                    "full name": "src.java.org.apache.commons.jxpath.ri.compiler.CoreFunction.functionFloor"
                },
                {
                    "function name": "functionCeiling",
                    "function params": [
                        "context"
                    ],
                    "file name": "CoreFunction.java",
                    "file old path": "src/java/org/apache/commons/jxpath/ri/compiler/CoreFunction.java",
                    "file new path": "src/java/org/apache/commons/jxpath/ri/compiler/CoreFunction.java",
                    "full name": "src.java.org.apache.commons.jxpath.ri.compiler.CoreFunction.functionCeiling"
                },
                {
                    "function name": "functionRound",
                    "function params": [
                        "context"
                    ],
                    "file name": "CoreFunction.java",
                    "file old path": "src/java/org/apache/commons/jxpath/ri/compiler/CoreFunction.java",
                    "file new path": "src/java/org/apache/commons/jxpath/ri/compiler/CoreFunction.java",
                    "full name": "src.java.org.apache.commons.jxpath.ri.compiler.CoreFunction.functionRound"
                },
                {
                    "function name": "testCoreFunctions",
                    "function params": [],
                    "file name": "CoreFunctionTest.java",
                    "file old path": "src/test/org/apache/commons/jxpath/ri/compiler/CoreFunctionTest.java",
                    "file new path": "src/test/org/apache/commons/jxpath/ri/compiler/CoreFunctionTest.java",
                    "full name": "src.test.org.apache.commons.jxpath.ri.compiler.CoreFunctionTest.testCoreFunctions"
                }
            ],
            "files that changed": [
                "src/java/org/apache/commons/jxpath/ri/compiler/CoreFunction.java",
                "src/test/org/apache/commons/jxpath/ri/compiler/CoreFunctionTest.java"
            ]
        },
        {
            "bug index": "15",
            "bug id": "JXPATH-100",
            "hexsha": "71ca5c1faae6447f42f363d5157d6391dcc091d7",
            "fix_hash": "497ed5f8b0bb95ad7a97ea5f0cc517a0420e422f",
            "description": "Source document:\n<MAIN><A>avalue</A><B>bvalue</B></MAIN>\n\nAccording to string() function defintion:\n\"A node-set is converted to a string by returning the string-value of the node in the node-set that is first in document order. If the node-set is empty, an empty string is returned.\"\n\nFollowing XPath calculated incorrectly:\n string(/MAIN/B | /MAIN/A)\n\nExpected result: \"avalue\"\nActual value: \"bvalue\"\n\nReason:\nsorting of result nodes is missing from CoreOperationUnion",
            "commit number version hash": 340,
            "commit number": 275,
            "function that changed": [
                {
                    "function name": "setPosition",
                    "function params": [
                        "position"
                    ],
                    "file name": "UnionContext.java",
                    "file old path": "src/java/org/apache/commons/jxpath/ri/axes/UnionContext.java",
                    "file new path": "src/java/org/apache/commons/jxpath/ri/axes/UnionContext.java",
                    "full name": "src.java.org.apache.commons.jxpath.ri.axes.UnionContext.setPosition"
                },
                {
                    "function name": "testUnion",
                    "function params": [],
                    "file name": "XMLModelTestCase.java",
                    "file old path": "src/test/org/apache/commons/jxpath/ri/model/XMLModelTestCase.java",
                    "file new path": "src/test/org/apache/commons/jxpath/ri/model/XMLModelTestCase.java",
                    "full name": "src.test.org.apache.commons.jxpath.ri.model.XMLModelTestCase.testUnion"
                }
            ],
            "files that changed": [
                "src/java/org/apache/commons/jxpath/ri/axes/UnionContext.java",
                "src/test/org/apache/commons/jxpath/ri/model/XMLModelTestCase.java"
            ]
        },
        {
            "bug index": "16",
            "bug id": "JXPATH-114",
            "hexsha": "71ca5c1faae6447f42f363d5157d6391dcc091d7",
            "fix_hash": "6cf7092809515b6add5f0e83fd837b8e013c5256",
            "description": "I think that the code in DOMNodePointer.java, line 120 is wrong because considers only element and document to be matched by node().\nwhile instead it matches any node that pass from there.\n\ncase Compiler.NODE_TYPE_NODE :\n                    return nodeType == Node.ELEMENT_NODE\n                            || nodeType == Node.DOCUMENT_NODE;\n\nshould be changed to \n\ncase Compiler.NODE_TYPE_NODE :\n                    return true;\n\nSame in JDOMNodePointer, line 391\n\n                  return true;//(node instanceof Element) || (node instanceof Document);\n\n",
            "commit number version hash": 340,
            "commit number": 309,
            "function that changed": [
                {
                    "function name": "testNode",
                    "function params": [
                        "node",
                        "test"
                    ],
                    "file name": "DOMNodePointer.java",
                    "file old path": "src/java/org/apache/commons/jxpath/ri/model/dom/DOMNodePointer.java",
                    "file new path": "src/java/org/apache/commons/jxpath/ri/model/dom/DOMNodePointer.java",
                    "full name": "src.java.org.apache.commons.jxpath.ri.model.dom.DOMNodePointer.testNode"
                },
                {
                    "function name": "testNode",
                    "function params": [
                        "pointer",
                        "node",
                        "test"
                    ],
                    "file name": "JDOMNodePointer.java",
                    "file old path": "src/java/org/apache/commons/jxpath/ri/model/jdom/JDOMNodePointer.java",
                    "file new path": "src/java/org/apache/commons/jxpath/ri/model/jdom/JDOMNodePointer.java",
                    "full name": "src.java.org.apache.commons.jxpath.ri.model.jdom.JDOMNodePointer.testNode"
                },
                {
                    "function name": "testAxisFollowing",
                    "function params": [],
                    "file name": "XMLModelTestCase.java",
                    "file old path": "src/test/org/apache/commons/jxpath/ri/model/XMLModelTestCase.java",
                    "file new path": "src/test/org/apache/commons/jxpath/ri/model/XMLModelTestCase.java",
                    "full name": "src.test.org.apache.commons.jxpath.ri.model.XMLModelTestCase.testAxisFollowing"
                },
                {
                    "function name": "testAxisPreceding",
                    "function params": [],
                    "file name": "XMLModelTestCase.java",
                    "file old path": "src/test/org/apache/commons/jxpath/ri/model/XMLModelTestCase.java",
                    "file new path": "src/test/org/apache/commons/jxpath/ri/model/XMLModelTestCase.java",
                    "full name": "src.test.org.apache.commons.jxpath.ri.model.XMLModelTestCase.testAxisPreceding"
                }
            ],
            "files that changed": [
                "src/java/org/apache/commons/jxpath/ri/model/dom/DOMNodePointer.java",
                "src/java/org/apache/commons/jxpath/ri/model/jdom/JDOMNodePointer.java",
                "src/test/org/apache/commons/jxpath/ri/model/XMLModelTestCase.java"
            ]
        },
        {
            "bug index": "17",
            "bug id": "JXPATH-109",
            "hexsha": "71ca5c1faae6447f42f363d5157d6391dcc091d7",
            "fix_hash": "a1bc20f2af31730caa12faa116e14a964354f28d",
            "description": "With expression:\n\nxml/@*\n\nOn xml:\n\n<xml xmlns:x='foo' x:pop='a'/>\n\nselectSingleNode returns null, @x:* works fine.\n\nPossible Fix:\n\nIn DOMAttributeIterator, line 84\n\nif (equalStrings(testPrefix, nodePrefix)) {\n                return true;\n            }\n\nshould probably be changed to\n\nif (testPrefix==null || equalStrings(testPrefix, nodePrefix)) {\n                return true;\n            }\n",
            "commit number version hash": 340,
            "commit number": 312,
            "function that changed": [
                {
                    "function name": "testAttr",
                    "function params": [
                        "attr",
                        "testName"
                    ],
                    "file name": "DOMAttributeIterator.java",
                    "file old path": "src/java/org/apache/commons/jxpath/ri/model/dom/DOMAttributeIterator.java",
                    "file new path": "src/java/org/apache/commons/jxpath/ri/model/dom/DOMAttributeIterator.java",
                    "full name": "src.java.org.apache.commons.jxpath.ri.model.dom.DOMAttributeIterator.testAttr"
                },
                {
                    "function name": "testAttr",
                    "function params": [
                        "attr"
                    ],
                    "file name": "DOMAttributeIterator.java",
                    "file old path": "src/java/org/apache/commons/jxpath/ri/model/dom/DOMAttributeIterator.java",
                    "file new path": "src/java/org/apache/commons/jxpath/ri/model/dom/DOMAttributeIterator.java",
                    "full name": "src.java.org.apache.commons.jxpath.ri.model.dom.DOMAttributeIterator.testAttr"
                },
                {
                    "function name": "DOMAttributeIterator",
                    "function params": [
                        "parent",
                        "name"
                    ],
                    "file name": "DOMAttributeIterator.java",
                    "file old path": "src/java/org/apache/commons/jxpath/ri/model/dom/DOMAttributeIterator.java",
                    "file new path": "src/java/org/apache/commons/jxpath/ri/model/dom/DOMAttributeIterator.java",
                    "full name": "src.java.org.apache.commons.jxpath.ri.model.dom.DOMAttributeIterator.DOMAttributeIterator"
                },
                {
                    "function name": "getAttribute",
                    "function params": [
                        "element",
                        "name"
                    ],
                    "file name": "DOMAttributeIterator.java",
                    "file old path": "src/java/org/apache/commons/jxpath/ri/model/dom/DOMAttributeIterator.java",
                    "file new path": "src/java/org/apache/commons/jxpath/ri/model/dom/DOMAttributeIterator.java",
                    "full name": "src.java.org.apache.commons.jxpath.ri.model.dom.DOMAttributeIterator.getAttribute"
                },
                {
                    "function name": "JDOMAttributeIterator",
                    "function params": [
                        "parent",
                        "name"
                    ],
                    "file name": "JDOMAttributeIterator.java",
                    "file old path": "src/java/org/apache/commons/jxpath/ri/model/jdom/JDOMAttributeIterator.java",
                    "file new path": "src/java/org/apache/commons/jxpath/ri/model/jdom/JDOMAttributeIterator.java",
                    "full name": "src.java.org.apache.commons.jxpath.ri.model.jdom.JDOMAttributeIterator.JDOMAttributeIterator"
                },
                {
                    "function name": "set",
                    "function params": [
                        "o1",
                        "o2"
                    ],
                    "file name": "JXPathTestCase.java",
                    "file old path": "src/test/org/apache/commons/jxpath/JXPathTestCase.java",
                    "file new path": "src/test/org/apache/commons/jxpath/JXPathTestCase.java",
                    "full name": "src.test.org.apache.commons.jxpath.JXPathTestCase.set"
                },
                {
                    "function name": "testAxisAttribute",
                    "function params": [],
                    "file name": "XMLModelTestCase.java",
                    "file old path": "src/test/org/apache/commons/jxpath/ri/model/XMLModelTestCase.java",
                    "file new path": "src/test/org/apache/commons/jxpath/ri/model/XMLModelTestCase.java",
                    "full name": "src.test.org.apache.commons.jxpath.ri.model.XMLModelTestCase.testAxisAttribute"
                }
            ],
            "files that changed": [
                "src/java/org/apache/commons/jxpath/ri/model/dom/DOMAttributeIterator.java",
                "src/java/org/apache/commons/jxpath/ri/model/jdom/JDOMAttributeIterator.java",
                "src/test/org/apache/commons/jxpath/JXPathTestCase.java",
                "src/test/org/apache/commons/jxpath/ri/model/XMLModelTestCase.java"
            ]
        },
        {
            "bug index": "18",
            "bug id": "JXPATH-115",
            "hexsha": "71ca5c1faae6447f42f363d5157d6391dcc091d7",
            "fix_hash": "4882e4423ae7bfb80c65da4aa547ef5aed16a007",
            "description": "Checking test (Issue172_CountAttributeNode) I came with the following fix for the code in AttributeContext  line 72\nfrom \n-----\nif (!(nodeTest instanceof NodeNameTest)) {\n                return false;\n            }\n            QName name = ((NodeNameTest) nodeTest).getNodeName();\n            \n------\n'\nto \n--- (outside method)\nprivate static final QName WILDCARD = new QName(\"\", \"*\");\n--- (in method)\n    \nfinal QName name ;\nif (nodeTest instanceof NodeTypeTest)\n{\n\t if (((NodeTypeTest) nodeTest).getNodeType() == Compiler.NODE_TYPE_NODE)\n\t\t name = WILDCARD;\n\t else return false;\n}\nelse if (nodeTest instanceof NodeNameTest) {\n\tname = ((NodeNameTest) nodeTest).getNodeName();\n}\nelse\n{\n\treturn false;\n}\n\n\n",
            "commit number version hash": 340,
            "commit number": 313,
            "function that changed": [
                {
                    "function name": "nextNode",
                    "function params": [],
                    "file name": "AttributeContext.java",
                    "file old path": "src/java/org/apache/commons/jxpath/ri/axes/AttributeContext.java",
                    "file new path": "src/java/org/apache/commons/jxpath/ri/axes/AttributeContext.java",
                    "full name": "src.java.org.apache.commons.jxpath.ri.axes.AttributeContext.nextNode"
                },
                {
                    "function name": "testAxisAttribute",
                    "function params": [],
                    "file name": "XMLModelTestCase.java",
                    "file old path": "src/test/org/apache/commons/jxpath/ri/model/XMLModelTestCase.java",
                    "file new path": "src/test/org/apache/commons/jxpath/ri/model/XMLModelTestCase.java",
                    "full name": "src.test.org.apache.commons.jxpath.ri.model.XMLModelTestCase.testAxisAttribute"
                }
            ],
            "files that changed": [
                "src/java/org/apache/commons/jxpath/ri/axes/AttributeContext.java",
                "src/test/org/apache/commons/jxpath/ri/model/XMLModelTestCase.java"
            ]
        },
        {
            "bug index": "20",
            "bug id": "JXPATH-149",
            "hexsha": "71ca5c1faae6447f42f363d5157d6391dcc091d7",
            "fix_hash": "820a69d81b3b5d33f4a2b2cd9f153450f7535452",
            "description": "I have a simple JXpathContext, with the following variables: var1=0, var2=0, var3=1. When I try to evaluate the following expression - \"$var1 + $var2 <= $var3\", it returns false.",
            "commit number version hash": 340,
            "commit number": 357,
            "function that changed": [
                {
                    "function name": "containsMatch",
                    "function params": [
                        "value",
                        "it"
                    ],
                    "file name": "CoreOperationRelationalExpression.java",
                    "file old path": "src/java/org/apache/commons/jxpath/ri/compiler/CoreOperationRelationalExpression.java",
                    "file new path": "src/java/org/apache/commons/jxpath/ri/compiler/CoreOperationRelationalExpression.java",
                    "full name": "src.java.org.apache.commons.jxpath.ri.compiler.CoreOperationRelationalExpression.containsMatch"
                },
                {
                    "function name": "compute",
                    "function params": [
                        "left",
                        "right"
                    ],
                    "file name": "CoreOperationRelationalExpression.java",
                    "file old path": "src/java/org/apache/commons/jxpath/ri/compiler/CoreOperationRelationalExpression.java",
                    "file new path": "src/java/org/apache/commons/jxpath/ri/compiler/CoreOperationRelationalExpression.java",
                    "full name": "src.java.org.apache.commons.jxpath.ri.compiler.CoreOperationRelationalExpression.compute"
                },
                {
                    "function name": "testComplexOperationWithVariables",
                    "function params": [],
                    "file name": "JXPath149Test.java",
                    "file old path": null,
                    "file new path": "src/test/org/apache/commons/jxpath/ri/compiler/JXPath149Test.java",
                    "full name": "src.test.org.apache.commons.jxpath.ri.compiler.JXPath149Test.testComplexOperationWithVariables"
                }
            ],
            "files that changed": [
                "src/java/org/apache/commons/jxpath/ri/compiler/CoreOperationRelationalExpression.java"
            ]
        },
        {
            "bug index": "21",
            "bug id": "JXPATH-151",
            "hexsha": "71ca5c1faae6447f42f363d5157d6391dcc091d7",
            "fix_hash": "99a20785daf2bfc018552e2eabed1067bf225013",
            "description": "Comparing a vaule to null using unequals (\\!=) yields false!\n{noformat}\n        Map<String, Integer> m = new HashMap<String, Integer>();\n        m.put(\"a\", 1);\n        m.put(\"b\", null);\n        m.put(\"c\", 1);\n        JXPathContext c = JXPathContext.newContext(m);\n        System.out.println(c.getValue(\"a != b\") + \" should be true\");\n        System.out.println(c.getValue(\"a != c\") + \" should be false\");\n        System.out.println(c.getValue(\"a = b\") + \" should be false\");\n        System.out.println(c.getValue(\"a = c\") + \" should be true\");\n        System.out.println(c.getValue(\"not(a = b)\") + \" should be true\");\n        System.out.println(c.getValue(\"not(a = c)\") + \" should be false\");\n{noformat} \n\nOutput using 1.3:\n{color:red} false should be true{color}\nfalse should be false\nfalse should be false\ntrue should be true\ntrue should be true\nfalse should be false\n\n\nIn 1.2 it works correctly!",
            "commit number version hash": 340,
            "commit number": 358,
            "function that changed": [
                {
                    "function name": "getLength",
                    "function params": [],
                    "file name": "BeanPropertyPointer.java",
                    "file old path": "src/java/org/apache/commons/jxpath/ri/model/beans/BeanPropertyPointer.java",
                    "file new path": "src/java/org/apache/commons/jxpath/ri/model/beans/BeanPropertyPointer.java",
                    "full name": "src.java.org.apache.commons.jxpath.ri.model.beans.BeanPropertyPointer.getLength"
                },
                {
                    "function name": "getLength",
                    "function params": [],
                    "file name": "PropertyPointer.java",
                    "file old path": "src/java/org/apache/commons/jxpath/ri/model/beans/PropertyPointer.java",
                    "file new path": "src/java/org/apache/commons/jxpath/ri/model/beans/PropertyPointer.java",
                    "full name": "src.java.org.apache.commons.jxpath.ri.model.beans.PropertyPointer.getLength"
                },
                {
                    "function name": "testMapValueEquality",
                    "function params": [],
                    "file name": "JXPath151Test.java",
                    "file old path": null,
                    "file new path": "src/test/org/apache/commons/jxpath/ri/model/JXPath151Test.java",
                    "full name": "src.test.org.apache.commons.jxpath.ri.model.JXPath151Test.testMapValueEquality"
                },
                {
                    "function name": "setUp",
                    "function params": [],
                    "file name": "JXPath151Test.java",
                    "file old path": null,
                    "file new path": "src/test/org/apache/commons/jxpath/ri/model/JXPath151Test.java",
                    "full name": "src.test.org.apache.commons.jxpath.ri.model.JXPath151Test.setUp"
                },
                {
                    "function name": "testMapValueEqualityUsingNameAttribute",
                    "function params": [],
                    "file name": "JXPath151Test.java",
                    "file old path": null,
                    "file new path": "src/test/org/apache/commons/jxpath/ri/model/JXPath151Test.java",
                    "full name": "src.test.org.apache.commons.jxpath.ri.model.JXPath151Test.testMapValueEqualityUsingNameAttribute"
                },
                {
                    "function name": "testNull",
                    "function params": [],
                    "file name": "MixedModelTest.java",
                    "file old path": "src/test/org/apache/commons/jxpath/ri/model/MixedModelTest.java",
                    "file new path": "src/test/org/apache/commons/jxpath/ri/model/MixedModelTest.java",
                    "full name": "src.test.org.apache.commons.jxpath.ri.model.MixedModelTest.testNull"
                }
            ],
            "files that changed": [
                "src/java/org/apache/commons/jxpath/ri/model/beans/BeanPropertyPointer.java",
                "src/java/org/apache/commons/jxpath/ri/model/beans/PropertyPointer.java",
                "src/test/org/apache/commons/jxpath/ri/model/MixedModelTest.java"
            ]
        }
    ]
}