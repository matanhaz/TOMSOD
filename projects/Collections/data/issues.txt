{
    "issues": [
        {
            "issue_id": "NET-708",
            "project": "Commons Net",
            "title": "Use yyyy instead of YYYY in SimpleDateFormat #97",
            "type": "Bug",
            "description": "should use yyyy instead of YYYY in SimpleDateFormat\r\nhttps://github.com/apache/commons-net/pull/97\r\n\r\nYYYY represents the year of the week\r\nI don't think we should use it in those 2 usecases.",
            "resolved": "2022-01-01",
            "versions": [],
            "fixVersions": [
                "3.9.0"
            ]
        },
        {
            "issue_id": "NET-698",
            "project": "Commons Net",
            "title": "SubnetInfo.isInRange doesn't handle /32 netmask properly",
            "type": "Bug",
            "description": "I believe that this code should print out true, however it prints out false.\r\n\r\n\u00a0\r\n{code:java}\r\nfinal String address = \"192.168.0.1\";\r\nfinal SubnetUtils subnetUtils = new SubnetUtils(address, \"255.255.255.255\");\r\nSystem.out.println(\"In range? \" + subnetUtils.getInfo().isInRange(address));{code}\r\n\u00a0",
            "resolved": "2021-01-28",
            "versions": [
                "3.7.2"
            ],
            "fixVersions": []
        },
        {
            "issue_id": "NET-696",
            "project": "Commons Net",
            "title": "Issue with ParserInitializationException: Unknown Parser Type: NOOP ok",
            "type": "Bug",
            "description": "When a thread sends a no-op to the FTPClient, and then the main UI thread I have running lists the files for a specified directory I get an exception trace similar to the one found in issue NET-476 similar to this:\r\n{noformat}\r\nCaused by: org.apache.commons.net.ftp.parser.ParserInitializationException: Unknown parser type: PORT command successful. Consider using PASV.\r\n        at org.apache.commons.net.ftp.parser.DefaultFTPFileEntryParserFactory.createFileEntryParser(DefaultFTPFileEntryParserFactory.java:118)\r\n        at org.apache.commons.net.ftp.FTPClient.initiateListParsing(FTPClient.java:2359)\r\n        at org.apache.commons.net.ftp.FTPClient.listFiles(FTPClient.java:2142){noformat}\r\nBut in my case after the no-op is sent, the Unknown parser type is: NOOP\u00a0 ok or something along the lines of that.\r\n\r\nI have been struggling to reproduce it as it happens occasionally and I can't find a pattern to it. Could it be because of a race condition, when the thread sends a no-op at the exact same time the main thread sends a listFiles command? (They use the same ftpClient objects, the main UI thread and the thread sending no-ops). I wish I could find a workaround to this issue but not sure where to start with it.\r\n\r\nIt also happens with getModificationTime. Here is an exception from trying to parse the modification time returned by ftpClient.getModificationTime:\r\n{noformat}\r\nException in thread \"JavaFX Application Thread\" java.time.format.DateTimeParseException: Text 'NOOP ok.' could not be parsed at index 0\r\n\tat java.base/java.time.format.DateTimeFormatter.parseResolved0(DateTimeFormatter.java:2046)\r\n\tat java.base/java.time.format.DateTimeFormatter.parse(DateTimeFormatter.java:1948)\r\n\tat java.base/java.time.LocalDateTime.parse(LocalDateTime.java:492){noformat}",
            "resolved": "2020-12-19",
            "versions": [
                "3.7"
            ],
            "fixVersions": []
        },
        {
            "issue_id": "NET-691",
            "project": "Commons Net",
            "title": "Improve Javadoc for IMAPSClient",
            "type": "Bug",
            "description": "The [IMAPSClient Javadoc|http://commons.apache.org/proper/commons-net/apidocs/index.html?org/apache/commons/net/imap/IMAPSClient.html] could be improved with some code formatting. Pull request coming up...",
            "resolved": "2020-10-14",
            "versions": [
                "3.7.1"
            ],
            "fixVersions": [
                "3.7.2"
            ]
        },
        {
            "issue_id": "NET-689",
            "project": "Commons Net",
            "title": "Hostname is not set on the SSLSocket causing isEndpointCheckingEnabled to fail",
            "type": "Bug",
            "description": "When connecting with ssl to an ftps server, the hostname used to connect to the server is not copied to the SSLSocket, instead the sockets ip address is used. This applies to both with `AUTH TLS` and implicit SSL.\r\n\r\n\u00a0\r\n\r\nThe problem seems to be line 912 in FTPSclient.java:\r\n{code:java}\r\nreturn f.createSocket(socket, socket.getInetAddress().getHostAddress(), socket.getPort(), false);{code}\r\n\u00a0\r\n\r\nwhich forces the new SSLSocket to have the ip address as peer hostname, which makes it impossible to use `isEndpointCheckingEnabled` as the hostname is the ip address, not the hostname that appears in the certificate.\r\n\r\nLFTP [https://lftp.yar.ru/|https://lftp.yar.ru/)]\u00a0correctly connects to the hostname if the name matches, and disconnects if the name doesn't match the hostname, as does OpenSSL.\r\n\r\nThe fix would be very easy. Just change the line into\r\n{code:java}\r\nreturn f.createSocket(socket, _hostname_, socket.getPort(), false);\r\n\r\n{code}\r\nand it works. I tested this by simply debugging the code\u00a0",
            "resolved": "2020-10-03",
            "versions": [
                "3.7"
            ],
            "fixVersions": [
                "3.7.2"
            ]
        },
        {
            "issue_id": "NET-688",
            "project": "Commons Net",
            "title": "FTPSClient converts hostname to IP, making hostname verification difficult",
            "type": "Bug",
            "description": "Related to NET-593, FTPS converts the provided hostname into an IP address before attempting the connection.\r\n\r\n\u00a0\r\n\r\nThis means that a registered hostname verifier gets passed the IP address, instead of the hostname, and is likely to fail.\r\n\r\n\u00a0\r\n\r\nI believe the issue is in FTPSClient.java, in sslNegotiation.\r\n\r\n\u00a0\r\n\r\nat line 294 we call the hostnameverifier, but using\u00a0socket.getInetAddress().getHostAddress() - this will return us the IP address of the socket. The certificate presented by the server will almost certainly not have the IP address as a valid name and therefore hostname verification will likely fail.\r\n\r\n\u00a0\r\n\r\nWe ought to use the hostname the user provided, if possible.",
            "resolved": "2020-10-29",
            "versions": [
                "3.7"
            ],
            "fixVersions": [
                "3.7.2"
            ]
        },
        {
            "issue_id": "NET-687",
            "project": "Commons Net",
            "title": "[FTPS] javax.net.ssl.SSLException: Unsupported or unrecognized SSL message",
            "type": "Bug",
            "description": "After adding the self signed polynesie.cer certificate to JVM security (_jdk-x.x.x/lib/security_) :\r\n{code:java}\r\nkeytool.exe -import -storepass \"changeit\" -keystore \"./cacerts\" -alias polynesie.cer -file ./polynesie.cer -noprompt{code}\r\n\u00a0polynesie.cer obtained by copying certificate part from this command line result :\r\n\r\n{code:java}\r\nopenssl s_client -connect ftp0.gov.pf:21 -starttls ftp{code}\r\nTrying to retrieve a file with ftpes :\r\n{code:java}\r\njava -cp commons-net-examples-3.5.jar;commons-net-3.5.jar examples/ftp/FTPClientExample -A -p TLS,false -e -b ftp0.gov.pf DataVRS/fiche_Station_VRS_VAI1.pdf fiche_Station_VRS_VAI1.pdf{code}\r\nProduce this exception :\r\n{code:java}\r\njavax.net.ssl.SSLException: Unsupported or unrecognized SSL message\r\n        at java.base/sun.security.ssl.SSLSocketInputRecord.handleUnknownRecord(Unknown Source)\r\n        at java.base/sun.security.ssl.SSLSocketInputRecord.decode(Unknown Source)\r\n        at java.base/sun.security.ssl.SSLSocketImpl.readRecord(Unknown Source)\r\n        at java.base/sun.security.ssl.SSLSocketImpl.readRecord(Unknown Source)\r\n        at java.base/sun.security.ssl.SSLSocketImpl.performInitialHandshake(Unknown Source)\r\n        at java.base/sun.security.ssl.SSLSocketImpl.startHandshake(Unknown Source)\r\n        at java.base/sun.security.ssl.SSLSocketImpl.startHandshake(Unknown Source)\r\n        at org.apache.commons.net.ftp.FTPSClient._openDataConnection_(FTPSClient.java:642)\r\n        at org.apache.commons.net.ftp.FTPClient._retrieveFile(FTPClient.java:1907)\r\n        at org.apache.commons.net.ftp.FTPClient.retrieveFile(FTPClient.java:1893)\r\n        at testFTP2.FTPClientExample.main(FTPClientExample.java:513)\r\n{code}\r\nIt is probably the same error of ssl_reuse session as NET-408.\r\n\r\nSame try with ftp4j library reports this error :\r\n{code:java}\r\ncode=522, message= SSL connection failed; session reuse required: see require_ssl_reuse option in vsftpd.conf man page\r\n{code}\r\n\u00a0",
            "resolved": "2020-09-20",
            "versions": [
                "3.7"
            ],
            "fixVersions": [
                "3.7.1"
            ]
        },
        {
            "issue_id": "NET-686",
            "project": "Commons Net",
            "title": "Most files aren't downloaded completely from an FTP server",
            "type": "Bug",
            "description": "About a month ago I opened another [issue|https://issues.apache.org/jira/browse/NET-684] that was closed because it wasn't reproducible with macOS and a public FTP server.\r\n\r\nShort summary: Downloading files from an FTP server results in these files randomly missing bytes. It looks like the download always \"completes\" and there are no error messages/exceptions but random bytes in random files are simply skipped. Images (jpg & png) are usually affected more (up to 30, maybe 40, bytes smaller than the original), and are then also visibly corrupt, than text files (usually only 2-3 bytes smaller, rarely more).\r\n\r\nI'm working on an Android app (Win 10, Java 8, Android Studio 3.6.1, min SDK 24, target SDK 27), which I'm testing with FTP servers in the same network (1x Win 10, 1x Linux, both accessed via IP - \"10.1.1.xxx\"). No matter what method in the library I use (retrieveFile, retrieveFileStream, sendCommand(FTPCmd.RETRIEVE, filename)), most of the time there's at least a single file that's corrupted.\r\n\r\nI also tested the same code with public servers and even though I didn't have a lot of time because those servers regularely delete uploaded files, I never experienced said problem with them.\r\n\r\nI even wrote my own mini-library (just for login/logout and download) using Java's default \"Socket\" but I still had the same problem on Android Studio's simulator/a real device. BUT: When I used the same code to create a small Windows/Swing/Java app, there were no more corrupted files.\r\n\r\nIt looks like this bug is only affecting a very specific combination of OS,...:\r\n\r\nAndroid (emulator/real device) + Java (8) + FTP server in the same network (accessed via IP)",
            "resolved": "2021-01-02",
            "versions": [
                "3.6",
                "3.7.2"
            ],
            "fixVersions": []
        },
        {
            "issue_id": "NET-685",
            "project": "Commons Net",
            "title": "FTPClient.connect() hangs without any timeout and response. It blocks the whole JVM",
            "type": "Bug",
            "description": "Hello Everybody,\r\n\r\nwe implemented a multithread scheduler in order to run many FTP connections (one for each customer). We use these connections to upload /download files from/to remote servers.\r\n\r\nInside the scheduler, we use a\u00a0ScheduledThreadPoolExecutor to run our FTP connections (about 50). We run one thread (which instantiates an FTPClient object) for each FTP connection.\r\n\r\nSometimes, one of those connections tries to connect to the FTP server and the method\u00a0FTPClient.connect() hangs without any timeout. No log. No server response.\r\n The connection is blocked as well as the whole JVM.\u00a0\r\n\r\nWe needed to restart the service to fix the production.\r\n\r\nWe already checked the following points during the issue:\r\n - the server is reachable;\r\n - No overlapping between run threads;\r\n - the virtual machine runs correctly;\r\n - Every other connection works correctly (FTPS, SFTP, CIFS, ...) so far.\r\n\r\n(Production logs attached)\r\n\r\nPULL-REQUEST link:\u00a0[https://github.com/apache/commons-net/pull/51]\r\n\r\nThanks in advance,\r\n Simone",
            "resolved": "2020-11-29",
            "versions": [
                "3.6"
            ],
            "fixVersions": [
                "3.8.0"
            ]
        },
        {
            "issue_id": "NET-684",
            "project": "Commons Net",
            "title": "Most images aren't downloaded completely from an FTP server",
            "type": "Bug",
            "description": "Downloading images from an FTP server succeeds but the resulting images are incomplete (black/transparent parts at the bottom) or faulty (wrong colors/visual artifacts) most of the time.\r\n\r\n\u00a0\r\n\r\nYou can find examples and full code in [this|http://mail-archives.apache.org/mod_mbox/commons-user/202005.mbox/%3C000b01d6341c%246a66f7f0%243f34e7d0%24%40simutech.at%3E] mailing list thread.",
            "resolved": "2020-06-26",
            "versions": [
                "3.6"
            ],
            "fixVersions": []
        },
        {
            "issue_id": "NET-679",
            "project": "Commons Net",
            "title": "SubnetUtils.SubnetInfo doesn't represent lowAddress and highAddress.",
            "type": "Bug",
            "description": "\u00a0\r\n\r\nThis is my test case.\r\n\r\nCIDR '10.213.160.0/16' should be contain 10.213.0.0 and 10,213.255.255, but shouldn't.\r\n\r\n\u00a0\r\n\r\n\u00a0\r\n\r\n\u00a0\r\n{code:java}\r\n// \ucf54\ub4dc \uc790\ub9ac \ud45c\uc2dc\uc790\r\n@Test\r\nvoid when16bitIsGiven_thenReturnTrue() {\r\n    // GIVEN\r\n    final String CIDR = \"10.213.160.0/16\";\r\n    SubnetInfo subnetInfo = new SubnetUtils(CIDR).getInfo();\r\n\r\n    final String[] givenIPs = {\"10.213.0.0\", \"10.213.160.0\", \"10.213.255.255\"};\r\n\r\n    // WHEN and THEN\r\n    assertThat(subnetInfo.getLowAddress()).isEqualTo(givenIPs[0]);\r\n    assertThat(subnetInfo.getHighAddress()).isEqualTo(givenIPs[2]);\r\n\r\n    Stream.of(givenIPs).forEach(ip -> {\r\n        assertThat(subnetInfo.isInRange(ip)).isTrue();\r\n    });\r\n}\r\n{code}\r\n\u00a0\r\n\r\n\u00a0\r\n{panel}\r\nCIDR to IP Range{panel}\r\n{panel}\r\nh3. Result\r\n||CIDR Range|10.213.160.0/16|\r\n||Netmask|255.255.0.0|\r\n||Wildcard Bits|0.0.255.255|\r\n||First IP|10.213.0.0|\r\n||Last IP|10.213.255.255|\r\n||Total Host|65536|\r\n{panel}\r\n\u00a0\r\n\r\nI think we should care about 'SubnetInfo.low' and 'SubnetInfo.high'.\r\n{code:java}\r\n// \ucf54\ub4dc \uc790\ub9ac \ud45c\uc2dc\uc790\r\n    public final class SubnetInfo {        ...\r\n        private int low() {\r\n            return (isInclusiveHostCount() ? network() :\r\n                broadcastLong() - networkLong() > 1 ? network() + 1 : 0);\r\n        }        private int high() {\r\n            return (isInclusiveHostCount() ? broadcast() :\r\n                broadcastLong() - networkLong() > 1 ? broadcast() -1  : 0);\r\n        }        public boolean isInRange(int address) {\r\n            long addLong = address & UNSIGNED_INT_MASK;\r\n            long lowLong = low() & UNSIGNED_INT_MASK;\r\n            long highLong = high() & UNSIGNED_INT_MASK;\r\n            return addLong >= lowLong && addLong <= highLong;\r\n        }\r\n       ...\r\n    }\r\n{code}",
            "resolved": "2020-06-23",
            "versions": [
                "3.6"
            ],
            "fixVersions": []
        },
        {
            "issue_id": "NET-678",
            "project": "Commons Net",
            "title": "VMS ftp LIST parsing results in empty file list",
            "type": "Bug",
            "description": "VMS ftp LIST parsing results in empty list when \"size / allocated\" part is missing slash and allocated value. I am not sure if there is any specification on that subject to make clear if this is a valid server output or not, however MultiNet FTP Server Process V5.1(16) does this reply, for example:\r\n\r\n\u00a0\r\n\r\nFILE123.DAT;1\r\n 64 4-MAR-2019 00:04 [USR,USRGROUP] (RWED,RWED,RWED,R)\r\n FILE456.DAT;1\r\n 102 28-APR-2013 23:12 [USR,USRGROUP] (RWED,RWED,RWED,R)}}\r\n\r\n\u00a0\r\n\r\n{{No files would be returned from by FTPClient#listFiles(String path)}}",
            "resolved": "2020-06-19",
            "versions": [
                "3.6"
            ],
            "fixVersions": [
                "3.7"
            ]
        },
        {
            "issue_id": "NET-676",
            "project": "Commons Net",
            "title": "TelnetInputStream returns -1 on socket timeout",
            "type": "Bug",
            "description": "I am using TelnetClient with threading disabled. When setting the socket timeout via TelnetClient.setSoTimeout I would expect any reads that timeout to throw a SocketTimeoutException. However, instead the read returns a -1.\r\n\r\nI can see in TelnetInputStream line 404 that the exception thrown by the underlying stream will be caught and an EOF returned.\r\n\r\nThis seems to break the API contract. Is there any reason for this behavior or is it an oversight?\r\n\r\n\u00a0",
            "resolved": "2020-06-26",
            "versions": [
                "3.0.1"
            ],
            "fixVersions": []
        },
        {
            "issue_id": "NET-675",
            "project": "Commons Net",
            "title": "SubnetUtils/SubnetInfo does not compute range for /32 subnet",
            "type": "Bug",
            "description": "If a SubnetUtils is created using a cidr notation of a single ip-address, the isInRange returns false for the ip-address.\r\n\r\nExample code:\r\n{code:java}\r\nString subnet = \"192.168.0.15/32\";\r\n\r\nSubnetUtils subnetUtils = new SubnetUtils(subnet);\r\nSubnetInfo info = subnetUtils.getInfo();\r\nlog.debug(\"{}\", info); // first and last ip-address are 0.0.0.0\r\nlog.debug(\"{}\", info.isInRange(\"192.168.0.15\")); // false is returned, I would expect true\r\nlog.debug(\"{}\", subnetInfo.getAddress())); // the exact address is returned\r\n{code}",
            "resolved": "2020-06-23",
            "versions": [
                "3.6"
            ],
            "fixVersions": []
        },
        {
            "issue_id": "NET-670",
            "project": "Commons Net",
            "title": "Apache Commons Net ftpClient.java changeWorkingDirectory() Function CRLF Injection Remote Command Execution",
            "type": "Bug",
            "description": "Per BlackDuck Hub\u00a0VulnDB 171100\r\n\r\nApache Commons Net contains a flaw in the changeWorkingDirectory() function in ftpClient.java that is triggered as user-supplied input is not properly sanitized. This may allow a remote attacker to use a newline character in a specially crafted string to execute arbitrary commands.\r\n\r\n\u00a0\r\n\r\n\u00a0",
            "resolved": "2019-06-16",
            "versions": [
                "3.6"
            ],
            "fixVersions": []
        },
        {
            "issue_id": "NET-669",
            "project": "Commons Net",
            "title": "Incorrect IP mask",
            "type": "Bug",
            "description": "Incorrect IP mask in\u00a0SubnetUtils class.\r\n\r\nIn existed implementation, IP addresses like \"256.256.256.256\" or \"999.999.999.999\" are passed through matcher.",
            "resolved": "2019-04-16",
            "versions": [
                "3.6"
            ],
            "fixVersions": []
        },
        {
            "issue_id": "NET-664",
            "project": "Commons Net",
            "title": "SubnetUtils invalid address \"1.1.125.52/32\"",
            "type": "Bug",
            "description": "during some work I've\u00a0spotted an issue ( probably more addresses are affected, I've just spotted that )\u00a0\r\n\r\n\r\n val addr = \"1.1.125.52/32\"\r\n val subnetUtils = SubnetUtils(addr)\r\n assertThat(subnetUtils.info.lowAddress).isEqualTo(\"1.1.125.52\")\r\n----\r\norg.opentest4j.AssertionFailedError: \r\nExpecting:\r\n <\"0.0.0.0\">\r\nto be equal to:\r\n <\"1.1.125.52\">\r\nbut was not.\r\nExpected :1.1.125.52\r\nActual :0.0.0.0\r\n <",
            "resolved": "2019-05-04",
            "versions": [
                "3.6"
            ],
            "fixVersions": []
        },
        {
            "issue_id": "NET-663",
            "project": "Commons Net",
            "title": "NullPointerException when FTPClient remote verification fails",
            "type": "Bug",
            "description": "At L934 of the {{FTPClient}}\u00a0code, Apache does a check to see whether the data and control connections are at the same IP address ({{verifyRemote}}). If they differ, the data connection socket is closed and an exception is raised.\u00a0 This can be disabled, but is the default behavior ({{__remoteVerificationEnabled = true}}).\r\n\r\nI'm connecting to the FTP via a proxy.  In my setup, the L934-939 code path where {{verifyRemote}} returns false always raises a {{java.lang.NullPointerException}}.  {{socket.getInetAddress()}} seems to return {{null}} after {{socket.close}} is called, leading to {{socket.getInetAdress().getHostAddress()}} to raise the {{java.lang.NullPointerException}} at L938.   This obfuscates a really useful error message (\"Host attempting data connection is not the same as server\") with a difficult to debug {{NullPointerException}}.\r\n\r\nExample State:\r\n\r\n{code}\r\nthis.__remoteVerificationEnabled -> true\r\nthis.getRemoteAddress().toString() -> \"ftp.example.com/987.654.321.000\"\r\nsocket.getInetAddress().toString() -> \"/123.456.789.000\"\r\n{code}",
            "resolved": "2020-06-19",
            "versions": [
                "3.6"
            ],
            "fixVersions": [
                "3.7"
            ]
        },
        {
            "issue_id": "NET-659",
            "project": "Commons Net",
            "title": "Java Doc FTPClient setControlKeepAliveTimeout() wrong comment",
            "type": "Bug",
            "description": "In the java doc of the class FTPClient (head) is following line:\r\n\r\n{{ ftpClient.setControlKeepAliveTimeout(300); // set timeout to 5 minutes }}\r\n\r\nBut the parameter timeout is in milliseconds, so 5 minutes are 300.000 milliseconds.",
            "resolved": "2019-05-04",
            "versions": [
                "3.6"
            ],
            "fixVersions": []
        },
        {
            "issue_id": "NET-658",
            "project": "Commons Net",
            "title": "FTPClient.retrieveFile hang due to data connection failure",
            "type": "Bug",
            "description": "When retrieving files from FTP server, the client will open a data connection with an in-use port and failed in server, but the client hung in this function(no error, no exception, even the connection is closed due to timeout by server). This will occur after successfully getting hundreds of files (I have more than 4000 small files to be transferred, it will fail after 100+ or 300+ or 400+ files. It always fail to FTP 4000 small files.)",
            "resolved": "2018-03-05",
            "versions": [
                "3.6"
            ],
            "fixVersions": []
        },
        {
            "issue_id": "NET-646",
            "project": "Commons Net",
            "title": "ALLO FTP Command for files >2GB",
            "type": "Bug",
            "description": "The allo() and allocate() methods of FTPClient should be made deprecated and new versions should be added that accept a 64-bit size.",
            "resolved": "2019-05-04",
            "versions": [
                "3.6"
            ],
            "fixVersions": []
        },
        {
            "issue_id": "NET-643",
            "project": "Commons Net",
            "title": "NPE when closing telnet stream",
            "type": "Bug",
            "description": "our code:\n{code:java}\ntry {\n            TelnetClient telnetClient = new TelnetClient();\n            telnetClient.connect(address, port);\n            mInput = new BufferedInputStream(telnetClient.getInputStream());\n            mOutput = new PrintStream(telnetClient.getOutputStream());\n            BufferedReader br = new BufferedReader(new InputStreamReader(this.mInput));\n            ... some IO on streams ...\n} catch (IOException e) {\n            if (Dbg.DEBUG) {\n                Dbg.d(TAG, \"telnet exception \" + Dbg.getStackTraceString(e));\n            }\n            return false;\n} finally {\n            try {\n                  if (mInput != null) mInput.close();\n                  if (mOutput != null) mOutput.close();\n            } catch (IOException ignored) {}\n}\n{code}",
            "resolved": "2018-02-08",
            "versions": [
                "3.6"
            ],
            "fixVersions": [
                "3.7"
            ]
        },
        {
            "issue_id": "NET-641",
            "project": "Commons Net",
            "title": "SubnetUtils.SubnetInfo.isInRange(\"0.0.0.0\") returns true for CIDR/31, 32",
            "type": "Bug",
            "description": "Code:\nimport org.apache.commons.net.util.SubnetUtils;\n\npublic class A {\n  public static void main(String[] args) {\n    System.out.println(new SubnetUtils(\"192.168.1.0/30\").getInfo().isInRange(\"0.0.0.0\"));\n    System.out.println(new SubnetUtils(\"192.168.1.0/31\").getInfo().isInRange(\"0.0.0.0\"));\n    System.out.println(new SubnetUtils(\"192.168.1.0/32\").getInfo().isInRange(\"0.0.0.0\"));\n  }\n}\n\nResult:\nfalse\ntrue\ntrue\n\nExpected:\nfalse\nfalse\nfalse\n",
            "resolved": "2017-08-04",
            "versions": [
                "3.6"
            ],
            "fixVersions": [
                "3.7"
            ]
        },
        {
            "issue_id": "NET-639",
            "project": "Commons Net",
            "title": "Bug in MVSFTPEntryParser.preParse - MVS, z/OS",
            "type": "Bug",
            "description": "Some PS-files couldn't be retrieved from ftp host (during FTPClient.listFiles(\"xxx\")). After investigation we've noticed, that the file has an unusual large allocation info (reading \n\n{code:java}\nVolume Unit    Referred Ext Used Recfm Lrecl BlkSz Dsorg Dsname\n   :     :          :     :   :    :      :    :    :      :\nPEZ320 3390   2017/07/03  215807  FB   29600 29600  PS  'LBP.TX.FTP.LAZAGDOM.WORK.HILF'\n   :     :          :     :   :    :      :    :    :      :\n\n{code}\n\nso the values of ext and used column merged. As a result, the pattern FILE_LIST_REGEX in MVSFTPEntryParser doesn't match -> the file is ignored.\n\nQuick Fix in Comments described ...",
            "resolved": "2017-07-03",
            "versions": [
                "3.6"
            ],
            "fixVersions": [
                "3.7"
            ]
        },
        {
            "issue_id": "NET-636",
            "project": "Commons Net",
            "title": "examples should be in org.apache.commons.net subpackage",
            "type": "Bug",
            "description": "The examples are currently under the top-level 'examples' package.\n\nThis was fine when they were only documentation samples, but they are now working examples which are published (in a separate jar).\n\nThe package needs to ge changed to be under org.apache.commons.net.\n\nGiven that they are clearly marked as examples, they are not part of the public API (and are not in the standard binary jar). Thus the change will not impact  compatibility of the component proper.\n\n",
            "resolved": "2017-04-21",
            "versions": [
                "3.6"
            ],
            "fixVersions": [
                "3.7"
            ]
        },
        {
            "issue_id": "NET-635",
            "project": "Commons Net",
            "title": "Problems with German summertime",
            "type": "Bug",
            "description": "There is a problem at the funktion org.apache.commons.net.ftp.parser.FTPTimestampParserImpl.parseTimestamp\nAt the ftp Server exists a file with the timestamp \"Mar 26 02:29\"\nIn Germany, the clock will be switched at 2:00 from wintertime to summertime Mar 26 2:00 -> Mar 26 3:00.\nSo the time \"Mar 26 02:29\" is invalid if the commons-net function will run on a german server.\nThe workaround is, to set the servertimezone to GMT\n",
            "resolved": "2017-03-27",
            "versions": [
                "3.6"
            ],
            "fixVersions": []
        },
        {
            "issue_id": "NET-631",
            "project": "Commons Net",
            "title": "Bug in MVSFTPEntryParser.parseUnixList (FindBugs)",
            "type": "Bug",
            "description": "FindBugs reports a bug in MVSFTPEntryParser#parseUnixList:\n\n\"Bug: The parameter file to org.apache.commons.net.ftp.parser.MVSFTPEntryParser.parseUnixList(FTPFile, String) is dead upon entry but overwritten\nThe initial value of this parameter is ignored, and the parameter is overwritten here. This often indicates a mistaken belief that the write to the parameter will be conveyed back to the caller.\"\n\nSince the other parsexxx() methods update the passed FTPFile parameter it looks like it was indeed the intention to update the parameter.\n\nUnfortunately there are no tests which exercise this code, and I have been unable to find examples of FTP LIST output for MVS in Unix mode. The code in preParse() looks for the string \"total\" at the start of the first line of output. [Presumably subsequent lines look like normal Unix FTP listings.]",
            "resolved": "2017-03-23",
            "versions": [],
            "fixVersions": [
                "3.7"
            ]
        },
        {
            "issue_id": "NET-624",
            "project": "Commons Net",
            "title": "SubnetInfo#toCidrNotation - a wrong format subnet mask is allowed",
            "type": "Bug",
            "description": "An IPv4 subnet mask, which is also the network mask, must consist of a set of contiguous 1-bits followed by a block of 0-bits (i.e. 255.255.255.0), but it does not check.\n\n{code}\n/* 255.255.0.1 is 11111111.11111111.00000000.00000001 in  binary */\nSubnetUtils su = new SubnetUtils(\"192.168.0.1\", \"255.255.0.1\"); // expect error\nSubnetInfo si = su.getInfo();\nSystem.out.println(si.getNetmask()); // Expect error or 255.255.0.1\n255.255.128.0\n{code}\n\nhttps://github.com/apache/commons-net/pull/13",
            "resolved": "2017-03-10",
            "versions": [
                "2.0"
            ],
            "fixVersions": [
                "3.7"
            ]
        },
        {
            "issue_id": "NET-620",
            "project": "Commons Net",
            "title": "Strict CRLF handling in Commons-NET FTP breaks compatibility with some FTP servers",
            "type": "Bug",
            "description": "The fix for FTP.java in NET-401 to switch from using BufferedReader to CRLFLineReader breaks the ability to connect to servers that have varying LF and CRLF line termination in the banner.\n\nI've run into 2 different cases with slightly different banner configs, one where you end up hung indefinitely by not reading far enough (this is the sigquit from when it is hung):\n\n1. Thread=FTP Provider Protocol Provider Thread: class com.xxxx.xxxxx.xxx (00007F35A1AF4A00) Status=Running\n       at java/net/SocketInputStream.socketRead0(Ljava/io/FileDescriptor;[BIII)I (Native Method)\n       at java/net/SocketInputStream.read([BIII)I (SocketInputStream.java:164) (Compiled Code)\n       at java/net/SocketInputStream.read([BII)I (SocketInputStream.java:134) (Compiled Code)\n       at sun/nio/cs/StreamDecoder.readBytes()I (StreamDecoder.java:323) (Compiled Code)\n       at sun/nio/cs/StreamDecoder.implRead([CII)I (StreamDecoder.java:365) (Compiled Code)\n       at sun/nio/cs/StreamDecoder.read([CII)I (StreamDecoder.java:211) (Compiled Code)\n       at java/io/InputStreamReader.read([CII)I (InputStreamReader.java:206) (Compiled Code)\n       at java/io/BufferedReader.fill()V (BufferedReader.java:166) (Compiled Code)\n       at java/io/BufferedReader.read()I (BufferedReader.java:187) (Compiled Code)\n       at org/apache/commons/net/io/CRLFLineReader.readLine()Ljava/lang/String; (CRLFLineReader.java:58)\n       at org/apache/commons/net/ftp/FTP.__getReply(Z)V (FTP.java:357)\n       at org/apache/commons/net/ftp/FTP.__getReply()V (FTP.java:300)\n       at org/apache/commons/net/ftp/FTP._connectAction_(Ljava/io/Reader;)V (FTP.java:438)\n       at org/apache/commons/net/ftp/FTPClient._connectAction_(Ljava/io/Reader;)V (FTPClient.java:962)\n       at org/apache/commons/net/ftp/FTPClient._connectAction_()V (FTPClient.java:950)\n       at org/apache/commons/net/SocketClient._connect(Ljava/net/InetAddress;ILjava/net/InetAddress;I)V (SocketClient.java:244)\n       at org/apache/commons/net/SocketClient.connect(Ljava/net/InetAddress;I)V (SocketClient.java:181)\n\n\n2. And one where you error out by reading too far and getting a null back:\n\nCaused by:\norg.apache.commons.net.ftp.FTPConnectionClosedException: Connection closed without indication.\n    at org.apache.commons.net.ftp.FTP.__getReply(FTP.java:317)\n    at org.apache.commons.net.ftp.FTP.__getReply(FTP.java:294)\n    at org.apache.commons.net.ftp.FTP.sendCommand(FTP.java:483)\n    at org.apache.commons.net.ftp.FTP.sendCommand(FTP.java:608)\n    at org.apache.commons.net.ftp.FTP.user(FTP.java:753)\n    at org.apache.commons.net.ftp.FTPClient.login(FTPClient.java:1034)\n\nI do have hex data available to show the source data, but the end result is there's a mix of 0d0a (CRLF) and 0a (LF) termination in the FTP banner (220-)\n\nI can modify the library to undo the NET-401 change, but ideally it'd be nice to have a strictNewline type of setting you could set on the FTPClient object to decide if you want to be ultra-strict, or ultra compatible. I will be filing a defect with Cisco about this as well, but it would be great if the FTPClient had the option to handle it instead of forced compatibility with no options to relax it.\n\nThis is kind of hinted at in one of the comments on NET-402 by Bogdan Drozdowski on 12/Apr/11\n\"So, on one hand, we stop supporting non-conforming servers (which could mean that we're supporting less servers now), but on the other hand we're fixing a bug that someone has found in a real-life system.\"\n\nGiving users the option to relax the conformity requirements (but strict by default) would allow the end user to choose the option.\n\nAny thoughts on this?",
            "resolved": "2018-02-08",
            "versions": [
                "3.3",
                "3.4",
                "3.5",
                "3.6"
            ],
            "fixVersions": []
        },
        {
            "issue_id": "NET-618",
            "project": "Commons Net",
            "title": "System Information Leak in ftp parser",
            "type": "Bug",
            "description": "Exception is printed to console in src/main/java/org/apache/commons/net/ftp/parser/MVSFTPEntryParser.java which can leak system information:\n{code}\n    private boolean parseMemberList(FTPFile file, String entry) {\n        if (matches(entry)) {\n            file.setRawListing(entry);\n            String name = group(1);\n            String datestr = group(2) + \" \" + group(3);\n            file.setName(name);\n            file.setType(FTPFile.FILE_TYPE);\n            try {\n                file.setTimestamp(super.parseTimestamp(datestr));\n            } catch (ParseException e) {\n                e.printStackTrace();\n                // just ignore parsing errors.\n                // TODO check this is ok\n                return false; // this is a parsing failure too.\n            }\n            return true;\n        }\n\n        return false;\n    }\n{code}\n\n",
            "resolved": "2017-02-28",
            "versions": [
                "3.6"
            ],
            "fixVersions": [
                "3.7"
            ]
        },
        {
            "issue_id": "NET-617",
            "project": "Commons Net",
            "title": "Heap Inspection: Passwords can be revealed from heap for ExtendedPop3Client",
            "type": "Bug",
            "description": "In src/main/java/org/apache/commons/net/pop3/ExtendedPOP3Client.java password is a String. This should be bytes and be cleared after usage.\n \nSimilair issue as https://issues.apache.org/jira/browse/NET-616\n\nMitigation: proper protect memory of os process and heap dumps.\n\nAbstract:\n\nThe method auth() in ExtendedPOP3Client.java stores sensitive data in a String object, making it impossible to reliably purge the data from memory.\n\n\nExplanation:\n\nSensitive data (such as passwords, social security numbers, credit card numbers etc) stored in memory can be leaked if memory is not cleared after use. Often, Strings are used store sensitive data, however, since String objects are immutable, removing the value of a String from memory can only be done by the JVM garbage collector. The garbage collector is not required to run unless the JVM is low on memory, so there is no guarantee as to when garbage collection will take place. In the event of an application crash, a memory dump of the application might reveal sensitive data.\n",
            "resolved": "2020-06-19",
            "versions": [
                "3.6"
            ],
            "fixVersions": []
        },
        {
            "issue_id": "NET-614",
            "project": "Commons Net",
            "title": "IMAP fails to quote/encode mailbox names",
            "type": "Bug",
            "description": "Mailbox names need to be quoted if they contain spaces or double-quote.\n\nIf they contain non-ASCII characters then they also need to be encoded [1]\n\nThere may be other parameters that are not being encoded/quoted correctly.\n\n[1] https://tools.ietf.org/html/rfc3501#section-5.1.3",
            "resolved": "2018-10-05",
            "versions": [
                "3.6"
            ],
            "fixVersions": []
        },
        {
            "issue_id": "NET-611",
            "project": "Commons Net",
            "title": "FTP does not validate command reply syntax fully",
            "type": "Bug",
            "description": "The reply to a command consists of 3 digits, followed by space, followed by text.\nFor a multi-line reply, the space is replaced with a hypen (minus) on the first line.\n\nThe code currently handles the hyphen correctly, but it does not insist that the reply code is followed by a space.\n\nIt ought to check this and throw a MalformedServerReplyException if the reply does not have the correct syntax.",
            "resolved": "2017-02-07",
            "versions": [],
            "fixVersions": [
                "3.6"
            ]
        },
        {
            "issue_id": "NET-610",
            "project": "Commons Net",
            "title": "FTPClient.mlistFile incorrectly handles MLST reply",
            "type": "Bug",
            "description": "By RFC 3659 server must start fact with space character. But some inaccurate realisations reply without starting space.\nBut org.apache.commons.net.ftp.FTPClient.mlistFile() skips leading character even it is not a space:\n    public FTPFile mlistFile(String pathname) throws IOException\n    {\n        boolean success = FTPReply.isPositiveCompletion(sendCommand(FTPCmd.MLST, pathname));\n        if (success){\n            String entry = getReplyStrings()[1].substring(1); // skip leading space for parser\n            return MLSxEntryParser.parseEntry(entry);\n        } else {\n            return null;\n        }\n    }\n\n\nI think it is wrong. The method should throw exception, if first character is not a space. Or does not remove starting char (and should be some option responsible for that behaviour) if it is not a space.\n\nmy workaround in overriden method:\n    public FTPFile mlistFile(String pathname) throws IOException {\n        final boolean success = FTPReply.isPositiveCompletion(sendCommand(FTPCmd.MLST, pathname));\n        if (success) {\n            final String reply = getReplyStrings()[1];\n            final String entry = reply.charAt(0) == ' ' ? reply.substring(1) : reply;\n            return MLSxEntryParser.parseEntry(entry);\n        } else {\n            return null;\n        }\n    }\n",
            "resolved": "2017-02-07",
            "versions": [
                "3.5"
            ],
            "fixVersions": [
                "3.6"
            ]
        },
        {
            "issue_id": "NET-609",
            "project": "Commons Net",
            "title": "DefaultUnixFTPFileEntryParserFactory Issue (leading spaces removal configuration)",
            "type": "Bug",
            "description": "I have an issue when calling listFiles() method on a FTP server.\nThe FTPFileEntry parser fail to parse the entry by adding a non existing leading space in the filename.\n\nIn the FTP library, a boolean field is existing to remove the leading spaces and needs to be set to true (in my case).\n\nThe issue is in the file DefaultUnixFTPFileEntryParserFactory.java (L124-L128) :\n{code:java}\nif (parser == null) { // Now try for aliases\n            String ukey = key.toUpperCase(java.util.Locale.ENGLISH);\n            if (ukey.indexOf(FTPClientConfig.SYST_UNIX) >= 0)\n            { // FTPClientConfig.SYST_UNIX = \"UNIX\"\n                parser = new UnixFTPEntryParser(config, false);\n            }\n            else if  (ukey.indexOf(FTPClientConfig.SYST_UNIX_TRIM_LEADING) >= 0)\n            { // FTPClientConfig.SYST_UNIX_TRIM_LEADING = \"UNIX_LTRIM\"\n                parser = new UnixFTPEntryParser(config, true);\n            }\n            // ...\n}\n{code}\n\nI think the issue is that the else if condition is unreachable because if second condition is true, the first condition is matching too :\nFTPClientConfig.SYST_UNIX = \"UNIX\"\nFTPClientConfig.SYST_UNIX_TRIM_LEADING = \"UNIX_LTRIM\"\n\nI think the issue is related to the commit on NET-566 (commit: http://svn.apache.org/viewvc?view=revision&revision=1652696)",
            "resolved": "2017-02-06",
            "versions": [
                "3.4",
                "3.5"
            ],
            "fixVersions": [
                "3.6"
            ]
        },
        {
            "issue_id": "NET-608",
            "project": "Commons Net",
            "title": "Exception when using addProtocolCommandListener with library org.apache.commons.net.telnet.TelnetClient",
            "type": "Bug",
            "description": "According to the API documentation for WhoisClient and FTPClient these commands appear to support inherited functionality of addProtocolCommandListener.\n\nHowever, when i used this as follows....i get exceptions raised for TelnetClient and WhoisClient but not the FTPClient.\n\nIs this a bug or as designed? Or am I missing something ?\n\n   import org.apache.commons.net.*;\n   import org.apache.commons.net.ProtocolCommandListener;\n   import org.apache.commons.net.ftp.FTPClient;\n   import org.apache.commons.net.telnet.TelnetClient;\n   import org.apache.commons.net.whois.WhoisClient;\n   import java.io.PrintWriter;\n\n   public class WhoisExample\n   {\n       public static void main(String args[])\n       {\n           try {\n               WhoisClient whoisClient = new WhoisClient();\n               whoisClient.addProtocolCommandListener(new PrintCommandListener(new PrintWriter(System.out)));\n           }\n           catch(Exception e) {\n               System.out.println(\"whois client exception\" + e);\n           }\n\n           try {\n               TelnetClient telnetClient = new TelnetClient();\n               telnetClient.addProtocolCommandListener(new PrintCommandListener(new PrintWriter(System.out)));\n           }\n           catch(Exception e) {\n               System.out.println(\"telnet client exception\" + e);\n           }\n\n           try {\n               FTPClient ftpClient = new FTPClient();\n               ftpClient.addProtocolCommandListener(new PrintCommandListener(new PrintWriter(System.out)));\n\n               System.out.println(\"no ftp client exception here !\");\n           }\n           catch(Exception e)\n           {\n               System.out.println(\"ftp client exception\" + e);\n           }\n       }\n   }\n\n\nI get the following exception....\n\nCaught: java.lang.NullPointerException Disconnected from the target VM, address: '127.0.0.1:3140', transport: 'socket' java.lang.NullPointerException at org.apache.commons.net.SocketClient.addProtocolCommandListener(SocketClient.java:772) at org.apache.commons.net.SocketClient$addProtocolCommandListener.call(Unknown Source)",
            "resolved": "2017-02-07",
            "versions": [
                "3.5"
            ],
            "fixVersions": []
        },
        {
            "issue_id": "NET-606",
            "project": "Commons Net",
            "title": "Thread hangs when invoke connect method",
            "type": "Bug",
            "description": "ftp hangs when trying connect. stack as follows. \n\n{noformat}\n\"UpdateBrowSerParam\" #633 prio=5 os_prio=0 tid=0x00007f60610cc000 nid=0x2165 runnable [0x00007f6037403000]\n   java.lang.Thread.State: RUNNABLE\n\tat java.net.SocketInputStream.socketRead0(Native Method)\n\tat java.net.SocketInputStream.socketRead(SocketInputStream.java:116)\n\tat java.net.SocketInputStream.read(SocketInputStream.java:170)\n\tat java.net.SocketInputStream.read(SocketInputStream.java:141)\n\tat sun.security.ssl.InputRecord.readFully(InputRecord.java:465)\n\tat sun.security.ssl.InputRecord.read(InputRecord.java:503)\n\tat sun.security.ssl.SSLSocketImpl.readRecord(SSLSocketImpl.java:973)\n\t- locked <0x00000006d44fdd70> (a java.lang.Object)\n\tat sun.security.ssl.SSLSocketImpl.performInitialHandshake(SSLSocketImpl.java:1375)\n\t- locked <0x00000006d44fdda0> (a java.lang.Object)\n\tat sun.security.ssl.SSLSocketImpl.startHandshake(SSLSocketImpl.java:1403)\n\tat sun.security.ssl.SSLSocketImpl.startHandshake(SSLSocketImpl.java:1387)\n\tat org.apache.commons.net.ftp.FTPSClient.sslNegotiation(FTPSClient.java:263)\n\tat org.apache.commons.net.ftp.FTPSClient._connectAction_(FTPSClient.java:192)\n\tat org.apache.commons.net.SocketClient.connect(SocketClient.java:164)\n\tat org.apache.commons.net.SocketClient.connect(SocketClient.java:184)\n\tat com.swimap.prs.utils.ftp.FTPSTransfer.initFTPSClient(FTPSTransfer.java:96)\n\tat com.swimap.prs.utils.ftp.FTPSTransfer.initFtpsClient(FTPSTransfer.java:336)\n\tat com.swimap.prs.utils.ftp.FTPSTransfer.upload(FTPSTransfer.java:236)\n\tat com.swimap.prs.application.paimgr.session.impl.TransferFileService.uploadFile(TransferFileService.java:57)\n{noformat}\n\nthis issue happen sometimes when the other times is ok.\ncode as follows:\n\n{code}\nftps = new FTPSClient(\"TLSv1.2\", true);\nftps.setConnectTimeout(10000);\nftps.setDataTimeout(20000);\nftps.setControlEncoding(\"UTF-8\");\nftps.connect(ftpServerInfo.getIp());\nftps.setSoTimeout(20000);\n{code}",
            "resolved": "2017-02-13",
            "versions": [
                "2.2"
            ],
            "fixVersions": []
        },
        {
            "issue_id": "NET-605",
            "project": "Commons Net",
            "title": "FTPSClient forces IP in SubjectAlternativeNames field for server certificate validation instead of hostname",
            "type": "Bug",
            "description": "We have an FTP Server with a signed certificate, with both CN and SAN DNS entries set to the respective hostname of the machine.\n\nWhen attempting to connect using FTPSClient, we get java.security.cert.CertificateException: No subject alternative names matching IP address x.x.x.x found. The FTPSClient appears to resolve the IP address and pass that through the SSLSocket where it eventually raises the exception.\n\nWhile we initially encountered the error against our internal FTP server, we have confirmed the same issue against a public FTP server. ftps://demo:password@test.rebex.net.",
            "resolved": "2017-03-01",
            "versions": [
                "3.5"
            ],
            "fixVersions": []
        },
        {
            "issue_id": "NET-602",
            "project": "Commons Net",
            "title": "Failure to parse times from SYST_L8 systems that report as \"WINDOWS Type: L8\"",
            "type": "Bug",
            "description": "When getting file entries from a Type: L8 system running on a Windows server the code cannot extract the timestamp of the file correctly (it returns null).\n\nThe entry format returned by the server is as follows:\n-rwxrwxrwx    1 user     group             2490 Sep    7 2016 file.txt\n\nThe reason for this appears to be a bug in the way the DefaultFTPFileEntryParserFactory constructs the CompositeFileEntryParser (createNTFTPEntryParser method), as when it passes the config object through to the NTFTPEntryParser first, the config passed through is updated with the Default timestamp format for Windows FTP servers \"MM-dd-yy hh:mma\", and then when the same config object is passed to the UnixFTPEntryParser it picks up this default and tries to use it instead of what it should be which is \"MMM d yyyy\".\n\nNot sure when this bug was introduced but it is at least present in 3.3 and 3.5.\n\nThe problem may also be present for the createOS400FTPEntryParser, though I have not confirmed this.\n\nPotential Solution:\nWhen passing the config through to the parsers for each part of the CompositeFileEntryParser they should be using a clone of the original to avoid this kind of cross-contamination between different parser types.",
            "resolved": "2017-02-07",
            "versions": [
                "3.3",
                "3.5"
            ],
            "fixVersions": [
                "3.6"
            ]
        },
        {
            "issue_id": "NET-601",
            "project": "Commons Net",
            "title": "IMAPClient.select cannot select mailbox in some cases with \u00e6\u00f8\u00e5, spaces and sub-folders",
            "type": "Bug",
            "description": "Partial response from LIST:\n\n{code}\nAAAB LIST  \"\" \"*\"\n* LIST (\\HasNoChildren) \"\\\\\" \"Backup log\"\n* LIST (\\Noinferiors \\HasNoChildren) \"\\\\\" Inbox\n* LIST (\\HasNoChildren) \"\\\\\" M&APg-ter\n* LIST (\\HasChildren) \"\\\\\" Presis\n* LIST (\\HasNoChildren) \"\\\\\" {24}\nPresis\\Bod&APg- Industri\n* LIST (\\HasNoChildren) \"\\\\\" {11}\nPresis\\Done\n* LIST (\\HasNoChildren) \"\\\\\" {15}\nPresis\\id filer\n{code}\n\nTrying to select Presis\\Bod\u00f8 Industri fails like this\nAAAB SELECT \"Presis\\Bod&APg- Industri\"\nAAAB NO SELECT failure, cannot select mailbox: Folder not found in IMAP name space\n\nAnd trying to select Presis\\id filer fails like this\nAAAB SELECT \"Presis\\id filer\"\nAAAB NO SELECT failure, cannot select mailbox: Folder not found in IMAP name space\n\nSo far it seems like select fails when folder has more than one:\n* none US-ASCII\n* space\n* sub-folder separator",
            "resolved": "2020-06-19",
            "versions": [
                "3.5"
            ],
            "fixVersions": []
        },
        {
            "issue_id": "NET-600",
            "project": "Commons Net",
            "title": "FTPClient.rename() doesn't work well for a Linux FTP",
            "type": "Bug",
            "description": "FTPClient.rename() API doesn't work well for a Linux FTP, especially for setting a user directory as its root directory case,\nFor example, for a ubuntu vsftpd, which is having \"/home/user1\" as its root directory, when renaming \"/test1.txt\" to \"/test2.txt\", it will return false, because those paths are not the full path.\nIn this case, it should consider the workingDirectory(would be \"/home/user1\") together and append it to the from/to path to make the API work.",
            "resolved": "2016-08-01",
            "versions": [
                "3.5"
            ],
            "fixVersions": []
        },
        {
            "issue_id": "NET-597",
            "project": "Commons Net",
            "title": "FTP fails to parse listings for Solaris 10 FTPd in Japanese",
            "type": "Bug",
            "description": "Commons Net lists no files for Solaris 10 FTPd (or WU-FTPD) when the server language is Japanese.\n\nHere is the result of the sample client.\n{panel}\njava -jar commons-net-examples-3.5.jar FTPClientExample -l 192.168.2.160 root password\n220 unknown FTP server ready.\nConnected to 192.168.2.160 on 21\nUSER *******\n331 Password required for root.\nPASS *******\n230 User root logged in.\nSYST\n215 UNIX Type: L8 Version: SUNOS\nRemote system is UNIX Type: L8 Version: SUNOS\nTYPE A\n200 Type set to A.\nPASV\n227 Entering Passive Mode (192,168,2,160,235,174)\nLIST\n150 Opening ASCII mode data connection for /bin/ls.\n226 Transfer complete.\nNOOP\n200 NOOP command successful.\nQUIT\n221-You have transferred 0 bytes in 0 files.\n221-Total traffic for this session was 3426 bytes in 1 transfers.\n221-Thank you for using the FTP service on unknown.\n221 Goodbye.\n{panel}\n\nI identified the cause in the source code. I'm attaching a patch later.\n\nOn Japanese Solaris 10, the result of \"ls -l\" is like below;\n{panel}\ndrwxrwxrwt  10 root     sys          875  7\u6708  7\u65e5  14:18 tmp\ndrwxr-xr-x  40 root     sys         1024  6\u6708 13\u65e5 2014\u5e74 usr\ndrwxr-xr-x  47 root     sys         1024  6\u6708 13\u65e5 2014\u5e74 var\ndr-xr-xr-x   6 root     root         512  2\u6708 25\u65e5  15:11 vol\n{panel}\nAs you can see, the timestamp has the postfixes of \"month\", \"date\", and \"year\" in Japanese.\nThe current REGEX of UnixFTPEntryParser doesn't work for it because of the Japanese postfixes.",
            "resolved": "2020-06-23",
            "versions": [
                "3.4",
                "3.5"
            ],
            "fixVersions": []
        },
        {
            "issue_id": "NET-596",
            "project": "Commons Net",
            "title": "NullPointerException when disconnecting TelnetClient twice with JDK 7",
            "type": "Bug",
            "description": "When using the TelnetClient class, a {{NullPointerException}} may occur when calling the {{disconnect}} method twice, in the {{_closeOutputStream}} method called under the hood, if the Telnet connection is lost (for instance, server is hardly shut down).\n\n1. The first call to {{disconnect}} resets completely the TelnetClient instance.\n2. The second call to {{disconnect}} leads to the NPE exception, because the {{\\_output\\_}} property is {{null}}, in the {{_closeOutputStream}} method.\n\n*NOTE: the NPE does not occur with JDK 8, because, the first call to {{disconnect}} throws an I/O exception (socket is closed), leaving the TelnetClient instance with a non-null {{\\_output\\_}} property. Then a second call to disconnect does not throw a NPE. It seems the JDK 8 behaves differently when a client socket loses a connection. So there is also a bug with JDK 8, as disconnection shall close quietly resources without an I/O exception, and without leaving non-null resources, and then disconnect the client socket. The {{SocketClient.disconnect}} is a good implementation to start with.*\n\nThe problem is that the TelnetOutputStream class closes the Socket output stream under the hood, but doesn't check if it is null and doesn't reset it to null once done. _The implementation of the TelnetOutputStream is quite strange, as there is a cycling dependency between this class and the TelnetClient class. The {{TelnetClient}} class shall handle itself the close of its internal resources, and disconnect the client socket. But this responsibility is delegates to the TelnetOutputStream._\n\nHere's the stack trace of the NPE exception:\n{quote}\n|java.lang.NullPointerException\n     at org.apache.commons.net.telnet.TelnetClient._closeOutputStream(TelnetClient.java:83)\n      at org.apache.commons.net.telnet.TelnetOutputStream.close(TelnetOutputStream.java:163)\n      at org.apache.commons.net.telnet.TelnetClient.disconnect(TelnetClient.java:124)\n{quote}\n\nA way to workaround this bug, is to always check if the {{TelnetClient}} instance is connected, before calling the {{disconnect}} method.\n",
            "resolved": "2017-02-07",
            "versions": [
                "3.5"
            ],
            "fixVersions": [
                "3.6"
            ]
        },
        {
            "issue_id": "NET-594",
            "project": "Commons Net",
            "title": "TelnetClient._closeOutputStream unhandled exception from FilterOutputStream.close",
            "type": "Bug",
            "description": "As part of fixing an existing bug Oracle introduced a new bug into FilterOutputStream.close:\n\nhttp://bugs.java.com/bugdatabase/view_bug.do?bug_id=8054565\n\nWhile the bug is marked as fixed the fix will not be available until Java 9 from what I can tell and is not in the latest release as of writing (1.8.91)\n\nThis bug can also be reproduced through remote socket closure.\n\nDue to this bug the TelnetClient when calling disconnect() throws an unhandled exception and is unable to close the connection, if the socket was remotely closed.\n\nStack Trace:\n\njava.net.SocketException: Socket closed\n        at java.net.SocketOutputStream.socketWrite(SocketOutputStream.java:121)\n        at java.net.SocketOutputStream.write(SocketOutputStream.java:147)\n        at java.io.BufferedOutputStream.flushBuffer(BufferedOutputStream.java:82)\n        at java.io.BufferedOutputStream.flush(BufferedOutputStream.java:140)\n        at java.io.FilterOutputStream.close(FilterOutputStream.java:159)\n        at org.apache.commons.net.telnet.TelnetClient._closeOutputStream(TelnetClient.java:86)\n        at org.apache.commons.net.telnet.TelnetOutputStream.close(TelnetOutputStream.java:155)\n        at org.apache.commons.net.telnet.TelnetClient.disconnect(TelnetClient.java:127)\n",
            "resolved": "2017-02-07",
            "versions": [
                "3.4"
            ],
            "fixVersions": [
                "3.6"
            ]
        },
        {
            "issue_id": "NET-593",
            "project": "Commons Net",
            "title": "HostnameVerifier is called with ip addess instead of the provided hostname",
            "type": "Bug",
            "description": "When TLS is used (not StartTLS) on port 465, the HostnameVerifier is checking for the ip address, not the hostname. This results in a failure on each connection.",
            "resolved": "2016-06-14",
            "versions": [
                "3.4"
            ],
            "fixVersions": []
        },
        {
            "issue_id": "NET-592",
            "project": "Commons Net",
            "title": "plainSocket in FTPSClient is never closed",
            "type": "Bug",
            "description": "The plainSocket field in the FTPSClient is never closed. Over time, this will lead to an IOException with \"too many open files\".\n\nTo recreate this, try the following in a loop:\n\n- create an FTPSClient\n- call the login\n- upload a file\n- download the file\n- call logout\n- disconnect within a finally block\n\nI would expect the disconnect call would release all of the file descriptors but if you set a breakpoint you'll notice that this socket remains open.\n\nIn my test driver, this eventually fails after 8,000 iterations until it hits the max file descriptors for the test process. \n\nIf I use some reflection code and force FTPSClient.plainSocket to be accessible so I can close it, then everything works. ",
            "resolved": "2016-07-14",
            "versions": [
                "3.4",
                "3.5"
            ],
            "fixVersions": [
                "3.6"
            ]
        },
        {
            "issue_id": "NET-591",
            "project": "Commons Net",
            "title": "FTPTimeStampParserImpl failing when parsing correctly formed datetimestring (daylight saving issue)",
            "type": "Bug",
            "description": "In the class FTPTimeStampParserImpl,\nthe SimpleDateFormat hackFormatter\nwill throw an exception for certain datestrings, even though their SimpleDateFormat pattern for the hackFormatter instance is correct (\"MMM d HH:mm yyyy\")\nwhen in an environment that has daylight savings, like the environment reported in this bug report.\n\nFor example:\nLine 123:          \n parsed = hackFormatter.parse(timeStampStrPlusYear, pp);\nwhere timeStampStrPlusyear = \"Mar 27 02:02 2016\"\nwill fail but \n timeStampStrPlusyear = \"Mar 27 03:02 2016\"\nwould work.\n\n\nThe problem is according to http://blog.tier1app.com/2013/05/29/daylight-savings-time-problem-java/ that because of the daylight saving, the time \n02:02 doesn't exist in my timezone (thats true - timezone leap was 02:00 the 27th).\n\nSetting the hackformatters lenient to true would make it work, or maybe check if the given date with the default created timezone was in daylight saving.\nHowever I don't know if that's the right way for this project.\n",
            "resolved": "2016-04-15",
            "versions": [
                "3.4"
            ],
            "fixVersions": []
        },
        {
            "issue_id": "NET-589",
            "project": "Commons Net",
            "title": "The managing of the KeepAliveReplyTimeout masks the user's setting",
            "type": "Bug",
            "description": "The class FTPClient uses a convenience static and private class for managing the KeepAlive: CSL. However, this class sets in its constructor the maximum waiting time for the KeepAliveReply (FTPClient:3671), overriding any users's setting for the FTPClient.setSoTimeout.\n \nIf I am not wrong, \"setSoTimeout\" should be set right before to call the \"__noop\" operation in FTPClient:3685, saving the original (user-defined) value for the SoTimeout, and resetting it after the invocation.",
            "resolved": "2016-03-03",
            "versions": [
                "3.3"
            ],
            "fixVersions": []
        },
        {
            "issue_id": "NET-588",
            "project": "Commons Net",
            "title": "FTPClient.setPassiveNatWorkaround assumes host is outside site local range",
            "type": "Bug",
            "description": "We have a NAT firewall between two \"site local\" 10.x networks. The effect is that the FTP library tries to make data connections to the wrong host because the passive NAT workaround doesn't operate if the FTP connection is made to a \"site local\" private address and the host returned in the PASV reply is also \"site local\".\n\nI see that Damon Dan references pretty much the exact issue within bug NET-363 when the workaround was originally introduced.\n\nUsers with \"site local\" networks would be quite at liberty to subnet within the network, I guess, to suit their administrative needs, so this seems like a valid issue.\n\nOptions I can see:\n1) Include a way of forcing the workaround in place\n2) Remove the selectivity around rewriting the host only if the PASV reply is \"site local\" and original host isn't... Issue here is around a server that has multiple endpoints for data connections?\n3) Allow the user to specify their own data host via API\n4) Check for whether the PASV reply address is in a different subnet to the original host we connected to and apply the workaround if so\n\nI haven't yet identified a workaround within the current code!",
            "resolved": "2017-02-07",
            "versions": [
                "3.1",
                "3.3",
                "3.4"
            ],
            "fixVersions": [
                "3.6"
            ]
        },
        {
            "issue_id": "NET-586",
            "project": "Commons Net",
            "title": "FTPTimestampParserImpl test failure since 1 Jan 2016",
            "type": "Bug",
            "description": "Test method {{testFeb29IfLeapYear}} from class {{org.apache.commons.net.ftp.parser.FTPTimestampParserImplTest}} started to fail since 1 January 2016.\n\nStack trace of the failure:\n{code}\ntestFeb29IfLeapYear(org.apache.commons.net.ftp.parser.FTPTimestampParserImplTest)  Time elapsed: 0.005 sec  <<< FAILURE!\njunit.framework.AssertionFailedError: Test: 'Feb 29th' Server=2016-01-04 11:33. Failed to parse Feb 29 00:00. Actual 2015-02-28 12:00. Expected 2016-02-29 12:00\n\tat junit.framework.Assert.fail(Assert.java:57)\n\tat junit.framework.TestCase.fail(TestCase.java:227)\n\tat org.apache.commons.net.ftp.parser.FTPTimestampParserImplTest.checkShortParse(FTPTimestampParserImplTest.java:307)\n\tat org.apache.commons.net.ftp.parser.FTPTimestampParserImplTest.checkShortParse(FTPTimestampParserImplTest.java:279)\n\tat org.apache.commons.net.ftp.parser.FTPTimestampParserImplTest.checkShortParse(FTPTimestampParserImplTest.java:257)\n\tat org.apache.commons.net.ftp.parser.FTPTimestampParserImplTest.testFeb29IfLeapYear(FTPTimestampParserImplTest.java:390)\n{code}",
            "resolved": "2016-02-04",
            "versions": [
                "3.4"
            ],
            "fixVersions": [
                "3.5"
            ]
        },
        {
            "issue_id": "NET-585",
            "project": "Commons Net",
            "title": "Cannot store file by ftpclient in \"ISO-8859-1\" for chinese words \"\u7406.doc\" or \"\u7406\u5206\u518c.doc\"",
            "type": "Bug",
            "description": "I use commons-net package to build a project \" send files to a ftp server provide by windows\"\nand the code look like this:\n{code}\npublic static void UploadFile(String localBaseDir, String remoteBaseDir,\n                                  String fileName) throws Exception\n    {\n    \tSystem.out.println(\"--------------------------------------------------\");\n        InputStream localIn = null;\n        FTPClient ftp = ConnectFtpServer();\n        try\n        {\n        \tSystem.out.println(\"localBaseDir:\" + localBaseDir);\n        \tSystem.out.println(\"remoteBaseDir:\" + remoteBaseDir);\n        \tSystem.out.println(\"fileName:\" + fileName);\n        \tSystem.out.println(\"encoding:\" + System.getProperties().get(\"file.encoding\"));\n        \tSystem.out.println(\"new String:\" + new String(fileName.getBytes((String)System.getProperties().get(\"file.encoding\")),\"ISO-8859-1\"));\n            File localFile = new File(localBaseDir\n                                      );\n            System.out.println(\"isexist=\"+localFile.exists());\n            localIn = new BufferedInputStream(new FileInputStream(localFile));\n\n            String romoteFileName = remoteBaseDir + fileName;\n            // ftp.makeDirectory(new\n            // String(remoteBaseDir.getBytes(\"GBK\"),\"ISO-8859-1\"));\n            //System.out.println(\"makeDirectory:\"+ftp.makeDirectory(remoteBaseDir) );\n            ftpCreateDirectoryTree(ftp,remoteBaseDir);\n            System.out.println(\"changeWorkingDirectory:\"+ftp.changeWorkingDirectory(remoteBaseDir));\n            ftp.setFileType(FTPClient.BINARY_FILE_TYPE);\n            ftp.enterLocalPassiveMode();\n            ftp.setControlEncoding((String)System.getProperties().get(\"file.encoding\"));\n            // boolean result = ftp.storeFile(romoteFileName, localIn);\n            boolean result = ftp.storeFile(\n            \t\tremoteBaseDir+new String(fileName.getBytes((String)System.getProperties().get(\"file.encoding\")),\"ISO-8859-1\"),\n                                 localIn);\n            System.out.println(\"result=\"+result);\n            if (!result)\n            {\n                logger.log(\"\u6587\u4ef6\u4e0a\u4f20\u5907\u4efd\u5931\u8d25\");\n                throw new Exception(\"\u6587\u4ef6\u4e0a\u4f20\u5907\u4efd\u5931\u8d25!\");\n            }\n            \n            System.out.println(\"--------------------------------------------------\");\n        }\n        catch (Exception ex)\n        {\n            logger.log(\"UploadFile\u5f02\u5e38\" + ex.getMessage());\n        }\n        finally\n        {\n            try\n            {\n                if (localIn != null)\n                {\n                    localIn.close();\n                    DisconnectFtpServer(ftp);\n                }\n            }\n            catch (IOException ex2)\n            {\n                logger.log(\"UploadFile close \u5f02\u5e38\" + ex2.getMessage());\n            }\n        }\n    }\n{code}\nand I try to fix this problems by use different encoding ,but I failed.\nby setting enterLocalPassiveMode\nsetControlEncoding\ndifferent string encoding .\n\nI tried all above this and failed. \n",
            "resolved": "2017-02-07",
            "versions": [
                "3.4"
            ],
            "fixVersions": []
        },
        {
            "issue_id": "NET-584",
            "project": "Commons Net",
            "title": "Error when using org.apache.commons.net.ftp.FTPClient setControlKeepAliveTimeout",
            "type": "Bug",
            "description": "I have a question about using library commons-net-3.4.jar\nQuestion is about org.apache.commons.net.ftp.FTPClient method setControlKeepAliveTimeout.\n\nRead about using it on:\nhttps://commons.apache.org/proper/commons-net/apidocs/org/apache/commons/net/ftp/FTPClient.html\n\n\nWhen I use it in my code I get this error:\n{code}\njava.net.SocketTimeoutException: Read timed out\n\tat java.net.SocketInputStream.socketRead0(Native Method)\n\tat java.net.SocketInputStream.read(SocketInputStream.java:163)\n\tat java.net.SocketInputStream.read(SocketInputStream.java:133)\n\tat sun.nio.cs.StreamDecoder.readBytes(StreamDecoder.java:322)\n\tat sun.nio.cs.StreamDecoder.implRead(StreamDecoder.java:364)\n\tat sun.nio.cs.StreamDecoder.read(StreamDecoder.java:210)\n\tat java.io.InputStreamReader.read(InputStreamReader.java:205)\n\tat java.io.BufferedReader.fill(BufferedReader.java:165)\n\tat java.io.BufferedReader.read(BufferedReader.java:186)\n\tat org.apache.commons.net.io.CRLFLineReader.readLine(CRLFLineReader.java:58)\n\tat org.apache.commons.net.ftp.FTP.__getReply(FTP.java:313)\n\tat org.apache.commons.net.ftp.FTP.__getReplyNoReport(FTP.java:303)\n\tat org.apache.commons.net.ftp.FTPClient$CSL.cleanUp(FTPClient.java:3838)\n\tat org.apache.commons.net.ftp.FTPClient._storeFile(FTPClient.java:695)\n\tat org.apache.commons.net.ftp.FTPClient.__storeFile(FTPClient.java:643)\n\tat org.apache.commons.net.ftp.FTPClient.storeFile(FTPClient.java:2033)\n\tat ru.mdm.File.Transfer.FTP.PutRemoteFileBinary(FTP.java:192)\n\tat ru.mdm.File.Transfer.TimeLimit.Thread.Protocol.PutRemoteFileBinaryThread.actionsToExecute(PutRemoteFileBinaryThread.java:23)\n\tat ru.mdm.File.Transfer.TimeLimit.OperationThread.run(OperationThread.java:60)\n{code}\nWithout enabling this option all works fine.\n\n\n\nHere is the code:\n{code}\npackage ru.mdm.File.Transfer;\nimport bin.ru.osa.common.utils.*;\nimport java.util.List;\nimport java.io.*;\nimport com.ibm.broker.javacompute.MbJavaComputeNode;\nimport com.ibm.broker.plugin.*;\nimport org.apache.commons.net.ftp.*;\nimport org.apache.commons.net.*;\nimport ru.mdm.File.Transfer.Options.OptionsXMLProcessor;\n\npublic class FTP implements Protocol \n{\n\t\n\tFTPClient client = new FTPClient();\n\t\n\tOptionsXMLProcessor optionsXMLProcessor;\n\t\n\t\n\tboolean   st;\n\tString LastMessage = new String();\n\t\n\tboolean   ignoreErrors = false;\n\t\n\t\n\tpublic FTP() \n\t{\n\t\tsuper();\t\t\n\t}\n\n\t\n\tprotected void finalize() { disconnect(); }\n\n\t\n\tpublic void connect(String CntName, \n\t\t\t\t\t\tString Host, \n\t\t\t\t\t\tString Port, \n\t\t\t\t\t\tString L, \n\t\t\t\t\t\tString P)  throws Exception\n\t{\n\t  try\n\t  {\t\t\n\t\tclient.setControlKeepAliveTimeout(300);\n\t    client.connect(Host);\n\t    client.login(L, P);\n\t    CheckState();\t    \n\t  }\n\t  catch(Exception e)\n\t  {\n\t     LastMessage=client.getReplyString();\t     \t     \n\t     if(LastMessage == null) LastMessage = e.getMessage();\n\t     \n\t     e.printStackTrace();\n\t     \n\t\t throw e;\n\t  }\n\t}\t\n\t\n\tpublic void disconnect()\n\t{\n\t\ttry\n\t\t{\n\t\t\tif(client.isConnected())\n\t\t\t{\n\t\t\t\tclient.logout();  \n\t\t\t\tclient.disconnect();\n\t\t\t}\n\t\t}\n\t\tcatch(Exception e)\n\t\t{\t\t\t\n\t\t\te.printStackTrace();\n\t\t}\n\t}\t\n\t\n\tpublic void chmod(String RemoteFile, String Rights)  throws Exception\n\t{\n\t\tclient.sendSiteCommand(\"chmod \"+RemoteFile+\" \"+Rights);\n\t\tCheckState();\n\t}\n\t\n\t\n\tpublic void lsMB(MbElement InputDir,MbElement filelist)   throws Exception, MbException\n\t{\n\t\tMbElement xfile;\t\t\n\t\t\n\t\tfor (FTPFile file : client.listFiles((String)InputDir.evaluateXPath(\"string(SOURCE_PATH)\")))\n        {\n          if(!file.isFile()) continue; //-- No sub-dirs, No Symlinks !\t                      \n          \n          xfile=filelist.createElementAsLastChild(MbElement.TYPE_NAME, \"File\", null);\n          xfile.createElementAsLastChild(MbElement.TYPE_NAME, \"FileName\", file.getName());\n          xfile.createElementAsLastChild(MbElement.TYPE_NAME, \"FileSize\", file.getSize());\n          xfile.createElementAsLastChild(MbElement.TYPE_NAME, \"SourcePath\", (String)InputDir.evaluateXPath(\"string(SOURCE_PATH)\"));\n          xfile.createElementAsLastChild(MbElement.TYPE_NAME, \"SourceGateway\", (String)InputDir.evaluateXPath(\"string(GATEWAY_NAME)\"));\n        }\t\t\n\t}\n\t\n\tpublic void mkdir(String RemotePath)   throws Exception\n\t{\n\t   client.makeDirectory(RemotePath);\n\t   CheckState();\n\t}\n\n\t\n\tpublic void chdir(String RemotePath)   throws Exception\n\t{\n\t\tclient.changeWorkingDirectory(RemotePath);\t\n\t\tCheckState();\n\t}\n\n\n\t\n\tpublic void delete(String RemotePath)   throws Exception\n\t{\n\t\tclient.deleteFile(RemotePath);\t\n\t\tCheckState();\n\t}\n\t\n\t\n\t\t\n\tpublic void rename(String RemoteFileSrc, String RemoteFileDst)    throws Exception\n\t{\n\t     client.rename(RemoteFileSrc, RemoteFileDst);\n\t     CheckState();\n\t}\n\t\n\t\t\n   public void GetRemoteFileBinary(String RemoteFile, String LocalFile)     throws Exception\n   {\n\t   client.enterLocalPassiveMode();\n       client.setFileType(FTPClient.BINARY_FILE_TYPE);\n       client.retrieveFile(RemoteFile, \n     \t\t               new FileOutputStream(LocalFile));\n       \n       \n       CheckState();\n    }\n\n  \t\t\n   public void PutRemoteFileBinary(String LocalFile, String RemoteFile)      throws Exception\n   {\n       client.enterLocalPassiveMode();\n       client.setFileType(FTPClient.BINARY_FILE_TYPE);\n       client.storeFile(RemoteFile, \n    \t\t            new FileInputStream(LocalFile));\t\n       CheckState();\n   }   \n   \n   \n\tpublic void ignoreErrors(boolean x)  { ignoreErrors=x;\t}\n   \n\t\n\tpublic boolean isOK()  { return st;\t}\n\n\t\n\tpublic boolean isConnected()\t\n\t{\n\t\tboolean answer=false;\n\t\ttry {\n\t\t\tanswer = client.sendNoOp();\n\t\t} catch (IOException e) {\n\t\t\t// TODO Auto-generated catch block\n\t\t\te.printStackTrace();\n\t\t}\t\t\n\t\tst = answer;\n\t\treturn answer;\t\t\n       \n\t}\n\t\n\t\n\tpublic String LastMessage() {\treturn LastMessage;\t};\n\t\n\t\n\tpublic void CheckState(boolean state) throws Exception\n\t{\n\t    int reply = client.getReplyCode();\n        if(FTPReply.isPositiveCompletion(reply))    st=true;\n        else                                        st=false;\n\t\t\n        LastMessage=client.getReplyString();\t\n\t\t\n\t\tif(!st && !ignoreErrors)\t\n\t\t\tthrow new Exception(LastMessage);\n\t}\n\t\n\tpublic void CheckState() throws Exception\n\t{\n\t    int reply = client.getReplyCode();\n        if(FTPReply.isPositiveCompletion(reply))    st=true;\n        else                                        st=false;\n\t\t\n        LastMessage=client.getReplyString();\t\n\t\t\n\t\tif(!st && !ignoreErrors)\t\n\t\t\tthrow new Exception(LastMessage);\n\t}\n\t\n\tpublic void attachOptions(OptionsXMLProcessor optionsXMLProcessor) throws Exception \n\t{\n\t\tthis.optionsXMLProcessor = optionsXMLProcessor;\n\t}\n\n\n\t\n\tpublic String getIP() {\n\t\t\n\t\treturn \"\";\n\t}\n\t\n\tpublic boolean isIgnoreErrors() \n\t{\t\t\n\t\treturn ignoreErrors;\n\t}\n}\n{code}",
            "resolved": "2017-03-20",
            "versions": [],
            "fixVersions": [
                "3.7"
            ]
        },
        {
            "issue_id": "NET-583",
            "project": "Commons Net",
            "title": "FTPClient.getReplyString() returns wrong value after connect()",
            "type": "Bug",
            "description": "If the FTPClient's automatic server encoding detection is enabled, a FEAT command is issued in method _connectAction_() [indirectly via hasFeature(String)]. After that, the _replyCode and _replyLines fields are stored back to their previous values in _connectAction_(), but the _newReplyString flag isn't set to true. Because of that, you will then get back the reply to the FEAT command from getReplyString(), instead of the server's welcome message. Furthermore, you may get back a reply code that doesn't match that reply string. We have encountered a case when we got back reply code 220 after FTPClient.connect(), but reply string was \"530 Not logged in.\".\n\nThis error can easily be fixed by adding the following line to FTPClient.java around line 944:\n_newReplyString = true;\n\nPatch:\n===================================================================\n--- src/org/apache/commons/net/ftp/FTPClient.java\n+++ src/org/apache/commons/net/ftp/FTPClient.java\t(working copy)\n@@ -941,6 +941,7 @@\n            _replyLines.clear();\n            _replyLines.addAll(oldReplyLines);\n            _replyCode = oldReplyCode;\n+           _newReplyString = true;\n        }\n    }",
            "resolved": "2016-04-15",
            "versions": [
                "3.3"
            ],
            "fixVersions": [
                "3.5"
            ]
        },
        {
            "issue_id": "NET-582",
            "project": "Commons Net",
            "title": "SimpleSMTPHeader does not allow for missing To: field",
            "type": "Bug",
            "description": "https://tools.ietf.org/html/rfc5322#section-3.6 states that the To: header field is optional. Howver the class does not allow for this.",
            "resolved": "2015-08-24",
            "versions": [],
            "fixVersions": [
                "3.4"
            ]
        },
        {
            "issue_id": "NET-581",
            "project": "Commons Net",
            "title": "SimpleSMTPHeader fails to supply the required Date: header",
            "type": "Bug",
            "description": "According to RFC 5322 [1] (previously 2822, 822) the message headers MUST include both the From: and Date: (orig-date) fields.\n\nHowever this is not provided by SimpleSMTPHeader#toString()\n\nThe code should be amended to generate this if the user has not supplied a Date: header.\n\n[1] https://tools.ietf.org/html/rfc5322#section-3.6",
            "resolved": "2015-08-24",
            "versions": [],
            "fixVersions": [
                "3.4"
            ]
        },
        {
            "issue_id": "NET-580",
            "project": "Commons Net",
            "title": "SMTPClient.sendSimpleMessage() silently ignores failed recipients",
            "type": "Bug",
            "description": "When SMTPClient.sendSimpleMessage() is used to send a message to multiple recipients, it ignores a failure to add a recipient as long as there is at least one successful recipient. This undocumented behaviour is unusual given that the API does not indicate which recipients were successful.",
            "resolved": "2016-04-15",
            "versions": [
                "3.3"
            ],
            "fixVersions": [
                "3.4"
            ]
        },
        {
            "issue_id": "NET-579",
            "project": "Commons Net",
            "title": "SSL/TLS SocketClients do not verify the hostname against the certificate",
            "type": "Bug",
            "description": "Every subclass of SocketClient that does SSL/TLS will never verify the hostname of the server against the certificate. This means that any valid certificate for any CA in the default trust store will be accepted without error.\n\nSocketClient should be modified to store the hostname, and SMTPSClient/FTPSClient/IMAPSClient/POP3SClient should use it when negotiating SSL/TLS.\n\nJava 1.7 has support for verifying the hostname if SSLParameters.setEndpointIdentificationAlgorithm(\"HTTPS\") is used.",
            "resolved": "2015-08-24",
            "versions": [
                "3.3"
            ],
            "fixVersions": [
                "3.4"
            ]
        },
        {
            "issue_id": "NET-578",
            "project": "Commons Net",
            "title": "FTPS client through http proxy",
            "type": "Bug",
            "description": "I'm trying to develop a Java FTPS client using Apache Commons Net library. To run de code I'm using Java 8, update 45.\n\nThe exception occurs when I'm invoking the method \"retrieveFile\". I'm not sure, but I belive the connection used to tranfer the file is not using the HTTP proxy specified in code.\n\nWith FileZilla client I can tranfer files using the same configurations.\n\nHow can I fix this problem?\n\n{code:title=My code|borderStyle=solid}\n// client with explicit security\nFTPSClient ftps = new FTPSClient(false);\n// HTTP proxy configuration\nProxy proxy = new Proxy(Type.HTTP, new InetSocketAddress(\"<REMOVED_FOR_SERCURITY>\", <REMOVED_FOR_SERCURITY>));\nftps.setProxy(proxy);\n// to show FTP commands in prompt\nftps.addProtocolCommandListener(new PrintCommandListener(new PrintWriter(System.out), true));\n// disable remote host verification\nftps.setRemoteVerificationEnabled(false);\n// trust in ALL\nftps.setTrustManager(TrustManagerUtils.getAcceptAllTrustManager());\n// send keepAlive every 30 seconds\nftps.setControlKeepAliveTimeout(10l);\n// data transfer timeout\nftps.setDataTimeout(30000);\n\n// connect\nftps.connect(\"<REMOVED_FOR_SERCURITY>\", <REMOVED_FOR_SERCURITY>);\nftps.login(\"<REMOVED_FOR_SERCURITY>\", \"<REMOVED_FOR_SERCURITY>\");\n\n// config\nftps.setCharset(Charset.forName(\"UTF-8\"));\nftps.setBufferSize(0);\nftps.setFileType(FTP.BINARY_FILE_TYPE);\nftps.enterLocalPassiveMode();\nftps.execPROT(\"P\");\n\n// ... do some operations\nftps.retrieveFile(\"/dir1/dir2/fileX.zip\", new ByteArrayOutputStream());\n\n// close\nftps.logout();\nftps.disconnect();\n{code}\n\nThe output:\n{noformat}\n220 (vsFTPd 2.2.2)\nAUTH TLS\n234 Proceed with negotiation.\nUSER *******\n331 Please specify the password.\nPASS *******\n230 Login successful.\nTYPE I\n200 Switching to Binary mode.\nPROT P\n200 PROT now Private.\nPASV\n227 Entering Passive Mode (<REMOVED_FOR_SERCURITY>).\nException in thread \"main\" java.net.ConnectException: Connection timed out: connect\n    at java.net.DualStackPlainSocketImpl.connect0(Native Method)\n    at java.net.DualStackPlainSocketImpl.socketConnect(DualStackPlainSocketImpl.java:79)\n    at java.net.AbstractPlainSocketImpl.doConnect(AbstractPlainSocketImpl.java:345)\n    at java.net.AbstractPlainSocketImpl.connectToAddress(AbstractPlainSocketImpl.java:206)\n    at java.net.AbstractPlainSocketImpl.connect(AbstractPlainSocketImpl.java:188)\n    at java.net.PlainSocketImpl.connect(PlainSocketImpl.java:172)\n    at java.net.SocksSocketImpl.connect(SocksSocketImpl.java:392)\n    at java.net.Socket.connect(Socket.java:589)\n    at sun.security.ssl.SSLSocketImpl.connect(SSLSocketImpl.java:656)\n    at org.apache.commons.net.ftp.FTPClient._openDataConnection_(FTPClient.java:894)\n    at org.apache.commons.net.ftp.FTPSClient._openDataConnection_(FTPSClient.java:600)\n    at org.apache.commons.net.ftp.FTPClient._retrieveFile(FTPClient.java:1854)\n    at org.apache.commons.net.ftp.FTPClient.retrieveFile(FTPClient.java:1845)\n    at br.com.bat.crm.test.util.FTPSClientTest.main(FTPSClientTest.java:57)\n{noformat}",
            "resolved": "2017-02-08",
            "versions": [
                "3.3"
            ],
            "fixVersions": []
        },
        {
            "issue_id": "NET-577",
            "project": "Commons Net",
            "title": "Fails to parse FEAT response from Gene6 FTP server",
            "type": "Bug",
            "description": "This is probably rather a bug in the server implementation, but anyway.\nThe response from a Microsoft FTP Service I'm trying to work with looks like that:\n{noformat}\n211-FEAT\n    SIZE\n    MDTM\n211 END\n{noformat}\nSo, after parsing the response, the entries in the features map are {{  SIZE}} and {{  MDTM}}.\nWhile it doesn't adhere to the RFC (there's supposed to be a single leading space for each feature), it should be possible to work around that kind of broken response.",
            "resolved": "2015-08-23",
            "versions": [
                "3.3"
            ],
            "fixVersions": []
        },
        {
            "issue_id": "NET-574",
            "project": "Commons Net",
            "title": "FTPClient.mlistFile returns null timestamps in FTPFile.getTimestamp",
            "type": "Bug",
            "description": "In FTPClient mlistFile(\"test.txt\") :\n{code:title=FTPClient.java|borderStyle=solid}\n    public FTPFile mlistFile(String pathname) throws IOException\n    {\n        boolean success = FTPReply.isPositiveCompletion(sendCommand(FTPCmd.MLST, pathname));\n        if (success){\n            String entry = getReplyStrings()[1].substring(1); // skip leading space for parser\n            return MLSxEntryParser.parseEntry(entry);\n        } else {\n            return null;\n        }\n    }\n{code}\ngetReplyStrings() return :\n250-Start of list for test.txt\n250-modify=20150616133640;perm=adfrw;size=83752220;type=file;unique=23U8FE039C;UNIX.group=32;UNIX.mode=0644;UNIX.owner=2005; /data/test.txt\n250 End of list\nSo getReplyStrings()[1].substring(1) return \n50-modify=20150616133640;perm=adfrw;size=83752220;type=file;unique=23U8FE039C;UNIX.group=32;UNIX.mode=0644;UNIX.owner=2005; /data/test.txt\n\n{code:title=MLSxEntryParser.java|borderStyle=solid}\npublic FTPFile parseFTPEntry(String entry) {\n        String parts[] = entry.split(\" \",2); // Path may contain space\n        if (parts.length != 2) {\n            return null;\n        }\n        FTPFile file = new FTPFile();\n        file.setRawListing(entry);\n        file.setName(parts[1]);\n        String[] facts = parts[0].split(\";\");\n        boolean hasUnixMode = parts[0].toLowerCase(Locale.ENGLISH).contains(\"unix.mode=\");\n        for(String fact : facts) {\n            String []factparts = fact.split(\"=\");\n// Sample missing permission\n// drwx------   2 mirror   mirror       4096 Mar 13  2010 subversion\n// modify=20100313224553;perm=;type=dir;unique=811U282598;UNIX.group=500;UNIX.mode=0700;UNIX.owner=500; subversion\n            if (factparts.length != 2) {\n                continue; // nothing to do here\n            }\n            String factname = factparts[0].toLowerCase(Locale.ENGLISH);\n            String factvalue = factparts[1];\n            String valueLowerCase = factvalue.toLowerCase(Locale.ENGLISH);\n            if (\"size\".equals(factname)) {\n                file.setSize(Long.parseLong(factvalue));\n            }\n            else if (\"sizd\".equals(factname)) { // Directory size\n                file.setSize(Long.parseLong(factvalue));\n            }\n            else if (\"modify\".equals(factname)) {\n(...)\n{code}\n50-modify not correspond to modify, so the parser not find the date\n\nPossible patch :\n{code:title=FTPClient.java|borderStyle=solid}\n    public FTPFile mlistFile(String pathname) throws IOException\n    {\n        boolean success = FTPReply.isPositiveCompletion(sendCommand(FTPCmd.MLST, pathname));\n        if (success){\n            String entry = getReplyStrings()[1].substring(4); // skip leading \n(...)\n{code}",
            "resolved": "2015-06-18",
            "versions": [
                "3.3"
            ],
            "fixVersions": []
        },
        {
            "issue_id": "NET-573",
            "project": "Commons Net",
            "title": "CLONE - Retrieving files from AS400 FTP systems returns null timestamps in FTPFile.getTimestamp",
            "type": "Bug",
            "description": "We are trying to list files from AS400 systems and retrieve the timestamps from these files using the following code:\n\n{code}\nimport java.io.FileInputStream;\nimport java.io.FileOutputStream;\nimport java.io.IOException;\nimport java.io.InputStream;\nimport java.io.OutputStream;\nimport java.io.PrintWriter;\nimport java.net.InetAddress;\nimport java.net.UnknownHostException;\n\nimport org.apache.commons.net.PrintCommandListener;\nimport org.apache.commons.net.ftp.FTP;\nimport org.apache.commons.net.ftp.FTPClient;\nimport org.apache.commons.net.ftp.FTPHTTPClient;\nimport org.apache.commons.net.ftp.FTPClientConfig;\nimport org.apache.commons.net.ftp.FTPConnectionClosedException;\nimport org.apache.commons.net.ftp.FTPFile;\nimport org.apache.commons.net.ftp.FTPReply;\nimport org.apache.commons.net.ftp.FTPSClient;\nimport org.apache.commons.net.io.CopyStreamEvent;\nimport org.apache.commons.net.io.CopyStreamListener;\nimport org.apache.commons.net.util.TrustManagerUtils;\n\npublic final class FTPAccess {\n\tprivate String server;\n\tprivate String username;\n\tprivate String password;\n\tprivate String path ;\n\n\tpublic String getPath() {\n\t\treturn path;\n\t}\n\tpublic void setPath(String path) {\n\t\tthis.path = path;\n\t}\n\tpublic static void main(String[] args) throws UnknownHostException {\n\t\tFTPAccess ftpAccess = new FTPAccess();\n\t\tftpAccess.setServer(\"X.X.X.X\");\n\t\tftpAccess.setUsername(\"XXXXXX\");\n\t\tftpAccess.setPassword(XXXXXXX\");\n\t\tftpAccess.setPath(\"/reports\");\n\t\tftpAccess.getFile();\n\t}\n\tpublic void getFile() throws UnknownHostException {\n\t\t\n\t\tFTPClient ftpClient = new FTPClient();\n\t\t\n\t\ttry {\n\t\t\tInetAddress serveIPAddress = InetAddress.getByName(server);\n\t\t\tftpClient.setPassiveLocalIPAddress(serveIPAddress);\n\t\t\tftpClient.connect(serveIPAddress);\n\t\t\tSystem.out.println(\"Connected to \" + server + \".\");\n\n\t\t\tint reply = ftpClient.getReplyCode();\n\t\t\tif (!FTPReply.isPositiveCompletion(reply)) {\n\t\t\t\tSystem.err.println(\"FTP server refused connection.\");\n\t\t\t\tSystem.err.println(ftpClient.getReplyString());\n\t\t\t\tftpClient.disconnect();\n\t\t\t} else {\n\t\t\t}\n\n\t\t\tif (!ftpClient.login(username, password)) {\n\t\t\t\tSystem.out.println(ftpClient.getReplyString());\n\t\t\t\tftpClient.logout();\n\t\t\t} else{\n\t\t\t\tdiplayContent(ftpClient, path);\n\n\t\t\t}\n\n\t\t} catch (IOException e) {\n\t\t\tif (ftpClient.isConnected()) {\n\t\t\t\ttry {\n\t\t\t\t\tftpClient.disconnect();\n\t\t\t\t} catch (IOException ioException) {\n\t\t\t\t\t// do nothing\n\t\t\t\t}\n\t\t\t}\n\t\t\tSystem.err.println(\"Could not connect to server.\");\n\t\t\t// e.printStackTrace();\n\t\t\tSystem.exit(1);\n\t\t}\n\n\t\t// } catch (FTPConnectionClosedException e) {\n\t\t// error = true;\n\t\t// System.err.println(\"Server closed connection.\");\n\t\t// e.printStackTrace();\n\t\t// } catch (IOException e) {\n\t\t// error = true;\n\t\t// e.printStackTrace();\n\t\t// } finally {\n\t\t// if (ftp.isConnected()) {\n\t\t// try {\n\t\t// ftp.disconnect();\n\t\t// } catch (IOException f) {\n\t\t// // do nothing\n\t\t// }\n\t\t// }\n\t\t// }\n\n\t} // end main\n\n\tpublic String getServer() {\n\t\treturn server;\n\t}\n\n\tpublic void setServer(String server) {\n\t\tthis.server = server;\n\t}\n\n\tpublic String getUsername() {\n\t\treturn username;\n\t}\n\n\tpublic void setUsername(String username) {\n\t\tthis.username = username;\n\t}\n\n\tpublic String getPassword() {\n\t\treturn password;\n\t}\n\n\tpublic void setPassword(String password) {\n\t\tthis.password = password;\n\t}\n\t\n\tpublic void diplayContent(FTPClient ftpClient, String path) throws IOException {\n\t\tSystem.out.println(path);\n\t\tfor (FTPFile ftpFile : ftpClient.listFiles(path)) {\n\t\t\tif(ftpFile.isDirectory() ){\n\t\t\t\tdiplayContent(ftpClient, path+\"/\"+ftpFile.getName());\n\t\t\t} else{\n\t\t\t\tSystem.out.println(path+\"/\"+ftpFile.getName());\n\t\t\t\tSystem.out.println(ftpFile.getTimestamp());\n\t\t\t}\n\t\t}\n\t\t\n\t}\n\n}\n{code}\n\nThe LIST command which is used internally in the FTPClient retrieves the timestamps successfully. However after parsing the FTPFile has a null value for the timestamp field.\n\nThe null value is returned just when a user place the file in the AS400 usint the NetServer Servivice. This is used to share foldes between windows network and the AS/400\n\nPlease help us fix this problem. It is not critical to us.\n",
            "resolved": "2017-02-08",
            "versions": [
                "2.2",
                "3.2",
                "3.3"
            ],
            "fixVersions": []
        },
        {
            "issue_id": "NET-572",
            "project": "Commons Net",
            "title": "Delay of around 5-6 seconds during SFTP Client file transfer using \"storeFile\" method of SFTP Client",
            "type": "Bug",
            "description": "For transffering files over SFTP channel the below code snippet is being used - \n---------------------------------------------------------------------------------------------\n      File lLocalFile = new File(pLocalFilename);\n      FileInputStream ip = new FileInputStream(lLocalFile);\n      boolean lResult = ftp.storeFile(pRemoteFilename, ip);\n      ip.close(); \n---------------------------------------------------------------------------------------------\nAs per the code, The new SFTP channel is being established and then after around 2-3 mins, when trying to transfer a file from local to remote we can observed that the \"storeFile\" method is taking around 5-6 seconds to respond, and after that the lResult output is being received as \"0\" from the storeFile() method and the file transfer is getting failed. \nThere is a timer for checking the FTP channels/FTP clients by \"NOOP\" operation command in every 1 second.\nBut by closing and re-establishing the SFTP connection, then within a second the same file is getting transferred successfully. But again the same problem happened on the same connection after just 2-3 mins.\n\nThere is another thread in the code part where from the same remote the code is reading and transferring file to local system by polling every 1 seconds successfully using SFTP connection. the code part for reading files - \nFile lLocalFile = new File(pLocalFilename);\n        FileOutputStream op = null;\n        try {\n        \top = new FileOutputStream(lLocalFile);\n        \treturn ftp.retrieveFile(pRemoteFilename, op);\n\n        } finally {\n            if (op != null) {\n                op.close();\t\t\t\n\t    }\n        }\nPlease can you help us to identify what is the problem for the SFTP connection that not allowing the File to be transferred from Local to Remote and the storefile method takes 5-6 seconds to responding. But just establishing the new connection, the file transferred but again the same problem happens for the same channel connection.",
            "resolved": "2017-02-08",
            "versions": [
                "3.0.1"
            ],
            "fixVersions": []
        },
        {
            "issue_id": "NET-569",
            "project": "Commons Net",
            "title": "apache commons net FTPHTTP client not able to conect to ftp server",
            "type": "Bug",
            "description": "if i will do \nFTPClient ftp = new FTPClient();\nftp.connect(\"FtpserverName\", port(21));\nftp.Login(\"******\",\"****\");\n \n\ni am able to connect but if i will do\n\nFtpclient ftp = FTPHTTPclient(\"proxyName\", \"port\", \"userId\", \"Pass\");\nftp.connect(\"FtpserverName\", port(21));\nftp.Login(\"******\",\"****\");\n\ni am getting \n\njava.io.IOException: Could not connect to tovms3.fr.eu.airbus.corp\n\tat org.apache.commons.net.ftp.FTPHTTPClient.connect(FTPHTTPClient.java:93)\n\tat com.ftp.ftpClient.FTPClientExample.main(FTPClientExample.java:148)\nCaused by: java.lang.RuntimeException: Parameter supplied to Base64 encode is not a byte[]\n\tat org.apache.commons.net.util.Base64.encode(Base64.java:885)\n\tat org.apache.commons.net.ftp.FTPHTTPClient.tunnelHandshake(FTPHTTPClient.java:107)\n\tat org.apache.commons.net.ftp.FTPHTTPClient.connect(FTPHTTPClient.java:90)\n\t... 1 more",
            "resolved": "2020-06-19",
            "versions": [
                "3.0.1",
                "3.3"
            ],
            "fixVersions": []
        },
        {
            "issue_id": "NET-568",
            "project": "Commons Net",
            "title": "Order of client configuration and connection is ambiguous",
            "type": "Bug",
            "description": "Hey,\n\naccording to the FTPClientExample client should be first configured and set and connection made afterwards. But if I do this :\n\n{code:title=FTPClient.java}\n      FTPClient c = new FTPClient()\n      customConf(c)\n      val config = new FTPClientConfig(\"UNIX\")\n      config.setUnparseableEntries(true)\n      c.configure(config)\n      c.enterLocalPassiveMode() // required, otherwise firewall issues happen\n      c.setDefaultTimeout(conf.ftpTimeout)\n      c.addProtocolCommandListener(new PrintCommandListener(new PrintWriter(System.out), true))\n      c.connect(conf.ftpHost)\n{code}\n\nThen it basically ends up this way : \n{code}\n230 Anonymous access granted, restrictions apply\nPORT 192,168,1,100,177,38\n500 Illegal PORT command\n{code}\n\nBut if I call connect() before all the client setting including enterLocalPassiveMode, then it works as expected. \n{code}\n230 Anonymous access granted, restrictions apply\nPASV\n227 Entering Passive Mode (80,251,0,59,175,235).\nRETR welcome.msg\n150 Opening ASCII mode data connection for welcome.msg (321 bytes)\n226 Transfer complete\nPASV\n227 Entering Passive Mode (80,251,0,59,167,178).\nRETR welcome.msg\n150 Opening ASCII mode data connection for welcome.msg (321 bytes)\n226 Transfer complete\nPASV\n227 Entering Passive Mode (80,251,0,59,174,58).\nRETR welcome.msg\n150 Opening ASCII mode data connection for welcome.msg (321 bytes)\n226 Transfer complete\n{code}\n\nBut in the FTPClientExample the connect() occurs at the end.\n\nIt is thread-safe, running within a single thread... What is going on here?\n",
            "resolved": "2015-02-12",
            "versions": [
                "3.3"
            ],
            "fixVersions": []
        },
        {
            "issue_id": "NET-567",
            "project": "Commons Net",
            "title": "commons-net-3.0.1.jar not listing file from solaris FTP server",
            "type": "Bug",
            "description": "When using commons-net-3.0.1.jar file on Linux server to list the files from Solaris10(Japanese Language) server then it is not listing files whereas when using commons-net-2.0.jar to list the files then it is listing.",
            "resolved": "2015-07-03",
            "versions": [
                "3.0.1"
            ],
            "fixVersions": []
        },
        {
            "issue_id": "NET-566",
            "project": "Commons Net",
            "title": "UnixFTPEntryParser Drops Leading Spaces from File Names",
            "type": "Bug",
            "description": "The {{UnixFTPEntryParser}} [regular expression | http://svn.apache.org/viewvc/commons/proper/net/trunk/src/main/java/org/apache/commons/net/ftp/parser/UnixFTPEntryParser.java?view=markup] (line 106) consumes all spaces between the timestamp and the file name.\n\nThe {{FTPFile.name}} property ends up getting a value with stripped leading spaces.\n\nReported by Spring Integration user at https://jira.spring.io/browse/INT-3591",
            "resolved": "2015-01-17",
            "versions": [
                "3.3"
            ],
            "fixVersions": [
                "3.4"
            ]
        },
        {
            "issue_id": "NET-563",
            "project": "Commons Net",
            "title": "MLSxEntryParser needs test cases; parsing is too lax",
            "type": "Bug",
            "description": "The MLSxEntryParser currently has no proper unit tests.\nAlso the parsing is too lax, for example at least one fact is required unless the entry starts with a space, but this is not detected.",
            "resolved": "2014-12-10",
            "versions": [],
            "fixVersions": [
                "3.4"
            ]
        },
        {
            "issue_id": "NET-561",
            "project": "Commons Net",
            "title": "FTPFile.toFormattedString prints user and group in wrong order",
            "type": "Bug",
            "description": "toFormattedString outputs the user and group names in the wrong order",
            "resolved": "2014-12-05",
            "versions": [
                "3.3"
            ],
            "fixVersions": [
                "3.4"
            ]
        },
        {
            "issue_id": "NET-560",
            "project": "Commons Net",
            "title": "FTPFile.getTimestamp() does not give precise time",
            "type": "Bug",
            "description": "FTPFile.getTimestamp() does not give precise time upto seconds and milliseconds.  For example, the modification time of a file on the ftp server is 2014-12-05 16:28:45.41 but this function gives a calendar object which when converted to timestamp is equivalent to 2014-12-05 16:28:00.0. The seconds and milliseconds information is lost.",
            "resolved": "2014-12-08",
            "versions": [
                "3.3"
            ],
            "fixVersions": []
        },
        {
            "issue_id": "NET-558",
            "project": "Commons Net",
            "title": "getModificationTime(<filename>) returns complete received line including response code and EOL",
            "type": "Bug",
            "description": "When retrieving the last modification time of a file on the server via the \nmethod getModificationTime(String filename) it returns something like \n\"213 20141111112706\" where only the part after the space is the relevant data.\n\nI digged deeper and i found that the first part before the space is the positive \nresponse code which is not removed before getModificationTime returns.\n\nI consider this a minor bug as i think there is a simple work around \n(split by space, use second part only) but i do not believe that \nthe result of the method is what a user expects regarding the documentation \nof that method. \n",
            "resolved": "2014-11-29",
            "versions": [
                "3.3"
            ],
            "fixVersions": [
                "3.4"
            ]
        },
        {
            "issue_id": "NET-557",
            "project": "Commons Net",
            "title": "FTPClient Login suppression inconsistent",
            "type": "Bug",
            "description": "The following code prints out the user name in one instance and masks it in the other.  The password is masked in both cases.  I would prefer the user name to be masked in both cases as well.\n{code}\nFTPClient client = new FTPClient();\nclient.addProtocolCommandListener(new PrintCommandListener(System.out, true));\nclient.connect(host);\nclient.login(user, pass);\n{code}\nOutput (Notice the user name is printed on the response)\n{code}\n220 Microsoft FTP Service\nUSER *******\n331 Password required for ftpTest.\nPASS *******\n230 User ftpTest logged in.\n{code}",
            "resolved": "2016-05-01",
            "versions": [
                "3.3"
            ],
            "fixVersions": []
        },
        {
            "issue_id": "NET-555",
            "project": "Commons Net",
            "title": "Support required for 3pp FTP client for java application",
            "type": "Bug",
            "description": "One of our product is using \"Jakarta Commons Net Ftp 2.2 (apache) \" 3pp FTP client for java application.\n\nBut we are facing an issue with this 3pp ftp client when time stamp is being fetched for the files. It is returning 1 month and five and half hour old time than the original one.\n\nCould you please let us know whether this is a known issue in version 2.2.\n\nAnd also please let us know whether it is resolved in the later version of the product.\n",
            "resolved": "2015-01-07",
            "versions": [
                "2.2"
            ],
            "fixVersions": []
        },
        {
            "issue_id": "NET-553",
            "project": "Commons Net",
            "title": "listFiles(String) returns an empty list, even though FTP Server has sent back data",
            "type": "Bug",
            "description": "We've been using the Apache Commons 2.0 and 3.3 library for a while now, and have just run into an issue.\n\nThe FTP client application and the FTP Server are running on different AIX systems.\n\nWhen the FTP application calls the:\n\n  FTPClient.listFiles(String) \n\ncommand to get some information about a file stored on the FTP Server,  the method intermittently returns an array containing no elements. However, looking at documentation from both the FTP Server and the network, it can be seen that the FTP Server is actually sending back what appears to be a valid response to the LIST command issued by FTPClient.listFiles(String).\n\nThe response sent by the FTP Server contains the file name and attribute information, which is what we expect to see. For some reason, that information is not returned back to the application by the FTPClient.listFiles(String) method.\n\nThe problem only seems to occur under load.\n\nHas anyone seen this before, or have any suggestions as to what might be causing it? \n\nThanks in advance\n\nPaul",
            "resolved": "2015-02-03",
            "versions": [
                "2.0",
                "3.3"
            ],
            "fixVersions": []
        },
        {
            "issue_id": "NET-552",
            "project": "Commons Net",
            "title": "SocketTimeoutException connecting a FTP server via an HTTP Proxy",
            "type": "Bug",
            "description": "Randomly, we're experiencing SocketTimoutException when we connect an FTP via an Http Proxy :\n\n{noformat}\njava.io.IOException: Timed out waiting for initial connect reply\n\tat org.apache.commons.net.ftp.FTP._connectAction_(FTP.java:403)\n\tat org.apache.commons.net.ftp.FTPClient._connectAction_(FTPClient.java:931)\n\tat org.apache.commons.net.ftp.FTPClient._connectAction_(FTPClient.java:925)\n\tat org.apache.commons.net.ftp.FTPHTTPClient.connect(FTPHTTPClient.java:144)\nCaused by: java.net.SocketTimeoutException: Read timed out\n\tat java.net.SocketInputStream.socketRead0(Native Method)\n\tat java.net.SocketInputStream.read(SocketInputStream.java:150)\n\tat java.net.SocketInputStream.read(SocketInputStream.java:121)\n\tat sun.nio.cs.StreamDecoder.readBytes(StreamDecoder.java:284)\n\tat sun.nio.cs.StreamDecoder.implRead(StreamDecoder.java:326)\n\tat sun.nio.cs.StreamDecoder.read(StreamDecoder.java:178)\n\tat java.io.InputStreamReader.read(InputStreamReader.java:184)\n\tat java.io.BufferedReader.fill(BufferedReader.java:161)\n\tat java.io.BufferedReader.read(BufferedReader.java:182)\n\tat org.apache.commons.net.io.CRLFLineReader.readLine(CRLFLineReader.java:58)\n\tat org.apache.commons.net.ftp.FTP.__getReply(FTP.java:315)\n\tat org.apache.commons.net.ftp.FTP.__getReply(FTP.java:295)\n\tat org.apache.commons.net.ftp.FTP._connectAction_(FTP.java:397)\n\t... 6 more\n{noformat}\n\nAfter analysis, I think the problem is that commons-net opens 2 BufferedReader on the same InputStream : first in the FTPHTTPClient.tunnelHandshake method, and the second in FTP._connectAction() method.\nIf the first BufferedReader reads all datas in the socket, the second waits until SocketTimeout.",
            "resolved": "2015-01-08",
            "versions": [
                "3.3"
            ],
            "fixVersions": [
                "3.4"
            ]
        },
        {
            "issue_id": "NET-551",
            "project": "Commons Net",
            "title": "Util copyReader calls CopyStreamListener.bytesTransferred with the incorrect value for bytesTransferred",
            "type": "Bug",
            "description": "Util copyReader calls CopyStreamListener.bytesTransferred with the incorrect value for bytesTransferred parameter if it reads a single character.\n\nIt uses the value of the field chars which at that point contains the character, rather than the number read.\n\nThe code also re-uses the chars field for both the number of characters read and the single character, which is quite confusing. [The copyStream also re-uses the bytes field, but uses the correct bytesTransferred parameter]",
            "resolved": "2014-08-07",
            "versions": [
                "3.3"
            ],
            "fixVersions": [
                "3.4"
            ]
        },
        {
            "issue_id": "NET-550",
            "project": "Commons Net",
            "title": "Default FTPClient bufferSize results in very slow retrieve transfers",
            "type": "Bug",
            "description": "While experimenting with FTPClient, I discovered that if I don't call setBufferSize(), the default value is zero.  This results in retrieveFile() calling the version of InputStream.read() with no parameters, reading one byte at a time.  For comparison, the downloading a CD ISO image of about ~648MB took 18m10s with the default settings.  In contrast, calling setBufferSize(8192) took only 7.9s, an improvement of ~137x.\n\nHere is some sample code:\n\n{code:java}\nFTPClient ftp = new FTPClient();\n// ftp.setBufferSize(8192);\nftp.setControlKeepAliveTimeout(300);\nftp.setCopyStreamListener(new CopyStreamListener() {\n    @Override\n    public void bytesTransferred(long totalBytesTransferred, int bytesTransferred, long streamSize) {\n        System.out.println(\"totalBytesTransferred: \" + totalBytesTransferred\n            + \", bytesTransferred: \" + bytesTransferred + \", streamSize: \" + streamSize);\n    }\n\n    @Override public void bytesTransferred(CopyStreamEvent event) {}\n});\nftp.connect(host);\nftp.login(user, pass);\nftp.retrieveFile(file, outputStream);\n{code}\n\nThe log message from the stream listener printed lots messages \"bytesTransferred: 1\" and totalBytesTransferred incremented by 1 each time.  This corresponds to the part of the code which reads one byte at a time with {{int inputStream.read()}}.\n",
            "resolved": "2015-07-03",
            "versions": [
                "3.3"
            ],
            "fixVersions": [
                "3.4"
            ]
        },
        {
            "issue_id": "NET-549",
            "project": "Commons Net",
            "title": "Telnet does not convert LF to CRLF in ASCII mode",
            "type": "Bug",
            "description": "Hi,\n\nWe are using your library to connect/login to some Windows and Foundary devices via Telnet.\nThe source(client) is a Windows 7 professional windows machine and all the servers we are trying to connect are Windows machines running Microsoft(R) Windows(R) Server 2003, Standard Edition.\nIn version 2.2 we were able to connect and then login successfully to these devices with no issues.\nHowever, on upgrade to 3.3 version, we are unable to login to these devices successfully.\nIn v 3.3, after entering the username and hitting enter, there is no response at all. However in v 2.2, as soon as you enter the username and hit enter, password prompt comes back for us to enter the password and we are logged in successfully. \n\nI compraed the packet captures between the two versions for the same target server machine. The only difference I can see is when the user name is set, in v2.2 a '\\r' is appended to the end of the username where is v 3.3, this '\\r' is missing. Is this due to any change in library?\n\nI can provide the packet capture/logs if required. Please let us know if this is a known issue or if there are any workarounds. \n\n\n\nThanks\n-Pradeep",
            "resolved": "2014-07-30",
            "versions": [
                "3.3"
            ],
            "fixVersions": [
                "3.4"
            ]
        },
        {
            "issue_id": "NET-548",
            "project": "Commons Net",
            "title": "FTPClient Hangs on connect method and never timeout",
            "type": "Bug",
            "description": "Periodically, we are experiencing the FTP client thread is hang when we\ninitiate a connection to the FTP server. See the following thread dump from WAS server. It seem like\nafter the common net FTP.sendCommand, it will call the\n\"FTP.__getReply()\" to get the status code, and this should be the point that causing the thread hang.\n\nThere is no Socket connection timeout error be thrown, and the thread justhang there forever.\n\nhere is the Thread Dump.. Please provide your guidance as to what is wrong here and how can we fix it.\n\n\nat java/net/SocketInputStream.socketRead0(Native Method)\n at java/net/SocketInputStream.read(SocketInputStream.java:155(Compiled Code))\n at java/net/SocketInputStream.read(SocketInputStream.java:116(Compiled Code))\n at sun/nio/cs/StreamDecoder$ConverterSD.implRead(StreamDecoder.java:346(Compiled Code))\n at sun/nio/cs/StreamDecoder.read(StreamDecoder.java:252(Compiled Code))\n at java/io/InputStreamReader.read(InputStreamReader.java:212(Compiled Code))\n at java/io/BufferedReader.fill(BufferedReader.java:126(Compiled Code))\n at java/io/BufferedReader.readLine(BufferedReader.java:320(Compiled Code))\n at java/io/BufferedReader.readLine(BufferedReader.java:383(Compiled Code))\n at org/apache/commons/net/ftp/FTP.__getReply(FTP.java:291(Compiled Code))\n at org/apache/commons/net/ftp/FTP.sendCommand(FTP.java:490(Compiled Code))\n at org/apache/commons/net/ftp/FTP.sendCommand(FTP.java:534(Compiled Code))\n at org/apache/commons/net/ftp/FTP.pass(FTP.java:701(Compiled Code))\n at org/apache/commons/net/ftp/FTPClient.login(FTPClient.java:630(Compiled Code))\n\n\nIn the Code..\n\nwe are setting connection timeout & data timeout before FTPClient.connect method being called.",
            "resolved": "2014-09-09",
            "versions": [
                "2.0"
            ],
            "fixVersions": []
        },
        {
            "issue_id": "NET-546",
            "project": "Commons Net",
            "title": "NPE because of returning wrong reply-code for openDataConnection while performing MPUT",
            "type": "Bug",
            "description": "Hi there,\n\nI'm trying to transfer some data from a Windows 7 system to a System i (IBM server, former AS/400) by using MPUT.\n\nSo what I am doing in detail:\nI have got a Java client on my Windows 7 machine. There apache commons net is in use. By using the class FTPClient I connect to an IBM machine (there is installed V7R1).\n\nThese are the commands I fire:\nftp.login(username, password);\nftp.setFileType(FTP.BINARY_FILE_TYPE);\nftp.changeWorkingDirectory(pathname);\nftp.storeFileStream(remoteFile);\nftp.disconnect();\n\nWhen performing the storeFileStream NULL is returned instead of the output stream. Connection can be established and everything is working well.\n\nThe problem is that a wrong reply-code is checked during openDataConnection.\n\nLet me sum up the relevant steps:\n1. storeFileStream is called\n2. _storeFileStream(String, String) of FTPClient gets entered\n3. Then _openDataConnection_ is entered\n4. Inside this method the active connection mode part is executed\n5. Using IP4 the port method is called there\n6. Due to calling the PORT command for FTP a new return message is generated: \u201c200 PORT subcommand request successful.\u201d\n7. isPositiveCompletion returns true everything is fine up to here\n8. Going on with the active connection mode part this leads to the sendCommand method where \u2013 after executing the FTP command \u2013 the __getReply(boolean) method inside of __getReply() is called.\n9. And now the issue: _controlInput_.readLine() returns the PORT message mentioned before instead of \u201c150 Sending file to [myFile]\u201d. When calling readLine again, the correct message is returned.\n\nWhy is the message important?\nGetting back to _openDataConnection_ after execution of sendCommand the method FTPReply.isPositivePreliminary checks the reply-code, which is 200 instead of 150. This will cause a fail and a returning of NULL as output stream.\n\nThat\u2019s my guess:\nThere is missing a call of _controlInput_.readLine() to clear some information messages before calling a new FTP command.\n\nThank you.",
            "resolved": "2014-07-17",
            "versions": [
                "3.3"
            ],
            "fixVersions": []
        },
        {
            "issue_id": "NET-545",
            "project": "Commons Net",
            "title": "deleteFile always returns true",
            "type": "Bug",
            "description": "[UPDATE]\nOk, it seems that completePendingCommand(); fixes things. Still I think by default it would be good to wait for this to finish. Plus the javadoc is EXTREMLY misleading (for deleteFile it says \"Returns:\nTrue if successfully completed, false if not.\")\n\n\nThe deleteFile always returns true, even if the file is not deleted.\n\n\nresult = ftpClient.deleteFile(targetDir+\"/\"+fileName);\n--> the variable \"result\" is always true...\n\nMy test code is following:\n\nboolean result = ftpClient.deleteFile(targetDir+\"/\"+fileName);\nSystem.out.println(result); //THIS IS ALWAYS true, even if the file is not deleted\nSystem.out.println(ftpClient.getReplyString()); // reply string for PREVIOUS operation is shown\nint res = ftpClient.getReply(); // I have to call this to get the actual reply for delete command\nSystem.out.println(res+ \"aadfasd\"); //550\nSystem.out.println(ftpClient.getReplyCode()); //550\nSystem.out.println(ftpClient.getReplyString());//550 Delete operation failed.\n",
            "resolved": "2014-11-30",
            "versions": [
                "3.3"
            ],
            "fixVersions": []
        },
        {
            "issue_id": "NET-544",
            "project": "Commons Net",
            "title": "initiateListParsing does not correctly check if parserKey was cached",
            "type": "Bug",
            "description": "At line 3232 of FTPClient, it is mentionned that the parserKey and entryParser are cached \"to avoid creation of a new object every time a file listing is generated\".\n\nHowever the test seems to be incorrect as a new entryParser is created every time the method \"listFiles\" is called. Indeed, in method named listFiles, the initiateListParsing is called with a null argument for the parserKey.\nSo the test : \"if(__entryParser == null ||  ! __entryParserKey.equals(parserKey))\" is always true (even if __entryParserKey has been cached) and thus a new entryParser is created.",
            "resolved": "2014-12-01",
            "versions": [
                "3.3"
            ],
            "fixVersions": [
                "3.4"
            ]
        },
        {
            "issue_id": "NET-543",
            "project": "Commons Net",
            "title": "net: telnet: spy read EOL is reversed",
            "type": "Bug",
            "description": "the code in Telnet::_spyRead has a bug that results in a 'reversed' EOL.\nI'm expecting SocketClient.NETASCII_EOL (\\r\\n) but I'm getting '\\n\\r'.\n\nthe code\n{noformat}\n    void _spyRead(int ch)\n    {\n        OutputStream spy = spyStream;\n        if (spy != null)\n        {\n            try\n            {\n                if (ch != '\\r')\n                {\n                    spy.write(ch);\n                    if (ch == '\\n')\n                    {\n                        spy.write('\\r');\n                    }\n                    spy.flush();\n                }\n            }\n            catch (IOException e)\n            {\n                spyStream = null;\n            }\n        }\n    }\n{noformat}\n\nshould be replaced by\n{noformat}\n    void _spyRead(int ch)\n    {\n        OutputStream spy = spyStream;\n        if (spy != null)\n        {\n            try\n            {\n                if (ch != '\\r')\n                {\n                    if (ch == '\\n')\n                    {\n                        spy.write('\\r');\n                    }\n                    spy.write(ch);\n                    spy.flush();\n                }\n            }\n            catch (IOException e)\n            {\n                spyStream = null;\n            }\n        }\n    }\n{noformat}",
            "resolved": "2014-06-07",
            "versions": [
                "3.3"
            ],
            "fixVersions": [
                "3.4"
            ]
        },
        {
            "issue_id": "NET-541",
            "project": "Commons Net",
            "title": "Can't disable echo option",
            "type": "Bug",
            "description": "Using the Telnet client example provided in the examples, when I connect to one of my local server, it is echoing the data back. \n\nFor instance, I am trying to connect some <ip_address>, Usually from the server, I get the following response,\n\nUser Access Verification\n\nUsername : USER1\n\nWhen I enter this username, the same one is echoed back as,\n\nUsername : USER1 USER1\nPassword: \n\nI tried in all ways by taking support from stackoverflow but no luck.\n\nSeriously some one have a look at this issue. \n\nThanks,\nRK",
            "resolved": "2014-05-23",
            "versions": [
                "3.3"
            ],
            "fixVersions": []
        },
        {
            "issue_id": "NET-539",
            "project": "Commons Net",
            "title": "NPE if Threader.thread invoked with empty list or with null array",
            "type": "Bug",
            "description": "Threader.pruneEmptyContainers fails with NPE if Thread.thread is invoked with an empty list\n\nThe code allows for a null list, but not an empty list.",
            "resolved": "2014-04-15",
            "versions": [],
            "fixVersions": [
                "3.4"
            ]
        },
        {
            "issue_id": "NET-538",
            "project": "Commons Net",
            "title": "FTPHTTPClient should use socket factory to create sockets",
            "type": "Bug",
            "description": "FTPHTTPClient can't set socket timeout when connecting to remote http proxy. This may cause hangouts for calls to remote http ftp proxies.\n\nExpected: FTPHTTPClient  supports creation sockets with Factory methods. We had same approach for regular FTPClient calling .setSocketFactory(...) method and have control over socket creation.\nActual: FTPHTTPClient  creates Socket inside public void connect(...) directly, and it is impossible to set timouts since this object will be used immediately. It is even impossible to inherit from FTPHTTPClient   to override connect - since proxyHost, proxyPort and tunnelHandshake is private.\n\nso we may change \n      _socket_ = new Socket(proxyHost, proxyPort);\nto \n     _socket_ = _socketFactory_.createSocket();\n\nand add support for FTPHTTPClient  to handle socket factories for http proxies calls.\n\nIs it possiible?\n\n",
            "resolved": "2015-06-04",
            "versions": [
                "3.3"
            ],
            "fixVersions": [
                "3.4"
            ]
        },
        {
            "issue_id": "NET-537",
            "project": "Commons Net",
            "title": "when transferring data the using the org.apache.commons.net.ftp.FTP.noop() method, it always throw SoketSocketTimeoutException",
            "type": "Bug",
            "description": "I think the command and data using different socket, so when transferring data the client could receive command-reply form server, but in fact it always throw soketSocketTimeoutException. who can tell me why? thanks very much.",
            "resolved": "2014-04-14",
            "versions": [
                "3.3"
            ],
            "fixVersions": []
        },
        {
            "issue_id": "NET-533",
            "project": "Commons Net",
            "title": "FTPClient unable to handle a recursive listing",
            "type": "Bug",
            "description": "The expression (ftpClient .listFiles (\"-lR\")) \nevaluates to (FTPFile [] { \"a\", \"b/\", \"a\"  }) \nrather than (FTPFile [] { \"a\", \"b/\", \"b/a\"  }).",
            "resolved": "2014-12-01",
            "versions": [
                "3.3"
            ],
            "fixVersions": []
        },
        {
            "issue_id": "NET-532",
            "project": "Commons Net",
            "title": "NPE in nntp.Threader.thread() when all messages  in a derived thread are missing.",
            "type": "Bug",
            "description": "I'm threading emails using the References: header. When I've got an incomplete set of messages (in this specific case, it's from one of the C++ standards committee lists) such that I'm missing an entire thread, I get exceptions like this:\n\n{noformat}\nException in thread \"main\" java.lang.NullPointerException\n     at org.apache.commons.net.nntp.Threader.gatherSubjects(Threader.java:342)\n     at org.apache.commons.net.nntp.Threader.thread(Threader.java:81)\n     at org.apache.commons.net.nntp.Threader.thread(Threader.java:47)\n{noformat}\n\nWhat happens is that the graph returned by findRootSet() at line 71 will look something like\n\n{noformat}\n     ...\n     <ThreadContainer A with Threadable>\n         ...\n     <ThreadContainer B without Threadable>\n         <ThreadContainer ... without Threadable>\n             <ThreadContainer ... without Threadable>\n             <ThreadContainer ... without Threadable>\n         <ThreadContainer ... without Threadable>\n             <ThreadContainer ... without Threadable>\n                 <ThreadContainer ... without Threadable>\n     <ThreadContainer C with Threadable>\n         ...\n     ...\n{noformat}\n\nAnd, after pruneEmptyContainers() has had its way with things on line 75, the graph will be\n\n{noformat}\n     ...\n     <ThreadContainer A with Threadable>\n         ...\n     <ThreadContainer B without Threadable>\n     <ThreadContainer C with Threadable>\n         ...\n     ...\n{noformat}\n\nwhen it should be\n\n{noformat}\n     ...\n     <ThreadContainer A with Threadable>\n         ...\n     <ThreadContainer C with Threadable>\n         ...\n     ...\n{noformat}\n\nI.e., ThreadContainer B should be eliminated entirely.\n\nAs it is, with ThreadContainer B present, but not containing any children or a Threadable, gatherSubjects() chokes.",
            "resolved": "2014-12-01",
            "versions": [
                "3.0",
                "3.3"
            ],
            "fixVersions": []
        },
        {
            "issue_id": "NET-531",
            "project": "Commons Net",
            "title": "IMAPClient.getReplyCode() : Matcher.matches() returns false for lines with EOL chars",
            "type": "Bug",
            "description": "IMAPClient.getReplyCode(client.getReplyString()) always fails with invalid reply message.",
            "resolved": "2014-04-03",
            "versions": [
                "3.3"
            ],
            "fixVersions": []
        },
        {
            "issue_id": "NET-530",
            "project": "Commons Net",
            "title": "input parameter of org.apache.commons.net.ftp.FTP.__getReply(boolean) is not used",
            "type": "Bug",
            "description": "i noticed the the input parameter 'boolean reportReply' in method org.apache.commons.net.ftp.FTP.__getReply(boolean) is never be used. so it seemde there is no difference between org.apache.commons.net.ftp.FTP.__getReplyNoReport() and org.apache.commons.net.ftp.FTP.__getReply().\nwho could tell me why?",
            "resolved": "2014-04-02",
            "versions": [
                "3.3"
            ],
            "fixVersions": [
                "3.4"
            ]
        },
        {
            "issue_id": "NET-529",
            "project": "Commons Net",
            "title": "SubnetUtils throws exception on valid input",
            "type": "Bug",
            "description": "I think that xx.yy.zz.aa/0 should be accepted value by SubnetUtils, where xx.yy.zz.aa is any valid IPv4 IP address.\n\nTest case:\nSubnetUtils subnetUtils = new SubnetUtils(\"10.10.10.10/0\");\n\nHowever it throws exception:\n\njava.lang.IllegalArgumentException: Value [0] not in range (0,32]\n\torg.apache.commons.net.util.SubnetUtils.rangeCheck(SubnetUtils.java:304)\n\torg.apache.commons.net.util.SubnetUtils.calculate(SubnetUtils.java:229)\n\torg.apache.commons.net.util.SubnetUtils.<init>(SubnetUtils.java:52)\n\n(I have updated issue description from original, to reflect that issue is not only with 0.0.0.0/0)",
            "resolved": "2014-03-22",
            "versions": [
                "3.3"
            ],
            "fixVersions": [
                "3.4"
            ]
        },
        {
            "issue_id": "NET-523",
            "project": "Commons Net",
            "title": "SubnetUtils constructor fails on /32 subnets",
            "type": "Bug",
            "description": "The following code:\n\nSubnetUtils subnetUtils = new SubnetUtils(\"192.168.0.1/32\");\n\nthrows the following exception:\n\nException in thread \"main\" java.lang.IllegalArgumentException: Value [32] not in range (-1,31]\n\tat org.apache.commons.net.util.SubnetUtils.rangeCheck(SubnetUtils.java:216)\n\tat org.apache.commons.net.util.SubnetUtils.calculate(SubnetUtils.java:141)\n\tat org.apache.commons.net.util.SubnetUtils.<init>(SubnetUtils.java:46)\n\tat com.gs.configmgt.proteus.model.impl.TestTest.main(TestTest.java:12)\n\n/32 is a perfectly valid subnet of one host. See wikipedia for verification: http://en.wikipedia.org/wiki/IPv4_subnetting_reference.",
            "resolved": "2014-02-11",
            "versions": [
                "2.0"
            ],
            "fixVersions": [
                "3.1"
            ]
        },
        {
            "issue_id": "NET-522",
            "project": "Commons Net",
            "title": "The call to _storeFileStream method uses the wrong _openDataConnection_ method.",
            "type": "Bug",
            "description": "An SSL connection between the host and client has been established I try to get an OutputStream for a file the resulting socket (and OutputStream of that socket) is not secured. Further investigation shows that the FTPSClient calls \\_storeFileStream which in turn calls the method \\_openDataConnection\\_(String command, String arg) within the FTPClient class. This method \\_openDataConnection\\_ does not return a SSL socket. the method should call \\_openDataConnection\\_(int command, String arg) within the FTPSClient so that the proper SSL Socket is returned.",
            "resolved": "2014-01-27",
            "versions": [
                "3.1"
            ],
            "fixVersions": [
                "3.3"
            ]
        },
        {
            "issue_id": "NET-521",
            "project": "Commons Net",
            "title": "SubnetUtils.SubnetInfo.getAddressCount() can overflow as it returns an int",
            "type": "Bug",
            "description": "The method SubnetUtils.SubnetInfo.getAddressCount() returns an int.\n\nHowever a CIDR with 0 or 1 bits in the routing mask can represent more than Integer.MAX_VALUE entries, so the method cannot currently return the correct value.\n\nUnfortunately, if the method were changed to return a long it would break binary compatibility (the return type is part of the API signature).\n\nOne possible solution is to provide a new method which returns a long, and deprecate the old method.\n\nIf the original method cannot return the correct value, it should probably throw a runtime error.",
            "resolved": "2013-12-30",
            "versions": [
                "3.3"
            ],
            "fixVersions": [
                "3.4"
            ]
        },
        {
            "issue_id": "NET-520",
            "project": "Commons Net",
            "title": "SubnetUtils(\"0.0.0.0/0\") does not behave as expected",
            "type": "Bug",
            "description": "See NET-511 - SubnetUtils(\"0.0.0.0/0\") can now be created, but does not behave as might be expected.\n\nUnit tests needed which can then drive the fixes",
            "resolved": "2013-12-30",
            "versions": [],
            "fixVersions": [
                "3.4"
            ]
        },
        {
            "issue_id": "NET-519",
            "project": "Commons Net",
            "title": "Apache Commons Net 3.3 has a performance issue",
            "type": "Bug",
            "description": "We use Apache Commons Net FTP 3.1. That version had a bug for transferring files with size 0 that was resolved in Apache Commons 3.2.\nApache Commons 3.2 and 3.3 however both have a performance problem for files that do not have a size of 0.\n\nFor example a 30MB file using 3.1 takes approximately 40 seconds on our system from point A to point B. \nUsing Apache 3.3, the same file takes 2 minutes and 5 seconds. \nUsing Apache 3.2, the same file took over 4 minutes. \nThis is not acceptable. \n\nIf there are any workarounds, we would like to know. If not this is a major bug. ",
            "resolved": "2013-12-06",
            "versions": [
                "3.2",
                "3.3"
            ],
            "fixVersions": [
                "3.4"
            ]
        },
        {
            "issue_id": "NET-518",
            "project": "Commons Net",
            "title": "FTPClient#initFeatureMap should not initialize empty map if reply code is 530",
            "type": "Bug",
            "description": "Some servers reply with 530 when requesting features before being logged in. However sending FEAT is used to determine if the server supports secured connection before attempting to login using an unsecured connection.\n\nDue to the caching of the empty map subsequent feature detection fails.",
            "resolved": "2013-12-06",
            "versions": [
                "3.3"
            ],
            "fixVersions": [
                "3.4"
            ]
        },
        {
            "issue_id": "NET-517",
            "project": "Commons Net",
            "title": "FTPClient#reinitialize is package protected",
            "type": "Bug",
            "description": "Expected to have public modifier.",
            "resolved": "2013-12-06",
            "versions": [
                "3.3"
            ],
            "fixVersions": [
                "3.4"
            ]
        },
        {
            "issue_id": "NET-516",
            "project": "Commons Net",
            "title": "parser problem occurs if the filename contains one or more characters of which the second byte of Shift-JIS code is 0x85",
            "type": "Bug",
            "description": "Problem occurs if the filename contains one or more characters of which the second byte of Shift-JIS code is 0x85, on a windows Japanese machine when listing file names from IIS FTP server.\nThis was working fine in commons-net-1.4.0.jar . \n\n[This relates to the NTFTPEntryParser]",
            "resolved": "2014-12-11",
            "versions": [
                "2.0"
            ],
            "fixVersions": [
                "3.4"
            ]
        },
        {
            "issue_id": "NET-514",
            "project": "Commons Net",
            "title": "IMAP APPEND multiple issues in IMapClient",
            "type": "Bug",
            "description": "There are multiple issues in the way APPEND is handled in IMapClient.\n\n1) According to RFC3501 [1] the date-time field in an APPEND command is enclosed in double quotes. The code currently uses { } which is incorrect\n\n2) The APPEND command has the following arguments [2]:\n\nArguments:  mailbox name\n           OPTIONAL flag parenthesized list\n           OPTIONAL date/time string\n           message literal\n\nHowever, the existing methods don't support the message literal; there needs to be a method that supports the message literal. The existing methods should be deprecated as they serve no purpose.\n\n[1] http://tools.ietf.org/html/rfc3501#page-85\n[2] http://tools.ietf.org/html/rfc3501#section-6.3.11",
            "resolved": "2013-07-31",
            "versions": [
                "3.3"
            ],
            "fixVersions": [
                "3.4"
            ]
        },
        {
            "issue_id": "NET-513",
            "project": "Commons Net",
            "title": "[patch attached]SubnetUtils.SubnetInfo.getAllAddresses() Doesn't return all addresses",
            "type": "Bug",
            "description": "SubnetInfo.getAllAddresses() Doesn't return all addresses, but return all but 2 addresses.\nFixing code at following lines worked for me.\n\t        private int low()           { return network() ; }\n\t        private int high()          { return broadcast() ; }\npublic int getAddressCount()                { return (broadcast() - low() + 1); }\n\n\t            //j < addresses.length added as for loop will run infinitely when high is Integer.MAX_VALUE test case: 127.0.0.0/8\n\t            for (int add = low(), j=0; add <= high() && j < addresses.length; ++add, ++j) {\n\n",
            "resolved": "2013-12-06",
            "versions": [
                "3.3"
            ],
            "fixVersions": []
        },
        {
            "issue_id": "NET-512",
            "project": "Commons Net",
            "title": "Downloading files or members from the AS400 QSYS file system is not supported",
            "type": "Bug",
            "description": null,
            "resolved": "2013-12-06",
            "versions": [
                "3.3"
            ],
            "fixVersions": [
                "3.4"
            ]
        },
        {
            "issue_id": "NET-511",
            "project": "Commons Net",
            "title": "Exception for new SubnetUtils(\"0.0.0.0/0\")",
            "type": "Bug",
            "description": "The following example in SubnetUtils throws an exception:\n\n{code:java}\nSubnetUtils utils = new SubnetUtils(\"0.0.0.0/0\");\n{code}\n\nAs '0.0.0.0/0' is within the IPv4 specification, it should be supported.",
            "resolved": "2013-12-06",
            "versions": [
                "3.3"
            ],
            "fixVersions": [
                "3.4"
            ]
        },
        {
            "issue_id": "NET-509",
            "project": "Commons Net",
            "title": "AuthenticatingSMTPClient needs a constructor with the isImplicit argument for SSL",
            "type": "Bug",
            "description": "AuthenticatingSMTPClient extends SMTPSClient but does not have a constructor with the isImplicit argument.\nBecause of this we can not connect to a SSL SMTP server that requires authentication.\nAccording to the SMTPSClient javadoc :\n{quote}\nIn explicit mode (the default), SSL/TLS\n * negotiation starts when the user calls execTLS() and the server accepts the command.\n\n Implicit usage:\n               SMTPSClient c = new SMTPSClient(true);\n               c.connect(\"127.0.0.1\", 465);\n Explicit usage:\n               SMTPSClient c = new SMTPSClient();\n               c.connect(\"127.0.0.1\", 25);\n               if (c.execTLS()) { /rest of the commands here/ }\n\n{quote} \nSo all in all, we could think this is not important to have a constructor without the isImplicit argument, since we can go the c.execTLS() way.\nBut here is what happens when you use the explicit usage with AuthenticatingSMTPClient and a SSL connection (works fine with STARTTLS btw) : when you call connect(), SMTP.__getReply() is eventually called, and line 196 :\n{code}\n        String line = _reader.readLine();\n{code}\nis waiting for the SMTP server to reply... BUT the smtp client did not yet initiate the SSL connection; so we just wait for the timeout to occur (since the server won't reply anything before the SSL connection is initialized).\nAnd if we try to call execTls() before connect(), we get a NPE because the writer is not set yet.\n\nI have attached a simple patch to make AuthenticatingSMTPClient works with SSL connections (again it works fine with STARTTLS already)",
            "resolved": "2013-06-07",
            "versions": [],
            "fixVersions": [
                "3.3"
            ]
        },
        {
            "issue_id": "NET-506",
            "project": "Commons Net",
            "title": "TelnetInputStream blocks ReaderThread while trying to notify TelnetInputListner",
            "type": "Bug",
            "description": "As it's said in javadoc for the method registerInputListener of the class TelnetClient, \"incoming bytes are being added to the internal buffer asynchronously\". But it seems to be not so. In reality, the call of the method telnetInputAvailable of TelnetInputListner in ReaderThread blocks it and we are always able to read just 1 byte of data from stream.\n\nI'm not pretty sure, whether it's a bug or I have to do something by my self in my implementation of TelnetInputLister in case I want to get more then 1 byte at one read from stream?",
            "resolved": "2017-02-09",
            "versions": [
                "3.2"
            ],
            "fixVersions": []
        },
        {
            "issue_id": "NET-505",
            "project": "Commons Net",
            "title": "User specified bufferSize reset to default when FTPClient is disconnected or reinitialized resulting in performance degradation",
            "type": "Bug",
            "description": "The __bufferSize member variable is reset in the __initDefaults() method. This method is called from the FTPClient's constructor, _connectAction_, reinitialize, and disconnect. This can happen when the FTPClient is re-used after the remote server closes a session due to a timeout, for example. \n\nIf the bufferSize is set by the user via the setBufferSize() method, the value is lost when the buffer size is reset. Since the default buffer size controls the amount read from the input stream and written to the output stream, and is so low by default (1024B as defined by Util.DEFAULT_BUFFER_SIZE) the performance of FTPClient drops dramatically.\n\nThe recommendation would be to initialize __bufferSize to zero when it is declared and then remove the assignment in __initDefaults().",
            "resolved": "2013-06-06",
            "versions": [
                "3.2"
            ],
            "fixVersions": [
                "3.3"
            ]
        },
        {
            "issue_id": "NET-504",
            "project": "Commons Net",
            "title": "org.apache.commons.net.ftp.FTPFile.getTimestamp() showing advance date",
            "type": "Bug",
            "description": "Hi, my requirement is not to pick very recent file(copy in progress). to avoid this i implemented some code, but when i call org.apache.commons.net.ftp.FTPFile.getTimestamp() showing advance date, than created date.\n\nCode:\nfor (FTPFile file : fileArray) {\n\t\t\t\t\t\tCalendar modificationCal = file.getTimestamp();\n\t\t\t\t\t\tCalendar presentCal = Calendar.getInstance();\n\t\t\t\t\t\tlong diffMSecs = presentCal.getTimeInMillis() - modificationCal.getTimeInMillis();\n\t\t\t\t\t\tlong noOfMin = diffMSecs/(60*1000);\n\t\t\t\t\t\tif(noOfMin <= 3){\n\t\t\t\t\t\t\tSystem.out.println(\"Cureent Time is : \"+presentCal.getTime().toString());\n\t\t\t\t\t\t\tSystem.out.println(\"File    Time is : \"+modificationCal.getTime().toString());\n\t\t\t\t\t\t\tSystem.out.println(\"in if continue, file:  \"+file.getName()+\" no of Min :\"+noOfMin);\n\t\t\t\t\t\t\tcontinue;\n\t\t\t\t\t\t}\n\nOutput:\n\n\n2013-03-05 03:41:00,056 INFO  [stdout] (MyScheduler_Worker-1) Cureent Time is : Tue Mar 05 03:41:00 EST 2013\n2013-03-05 03:41:00,056 INFO  [stdout] (MyScheduler_Worker-1) File    Time is : Tue Mar 05 08:31:00 EST 2013\n2013-03-05 03:41:00,056 INFO  [stdout] (MyScheduler_Worker-1) in if continue, file:  sample_file.txt no of Min :-289\n\nany guess , why its not working ?\nThanks, Hussain Peera.\n\n",
            "resolved": "2013-03-05",
            "versions": [
                "3.0.1"
            ],
            "fixVersions": []
        },
        {
            "issue_id": "NET-503",
            "project": "Commons Net",
            "title": "AuthenticatingSMTPClient does not support non-default encoding",
            "type": "Bug",
            "description": "The AuthenticatingSMTPClient and SMTPSClient do not support any encoding aside from the default encoding of ISO-8859-1 defined in SMTP.\nThis is because the encoding field is final and can only be set in the constructor, but there is not constructor in these classes that allows specifying the encoding. There is one in the base SMTPClient class, but not in the super classes.",
            "resolved": "2013-02-20",
            "versions": [
                "3.2"
            ],
            "fixVersions": [
                "3.3"
            ]
        },
        {
            "issue_id": "NET-502",
            "project": "Commons Net",
            "title": "Apache FTPClient doesn't handle common responses to PWD",
            "type": "Bug",
            "description": "Common FTP servers (like vsftpd) responses' to PWD don't have a commentary as per RFC959.\n\nvsftpd, MockFtpServer and others respond thusly:\n\n> 257 \"/\"\n\nThe current handling in FTPClient.__parsePathname simply returns everything after \"257 \". This breaks other code that relies on Apache FTPClient, like the Camel FTP2 component.\n\nI suggest that, for increased resilience, this brief response be special-cased.\n\nvsftpd maintainer has been notified too, but it's just an email address.",
            "resolved": "2013-02-11",
            "versions": [
                "3.2"
            ],
            "fixVersions": [
                "3.3"
            ]
        },
        {
            "issue_id": "NET-501",
            "project": "Commons Net",
            "title": "Race Condition on TelnetClient.disconnect() and TelnetInputStream.run() . java.lang.IllegalStateException: Queue is full! Cannot process another character.",
            "type": "Bug",
            "description": "I'm getting the following exception while disconnecting a threaded (readerThread=true) TelnetClient connection. \n\n{code}\nException in thread \"Thread-160\" java.lang.IllegalStateException: Queue is full! Cannot process another character. \n\tat org.apache.commons.net.telnet.TelnetInputStream.__processChar(TelnetInputStream.java:339)\n\tat org.apache.commons.net.telnet.TelnetInputStream.run(TelnetInputStream.java:647)\n\tat java.lang.Thread.run(Thread.java:722)\n{code}\n\nI noticed that when TelnetClient.disconnect() is called the attribute __threaded is set to false while the thread in the TelnetInputStream.run() method could call TelnetInputStream().__processChar(...) throwing IllegalStateException\n\n\nThis is a test program to reproduce the issue\n\n{code}\npublic class TestTelnetClient implements Runnable {\n\n\t/**\n\t * @param args\n\t */\n\tpublic static void main(String[] args) {\n\t\tArrayList<Thread> workers = new ArrayList<Thread>();\n\t\tfor( int i=0; i<1000; ++i){\n\t\t\tThread t = new Thread ( new TestTelnetClient() );\n\t\t\tt.start();\n\t\t\tworkers.add(t);\n\t\t}\n\t\tfor (Thread t : workers ) {\t\t\t\n\t\t\ttry {\n\t\t\t\tt.join();\t\t\t\n\t\t\t} catch (InterruptedException e) {\n\t\t\t\te.printStackTrace();\n\t\t\t}\n\t\t}\t\t\t\n\n\t}\n\n\t@Override\n\tpublic void run() {\n\t\tSystem.out.println(\"Starting thread...\");\n\t\tTelnetClient tc = new TelnetClient();\n//\t\ttc.setReaderThread(false);\n\t\ttry {\n\t\t\ttc.connect(\"localhost\", 23);\n\t\t\ttc.setSoTimeout(1000);\n\t\t\tInputStream in = tc.getInputStream();\n\t\t\tint ch;\n\t\t\tin.read();\n\t\t} catch (SocketException e) {\n\t\t\te.printStackTrace();\n\t\t} catch (IOException e) {\n\t\t\te.printStackTrace();\n\t\t} finally {\n\t\t\tSystem.out.println(\"Disconnecting...\");\n\t\t\ttry {\n\t\t\t\ttc.disconnect();\n\t\t\t} catch (IOException e) {\n\t\t\t\t// TODO Auto-generated catch block\n\t\t\t\te.printStackTrace();\n\t\t\t}\n\t\t}\n\t\t\n\t}\n\n}\n{code}\n\nA telnet server (telnetd) is required. I also modified the initial banner ( /etc/issue.net ) with a lot of characters to get a better chance to receive information while calling disconnect.",
            "resolved": "2013-06-06",
            "versions": [
                "3.2"
            ],
            "fixVersions": [
                "3.3"
            ]
        },
        {
            "issue_id": "NET-499",
            "project": "Commons Net",
            "title": "FTP transfer to mainframe extremely slow",
            "type": "Bug",
            "description": "FTPClient.storeFile() is incredibly slow. I have two example files, one FB (4MB) and one in ravel VB (94K) format. Under 3.1 both files transfer in less than a second (FB:328ms, VB:112ms). Under 3.2 the VB transfer takes 30,000ms, and the FB transfer takes too long to find out (> 15 minutes).\n\nI have checked the FB file on the mainframe after cancelling the transfer and it is always partly there. But the length varies, suggesting that it hasn't hit the same error each time.\n\nI have built two jar files, one with 3.1 and the other with 3.2. These jars are available. The code is as follows:\n\n{code}\npublic class FTPTransfer\n{\n  public static void transfer (String name, FTPClient ftp, File file) throws IOException\n  {\n    FileInputStream fis = new FileInputStream (file);\n    long start = System.currentTimeMillis ();\n\n    if (ftp.storeFile (name, fis))\n      System.out.print (\"File transferred\");\n    else\n      System.out.print (\"Transfer failed\");\n\n    System.out.printf (\" in %d ms%n\", (System.currentTimeMillis () - start));\n    fis.close ();\n  }\n\n  public static void main (String[] args)\n  {\n    File file1 = null;\n    File file2 = null;\n\n    if (System.getProperty (\"os.name\").toLowerCase ().startsWith (\"mac\"))\n    {\n      file1 = new File (\"/Users/Denis/comtest/DENIS-018.SRC\");   // ravel file format\n      file2 = new File (\"/Users/Denis/comtest/MOLONYD.NCD\");     // FB252 format\n    }\n    else\n    {\n      file1 = new File (\"D:/comtest/DENIS-018.SRC\");   // ravel file format\n      file2 = new File (\"D:/comtest/MOLONYD.NCD\");     // FB252 format\n    }\n\n    FTPClient ftp = new FTPClient ();\n    ftp.addProtocolCommandListener (new PrintCommandListener (new PrintWriter (System.out), true));\n\n    try\n    {\n      ftp.connect (\"server\");\n\n      int reply = ftp.getReplyCode ();\n\n      if (!FTPReply.isPositiveCompletion (reply))\n      {\n        ftp.disconnect ();\n        System.err.println (\"FTP server refused connection.\");\n        System.exit (1);\n      }\n\n      ftp.login (\"user\", \"pw\");\n      FTPFile[] files = ftp.listFiles ();\n      System.out.printf (\"%nListing contains %d files%n%n\", files.length);\n\n      ftp.setFileType (FTP.BINARY_FILE_TYPE);\n\n      ftp.setFileStructure (FTP.RECORD_STRUCTURE);\n      transfer (\"TEST.VB\", ftp, file1);\n\n      ftp.setFileStructure (FTP.FILE_STRUCTURE);\n      transfer (\"TEST.FB\", ftp, file2);\n\n      ftp.logout ();\n    }\n    catch (IOException e)\n    {\n      e.printStackTrace ();\n    }\n    finally\n    {\n      if (ftp.isConnected ())\n      {\n        try\n        {\n          ftp.disconnect ();\n        }\n        catch (IOException ioe)\n        {\n        }\n      }\n    }\n  }\n}\n{code}",
            "resolved": "2013-04-17",
            "versions": [
                "3.2"
            ],
            "fixVersions": [
                "3.3"
            ]
        },
        {
            "issue_id": "NET-498",
            "project": "Commons Net",
            "title": "Retrieving files from AS400 FTP systems returns null timestamps in FTPFile.getTimestamp",
            "type": "Bug",
            "description": "We are trying to list files from AS400 systems and retrieve the timestamps from these files using the following code:\n\n{code}\nimport java.io.FileInputStream;\nimport java.io.FileOutputStream;\nimport java.io.IOException;\nimport java.io.InputStream;\nimport java.io.OutputStream;\nimport java.io.PrintWriter;\nimport java.net.InetAddress;\nimport java.net.UnknownHostException;\n\nimport org.apache.commons.net.PrintCommandListener;\nimport org.apache.commons.net.ftp.FTP;\nimport org.apache.commons.net.ftp.FTPClient;\nimport org.apache.commons.net.ftp.FTPHTTPClient;\nimport org.apache.commons.net.ftp.FTPClientConfig;\nimport org.apache.commons.net.ftp.FTPConnectionClosedException;\nimport org.apache.commons.net.ftp.FTPFile;\nimport org.apache.commons.net.ftp.FTPReply;\nimport org.apache.commons.net.ftp.FTPSClient;\nimport org.apache.commons.net.io.CopyStreamEvent;\nimport org.apache.commons.net.io.CopyStreamListener;\nimport org.apache.commons.net.util.TrustManagerUtils;\n\npublic final class FTPAccess {\n\tprivate String server;\n\tprivate String username;\n\tprivate String password;\n\tprivate String path ;\n\n\tpublic String getPath() {\n\t\treturn path;\n\t}\n\tpublic void setPath(String path) {\n\t\tthis.path = path;\n\t}\n\tpublic static void main(String[] args) throws UnknownHostException {\n\t\tFTPAccess ftpAccess = new FTPAccess();\n\t\tftpAccess.setServer(\"X.X.X.X\");\n\t\tftpAccess.setUsername(\"XXXXXX\");\n\t\tftpAccess.setPassword(XXXXXXX\");\n\t\tftpAccess.setPath(\"/reports\");\n\t\tftpAccess.getFile();\n\t}\n\tpublic void getFile() throws UnknownHostException {\n\t\t\n\t\tFTPClient ftpClient = new FTPClient();\n\t\t\n\t\ttry {\n\t\t\tInetAddress serveIPAddress = InetAddress.getByName(server);\n\t\t\tftpClient.setPassiveLocalIPAddress(serveIPAddress);\n\t\t\tftpClient.connect(serveIPAddress);\n\t\t\tSystem.out.println(\"Connected to \" + server + \".\");\n\n\t\t\tint reply = ftpClient.getReplyCode();\n\t\t\tif (!FTPReply.isPositiveCompletion(reply)) {\n\t\t\t\tSystem.err.println(\"FTP server refused connection.\");\n\t\t\t\tSystem.err.println(ftpClient.getReplyString());\n\t\t\t\tftpClient.disconnect();\n\t\t\t} else {\n\t\t\t}\n\n\t\t\tif (!ftpClient.login(username, password)) {\n\t\t\t\tSystem.out.println(ftpClient.getReplyString());\n\t\t\t\tftpClient.logout();\n\t\t\t} else{\n\t\t\t\tdiplayContent(ftpClient, path);\n\n\t\t\t}\n\n\t\t} catch (IOException e) {\n\t\t\tif (ftpClient.isConnected()) {\n\t\t\t\ttry {\n\t\t\t\t\tftpClient.disconnect();\n\t\t\t\t} catch (IOException ioException) {\n\t\t\t\t\t// do nothing\n\t\t\t\t}\n\t\t\t}\n\t\t\tSystem.err.println(\"Could not connect to server.\");\n\t\t\t// e.printStackTrace();\n\t\t\tSystem.exit(1);\n\t\t}\n\n\t\t// } catch (FTPConnectionClosedException e) {\n\t\t// error = true;\n\t\t// System.err.println(\"Server closed connection.\");\n\t\t// e.printStackTrace();\n\t\t// } catch (IOException e) {\n\t\t// error = true;\n\t\t// e.printStackTrace();\n\t\t// } finally {\n\t\t// if (ftp.isConnected()) {\n\t\t// try {\n\t\t// ftp.disconnect();\n\t\t// } catch (IOException f) {\n\t\t// // do nothing\n\t\t// }\n\t\t// }\n\t\t// }\n\n\t} // end main\n\n\tpublic String getServer() {\n\t\treturn server;\n\t}\n\n\tpublic void setServer(String server) {\n\t\tthis.server = server;\n\t}\n\n\tpublic String getUsername() {\n\t\treturn username;\n\t}\n\n\tpublic void setUsername(String username) {\n\t\tthis.username = username;\n\t}\n\n\tpublic String getPassword() {\n\t\treturn password;\n\t}\n\n\tpublic void setPassword(String password) {\n\t\tthis.password = password;\n\t}\n\t\n\tpublic void diplayContent(FTPClient ftpClient, String path) throws IOException {\n\t\tSystem.out.println(path);\n\t\tfor (FTPFile ftpFile : ftpClient.listFiles(path)) {\n\t\t\tif(ftpFile.isDirectory() ){\n\t\t\t\tdiplayContent(ftpClient, path+\"/\"+ftpFile.getName());\n\t\t\t} else{\n\t\t\t\tSystem.out.println(path+\"/\"+ftpFile.getName());\n\t\t\t\tSystem.out.println(ftpFile.getTimestamp());\n\t\t\t}\n\t\t}\n\t\t\n\t}\n\n}\n{code}\n\nThe LIST command which is used internally in the FTPClient retrieves the timestamps successfully. However after parsing the FTPFile has a null value for the timestamp field.\n\nThe null value is returned just when a user place the file in the AS400 usint the NetServer Servivice. This is used to share foldes between windows network and the AS/400\n\nPlease help us fix this problem. It is not critical to us.\n",
            "resolved": "2013-04-17",
            "versions": [
                "3.2"
            ],
            "fixVersions": []
        },
        {
            "issue_id": "NET-497",
            "project": "Commons Net",
            "title": "ToNetASCIIInputStream skips LF at the end of the stream",
            "type": "Bug",
            "description": "I have the following failing test case for ToNetASCIIInputStream:\n\n{noformat}\n    public void testToNetASCIIInputStream() throws Exception\n    {\n        final Charset ASCII = Charset.forName(\"ASCII\");\n        byte[] data = \"Hello\\nWorld\\n\".getBytes(ASCII);\n        InputStream source = new ByteArrayInputStream(data);\n        ToNetASCIIInputStream toNetASCII = new ToNetASCIIInputStream(source);\n        byte[] output = new byte[512];\n        int length = toNetASCII.read(output);\n        byte[] result = new byte[length];\n        System.arraycopy(output, 0, result, 0, length);\n        assertEquals('\\r', result[length-2]);\n        assertEquals('\\n', result[length-1]);\n    }\n{noformat}\n",
            "resolved": "2013-01-29",
            "versions": [
                "3.1"
            ],
            "fixVersions": []
        },
        {
            "issue_id": "NET-495",
            "project": "Commons Net",
            "title": "Unsupported record version Unknown-48.48 - commons-net-3.1.jar",
            "type": "Bug",
            "description": "FTPSClient bundled in \"commons-net-3.1.jar\" returns \"Unsupported record version Unknown-48.48\" error when I try to FTP a zero byte file. This error doesn't come when we use \"commons-net-2.0.jar\" file.\n\njavax.net.ssl.SSLException: Unsupported record version Unknown-48.48\n        at com.sun.net.ssl.internal.ssl.InputRecord.readV3Record(InputRecord.java:375)\n        at com.sun.net.ssl.internal.ssl.InputRecord.read(InputRecord.java:360)\n        at com.sun.net.ssl.internal.ssl.SSLSocketImpl.readRecord(SSLSocketImpl.java:830)\n        at com.sun.net.ssl.internal.ssl.SSLSocketImpl.readDataRecord(SSLSocketImpl.java:787)\n        at com.sun.net.ssl.internal.ssl.AppInputStream.read(AppInputStream.java:75)\n        at sun.nio.cs.StreamDecoder.readBytes(StreamDecoder.java:264)\n        at sun.nio.cs.StreamDecoder.implRead(StreamDecoder.java:306)\n        at sun.nio.cs.StreamDecoder.read(StreamDecoder.java:158)\n        at java.io.InputStreamReader.read(InputStreamReader.java:167)\n        at java.io.BufferedReader.fill(BufferedReader.java:136)\n        at java.io.BufferedReader.readLine(BufferedReader.java:299)\n        at java.io.BufferedReader.readLine(BufferedReader.java:362)\n        at org.apache.commons.net.ftp.FTP.__getReply(FTP.java:310)\n        at org.apache.commons.net.ftp.FTP.__getReply(FTP.java:290)\n        at org.apache.commons.net.ftp.FTP.getReply(FTP.java:637)\n        at org.apache.commons.net.ftp.FTPClient.completePendingCommand(FTPClient.java:1637)\n        at org.apache.commons.net.ftp.FTPClient._storeFile(FTPClient.java:599)\n        at org.apache.commons.net.ftp.FTPClient.__storeFile(FTPClient.java:557)\n        at org.apache.commons.net.ftp.FTPClient.storeFile(FTPClient.java:1795)\n        at FTPSExample.main(FTPSExample.java:173)\n",
            "resolved": "2013-04-17",
            "versions": [
                "3.1"
            ],
            "fixVersions": [
                "3.2"
            ]
        },
        {
            "issue_id": "NET-494",
            "project": "Commons Net",
            "title": "FTPClient.CSL.cleanUp() fails to restore timeout value on exception",
            "type": "Bug",
            "description": "The CSL class temporarily resets the socket timeout.\n\nThe cleanUp() method restores the original setting, however this may be skipped if an exception occurs.\n\nThe code should ensure that the original setting is always restored.",
            "resolved": "2013-01-09",
            "versions": [
                "3.2"
            ],
            "fixVersions": [
                "3.3"
            ]
        },
        {
            "issue_id": "NET-493",
            "project": "Commons Net",
            "title": "FTPClient: Slow data transfer rate if __bufferSize != 0",
            "type": "Bug",
            "description": "The patch applied in [NET-465|https://issues.apache.org/jira/browse/NET-465] causes a very slow data transfer rate. The line {code}850: socket.setSendBufferSize(__bufferSize){code} in {code}_openDataConnection_{code} sets the buffer size to 1024  by default. With this size I had a very bad transfer rate on windows 7 and XP. The wireshark log shows that each FTP-DATA packet is exactly 1024 bytes long and has to be acknowledged on the TCP layer before the next one is sent. I don't know why, but when I set the buffer size to 0 (FTPClient.setBufferSize) the transfer rate is fine. ",
            "resolved": "2013-01-24",
            "versions": [
                "3.2"
            ],
            "fixVersions": []
        },
        {
            "issue_id": "NET-492",
            "project": "Commons Net",
            "title": "FTPClient.printWorkingDirectory() incorrectly parses certain valid PWD command results",
            "type": "Bug",
            "description": "The new implementation of FTPClient.printWorkingDirectory() which tries to follow RFC959 is invalid and can return unescaped or invalid path in certain circumstances. According to the commentary, the author interpreted the RFC that the output is always constructed in the following way:\n\n257<space>\"<directory-name>\"<space><commentary>\nWhere any double quotes within the directory name are doubled.\n\nFirst issue: the RFC does not state that the output for PWD looks exactly like this, but that the reply code is the same, as for MKD. Especially, PWD does not return any commentary, and VSFTPD server (which I'm trying to talk to) does not print out the terminating space, but ends up the output on the last double quote. The algorithm uses the following code to detect the end of the quoted path:\n\nint end = reply.lastIndexOf(\"\\\" \");\n\nIf there is no terminating space, the last double quote cannot be found, and as a result, the method returns the unescaped directory name:\n\n\"/foo\"\n\ninstead of\n\n/foo\n\nSecond issue: the current implementation would not work in case of the following directory:\n\n/Foo/Bar\" /Joe\n\nPWD command output:\n\n257 \"/Foo/Bar\"\" /Joe\"\n\nValue returned by printWorkingDirectory():\n\n/Foo/Bar\"\n\nNote to the administrators: the problem has been found in commons-net 3.2 version, but JIRA claims it is unreleased and does not allow me to choose it.",
            "resolved": "2013-01-23",
            "versions": [
                "3.2"
            ],
            "fixVersions": [
                "3.3"
            ]
        },
        {
            "issue_id": "NET-490",
            "project": "Commons Net",
            "title": "Binary store to mainframe hangs under 3.2",
            "type": "Bug",
            "description": "When storing a large binary file (almost 4MB) the STOR command hangs. It works fine with commons-net-3.2-20120413.112211-57.jar, but since changing to the 3.2 release it no longer works. Reverting to the previous jar file works again.\n\nIt is a ravel file, file type Image, data structure Record.\n\nI have verbose mode set, the last message shown is the '125 Storing data set xxx.yyy' After that, nothing more.\n\nIf I use ftp directly (without java), the same file transfers successfully.",
            "resolved": "2012-12-08",
            "versions": [
                "3.2"
            ],
            "fixVersions": []
        },
        {
            "issue_id": "NET-489",
            "project": "Commons Net",
            "title": "FTPClient corrupts a specific file",
            "type": "Bug",
            "description": "This very specific file is corrupted on transfer.\nIt doesn't work for any other file I've tried (about 100 different files).\n\nHex dump of source file:\n0000000 8b1f 0808 69b3 50aa 0300 6472 5f66 7361\n0000010 6f73 6c5f 6e69 2e6b 7874 0074 ce3d 11c9\n0000020 30c0 4308 b3d1 8d5d 8b00 ffa5 92c6 26d8\n0000030 37d7 0d1f 8d0a da2a 65a0 1608 1ea6 16e1\n0000040 6755 0e4b 0647 758b 75c5 8037 62fc b457\n0000050 7c77 527d 61ef b0b6 691b 23a9 76e1 7025\n0000060 19c4 722d ea9b 627f a72f 7c19 a33e f9a9\n0000070 c685 0000 0000\n0000075\n\nHexdump of destination file:\n0000000 8b1f 0808 69b3 50aa 0300 6472 5f66 7361\n0000010 6f73 6c5f 6e69 2e6b 7874 0074 ce3d 11c9\n0000020 30c0 4308 b3d1 8d5d 8b00 ffa5 92c6 26d8\n0000030 37d7 0a1f 2a8d a0da 0865 a616 e11e 5516\n0000040 4b67 470e 8b06 c575 3775 fc80 5762 77b4\n0000050 7d7c ef52 b661 1bb0 a969 e123 2576 c470\n0000060 2d19 9b72 7fea 2f62 19a7 3e7c a9a3 85f9\n0000070 00c6 0000\n0000074\n",
            "resolved": "2013-01-09",
            "versions": [
                "3.1"
            ],
            "fixVersions": []
        },
        {
            "issue_id": "NET-488",
            "project": "Commons Net",
            "title": "ftpclient.listfiles return file name as FILE1.236 -rw-rw-r--    1  T0000001 FTP        5242484 Oct 15 18:20 FILE1.237",
            "type": "Bug",
            "description": "while listing files from the FTP server ftpclient.listfiles return file name as \n{noformat}\n<file name 1> -rw-rw-r--    1  T0000001 FTP        5242484 Oct 15 18:20 <file name 2>.\n{noformat}\n\nthe single string contains two file name and carriage return character is at end of line.sometimes, second file doesnot come under the list or missing from the list.\n\nHowever, the list contains all valid file name except the one bad string.It occurs not consistently. \n",
            "resolved": "2013-04-17",
            "versions": [
                "3.1"
            ],
            "fixVersions": []
        },
        {
            "issue_id": "NET-487",
            "project": "Commons Net",
            "title": "TelnetClient InputStream can not read data until timeout!",
            "type": "Bug",
            "description": "After i use telnet clinet connect to a linux server,i get the input stream,but it blocked until timeout after 60 seconds. then i got following message:\nlogin: Login timed out after 60 seconds\nWhen i change commons-net.jar to version 3.0, it works very well!",
            "resolved": "2013-01-09",
            "versions": [
                "3.1"
            ],
            "fixVersions": [
                "3.2"
            ]
        },
        {
            "issue_id": "NET-486",
            "project": "Commons Net",
            "title": "FtpClient 3.0.1 - SocketTimeoutException - Read Timed out",
            "type": "Bug",
            "description": "In a random intervals, we receive the following error while transferring the file to a FTP server. Have implemented control keep alive mechanism with timeout of 120 seconds. Issue is the file has been transferred successfuly but still getting this exception. What is the cause and how to avoid it?\n\njava.net.SocketTimeoutException: Read timed out\n\tat java.net.SocketInputStream.socketRead0(Native Method)\n\tat java.net.SocketInputStream.read(SocketInputStream.java:129)\n\tat sun.nio.cs.StreamDecoder.readBytes(StreamDecoder.java:264)\n\tat sun.nio.cs.StreamDecoder.implRead(StreamDecoder.java:306)\n\tat sun.nio.cs.StreamDecoder.read(StreamDecoder.java:158)\n\tat java.io.InputStreamReader.read(InputStreamReader.java:167)\n\tat java.io.BufferedReader.fill(BufferedReader.java:136)\n\tat java.io.BufferedReader.read(BufferedReader.java:157)\n\tat org.apache.commons.net.io.CRLFLineReader.readLine(CRLFLineReader.java:58)\n\tat org.apache.commons.net.ftp.FTP.__getReply(FTP.java:310)\n\tat org.apache.commons.net.ftp.FTP.__getReply(FTP.java:290)\n\tat org.apache.commons.net.ftp.FTP.getReply(FTP.java:632)\n\tat org.apache.commons.net.ftp.FTPClient.completePendingCommand(FTPClient.java:1561)\n\tat org.apache.commons.net.ftp.FTPClient.__storeFile(FTPClient.java:581)\n\tat org.apache.commons.net.ftp.FTPClient.storeFile(FTPClient.java:1704)",
            "resolved": "2012-10-11",
            "versions": [
                "3.0.1"
            ],
            "fixVersions": []
        },
        {
            "issue_id": "NET-485",
            "project": "Commons Net",
            "title": "Remove unnecessary Base64 methods",
            "type": "Bug",
            "description": "There are two methods in Base64 which are left-overs from Commons Codec.\nThey were intended to support the Encoder and Decoder interfaces which are not used in Commons NET.\n\nThe following methods should be deleted:\n\nBase64#decode(Object)\nBase64#encode(Object)",
            "resolved": "2012-10-09",
            "versions": [
                "3.1"
            ],
            "fixVersions": [
                "3.2"
            ]
        },
        {
            "issue_id": "NET-483",
            "project": "Commons Net",
            "title": "Base64.encodeBase64(byte[], boolean, boolean, int) does not calculate output size correctly for unchunked output",
            "type": "Bug",
            "description": "The method Base64.encodeBase64(byte[] binaryData, boolean isChunked, boolean urlSafe, int maxResultSize) fails to calculate the output size correctly for unchunked output.\n\nThis is because it assumes all output is chunked.",
            "resolved": "2012-10-06",
            "versions": [],
            "fixVersions": [
                "3.2"
            ]
        },
        {
            "issue_id": "NET-480",
            "project": "Commons Net",
            "title": "Wrong passivHost when using FTPHTTPClient with EPSV",
            "type": "Bug",
            "description": "At the FTPHTTPClient Class in line 99 the Answer from the EPSV Command will parse to receive the Data port and the passiv Host.\n\\_parsePassiveModeReply(\\_replyLines.get(0))\nIn this function the \\_\\_passivHost is set to the remoteAddress, but this address is determine by \"this.\\_socket\\_.getInetAddress();\" and the socket is the socket of the proxy Server and NOT of the ftp Server.\n\n\n",
            "resolved": "2013-01-23",
            "versions": [
                "3.1",
                "3.2"
            ],
            "fixVersions": [
                "3.3"
            ]
        },
        {
            "issue_id": "NET-479",
            "project": "Commons Net",
            "title": "After upgrade from JRE 1.6 Update 27 to Update 29 (and up till Update 35), cannot logon using FTPS",
            "type": "Bug",
            "description": "Using the following code works with JRE Update 27 but not with JRE Update 29 and later (neither Update 30 nor Update 35 work - and there was no Update 28).\n\n{noformat}\nfinal FTPSClient ftpsClient = new FTPSClient(\"TLS\", true);\n\nftpsClient.connect(\"test.ftps.xxxx.com\", 6366);\nfinal int replyCode = ftpsClient.getReplyCode();\nif (!FTPReply.isPositiveCompletion(replyCode)) {\n    throw new RuntimeException();\n}\nftpsClient.enterLocalPassiveMode();\nif (!ftpsClient.login(\"user\", \"pass\")) {\n   throw new RuntimeException(\"Cannot logon\");\n}\n{noformat}\n\n\nWith update 29 I receive the exception 'Cannot logon\".\nI have tried to determine what has changed between the two releases and it seems there have been some changes to TLS - these are the release notes - with links to the security advisory:\nhttp://www.oracle.com/technetwork/java/javase/6u29-relnotes-507960.html\n\n\nUpdate 27 and 29 can be found here:\nhttp://www.oracle.com/technetwork/java/javasebusiness/downloads/java-archive-downloads-javase6-419409.html#jdk-6u27-oth-JPR\n\n\nI also tried this (I can attach the debug output but it didn't seem to differ significantly between the successful and failed attempts)\n\n{noformat}\nSystem.setProperty(\"javax.net.debug\", \"ssl\");\nSystem.setProperty(\"sun.security.ssl.allowUnsafeRenegotiation\", \"true\");\nSystem.setProperty(\"sun.security.ssl.allowLegacyHelloMessages\" , \"true\");\n{noformat}\n\nUnfortunately I do not have any detailed information on the FTPS server I am connecting to (it is a Bank's test server).\nAny help would be appreciated.",
            "resolved": "2012-10-05",
            "versions": [
                "3.1"
            ],
            "fixVersions": []
        },
        {
            "issue_id": "NET-477",
            "project": "Commons Net",
            "title": "TFTP sendFile retry broken",
            "type": "Bug",
            "description": "TFTPClient.java sendFile() method does not retry after initial timeout.\n\nBetween revisons 1088720 & 1229692 the 'continue' statements were changed to 'continue _sendPacket'. After the initial timeout of bufferedReceive() these cause the control to flow to the outer loop and never retry. If the control did flow accordingly, the retry would loop indefinitely since the timeouts variable is reset to zero each time as well.\n\nI am using a workaround by calling bufferedSend(sent) just before continue, in place of the 'continue _sendPacket' statement.\n\nIt looks as if similar logic was applied to the receiveFile() method as well.\n\nRevision:1229692\nTime:01/10/2012 01:14 PM\nAuthor:sebb\nPath:http://svn.apache.org/repos/asf/commons/proper/net/trunk/src/main/java/org/apache/commons/net/tftp/TFTPClient.java\nMessage:NET-410 Apache Commons TFTP does not handle RFC 783 retransmits\n",
            "resolved": "2017-02-09",
            "versions": [
                "3.1",
                "3.2"
            ],
            "fixVersions": [
                "3.6"
            ]
        },
        {
            "issue_id": "NET-475",
            "project": "Commons Net",
            "title": "FtpClient sends REST when calling listFiles",
            "type": "Bug",
            "description": "First setting a restart offset and then requesting a directory listing makes FtpClient send REST, LIST. The correct behavior should be to send only LIST and send REST on the first file transfer operation.\n\nVersions 3.1 and 3.0.1 of commons-net have shown this behavior in our software.\n\nFollowing is a minimal sample, tested with version 3.1:\n\n{code}\npackage test;\n\nimport java.io.PrintWriter;\n\nimport org.apache.commons.net.PrintCommandListener;\nimport org.apache.commons.net.ftp.FTPClient;\n\npublic class Test {\n\n\tpublic static void main(String[] args) throws Exception {\n\t\tFTPClient client = new FTPClient();\n\t\tclient.addProtocolCommandListener(new PrintCommandListener(\n\t\t\t\tnew PrintWriter(System.out), true));\n\t\t\n\t\tclient.connect(Server.ip);\n\t\tclient.login(Server.username, Server.password);\n\t\t\n        client.setRestartOffset(10);\n        \n        client.listFiles(\"\");\n\t}\n\t\n}\n{code}\n\nOutput:\n{code}\n220 Welcome to FTP service.\nUSER *******\n331 Please specify the password.\nPASS *******\n230 Login successful.\nSYST\n215 UNIX Type: L8\nPORT 10,43,92,50,230,56\n200 PORT command successful. Consider using PASV.\nREST 10\n350 Restart position accepted (10).\nLIST \n150 Here comes the directory listing.\n226 Directory send OK.\n{code}",
            "resolved": "2012-07-14",
            "versions": [
                "3.0.1",
                "3.1"
            ],
            "fixVersions": [
                "3.2"
            ]
        },
        {
            "issue_id": "NET-474",
            "project": "Commons Net",
            "title": "Problem, in __getReply method, parsing reply code with leading space",
            "type": "Bug",
            "description": "FTPClient.getStatus() function call failed complaining about malformed response code.\n\nAfter tracing the code, I found the problem at following class and line:\n*org.apache.commons.net.ftp.FTP.__getReply(FTP.java:333)*\n\nThe issue is that this method always expects reply code at position 0 of the returned reply string. If the reply string has some leading spaces, it fails to parse the reply code and returns malformed reply string.\n\nExample of such a reply string:\n\n{noformat}\n      211-nhpssltest Ipswitch FTP Server\n      Version 5.0.2\n      Connected to 184.70.132.130\n      Logged in as massba\n      TYPE: ASCII, FORM: Nonprint; STRUcture: File; transfer MODE: STREAM\n      No data connection\n211 End of status\n{noformat}\n",
            "resolved": "2012-07-10",
            "versions": [
                "3.1"
            ],
            "fixVersions": []
        },
        {
            "issue_id": "NET-473",
            "project": "Commons Net",
            "title": "FTPClient setSoTimeout (int time) will result in NullPointerException",
            "type": "Bug",
            "description": "After creating FTPClient you are able to invoke org.apache.commons.net.SocketClient-> setSoTimeout () method which will result in NullPointerException.\n\nIt happens because in SocketClient class Socket object is initialized with null. Shouldn't it be more sensible to create new socket from the socketFactory and don't wait for socket creation till connect() method, because it will be imposiible to do any configuration to the socket until you're connected.",
            "resolved": "2012-07-14",
            "versions": [],
            "fixVersions": [
                "3.2"
            ]
        },
        {
            "issue_id": "NET-469",
            "project": "Commons Net",
            "title": "Erroneous \"No route to host\" on upload failure",
            "type": "Bug",
            "description": "The example code at \n\nhttp://commons.apache.org/net/examples/ftp/FTPClientExample.java\n\n...fails to store a file in a remote server with:\n\njava TestConnection -s 91.231.###.## ###### ******** file.csv file.csv\n\n{{\n220 Unauthorized access prohibited!\nConnected to 91.231.###.## on 21\nUSER *******\n331 Password required for ######.\nPASS *******\n230 User logged in.\nSYST\n215 Windows_NT\nRemote system is Windows_NT\nPASV\n227 Entering Passive Mode (85,88,142,160,117,69).\njava.net.NoRouteToHostException: No route to host\n\tat java.net.PlainSocketImpl.socketConnect(Native Method)\n\tat java.net.PlainSocketImpl.doConnect(PlainSocketImpl.java:351)\n\tat java.net.PlainSocketImpl.connectToAddress(PlainSocketImpl.java:213)\n\tat java.net.PlainSocketImpl.connect(PlainSocketImpl.java:200)\n\tat java.net.SocksSocketImpl.connect(SocksSocketImpl.java:366)\n\tat java.net.Socket.connect(Socket.java:529)\n\tat org.apache.commons.net.ftp.FTPClient._openDataConnection_(FTPClient.java:762)\n\tat org.apache.commons.net.ftp.FTPClient._storeFile(FTPClient.java:565)\n\tat org.apache.commons.net.ftp.FTPClient.__storeFile(FTPClient.java:557)\n\tat org.apache.commons.net.ftp.FTPClient.storeFile(FTPClient.java:1795)\n\tat pt.knowledgeworks.emsa.mssim.scenario.TestConnection.main(TestConnection.java:285)\n}}\n\nTcpdump in attachment. I'm no tcp expert to tell what's wrong with the dump. Ping, traceroute and other ftp clients work without problems. Standard command-line ftp managed to upload a file with no problems.\n\nOriginally discovered via wagon-ftp (mvn deploy).\n\nThanks in advance.",
            "resolved": "2012-06-12",
            "versions": [
                "3.1"
            ],
            "fixVersions": []
        },
        {
            "issue_id": "NET-467",
            "project": "Commons Net",
            "title": "IMAPClient#fetch() does not handle literal strings",
            "type": "Bug",
            "description": "As reported on the user list, IMAP#fetch(\"1\",\"body[header]\") fails with an error such as:\n\norg.apache.commons.net.MalformedServerReplyException: Received\nunexpected IMAP protocol response from server: 'Return-Path: <snip>'\n\nThis is because the code does not currently handle literal strings, i.e.\n\n{nnn}CRLF\ntextCRLF\n...\n\nSee http://tools.ietf.org/html/rfc3501#section-4.3",
            "resolved": "2012-05-26",
            "versions": [
                "3.1"
            ],
            "fixVersions": [
                "3.2"
            ]
        },
        {
            "issue_id": "NET-466",
            "project": "Commons Net",
            "title": "Regression: TelnetInputStream#available() blocks",
            "type": "Bug",
            "description": "When testing with Commons Net 3.1 for Eclipse https://bugs.eclipse.org/bugs/show_bug.cgi?id=194473 , I found that our telnet client blocks when the ReaderThread is running and waiting for new data. Investigation shows that our code blocks on TelnetInputStream#available().\n\nThis regression is due to the code introduced for NET-437 \"TelnetInputStream doesn't support non-blocking IO when reader thread is not enabled\":\n\nTelnetInputStream#available() now calls super.available() which is declared as \"synchronized\" on BufferedInputStream in JDK 1.6.0_21 at least. But at the same time, the telnet ReaderThread has already the Monitor on BufferedInputStream and doesn't give it up while sitting in read0().\n\nThis seems to be exactly the situation that the comment before TelnetInputStream#close() warns about:\n    // Cannot be synchronized.  Will cause deadlock if run() is blocked\n    // in read because BufferedInputStream read() is synchronized.\n\nThis is a severe issue since it violates the specification and use of available().",
            "resolved": "2012-10-05",
            "versions": [
                "3.1"
            ],
            "fixVersions": [
                "3.2"
            ]
        },
        {
            "issue_id": "NET-465",
            "project": "Commons Net",
            "title": "FTPClient setSendBufferSize and setReceiveBufferSize on data socket",
            "type": "Bug",
            "description": "When sending large files the need to set the send and receive buffer sizes on the data socket is much more important than the command socket.  Please either give 2 more setters or make the setters set the data socket and leave the command socket alone.",
            "resolved": "2013-04-17",
            "versions": [
                "3.1"
            ],
            "fixVersions": [
                "3.3"
            ]
        },
        {
            "issue_id": "NET-461",
            "project": "Commons Net",
            "title": "getTimestamp() return is different by same file in windows and linux",
            "type": "Bug",
            "description": "When using \"listFiles\" in FTPClient, I have found getTimestamp() return is different in windows and linux.\nFor example,The file last modified time is 2012-04-24 15:10:40 (GMT +8:00) both in linux and windows, getTimestamp return is \"Tue Apr 24 15:10:00 CST 2012\" in windows, but return \"Tue Apr 24 07:10:00 CST 2012\" in linux\u3002\n\nDetail:\nMy Code is:\nFTPClient client = new FTPClient();\nclient.connect(\"*.*.*.*\", 21);\nclient.login(\"*******\", \"*********\");\nFTPFile[] files = client.listFiles();\n        \nfor (int i = 0; i < files.length; i++)\n{\n   FTPFile ftpFile = files[i];\n   System.out.println(ftpFile.getTimestamp().getTime());\n}\n\nCode print:\nWindows:\nTue Apr 24 15:10:00 CST 2012\n\nLinux:\nTue Apr 24 07:10:00 CST 2012\n\ngetTimestamp() return all is same but hour information is different\u3002\n\nThanks \n\n",
            "resolved": "2012-05-11",
            "versions": [
                "3.1"
            ],
            "fixVersions": []
        },
        {
            "issue_id": "NET-459",
            "project": "Commons Net",
            "title": "FTPClient.storeFile never returns in active mode if data channel cannot be established",
            "type": "Bug",
            "description": "FTPClient.storeFile(String, InputStream) method is used to upload a file to the FTP server. Before the upload, active mode is chosen via the FTPClient.enterLocalActiveMode() method. However, the FTP server is not able to establish the data channel to the FTP client (for instance because of firewall). The storeFile method blocks and never returns. When I capture the network traffic with Wireshark, I see that there are two responses to the STOR command: the first one indicates that the data channel is going to be established, the second one indicates that the FTP server cannot establish the data channel. However, the storeFile method remains blocked forever, even if I play around with the various timeouts (setSoTimeout, setDefaultTimeout, setControlKeepAliveTimeout, setControlKeepAliveReplyTimeout).",
            "resolved": "2012-07-14",
            "versions": [
                "3.0.1",
                "3.1"
            ],
            "fixVersions": []
        },
        {
            "issue_id": "NET-458",
            "project": "Commons Net",
            "title": "MVSFTPEntryParser.parseSimpleEntry - ArrayIndexOutOfBoundsException",
            "type": "Bug",
            "description": "Line 360 in MVSFTPEntryParser.parseSimpleEntry :\n\n    String name = entry.split(\" \")[0];\n\ngives an ArrayIndexOutOfBoundsException: 0\n\nIt appears to be caused by a partitioned dataset whose members only contain names. No other details (creation date, file type etc).\n\nThis is the method, if it helps:\n\n{code}\nprivate boolean parseSimpleEntry(FTPFile file, String entry) {\n    if (entry != null && entry.length() > 0) {\n        file.setRawListing(entry);\n        String name = entry.split(\" \")[0];           // <--- error occurs here\n        file.setName(name);\n        file.setType(FTPFile.FILE_TYPE);\n        return true;\n    }\n    return false;\n}\n{code}",
            "resolved": "2012-04-13",
            "versions": [
                "3.0.1",
                "3.1"
            ],
            "fixVersions": [
                "3.2"
            ]
        },
        {
            "issue_id": "NET-457",
            "project": "Commons Net",
            "title": "Does commonsnet ftp component connect to a Secure Stratus site?",
            "type": "Bug",
            "description": "This is not a bug. Just a support question.\nI am connecting from a Windows 2003 Server environment, JDK 1.6, commons net 301  to a Stratus FTP secure site. \nThe stratus box, supports a directory delimiter of '>'. I think this is the problem.\nDoes the commons net FTP component support FTP server delimiter of '>'",
            "resolved": "2012-03-27",
            "versions": [
                "3.0.1"
            ],
            "fixVersions": []
        },
        {
            "issue_id": "NET-456",
            "project": "Commons Net",
            "title": "[net] TelnetClient hangs when reader-thread startup delays",
            "type": "Bug",
            "description": "I'm trying to use TelnetClient(commons-net-3.1) with the reader-thread enabled,\n but it sometimes hangs.\n\nI tracked \"__receiveState\", and found that the state sometimes changes to invalid ones.\n\nIn threaded-mode, TelnetInputStream.__read(boolean mayBlock) is normally called only by TelnetInputStream.run().\nBut if the read-thread startup delays, it may also called by TelnetInputStream.read()\nbeacues the value of __threaded is still false.\n\n\nexample of hang-up pattern\n\n1.\n// user-thread\ntelnetClient._connectAction()\nTelnetInputStream._start()\n__thread.start();                 ... try to start read-thread\n\n2.\n// user-thread\nTelnetInputStream.read() ... __threaded is still false, so TelnetInputStream.__read() is called.\n\n3.\n// read-thread starts (before __read() above dosen't end )\nTelnetInputStream.run( ) ... sets __threaded to true, and calls TelnetInputStream.__read()\n\n\n\nI think __threaded flag should be set to true just after __thread.start(),\nnot at the begining of run().\n\n        __thread.start();\n        __threaded = true; // add\n\n\n\nThis problem may related to NET-73\n",
            "resolved": "2012-07-14",
            "versions": [
                "3.1"
            ],
            "fixVersions": [
                "3.2"
            ]
        },
        {
            "issue_id": "NET-454",
            "project": "Commons Net",
            "title": "paths with spaces result in inaccurate file information",
            "type": "Bug",
            "description": "Calling FTPClient.listFiles(String pathname) results in an inaccurate file list being returned. The following test illustrates the issue:\n\n{code:java}\n    @Test\n    public void remoteListFilesFailure() throws Exception {\n\n        FTPClient client = new FTPClient();\n\n        client.connect(REMOTE_SERVER);\n        client.enterLocalPassiveMode();\n        client.login(REMOTE_USERNAME, REMOTE_PASSWORD);\n        client.setFileType(FTP.BINARY_FILE_TYPE);\n\n        int reply = client.getReplyCode();\n        if (!FTPReply.isPositiveCompletion(reply)) {\n            client.disconnect();\n            log.error(\"FTP server refused connection. reply=\" + reply);\n        }\n\n        FTPFile[] rootFiles = client.listFiles(\"78/1295213/0/476312ca9c653ffc6cc8fb6e1649dae6/ModComp PO # 1054.pdf\");\n        Assert.assertEquals(1, rootFiles.length); // <-- fails with rootFiles.length = 0\n    }\n{code}\n",
            "resolved": "2012-03-17",
            "versions": [
                "3.0.1",
                "3.1"
            ],
            "fixVersions": []
        },
        {
            "issue_id": "NET-450",
            "project": "Commons Net",
            "title": "Bug in documentation for FTPClient",
            "type": "Bug",
            "description": "In the Documentation for FTPClient there are some examples\nOne is\n    FTPClient f = new FTPClient();\n    f.connect(server);\n    f.login(username, password);\n    FTPFile[] files = listFiles(directory);\n\nThere is a typo on the last line.\n\nIt should be f.listFiles(directory);\n\nRating this as Minior as any decent Java programmer should work it out.",
            "resolved": "2012-03-23",
            "versions": [
                "3.1"
            ],
            "fixVersions": [
                "3.2"
            ]
        },
        {
            "issue_id": "NET-449",
            "project": "Commons Net",
            "title": "listFiles bug with folder that begins with \"-\"",
            "type": "Bug",
            "description": "FTP Server status:\n\n{code}\nroot@xxx-srv:/data/Library# tree -A\n.\n\u251c\u2500\u2500 -dash\n\u2502   \u251c\u2500\u2500 -dash.txt\n\u2502   \u251c\u2500\u2500 file1.txt\n\u2502   \u2514\u2500\u2500 file2.txt\n\u2514\u2500\u2500 test\n    \u251c\u2500\u2500 file2.txt\n    \u2514\u2500\u2500 file.txt\n{code}\n\nTest code:\n\n{code} \nfinal FTPClient ftp = new FTPClient();\nftp.connect(host, port);\nftp.login(login, pwd);\nSystem.out.println(\"PWD: \" + ftp.printWorkingDirectory());\nfinal FTPFile[] listFiles = ftp.listFiles();\nfor (int i = 0; i < listFiles.length; i++) {\n   System.out.println(\"[\" + i + \"] \" + listFiles[i]);\n}\n\nSystem.out.println(\"Files in /-dash\");\nfinal FTPFile[] listFiles2 = ftp.listFiles(\"/-dash\");\nfor (int i = 0; i < listFiles2.length; i++) {\n   System.out.println(\"[\" + i + \"] \" + listFiles2[i]);\n}\n\nSystem.out.println(\"Files in -dash\");\nfinal FTPFile[] listFiles3 = ftp.listFiles(\"-dash\");\nfor (int i = 0; i < listFiles3.length; i++) {\n   System.out.println(\"[\" + i + \"] \" + listFiles3[i]);\n}\n{code} \n\nresults:\n{code} \nPWD: /\n[0] -dash\n[1] test\nFiles in /-dash\n[0] -dash.txt\n[1] file1.txt\n[2] file2.txt\nFiles in -dash\n[0] -dash\n[1] .\n[2] ..\n[3] test\n{code} \nWhen listing \"-dash\", it list the current directory instead of the destination one.\nIf I do the same test with the folder test, this time it works as expected.",
            "resolved": "2012-07-14",
            "versions": [
                "3.1"
            ],
            "fixVersions": [
                "3.2"
            ]
        },
        {
            "issue_id": "NET-448",
            "project": "Commons Net",
            "title": "Self signed cert or ca not installed on client but FTPS still works",
            "type": "Bug",
            "description": "I am using vsftpd ftp server on centos with our own self signed root ca certificate.\n\nI have not installed the self signed root certificate on the client machine. Neither am I setting the Trust Manager on the FTPSClient object, using X509TrustManager instance pointing to my physical cert file.\n\nBut I am still able to use the FTPSClient bundled in any of the following jar file and send/receive the files.\ncommons-net-2.0.jar \ncommons-net-3.1.jar \ncommons-net-2.0-jdk14.jar (from zehon)\n\nI was expecting that I will have to either install the self signed root ca on the client machine Or set Trust Manager etc.\n\nCan you please explain the behavior? ",
            "resolved": "2012-03-05",
            "versions": [
                "2.0",
                "3.1"
            ],
            "fixVersions": []
        },
        {
            "issue_id": "NET-447",
            "project": "Commons Net",
            "title": "Commons-net version 2.0 jar unable to download files of time stamp 29th February. ",
            "type": "Bug",
            "description": "When FTP Client of commons-net.jar (version 2.0) tries to get the list of files on FTP server then for the files of time stamp date 29th Feb 2012 it returns null value and in turn throws Null pointer Exception. \n\nBecause the files are read in date viz sequence, thus it reads the file names correctly till 28th Feb but as soon as it gets a file of time-stamp date 29th it throws Null Pointer Exception and all the files after that are not read.\n\nAlso its been mentioned in the case mentioned at following url that this issue has been resolved in version 1.5 :\n\nhttps://issues.apache.org/jira/browse/NET-188\n\nThus ideally such solution would have been included in all later versions. We would require a patch to resolve this.\n\nAlso for your information we are using Wicket frame work. Do you forsee any Jar conflict with commons-net version 2.0 in such scenario.\n\nWe are also attaching the Exceptions trace as follows:\n\nERROR [01 Mar 2012 13:37:33] com.nordea.npdb.datafeed.sp.timertasks.DataFeedSpUsStockReportFtpImpl.execute(DataFeedSpUsStockReportFtpImpl.java:48) : Timer_DataFeedSpUsStockReportFtp [FAILED]\njava.lang.NullPointerException\n\tat com.nordea.npdb.bl.facade.DataFeedServiceImpl.saveFtpFetcherFiles(DataFeedServiceImpl.java:108)[NPDB-core-0-SNAPSHOT.jar:]\n\tat sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)[:1.6.0_24]\n\tat sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39)[:1.6.0_24]\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25)[:1.6.0_24]\n\tat java.lang.reflect.Method.invoke(Method.java:597)[:1.6.0_24]\n\tat org.springframework.aop.support.AopUtils.invokeJoinpointUsingReflection(AopUtils.java:309)[spring-aop-3.0.3.RELEASE.jar:3.0.3.RELEASE]\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.invokeJoinpoint(ReflectiveMethodInvocation.java:183)[spring-aop-3.0.3.RELEASE.jar:3.0.3.RELEASE]\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:150)[spring-aop-3.0.3.RELEASE.jar:3.0.3.RELEASE]\n\tat org.springframework.transaction.interceptor.TransactionInterceptor.invoke(TransactionInterceptor.java:110)[spring-tx-3.0.3.RELEASE.jar:3.0.3.RELEASE]\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:172)[spring-aop-3.0.3.RELEASE.jar:3.0.3.RELEASE]\n\tat org.springframework.aop.framework.JdkDynamicAopProxy.invoke(JdkDynamicAopProxy.java:202)[spring-aop-3.0.3.RELEASE.jar:3.0.3.RELEASE]\n\tat $Proxy105.saveFtpFetcherFiles(Unknown Source)[:]\n\tat com.nordea.npdb.datafeed.sp.timertasks.DataFeedSpUsStockReportFtpImpl.execute(DataFeedSpUsStockReportFtpImpl.java:32)[NPDB-core-0-SNAPSHOT.jar:]\n\tat com.nordea.npdb.infrastructure.batch.OldBatchJob.execute(OldBatchJob.java:12)[NPDB-core-0-SNAPSHOT.jar:]\n\tat org.springframework.batch.core.step.tasklet.TaskletStep$ChunkTransactionCallback.doInTransaction(TaskletStep.java:386)[spring-batch-core-2.1.7.RELEASE.jar:]\n\tat org.springframework.transaction.support.TransactionTemplate.execute(TransactionTemplate.java:130)[spring-tx-3.0.3.RELEASE.jar:3.0.3.RELEASE]\n\tat org.springframework.batch.core.step.tasklet.TaskletStep$2.doInChunkContext(TaskletStep.java:264)[spring-batch-core-2.1.7.RELEASE.jar:]\n\tat org.springframework.batch.core.scope.context.StepContextRepeatCallback.doInIteration(StepContextRepeatCallback.java:76)[spring-batch-core-2.1.7.RELEASE.jar:]\n\tat org.springframework.batch.repeat.support.RepeatTemplate.getNextResult(RepeatTemplate.java:367)[spring-batch-infrastructure-2.1.7.RELEASE.jar:]\n\tat org.springframework.batch.repeat.support.RepeatTemplate.executeInternal(RepeatTemplate.java:214)[spring-batch-infrastructure-2.1.7.RELEASE.jar:]\n\tat org.springframework.batch.repeat.support.RepeatTemplate.iterate(RepeatTemplate.java:143)[spring-batch-infrastructure-2.1.7.RELEASE.jar:]\n\tat org.springframework.batch.core.step.tasklet.TaskletStep.doExecute(TaskletStep.java:250)[spring-batch-core-2.1.7.RELEASE.jar:]\n\tat org.springframework.batch.core.step.AbstractStep.execute(AbstractStep.java:195)[spring-batch-core-2.1.7.RELEASE.jar:]\n\tat org.springframework.batch.core.job.SimpleStepHandler.handleStep(SimpleStepHandler.java:135)[spring-batch-core-2.1.7.RELEASE.jar:]\n\tat org.springframework.batch.core.job.flow.JobFlowExecutor.executeStep(JobFlowExecutor.java:61)[spring-batch-core-2.1.7.RELEASE.jar:]\n\tat org.springframework.batch.core.job.flow.support.state.StepState.handle(StepState.java:60)[spring-batch-core-2.1.7.RELEASE.jar:]\n\tat org.springframework.batch.core.job.flow.support.SimpleFlow.resume(SimpleFlow.java:144)[spring-batch-core-2.1.7.RELEASE.jar:]\n\tat org.springframework.batch.core.job.flow.support.SimpleFlow.start(SimpleFlow.java:124)[spring-batch-core-2.1.7.RELEASE.jar:]\n\tat org.springframework.batch.core.job.flow.FlowJob.doExecute(FlowJob.java:135)[spring-batch-core-2.1.7.RELEASE.jar:]\n\tat org.springframework.batch.core.job.AbstractJob.execute(AbstractJob.java:281)[spring-batch-core-2.1.7.RELEASE.jar:]\n\tat com.nordea.npdb.infrastructure.batch.NpdbJobLauncherImpl$2.run(NpdbJobLauncherImpl.java:116)[NPDB-core-0-SNAPSHOT.jar:]\n\tat org.springframework.core.task.SyncTaskExecutor.execute(SyncTaskExecutor.java:48)[spring-core-3.0.3.RELEASE.jar:3.0.3.RELEASE]\n\tat com.nordea.npdb.infrastructure.batch.NpdbJobLauncherImpl.run(NpdbJobLauncherImpl.java:110)[NPDB-core-0-SNAPSHOT.jar:]\n\tat com.nordea.npdb.infrastructure.batch.BatchFacadeImpl.runJobUsingCurrentThread(BatchFacadeImpl.java:83)[NPDB-core-0-SNAPSHOT.jar:]\n\tat sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)[:1.6.0_24]\n\tat sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39)[:1.6.0_24]\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25)[:1.6.0_24]\n\tat java.lang.reflect.Method.invoke(Method.java:597)[:1.6.0_24]\n\tat org.springframework.aop.support.AopUtils.invokeJoinpointUsingReflection(AopUtils.java:309)[spring-aop-3.0.3.RELEASE.jar:3.0.3.RELEASE]\n\tat org.springframework.aop.framework.JdkDynamicAopProxy.invoke(JdkDynamicAopProxy.java:196)[spring-aop-3.0.3.RELEASE.jar:3.0.3.RELEASE]\n\tat $Proxy136.runJobUsingCurrentThread(Unknown Source)[:]\n\tat com.nordea.npdb.infrastructure.scheduler.SchedulerServiceImpl$SchedulerThread$1.doWithinTimingWithoutResult(SchedulerServiceImpl.java:509)[NPDB-core-0-SNAPSHOT.jar:]\n\tat com.nordea.pubdb.timer.TimingCallbackWithoutResult.doWithinTiming(TimingCallbackWithoutResult.java:6)[NPDB-core-0-SNAPSHOT.jar:]\n\tat com.nordea.pubdb.timer.TimingTemplateImpl.execute(TimingTemplateImpl.java:105)[NPDB-core-0-SNAPSHOT.jar:]\n\tat com.nordea.npdb.infrastructure.scheduler.SchedulerServiceImpl$SchedulerThread.run(SchedulerServiceImpl.java:502)[NPDB-core-0-SNAPSHOT.jar:]\nERROR [01 Mar 2012 13:37:38] org.springframework.batch.core.step.AbstractStep.execute(AbstractStep.java:212) : Encountered an error executing the step\njava.lang.RuntimeException: Timer_DataFeedSpUsStockReportFtp [FAILED]\n\tat com.nordea.npdb.datafeed.sp.timertasks.DataFeedSpUsStockReportFtpImpl.execute(DataFeedSpUsStockReportFtpImpl.java:49)[NPDB-core-0-SNAPSHOT.jar:]\n\tat com.nordea.npdb.infrastructure.batch.OldBatchJob.execute(OldBatchJob.java:12)[NPDB-core-0-SNAPSHOT.jar:]\n\tat org.springframework.batch.core.step.tasklet.TaskletStep$ChunkTransactionCallback.doInTransaction(TaskletStep.java:386)[spring-batch-core-2.1.7.RELEASE.jar:]\n\tat org.springframework.transaction.support.TransactionTemplate.execute(TransactionTemplate.java:130)[spring-tx-3.0.3.RELEASE.jar:3.0.3.RELEASE]\n\tat org.springframework.batch.core.step.tasklet.TaskletStep$2.doInChunkContext(TaskletStep.java:264)[spring-batch-core-2.1.7.RELEASE.jar:]\n\tat org.springframework.batch.core.scope.context.StepContextRepeatCallback.doInIteration(StepContextRepeatCallback.java:76)[spring-batch-core-2.1.7.RELEASE.jar:]\n\tat org.springframework.batch.repeat.support.RepeatTemplate.getNextResult(RepeatTemplate.java:367)[spring-batch-infrastructure-2.1.7.RELEASE.jar:]\n\tat org.springframework.batch.repeat.support.RepeatTemplate.executeInternal(RepeatTemplate.java:214)[spring-batch-infrastructure-2.1.7.RELEASE.jar:]\n\tat org.springframework.batch.repeat.support.RepeatTemplate.iterate(RepeatTemplate.java:143)[spring-batch-infrastructure-2.1.7.RELEASE.jar:]\n\tat org.springframework.batch.core.step.tasklet.TaskletStep.doExecute(TaskletStep.java:250)[spring-batch-core-2.1.7.RELEASE.jar:]\n\tat org.springframework.batch.core.step.AbstractStep.execute(AbstractStep.java:195)[spring-batch-core-2.1.7.RELEASE.jar:]\n\tat org.springframework.batch.core.job.SimpleStepHandler.handleStep(SimpleStepHandler.java:135)[spring-batch-core-2.1.7.RELEASE.jar:]\n\tat org.springframework.batch.core.job.flow.JobFlowExecutor.executeStep(JobFlowExecutor.java:61)[spring-batch-core-2.1.7.RELEASE.jar:]\n\tat org.springframework.batch.core.job.flow.support.state.StepState.handle(StepState.java:60)[spring-batch-core-2.1.7.RELEASE.jar:]\n\tat org.springframework.batch.core.job.flow.support.SimpleFlow.resume(SimpleFlow.java:144)[spring-batch-core-2.1.7.RELEASE.jar:]\n\tat org.springframework.batch.core.job.flow.support.SimpleFlow.start(SimpleFlow.java:124)[spring-batch-core-2.1.7.RELEASE.jar:]\n\tat org.springframework.batch.core.job.flow.FlowJob.doExecute(FlowJob.java:135)[spring-batch-core-2.1.7.RELEASE.jar:]\n\tat org.springframework.batch.core.job.AbstractJob.execute(AbstractJob.java:281)[spring-batch-core-2.1.7.RELEASE.jar:]\n\tat com.nordea.npdb.infrastructure.batch.NpdbJobLauncherImpl$2.run(NpdbJobLauncherImpl.java:116)[NPDB-core-0-SNAPSHOT.jar:]\n\tat org.springframework.core.task.SyncTaskExecutor.execute(SyncTaskExecutor.java:48)[spring-core-3.0.3.RELEASE.jar:3.0.3.RELEASE]\n\tat com.nordea.npdb.infrastructure.batch.NpdbJobLauncherImpl.run(NpdbJobLauncherImpl.java:110)[NPDB-core-0-SNAPSHOT.jar:]\n\tat com.nordea.npdb.infrastructure.batch.BatchFacadeImpl.runJobUsingCurrentThread(BatchFacadeImpl.java:83)[NPDB-core-0-SNAPSHOT.jar:]\n\tat sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)[:1.6.0_24]\n\tat sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39)[:1.6.0_24]\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25)[:1.6.0_24]\n\tat java.lang.reflect.Method.invoke(Method.java:597)[:1.6.0_24]\n\tat org.springframework.aop.support.AopUtils.invokeJoinpointUsingReflection(AopUtils.java:309)[spring-aop-3.0.3.RELEASE.jar:3.0.3.RELEASE]\n\tat org.springframework.aop.framework.JdkDynamicAopProxy.invoke(JdkDynamicAopProxy.java:196)[spring-aop-3.0.3.RELEASE.jar:3.0.3.RELEASE]\n\tat $Proxy136.runJobUsingCurrentThread(Unknown Source)[:]\n\tat com.nordea.npdb.infrastructure.scheduler.SchedulerServiceImpl$SchedulerThread$1.doWithinTimingWithoutResult(SchedulerServiceImpl.java:509)[NPDB-core-0-SNAPSHOT.jar:]\n\tat com.nordea.pubdb.timer.TimingCallbackWithoutResult.doWithinTiming(TimingCallbackWithoutResult.java:6)[NPDB-core-0-SNAPSHOT.jar:]\n\tat com.nordea.pubdb.timer.TimingTemplateImpl.execute(TimingTemplateImpl.java:105)[NPDB-core-0-SNAPSHOT.jar:]\n\tat com.nordea.npdb.infrastructure.scheduler.SchedulerServiceImpl$SchedulerThread.run(SchedulerServiceImpl.java:502)[NPDB-core-0-SNAPSHOT.jar:]",
            "resolved": "2012-03-23",
            "versions": [
                "2.0"
            ],
            "fixVersions": [
                "2.0"
            ]
        },
        {
            "issue_id": "NET-445",
            "project": "Commons Net",
            "title": "The method listFiles in FTPClient can not list these files which upload to FTP Server in Feb, 29 2012",
            "type": "Bug",
            "description": "Before Feb, 29 2012, the method listFiles() in FTPClient.class can list all files in FTP Server. But today, for any file which be uploaded to FTP Server in Feb, 29 2012, this API can not list these files. When I change the date of FTP Server(it is not Feb, 29 2012), this API can list all files in FTP Server also. ",
            "resolved": "2012-07-14",
            "versions": [
                "3.0.1"
            ],
            "fixVersions": [
                "3.1"
            ]
        },
        {
            "issue_id": "NET-444",
            "project": "Commons Net",
            "title": "FTPTimestampParserImpl fails to parse future dates correctly on Feb 28th in a leap year",
            "type": "Bug",
            "description": "CI tests reported the following test failure on Feb 28th, 2012 (a leap year):\n\nFailed tests:   testParseTimestampWithSlop(org.apache.commons.net.ftp.parser.FTPTimestampParserImplTest): test.slop.roll.back.year expected:<1> but was:<0>\n\nThe cause is to do with how lenient future dates are handled.",
            "resolved": "2012-02-29",
            "versions": [
                "3.1"
            ],
            "fixVersions": [
                "3.2"
            ]
        },
        {
            "issue_id": "NET-442",
            "project": "Commons Net",
            "title": "StringIndexOutOfBoundsException: String index out of range: -1 if server respond with root is current directory",
            "type": "Bug",
            "description": "I've an ftp server that at the pwd request responds with |257  root is current directory.| without any double quotes present and the lib gives up with this exception:\n\njava.lang.StringIndexOutOfBoundsException: String index out of range: -1\n\tat java.lang.String.substring(String.java:1949)\n\tat org.apache.commons.net.ftp.FTPClient.__parsePathname(FTPClient.java:469)\n\tat org.apache.commons.net.ftp.FTPClient.printWorkingDirectory(FTPClient.java:2374)\n\nProbably it's only needed a check in __parsePathname\n\nprivate String __parsePathname(String reply)\n    {\n        int begin, end;\n\n        begin = reply.indexOf('\"') + 1;\n        end = reply.indexOf('\"', begin);\n        \n        if (begin == -1 && end == -1) \n        {\n            return reply;\n        }\n\n        return reply.substring(begin, end);\n    }",
            "resolved": "2012-03-02",
            "versions": [
                "3.0.1"
            ],
            "fixVersions": [
                "3.2"
            ]
        },
        {
            "issue_id": "NET-441",
            "project": "Commons Net",
            "title": "mlistDir doc should be \"MLSD\" not \"MSLD\"",
            "type": "Bug",
            "description": "In FTPClient.class \"Generate a directory listing for the current directory using the MSLD command.\" should use \"MLSD\" not \"MSLD\".",
            "resolved": "2012-02-11",
            "versions": [
                "3.1"
            ],
            "fixVersions": [
                "3.1"
            ]
        },
        {
            "issue_id": "NET-440",
            "project": "Commons Net",
            "title": "library throws an exception in case the SYST command is not known or the result is not known by the implementation",
            "type": "Bug",
            "description": "The FTP client uses the SYST command to determine the list output.\nThis can fail in two ways:\n\n- a ParserInitializationException in case the response of the server is not known by apache.\n\n- When the response to SYST command is 502 command unknown (the command is optional after all - http://www.ietf.org/rfc/rfc959.txt) the client throws an IOException.\n\nCan't it just default to UNIX for these type of ftp servers?",
            "resolved": "2012-02-07",
            "versions": [
                "3.0.1"
            ],
            "fixVersions": [
                "3.1"
            ]
        },
        {
            "issue_id": "NET-438",
            "project": "Commons Net",
            "title": "POP3Client.capa() should call POP3Client.getAdditionalReply()",
            "type": "Bug",
            "description": "As CAPA response contains multiple lines as response its neede to call getAdditionalReply() to consume all lines. Beside this it would make sense to move capa() from ExtendedPOP3Client to POP3Client. If you want to keep it in ExtendedPOP3Client it really would make sense to add all constructors of POP3SClient to allow also the usage with STARTTLS and POP3S",
            "resolved": "2012-01-31",
            "versions": [
                "3.0.1"
            ],
            "fixVersions": [
                "3.1"
            ]
        },
        {
            "issue_id": "NET-437",
            "project": "Commons Net",
            "title": "TelnetInputStream doesn't support non-blocking IO when reader thread is not enabled",
            "type": "Bug",
            "description": "When the telnet client is used without allowing it to create it's own reader thread (i.e. setReaderThread(false)) then the TelnetInputStream.available() method will always return 0 bytes available.  This makes non-blocking IO impossible as you need to actualy call read to get the data without knowing if it will block or not.\n\nThis fix to the available method in org.apache.commons.net.telnet.TelnetInputStream, seems to fix the issue, and should work for reader threads as well:\n\n{noformat} \n    @Override\n    public int available() throws IOException\n    {\n        // Critical section because run() may change __bytesAvailable\n        synchronized (__queue)\n        {\n        \tif (__bytesAvailable == 0 && !__threaded) {\n        \t\treturn super.available();\n        \t} else {\n        \t\treturn __bytesAvailable;\n        \t}\n        }\n    }\n{noformat} \n",
            "resolved": "2012-01-10",
            "versions": [
                "3.0.1"
            ],
            "fixVersions": [
                "3.1"
            ]
        },
        {
            "issue_id": "NET-434",
            "project": "Commons Net",
            "title": "FTPClient  fails to close local listener socket when command socket channel encounter \"ReadTimeoutException\"",
            "type": "Bug",
            "description": "FtpClient connect to an ftp server and login successfully, call ftpClient.listFiles() method to list remote directory,\nand ftp server is vsftp and use active mode.\non commons-net-3.0.1 class org.apache.commons.net.ftp.FTPClient at line 680 :  \n   if (!FTPReply.isPositivePreliminary(sendCommand(command, arg)))\n            {\n                server.close();\n                return null;\n            }\ncall sendCommand throw an exception blow:\n\njava.net.SocketTimeoutException: Read timed out\n        at java.net.SocketInputStream.socketRead0(Native Method)\n        at java.net.SocketInputStream.read(SocketInputStream.java:129)\n        at sun.nio.cs.StreamDecoder.readBytes(StreamDecoder.java:264)\n        at sun.nio.cs.StreamDecoder.implRead(StreamDecoder.java:306)\n        at sun.nio.cs.StreamDecoder.read(StreamDecoder.java:158)\n        at java.io.InputStreamReader.read(InputStreamReader.java:167)\n        at java.io.BufferedReader.fill(BufferedReader.java:136)\n        at java.io.BufferedReader.readLine(BufferedReader.java:299)\n        at java.io.BufferedReader.readLine(BufferedReader.java:362)\n        at org.apache.commons.net.ftp.FTP.__getReply(FTP.java:299)\n        at org.apache.commons.net.ftp.FTP.sendCommand(FTP.java:500)\n\n\nclass org.apache.commons.net.ftp.FTPClient at line 648 :  ServerSocket server = _serverSocketFactory_.createServerSocket(getActivePort(), 1, getHostAddress());\n\nthe local listener socket \"server\" is not close when sendCommand method throws exception.\n",
            "resolved": "2012-01-05",
            "versions": [
                "2.2",
                "3.0.1"
            ],
            "fixVersions": [
                "3.1"
            ]
        },
        {
            "issue_id": "NET-432",
            "project": "Commons Net",
            "title": "ftp downloads wrong a video",
            "type": "Bug",
            "description": "i got a program that download a reproduct a file from ftp, but the program dont download the video fine, when u try to reproduct with my program or with any reproductor, the file is damager.\n\nsorry for my english i speak spanish",
            "resolved": "2011-12-20",
            "versions": [
                "3.0.1"
            ],
            "fixVersions": []
        },
        {
            "issue_id": "NET-431",
            "project": "Commons Net",
            "title": "Site report list links to source and test xref, but they are not present",
            "type": "Bug",
            "description": "Something must have gone wrong with site generation or upload, because the xrefs are referenced but not present.\n\nThis JIRA is to ensure these are checked for the next release.",
            "resolved": "2012-02-29",
            "versions": [
                "3.0.1"
            ],
            "fixVersions": [
                "3.1"
            ]
        },
        {
            "issue_id": "NET-430",
            "project": "Commons Net",
            "title": "Can't login to POP3S Server using explicit mode",
            "type": "Bug",
            "description": "Login fails if using explizit mode as the reader and writer remain the same after STLS command.\nTake a look at https://issues.apache.org/jira/browse/NET-421 - it's nearly the same bug.\n\nBugfix for POP3SClient.java:\n{noformat}private void performSSLNegotiation() throws IOException\n{\n   ...    \n    _reader = new CRLFLineReader(new InputStreamReader(_input_, __DEFAULT_ENCODING));\n    __writer = new BufferedWriter(new OutputStreamWriter(_output_, __DEFAULT_ENCODING));\n}{noformat} \n\nTherefore you have to change some variables in POP3.java from private to protected.\n",
            "resolved": "2012-01-05",
            "versions": [
                "3.0.1"
            ],
            "fixVersions": [
                "3.1"
            ]
        },
        {
            "issue_id": "NET-429",
            "project": "Commons Net",
            "title": "FTPClient storeFile method creates a file of 0 bytes",
            "type": "Bug",
            "description": "Using the FTPClient object in commons net the way it is shown in the Javadoc results in a file that is 0 bytes on the remote host. When you get to the storeFile(..) method, it waits for about 20 seconds before it returns the error message shown to System.out.\n\nI've tried a number of different things\n\n1. commons-net version 3.0.1 (supposedly had the bug fix for this, but didn't work for me)\n2. [boolean] storeFile (String, InputStream)\n3. [OutputStream] storeFile (String)\n4. commons-net version 1.4 (still no dice)\n5. ftp.connect(server) and ftp.connect(server, 21)\n\nHere's my code:\n{noformat}\n\t\tboolean error = false;\n\t\tFTPClient ftp = new FTPClient();\n\t\tInputStream localStream = null;\n\t\ttry {\n\t\t\tint reply;\n\t\t\tString server = \"ftp.myserver.com\";\n\t\t\tftp.connect(server, 21);\n\t\t\tSystem.out.println(\"Connected to \" + server + \".\");\n\t\t\tSystem.out.print(ftp.getReplyString());\n\n\t\t\t// After connection attempt, you should check the reply code to\n\t\t\t// verify\n\t\t\t// success.\n\t\t\treply = ftp.getReplyCode();\n\n\t\t\tif (!FTPReply.isPositiveCompletion(reply)) {\n\t\t\t\tftp.disconnect();\n\t\t\t\tSystem.err.println(\"FTP server refused connection.\");\n\t\t\t\tSystem.exit(1);\n\t\t\t}\n\t\t\tboolean wasSuccessful = ftp.login(\"user\", \"password\");\n\t\t\tif (!wasSuccessful) {\n\t\t\t\tSystem.err.println(\"Login unsuccessful\");\n\t\t\t\tSystem.exit(1);\n\t\t\t}\n\t\t\t\n\t\t\tSystem.out.println(\"login successful\");\n\t\t\tString localPath=\"C:/projects/TEMP/uga.html\";\n\t\t\tFile localFile = new File(localPath);\n\t\t\t\n\t\t\tif (localFile.exists()) {\n\t\t\t\tlocalStream = new BufferedInputStream(new FileInputStream(localPath));\n\t\t\t\twasSuccessful = ftp.storeFile(\"/offline3/uga.html\", localStream);\n\t\t\t\tif (!wasSuccessful) {\n\t\t\t\t\tSystem.err.println(\"could not store file: \" + localPath);\n\t\t\t\t\tSystem.exit(1);\n\t\t\t\t} else {\n\t\t\t\t\tSystem.out.println(\"Successfully saved file!\");\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t\n\t\t\t// transfer files\n\t\t\tftp.logout();\n\t\t} catch (IOException e) {\n\t\t\terror = true;\n\t\t\te.printStackTrace();\n\t\t} finally {\n\t\t\tif (ftp.isConnected()) {\n\t\t\t\ttry {\n\t\t\t\t\tftp.disconnect();\n\t\t\t\t} catch (IOException ioe) {\n\t\t\t\t\t// do nothing\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (localStream != null) {\n\t\t\t\ttry {\n\t\t\t\t\tlocalStream.close();\n\t\t\t\t} catch (IOException e) {\n\t\t\t\t}\n\t\t\t}\n\t\t\tSystem.exit(error ? 1 : 0);\n\t}\n{noformat}\n\nHere's my System.out:\n\n{noformat}\nConnected to ftp.harmari.com.\n220---------- Welcome to Pure-FTPd [privsep] [TLS] ----------\n220-You are user number 16 of 500 allowed.\n220-Local time is now 05:59. Server port: 21.\n220-This is a private system - No anonymous login\n220 You will be disconnected after 3 minutes of inactivity.\nlogin successful\ncould not store file: C:/projects/TEMP/uga.html\n\n{noformat}\n\nMore background:\nFileZilla works on my machine\nI've also tried the primitive Sun API, and it works perfectly:\n{noformat}\n\t\ttry {\n\t\t\turl = new URL(\"ftp://username:password@ftp.myserver.com/offline3/uga.html;type=i\");\n\t\t\tURLConnection urlc = url.openConnection();\n\t\t\tOutputStream os = urlc.getOutputStream(); // To upload\n\t\t\t\n\t\t\tString localPath = \"C:/projects/TEMP/uga.html\";\n\t\t\tInputStream bis = new BufferedInputStream(new FileInputStream(localPath));\n\t\t\t\n\t\t\tbyte[] bstr = new byte[1024];\n\t\t\twhile (bis.read(bstr) > 0) {\n\t\t\t\tos.write(bstr);\t\t\t\t\n\t\t\t}\n\t\t} catch (MalformedURLException e) {\n\t\t\t// TODO Auto-generated catch block\n\t\t\te.printStackTrace();\n\t\t} catch (IOException e) {\n\t\t\t// TODO Auto-generated catch block\n\t\t\te.printStackTrace();\n\t\t}\n{noformat}\n",
            "resolved": "2012-07-14",
            "versions": [
                "1.4",
                "3.0.1"
            ],
            "fixVersions": []
        },
        {
            "issue_id": "NET-428",
            "project": "Commons Net",
            "title": "SubnetUtils throws ArrayIndexOutOfBoundsException for new SubnetUtils( \"1.2.3.4/32\" ).getInfo().getAllAddresses()",
            "type": "Bug",
            "description": "new SubnetUtils( \"1.2.3.4/32\" ).getInfo().getAllAddresses() throws\n\nException in thread \"main\" java.lang.ArrayIndexOutOfBoundsException: 0\n$SubnetInfo.getAllAddresses(SubnetUtils.java:166)\n\nSimilarly for /31\n\nIt would make more sense to return an empty array.",
            "resolved": "2011-11-01",
            "versions": [
                "3.0.1"
            ],
            "fixVersions": [
                "3.1"
            ]
        },
        {
            "issue_id": "NET-426",
            "project": "Commons Net",
            "title": "FTPS: Hook to customize _openDataConnection_ SSLSocket before startHandshake() is called",
            "type": "Bug",
            "description": "Currently in FTPSClient class, there is protected _openDataConnection_ method, which create SSLSocket for data connection.  But there is no hook to customize the SSLSocket before startHandshake is called.  \n\nI need to know the remote host ip and port, which i can get for socket, and do custom setup to try to reuse SSL sessions from control connection socket.  Since the socket factory uses createSocket() method, I can't just use custom socket factory since I don't know the host and port.  I can't just override the _openDataConnection_() method in my class since that will call the startHandshake().  \n\nSo it would be nice if you can provide hook, much like _connectAction_(), but for data connection before handshake is started.  You can pass the new data socket as argument to this hook method so one can get remote host and port information.  ",
            "resolved": "2012-08-18",
            "versions": [
                "3.0.1"
            ],
            "fixVersions": [
                "3.1",
                "3.2"
            ]
        },
        {
            "issue_id": "NET-424",
            "project": "Commons Net",
            "title": "FTPSClient.isConnected() does not return false after server shutdown",
            "type": "Bug",
            "description": "1. Using the FTPSClient\n2. connect to a remote server\n3. begin sending files\n4. manually shut down the server\n5. Code catches error for the file that is being sent.\n6. Code tests to see if the connection is still good (using FTPSClient.isConnected()), this returns true.\n7. Try to send next file, all kinds of failures.\n",
            "resolved": "2012-01-05",
            "versions": [
                "3.0.1"
            ],
            "fixVersions": []
        },
        {
            "issue_id": "NET-423",
            "project": "Commons Net",
            "title": "FTPClient.storeFile might fail when ControlKeepAliveTimeout is set",
            "type": "Bug",
            "description": "When setting ControlKeepAliveTimeout. FTPClient.__storeFile might fail when waiting for ack on ControlConnection.\n\nCurrent code:\n{noformat}\n        // Get the transfer response\n        boolean ok = completePendingCommand();\n        if (csl != null) {\n            csl.cleanUp(); // fetch any outstanding keepalive replies\n        }\n{noformat}\nWhile CSL is active, the ControlConnection timeout is set to 1 sec., if using default. This timeout value doesn't leave much room in terms of network/end point latency.\n\nReplacing the code fragment above with the following fragment probably solves the problem (If proper ControlConnection timeout value is set):\n{noformat}\n        if (csl != null) {\n            csl.cleanUp(); // fetch any outstanding keepalive replies\n        }\n        // Get the transfer response\n        boolean ok = completePendingCommand();\n{noformat}\n\nOne workaround is to set ControlKeepAliveReplyTimeout to a higher value.\n",
            "resolved": "2012-01-05",
            "versions": [
                "3.0.1"
            ],
            "fixVersions": [
                "3.1"
            ]
        },
        {
            "issue_id": "NET-422",
            "project": "Commons Net",
            "title": "FTP using HTTP proxy not working",
            "type": "Bug",
            "description": "I know that FTPHTTPClient is experimental, but - I have discovered 2 bugs in it:\n\n- response from proxy is taken only if username and password are set\n- username and response are not correctly provided to Base64.encode() method\n\nI will attach a patch with proposed fix, feel free to apply it if you think it's correct.\n\nOne more note: I'm not expert in this area so sorry if this question is nonsense but - shouldn't it be possible to connect to the encrypted FTP over HTTP proxy as well? Or am I completely wrong and this can't be ever possible.\n\nThanks.\n",
            "resolved": "2012-01-10",
            "versions": [
                "3.0.1"
            ],
            "fixVersions": [
                "3.1"
            ]
        },
        {
            "issue_id": "NET-421",
            "project": "Commons Net",
            "title": "Problem connecting to TLS/SSL SMTP server using explicit mode",
            "type": "Bug",
            "description": "Just tried to send an email through gmail servers by doing the following:\n{code}AuthenticatingSMTPClient client = new AuthenticatingSMTPClient();\nclient.connect(\"smtp.gmail.com\", 587); // reply: 220 220 mx.google.com ESMTP\nclient.login(); // reply: 250 250 mx.google.com at your service\nclient.execTLS(); // reply: 220 2.0.0 Ready to start TLS\nclient.auth(AUTH_METHOD.PLAIN, username, password); // exception\n...{code}\n\nUnfortunality after execTLS() I get a MalformedServerReplyException. I looked at the SMTPSClient source code and found out that the reader/writer are wrong after execTLS() got called. The performSSLNegotiation() method sets _input_ and _output_ to the new input/output streams from SSLSocket, but the reader/writer are still pointing to the values set inside _connectAction_().\n\nPossible fix for this issue:\n{code}public boolean execTLS() throws SSLException, IOException\n{\n\tif (!SMTPReply.isPositiveCompletion(sendCommand(\"STARTTLS\")))\n\t{\n\t\treturn false;\n\t\t//throw new SSLException(getReplyString());\n\t}\n\tperformSSLNegotiation();\n\t_reader = new CRLFLineReader(new InputStreamReader(_input_, encoding));\n    \t_writer = new BufferedWriter(new OutputStreamWriter(_output_, encoding));\n\treturn true;\n}{code}",
            "resolved": "2011-08-30",
            "versions": [
                "3.0",
                "3.0.1"
            ],
            "fixVersions": [
                "3.1"
            ]
        },
        {
            "issue_id": "NET-420",
            "project": "Commons Net",
            "title": "Retrieving files from AS400 FTP systems returns null timestamps in FTPFile.getTimestamp",
            "type": "Bug",
            "description": "We are trying to list files from AS400 systems and retrieve the timestamps from these files using the following code:\n\nFTPClientConfig conf = new FTPClientConfig(FTPClientConfig.SYST_AS400);\nconf.setDefaultDateFormatStr(\"MM/dd/yy HH:mm:ss\");\nftpClient.configure(conf); \nftpClient.connect(hostName);\nFTPFile[] file = ftpClient.listFiles(remoteFileName);\nCalendar timeStamp = files[0].getTimestamp();\n\ntimeStamp returned is always null.\nI have also tried various setting other parsers.. but that also does not work:\nFTPListParseEngine engine = ftpClient.initiateListParsing(\"org.apache.commons.net.ftp.parser.OS400FTPEntryParser\",remoteFileName);\nFTPFile[] files = engine.getNext(25);  \n\nThe LIST command which is used internally in the FTPClient retrieves the timestamps successfully. However after parsing the FTPFile has a null value for the timestamp field.\n\nI tried the latest commons net 3.0.1 and the problem still exists.\n\nPlease help us fix this problem. It is critical to us.",
            "resolved": "2012-01-05",
            "versions": [
                "2.0",
                "3.0.1"
            ],
            "fixVersions": []
        },
        {
            "issue_id": "NET-418",
            "project": "Commons Net",
            "title": "File truncated when transfer on ftp",
            "type": "Bug",
            "description": "File after transfer is truncated.\nOriginal file has a size of 17 172 261 bytes  and file after transfer 17 170 762 bytes.",
            "resolved": "2011-08-09",
            "versions": [
                "3.0.1"
            ],
            "fixVersions": []
        },
        {
            "issue_id": "NET-417",
            "project": "Commons Net",
            "title": "org.apache.commons.net.ftpFTPClient, file will not be totally transferred.",
            "type": "Bug",
            "description": "If I use this ftp.storeFile(f.getName(), stream)  to transfer file to the FTP Server. After the function returned the file will be partially sent. \nE.g. If the file has 1025 bytes, only 1024 bytes will be sent while if the file has 2050 bytes, only 2048 bytes will be sent.\nThat's because the default buffer size is 1024, each time 1024 bytes of file content will be sent to the FTP server. But stream.flush() is not called at the end of each transfer. Finally, socket stream to FTP server will be closed before the \nlast transmission and the last frame of data, which may be less than 1024, will be left unsent.\n\nMy way of fixing this BUG: Change the content of method FtpClient.__storeFile(), change the last parameter for calling Util.copyStream() to 'true'.\n",
            "resolved": "2011-06-15",
            "versions": [
                "3.0"
            ],
            "fixVersions": []
        },
        {
            "issue_id": "NET-414",
            "project": "Commons Net",
            "title": "Apache Commons TFTP does not reject request replies that originate from a control port.",
            "type": "Bug",
            "description": "When a TFTP request response arrives that incorrectly specifies its source port as the control port, the request should be rejected with an error code 5 (TFTPErrorPacket.UNKNOWN_TID) and suggested text \"INCORRECT SOURCE PORT\". \n\nThis can happen when an incorrectly written TFTP server replies to a request from a control socket instead of building a new socket that attaches to an ephemeral port.\n\nNote 1: The expected response from a read request is a DATA packet. The expected response from a write request is an ACK packet.\n\nNote 2: The control port is implementation specific and not always port 69 (as defined by IANA).",
            "resolved": "2017-02-09",
            "versions": [
                "2.2",
                "3.0"
            ],
            "fixVersions": [
                "3.6"
            ]
        },
        {
            "issue_id": "NET-413",
            "project": "Commons Net",
            "title": "FtpClient.storeFile(), last packet data loss bug",
            "type": "Bug",
            "description": "When I upload some jpeg files to FTP server, a few files have smaller size than original files.\n\nIn the server, uploaded files size are 1024 * n\n\nSo I changed org.apache.commons.net.ftp.FTPClient.java (line number 570, parameter flush), 'false' to 'true'\n\nAnd it solved...\n\nPlease check it...",
            "resolved": "2011-06-04",
            "versions": [
                "3.0"
            ],
            "fixVersions": []
        },
        {
            "issue_id": "NET-412",
            "project": "Commons Net",
            "title": "Apache Commons TFTP implementation subject to Sorcerer's Apprentice Syndrome",
            "type": "Bug",
            "description": "This is regarding the org.apache.commons.net.tftp.TFTPClient class.\n\nIn the sendFile() method, when a duplicate TFTP ACK is received, the \"if (lastBlock == block)\" section of code fails and control moves to the \"else\" statement. The else block checks to see if the ACK is for the previous DATA packet, and if so, sends control back to the _sendPacket label where the DATA packet is resent.\n\nThis is in direct violation of Sorcerer's Apprentice Syndrome as defined in RFC 1123 section 4.2.3.1:\n\n\"the sender (i.e., the side originating the DATA packets) must never resend the current DATA packet on receipt of a duplicate ACK\"\n\nThe proper else block would look something like this:\n\n{noformat}\n{\n    continue _receivePacket;\n}\n{noformat}\n\nThis enables the client to ignore the duplicated ACK and listen for ACK+1. If ACK+1 never comes in, the listener should timeout and attempt to resend the current data packet. As described in NET-410, the TFTP client also does not properly handle re-transmits either. It is recommended that this issue and NET-410 be implemented in tandem.\n\n\n\n",
            "resolved": "2012-01-10",
            "versions": [
                "2.2",
                "3.0"
            ],
            "fixVersions": [
                "3.1"
            ]
        },
        {
            "issue_id": "NET-411",
            "project": "Commons Net",
            "title": "FTPClient.storeFile transfers zero bytes",
            "type": "Bug",
            "description": "When I try to upload a file to an FTP server via org.apache.commons.net.ftp.FTPClient.storeFile(String, ImputStream), everything seems to work well. The method returns true, the reply string seems to be OK, I also see in the FTP server that there was a successful transfer. However, zero bytes are transfered, although the ByteArrayInputStream used as the second argument has some data (some hundreds of bytes). When I capture the network traffic with Wireshark, I also see that everything seems to be OK, but the data connection actually transfers no data. Immediately after the TCP handshake, the client closes the connection with FIN. I tried to use a CopyStreamListener to see what's going on - it reports successful transfer of the expected number of bytes. When I perform the same test with Commons Net 2.2 instead of Commons Net 3.0, it works properly - my data gets uploaded, and I get the same OK responses as with 3.0. When switching between 2.2 and 3.0, I do not compile anything.",
            "resolved": "2011-05-27",
            "versions": [
                "3.0"
            ],
            "fixVersions": []
        },
        {
            "issue_id": "NET-410",
            "project": "Commons Net",
            "title": "Apache Commons TFTP does not handle RFC 783 retransmits.",
            "type": "Bug",
            "description": "org.apache.commons.net.tftp.TFTPClient\n\nWhen a packet fails to be received, the looping logic in TFTPClient contains an unlabeled \"continue\" in the TFTPTimeout blocks. This causes TFTPClient to go back to the listening state in the innermost loop, rather than the _sendPacket label in the outermost loop (which will cause a resend of the missing packet).\n\nThis issue should be resolved before implementing NET-412.",
            "resolved": "2012-01-10",
            "versions": [
                "2.2",
                "3.0"
            ],
            "fixVersions": [
                "3.1"
            ]
        },
        {
            "issue_id": "NET-409",
            "project": "Commons Net",
            "title": "FTPClient truncates file (storeFile method)",
            "type": "Bug",
            "description": "Functionality works fine on commons-net-2.2.  Error occurred after upgrading library to commons-net-3.0 version.  Sending a file from Windows 7 to CentOS/Linux using FTPClient storeFile method results in truncation of files over 2k in size.  Rolling back upgrade to commons-net-2.2 version fixes problem.",
            "resolved": "2011-05-23",
            "versions": [
                "3.0"
            ],
            "fixVersions": [
                "3.0.1"
            ]
        },
        {
            "issue_id": "NET-404",
            "project": "Commons Net",
            "title": "FTPSSocketFactory does not override createSocket(); causes java.net.SocketException: Unconnected sockets not implemented",
            "type": "Bug",
            "description": "Adding connect timeout for NET-399 changed the code to use socketFactory.createSocket() instead of createSocket(host, port).\n\nAs FTPSSocketFactory does not implement createSocket(), this means that the context socketFactory is not used, leading to:\n\n{noformat}\njava.net.SocketException: Unconnected sockets not implemented\n        at javax.net.SocketFactory.createSocket(SocketFactory.java:104)\n        at org.apache.commons.net.ftp.FTPClient._openDataConnection_(FTPClient.java:714)\n        at org.apache.commons.net.ftp.FTPSClient._openDataConnection_(FTPSClient.java:549)\n{noformat}\n\nFix is to implement the no-arg createSocket() method.",
            "resolved": "2011-04-12",
            "versions": [
                "2.2"
            ],
            "fixVersions": [
                "3.0"
            ]
        },
        {
            "issue_id": "NET-403",
            "project": "Commons Net",
            "title": "file.getTimestamp(); showing a difference of TIME ZONE RAWOFFSET",
            "type": "Bug",
            "description": "After Connecting an FTP server in the Same Timezone, Date And Time, I created a File and run the program shown below to get the created or modified time of that file.\n\nBut, file.getTimestamp(); is showing a difference of TIME ZONE RAWOFFSET between local time and File Creation time. Please see the logs below.\n\n{code}\nCalendar calendar = Calendar.getInstance();\n\nFTPFile[] payoutFiles = ftp.listFiles();\n\t\t\t\n\t\t\t\nif(payoutFiles!=null)\n{\n    for (FTPFile file : payoutFiles) {\n\n    Calendar fileTime=file.getTimestamp();\n    \n\n     log.info(\"FTP TIME ZONE: \"+fileTime.getTimeZone().getDisplayName());\n     log.info(\"LOCAL TIME ZONE: \"+calendar.getTimeZone().getDisplayName());\n     \n     log.info(\"FTP ZONE_OFFSET: \" +fileTime.get(Calendar.ZONE_OFFSET));\n     log.info(\"LOCAL ZONE_OFFSET: \" +calendar.get(Calendar.ZONE_OFFSET));\n\t\t\t\t\t\n     log.info(\"FTP TIME: \" +fileTime.toString());\n     log.info(\"LOCAL TIME: \" +calendar.toString());\n\t\t\t\t\t\n     log.info(\"FTP TIME: \" +fileTime.getTimeInMillis());\n     log.info(\"LOCAL TIME: \" +calendar.getTimeInMillis());\n\t\t\t\t\t\n     log.info(\"FTP HOUR: \" +fileTime.get(Calendar.HOUR_OF_DAY));\n     log.info(\"LOCAL HOUR: \" +calendar.get(Calendar.HOUR_OF_DAY));\n\t\t\t\t\t\n     log.info(\"FTP MINUTE: \" +fileTime.get(Calendar.MINUTE));\n     log.info(\"LOCAL MINUTE: \" +calendar.get(Calendar.MINUTE));\n\n}\n{code}\n\n\nGETTING OUTPUT\n\n{noformat}\n[INFO,CheckFTP,main] FTP TIME ZONE: India Standard Time\n[INFO,CheckFTP,main] LOCAL TIME ZONE: India Standard Time\n[INFO,CheckFTP,main] FTP ZONE_OFFSET: 19800000\n[INFO,CheckFTP,main] LOCAL ZONE_OFFSET: 19800000\n[INFO,CheckFTP,main] FTP TIME: java.util.GregorianCalendar[time=1302151140000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Asia/Calcutta\",offset=19800000,dstSavings=0,useDaylight=false,transitions=6,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2011,MONTH=3,WEEK_OF_YEAR=15,WEEK_OF_MONTH=2,DAY_OF_MONTH=7,DAY_OF_YEAR=97,DAY_OF_WEEK=5,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=10,HOUR_OF_DAY=10,MINUTE=9,SECOND=0,MILLISECOND=0,ZONE_OFFSET=19800000,DST_OFFSET=0]\n[INFO,CheckFTP,main] LOCAL TIME: java.util.GregorianCalendar[time=1302173106873,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Asia/Calcutta\",offset=19800000,dstSavings=0,useDaylight=false,transitions=6,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2011,MONTH=3,WEEK_OF_YEAR=15,WEEK_OF_MONTH=2,DAY_OF_MONTH=7,DAY_OF_YEAR=97,DAY_OF_WEEK=5,DAY_OF_WEEK_IN_MONTH=1,AM_PM=1,HOUR=4,HOUR_OF_DAY=16,MINUTE=15,SECOND=6,MILLISECOND=873,ZONE_OFFSET=19800000,DST_OFFSET=0]\n[INFO,CheckFTP,main] FTP TIME: 1302151140000\n[INFO,CheckFTP,main] LOCAL TIME: 1302173106873\n[INFO,CheckFTP,main] FTP HOURS: 10\n[INFO,CheckFTP,main] LOCAL HOURS: 16\n[INFO,CheckFTP,main] FTP MINUTE: 9\n[INFO,CheckFTP,main] LOCAL MINUTE: 15\n{noformat}",
            "resolved": "2011-05-06",
            "versions": [
                "2.0",
                "2.2"
            ],
            "fixVersions": []
        },
        {
            "issue_id": "NET-402",
            "project": "Commons Net",
            "title": "BufferedReader used for control channel, which does not follow the standard",
            "type": "Bug",
            "description": "BufferedReader is used for wrapping the control channel, and uses its readLine() for getting responses from the server.\n\nThe IMAP, NNTP, POP3 and SMTP protocols require CRLF at the end of lines, but Bufferedreader#readLine() also allows bare CR and LF terminators, which could potentially be included in a server reply.",
            "resolved": "2011-04-05",
            "versions": [
                "2.2"
            ],
            "fixVersions": [
                "3.0"
            ]
        },
        {
            "issue_id": "NET-401",
            "project": "Commons Net",
            "title": "FTP class uses BufferedReader for control channel, which does not follow the standard",
            "type": "Bug",
            "description": "The FTP class uses BufferedReader for wrapping the control channel, and uses its readLine() for getting responses from the server.\n\nThe FTP protocol requires CRLF at the end of lines, but Bufferedreader#readLine() also allows bare CR and LF terminators, which could potentially be included in a server reply.",
            "resolved": "2011-04-05",
            "versions": [
                "2.2"
            ],
            "fixVersions": [
                "3.0"
            ]
        },
        {
            "issue_id": "NET-399",
            "project": "Commons Net",
            "title": "ftp data connection does not use connectTimeout",
            "type": "Bug",
            "description": "Deep inside the lengthy method org.apache.commons.net.ftp.FTPClient._openDataConnection_(int, String) we find this line\n\n            socket = _socketFactory_.createSocket(__passiveHost, __passivePort);\n\nWhich I believe does not set the connect timeout when opening the connection. If the line were changed to the following, it would use the connectTimeout property. \n\n            socket = connect(__passiveHost, __passivePort)",
            "resolved": "2011-04-05",
            "versions": [
                "2.0",
                "2.2"
            ],
            "fixVersions": [
                "3.0"
            ]
        },
        {
            "issue_id": "NET-397",
            "project": "Commons Net",
            "title": "FTPSClient does not handle AUTH or ADAT and only partially handles PBSZ. FTPSCommand should be deprecated ",
            "type": "Bug",
            "description": "FTPSClient does not provide any code to handle AUTH or ADAT, and does not provide support for handling a reduced buffer size provided by the server.\n\nFTPSCommand defines int values for AUTH and ADAT, but if the integer values are used by client code, the value will be passed to FTPClient, which uses its own array of command strings, and FTPSCommand.AUTH will translate to \"USER\" and ADAT => \"PASS\", similarly for PBSZ, PROT and CCC.\n\nThese commands all need special handling, so should be dealt with by FTPSClient only.\nFTPSClient can override the sendCommand(int) and sendCommand(int, String) methods in FTPClient which will help prevent problems.\nSince most of these commands need additional special handling, there should be execNAME() methods for each.\nFTPSCommand should be deprecated.",
            "resolved": "2011-03-31",
            "versions": [],
            "fixVersions": [
                "3.0"
            ]
        },
        {
            "issue_id": "NET-396",
            "project": "Commons Net",
            "title": "POP3.setState() should not be public",
            "type": "Bug",
            "description": "The POP3 method setState() is public. However, the state should only be settable by library methods, not by client code, otherwise the state checks won't work correctly.\n\nChanging the visibility would break binary compatibility.\n\nTo maintain compatibility there could be a new method (package-private, which would give test cases access) which is allowed to set the state. Also change the public method to either do nothing or throw an UnsupportedOperationException.\n\nThe getState() method can remain public.",
            "resolved": "2011-04-12",
            "versions": [
                "2.2"
            ],
            "fixVersions": []
        },
        {
            "issue_id": "NET-388",
            "project": "Commons Net",
            "title": "VMSVersioningFTPEntryParser#preParse should not call super.preParse",
            "type": "Bug",
            "description": "VMSVersioningFTPEntryParser#preParse() should not call super.preParse(), because that calls parse() currently, and will be a noop when NET-381 is implemented.\n\nIn either case, calling super.preParse() is wrong.",
            "resolved": "2011-03-22",
            "versions": [],
            "fixVersions": [
                "3.0"
            ]
        },
        {
            "issue_id": "NET-387",
            "project": "Commons Net",
            "title": "TelnetClient use of FromNetASCIIInputStream and ToNetASCIIOutputStream breaks binary mode on non-Windows platforms",
            "type": "Bug",
            "description": "I am trying to use the telnet client in conjunction with the telnet BINARY option.\n\nHowever, the commons-net telnet client has ASCII line-ending conversion hard-coded into it! The result is that even in BINARY mode, any occurrence of CR-LF is replaced by your platform's default line ending sequence. So unless you happen to be running Windows, BINARY mode is screwed up. How ironic.\n\nThe attached patch works for me: it seems like this line ending conversion that it's doing is not the job of this library. The telnet protocol has CRLF line endings by definition so this is what any user of this client should expect. If the user of this library wants platform-specific line endings then they can wrap their input in a {{java.io.LineNumberReader}}.\n",
            "resolved": "2011-03-22",
            "versions": [
                "2.2"
            ],
            "fixVersions": [
                "3.0"
            ]
        },
        {
            "issue_id": "NET-386",
            "project": "Commons Net",
            "title": "Javadoc examples refer to code that has been removed.",
            "type": "Bug",
            "description": "The first example on the org.apache.commons.net.ftp.FTPFileEntryParser javadoc page refers to classes that have been removed since version 2.0:\n\n    FTPClient f=FTPClient();\n    f.connect(server);\n    f.login(username, password);\n    FTPFileList list = f.createFileList(directory, parser);\n    FTPFileIterator iter = list.iterator();\n\n    while (iter.hasNext()) {\n       FTPFile[] files = iter.getNext(25);  // \"page size\" you want\n       //do whatever you want with these files, display them, etc.\n       //expensive FTPFile objects not created until needed.\n    }\nFTPFileList and FTPFileIterator no longer exist.\n\nThere is a good replacement for this example on the org.apache.commons.net.ftp.FTPListParseEngine javadoc page and that example should simply replace the one on the FTPFileEntryParser page.\n\n\n    FTPClient f=FTPClient();\n    f.connect(server);\n    f.login(username, password);\n    FTPListParseEngine engine = f.initiateListParsing(directory);\n\n    while (engine.hasNext()) {\n\n       FTPFile[] files = engine.getNext(25);  // \"page size\" you want\n       //do whatever you want with these files, display them, etc.\n       //expensive FTPFile objects not created until needed.\n    }\n",
            "resolved": "2011-06-04",
            "versions": [
                "2.0",
                "2.2"
            ],
            "fixVersions": [
                "3.0"
            ]
        },
        {
            "issue_id": "NET-377",
            "project": "Commons Net",
            "title": "NLST does not take notice of HiddenFiles setting.",
            "type": "Bug",
            "description": "NLST often supports hidden files, but the setting is not used by the code",
            "resolved": "2011-03-17",
            "versions": [],
            "fixVersions": [
                "3.0"
            ]
        },
        {
            "issue_id": "NET-376",
            "project": "Commons Net",
            "title": "setListHiddenFiles doesn't work for HFS file system running under zos",
            "type": "Bug",
            "description": "The implementation for setListHiddenFiles is essentially the use of a '-a' parameter appended to the LIST command. This retrieves the data in a different format to without the parameter and the parse engine used by initiateListParsing fails to read the lines returned. \nI suggest the parameter should have been '-al' for this scenario",
            "resolved": "2011-05-06",
            "versions": [
                "2.2"
            ],
            "fixVersions": []
        },
        {
            "issue_id": "NET-372",
            "project": "Commons Net",
            "title": "FTPSClient: java.security.cert.CertificateException: No X509TrustManager implementation available if trustManager == null",
            "type": "Bug",
            "description": "FTPSClient defaults to providing the TrustManager provided by FTPSTrustManager.\n\nIt should be possible to use setTrustManager(null) to obtain the default JVM trust manager, however this fails with\n\njava.security.cert.CertificateException: No X509TrustManager implementation available\n\nbecause SSLContext.init(KeyManager[] km, TrustManager[] tm, SecureRandom random) expects null parameters, but does not allow for null entries in the TrustManager array.\n\nThe init call needs to be changed so null is passed instead of an array with a null entry.",
            "resolved": "2011-03-13",
            "versions": [],
            "fixVersions": [
                "3.0"
            ]
        },
        {
            "issue_id": "NET-369",
            "project": "Commons Net",
            "title": "Article.addHeaderField() is currently write-only - there is no way to retrieve the headers - is it needed?",
            "type": "Bug",
            "description": "The method addHeaderField() stores a header name/value in a StringBuffer, but provides no means to return the contents of the buffer.\n\nEither the method and the field should be deleted, or there should be a getHeader() method - in which case the storage mechanism should probably be changed to a HashMap of some kind to make it easier to return individual header values.",
            "resolved": "2011-03-22",
            "versions": [
                "2.2"
            ],
            "fixVersions": [
                "3.0"
            ]
        },
        {
            "issue_id": "NET-367",
            "project": "Commons Net",
            "title": "ntp.TimeStamp uses incorrect lazy initialisation of static fields simpleFormatter and utcFormatter",
            "type": "Bug",
            "description": "Findbugs reports that ntp.TimeStamp uses incorrect lazy initialisation of the static fields simpleFormatter and utcFormatter.\nThis is because the static fields are written and read without synchronisation. One proposed solution is to make the static fields volatile.\n\nThe fields are SoftReferences containing SimpleDateFormat instances. SimpleDateFormat (SDF) is not thread-safe, so when it is used, the code has to synchronize on the instance.\n\nAre the SoftReferences necessary? Does it really matter if the field cannot be garbage-collected?\nIf not, an Init on Demand Holder (IODH) be safer, and would avoid creating the instance if it was not needed.\n\nAlso, is it necessary to use static fields to hold the SimpleDateFormat instances, given that this requires the synchronisation when using the methods toUTCString/toDateString?\n\nThe other mutable classes in the package are not thread-safe (mutable fields are not volatile or synch) so overall thread-safety for the package would not be compromised by using instance fields and removing the SDF synchronisation and SoftReference.",
            "resolved": "2011-03-22",
            "versions": [],
            "fixVersions": [
                "3.0"
            ]
        },
        {
            "issue_id": "NET-366",
            "project": "Commons Net",
            "title": "FTPClientConfig: setServerLanguageCode and setShortMonthNames do not work",
            "type": "Bug",
            "description": "The methods {{setServerLanguageCode}} and {{setShortMonthNames}} of {{FTPClientConfig}} do not work.\n\nThe reason for this is, that the config object is not passed to {{ConfigurableFTPFileEntryParserImpl.configure}}.\n\nThe reason for this can be found in class {{UnixFTPEntryParser}}:\n\n{noformat}\npublic UnixFTPEntryParser()\n{\n    this(null);\n}\n\npublic UnixFTPEntryParser(FTPClientConfig config)\n{\n    super(REGEX);\n    configure(config);\n}\n{noformat}\n\nThe contructor {{UnixFTPEntryParser(FTPClientConfig config)}} is never called from outside this class. It is only called once, by the other constructor {{UnixFTPEntryParser()}}.\n\nTherefore in {{UnixFTPEntryParser(FTPClientConfig config)}} the parameter {{config}} is always null.\n\nSo the settings of {{serverLanguageCode}} and {{shortMonthNames}} will never be passed to {{ConfigurableFTPFileEntryParserImpl.configure}}.\n\nThis can be fixed by changing class {{DefaultFTPFileEntryParserFactory}}.\n\nChange from\n{noformat}\npublic FTPFileEntryParser createUnixFTPEntryParser()\n{\n    return new UnixFTPEntryParser();\n}\n{noformat}\n\nto\n\n{noformat}\npublic FTPFileEntryParser createUnixFTPEntryParser()\n{\n    return new UnixFTPEntryParser(config);\n}\n{noformat}\n\nThen the config object will be passed to {{UnixFTPEntryParser}}.",
            "resolved": "2011-03-09",
            "versions": [
                "2.2"
            ],
            "fixVersions": [
                "3.0"
            ]
        },
        {
            "issue_id": "NET-365",
            "project": "Commons Net",
            "title": "FTPClient.listFiles() does not work properly, if remote server speaks German",
            "type": "Bug",
            "description": "If you are connecting to an FTP server that speaks German you will get German language month names in result to a LIST command. For month names with three-letter abreviations that are identical to the english versions (eg Jan) everything works fine. For month names that are not identical to the englisch versions (eg Dez instead of Dec) you will get FTPFile entrys without date/time information. This is just annoying, but OK.\n\nYou get a real problem in March. The German abreviation is M\u00e4r, containing the German umlaut character \u00e4. File entries with a date in March will just be dropped without further notice. I think this should be considered a bug.\n\nThe reason for this behaviour is the REGEX in UnixFTPEntryParser, which matches only to month names containing \"normal\" letters:\n\n{noformat}[a-zA-Z]{3}{noformat}\n\nSo the month name \"M\u00e4r\" will not match.\n\nI fixed this by changing this part of REGEX to\n\n{noformat}\\\\D{3}{noformat}\n\nIn REGEX there are two occurances of the not working part that have to be changed.",
            "resolved": "2011-03-10",
            "versions": [
                "2.2"
            ],
            "fixVersions": [
                "3.0"
            ]
        },
        {
            "issue_id": "NET-364",
            "project": "Commons Net",
            "title": "Article is very inefficient and incorrect",
            "type": "Bug",
            "description": "References are currently stored as tab-separated strings in a string buffer, which is then parsed to return the list.\n\nAlso, the article information may contain several space-separated references.\n\nArticle.isReply() is also incorrect, as it depends on the subject containing Re;, rather than whether there are any references.",
            "resolved": "2011-03-08",
            "versions": [
                "2.2"
            ],
            "fixVersions": [
                "3.0"
            ]
        },
        {
            "issue_id": "NET-363",
            "project": "Commons Net",
            "title": "Can't connect to a server behind firewall in passive mode",
            "type": "Bug",
            "description": "When the FTP server is behind a firewall, FTPClient can connect, but it cannot transfer data. This is because the FTP server provides it's own address instead of the firewall address to make the connection. I have confirmed the problem by hacking a copy of FTPClient to set the __passiveHost to the appropriate internet address. With this hack, I can transfer data.\n\nPerhaps the FTP server could be configured differently to fix the issue. Unfortunately, I do not have access to the server configuration. I do know that the commercial product IpswitchFtp does deal with the issue as this extract from it's log shows:\n------------\nPASV\n227 Entering Passive Mode (192,168,13,11,195,129)\nconnecting data channel to 192.168.13.11:195,129(50049)\nSubstituting connection address 159.106.121.79 for private address 192.168.13.11 from PASV\ndata channel connected to 159.106.121.79:195,129(50049)\nLIST\n125 List started OK\ntransferred 4157 bytes in 0.078 seconds, 425.688 kbps ( 53.211 kBps), transfer succeeded.\n250 List completed successfully.\nQUIT\n----------------------------\nI can take a shot at a fix if you want. I'll set some timeout, and  if that fails, I'll use the original address",
            "resolved": "2011-03-05",
            "versions": [
                "2.2"
            ],
            "fixVersions": [
                "3.0"
            ]
        },
        {
            "issue_id": "NET-362",
            "project": "Commons Net",
            "title": "TelnetInputStream has various threading bugs",
            "type": "Bug",
            "description": "The run() method references several variables shared with other threads, but does not use synch. or volatile\nFor example\n\n__threaded\n__isClosed",
            "resolved": "2011-03-22",
            "versions": [],
            "fixVersions": [
                "3.0"
            ]
        },
        {
            "issue_id": "NET-360",
            "project": "Commons Net",
            "title": "DefaultFTPFileEntryParserFactory.createFileEntryParser(String key) always tries to load a class",
            "type": "Bug",
            "description": "DefaultFTPFileEntryParserFactory.createFileEntryParser(String key) always tries to load the class given by the key value.\n\nThis is rather wasteful, as normally the autodetect mechanism is used. This provides the system name, which is unlikely ever to be a valid class name.\n\nClass names must match a specific format [1] & [2], so there is no point trying to load the class if the key does not have this format.\n\n[1] http://java.sun.com/docs/books/jvms/second_edition/html/Concepts.doc.html#20389\n[2] http://java.sun.com/docs/books/jvms/second_edition/html/Concepts.doc.html#28702",
            "resolved": "2011-02-25",
            "versions": [
                "2.0",
                "2.2"
            ],
            "fixVersions": [
                "3.0"
            ]
        },
        {
            "issue_id": "NET-359",
            "project": "Commons Net",
            "title": "CopyStreamAdapter unconditionally resets the CopyStreamEvent source and is inefficient",
            "type": "Bug",
            "description": "The CopyStreamAdapter.bytesTransferred(CopyStreamEvent event) method unpacks the event in order to pass the parameters to bytesTransferred(long, int, long) method which creates a new event and propagates it to the listeners.\n\nThis means that the original event source is lost, and there is an unnecessary event creation.\n\nIt seems wrong for the bytesTransferred(long, int, long) method to create a CopyStreamEvent - the interface Javadoc specifically says that the bytesTransferred(long, int, long) method was added to avoid the need to create the event.\n\nIt would make more sense if the adapter handled the methods independently, i.e. if the caller provides an event, pass that on, otherwise pass on the individual parameters to the listeners.",
            "resolved": "2011-02-22",
            "versions": [],
            "fixVersions": [
                "3.0"
            ]
        },
        {
            "issue_id": "NET-355",
            "project": "Commons Net",
            "title": "examples.nntp.NNTPUtils does not compile",
            "type": "Bug",
            "description": "The compile error is:\nThe method retrieveArticleInfo(int, int) in the type NNTPClient is not applicable for the arguments (long, long) NNTPUtils.java:53\n\nThis appears to be related to NET-276, where NNTPClient was changed to from accepting ints to accepting longs, then back again. ",
            "resolved": "2011-02-15",
            "versions": [],
            "fixVersions": [
                "3.0"
            ]
        },
        {
            "issue_id": "NET-354",
            "project": "Commons Net",
            "title": "FTPSClient not properly supporting CCC and PROT P",
            "type": "Bug",
            "description": "FTPSClient does not behave properly after issuing CCC (Clear Command Channel). Proper behaviour is to close SSLSocket, but keep underlying connection without SSL open.\nTo achieve this, the SSLSocket should be created with \"false\", like this on line 255 (of FTPSClient v2.2)\n\nSSLSocket socket =\n(SSLSocket) ssf.createSocket(_socket_, ip, port, false);\n\nFurthermore, on sendCommand CCC, sslSocket must be closed before setting _socket = _plainsocket on line 493:\n   _socket.close();\n   _socket = _plainsocket;\n   ...\n\n\nAnd finally, it is wrong to set socket factory to null on line 500 of the same method; this is set properly in exexPROT and should not be reset on CCC.\n\n\n\n\n\n\n\n",
            "resolved": "2011-04-13",
            "versions": [
                "2.2"
            ],
            "fixVersions": [
                "3.0"
            ]
        },
        {
            "issue_id": "NET-351",
            "project": "Commons Net",
            "title": "[POP3] [PATCH] APOP authentication fails most of the time",
            "type": "Bug",
            "description": "The APOP authentication fails most of the time. Server replying \"-ERR Incorrect parameters\" and puts \"no authentication data\" in the log.",
            "resolved": "2011-01-31",
            "versions": [
                "2.2"
            ],
            "fixVersions": [
                "3.0"
            ]
        },
        {
            "issue_id": "NET-350",
            "project": "Commons Net",
            "title": "\"java.net.SocketException: Broken pipe\" when calling \"TelnetClient.sendAYT()\"",
            "type": "Bug",
            "description": "I'm trying to write some code to have a reliable way to determine if a telnet connection is still available and not closed on the remote server. Even though I first call TelnetClient.isConnected(), the followed TelnetClient.sendAYT() gives me SocketException. The problem occurs when I provide invalid login credentials on purpose when logging in to the telnet server.\n\nCode snippet:\n{code:java}\n    private boolean isConnected() {\n        return isConnected(100);\n    }\n\n    private boolean isConnected(int timeOut) {\n        boolean connected = false;\n\n        if (telnetClient.isConnected()) {\n            try {\n                connected = telnetClient.sendAYT(timeOut);\n            } catch (IOException ex) {\n                Logger.getLogger(ForceLogin.class.getName()).log(Level.SEVERE, null, ex);\n            } catch (IllegalArgumentException ex) {\n                Logger.getLogger(ForceLogin.class.getName()).log(Level.SEVERE, null, ex);\n            } catch (InterruptedException ex) {\n                Logger.getLogger(ForceLogin.class.getName()).log(Level.SEVERE, null, ex);\n            }\n        }\n        \n        System.out.println(\"Still connected? \" + connected);\n\n        return connected;\n    }\n{code}\n\nWhat I do is execute the following:\n{code:java}\nsuccesfulLogin = forceLogin.isConnected();\n\nif (succesfulLogin) {\n        succesfulLogin = forceLogin.isConnected(1000);\n}\n{code}\n\nWhen I try to fail the telnet login (providing invalid credentials), the first \"isConnected()\" call sometimes gives me TRUE, sometimes gives me FALSE. When it's TRUE I want to make sure that we are really still connected using a longer \"TelnetClient.sendAYT()\" timeout. This is where the exception occurs.\n\nResulting exception:\n{code:java}\n16-Jan-2011 16:44:04 force.ForceLogin isConnected\nSEVERE: null\njava.net.SocketException: Broken pipe\n        at java.net.SocketOutputStream.socketWrite0(Native Method)\n        at java.net.SocketOutputStream.socketWrite(SocketOutputStream.java:92)\n        at java.net.SocketOutputStream.write(SocketOutputStream.java:136)\n        at java.io.BufferedOutputStream.flushBuffer(BufferedOutputStream.java:65)\n        at java.io.BufferedOutputStream.flush(BufferedOutputStream.java:123)\n        at org.apache.commons.net.telnet.Telnet._sendAYT(Telnet.java:1095)\n        at org.apache.commons.net.telnet.TelnetClient.sendAYT(TelnetClient.java:206)\n        at force.ForceLogin.isConnected(ForceLogin.java:95)\n        at force.ForceLogin.main(ForceLogin.java:160)\n{code}",
            "resolved": "2011-03-10",
            "versions": [
                "2.2"
            ],
            "fixVersions": [
                "3.0"
            ]
        },
        {
            "issue_id": "NET-349",
            "project": "Commons Net",
            "title": "FTPClient.listFiles() returns a file entry containing a new line character only up to the new line character",
            "type": "Bug",
            "description": "Create 3 files\nFile with new lines:\necho > 'test\nline1\nline2\nline3.txt'\n\n2 files without:\necho > test1\necho > testz\n\nconnect via ftpclient to the server containing these files, switch to that  directory and call listFiles().\nThe file with new lines will return as test and trailing components of the path will be missing.\n\nFTPFileEntryParserImpl.readNextEntry() is using BufferedReader.readLine() to identify the end of the entry. May be some other approach is needed to identify the end of the entry, since file names with new lines although undesired, are actually valid in unix environments.\n",
            "resolved": "2012-10-05",
            "versions": [
                "2.2"
            ],
            "fixVersions": []
        },
        {
            "issue_id": "NET-348",
            "project": "Commons Net",
            "title": "Queue is full TelnetInputStream",
            "type": "Bug",
            "description": "Hello \n\n  I am using Telnet library of common.net. And I got an exception \n\nin TelnetInputStream once in a while. \n\n \n\nThe exception message was as following.\n\n------------------------------------------------------------------------\n--------------------------------------------\n\nException in thread \"Thread-9399\" java.lang.IllegalStateException: Queue\nis full! Cannot process another character.\n\n        at\norg.apache.commons.net.telnet.TelnetInputStream.__processChar(TelnetInpu\ntStream.java:306)\n\n        at\norg.apache.commons.net.telnet.TelnetInputStream.run(TelnetInputStream.ja\nva:596)\n\n        at java.lang.Thread.run(Thread.java:619)\n\n------------------------------------------------------------------------\n--------------------------------------------\n\n \n\nAt first, I think it is possible that I didn't call read() in time to\nread the data in TelnetInputStream so that the buffer\n\nof TelnetInputStream overflowed. But then I wrote a simple program to\ntest it and I found that it is not the cause.\n\n \n\nThen I studied the source of TelnetInputStream. The segment of function\n__processChar is as following.\n\n280\n<http://commons.apache.org/net/xref/org/apache/commons/net/telnet/Telnet\nInputStream.html#280>      private void __processChar(int ch) throws\nInterruptedException\n281\n<http://commons.apache.org/net/xref/org/apache/commons/net/telnet/Telnet\nInputStream.html#281>      {\n282\n<http://commons.apache.org/net/xref/org/apache/commons/net/telnet/Telnet\nInputStream.html#282>          // Critical section because we're\naltering __bytesAvailable,\n283\n<http://commons.apache.org/net/xref/org/apache/commons/net/telnet/Telnet\nInputStream.html#283>          // __queueTail, and the contents of\n_queue.\n284\n<http://commons.apache.org/net/xref/org/apache/commons/net/telnet/Telnet\nInputStream.html#284>          synchronized (__queue)\n285\n<http://commons.apache.org/net/xref/org/apache/commons/net/telnet/Telnet\nInputStream.html#285>          {\n286\n<http://commons.apache.org/net/xref/org/apache/commons/net/telnet/Telnet\nInputStream.html#286>              while (__bytesAvailable >=\n__queue.length - 1)\n287\n<http://commons.apache.org/net/xref/org/apache/commons/net/telnet/Telnet\nInputStream.html#287>              {\n288\n<http://commons.apache.org/net/xref/org/apache/commons/net/telnet/Telnet\nInputStream.html#288>                  // The queue is full. We need to\nwait before adding any more data to it. Hopefully the stream owner\n289\n<http://commons.apache.org/net/xref/org/apache/commons/net/telnet/Telnet\nInputStream.html#289>                  // will consume some data soon! \n290\n<http://commons.apache.org/net/xref/org/apache/commons/net/telnet/Telnet\nInputStream.html#290>                  if(__threaded)\n291\n<http://commons.apache.org/net/xref/org/apache/commons/net/telnet/Telnet\nInputStream.html#291>                  {\n292\n<http://commons.apache.org/net/xref/org/apache/commons/net/telnet/Telnet\nInputStream.html#292>                      __queue.notify();\n293\n<http://commons.apache.org/net/xref/org/apache/commons/net/telnet/Telnet\nInputStream.html#293>                      try\n294\n<http://commons.apache.org/net/xref/org/apache/commons/net/telnet/Telnet\nInputStream.html#294>                      {\n295\n<http://commons.apache.org/net/xref/org/apache/commons/net/telnet/Telnet\nInputStream.html#295>                          __queue.wait();\n296\n<http://commons.apache.org/net/xref/org/apache/commons/net/telnet/Telnet\nInputStream.html#296>                      }\n297\n<http://commons.apache.org/net/xref/org/apache/commons/net/telnet/Telnet\nInputStream.html#297>                      catch (InterruptedException\ne)\n298\n<http://commons.apache.org/net/xref/org/apache/commons/net/telnet/Telnet\nInputStream.html#298>                      {\n299\n<http://commons.apache.org/net/xref/org/apache/commons/net/telnet/Telnet\nInputStream.html#299>                          throw e;\n300\n<http://commons.apache.org/net/xref/org/apache/commons/net/telnet/Telnet\nInputStream.html#300>                      }\n301\n<http://commons.apache.org/net/xref/org/apache/commons/net/telnet/Telnet\nInputStream.html#301>                  }\n302\n<http://commons.apache.org/net/xref/org/apache/commons/net/telnet/Telnet\nInputStream.html#302>                  else\n303\n<http://commons.apache.org/net/xref/org/apache/commons/net/telnet/Telnet\nInputStream.html#303>                  {\n304\n<http://commons.apache.org/net/xref/org/apache/commons/net/telnet/Telnet\nInputStream.html#304>                      // We've been asked to add\nanother character to the queue, but it is already full and there's\n305\n<http://commons.apache.org/net/xref/org/apache/commons/net/telnet/Telnet\nInputStream.html#305>                      // no other thread to drain\nit. This should not have happened! \n306\n<http://commons.apache.org/net/xref/org/apache/commons/net/telnet/Telnet\nInputStream.html#306>                      throw new\nIllegalStateException(\"Queue is full! Cannot process another\ncharacter.\");\n307\n<http://commons.apache.org/net/xref/org/apache/commons/net/telnet/Telnet\nInputStream.html#307>                  }\n308\n<http://commons.apache.org/net/xref/org/apache/commons/net/telnet/Telnet\nInputStream.html#308>              }\n309\n<http://commons.apache.org/net/xref/org/apache/commons/net/telnet/Telnet\nInputStream.html#309>  \n310\n<http://commons.apache.org/net/xref/org/apache/commons/net/telnet/Telnet\nInputStream.html#310>              // Need to do this in case we're not\nfull, but block on a read\n311\n<http://commons.apache.org/net/xref/org/apache/commons/net/telnet/Telnet\nInputStream.html#311>              if (__readIsWaiting && __threaded)\n312\n<http://commons.apache.org/net/xref/org/apache/commons/net/telnet/Telnet\nInputStream.html#312>              {\n313\n<http://commons.apache.org/net/xref/org/apache/commons/net/telnet/Telnet\nInputStream.html#313>                  __queue.notify();\n314\n<http://commons.apache.org/net/xref/org/apache/commons/net/telnet/Telnet\nInputStream.html#314>              }\n315\n<http://commons.apache.org/net/xref/org/apache/commons/net/telnet/Telnet\nInputStream.html#315>  \n316\n<http://commons.apache.org/net/xref/org/apache/commons/net/telnet/Telnet\nInputStream.html#316>              __queue[__queueTail] = ch;\n317\n<http://commons.apache.org/net/xref/org/apache/commons/net/telnet/Telnet\nInputStream.html#317>              ++__bytesAvailable;\n318\n<http://commons.apache.org/net/xref/org/apache/commons/net/telnet/Telnet\nInputStream.html#318>  \n319\n<http://commons.apache.org/net/xref/org/apache/commons/net/telnet/Telnet\nInputStream.html#319>              if (++__queueTail >= __queue.length)\n320\n<http://commons.apache.org/net/xref/org/apache/commons/net/telnet/Telnet\nInputStream.html#320>                  __queueTail = 0;\n321\n<http://commons.apache.org/net/xref/org/apache/commons/net/telnet/Telnet\nInputStream.html#321>          }\n322\n<http://commons.apache.org/net/xref/org/apache/commons/net/telnet/Telnet\nInputStream.html#322>      }\n\n \n\nIn line 306 the exception IllegalStateException is thrown. In this\ncondition, the variable __threaded should be false.\n\nBut I didn't call TelnetClient.setReaderThread\n<http://commons.apache.org/net/api/org/apache/commons/net/telnet/TelnetC\nlient.html#setReaderThread%28boolean%29>  to set it to false.\n\n \n\nThe __threaded is set to true in _start() of TelnetInputStream\n\n84\n<http://commons.apache.org/net/xref/org/apache/commons/net/telnet/Telnet\nInputStream.html#84>       void _start()\n85\n<http://commons.apache.org/net/xref/org/apache/commons/net/telnet/Telnet\nInputStream.html#85>       {\n86\n<http://commons.apache.org/net/xref/org/apache/commons/net/telnet/Telnet\nInputStream.html#86>           if(__thread == null)\n87\n<http://commons.apache.org/net/xref/org/apache/commons/net/telnet/Telnet\nInputStream.html#87>               return;\n88\n<http://commons.apache.org/net/xref/org/apache/commons/net/telnet/Telnet\nInputStream.html#88>   \n89\n<http://commons.apache.org/net/xref/org/apache/commons/net/telnet/Telnet\nInputStream.html#89>           int priority;\n90\n<http://commons.apache.org/net/xref/org/apache/commons/net/telnet/Telnet\nInputStream.html#90>           __isClosed = false;\n91\n<http://commons.apache.org/net/xref/org/apache/commons/net/telnet/Telnet\nInputStream.html#91>           // TODO remove this\n92\n<http://commons.apache.org/net/xref/org/apache/commons/net/telnet/Telnet\nInputStream.html#92>           // Need to set a higher priority in case\nJVM does not use pre-emptive\n93\n<http://commons.apache.org/net/xref/org/apache/commons/net/telnet/Telnet\nInputStream.html#93>           // threads.  This should prevent\nscheduler induced deadlock (rather than\n94\n<http://commons.apache.org/net/xref/org/apache/commons/net/telnet/Telnet\nInputStream.html#94>           // deadlock caused by a bug in this\ncode).\n95\n<http://commons.apache.org/net/xref/org/apache/commons/net/telnet/Telnet\nInputStream.html#95>           priority =\nThread.currentThread().getPriority() + 1;\n96\n<http://commons.apache.org/net/xref/org/apache/commons/net/telnet/Telnet\nInputStream.html#96>           if (priority > Thread.MAX_PRIORITY)\n97\n<http://commons.apache.org/net/xref/org/apache/commons/net/telnet/Telnet\nInputStream.html#97>               priority = Thread.MAX_PRIORITY;\n98\n<http://commons.apache.org/net/xref/org/apache/commons/net/telnet/Telnet\nInputStream.html#98>           __thread.setPriority(priority);\n99\n<http://commons.apache.org/net/xref/org/apache/commons/net/telnet/Telnet\nInputStream.html#99>           __thread.setDaemon(true);\n100\n<http://commons.apache.org/net/xref/org/apache/commons/net/telnet/Telnet\nInputStream.html#100>          __thread.start();\n101\n<http://commons.apache.org/net/xref/org/apache/commons/net/telnet/Telnet\nInputStream.html#101>          __threaded = true;\n102\n<http://commons.apache.org/net/xref/org/apache/commons/net/telnet/Telnet\nInputStream.html#102>      }\n \nI guess that is there a possibility that the thread in __thread.start()\nis started so fast that when __processChar() is called, the __threaded\nhas not been set to true.\nSo the exception IllegalStateException is thrown.\nI think line 101 should be moved up of line 100.",
            "resolved": "2011-03-03",
            "versions": [
                "1.4",
                "2.2"
            ],
            "fixVersions": [
                "3.0"
            ]
        },
        {
            "issue_id": "NET-345",
            "project": "Commons Net",
            "title": "Telnet client: not properly handling IAC bytes within subnegotiation messages",
            "type": "Bug",
            "description": "Subnegotiation messages in telnet are sent using the sequence {{IAC SB ... IAC SE}}.\n\nAlthough it's not clearly spelled out in [RFC 854|http://tools.ietf.org/html/rfc854], any {{IAC}} ({{0xff}}) bytes inside these messages must be escaped by doubling. Other clients do this and this is the only behavior that makes sense.\n\nThe commons-net telnet client is failing both to escape and to unescape {{IAC}} bytes within subnegotiation messages. Moreover, if it does receive a valid {{IAC IAC}} sequence within a subnegotiation message, it will incorrectly jump back to \"data\" input mode, discarding the message and introducing its remainder as garbage in the data stream.\n\nIn addition, the code fails to check for an overflow of the subnegotiation buffer, which would cause an {{ArrayIndexOutOfBounds}} exception if a malicious peer triggered this condition.\n\nFinally, a {{IAC SE}} sequence appearing by itself should probably be discarded, rather than passing as a command to the handler.\n\nI'm attaching a patch to fix these issues.\n",
            "resolved": "2011-03-03",
            "versions": [
                "2.0"
            ],
            "fixVersions": [
                "3.0"
            ]
        },
        {
            "issue_id": "NET-342",
            "project": "Commons Net",
            "title": "Calling retrieveFileStream(fileName) before listFiles() causes ParserInitializationException",
            "type": "Bug",
            "description": "When calling FtpClient.retrieveFileStream(fileName) before FtpClient.listFiles() an org.apache.commons.net.ftp.parser.ParserInitializationException is thrown, giving the message: Unknown parser type: [last console output]\n\nWorks:\nFTPFile[] ftpFiles = client.listFiles();\nInputStream is = client.retrieveFileStream(\"./test.txt\");\n\nWorks:\nclient.pwd();\nFTPFile[] ftpFiles = client.listFiles();\nInputStream is = client.retrieveFileStream(\"./test.txt\");\n\nDoes not work:\nInputStream is = client.retrieveFileStream(\"./test.txt\");\nclient.pwd();\nFTPFile[] ftpFiles = client.listFiles();\n\nOutput:\norg.apache.commons.net.ftp.parser.ParserInitializationException: Unknown parser type: \"/\" is the current directory",
            "resolved": "2011-02-26",
            "versions": [
                "2.0"
            ],
            "fixVersions": []
        },
        {
            "issue_id": "NET-341",
            "project": "Commons Net",
            "title": "FTPClient.remoteAppend(String filename) uses STOR instead of APPE",
            "type": "Bug",
            "description": "From user-list report:\n\nhttp://mail-archives.apache.org/mod_mbox/commons-user/201010.mbox/%3C618a4792-6400-4ee8-8452-1391067c6c0f@neccn-cas02.nec.com.cn%3E\n\nThe FTPClient.remoteAppend(String filename) method uses STOR instead of APPE",
            "resolved": "2010-10-15",
            "versions": [
                "2.0"
            ],
            "fixVersions": [
                "2.2"
            ]
        },
        {
            "issue_id": "NET-340",
            "project": "Commons Net",
            "title": "FTPClient.getModificationTime(String path) throws an ArrayOutOfBoundsException",
            "type": "Bug",
            "description": "FTPClient eventually ends up calling sendCommand(int command, String args) with MOD_TIME (=33) and the path to the file.\nFTPCommands._commands is missing the \"MDMT\" string in the array, causing the out of bounds exception.\n",
            "resolved": "2010-10-15",
            "versions": [
                "2.0"
            ],
            "fixVersions": [
                "2.2"
            ]
        },
        {
            "issue_id": "NET-339",
            "project": "Commons Net",
            "title": "Incorrect parsing of timestamp on Windows CE",
            "type": "Bug",
            "description": "Somewhere in the past the timestamp format returned by windows/the windows ftp server changed.\n\nIn the past the timestamp had a format like: '09-21-10 06:00PM'.\nThe 'current' format however is: '09-21-10 18:00'.\n\nIn version 1.4 this resulted in no files being displayed because parsing the timestamp fails;\nIn version 2 this results in the files being displayed but without the timestamp.\n\n(This is the result of change 645299)\n\nThe attached patch updates the code so that it detects both the old and the new format of the timestamp.\n\nA bug that also mentions this, or at least the comments, https://issues.apache.org/jira/browse/NET-50\n\n",
            "resolved": "2010-10-15",
            "versions": [
                "2.0"
            ],
            "fixVersions": [
                "2.2"
            ]
        },
        {
            "issue_id": "NET-335",
            "project": "Commons Net",
            "title": "TelnetOutputStream incorrectly doubles-up IAC when sending IAC+EOR in BINARY transmission mode",
            "type": "Bug",
            "description": "This is related to NET-180 which I reported a couple of years back, and is reported fixed in 2.1. I've since re-visited the code, and found another issue\n\nbackground\n----------------\nI have a TN5250 client (see rfc1205) which extends TelnetClient. Basically, the client negotiates BINARY transmission and operates in block-mode. The client sends IAC+EOR to notify the host that the data is complete, but the TelnetOutputStream doubles-up the IAC automatically as if it was a data byte, which iis not the case, resulting in IAC+IAC+EOR.\n\nTwo possible solutions come to mind:\n\n1. Do not double-up IAC when in BINARY transmission in TelnetOutputStream (i.e. leave it to the client)\n2. Add a method to TelnetClient like -- sendCommand(byte b) {........} which would act similar to sendAYT, only allowing the client to specify the value. \n\nOn balance, I like the second option, as it would give more future possibilities.",
            "resolved": "2011-03-03",
            "versions": [
                "1.4",
                "2.0"
            ],
            "fixVersions": []
        },
        {
            "issue_id": "NET-334",
            "project": "Commons Net",
            "title": "org.apache.commons.net.io.FromNetASCIIInputStream can throw a NullPointerException",
            "type": "Bug",
            "description": "org.apache.commons.net.io.FromNetASCIIInputStream.available() can throw a NullPointerException if the \nInputStream is null. This has been experienced on a loaded system. \n\nStackTrace: \n\nException in thread \"Telnet Reader\" java.lang.NullPointerException \nat org.apache.commons.net.io.FromNetASCIIInputStream.available(FromNetASCIIInputStream.java:202) \nat org.apache.commons.net.io.FromNetASCIIInputStream.read(FromNetASCIIInputStream.java:164) \nat java.io.BufferedInputStream.fill(Unknown Source) \nat java.io.BufferedInputStream.read(Unknown Source) \nat org.apache.commons.net.telnet.TelnetInputStream.__read(TelnetInputStream.java:122) \nat org.apache.commons.net.telnet.TelnetInputStream.read(TelnetInputStream.java:375) \nat org.apache.commons.net.telnet.TelnetInputStream.read(TelnetInputStream.java:492) \nat java.io.BufferedInputStream.fill(Unknown Source) \nat java.io.BufferedInputStream.read1(Unknown Source) \nat java.io.BufferedInputStream.read(Unknown Source) \nat java.io.FilterInputStream.read(Unknown Source) \n\n\nCause: \n\nThe base PushbackInputStream checks the input stream is not closed before invoking avilable()\n\n274  public int available() throws IOException {\n275 \tensureOpen();\n276\t\treturn (buf.length - pos) + super.available();\n277  }\n\n\nWhich throws appropriate IOException if input stream is null: \n\n72\tprivate void ensureOpen() throws IOException {\n73\t\tif (in == null)\n74\t\tthrow new IOException(\"Stream closed\");\n75\t}\n\n\ncommons.net.io.FromNetASCIIInputStream does not. This can lead to a NullPointerException being thrown if the input stream is null.\n\n191        // PushbackInputStream in JDK 1.1.3 returns the wrong thing\n192        /***\n193         * Returns the number of bytes that can be read without blocking EXCEPT\n194         * when newline conversions have to be made somewhere within the\n195         * available block of bytes.  In other words, you really should not\n196         * rely on the value returned by this method if you are trying to avoid\n197         * blocking.\n198         ***/\n199        @Override\n200        public int available() throws IOException\n201        {\n202            return (buf.length - pos) + in.available();\n203        }\n\n\n\nFromNetASCIIInputStream.available() should be changed to mimic the base class behaviour. ",
            "resolved": "2010-10-15",
            "versions": [
                "2.0"
            ],
            "fixVersions": [
                "2.2"
            ]
        },
        {
            "issue_id": "NET-331",
            "project": "Commons Net",
            "title": "AS400 file timestamp format is wrong",
            "type": "Bug",
            "description": "There is a bug in org.apache.commons.net.ftp.parser.OS400FTPEntryParser.java.  The variable \"private static final String DEFAULT_DATE_FORMAT\" needs to be changed from \"yy/MM/dd HH:mm:ss\"; //01/11/09 12:30:24 to \"MM/dd/yy HH:mm:ss\"; //01/15/08 14:21:38 to work correctly.  I have tested this on our companies AS400 and it solved the problem we were having.",
            "resolved": "2011-04-04",
            "versions": [
                "2.0"
            ],
            "fixVersions": [
                "3.0"
            ]
        },
        {
            "issue_id": "NET-330",
            "project": "Commons Net",
            "title": "The method VMSFTPEntryParser.parseFileList(InputStream listStream) should not be present.",
            "type": "Bug",
            "description": "The method VMSFTPEntryParser.parseFileList(InputStream listStream) should not be present.\n\nNo other FTPFileEntryParser implementations have this method.\n\nThe method does not appear to be used currently in NET,  and the parsers should only be called by the engine, not by external callers.\n\nThe method should be deprecated and deleted in the next major release.",
            "resolved": "2011-02-26",
            "versions": [
                "2.0"
            ],
            "fixVersions": [
                "3.0"
            ]
        },
        {
            "issue_id": "NET-328",
            "project": "Commons Net",
            "title": "FromNetASCIIInputStream.read(byte[], int, int) may change length passed to superclass if not doing conversion",
            "type": "Bug",
            "description": "The method FromNetASCIIInputStream.read(byte[], int, int) may change the length passed to superclass if not doing conversion.\n\nIt should probably check  _noConversionRequired and call the super-class before recalculating the length.\nThat is\n{code}\nif (_noConversionRequired)\n    return super.read(buffer, offset, __length);\n{code}\nshould be done at the very start of the method.",
            "resolved": "2010-07-11",
            "versions": [
                "2.0"
            ],
            "fixVersions": [
                "2.2"
            ]
        },
        {
            "issue_id": "NET-327",
            "project": "Commons Net",
            "title": "\"Unconnected sockets not implemented\" when using FTPSClient",
            "type": "Bug",
            "description": "I'm using Apache Camel as an integration platform. Specifically, at the moment, I depend on the ftp/ftps/sftp support in the camel-ftp component. Under the hood Camel uses Commons Net for ftp and ftps support.\n\nRecently, the camel-ftp component was enhanced (on my request) with the possibility to use a secure data channel. This is accomplished by using the execProt() (and execPsbz()) method in class FTPSClient.\n\nHowever, later on (in case Camel needs to reconnect), one of the connect() methods in the base class to FTPSClient is called. Unfortunately all the connect methods first create an unconnected socket and then tries to connect it. The connection factory now associated with the FTPSClient then throws an exception stating: \"Unconnected sockets not implemented\".\n\nIt seems like the FTPSClient does not support \"re-connect\" once it has entered secure communications mode.\n\nSee also: http://www.mail-archive.com/user@commons.apache.org/msg04933.html\nand http://www.mail-archive.com/users@camel.apache.org/msg08732.html",
            "resolved": "2011-03-10",
            "versions": [
                "2.0"
            ],
            "fixVersions": [
                "3.0"
            ]
        },
        {
            "issue_id": "NET-326",
            "project": "Commons Net",
            "title": "A KeyManager is required when the protection level is set to 'P' with FTPSClient on active mode",
            "type": "Bug",
            "description": "Using a simple FTPS client that list a directory, when execPROT(\"P\") is set and the active mode is on, the following exception is thrown :\n\njavax.net.ssl.SSLException: No available certificate or key corresponds to the SSL cipher suites which are enabled.\n\tat com.sun.net.ssl.internal.ssl.SSLServerSocketImpl.checkEnabledSuites(SSLServerSocketImpl.java:303)\n\tat com.sun.net.ssl.internal.ssl.SSLServerSocketImpl.accept(SSLServerSocketImpl.java:253)\n\tat org.apache.commons.net.ftp.FTPClient._openDataConnection_(FTPClient.java:489)\n\tat org.apache.commons.net.ftp.FTPSClient._openDataConnection_(FTPSClient.java:494)\n\tat org.apache.commons.net.ftp.FTPClient.listNames(FTPClient.java:1950)\n\tat org.apache.commons.net.ftp.FTPClient.listNames(FTPClient.java:1996)\n\tat fr.enovacom.eai.actions.dynamiques.protocole.ftp.FTPGet.testFTPS(FTPGet.java:379)\n\tat fr.enovacom.eai.actions.dynamiques.protocole.ftp.FTPGet.main(FTPGet.java:401)\n\nThis doesn't occur on passive mode.\nThe only way to make it work is to set a keyManager although there is no need for a client authentication.",
            "resolved": "2011-03-21",
            "versions": [
                "2.0"
            ],
            "fixVersions": [
                "3.0"
            ]
        },
        {
            "issue_id": "NET-325",
            "project": "Commons Net",
            "title": "FTPSClient does not support pure-ftpd - data connection issues",
            "type": "Bug",
            "description": "I do not dare attempt to declare who is right or not.  However given the popularity of pure-ftpd, FTPSClient should support it.\n\nIt seems pure-ftpd expects the SSL handshake before sending the 150 reply to command (e.g., LIST).\n\nSo it seems that it expects:\n\n> PASV | PORT\n< 227 etc.\n> LIST\n> handshake\n< 150\n...\n< 226\n\nIn Commons Net ftp does the following with the expectation that after the connection is accepted that the server will reply with a 150 ... reply.  However, pure-ftpd does not.  It only sends the 150 after the handshake is complete.  It means that the Socket read times out waiting for the 150.\n\n> PASV | PORT\n< 227\n> LIST\n< 150\n> handshake\n...\n< 226\n\nI have patched 2.1 (which includes the NET-313 changes) to support pure-ftpd.  \n",
            "resolved": "2011-04-06",
            "versions": [
                "2.0"
            ],
            "fixVersions": []
        },
        {
            "issue_id": "NET-324",
            "project": "Commons Net",
            "title": "ant ftp doesn't download files in subdirectories when remotedir is empty or root folder",
            "type": "Bug",
            "description": "I'm trying to download files in subdirectories from an ftp server with ant. The exact set of files is known. Some of them are in subdirectories. Ant only seems to download the ones in the root directory. It does work if I download all files without listing them.\n\nAt first I thought I was doing something wrong so I posted a question on stackoverflow.\nhttp://stackoverflow.com/questions/2790570/ant-ftp-doesnt-download-files-in-subdirectories\n\nYou can see my scriptdef workaround in the answers there.\n\nThe first ftp action should do the exact same thing as the second. Instead I get \"Hidden file \\\\a\\a.txt assumed to not be a symlink.\"\n\n{code:title=build.xml}\n<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<project name=\"example\" default=\"example\" basedir=\".\">\n    <taskdef name=\"ftp\" \n    classname=\"org.apache.tools.ant.taskdefs.optional.net.FTP\" />\n\n    <target name=\"example\">\n\n        <!-- doesn't work -->\n        <ftp action=\"get\" verbose=\"true\"\n        server=\"localhost\" userid=\"example\" password=\"example\" \n        remotedir=\"\">\n            <fileset dir=\"downloads\" casesensitive=\"false\" \n            includes=\"a/a.txt,a/b/ab.txt,c/c.txt\" />\n        </ftp>\n\n        <!-- works (but requires multiple ftp tasks) -->\n        <ftp action=\"get\" verbose=\"true\"\n        server=\"localhost\" userid=\"example\" password=\"example\"\n        remotedir=\"a\">\n            <fileset dir=\"downloads\" casesensitive=\"false\" \n            includes=\"a.txt,b/ab.txt\" />\n        </ftp>\n        <ftp action=\"get\" verbose=\"true\"\n        server=\"localhost\" userid=\"example\" password=\"example\"\n        remotedir=\"c\">\n            <fileset dir=\"downloads\" casesensitive=\"false\" \n            includes=\"c.txt\" />\n        </ftp>\n\n    </target>\n\n</project>\n{code}\n\n\n{code:title=build-with-workaround.xml}\n<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<project name=\"example\" default=\"example\" basedir=\".\">\n    <taskdef name=\"ftp\" \n    classname=\"org.apache.tools.ant.taskdefs.optional.net.FTP\" />\n\n    <target name=\"example\">\n<scriptdef name=\"my-ftp-get\" language=\"javascript\">\n    <attribute name=\"server\"/>\n    <attribute name=\"userid\"/>\n    <attribute name=\"password\"/>\n    <attribute name=\"remotedir\"/>\n    <attribute name=\"fileset_dir\"/>\n    <attribute name=\"fileset_includes\"/>\n    <![CDATA[\n    importClass(java.io.File);\n    importClass(org.apache.tools.ant.taskdefs.optional.net.FTP);\n    var local_basedir = \"\" + attributes.get(\"fileset_dir\") + \"/\";\n    var original_includes = \"\" + attributes.get(\"fileset_includes\");\n    var remotedir = \"\" + attributes.get(\"remotedir\");\n    local_basedir = local_basedir.replace(/\\\\/g, \"/\");\n    original_includes = original_includes.replace(/\\\\/g, \"/\");\n    remotedir = remotedir.replace(/\\\\/g, \"/\");\n    var includes_arr = original_includes.split(\",\");\n    var clean_includes = {};\n    for (var i = 0; i < includes_arr.length; i++) {\n        var directory = \"/\";\n        var filename = includes_arr[i];\n        var split_include = includes_arr[i].split(\"/\");\n        if (split_include.length > 1) {\n            directory = split_include[0] + \"/\";\n            filename = includes_arr[i].substring(directory.length);\n        }\n        if (!clean_includes.hasOwnProperty(directory)) {\n            clean_includes[directory] = [];\n        }\n        clean_includes[directory].push(filename);\n    }\n    var get_files = new FTP.Action();\n    get_files.setValue(\"get\");\n    for (var path in clean_includes) {\n        var current_clean_includes = clean_includes[path].join(\",\");\n        var fileset = project.createDataType(\"fileset\");\n        var ftp = self.project.createTask(\"ftp\");\n        ftp.setAction(get_files);\n        ftp.setServer(attributes.get(\"server\"));\n        ftp.setUserid(attributes.get(\"userid\"));\n        ftp.setPassword(attributes.get(\"password\"));\n        ftp.setRemotedir(remotedir + path);\n        fileset.setDir(new File(local_basedir + path));\n        fileset.setIncludes(current_clean_includes);\n        ftp.addFileset(fileset);\n        ftp.perform();\n    }\n    ]]>\n</scriptdef>\n\n<my-ftp-get\nserver=\"localhost\" userid=\"example\" password=\"example\"\nremotedir=\"\"\n    fileset_dir=\"downloads\" casesensitive=\"false\" \n    fileset_includes=\"a/a.txt,a/b/ab.txt,c/c.txt\">\n</my-ftp-get>\n\n    </target>\n\n</project>\n{code}\n",
            "resolved": "2010-05-15",
            "versions": [
                "2.0"
            ],
            "fixVersions": []
        },
        {
            "issue_id": "NET-323",
            "project": "Commons Net",
            "title": "javax.net.ssl.SSLException: 530 Please login with USER and PASS",
            "type": "Bug",
            "description": "Hi,\n\nI am using vsFTPd 2.0.7 on Debian Linux and I run FTPSExample.java file and I am getting exception as follows,\n\njavax.net.ssl.SSLException: 530 Please login with USER and PASS\n\nI want to connect secure FTP from application deployed in Tomcat  to vsFTPd 2.0.7 on Debian Linux  and browse and download files.\n\nI have search on other forum but not getting clear idea.In some forum found some description for importing certificate but didn't get clear description\n\n Is any other setting needed to connecting FTP on Linux in secure way ?\n\n\n",
            "resolved": "2010-05-10",
            "versions": [
                "2.0"
            ],
            "fixVersions": []
        },
        {
            "issue_id": "NET-322",
            "project": "Commons Net",
            "title": "can not upload/store a file/folder begins with \"-\" (hyphen character) to a FTP-Server",
            "type": "Bug",
            "description": "I have to analyze something and a name of a folder was stored like an ID. This ID is user-dependent. I won't manipulate this ID. But I can not upload some folder or file begins with \"-\".\n\nExample: \n##########################################################################################\n2010-05-07 09:11:45,982 [main] INFO  proxy.ftp.FTPClientUtil - Set working dir=true to: \"path\"\n2010-05-07 09:11:45,982 [main] INFO  proxy.ftp.FTPClientUtil - Copy directory: Test to the current working directory.\n\nCan't store something begins with \"-\":\n2010-05-07 09:11:45,982 [main] DEBUG proxy.ftp.FTPClientUtil - create new dir: -=false\n2010-05-07 09:11:45,998 [main] DEBUG proxy.ftp.FTPClientUtil - store file: --------------_07.47.58=false\n\nBut can store something begins not with \"-\":\n2010-05-07 09:11:46,060 [main] DEBUG proxy.ftp.FTPClientUtil - create new dir: 1-=true\n2010-05-07 09:11:46,279 [main] DEBUG proxy.ftp.FTPClientUtil - store file: 2010-04-26_--------------_07.47.58=true\n2010-05-07 09:11:46,279 [main] INFO  proxy.ftp.FTPClientUtil - Copy done!\n2010-05-07 09:11:46,279 [main] INFO  proxy.ftp.FTPClientUtil - Disconnected from server.\n##########################################################################################\n\nI used this functions from FTPClient (see below):\n##########################################################################################\nlogger.debug(\"create new dir: \" + dir.getName() + \"=\" + ftp.makeDirectory(dir.getName()));\nlogger.debug(\"store file: \" + file.getName() + \"=\" + ftp.storeFile(file.getName(), fis));\n##########################################################################################\n\nfunctions from FTPClient:\n/**store directory**/   \npublic boolean makeDirectory(String pathname) throws IOException\n{\n    return FTPReply.isPositiveCompletion(mkd(pathname));\n}\n/**store file**/\npublic boolean storeFile(String remote, InputStream local)\n throws IOException\n{\n     return __storeFile(FTPCommand.STOR, remote, local);\n}",
            "resolved": "2010-05-07",
            "versions": [
                "2.0"
            ],
            "fixVersions": []
        },
        {
            "issue_id": "NET-321",
            "project": "Commons Net",
            "title": "can not upload/store some file/folder begins with \"-\" ( hyphen character) on a FTP-Server",
            "type": "Bug",
            "description": "I have to analyze something and a name of a folder was stored like an ID. This ID is user-dependent. I won't manipulate this ID. But I can not upload some folder or file begins with \"-\".\n\nExample: \n##########################################################################################\n2010-05-07 09:11:45,982 [main] INFO  proxy.ftp.FTPClientUtil - Set working dir=true to: \"path\"\n2010-05-07 09:11:45,982 [main] INFO  proxy.ftp.FTPClientUtil - Copy directory: Test to the current working directory.\n\nCan't store something begins with \"-\":\n2010-05-07 09:11:45,982 [main] DEBUG proxy.ftp.FTPClientUtil - create new dir: -=false\n2010-05-07 09:11:45,998 [main] DEBUG proxy.ftp.FTPClientUtil - store file: --------------_07.47.58=false\n\nBut can store something begins not with \"-\":\n2010-05-07 09:11:46,060 [main] DEBUG proxy.ftp.FTPClientUtil - create new dir: 1-=true\n2010-05-07 09:11:46,279 [main] DEBUG proxy.ftp.FTPClientUtil - store file: 2010-04-26_--------------_07.47.58=true\n2010-05-07 09:11:46,279 [main] INFO  proxy.ftp.FTPClientUtil - Copy done!\n2010-05-07 09:11:46,279 [main] INFO  proxy.ftp.FTPClientUtil - Disconnected from server.\n##########################################################################################\n\nI used this functions from FTPClient (see below):\n##########################################################################################\nlogger.debug(\"create new dir: \" + dir.getName() + \"=\" + ftp.makeDirectory(dir.getName()));\nlogger.debug(\"store file: \" + file.getName() + \"=\" + ftp.storeFile(file.getName(), fis));\n##########################################################################################\n\nfunctions from FTPClient:\n/**store directory**/   \npublic boolean makeDirectory(String pathname) throws IOException\n{\n    return FTPReply.isPositiveCompletion(mkd(pathname));\n}\n/**store file**/\npublic boolean storeFile(String remote, InputStream local)\n throws IOException\n{\n     return __storeFile(FTPCommand.STOR, remote, local);\n}",
            "resolved": "2010-05-10",
            "versions": [
                "2.0"
            ],
            "fixVersions": []
        },
        {
            "issue_id": "NET-318",
            "project": "Commons Net",
            "title": "Article.references field is never updated; extremely inefficient implementation",
            "type": "Bug",
            "description": "Article.references is a private StringBuffer instance.\n\nThe method addReference(String) inserts the reference into the buffer followed by a tab.\nHowever, as far as I can tell, this is never called.\n\nThe method getReferences() - which is used - has to parse the StringBuffer in order to find the references.\nSince the buffer is only used in the add and get methods, it does not make sense to handle the references this way.\nEven if the buffer were used (e.g. as part of a toString() method) it would still be better to store the references as a List or Array.\n",
            "resolved": "2011-03-08",
            "versions": [
                "2.0"
            ],
            "fixVersions": [
                "3.0"
            ]
        },
        {
            "issue_id": "NET-317",
            "project": "Commons Net",
            "title": "POP3MessageInfo fields should be final",
            "type": "Bug",
            "description": "The 3 public instance fields in POP3MessageInfo should be made final.\n\nAFAICT, there's no use case for allowing them to be changed externally.\n\nThey are not written by current code, but changing them to final would change the API - hence fix version set to 3.0",
            "resolved": "2011-02-27",
            "versions": [
                "2.0"
            ],
            "fixVersions": [
                "3.0"
            ]
        },
        {
            "issue_id": "NET-316",
            "project": "Commons Net",
            "title": "listFiles() returns empty for \"Windows NT\" systems",
            "type": "Bug",
            "description": "Try as I might, I can't provoke a directory listing from a system reporting as \"Windows NT\".  The root of the server has no files, just directories, but the problem is the directories are not being included in *.listFiles()*\n\nIs Windows NT unsupported? Any workarounds I can use to extract directory listings?",
            "resolved": "2010-04-03",
            "versions": [
                "1.4",
                "2.0"
            ],
            "fixVersions": []
        },
        {
            "issue_id": "NET-315",
            "project": "Commons Net",
            "title": "listFiles() locks up under 2.1, but works under 2.0",
            "type": "Bug",
            "description": "I have several servers that I'm spidering with FTPClient, I initially thought there was something wrong with what Im doing, however, dropping the version back to 2.0, and what I'm seeing goes away.\n\nthe following 'System Names' exhibit this lockup behaviour:\n||System || Works|| Notes ||\n|UNIX Type\\: L8| (x)| several sites Im talking to respond with this |\n|System Name\\: null | (x) | I found that on connect its telling me \"Windows_NT\"|\n\nUbuntu 6.06 and 9.04 systems work fine.\n\nAttached will be a test-case maven project, just edit the 'blank.properties' in resources, with valid ftp server values.  With commons-net-2.1 it locks up, but backing off to 2.0, it works.",
            "resolved": "2011-03-02",
            "versions": [
                "2.1"
            ],
            "fixVersions": [
                "2.2"
            ]
        },
        {
            "issue_id": "NET-313",
            "project": "Commons Net",
            "title": "FTP: EPRT fails + EPRT/EPSV issues",
            "type": "Bug",
            "description": "as implemented in NET-288, the client can work now via IPv6 ... EPSV is not only useful on IPv6 but also when NAT is enabled (see [RFC 2428|http://tools.ietf.org/html/rfc2428])\n\nwhat my patch does:\n\n * (re)enable EPSV command on IPv4 too (i dont know why [~rwinston@eircom.net] removed it from the supplied patch in NET-288), also see my comments in patch\n * sending EPRT only if we are over IPv6, cause there is no advantage over PORT on IPv4, it could even have disadvantages (see comments in patch)\n * EPRT was sending the result of getActivePort() to the server, but when there was no activePortRange set, it did send 0 as default which leads to an error on server site:\n{quote}\nTue Mar 23 17:17:20 2010 [pid 10581] [ftpuser] FTP command: Client \"192.168.11.130\", \"EPRT |1|192.168.11.130|0|\"\nTue Mar 23 17:17:20 2010 [pid 10581] [ftpuser] FTP response: Client \"192.168.11.130\", \"500 Illegal EPRT command.\"\n{quote}\n * and even calling getActivePort() has no sense here, cause that port is used to be random, but we should send same port  where the ServerSocket is listening on -> server.getLocalPort()\n * getActivePort() checks if __activeMaxPort > __activeMinPort, but when i want to set a range of only one single port (min==max) it would return 0 ... now it will check if equal and return __activeMaxPort",
            "resolved": "2010-07-12",
            "versions": [
                "2.1"
            ],
            "fixVersions": [
                "2.2"
            ]
        },
        {
            "issue_id": "NET-312",
            "project": "Commons Net",
            "title": "Issue while directory listing by using FTPClient",
            "type": "Bug",
            "description": "Hi,\n\nI have VSFTPD (FTP Server) on linux and my build running under Tomcat 5. The application deployed under tomcat, connects to FTP folder and lists the files in that folder using FTPClient.\n\nBut under debian linux, it is connecting to that folder but not listing any files. While same setup on Red Hat 5 running.\n\nI also tested with latest version but still file listing is not working.\n\nPlease look into the problem\n\nThanks,\nSagar",
            "resolved": "2010-04-03",
            "versions": [
                "1.2.2"
            ],
            "fixVersions": []
        },
        {
            "issue_id": "NET-311",
            "project": "Commons Net",
            "title": "FTPClient.protected Socket _openDataConnection_(int command, String arg) returns null",
            "type": "Bug",
            "description": "    protected Socket _openDataConnection_(int command, String arg)\n      throws IOException\n    {\n        Socket socket;\n\n        if (__dataConnectionMode != ACTIVE_LOCAL_DATA_CONNECTION_MODE &&\n                __dataConnectionMode != PASSIVE_LOCAL_DATA_CONNECTION_MODE)\n            return null;\n        ....\n     }\n\n\n\n\nThis if condition is impossible to satisfy.  Should be OR(||) instead of AND(&&).\n__dataConnectionMode can not be set to 2 & 0 at the same time.\n",
            "resolved": "2010-03-04",
            "versions": [
                "2.0"
            ],
            "fixVersions": []
        },
        {
            "issue_id": "NET-309",
            "project": "Commons Net",
            "title": "FTPClient getModificationTime throws ArrayIndexOutOfBoundsException",
            "type": "Bug",
            "description": "FTPClient is used to connect to FTP server via https, browse for files and get their age. The call to getModificationTime throws an ArrayOutOfBoundsException.\n\nCode:\n        FTPClient ftpclient = new FTPClient();\n        ftpclient.connect(server, port);\n        log.debug(\"Connected\");\n        if (!ftpclient.login(user, password)) {\n            throw new Exception(\"Could not logon\");\n        }\n        log.debug(\"Logged in\");\n        String[] files = ftpclient.listNames(path);\n        for (String f : files) {\n            log.debug(\"Found file: ftp://\" + server + \":\" + port + f);\n            String mt = ftpclient.getModificationTime(f);\n            log.debug(\"File \"+f+\"was last modified \"+mt);\n        }\n\nException:\njava.lang.ArrayIndexOutOfBoundsException: 33\n        at org.apache.commons.net.ftp.FTP.sendCommand(FTP.java:534)\n        at org.apache.commons.net.ftp.FTP.mdtm(FTP.java:1157)\n        at org.apache.commons.net.ftp.FTPClient.getModificationTime(FTPClient.java:2382)\n    ...",
            "resolved": "2010-01-27",
            "versions": [
                "2.0"
            ],
            "fixVersions": []
        },
        {
            "issue_id": "NET-308",
            "project": "Commons Net",
            "title": "Support unicode characters in FTPClient",
            "type": "Bug",
            "description": "Hi all!\n\nDuring work with commons.net.FTPClient I spotted following problem:\n\nOn my ftp server some folder names contains Slovenian unicode characters: \u010d, \u0161, \u017e  (e.g. 1018_DOM\u017dALE) . Both methods: listFiles() and listNames() returns list of files and folders names but without hachek. (E.g.  1018_DOMZALE instead of 1018_DOM\u017dALE)\n",
            "resolved": "2010-01-15",
            "versions": [
                "2.0"
            ],
            "fixVersions": []
        },
        {
            "issue_id": "NET-306",
            "project": "Commons Net",
            "title": "SubnetUtils.SubnetInfo.isInRange is BRAINDEAD (a.k.a. FUBAR)",
            "type": "Bug",
            "description": "org.apache.commons.net.utils.SubnetUtils.SubnetInfo.isInRange() is totally broken.  It utterly ignores the fact that integer address values might be, um....negative?!\n\n            SubnetUtils subnetUtils = new SubnetUtils(\"66.249.71.0/24\");\n            SubnetUtils.SubnetInfo subnetInfo = subnetUtils.getInfo();\n            String ip = \"213.139.63.227\";\n            if (subnetInfo.isInRange(ip)) {\n                System.out.println(\"YES, \" + ip + \" is in the range: \" + subnetInfo.getCidrSignature());\n            }\n            else {\n                System.out.println(\"NO, \" + ip + \" is not in the range: \" + subnetInfo.getCidrSignature());\n            }\n\n\nYES, 213.139.63.227 is in the range: 66.249.71.0/24\n\n?!?! WTF !?!?!\n\nThis is the culprit in SubnetUtils.java:\n\n        private boolean isInRange(int address)      { return ((address-low()) <= (high()-low())); }\n\nThe integer values in the test case above are:\n\n66.249.71.1 = 1123632897\n66.249.71.254 = 1123633150\n213.139.63.227 = -712294429\n\nSo...you can see the issue (I hope).  Please fix this by changing isInRange() to check if the given value is truly *BETWEEN* high and low values.\n\nThank you!!",
            "resolved": "2011-03-07",
            "versions": [
                "1.4"
            ],
            "fixVersions": [
                "2.0"
            ]
        },
        {
            "issue_id": "NET-305",
            "project": "Commons Net",
            "title": "SubnetUtils constructor fails on /32 subnets",
            "type": "Bug",
            "description": "The following code:\n\nSubnetUtils subnetUtils = new SubnetUtils(\"192.168.0.1/32\");\n\nthrows the following exception:\n\nException in thread \"main\" java.lang.IllegalArgumentException: Value [32] not in range (-1,31]\n\tat org.apache.commons.net.util.SubnetUtils.rangeCheck(SubnetUtils.java:216)\n\tat org.apache.commons.net.util.SubnetUtils.calculate(SubnetUtils.java:141)\n\tat org.apache.commons.net.util.SubnetUtils.<init>(SubnetUtils.java:46)\n\tat com.gs.configmgt.proteus.model.impl.TestTest.main(TestTest.java:12)\n\n/32 is a perfectly valid subnet of one host. See wikipedia for verification: http://en.wikipedia.org/wiki/IPv4_subnetting_reference.",
            "resolved": "2010-03-08",
            "versions": [
                "2.0"
            ],
            "fixVersions": [
                "2.2"
            ]
        },
        {
            "issue_id": "NET-304",
            "project": "Commons Net",
            "title": "TFTP send method having issue",
            "type": "Bug",
            "description": "I am using commons net 2.0 version. I have a TFTP server implemented and the scenario is below - \n\n1) Client sends TFTPWrite request.\n2) Server sends DATA packet, client sends ACK. Server receives it (thr TFTP.receive()). \n3) This goes well for quite some time.  \n4) Now server gets same ACK thrice, means some packets are not reached to client and client sends the same ACK again. \n5) Server also sends the old DATA packet coresponding to the ACK, using TFTP.send(). But somehow those DATA packets are not seen on the interface in the snoop log :(. So client has a timeout of say 5 secs, and closes the connection at its end indicating overall transfer failure. And I could see the DATA packet coming in the snoop log after 13-14 secs of delay :(, once TFTP.send() is invoked. \n\nThis does not happens always. Scenario works fine most of the times, but there are cases where it's delaying sending the packet on the i/f. And delay osberved was around 10 secs. Because of this, Client closes a connection :(.",
            "resolved": "2017-02-09",
            "versions": [
                "2.0"
            ],
            "fixVersions": [
                "3.6"
            ]
        },
        {
            "issue_id": "NET-303",
            "project": "Commons Net",
            "title": "FTP: FTPFileEntryParser API samples are wrong",
            "type": "Bug",
            "description": "The samples in the FTPFileEntryParser API doc use non-existent methods\n\nFTPClient.createFileList(directory, parser);\n\nFTPClient.FTPFile[] files = f.listFiles(parser, ...",
            "resolved": "2011-02-26",
            "versions": [],
            "fixVersions": [
                "3.0"
            ]
        },
        {
            "issue_id": "NET-302",
            "project": "Commons Net",
            "title": "FTP: initiateListParsing should not cache entryParser",
            "type": "Bug",
            "description": "if you use initiateListParsing with a  FTPFileEntryParser  this code can fail:\n\nFTPClient.listFiles()\n\nftp.initiateListParsing(parserKey, ...\n\nIt seems that the listFiles() already set a parser, that gets cached and the parser in the initiateListParsing gets ignored.\n\nFor z/OS you can use ftp for file transfer and for submitting jobs, in the second case you'd want another parser than for the first call.\nc.f. http://www.ibm.com/developerworks/systems/library/es-zosbatchjavav/index.html",
            "resolved": "2010-05-11",
            "versions": [
                "2.0"
            ],
            "fixVersions": [
                "2.2"
            ]
        },
        {
            "issue_id": "NET-301",
            "project": "Commons Net",
            "title": "NullPointerException in method SocketClient.getLocalAddress()",
            "type": "Bug",
            "description": "Hello,\n\nI'm new with Java (well, I have develop some programs, but not so hard....until now) and I'm trying to create an applet which can open an ftp connection from the client side to the server one, and download several files (I don't know if it's the best way to do what I want, but as far as I have read in internet, this is the most common and easy method used by many people).\n\nThe problem is about the FTPClient class:\nI am able to connect, logon, set transfer mode, change the working directory, list the names of the directory...but when I try to perform a simple call to the  \"retrieveFile (remote, local)\" method, I'm getting a NullPointerException (the call to that method is done after clicking on a download button):\n\nException in thread \"AWT-EventQueue-2\" java.lang.NullPointerException\n\tat org.apache.commons.net.SocketClient.getLocalAddress(SocketClient.java:441)\n\tat org.apache.commons.net.ftp.FTPClient._openDataConnection_(FTPClient.java:447)\n\tat org.apache.commons.net.ftp.FTPClient.retrieveFile(FTPClient.java:1257)\n\tat Applet1.jButton1_actionPerformed(Applet1.java:229)\n\tat Applet1.access$100(Applet1.java:21)\n\tat Applet1$3.actionPerformed(Applet1.java:95)\n\tat javax.swing.AbstractButton.fireActionPerformed(Unknown Source)\n\tat javax.swing.AbstractButton$Handler.actionPerformed(Unknown Source)\n\tat javax.swing.DefaultButtonModel.fireActionPerformed(Unknown Source)\n\tat javax.swing.DefaultButtonModel.setPressed(Unknown Source)\n\tat javax.swing.plaf.basic.BasicButtonListener.mouseReleased(Unknown Source)\n\tat java.awt.Component.processMouseEvent(Unknown Source)\n\tat javax.swing.JComponent.processMouseEvent(Unknown Source)\n\tat java.awt.Component.processEvent(Unknown Source)\n\tat java.awt.Container.processEvent(Unknown Source)\n\tat java.awt.Component.dispatchEventImpl(Unknown Source)\n\tat java.awt.Container.dispatchEventImpl(Unknown Source)\n\tat java.awt.Component.dispatchEvent(Unknown Source)\n\tat java.awt.LightweightDispatcher.retargetMouseEvent(Unknown Source)\n\tat java.awt.LightweightDispatcher.processMouseEvent(Unknown Source)\n\tat java.awt.LightweightDispatcher.dispatchEvent(Unknown Source)\n\tat java.awt.Container.dispatchEventImpl(Unknown Source)\n\tat java.awt.Component.dispatchEvent(Unknown Source)\n\tat java.awt.EventQueue.dispatchEvent(Unknown Source)\n\tat java.awt.EventDispatchThread.pumpOneEventForFilters(Unknown Source)\n\tat java.awt.EventDispatchThread.pumpEventsForFilter(Unknown Source)\n\tat java.awt.EventDispatchThread.pumpEventsForHierarchy(Unknown Source)\n\tat java.awt.EventDispatchThread.pumpEvents(Unknown Source)\n\tat java.awt.EventDispatchThread.pumpEvents(Unknown Source)\n\tat java.awt.EventDispatchThread.run(Unknown Source)\n\n\nAnd the code is very simple:\n\nString reply;    \t\t\nboolean success;\nString path = new String (\"PATH_TO_REMOTE_FILE\");\n \t\t\t\t\t\t\ntry\n{\nfich_local = new File (jTextField1.getText () + \"/Local_file.txt\");\nlocal_file = new FileOutputStream (fich_local);\nString remote_file = new String (path + \"/Remote_file.txt\");\n\nftp.connect(\"SERVER\");\nreply = ftp.getReplyString();\nSystem.out.println(reply);\n\nftp.login(\"USER\",\"PASS\");\nreply = ftp.getReplyString();\nSystem.out.println(reply);\n\nftp.setFileType(FTP.ASCII_FILE_TYPE);\nreply = ftp.getReplyString();\nSystem.out.println(reply);\n\nftp.changeWorkingDirectory(path);\nreply = ftp.getReplyString();\nSystem.out.println(reply);\n\nreply = ftp.printWorkingDirectory();\nSystem.out.println(reply);\n\nsuccess = ftp.retrieveFile(remote_file,  local_file);\nSystem.out.println(\"Status: \" + success + \" -- Remote File: \" + remote_file + \" -- Local File: \" + fich_local.getAbsolutePath ());\n}\ncatch (FileNotFoundException fnfe)\n{\n\tfnfe.printStackTrace ();\n}\ncatch (IOException ioe) \n{\t\t\t\t\t\n       \tioe.printStackTrace ();\n}\ncatch (Exception e)\n{\n\te.printStackTrace ();\n}\n\nThe remote server, directory and file whithin is included the \"Remote_file.txt\" exists, and the print line shows all this info if I catch the \"NullPointerException\" (also shows a \"false\" when calling to the success variable).\nI have googled a lot (and still googling), but found almost nothing useful and I would appreciate a lot any help (also if you need additional info, please let me know).\nThanks in advance",
            "resolved": "2010-03-08",
            "versions": [
                "2.0"
            ],
            "fixVersions": []
        },
        {
            "issue_id": "NET-300",
            "project": "Commons Net",
            "title": "FTPClient.listFiles() throws NullPointerException if listHiddenFiles is TRUE",
            "type": "Bug",
            "description": "When listHiddenFiles is TRUE FTPClient.getListArguments() code determines the length of pathname parameter to create the appropriate StringBuffer (FtpClient.java:2319).\nStill pathname may merely be null if I call FTPClient.listFiles() - the one without params",
            "resolved": "2010-03-08",
            "versions": [
                "2.0"
            ],
            "fixVersions": [
                "2.2"
            ]
        },
        {
            "issue_id": "NET-298",
            "project": "Commons Net",
            "title": "Article numbers should be treated as LONG instead of INT in NNTP",
            "type": "Bug",
            "description": "When getting list of newsgroups, articles number are beyond int limit :\nhere is server's reply about alt.binaries.boneless (one of the biggest of alt.binaries hierarchy) :\n\nalt.binaries.boneless 2705422467 1662764743 y\n\nAs article number if often used, that's a lot of minor changes.\n\n",
            "resolved": "2011-03-10",
            "versions": [
                "2.0",
                "2.2"
            ],
            "fixVersions": [
                "3.0"
            ]
        },
        {
            "issue_id": "NET-297",
            "project": "Commons Net",
            "title": "Using FromNetASCIIInputStream misrepresent standardized telnet input",
            "type": "Bug",
            "description": "I encounter strange behavior while using TelnetClient first time. I receive the only '\\n' char, instead of '\\r\\n' as defined in RFC 0854. After inspecting source code I've found that the conversion occurs depending on platform depended property.\n\nFor what? What about \"write once, run everywhere\"? Now I'm forced to write a wrapper to make conversion back. So, could you make that conversion manageable by means of a writable boolean property?",
            "resolved": "2010-03-09",
            "versions": [
                "2.0"
            ],
            "fixVersions": []
        },
        {
            "issue_id": "NET-296",
            "project": "Commons Net",
            "title": "java.net.SocketException: Operation timed out error while entering Passive mode",
            "type": "Bug",
            "description": "Hi,\n\nI am getting the following error while trying to connect to the FTP (Explicit).\n\njava.net.SocketException: Operation timed out: connect:could be due to invalid address.\n\nI am facing this error when i am running the code from the client machine which is in different domain...If i run the same code in the domain where ftp exists..it works fine without any issue...below is my code and the trace log....Pls help.\n\n\nFTPSClient client = new FTPSClient(\"TLS\",false);\n\tclient.addProtocolCommandListener(new PrintCommandListener(new PrintWriter(System.out)));\n\tboolean _ftp_login = false;\n         \n        try {\n            String[] hname = ftpurl.split(\"//\");\n            client.setAuthValue(\"TLS\");\n            client.setRemoteVerificationEnabled(false);\n\n\t    client.connect(\"ftp.kotaklifeinsurance.com\",22);\n             \n            int reply = client.getReplyCode();\n            client.execPBSZ(0);            \n            client.execPROT(\"P\");\n            \n            if (!FTPReply.isPositiveCompletion(reply)) {\n                client.disconnect();\n                System.out.println(\"openFTPClient(): FTP server refused connection.\");\n                throw new Exception(\"FTP server refused connection.\");\n            } else {\n                try {\n                    _ftp_login = client.login(userID, password);\n                } catch (Exception e) {\n                    throw e;\n                }\n\n                if (_ftp_login) {\n                 \n                    client.enterLocalPassiveMode();\n                    \n                    if (client.printWorkingDirectory() == null)\n                        throw new Exception(\"Current working directory returned is null\");\n\n                    client.changeWorkingDirectory(\"/XYZ/\");\n\n\t\t    fis = new FileInputStream(localfile);\n  \t\t    ins = (InputStream)fis;\n\n\t\t    boolean flag = client.storeFile(filename,ins);\n\t\t    System.out.println(\"File saved to FTP : \"+flag);\n\n\nError Trace : \n\n220 Unauthorized Access Prohibited.\nAUTH TLS\n234 AUTH command ok. Expecting TLS Negotiation.\nPBSZ 0\n200 PBSZ command successful.\nPROT P\n200 PROT command successful.\nUSER userid\n331 Password required for userid.\nPASS password\n230 User logged in.\nPWD\n257 \"/\" is current directory.\nCWD /XYZ/\n250 CWD command successful.\nPWD\n257 \"/XYZ\" is current directory.\nTYPE A\n200 Type set to A.\nMODE I\n501 'MODE I': parameter not understood.\nSTRU F\n200 STRU F ok.\nPASV\n227 Entering Passive Mode (192,168,201,220,195,108).\njava.net.SocketException: Operation timed out: connect:could be due to invalid address\n\tat java.net.PlainSocketImpl.socketConnect(Native Method)\n\tat java.net.PlainSocketImpl.doConnect(PlainSocketImpl.java:331)\n\tat java.net.PlainSocketImpl.connectToAddress(PlainSocketImpl.java:196)\n\tat java.net.PlainSocketImpl.connect(PlainSocketImpl.java:183)\n\tat java.net.Socket.connect(Socket.java:478)\n\tat java.net.Socket.connect(Socket.java:428)\n\tat java.net.Socket.<init>(Socket.java:335)\n\tat java.net.Socket.<init>(Socket.java:150)\n\tat com.ibm.jsse.bs.<init>(Unknown Source)\n\tat com.ibm.jsse.JSSESocketFactory.createSocket(Unknown Source)\n\tat org.apache.commons.net.ftp.FTPSSocketFactory.createSocket(FTPSSocketFactory.java:48)\n\tat org.apache.commons.net.ftp.FTPClient._openDataConnection_(FTPClient.java:502)\n\tat org.apache.commons.net.ftp.FTPSClient._openDataConnection_(FTPSClient.java:494)\n\tat org.apache.commons.net.ftp.FTPClient.__storeFile(FTPClient.java:374)\n\tat org.apache.commons.net.ftp.FTPClient.storeFile(FTPClient.java:1379)\n",
            "resolved": "2011-03-05",
            "versions": [
                "2.0"
            ],
            "fixVersions": []
        },
        {
            "issue_id": "NET-294",
            "project": "Commons Net",
            "title": "UnixFTPEntryParser fails to parse some entries",
            "type": "Bug",
            "description": "The regex does match the entry but the resulting groups are wrong for exemple, with\n{code}\n-rwxrwx---   1 ftp      ftp-admin 816026400 Oct  5  2008 bloplab 7 cd1.img\n{code}\nthe unix group name group will match \"ftp-admin 816026400 Oct\" file size group will match \"5\" first date group will match \"2008 bloplab\" then the year group will match \"7\" and the file name group will match \"cd1.img\"\nin this listing :\n{code}\n-rwxrwx---   1 ftp      ftp-admin      771 Oct  5  2008 bloplab 7 cd1.ccd\n-rwxrwx---   1 ftp      ftp-admin       76 Oct  5  2008 bloplab 7 cd1.cue\n-rwxrwx---   1 ftp      ftp-admin 816026400 Oct  5  2008 bloplab 7 cd1.img\n-rwxrwx---   1 ftp      ftp-admin 33307200 Oct  5  2008 bloplab 7 cd1.sub\n-rwxrwx---   1 ftp      ftp-admin      772 Oct  5  2008 bloplab 7 cd2.ccd\n-rwxrwx---   1 ftp      ftp-admin       76 Oct  5  2008 bloplab 7 cd2.cue\n-rwxrwx---   1 ftp      ftp-admin 413902608 Oct  5  2008 bloplab 7 cd2.img\n-rwxrwx---   1 ftp      ftp-admin 16893984 Oct  5  2008 bloplab 7 cd2.sub\n{code}\nthe 4 entries in which groupname and file size are only separated by one space wont be parsed properly, the others work",
            "resolved": "2009-09-14",
            "versions": [
                "2.0"
            ],
            "fixVersions": [
                "2.2"
            ]
        },
        {
            "issue_id": "NET-291",
            "project": "Commons Net",
            "title": "enterLocalPassiveMode is set back to Active on connect",
            "type": "Bug",
            "description": "\n\nenterLocalPassiveMode (exhibit A) docs claim that mode will be set to PASSIVE_LOCAL_DATA_CONNECTION_MODE \"some other method such as\" enterLocalActiveMode is called  (exhibit B).  However, active mode is being entered after connect is called.   This behavior can be easily observed by modifying FtpExample by moving ftp.enterLocalPassiveMode()  to before ftp.connect(server).   \n\nPerhaps either the code or docs could be updated to remedy this.  Versions prior to 2.0 behaved as documented.\n \nexhibit A:\n   /***\n     * Set the current data connection mode to\n     * <code> PASSIVE_LOCAL_DATA_CONNECTION_MODE </code>.  Use this\n     * method only for data transfers between the client and server.\n     * This method causes a PASV command to be issued to the server\n     * before the opening of every data connection, telling the server to\n     * open a data port to which the client will connect to conduct\n     * data transfers.  The FTPClient will stay in\n     * <code> PASSIVE_LOCAL_DATA_CONNECTION_MODE </code> until the\n     * mode is changed by calling some other method such as\n     * {@link #enterLocalActiveMode  enterLocalActiveMode() }\n     ***/\n    public void enterLocalPassiveMode()\n    {\n        __dataConnectionMode = PASSIVE_LOCAL_DATA_CONNECTION_MODE;\n        // These will be set when just before a data connection is opened\n        // in _openDataConnection_()\n        __passiveHost = null;\n        __passivePort = -1;\n    }\n\nexhibit B\n\n    @Override\n    protected void _connectAction_() throws IOException\n    {\n        super._connectAction_();\n        __initDefaults();\n    }",
            "resolved": "2012-01-10",
            "versions": [
                "2.0"
            ],
            "fixVersions": [
                "3.1"
            ]
        },
        {
            "issue_id": "NET-290",
            "project": "Commons Net",
            "title": "DotTerminatedMessageReader does not parse \\r \\r \\n correctly",
            "type": "Bug",
            "description": "If the DotTerminatedMessageReader receives two carriage return characters at the end of the line, it does not process them correctly.\n\nWhen the DTMR tries to read \"\\r\\r\\n\" from the server, it does not process this as a correct end of line.  The code handles the first \\r as a standalone character, but then does not process the second \\r character to test for end-of-line.  If this happens at the end of a file, the DTMR will not recognize the '.' character as the end of file, and will try to read another character.  This hangs the reader.\n\nThe process flow breaks down in the following order.  The first \\r character is tested at line 127.  It then reads the second \\r character at line 133.  The test fails, and the second \\r is pushed in to the internalBuffer at line 160.  The second time the read() method is called, the \\r character is returned without processing at line 90.  The third time the read() is called, the \\n character is read and checked at line 127.  But, because the preceding \\r character is not found first, it does not process this as EOL.  If the next character is a '.', it is not processed as EOF.\n\nThe following fix solves the problem by pushing the second \\r character back in to the reader stream (rather than putting it in the internalBuffer), where it will be processed correctly:\n\n160a160,163\n>                 else if ( ch == '\\r' )\n>                 {\n>                       internalReader.unread( ch );\n>                 }\n",
            "resolved": "2010-03-08",
            "versions": [
                "2.0"
            ],
            "fixVersions": [
                "2.2"
            ]
        },
        {
            "issue_id": "NET-289",
            "project": "Commons Net",
            "title": "StackOverflowError in Threader",
            "type": "Bug",
            "description": "The loop detection code in Threader.buildContainer() is currently:\n                // Link references together in the order they appear in the References: header,\n                // IF they dont have a have a parent already &&\n                // IF it will not cause a circular reference\n                if ((parentRef != null)\n                    && (ref.parent == null)\n                    && (parentRef != ref)\n                    && !(parentRef.findChild(ref))) {\n                    // Link ref into the parent's child list\nDeep circular references where 'parentRef' is already a child of 'ref' and ref is the root container are possible.\nThe test should be:\n               if ((parentRef != null)\n                    && (ref.parent == null)\n                    && (parentRef != ref)\n                    && !(ref.findChild(parentRef))) {\n                    // Link ref into the parent's child list\n",
            "resolved": "2011-02-27",
            "versions": [],
            "fixVersions": [
                "3.0"
            ]
        },
        {
            "issue_id": "NET-286",
            "project": "Commons Net",
            "title": "Unhandled SecurityException in DefaultFTPFileEntryParserFactory.createFileEntryParser when using applets",
            "type": "Bug",
            "description": "When using a commons.net.ftp in a (signed) applet, we encountered an unhandles _SecurityException_ in _DefaultFTPFileEntryParserFactory.createFileEntryParser_ in some cases.\nIf the applet was being hosted on my Windows Vista devmachine, connecting to FTP servers was no issue.\nHowever, as soon as we uploaded the applet to our webserver (CentOS), things stopped working. After some debugging, we found that there was a _SecurityException_ being thrown by the following code in _DefaultFTPFileEntryParserFactory.createFileEntryParser_:\n{{parserClass = Class.forName(key);}}\n{{parser = (FTPFileEntryParser) parserClass.newInstance();}}\nThe toString() of the exception gave:\n{{java.lang.SecurityException: class \"UNIX Type: L8\"'s signer information does not match signer information of other classes in the same package}}\n(Note: When using a different FTP server, the string was obviously different.)\nThe exception got caught by the generic catchblock at the bottom that doesn't really do anything.\nWe managed to solve this by taking the code inside the catching of _ClassNotFoundException_ and use that to catch the _SecurityException_.\n\nI hope this is somewhat helpfull. :)",
            "resolved": "2011-02-26",
            "versions": [
                "2.0"
            ],
            "fixVersions": [
                "3.0"
            ]
        },
        {
            "issue_id": "NET-284",
            "project": "Commons Net",
            "title": "problem with TelnetClient.setSoTimeout() : not the proper behaviour",
            "type": "Bug",
            "description": "Hi all,\nCorrect me if I'm wrong but I think that the telnetClient is not handling properly timeouts.\n\nJust look at this junit testCase : \n\n{code}\nimport java.io.BufferedReader;\nimport java.io.IOException;\nimport java.io.InputStreamReader;\nimport java.io.PrintWriter;\nimport java.net.SocketException;\nimport java.net.SocketTimeoutException;\n\nimport junit.framework.TestCase;\nimport org.apache.commons.net.telnet.*;\n\nimport org.junit.Test;\n\npublic class TelnetClientTest extends TestCase {\n\tprivate TelnetClient telnetClient;\n\tprivate BufferedReader in= null;\n\tprivate PrintWriter out= null;\n\t\n\t@Test\n\tpublic void testSetSoTimeout() {\n\t\t\n\t\ttelnetClient = new TelnetClient();\n\t\t\n\t\t/*\n\t\t * FIRST SCRIPT\n\t\t */\n\t\ttry {\n\t\t\ttelnetClient.connect(\"192.168.0.95\", 23);\n\t\t} catch (SocketException e) {\n\t\t\te.printStackTrace();\n\t\t\tthis.disconnect();\n\t\t\tfail(\"Error connect\");\n\t\t} catch (IOException e) {\n\t\t\te.printStackTrace();\n\t\t\tthis.disconnect();\n\t\t\tfail(\"Error connect\");\n\t\t}\n\t\tassertTrue (\"telnet client not connected\", telnetClient.isConnected());\n\t\t\n\t\tin = new BufferedReader(new InputStreamReader(telnetClient.getInputStream()));\n\t\tout = new PrintWriter(telnetClient.getOutputStream());\n\t\tString mes = null;\n\t\t\n\t\t// LOGIN\n\t\tmes = getMessageFromTelnetServer(300);\n\t\tassertNotNull(\"mes is null\", mes);\n\t\tassertTrue(\"Pas de prompt login\", mes.endsWith(\"login: \"));\n\t\tout.println(\"root\");\n\t\tout.flush();\n\t\t\n\t\t// PASSWORD\n\t\tmes = getMessageFromTelnetServer(300);\n\t\tassertNotNull(\"mes is null\", mes);\n\t\tassertTrue(\"Pas de prompt password\", mes.endsWith(\"Password: \"));\n\t\tout.println(\"rootpwd\");\n\t\tout.flush();\n\t\t\n\t\t// PROMPT\n\t\tmes = getMessageFromTelnetServer(300);\n\t\tassertNotNull(\"mes is null\", mes);\n\t\tassertTrue(\"no prompt\", mes.endsWith(\"$ \"));\n\t\t\n\t\t// SEND PWD\n\t\tout.println(\"pwd\");\n\t\tout.flush();\n\t\t\n\t\t// WAIT A LITTLE BIT TOO MUCH\n\t\ttry {\n\t\t\tThread.sleep(1000);\n\t\t} catch(InterruptedException e) {\n\t\t}\n\t\t\n\t\t// READ RESULT OF PWD\n\t\tmes = getMessageFromTelnetServer(300);\n\t\t\n\t\t// READ AGAIN ... YES !\n\t\tString mes2 = getMessageFromTelnetServer(300);\n\t\t\n\t\t// CRASH HERE\n\t\tassertTrue(\"no result to pwd\", mes.endsWith(\"$ \"));\n\t\t\n\t\t// AND HERE\n\t\tassertEquals(\"should be empty but we get result of pwd\", \"\" , mes2);\n\t\t\n\t\tthis.disconnect();\t\n\t\t\n\t}\n\t\n\tprivate void disconnect() {\n\t\ttry {\n\t\t\ttelnetClient.disconnect();\n\t\t} catch (IOException e) {}\n\t}\n\t\n\tprivate String getMessageFromTelnetServer(int timeout) {\n\t\tint numberOfBytes = 0;\n\t\tchar[] msgChar = new char[2000];\n\t\t\n\t\ttry {\n\t\t\ttelnetClient.setSoTimeout(timeout);\n\t\t} catch (Exception e) {\n\t\t\treturn \"\";\n\t\t}\n\t\t\n\t\tString res = \"\";\n\t\tread_loop:\n\t\twhile (numberOfBytes >= 0) {\n\t\t\ttry {\n\t\t\t\tnumberOfBytes = in.read(msgChar, 0, msgChar.length);\n\t\t\t} catch (SocketTimeoutException e) {\n\t\t\t\tbreak read_loop;\n\t\t\t} catch (IOException e) {\n\t\t\t\te.printStackTrace();\n\t\t\t\tbreak read_loop;\n\t\t\t}\n\t\t\tres = res + String.copyValueOf(msgChar, 0, numberOfBytes);\n\t\t}\n\t\treturn res;\n\t}\n\n}\n{code}\n",
            "resolved": "2011-03-02",
            "versions": [
                "2.0"
            ],
            "fixVersions": []
        },
        {
            "issue_id": "NET-279",
            "project": "Commons Net",
            "title": "SMTP.getReplyStrings returns array of nulls",
            "type": "Bug",
            "description": "The SMTP.getReplyStrings method returns an array of nulls, as it doesn't copy the internal list to the result String[] correctly.",
            "resolved": "2009-06-02",
            "versions": [
                "2.0"
            ],
            "fixVersions": [
                "2.2"
            ]
        },
        {
            "issue_id": "NET-277",
            "project": "Commons Net",
            "title": "nntp AUTHENTICATION_REQUIRED costant has the wrong value",
            "type": "Bug",
            "description": "In the class NNTPReply, I found the following status code:\n\n\tpublic static final int AUTHENTICATION_REQUIRED = CODE_408;\n\nMy server returns 480, which I believe is the correct code.\n\n   480: The client must authenticate itself to the server (that is, it\n      must provide information as to the identity of the client) before\n      the facility can be used on this connection.  This will involve\n      the use of an authentication extension such as [NNTP-AUTH].\n",
            "resolved": "2009-05-05",
            "versions": [
                "2.0"
            ],
            "fixVersions": [
                "2.2"
            ]
        },
        {
            "issue_id": "NET-276",
            "project": "Commons Net",
            "title": "NNTPClient has problems with group listings for large groups.",
            "type": "Bug",
            "description": "The following command causes a MalformedServerReplyException on my usenet server (astraweb):\nclient.listNewsgroups();\n\nRoot Cause:\nCaused by: org.apache.commons.net.MalformedServerReplyException: alt.binaries.boneless 2230918506 1662764743 y\n\tat org.apache.commons.net.nntp.NNTPClient.__readNewsgroupListing(NNTPClient.java:255)\n\tat org.apache.commons.net.nntp.NNTPClient.listNewsgroups(NNTPClient.java:930)\n\tat org.lievaart.jleecher.protocol.CommandFactory$2.doOnServer(CommandFactory.java:27)\n\tat org.lievaart.jleecher.protocol.NNTPProtocol.callServer(NNTPProtocol.java:33)\n\t... 2 more\n\nMy hypothesis is that NNTP cannot parse the response, because one of the numbers exceeds the Integer range.\nLocally I have applied the following quick fix to get it to work:\n\npublic class NNTPClient extends NNTP {\n...\n...\n...\n\tprivate NewsgroupInfo __parseNewsgroupListEntry(final String entry) {\n\t\tNewsgroupInfo result;\n\t\tStringTokenizer tokenizer;\n\t\tint lastNum, firstNum;\n\t\tString last, first, permission;\n\n\t\tresult = new NewsgroupInfo();\n\t\ttokenizer = new StringTokenizer(entry);\n\n\t\tif (tokenizer.countTokens() < 4) {\n\t\t\treturn null;\n\t\t}\n\n\t\tresult._setNewsgroup(tokenizer.nextToken());\n\t\tlast = tokenizer.nextToken();\n\t\tfirst = tokenizer.nextToken();\n\t\tpermission = tokenizer.nextToken();\n\n\n\t\ttry {\n\t\t\ttry {\n\t\t\t\tlastNum = Integer.parseInt(last);\n\t\t\t} catch (NumberFormatException nfe) {\n\t\t\t\tif (last.matches(\"\\\\d++\")) {\n\t\t\t\t\tlastNum = Integer.MAX_VALUE;\n\t\t\t\t} else {\n\t\t\t\t\tthrow nfe;\n\t\t\t\t}\n\t\t\t}\n",
            "resolved": "2011-03-09",
            "versions": [
                "2.0"
            ],
            "fixVersions": [
                "3.0"
            ]
        },
        {
            "issue_id": "NET-275",
            "project": "Commons Net",
            "title": "Example code in FTPClient doesn't compile",
            "type": "Bug",
            "description": "The example code in the FTPClient class documentation is a bit broken.\n\nI'll attach a patch that resolves the issues that i have found.",
            "resolved": "2009-04-25",
            "versions": [
                "2.0"
            ],
            "fixVersions": [
                "2.2"
            ]
        },
        {
            "issue_id": "NET-274",
            "project": "Commons Net",
            "title": "Commands issued after CCC command fails in Commons Net 2.0",
            "type": "Bug",
            "description": "When the FTP Client communicates with FTP Server in Explicit SSL mode, after the exchange of data channel security commands, the Client issues the CCC command (Clear Command Channel). A reply code of 200 is received for the CCC command. However, the subsequent commands issued fails with the error ::\n\norg.apache.commons.net.ftp.FTPConnectionClosedException: Connection closed without indication.\n\nThis is occuring because after issuing the CCC Command ,(in sendCommand of FTPSClient)  the socket is switched to plane socket whereas the Input and output streams of the socket _controlInput_ and _controlOutput_ still point to the older secure socket.\n\nThis issue can be resolved by adding the following lines in the sendCommand () of FTPSClient after switching thesocket to plainSocket\n\n_socket_ = planeSocket;\n        _controlInput_ = new BufferedReader(new InputStreamReader( _socket_ .getInputStream(), getControlEncoding()));\n        _controlOutput_ = new BufferedWriter(new OutputStreamWriter( _socket_.getOutputStream(), getControlEncoding()));\n\n\nThanks",
            "resolved": "2009-04-23",
            "versions": [
                "2.0"
            ],
            "fixVersions": [
                "2.2"
            ]
        },
        {
            "issue_id": "NET-270",
            "project": "Commons Net",
            "title": "Incorrect error handling in method initiateListParsing of FTPClient",
            "type": "Bug",
            "description": "In method initiateListParsing of FTPClient, errors when opening the data connection are not correctly handled.\nThis leads to ignore message delivered by the server and further operation with the FTPClient instance are not valid.\n\nAs an example, considere the attached unit test. When such an error is met, using the _sendNoOp_ command returns false.\nHere is an output of the test:\n{noformat}\nF:\\dev\\jakarta\\>run org.apache.commons.vfs.provider.ftp.FTPClientUnitTest 10.0.0.x 21 /GILLES/source usr pass 5500\nIgnoring error when creating client at iteration: 1152\nError at iteration: 1155\njava.net.SocketTimeoutException: Accept timed out\n        at java.net.PlainSocketImpl.socketAccept(Native Method)\n        at java.net.PlainSocketImpl.accept(PlainSocketImpl.java:384)\n        at java.net.ServerSocket.implAccept(ServerSocket.java:450)\n        at java.net.ServerSocket.accept(ServerSocket.java:421)\n        at org.apache.commons.net.ftp.FTPClient._openDataConnection_(FTPClient.java:489)\n        at org.apache.commons.net.ftp.FTPClient.initiateListParsing(FTPClient.java:2296)\n        at org.apache.commons.net.ftp.FTPClient.initiateListParsing(FTPClient.java:2269)\n        at org.apache.commons.net.ftp.FTPClient.listFiles(FTPClient.java:2046)\n        at org.apache.commons.vfs.provider.ftp.FTPClientUnitTest.testConnectTimeoutInList(FTPClientUnitTest.java:70)\n        at org.apache.commons.vfs.provider.ftp.FTPClientUnitTest.main(FTPClientUnitTest.java:110)\nException in thread \"main\" junit.framework.AssertionFailedError: NOOP failed at iteration 1155\n        at junit.framework.Assert.fail(Assert.java:47)\n        at junit.framework.Assert.assertTrue(Assert.java:20)\n        at org.apache.commons.vfs.provider.ftp.FTPClientUnitTest.testConnectTimeoutInList(FTPClientUnitTest.java:75)\n        at org.apache.commons.vfs.provider.ftp.FTPClientUnitTest.main(FTPClientUnitTest.java:110)\n{noformat}\n",
            "resolved": "2011-03-02",
            "versions": [
                "2.0"
            ],
            "fixVersions": [
                "3.0"
            ]
        },
        {
            "issue_id": "NET-268",
            "project": "Commons Net",
            "title": "SubnetUtilsTest  does not include any tests for CIDR with /30, /31, /32",
            "type": "Bug",
            "description": "SubnetUtilsTest  does not include any tests for CIDRs with masks of /30, /31, /32\n\nIt only includes tests for /8 /16 /24 and /29, plus a test for the (invalid) /0.",
            "resolved": "2011-03-31",
            "versions": [
                "2.0"
            ],
            "fixVersions": [
                "3.0"
            ]
        },
        {
            "issue_id": "NET-266",
            "project": "Commons Net",
            "title": "FTPClient.listFiles() corrupts file name in certain circumstances",
            "type": "Bug",
            "description": "A directory on the FTP server contains the following files:\nabc def ghi.csv\n123 abc ghi.csv\n123 abc 456.csv\n123 456 abc.csv\n\nWhen calling FTPClient.listFiles on the above directory the filenames returned in the FTPFile[] are as follows:\nabc def ghi.csv\n123 abc ghi.csv\n123 abc 456.csv\nabc.csv\n\nAs this shows, the filename 123 456 abc.csv is being truncated and returned as abc.csv.  This appears to be the case for all filenames that follow a pattern of 'number group' 'space' 'number group' 'space' 'character group'",
            "resolved": "2009-04-03",
            "versions": [
                "2.0"
            ],
            "fixVersions": [
                "2.2"
            ]
        },
        {
            "issue_id": "NET-265",
            "project": "Commons Net",
            "title": "UnixFTPEntryParser fails to parse entry in certain conditions",
            "type": "Bug",
            "description": "The UnixFTPEntryParser fails to parse following entry:\n-rw-r--r--   1 ftpuser  ftpusers 12414535 Mar 17 11:07 test 1999 abc.pdf\n\nBecause of the fact that the group name may contain spaces, it is extended in this case to \"ftpusers 12414535 Mar\".\nThis happens because there is only one space between the group name an the file size (occurs (in my case) if the file size has eight or more digits). Additionally the file name contains spaces and the \"second part\" of the file name is a number. (Seems to be an odd case, but obviously it sometimes emerges.)\n\nThe problem does not occur if a numeric date is used (\"2008-03-19\"). So I made the regex for the standard date (\"Mar 19\") more specific in a way that the month may only contain characters ([a-zA-Z]). Right now all non-whitespace characters are allowed (\\S). The patch is attached.",
            "resolved": "2009-03-19",
            "versions": [
                "2.0"
            ],
            "fixVersions": [
                "2.2"
            ]
        },
        {
            "issue_id": "NET-264",
            "project": "Commons Net",
            "title": "Telnet spyStream NullPointerException",
            "type": "Bug",
            "description": "Calling stopSpyStream on TelnetClient sets spyStream to null without regard to whether _spyRead or _spyWrite are being invoked on another thread. \n\nResulting NPE in _spyRead/_spy_Write is caught in TelnetInputStream.run() which goes on to close the stream.\n\nMay be able to fix by taking local copy of spyStream (which ought also to be volatile) in both of _spyRead and _spyWrite. E.g. for _spyRead:\n\n    void _spyRead(int ch)\n    {\n        OutputStream _spyStream = spyStream;\n        \n        if (_spyStream != null)\n        {\n            try\n            {\n                if (ch != '\\r')\n                {\n                    _spyStream.write(ch);\n                    if (ch == '\\n')\n                    {\n                        _spyStream.write('\\r');\n                    }\n                    _spyStream.flush();\n                }\n            }\n            catch (IOException e)\n            {\n                spyStream = null;\n            }\n        }\n    }",
            "resolved": "2010-05-11",
            "versions": [
                "2.0"
            ],
            "fixVersions": [
                "2.2"
            ]
        },
        {
            "issue_id": "NET-262",
            "project": "Commons Net",
            "title": "SubnetUtils does not handle /31 and /32 CIDRs well",
            "type": "Bug",
            "description": "SubnetUtils does not handle /31 and /32 CIDRs well.\n\nThis should be documented and/or fixed.\n\n192.168.0.1/32 causes an IllegalArgumentException to be thrown (by the way, that should show the upper and lower bounds)\n\n192.168.0.3/31 gives \naddressCount=0, \nlow =192.168.0.3 \nhigh=192.168.0.2\nand 192.168.0.3 is rejected as not in range",
            "resolved": "2009-07-20",
            "versions": [
                "2.0"
            ],
            "fixVersions": [
                "2.2"
            ]
        },
        {
            "issue_id": "NET-261",
            "project": "Commons Net",
            "title": "SubnetUtils.SubnetInfo.isInRange(...) behaviour is not documented",
            "type": "Bug",
            "description": "The beahviour of SubnetUtils.SubnetInfo.isInRange(...) is not documented.\n\nIs it supposed to be a strict range check, including both .0 and .255?\nOr is it a range check excluding .0 and .255?",
            "resolved": "2009-04-04",
            "versions": [
                "2.0"
            ],
            "fixVersions": [
                "2.2"
            ]
        },
        {
            "issue_id": "NET-260",
            "project": "Commons Net",
            "title": "SubnetUtils.SubnetInfo.isInRange(...) returns incorrect values",
            "type": "Bug",
            "description": "SubnetUtils class handles IP addresses as int (which in Java is signed).\nisInRange() method does not take this into account:\n{code}\nprivate boolean isInRange(int address) {\n    return ((address-low()) <= (high()-low()));\n}\n{code}\n\nIn following code snippet isInRange() returns true, when clearly 120.0.0.0 is outside the range: 192.168.12.0 - 192.168.13.255\n(see http://compnetworking.about.com/od/workingwithipaddresses/a/cidr_notation.htm)\n{code}\nString cidrNotation = \"192.168.12.0/23\";\nSubnetUtils.SubnetInfo info = new SubnetUtils(cidrNotation).getInfo();\nassertFalse(info.isInRange(\"120.0.0.0\")); // fails\n{code}",
            "resolved": "2009-03-10",
            "versions": [
                "2.0"
            ],
            "fixVersions": [
                "2.2"
            ]
        },
        {
            "issue_id": "NET-259",
            "project": "Commons Net",
            "title": "UnixFTPEntryParser regex does not match some directory entries",
            "type": "Bug",
            "description": "The following directory entries are not parsed by the UnixFTPEntryParser:\n\n{code}\ndrwxr-x---+1464 chrism   chrism     41472 Feb 25 13:17 20090225\ndrwxr-x---+1465 chrism   chrism     41984 Feb 28 07:15 20090226\ndrwxr-x---+1465 chrism   chrism     41984 Feb 28 07:15 20090227\n{code}\n\nThe root cause is that the REGEX used to parse these Strings expects there is at least one space between the first '+' and the following decimal characters.\n\nThe REGEX format is:\n\n{noformat}\n<.......>\n(((r|-)(w|-)([xsStTL-]))((r|-)(w|-)([xsStTL-]))((r|-)(w|-)([xsStTL-])))\\\\+?\\\\s+\n<.......>\n\nThe problem is the pattern \\\\s+, it should be \\\\s*\n{noformat}\n\nChris M.\n\n\n",
            "resolved": "2009-03-19",
            "versions": [
                "2.0"
            ],
            "fixVersions": [
                "2.2"
            ]
        },
        {
            "issue_id": "NET-257",
            "project": "Commons Net",
            "title": "FTP.getReplyStrings() returns array of null Strings",
            "type": "Bug",
            "description": "The 2.0 implementation of FTP.getReplyStrings() returns an array of null Strings instead of the actual reply text. Here is the current method:\n\n{{String[] lines;}}\n{{lines = new String[_replyLines.size()];}}\n{{_replyLines.addAll(Arrays.asList(lines));}}\n{{return lines;}}\n\nI believe the correction is to replace the above code with something like:\n\n{{return _replyLines.toArray(new String[0]);}}\n",
            "resolved": "2009-02-19",
            "versions": [
                "2.0"
            ],
            "fixVersions": [
                "2.2"
            ]
        },
        {
            "issue_id": "NET-250",
            "project": "Commons Net",
            "title": "DefaultFTPFileEntryParserFactory Does not work with Netware FTP server returning \"NETWARE TYPE: L8\"",
            "type": "Bug",
            "description": "We have just being trying to upgrade from the old NetComponents-1.3.8 to the new apache commons-net-2.0  The only thing we really needed to do is to change some imports and our project compiled.\n\nThe problem is that listFiles does not work any more with our netware ftp server! I have done some debugging and found that the problem is when creating a FTPFileEntryParser from the class DefaultFTPFileEntryParserFactory it returns a Unix entry parser due the code:\n\n{code}\n            if ((ukey.indexOf(FTPClientConfig.SYST_UNIX) >= 0) \n\t            \t\t|| (ukey.indexOf(FTPClientConfig.SYST_L8) >= 0))\n\t            {\n\t                parser = createUnixFTPEntryParser();\n\t            }\n{code}\n\nI understand that the SYST_L8 is used to identify that the system is unknown and so per default takes the UNIX server, however our FTP server returns \"NETWARE TYPE: L8\" and should really be identified as a netware server. maybe this L8 test could be done at the end of these massive if, else statements?\n\nIn the meanwhile i have created by own FTPFileEntryParserFactory which does this and it works. The question is, is it a bug and should this change also be done in the commons?\n",
            "resolved": "2009-02-05",
            "versions": [],
            "fixVersions": [
                "2.2"
            ]
        },
        {
            "issue_id": "NET-249",
            "project": "Commons Net",
            "title": "FtpClient hangs 20 minutes in FTPClient.completePendingCommand from retrieveFile or listFiles",
            "type": "Bug",
            "description": "I have a Ftp Client with several connections in multi-thread that connects to a remote Ftp Server to list files and download new ones.\n\nAfter 3 minutes of runtime, I get a 20-minute timeout for all running Ftp connections.\n\nHere are the logs for 1 thread :\n{noformat}\n20090114 142216 (Command Sent Message): PASV\n20090114 142216 (Reply Received Message): 227 Entering Passive Mode (10,250,10,116,224,172)\n20090114 142216 (Command Sent Message): LIST /Dir1/Dir2/Dir3\n20090114 142216 (Reply Received Message): 150 Opening BINARY mode data connection for /bin/ls.\n20090114 142216 (Reply Received Message): 226 Transfer complete.\n20090114 142216 (Command Sent Message): PASV\n20090114 142216 (Reply Received Message): 227 Entering Passive Mode (10,250,10,116,138,240)\n20090114 142216 (Command Sent Message): RETR /Dir1/Dir2/Dir3/File1\n20090114 142216 (Reply Received Message): 150 Opening BINARY mode data connection for /Dir1/Dir2/Dir3/File1 (12364 bytes).\n*** 20 minutes without any message ***\n20090114 144216 (Reply Received Message): 426 Data connection: Interrupted system call.\n20090114 144216 (Command Sent Message): PASV\n20090114 144216 (Reply Received Message): 227 Entering Passive Mode (10,250,10,116,109,169)\n20090114 144216 (Command Sent Message): RETR /Dir1/Dir2/Dir3/File1\n20090114 144216 (Reply Received Message): 150 Opening BINARY mode data connection for /Dir1/Dir2/Dir3/File2 (12387 bytes).\n20090114 144216 (Reply Received Message): 226 Transfer complete.\n{noformat}\n\nHere are the logs for another thread :\n{noformat}\n20090114 142216 (Command Sent Message): PASV\n20090114 142216 (Reply Received Message): 227 Entering Passive Mode (10,250,10,116,174,233)\n20090114 142216 (Command Sent Message): RETR /DirA/DirB/DirC/FileA\n20090114 142216 (Reply Received Message): 150 Opening BINARY mode data connection for /DirA/DirB/DirC/FileA (14209 bytes).\n20090114 142216 (Reply Received Message): 226 Transfer complete.\n20090114 142216 (Command Sent Message): PASV\n20090114 142216 (Reply Received Message): 227 Entering Passive Mode (10,250,10,116,202,81)\n20090114 142216 (Command Sent Message): LIST /DirA/DirB/DirD\n20090114 142216 (Reply Received Message): 150 Opening BINARY mode data connection for /bin/ls.\n*** 20 minutes without any message ***\n20090114 144216 (Reply Received Message): 426 Data connection: Interrupted system call.\n20090114 144216 (Command Sent Message): PASV\n20090114 144216 (Reply Received Message): 227 Entering Passive Mode (10,250,10,116,11,16)\n20090114 144216 (Command Sent Message): RETR /DirA/DirB/DirD/FileB\n20090114 144216 (Reply Received Message): 150 Opening BINARY mode data connection for /DirA/DirB/DirD/FileB (14145 bytes).\n{noformat}\n\nSo it happens during LIST or during RETR command.\n\nThe issue is always reproducible when connecting to this Ftp server.\n\nWhat is the meaning of the error message \"426 Data connection: Interrupted system call.\" ?\n\n\nHere are the stack-traces where the FtpClient is blocked during 20 minutes.\n\nFor 1st connection :\n{noformat}\nStack 30 - Wed Jan 14 14:40:00 CET 2009\n\"FTPMediationTask\" prio=3 tid=0x00aac800 nid=0x156 runnable [0x6877e000..0x6877fb70]\n   java.lang.Thread.State: RUNNABLE\n\tat java.net.SocketInputStream.socketRead0(Native Method)\n\tat java.net.SocketInputStream.read(SocketInputStream.java:129)\n\tat sun.nio.cs.StreamDecoder.readBytes(StreamDecoder.java:264)\n\tat sun.nio.cs.StreamDecoder.implRead(StreamDecoder.java:306)\n\tat sun.nio.cs.StreamDecoder.read(StreamDecoder.java:158)\n\t- locked <0x8fc23880> (a java.io.InputStreamReader)\n\tat java.io.InputStreamReader.read(InputStreamReader.java:167)\n\tat java.io.BufferedReader.fill(BufferedReader.java:136)\n\tat java.io.BufferedReader.readLine(BufferedReader.java:299)\n\t- locked <0x8fc23880> (a java.io.InputStreamReader)\n\tat java.io.BufferedReader.readLine(BufferedReader.java:362)\n\tat org.apache.commons.net.ftp.FTP.__getReply(FTP.java:294)\n\tat org.apache.commons.net.ftp.FTP.getReply(FTP.java:619)\n\tat org.apache.commons.net.ftp.FTPClient.completePendingCommand(FTPClient.java:1244)\n\tat org.apache.commons.net.ftp.FTPClient.initiateListParsing(FTPClient.java:2309)\n\tat org.apache.commons.net.ftp.FTPClient.initiateListParsing(FTPClient.java:2269)\n\tat org.apache.commons.net.ftp.FTPClient.listFiles(FTPClient.java:2046)\n[...]\n\tat java.util.concurrent.ThreadPoolExecutor$Worker.runTask(ThreadPoolExecutor.java:885)\n\tat java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:907)\n\tat java.lang.Thread.run(Thread.java:619)\n{noformat}\n\nAnd for the second connection :\n{noformat}\nStack 27 - Wed Jan 14 14:37:00 CET 2009\n\"FTPMediationTask\" prio=3 tid=0x0140b800 nid=0xe7 runnable [0x6967e000..0x6967f8f0]\n   java.lang.Thread.State: RUNNABLE\n\tat java.net.SocketInputStream.socketRead0(Native Method)\n\tat java.net.SocketInputStream.read(SocketInputStream.java:129)\n\tat sun.nio.cs.StreamDecoder.readBytes(StreamDecoder.java:264)\n\tat sun.nio.cs.StreamDecoder.implRead(StreamDecoder.java:306)\n\tat sun.nio.cs.StreamDecoder.read(StreamDecoder.java:158)\n\t- locked <0x7ea6cd20> (a java.io.InputStreamReader)\n\tat java.io.InputStreamReader.read(InputStreamReader.java:167)\n\tat java.io.BufferedReader.fill(BufferedReader.java:136)\n\tat java.io.BufferedReader.readLine(BufferedReader.java:299)\n\t- locked <0x7ea6cd20> (a java.io.InputStreamReader)\n\tat java.io.BufferedReader.readLine(BufferedReader.java:362)\n\tat org.apache.commons.net.ftp.FTP.__getReply(FTP.java:294)\n\tat org.apache.commons.net.ftp.FTP.getReply(FTP.java:619)\n\tat org.apache.commons.net.ftp.FTPClient.completePendingCommand(FTPClient.java:1244)\n\tat org.apache.commons.net.ftp.FTPClient.retrieveFile(FTPClient.java:1301)\n[...]\n\tat java.util.concurrent.ThreadPoolExecutor$Worker.runTask(ThreadPoolExecutor.java:885)\n\tat java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:907)\n\tat java.lang.Thread.run(Thread.java:619)\n{noformat}\n\nThe issue originally happened on commons-net 1.4, but I have upgraded to 2.0, and the issue is still there.\n\n\nHere is the normal configuration :\nClient1 connects to FtpServer to download files -> No issue\nClient2 connects to FtpServer to download files -> 20-min timeout issue\n(Client1 and Client2 are 2 different servers)\n\nBut when I try : Client2 connects to Client1 (instead of FtpServer) to download files -> No issue\n\nPlease help me find out a workaround or tell me if this is a bug in commons-net, or on remote FtpServer (but this would be strange, because Client1 has no issue)\n\nThanks in advance\n",
            "resolved": "2011-09-18",
            "versions": [
                "1.4",
                "2.0"
            ],
            "fixVersions": []
        },
        {
            "issue_id": "NET-248",
            "project": "Commons Net",
            "title": "half-baked commands list in FTPCommand",
            "type": "Bug",
            "description": "in version 2.0\nthe \"MDTM\" has been add into supporting.\n\n/** @since 2.0 */\n    public static final int MDTM = 33;\n\n\nbut the commands list \"static final String[] _commands = {\" is halt-baked.\nshould be:\nstatic final String[] _commands = {\n                                          \"USER\", \"PASS\", \"ACCT\", \"CWD\", \"CDUP\", \"SMNT\", \"REIN\", \"QUIT\", \"PORT\",\n                                          \"PASV\", \"TYPE\", \"STRU\", \"MODE\", \"RETR\", \"STOR\", \"STOU\", \"APPE\", \"ALLO\",\n                                          \"REST\", \"RNFR\", \"RNTO\", \"ABOR\", \"DELE\", \"RMD\", \"MKD\", \"PWD\", \"LIST\",\n                                          \"NLST\", \"SITE\", \"SYST\", \"STAT\", \"HELP\", \"NOOP\",\"MDTM\",\n                                      };\n\nbut\nstatic final String[] _commands = {\n                                          \"USER\", \"PASS\", \"ACCT\", \"CWD\", \"CDUP\", \"SMNT\", \"REIN\", \"QUIT\", \"PORT\",\n                                          \"PASV\", \"TYPE\", \"STRU\", \"MODE\", \"RETR\", \"STOR\", \"STOU\", \"APPE\", \"ALLO\",\n                                          \"REST\", \"RNFR\", \"RNTO\", \"ABOR\", \"DELE\", \"RMD\", \"MKD\", \"PWD\", \"LIST\",\n                                          \"NLST\", \"SITE\", \"SYST\", \"STAT\", \"HELP\", \"NOOP\",\n                                      };\nright now,at released version.",
            "resolved": "2009-02-05",
            "versions": [
                "2.0"
            ],
            "fixVersions": [
                "2.2"
            ]
        },
        {
            "issue_id": "NET-247",
            "project": "Commons Net",
            "title": "NullPointerException after connect() in FTPClient",
            "type": "Bug",
            "description": "ftpClient = new FtpClient();\nftpClient.connect(\"ftp.mozilla.org\", Integer.parseInt(textPort.getText()));\nSystem.out.print(ftpClient.getReplyString()); //returns null\nSystem.out.print(ftpClient.getReplyCode()); //returns 0\nftpClient.login(\"anonymous\", \"blah@blah.ch\"); //NullPointerException\n\nwhen i use these values in lftp i get:\noli@lucymobile:~$ lftp \nlftp :~> open ftp.mozilla.org\nlftp ftp.mozilla.org:~> USER anonymous blah@blah.ch\nlftp anonymous@ftp.mozilla.org:~> ls\n-rw-r--r--    1 ftp      ftp           528 Nov 01  2007 README\n-rw-r--r--    1 ftp      ftp           560 Sep 28  2007 index.html\ndrwxr-xr-x   33 ftp      ftp          4096 Aug 12 04:00 pub\n/* same happens when i try  with my application to connect to localhost (vsftpd):\nSun Dec 28 11:44:32 2008 [pid 12840] CONNECT: Client \"127.0.0.1\"\nthen it stops logging because the application returns the exception */\n\nthe complete output of the application:\nException in thread \"AWT-EventQueue-0\" java.lang.NullPointerException\n        at org.apache.commons.net.ftp.FTP.sendCommand(FTP.java:471)\n        at org.apache.commons.net.ftp.FTP.sendCommand(FTP.java:534)\n        at wicked.FtpClient.user(FtpClient.java:74)\n        at wicked.FtpClient.login(FtpClient.java:58)\n        at wicked.MainWindow.buttonTestFTPServerActionPerformed(MainWindow.java:887)\n        at wicked.MainWindow.access$1300(MainWindow.java:35)\n        at wicked.MainWindow$14.actionPerformed(MainWindow.java:417)\n        at javax.swing.AbstractButton.fireActionPerformed(AbstractButton.java:2012)\n        at javax.swing.AbstractButton$Handler.actionPerformed(AbstractButton.java:2335)\n        at javax.swing.DefaultButtonModel.fireActionPerformed(DefaultButtonModel.java:404)\n        at javax.swing.DefaultButtonModel.setPressed(DefaultButtonModel.java:259)\n        at javax.swing.plaf.basic.BasicButtonListener.mouseReleased(BasicButtonListener.java:253)\n        at java.awt.Component.processMouseEvent(Component.java:6108)\n        at javax.swing.JComponent.processMouseEvent(JComponent.java:3276)\n        at java.awt.Component.processEvent(Component.java:5873)\n        at java.awt.Container.processEvent(Container.java:2105)\n        at java.awt.Component.dispatchEventImpl(Component.java:4469)\n        at java.awt.Container.dispatchEventImpl(Container.java:2163)\n        at java.awt.Component.dispatchEvent(Component.java:4295)\n        at java.awt.LightweightDispatcher.retargetMouseEvent(Container.java:4461)\n        at java.awt.LightweightDispatcher.processMouseEvent(Container.java:4125)\n        at java.awt.LightweightDispatcher.dispatchEvent(Container.java:4055)\n        at java.awt.Container.dispatchEventImpl(Container.java:2149)\n        at java.awt.Window.dispatchEventImpl(Window.java:2478)\n        at java.awt.Component.dispatchEvent(Component.java:4295)\n        at java.awt.EventQueue.dispatchEvent(EventQueue.java:604)\n        at java.awt.EventDispatchThread.pumpOneEventForFilters(EventDispatchThread.java:275)\n        at java.awt.EventDispatchThread.pumpEventsForFilter(EventDispatchThread.java:200)\n        at java.awt.EventDispatchThread.pumpEventsForHierarchy(EventDispatchThread.java:190)\n        at java.awt.EventDispatchThread.pumpEvents(EventDispatchThread.java:185)\n        at java.awt.EventDispatchThread.pumpEvents(EventDispatchThread.java:177)\n        at java.awt.EventDispatchThread.run(EventDispatchThread.java:138)",
            "resolved": "2008-12-28",
            "versions": [
                "2.0"
            ],
            "fixVersions": []
        },
        {
            "issue_id": "NET-242",
            "project": "Commons Net",
            "title": "Method createServerSocket of FTPSSocketFactory will never be called and thus UseClientMode is incorrect in a secured ftp transfer using active mode. ",
            "type": "Bug",
            "description": "When the data channel is secured and we are using Active mode , we need to set UseClientMode to true in the FTP Client so even though the FtpServer is initiating the connection, he is the \"server\" in the SSL handshake.\n\nIn the current code , this is done in the method init() called by createServerSocket() in FTPSSocketFactory. But this method is never called as we create ServerSockets using a ServerSocketFactory.  \n\nThe solution is to create a FTPSServerSocketFactory which takes the responsibility of creating ServerSockets.  \n\nFix provided.\n\n",
            "resolved": "2009-02-05",
            "versions": [],
            "fixVersions": [
                "2.2"
            ]
        },
        {
            "issue_id": "NET-241",
            "project": "Commons Net",
            "title": "FTPClient Can't be configured with SYST_NT",
            "type": "Bug",
            "description": "while coding as below:\nFTPClient ftp = new FTPClient();\nint reply;\n\nftp.connect(\"10.110.13.18\",2001);\n\nftp.login(\"user\",\"password\");\n//  ... // transfer files\nftp.type(FTPClient.ASCII_FILE_TYPE);\n\nFTPFile[] temp = ftp.listFiles();\nSystem.out.println(temp.length);\nfor (int i = 0; i < temp.length; i++)\n{\n\tSystem.out.println(temp[i].getName());\n}; //filtered all the files\n\nit would report there's 3 files on the ftp server and there name,But if coding as below:\n\nFTPClientConfig conf = new FTPClientConfig(FTPClientConfig.SYST_NT);\nFTPClient ftp = new FTPClient();\nint reply;\n\nftp.configure(conf);\nftp.connect(\"10.110.13.18\",2001);\n\nftp.login(\"user\",\"password\");\n//  ... // transfer files\nftp.type(FTPClient.ASCII_FILE_TYPE);\n\nFTPFile[] temp = ftp.listFiles();\nSystem.out.println(temp.length);\nfor (int i = 0; i < temp.length; i++)\n{\n\tSystem.out.println(temp[i].getName());\n}; //filtered all the files\n\nit would report there's 0 file on the ftp server and raise no error.",
            "resolved": "2009-02-05",
            "versions": [
                "2.0"
            ],
            "fixVersions": []
        },
        {
            "issue_id": "NET-240",
            "project": "Commons Net",
            "title": "FTPClient can't support Chinese or Japanese language in listFiles()",
            "type": "Bug",
            "description": "while coding as below:\nFTPClient ftp = new FTPClient();\nint reply;\n\nftp.connect(\"10.110.13.18\",2001);\n\nftp.login(\"user\",\"password\");\n//  ... // transfer files\nftp.type(FTPClient.ASCII_FILE_TYPE);\n\nFTPFile[] temp = ftp.listFiles();\nSystem.out.println(temp.length);\nfor (int i = 0; i < temp.length; i++)\n{\n\tSystem.out.println(temp[i].getName());\n}; //filtered all the files\n\nif the remote ftp server has a Chinese or Japanese file, then it would print a massive text on screen.",
            "resolved": "2010-03-08",
            "versions": [
                "2.0"
            ],
            "fixVersions": []
        },
        {
            "issue_id": "NET-239",
            "project": "Commons Net",
            "title": "FTP client does not work in Active Mode.",
            "type": "Bug",
            "description": "When using FTPClient (under some circumstances?) the reported ip in a PORT command is 127.0.0.1 so the data connection can't be established.\n\nIt seems Version 1.4 also suffered from this bug. \n\nI am using JDK 1.5/1.6 under Windows Vista.\n\n\nSample code:\n\npublic static void main(String[] args) throws Exception {\n        // TODO code application logic here\n        FTPClient client = new FTPClient();\n        client.addProtocolCommandListener(new PrintCommandListener(System.out) );\n       // client=setTruststore(client);\n        client.connect(\"ftp.server.com\", 21);\n        client.login(\"user\", \"password\");\n        String[] lista = client.listNames();\n        for (String el : lista) {\n            System.out.println(el);\n        }\n        client.disconnect();\n    }\n\n",
            "resolved": "2008-11-06",
            "versions": [
                "2.0"
            ],
            "fixVersions": []
        },
        {
            "issue_id": "NET-238",
            "project": "Commons Net",
            "title": "RCommandClient wrongly attempts to use local socket with priviledged port (specifically >511 && <1024)",
            "type": "Bug",
            "description": "I see a few instances of this around:\n\n        int localPort;\n\n        localPort = MAX_CLIENT_PORT;\n\n        for (localPort = MAX_CLIENT_PORT; localPort >= MIN_CLIENT_PORT; --localPort)\n        {\n            try\n            {\n                _socket_ =\n                    _socketFactory_.createSocket(host, port, localAddr, localPort);\n            }\n            catch (SocketException e)\n            {\n                continue;\n            }\n            break;\n        }\n\n        if (localPort < MIN_CLIENT_PORT)\n            throw new BindException(\"All ports in use or insufficient permssion.\");\n\nYet, this seems to be an error. I can manually issue the rlogin command on my shell and everything just works. After doing it directly from my shell, a netstat -a reveals that I'm using an unpriviledged port on my client side.... why is RCommandClient attempting to use a priviledged port??\n",
            "resolved": "2008-11-04",
            "versions": [
                "2.0"
            ],
            "fixVersions": []
        },
        {
            "issue_id": "NET-236",
            "project": "Commons Net",
            "title": "method SubnetUtils.SubnetInfo.isInRange(addr) returns incorrect result",
            "type": "Bug",
            "description": "current implementation failing to check low limit:\n{code}\nprivate boolean isInRange(int address)      { return ((address-low()) <= (high()-low())); }\n{code}\n\nsuggested fix:\n{code}\nprivate boolean isInRange(int address)      { \n    normal = address-low();\n    return (normal>=0 && (normal <= (high()-low())));\n}\n{code}",
            "resolved": "2009-02-05",
            "versions": [
                "2.0"
            ],
            "fixVersions": [
                "2.2"
            ]
        },
        {
            "issue_id": "NET-234",
            "project": "Commons Net",
            "title": "Telnet Connector failing if input is more than 76 characters",
            "type": "Bug",
            "description": "I try to connect to an HP-UX box and fire this command:\nvtadmin check queue /Servers/bserv10400_vit_core/WipMailProcessor/ClarifyQueue\n\nBy trial and error i have found that since this command is longer than 76 characters the readuntil() in TelnetClient fails and doesnt give proper output.\n\nAny help would be highly appreciated.",
            "resolved": "2009-03-22",
            "versions": [
                "1.4"
            ],
            "fixVersions": []
        },
        {
            "issue_id": "NET-233",
            "project": "Commons Net",
            "title": "TFTPClient.sendFile doesn't work in binary mode",
            "type": "Bug",
            "description": "The TFTPClient class won't send a file in binary mode.\n\nTo reproduce:\n\n1. Compile examples.tftp\n2. java -cp <classpath> examples.tftp -s -b 192.168.35.239 virt_shell.sh.gz virt_shell.sh.gz\n\ntftp program ends without error.\n\nThe file virt_shell.sh.gz shows up on the destination host, but has zero bytes.  The following messages are generated by tftpd (which has the -v option turned on).\n\nSep  9 10:59:08 balexander-dev-env in.tftpd[3266]: WRQ from 192.168.35.55 filename virt_shell.sh.gz\nSep  9 10:59:09 balexander-dev-env in.tftpd[3266]: tftpd: read: Connection refused\n\n\n",
            "resolved": "2008-12-01",
            "versions": [
                "1.4"
            ],
            "fixVersions": []
        },
        {
            "issue_id": "NET-232",
            "project": "Commons Net",
            "title": "calling Telnet.disconnect without calling Telnet.connect make use of null pointer ",
            "type": "Bug",
            "description": "Calling Telnet.disconnect without calling Telnet.connect make use of null pointer.",
            "resolved": "2009-02-05",
            "versions": [
                "1.4"
            ],
            "fixVersions": [
                "1.5"
            ]
        },
        {
            "issue_id": "NET-231",
            "project": "Commons Net",
            "title": "ParserInitializationException for a couple of server types (AS/400 and UNKNOWN Type: L8)",
            "type": "Bug",
            "description": "Was getting an error when connecting to one of our vendor file servers that was returning \"215 UNKNOWN Type: L8\" for a SYST command.\n\nThe DefaultFTPFileEntryParserFactory does a toUpperCase on the key, which was then being compared to the constant SYST_L8.\n\nThat constant was \"Type: L8\", so it could never match.\n\nAlso some systems respond as \"AS/400\" instead of \"OS/400\", so added the check for that string.\n\nPatch below and attached for 1.5, see issue NET-320 for patch for 2.0\n\n# This patch file was generated by NetBeans IDE\n# Following Index: paths are relative to: C:\\Documents and Settings\\robw\\My Documents\\NetBeansProjects\\trunk\n# This patch can be applied using context Tools: Patch action on respective folder.\n# It uses platform neutral UTF-8 encoding and \\n newlines.\n# Above lines and this line are ignored by the patching process.\nIndex: src/java/org/apache/commons/net/ftp/FTPClientConfig.java\n--- src/java/org/apache/commons/net/ftp/FTPClientConfig.java Base (BASE)\n+++ src/java/org/apache/commons/net/ftp/FTPClientConfig.java Locally Modified (Based On LOCAL)\n@@ -171,7 +171,13 @@\n      */\n     public static final String SYST_OS400 = \"OS/400\";\n     \n+\n     /**\n+     * Alternate SYST value for an AS/400 system.\n+     */\n+    public static final String SYST_AS400 = \"AS/400\";\n+\n+    /**\n      * Identifier by which an MVS-based ftp server is known throughout\n      * the commons-net ftp system.\n      */\n@@ -185,7 +191,7 @@\n      *\n      * @since 1.5\n      */\n-    public static final String SYST_L8 = \"Type: L8\";\n+    public static final String SYST_L8 = \"TYPE: L8\";\n \n     /**\n      * Identifier by which an Netware-based ftp server is known throughout\nIndex: src/java/org/apache/commons/net/ftp/parser/DefaultFTPFileEntryParserFactory.java\n--- src/java/org/apache/commons/net/ftp/parser/DefaultFTPFileEntryParserFactory.java Base (BASE)\n+++ src/java/org/apache/commons/net/ftp/parser/DefaultFTPFileEntryParserFactory.java Locally Modified (Based On LOCAL)\n@@ -109,7 +109,8 @@\n                 {\n                     parser = createOS2FTPEntryParser();\n                 }\n-                else if (ukey.indexOf(FTPClientConfig.SYST_OS400) >= 0)\n+                else if ((ukey.indexOf(FTPClientConfig.SYST_OS400) >= 0)\n+                    || (ukey.indexOf(FTPClientConfig.SYST_AS400) >= 0))\n                 {\n                     parser = createOS400FTPEntryParser();\n                 }\nIndex: src/test/org/apache/commons/net/ftp/parser/DefaultFTPFileEntryParserFactoryTest.java\n--- src/test/org/apache/commons/net/ftp/parser/DefaultFTPFileEntryParserFactoryTest.java Base (BASE)\n+++ src/test/org/apache/commons/net/ftp/parser/DefaultFTPFileEntryParserFactoryTest.java Locally Modified (Based On LOCAL)\n@@ -62,6 +62,15 @@\n         parser = factory.createFileEntryParser(\"OS/400\");\n         assertTrue(parser instanceof CompositeFileEntryParser);\n \n+        parser = factory.createFileEntryParser(\"AS/400\");\n+        assertTrue(parser instanceof CompositeFileEntryParser);\n+\n+        // Added test to make sure it handles the Unix systems that were\n+        // compiled with OS as \"UNKNOWN\". This test validates that the\n+        // check is case-insensitive.\n+        parser = factory.createFileEntryParser(\"UNKNOWN Type: L8\");\n+\n+\n         try {\n             parser = factory.createFileEntryParser(\"OS2FTPFileEntryParser\");\n             fail(\"Exception should have been thrown. \\\"OS2FTPFileEntryParser\\\" is not a recognized key\");\n",
            "resolved": "2011-11-01",
            "versions": [
                "1.4"
            ],
            "fixVersions": [
                "1.5"
            ]
        },
        {
            "issue_id": "NET-230",
            "project": "Commons Net",
            "title": "ParserInitializationException when connecting to a Unix FTP server",
            "type": "Bug",
            "description": "Was getting an error when connecting to one of our vendor file servers that was returning \"215 UNKNOWN Type: L8\" for a SYST command.\n\nThe DefaultFTPFileEntryParserFactory does a toUpperCase on the key, which was then being compared to the constant SYST_L8.\n\nThat constant was \"Type: L8\", so it could never match.\n\nHere's the patch (also attached as a file):\n\n# This patch file was generated by NetBeans IDE # Following Index: paths are relative to: C:\\Documents and Settings\\robw\\My Documents\\NetBeansProjects\\NET_2_0\n# This patch can be applied using context Tools: Patch action on respective folder.\n# It uses platform neutral UTF-8 encoding and \\n newlines.\n# Above lines and this line are ignored by the patching process.\nIndex: src/main/java/org/apache/commons/net/ftp/FTPClientConfig.java\n--- src/main/java/org/apache/commons/net/ftp/FTPClientConfig.java Base\n(BASE)\n+++ src/main/java/org/apache/commons/net/ftp/FTPClientConfig.java\nLocally Modified (Based On LOCAL)\n@@ -190,9 +190,12 @@\n      * This may happen if the ftpd in question was compiled without system\n      * information.\n      *\n+     * 2008-Aug-07 - Updated to be UPPERCASE so that the check done in\n+     * createFileEntryParser will succeed.\n+     *\n      * @since 1.5\n      */\n-    public static final String SYST_L8 = \"Type: L8\";\n+    public static final String SYST_L8 = \"TYPE: L8\";\n     \n     /**\n      * Identifier by which an Netware-based ftp server is known throughout\nIndex:\nsrc/test/java/org/apache/commons/net/ftp/parser/DefaultFTPFileEntryParse\nrFactoryTest.java\n---\nsrc/test/java/org/apache/commons/net/ftp/parser/DefaultFTPFileEntryParse\nrFactoryTest.java Base (BASE)\n+++\nsrc/test/java/org/apache/commons/net/ftp/parser/DefaultFTPFileEntryParse\nrFactoryTest.java Locally Modified (Based On LOCAL) @@ -62,6 +62,14 @@\n         parser = factory.createFileEntryParser(\"OS/400\");\n         assertTrue(parser instanceof CompositeFileEntryParser);\n \n+        parser = factory.createFileEntryParser(\"AS/400\");\n+        assertTrue(parser instanceof CompositeFileEntryParser);\n+\n+        // Added test to make sure it handles the Unix systems that\nwere\n+        // compiled with OS as \"UNKNOWN\". This test validates that the\n+        // check is case-insensitive.\n+        parser = factory.createFileEntryParser(\"UNKNOWN Type: L8\");\n+\n         try {\n             parser =\nfactory.createFileEntryParser(\"OS2FTPFileEntryParser\");\n             fail(\"Exception should have been thrown.\n\\\"OS2FTPFileEntryParser\\\" is not a recognized key\");\n\n",
            "resolved": "2008-08-15",
            "versions": [],
            "fixVersions": [
                "2.0"
            ]
        },
        {
            "issue_id": "NET-227",
            "project": "Commons Net",
            "title": "Support for cygwin",
            "type": "Bug",
            "description": "When the client sends a SYST command, the server responds with \"215 Cygwin Type: L8\".  The createFileEntryParser method of the DefaultFTPFileEntryParserFactory class does not have an entry in that block of if statements there to catch and work with Cygwin.  I am using a limited set of ftp commands in the project I'm working on, but so far everything seems to work fine when I alias Cygwin to unix.  I'm not sure if there are any other complexities around this, or if there is a better way to do this, but I'm sure y'all will know :)\n\nHere's what I added:\n\nFTPClientConfig.java\n\n    In the constant definitions at the beginning of the class starting at line 140, I added the following:\n\n    /**\n     * Identifier by which a unix emulation-based ftp server is known throughout\n     * the commons-net ftp system.\n     */\n\t\n    public static final String SYST_CYGWIN = \"CYGWIN\";\n\nDefaultFTPFileEntryParserFactory.java\n\n    In the first catch block starting at line 85 in the createFileEntryParser method, I added the following to the existing else if statements:\n\n    else if (ukey.indexOf(FTPClientConfig.SYST_CYGWIN) >= 0)\n    {\n        parser = createUnixFTPEntryParser();\n    }",
            "resolved": "2008-12-01",
            "versions": [
                "1.4"
            ],
            "fixVersions": [
                "2.0"
            ]
        },
        {
            "issue_id": "NET-226",
            "project": "Commons Net",
            "title": "Endless loop listing files on Windows NT FTP-Server",
            "type": "Bug",
            "description": "The framework repeatedly queries the contents of a remote ftp folder as well it's parent folder. It will do so indefinitely. Other ftp software can access the server without problems. I implemented a new class extending the UnixFTPEntryParser to intercept the requests and to print the following stack traces.",
            "resolved": "2008-07-09",
            "versions": [
                "1.4"
            ],
            "fixVersions": []
        },
        {
            "issue_id": "NET-225",
            "project": "Commons Net",
            "title": "FTPFileEntryParserImpl.preParse() doesn't remove unparsable entries at the end of the file list",
            "type": "Bug",
            "description": "I am using Ant 1.7.0 task to get files from our Embedded FTP server:\n<ftp server=\"${xxxximage.master.test.xxxx.ip}\"\n\tport=\"${xxxximage.master.test.xxxx.port}\"\n\tuserid=\"${xxxximage.master.test.xxxx.user}\"\n\tpassword=\"${xxxximage.master.test.xxxx.password}\"\n\tremotedir=\"${xxxximage.master.test.xxxx.dir}\"\n\tretriesAllowed=\"3\"\n\taction=\"get\"\n\tskipFailedTransfers=\"true\"\n\tsystemTypeKey=\"UNIX\"\n\t>\n    <fileset dir=\"${xxxximage.master.dist.test.nunit.dir}\">\n\t\t<include name=\"${xxxximage.master.test.xxxx.results}\"/>\n</fileset>\n</ftp>\nAnt task crashes with the following error message:\njava.lang.NullPointerException\n        at org.apache.tools.ant.dispatch.DispatchUtils.execute(DispatchUtils.jav\na:115)\n        at org.apache.tools.ant.Task.perform(Task.java:348)\n        at org.apache.tools.ant.Target.execute(Target.java:357)\n        at org.apache.tools.ant.Target.performTasks(Target.java:385)\n        at org.apache.tools.ant.Project.executeSortedTargets(Project.java:1329)\n        at org.apache.tools.ant.Project.executeTarget(Project.java:1298)\n        at org.apache.tools.ant.helper.DefaultExecutor.executeTargets(DefaultExe\ncutor.java:41)\n        at org.apache.tools.ant.Project.executeTargets(Project.java:1181)\n        at org.apache.tools.ant.Main.runBuild(Main.java:698)\n        at org.apache.tools.ant.Main.startAnt(Main.java:199)\n        at org.apache.tools.ant.launch.Launcher.run(Launcher.java:257)\n        at org.apache.tools.ant.launch.Launcher.main(Launcher.java:104)\nCaused by: java.lang.NullPointerException\n        at org.apache.tools.ant.taskdefs.optional.net.FTP$FTPDirectoryScanner.ch\neckRemoteSensitivity(FTP.java:583)\n        at org.apache.tools.ant.taskdefs.optional.net.FTP$FTPDirectoryScanner.fo\nrceRemoteSensitivityCheck(FTP.java:552)\n        at org.apache.tools.ant.taskdefs.optional.net.FTP$FTPDirectoryScanner.sc\nan(FTP.java:231)\n        at org.apache.tools.ant.taskdefs.optional.net.FTP.transferFiles(FTP.java\n:1570)\n        at org.apache.tools.ant.taskdefs.optional.net.FTP.transferFiles(FTP.java\n:1683)\n        at org.apache.tools.ant.taskdefs.optional.net.FTP.execute(FTP.java:2373)\n\n        at org.apache.tools.ant.UnknownElement.execute(UnknownElement.java:288)\n        at sun.reflect.GeneratedMethodAccessor2.invoke(Unknown Source)\n        at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAcces\nsorImpl.java:25)\n        at java.lang.reflect.Method.invoke(Method.java:585)\n        at org.apache.tools.ant.dispatch.DispatchUtils.execute(DispatchUtils.jav\na:105)\n        ... 11 more\n--- Nested Exception ---\njava.lang.NullPointerException\n        at org.apache.tools.ant.taskdefs.optional.net.FTP$FTPDirectoryScanner.ch\neckRemoteSensitivity(FTP.java:583)\n        at org.apache.tools.ant.taskdefs.optional.net.FTP$FTPDirectoryScanner.fo\nrceRemoteSensitivityCheck(FTP.java:552)\n        at org.apache.tools.ant.taskdefs.optional.net.FTP$FTPDirectoryScanner.sc\nan(FTP.java:231)\n        at org.apache.tools.ant.taskdefs.optional.net.FTP.transferFiles(FTP.java\n:1570)\n        at org.apache.tools.ant.taskdefs.optional.net.FTP.transferFiles(FTP.java\n:1683)\n        at org.apache.tools.ant.taskdefs.optional.net.FTP.execute(FTP.java:2373)\n\n        at org.apache.tools.ant.UnknownElement.execute(UnknownElement.java:288)\n        at sun.reflect.GeneratedMethodAccessor2.invoke(Unknown Source)\n        at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAcces\nsorImpl.java:25)\n        at java.lang.reflect.Method.invoke(Method.java:585)\n        at org.apache.tools.ant.dispatch.DispatchUtils.execute(DispatchUtils.jav\na:105)\n        at org.apache.tools.ant.Task.perform(Task.java:348)\n        at org.apache.tools.ant.Target.execute(Target.java:357)\n        at org.apache.tools.ant.Target.performTasks(Target.java:385)\n        at org.apache.tools.ant.Project.executeSortedTargets(Project.java:1329)\n        at org.apache.tools.ant.Project.executeTarget(Project.java:1298)\n        at org.apache.tools.ant.helper.DefaultExecutor.executeTargets(DefaultExe\ncutor.java:41)\n        at org.apache.tools.ant.Project.executeTargets(Project.java:1181)\n        at org.apache.tools.ant.Main.runBuild(Main.java:698)\n        at org.apache.tools.ant.Main.startAnt(Main.java:199)\n        at org.apache.tools.ant.launch.Launcher.run(Launcher.java:257)\n        at org.apache.tools.ant.launch.Launcher.main(Launcher.java:104)\n\nThe problem is in the Commons-Net library used internally by the Ant task.\nOur FTP server returns empty string at the end of the requested folder file list that causes the org.apache.commons.net.ftp.FtpClient.listFiles() method to return FTPFile array with null elements at the end, which in turn causes NullPointer exception in the org.apache.tools.ant.taskdefs.optional.net.FTP.checkRemoteSensivity() method.\n\nThe problem occurs because the org.apache.commons.net.ftp.FTPFileEntryParserImpl.preParse() methods designed to wipe off non-valid lines from the file list response doesn't remove trailing empty lines from response inspite of its Javadoc description: \"This default implementation removes entries that do not parse as files.\"\n\nThe issue can be fixed by removing\nelse {\n   break;\n}\nclause from the method's implementation.\n\nI have checked the HEAD version of the FTPFileEntryParserImpl.java file. The else{ break; } clause still remains there and I can reproduce issue with the HEAD version of the commons.net.ftp, thus I am assuming that the issue occurs in the commons-net 1.4.1 as well as in the latest development version.",
            "resolved": "2008-08-15",
            "versions": [
                "1.4",
                "2.1"
            ],
            "fixVersions": [
                "2.0"
            ]
        },
        {
            "issue_id": "NET-224",
            "project": "Commons Net",
            "title": "NullPointerException if in ftp-directory are files with creation date Feb 29 current year (Problem of leap year)",
            "type": "Bug",
            "description": "1) Ant code:\n\n        <ftp action=\"get\"\n            server=\"${ftp.server}\"\n            userid=\"${ftp.user}\"\n            password=\"${ftp.password}\"\n            remotedir=\"${ftp.dir}\"\n            verbose=\"yes\"\n            depends=\"yes\">\n            <fileset dir=\"${lib}\">\n                <include name=\"*.jar\"/>\n            </fileset>\n        </ftp>\n\nNullPointerException if in ${ftp.dir} are files with creation date Feb 29 current year\n\n2) Caused:\n   Incorrect parse creation date Feb 29 current year\n\nFor java 1.5/1.6:\n   Example 1:\n        SimpleDateFormat sdf = new SimpleDateFormat(\"MMM d yy\");\n        sdf.setLenient(false);\n        System.out.println(\"date=\" + sdf.parse(\"Feb 29 12:14\"));\n  \n      Result:\n         date=null;\n\n  If doesn't use command sdf.setLenient(false) then result: date = Sun Mar 01 12:14:00 EET 1970\n\nFor java 1.4:\n    Result  always  \"date=Sun Mar 01 12:14:00 EET 1970\", because for java 1.4 doesn't throw error NullPointerException\n\n\n3) Sources:\n\nFile: commons-net-1.4.1\\src\\java\\org\\apache\\commons\\net\\ftp\\parser\\FTPTimestampParserImpl.java \n\nCaused  in function (line 225: this.recentDateFormat.setLenient(false);  ): \n\n\tpublic void configure(FTPClientConfig config) {\n                   ....\n\n\t\tString recentFormatString = config.getRecentDateFormatStr();\n\t\tif (recentFormatString == null) {\n\t\t    this.recentDateFormat = null;\n\t\t} else {\n\t\t\tthis.recentDateFormat = new SimpleDateFormat(recentFormatString, dfs);\n\t\t\tthis.recentDateFormat.setLenient(false); \n\t\t}\n               ....\n           }\n\n\n\n4) StackTrace:\n\njava.lang.NullPointerException\n        at org.apache.tools.ant.dispatch.DispatchUtils.execute(DispatchUtils.java:115)\n        at org.apache.tools.ant.Task.perform(Task.java:348)\n        at org.apache.tools.ant.Target.execute(Target.java:357)\n        at org.apache.tools.ant.Target.performTasks(Target.java:385)\n        at org.apache.tools.ant.Project.executeSortedTargets(Project.java:1329)\n        at org.apache.tools.ant.Project.executeTarget(Project.java:1298)\n        at org.apache.tools.ant.helper.DefaultExecutor.executeTargets(DefaultExecutor.java:41)\n        at org.apache.tools.ant.Project.executeTargets(Project.java:1181)\n        at org.apache.tools.ant.Main.runBuild(Main.java:698)\n        at org.apache.tools.ant.Main.startAnt(Main.java:199)\n        at org.apache.tools.ant.launch.Launcher.run(Launcher.java:257)\n        at org.apache.tools.ant.launch.Launcher.main(Launcher.java:104)\nCaused by: java.lang.NullPointerException\n        at org.apache.tools.ant.taskdefs.optional.net.FTP$FTPDirectoryScanner.checkRemoteSensitivity(FTP.java:583)\n        at org.apache.tools.ant.taskdefs.optional.net.FTP$FTPDirectoryScanner.forceRemoteSensitivityCheck(FTP.java:552)\n        at org.apache.tools.ant.taskdefs.optional.net.FTP$FTPDirectoryScanner.scan(FTP.java:231)\n        at org.apache.tools.ant.taskdefs.optional.net.FTP.transferFiles(FTP.java:1570)\n        at org.apache.tools.ant.taskdefs.optional.net.FTP.transferFiles(FTP.java:1683)\n        at org.apache.tools.ant.taskdefs.optional.net.FTP.execute(FTP.java:2373)\n        at org.apache.tools.ant.UnknownElement.execute(UnknownElement.java:288)\n        at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n        at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39)\n        at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25)\n        at java.lang.reflect.Method.invoke(Method.java:585)\n        at org.apache.tools.ant.dispatch.DispatchUtils.execute(DispatchUtils.java:105)\n        ... 11 more\n--- Nested Exception ---\njava.lang.NullPointerException\n        at org.apache.tools.ant.taskdefs.optional.net.FTP$FTPDirectoryScanner.checkRemoteSensitivity(FTP.java:583)\n        at org.apache.tools.ant.taskdefs.optional.net.FTP$FTPDirectoryScanner.forceRemoteSensitivityCheck(FTP.java:552)\n        at org.apache.tools.ant.taskdefs.optional.net.FTP$FTPDirectoryScanner.scan(FTP.java:231)\n        at org.apache.tools.ant.taskdefs.optional.net.FTP.transferFiles(FTP.java:1570)\n        at org.apache.tools.ant.taskdefs.optional.net.FTP.transferFiles(FTP.java:1683)\n        at org.apache.tools.ant.taskdefs.optional.net.FTP.execute(FTP.java:2373)\n        at org.apache.tools.ant.UnknownElement.execute(UnknownElement.java:288)\n        at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n        at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39)\n        at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25)\n        at java.lang.reflect.Method.invoke(Method.java:585)\n        at org.apache.tools.ant.dispatch.DispatchUtils.execute(DispatchUtils.java:105)\n        at org.apache.tools.ant.Task.perform(Task.java:348)\n        at org.apache.tools.ant.Target.execute(Target.java:357)\n        at org.apache.tools.ant.Target.performTasks(Target.java:385)\n        at org.apache.tools.ant.Project.executeSortedTargets(Project.java:1329)\n        at org.apache.tools.ant.Project.executeTarget(Project.java:1298)\n        at org.apache.tools.ant.helper.DefaultExecutor.executeTargets(DefaultExecutor.java:41)\n        at org.apache.tools.ant.Project.executeTargets(Project.java:1181)\n        at org.apache.tools.ant.Main.runBuild(Main.java:698)\n        at org.apache.tools.ant.Main.startAnt(Main.java:199)\n        at org.apache.tools.ant.launch.Launcher.run(Launcher.java:257)\n        at org.apache.tools.ant.launch.Launcher.main(Launcher.java:104)",
            "resolved": "2008-12-01",
            "versions": [
                "1.4"
            ],
            "fixVersions": [
                "1.5",
                "2.0"
            ]
        },
        {
            "issue_id": "NET-223",
            "project": "Commons Net",
            "title": "the data connection socket is not closed when an IOException occurred",
            "type": "Bug",
            "description": "In method FTPClient.initiateListParsing(FTPFileEntryParser, String), \nthe data connection socket is not closed when an IOException(e.g. SocketTimeoutException)\noccurred while calling FTPListParseEngine.readServerList().\n\n> engine.readServerList(socket.getInputStream(), getControlEncoding());\n> socket.close();\n\nIn other methods that open a data connection socket, like retrieveFile() and __storeFile(),\nthe socket is closed when an IOException occurred.\n\nI think, the client should close the socket like the following.\n\n> try {\n>     engine.readServerList(socket.getInputStream(), getControlEncoding());\n> } finally {\n>     socket.close();",
            "resolved": "2008-06-19",
            "versions": [
                "1.4"
            ],
            "fixVersions": [
                "2.0"
            ]
        },
        {
            "issue_id": "NET-221",
            "project": "Commons Net",
            "title": "Javaoc for new classes in 2.0 should have @since 2.0",
            "type": "Bug",
            "description": "It would be helpful to identify the classes that are new to 2.0",
            "resolved": "2008-06-25",
            "versions": [
                "1.5",
                "2.0"
            ],
            "fixVersions": []
        },
        {
            "issue_id": "NET-220",
            "project": "Commons Net",
            "title": "TFTPServer is not threadsafe",
            "type": "Bug",
            "description": "The TFTPServer class is not threadsafe.\n\nThere are several reasons for this:\n\nCtors call private launch() method which creates a thread and start()s it.\nThis publishes the instance before it has been fully constructed.\n\nVarious instance fields are not thread-safe - e.g. serverReadDirectory_ is neither final nor volatile, and accesses to it are not synchronized. \nAlthough it is only written by the ctors, the lack of synch means that the field may not be visible to other threads.\n\nAs far as possible, instance fields should be made final - this guarantees that the field will be visible to other threads.\n\nOne of the shutdown_ variables is volatile (so is threadsafe) but the shutdown_ variable in the nested TFTPTransfer class is not,  yet is accessed from multiple threads.\n\nThe access to the variable serverException is not synch; should probably be volatile.\n\nPatch to follow.\n",
            "resolved": "2011-03-02",
            "versions": [
                "2.0"
            ],
            "fixVersions": []
        },
        {
            "issue_id": "NET-216",
            "project": "Commons Net",
            "title": "KeyManager and TrustManager not used for data socket",
            "type": "Bug",
            "description": "When setting the KeyManager and TrustManager for FtpsClient, it will not be used for the data connection. In addition, the current code eats an exception and just dumps it to stderr. ",
            "resolved": "2008-04-27",
            "versions": [
                "2.0"
            ],
            "fixVersions": [
                "2.0"
            ]
        },
        {
            "issue_id": "NET-215",
            "project": "Commons Net",
            "title": "UNIXFTPEntryParser doesn't preserve trailing whitespace in files",
            "type": "Bug",
            "description": "From https://bugs.eclipse.org/bugs/show_bug.cgi?id=204740 :\n\nThe Commons Net FTP Entry Parsers do not preserve trailing whitespace on file names. On systems like UNIX that support trailing whitespace, this results in some invalid entries being parsed.\n\nThe bug seems to be in Jakarta Commons Net UnixFTPEntryParser -- in its REGEX,\nthe last field (\"endtoken\") is declared\n    (\\\\s*.*)\nwhich means any whitespace followed by at least one non-whitespace character.\nWhich is not the case in case of trailing whitespace.\n",
            "resolved": "2009-04-04",
            "versions": [
                "1.4"
            ],
            "fixVersions": [
                "2.2"
            ]
        },
        {
            "issue_id": "NET-213",
            "project": "Commons Net",
            "title": "Unsafe code in FromNetASCIIInputStream.java",
            "type": "Bug",
            "description": "The constructors in FromNetASCIIInputStream.java assign a value to a static field:\n\n_lineSeparatorBytes = _lineSeparator.getBytes(encoding);\n\nThis is not thread-safe, indeed it is thread-hostile if the value can ever be different for different encodings.\n(Two different instances wanting to use two different values of the same static field)\n\nThe field should be initialised in the static initialiser (and should probably be made final as a hint not to change it - though this won't stop the contents being changed).\n\n\n",
            "resolved": "2008-04-08",
            "versions": [],
            "fixVersions": [
                "2.0"
            ]
        },
        {
            "issue_id": "NET-212",
            "project": "Commons Net",
            "title": "FTP short date parsing - how to handle future dates",
            "type": "Bug",
            "description": "See NET-188 for history.\n\nNeed to decide how to handle short dates (without years).\n\nShould this be:\n\n+/- 6 months?\n+1 day/-364 days?\n",
            "resolved": "2011-04-13",
            "versions": [
                "1.5",
                "2.0"
            ],
            "fixVersions": []
        },
        {
            "issue_id": "NET-211",
            "project": "Commons Net",
            "title": "setLenient() does not work across a year boundary",
            "type": "Bug",
            "description": "Extracted from NET-188.\n\nIf today's date is Dec 30 2007, then the short date \"Dec 31\" parses as Dec 31 2006 if lenientFutureDate is false, and Dec 31 2007 if lenient = true.\n\nHowever, if today's date is Dec 31 2007, then the short date \"Jan 1\" parses as Jan 1 2006 even if lenient = true.\n\nThis is inconsistent.",
            "resolved": "2008-04-07",
            "versions": [
                "2.0"
            ],
            "fixVersions": [
                "2.0"
            ]
        },
        {
            "issue_id": "NET-210",
            "project": "Commons Net",
            "title": "FTPClient.listFiles() can't display the correct character like '\uff08'   that is FULL char of  '(' ",
            "type": "Bug",
            "description": "The file name on soloaris 9 is \u300cabc\uff08test\uff09123.pdf\u300d,\nafter listFiles() is called and display the file name on Windows XP, \n \u300cabc\uff08test\uff09123.pdf\u300dbecame\u300cabc?]test?^[123.pdf\u300d.\n\nBecause of this issue, i can't use the real name to downlad file,\ni got the \u300cException in thread \"main\" java.lang.NullPointerException\n\tat org.apache.commons.net.io.Util.copyStream(Util.java:98)\n\tat org.apache.commons.net.ftp.FTPClient.__storeFile(FTPClient.java:399)\n\tat org.apache.commons.net.ftp.FTPClient.storeFile(FTPClient.java:1388)\u300d\n\n\n",
            "resolved": "2008-08-25",
            "versions": [
                "1.4"
            ],
            "fixVersions": []
        },
        {
            "issue_id": "NET-209",
            "project": "Commons Net",
            "title": "FTPClient.listFiles can't parse files which modified on (leap-year's)2/29.",
            "type": "Bug",
            "description": "The files modified on (leap-year's)2/29 seem to be null when listFiles called.\n\nCode:\nFTPClient client =.. // create client. and connect.\nFTPFile files[] = client.listFiles();\nfor (FTPFile file : files) {\n  System.out.println(file);\n}\nclient.disconnect();\n\nResult:\n-rw-rw-r--    1 510      510        605555 Jan 31 20:32 file_1.csv\n-rw-rw-r--    1 510      510        470976 Jan 30 20:54 file_2.csv\nnull\n-rw-rw-r--    1 510      510        468401 Jan 31 20:36 file_4.csv\nnull\n-rw-rw-r--    1 510      510        488822 Jan 31 20:44 file_6.csv\n-rw-rw-r--    1 510      510        365192 Mar 31 01:50 file_7.csv\n",
            "resolved": "2008-03-31",
            "versions": [
                "1.4"
            ],
            "fixVersions": []
        },
        {
            "issue_id": "NET-208",
            "project": "Commons Net",
            "title": "TelnetInputStream swallows interruptedexception as IOException",
            "type": "Bug",
            "description": "The TelnetInputStream catches InterruptedException in the read() method (line 342) and throws a new IOException without wrapping the InterruptedException. This means that the fact that the read() method was interrupted can hardly be distinguished from any other IOException.\n\nI use thread interruption as a cancellation mechanism for a thread that uses the TelnetInputStream to read data.\n\nThe read method is not allowed to throw InterruptedException, so I propose to fix it by at least wrapping the underlying InterruptedException:\n\ncatch (InterruptedException e)\n{\n    throw new IOException(\"Fatal thread interruption during read.\", e);\n}\n",
            "resolved": "2008-05-16",
            "versions": [
                "1.4"
            ],
            "fixVersions": [
                "1.5",
                "2.0"
            ]
        },
        {
            "issue_id": "NET-207",
            "project": "Commons Net",
            "title": "FTP Client storeFile is not working with default buffer size 1024",
            "type": "Bug",
            "description": "When we are uploading the file (size approx:2.68MB) with the default buffer size, getting the following error.\n\norg.apache.commons.net.io.CopyStreamException: IOException caught while copying.\nBytes Transfered:384000\nIO Exception:java.net.SocketException: Connection reset by peer: socket write error\n\nWork Around: Setting the buffersize to any value other than default 1024.\n",
            "resolved": "2008-04-01",
            "versions": [
                "1.4"
            ],
            "fixVersions": []
        },
        {
            "issue_id": "NET-206",
            "project": "Commons Net",
            "title": "Turkish 'i' problem and ParserInitializationException: Unknown parser type: Windows_NT",
            "type": "Bug",
            "description": "When default locale of a JVM is set to tr_TR with the UTF-8 encoding the following error is seen when connecting to windows ftp server:\n...\nat org.apache.commons.net.ftp.parser.ParserInitializationException: Unknown parser type: Windows_NT\nat org.apache.commons.net.ftp.parser.DefaultFTPFileEntryParserFactory.createFileEntryParser(DefaultFTPFileEntryParserFactory.java:118)\nat org.apache.commons.net.ftp.FTPClient.initiateListParsing(FTPClient.java:2358)\nat org.apache.commons.net.ftp.FTPClient.listFiles(FTPClient.java:2141)\nat org.apache.commons.net.ftp.FTPClient.listFiles(FTPClient.java:2188)\n...",
            "resolved": "2008-05-16",
            "versions": [
                "1.4"
            ],
            "fixVersions": [
                "1.5",
                "2.0"
            ]
        },
        {
            "issue_id": "NET-204",
            "project": "Commons Net",
            "title": "If the connection is slow, FTPClient will work abnormal.",
            "type": "Bug",
            "description": "When the connection is slow, it seems methods of FTPClient will work abnormal, e.g. if call list(\"/\"), sometime it returns error code 500..., sometime it returns 0 number of files, some time even throw exception. But this is because of the connection is slow, so shouldn't it returns can't connect to site? When FTPclient can't returns remote file list, I can use FileZilla or IE to browse that site.\n\nIf the connection is ok. then file list is returned and work well, but how fast the connection is required is not certain. The connection is not changed, just because the time when program is running at  is different. ",
            "resolved": "2008-12-01",
            "versions": [
                "1.4"
            ],
            "fixVersions": []
        },
        {
            "issue_id": "NET-203",
            "project": "Commons Net",
            "title": "FTPSClient uses mutable objects for CipherSuites and Protocols",
            "type": "Bug",
            "description": "FTPSClient uses mutable objects for CipherSuites and Protocols.\n\nThe setxxx methods ought to copy the arrays, rather than storing a reference to them.\n\nAs these arrays are used in establishing a secure connection, it's important that the data is also secure.\n",
            "resolved": "2008-04-08",
            "versions": [
                "2.0"
            ],
            "fixVersions": [
                "2.0"
            ]
        },
        {
            "issue_id": "NET-201",
            "project": "Commons Net",
            "title": "UnixFTPEntryParser does not handle character/block special devices properly",
            "type": "Bug",
            "description": "The following is a valid entry from a FreeBSD system:\n\n      crw-r-----  1 root      kmem        0,  27 Jan 30 11:42 kmem\n\nThis causes a parse error, because the regular expression does not allow for the major and minor device numbers.",
            "resolved": "2008-03-16",
            "versions": [],
            "fixVersions": [
                "1.5",
                "2.0"
            ]
        },
        {
            "issue_id": "NET-199",
            "project": "Commons Net",
            "title": "FTPClient returns a FTPFile list with null element.",
            "type": "Bug",
            "description": "The method FTPClient.listFiles will returns a list of FTPFile, but it contains 'null' element if there are files on FTP server that are created at Feb.29. \n\nIn fact I'm not sure whether it is a bug of .net api, since I have traced the call stack, as a result, it shows the problem happens when FTPListParsedEngine.readServerList is called and then finally GregorianCalender.computeTime is called, that method raised IllegalArgumentException. Can you verify this issue? Thanks.\n\nBest regards,\nAlex",
            "resolved": "2008-03-08",
            "versions": [
                "1.4"
            ],
            "fixVersions": []
        },
        {
            "issue_id": "NET-198",
            "project": "Commons Net",
            "title": "FTPTimestampParserImpl#parseTimeStamp() is not fully testable",
            "type": "Bug",
            "description": "The FTPTimestampParserImpl#parseTimeStamp() method is not fully testable, because it unconditionally creates Calendar items using the current time.\n\nIn order to test for leap years and DST, the test code needs to be able to set arbitrary times.\n\nI suggest adding a package-private method that takes an additional Calendar parameter, as follows:\n\n\tCalendar parseTimestamp(String timestampStr, Calendar now) throws ParseException {\n        // etc\n\nThis would replace the original code; the public interface would delegate to the package-private method:\n\n\tpublic Calendar parseTimestamp(String timestampStr) throws ParseException {\n\t\tCalendar now = Calendar.getInstance();\n\t\treturn parseTimestamp(timestampStr, now);\n\t}\n\nPatch to follow.",
            "resolved": "2008-03-09",
            "versions": [],
            "fixVersions": [
                "1.5",
                "2.0"
            ]
        },
        {
            "issue_id": "NET-195",
            "project": "Commons Net",
            "title": "Ntpv3Impl attempts double-checked locking",
            "type": "Bug",
            "description": "The NtpV3Impl#getDatagramPacket() method implements double-checked locking, which is known not to work.\n\nThe initial \"if (dp == null)\" condition should be removed; once this is done, the synch block could be removed and the method synchronized instead.",
            "resolved": "2008-04-08",
            "versions": [],
            "fixVersions": [
                "2.0"
            ]
        },
        {
            "issue_id": "NET-194",
            "project": "Commons Net",
            "title": "Telnet class Exception problem",
            "type": "Bug",
            "description": "The Telnet class in trunk catches Exception several times; it should really catch just the appropriate Exceptions.\n\nAlso the Exception blocks writes to System.err - is this really correct?",
            "resolved": "2008-05-16",
            "versions": [],
            "fixVersions": [
                "2.0"
            ]
        },
        {
            "issue_id": "NET-193",
            "project": "Commons Net",
            "title": "FTP throw NullPointerException when enountering 02-29-2008 (leap year bug)",
            "type": "Bug",
            "description": "ant FTP task blowing up when parsing directories containing ANY items dated (created/modified) February 29 2008.\n\nThere may be a workaround using defaultDateFormatConfig or recentDateFormatConfig - but I didn't find it (actually by messing with some of the ftp attributes my build finally stopped throwing NullPointerExceptions, but refused to list or get any files!!  Always came back with 0 files found)\n\nNot sure the date format used by Windows FTP server - One thing I am sure of:  tasks that once worked stopped working on Friday - it took all weekend and most of today to figure it out.  By updating files and folders, magically ftp task begins working agains and I slowly begin regain my sanity \n\nHere's the exception:\nD:\\builds\\build.xml:23: java.lang.NullPointerException\n        at org.apache.tools.ant.dispatch.DispatchUtils.execute(DispatchUtils.java:115)\n        at org.apache.tools.ant.Task.perform(Task.java:348)\n        at org.apache.tools.ant.Target.execute(Target.java:357)\n        at org.apache.tools.ant.Target.performTasks(Target.java:385)\n        at org.apache.tools.ant.Project.executeSortedTargets(Project.java:1329)\n        at org.apache.tools.ant.Project.executeTarget(Project.java:1298)\n        at org.apache.tools.ant.helper.DefaultExecutor.executeTargets(DefaultExecutor.java:41)\n        at org.apache.tools.ant.Project.executeTargets(Project.java:1181)\n        at org.apache.tools.ant.Main.runBuild(Main.java:698)\n        at org.apache.tools.ant.Main.startAnt(Main.java:199)\n        at org.apache.tools.ant.launch.Launcher.run(Launcher.java:257)\n        at org.apache.tools.ant.launch.Launcher.main(Launcher.java:104)\nCaused by: java.lang.NullPointerException\n        at org.apache.tools.ant.taskdefs.optional.net.FTP$FTPDirectoryScanner.scandir(FTP.java:374)\n        at org.apache.tools.ant.taskdefs.optional.net.FTP$FTPDirectoryScanner.accountForIncludedDir(FTP.java:459)\n        at org.apache.tools.ant.taskdefs.optional.net.FTP$FTPDirectoryScanner.scandir(FTP.java:383)\n        at org.apache.tools.ant.taskdefs.optional.net.FTP$FTPDirectoryScanner.checkIncludePatterns(FTP.java:270)\n        at org.apache.tools.ant.taskdefs.optional.net.FTP$FTPDirectoryScanner.scan(FTP.java:233)\n        at org.apache.tools.ant.taskdefs.optional.net.FTP.transferFiles(FTP.java:1570)\n        at org.apache.tools.ant.taskdefs.optional.net.FTP.transferFiles(FTP.java:1683)\n        at org.apache.tools.ant.taskdefs.optional.net.FTP.execute(FTP.java:2373)\n        at org.apache.tools.ant.UnknownElement.execute(UnknownElement.java:288)\n        at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n        at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39)\n        at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25)\n        at java.lang.reflect.Method.invoke(Method.java:597)\n        at org.apache.tools.ant.dispatch.DispatchUtils.execute(DispatchUtils.java:105)\n        ... 11 more\n--- Nested Exception ---\njava.lang.NullPointerException\n        at org.apache.tools.ant.taskdefs.optional.net.FTP$FTPDirectoryScanner.scandir(FTP.java:374)\n        at org.apache.tools.ant.taskdefs.optional.net.FTP$FTPDirectoryScanner.accountForIncludedDir(FTP.java:459)\n        at org.apache.tools.ant.taskdefs.optional.net.FTP$FTPDirectoryScanner.scandir(FTP.java:383)\n        at org.apache.tools.ant.taskdefs.optional.net.FTP$FTPDirectoryScanner.checkIncludePatterns(FTP.java:270)\n        at org.apache.tools.ant.taskdefs.optional.net.FTP$FTPDirectoryScanner.scan(FTP.java:233)\n        at org.apache.tools.ant.taskdefs.optional.net.FTP.transferFiles(FTP.java:1570)\n        at org.apache.tools.ant.taskdefs.optional.net.FTP.transferFiles(FTP.java:1683)\n        at org.apache.tools.ant.taskdefs.optional.net.FTP.execute(FTP.java:2373)\n        at org.apache.tools.ant.UnknownElement.execute(UnknownElement.java:288)\n        at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n        at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39)\n        at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25)\n        at java.lang.reflect.Method.invoke(Method.java:597)\n        at org.apache.tools.ant.dispatch.DispatchUtils.execute(DispatchUtils.java:105)\n        at org.apache.tools.ant.Task.perform(Task.java:348)\n        at org.apache.tools.ant.Target.execute(Target.java:357)\n        at org.apache.tools.ant.Target.performTasks(Target.java:385)\n        at org.apache.tools.ant.Project.executeSortedTargets(Project.java:1329)\n        at org.apache.tools.ant.Project.executeTarget(Project.java:1298)\n        at org.apache.tools.ant.helper.DefaultExecutor.executeTargets(DefaultExecutor.java:41)\n        at org.apache.tools.ant.Project.executeTargets(Project.java:1181)\n        at org.apache.tools.ant.Main.runBuild(Main.java:698)\n        at org.apache.tools.ant.Main.startAnt(Main.java:199)\n        at org.apache.tools.ant.launch.Launcher.run(Launcher.java:257)\n        at org.apache.tools.ant.launch.Launcher.main(Launcher.java:104)",
            "resolved": "2008-03-08",
            "versions": [
                "1.4"
            ],
            "fixVersions": [
                "1.5",
                "2.0"
            ]
        },
        {
            "issue_id": "NET-192",
            "project": "Commons Net",
            "title": "Solaris 10 unable to download files, FTPClient timesout with: \"426 Data connection: Error 0\"",
            "type": "Bug",
            "description": "Existing code working on Solaris 8, breaks under Solaris 10.  \n\nWe configured the ftpdaemon's flush-wait property to be set to no.  Here's some info on what we did:\nhttp://forums.ni.com/ni/board/message?board.id=180&message.id=30183\n\nFrom the man page:\n\n  flush-wait yes|no [typelist]\n\n         Controls the behavior at the end of a download or direc-\n         tory  listing.  If yes, shutdown the data connection for\n         sending and wait for the client to close its end  before\n         sending a transfer complete reply on the control connec-\n         tion. This is the default behavior.  If  no,  close  the\n         data  connection  and  send  the transfer complete reply\n         without waiting for the client. With this behavior, data\n         loss can go undetected.\n\n         If a client hangs at the end of a directory listing,  or\n         the system has many sockets in the FIN_WAIT_2 state, try\n         setting  to  no  as  a  workaround  for  broken   client\n         behavior.\n\n\n-----------\nI'll attempt to attach a test case (you'll need to configure some properties though).\n\nHere's the code being executed.  The execution hangs when the FTPClient.completePendingCommand() method is called for around 20 minutes and then the following Reply String is returned from the FTPClient: \"426 Data connection: Error 0.\"\n\nimport java.io.BufferedInputStream;\nimport java.io.File;\nimport java.io.FileOutputStream;\nimport java.io.InputStream;\nimport org.apache.commons.net.ftp.FTP;\nimport org.apache.commons.net.ftp.FTPClient;\nimport org.apache.commons.net.ftp.FTPReply;\n\n/**\n * Solaris 10 unable to download files, FTPClient timesout with: \"426 Data connection: Error 0\"\n * \n * commons-net-1.4.1, Java 1.5.0_u10\n * Windows XP client, Solaris 10 server\n * \nExisting code working on Solaris 8, breaks under Solaris 10.  \n\nWe configured the ftpdaemon's flush-wait property to be set to no.  Here's some info on what we did:\nhttp://forums.ni.com/ni/board/message?board.id=180&message.id=30183\n\nFrom the man page:\n\n  flush-wait yes|no [typelist]\n\n         Controls the behavior at the end of a download or direc-\n         tory  listing.  If yes, shutdown the data connection for\n         sending and wait for the client to close its end  before\n         sending a transfer complete reply on the control connec-\n         tion. This is the default behavior.  If  no,  close  the\n         data  connection  and  send  the transfer complete reply\n         without waiting for the client. With this behavior, data\n         loss can go undetected.\n\n         If a client hangs at the end of a directory listing,  or\n         the system has many sockets in the FIN_WAIT_2 state, try\n         setting  to  no  as  a  workaround  for  broken   client\n         behavior.\n\n * \n * @author zheismann\n */\npublic final class App \n{\n    \n    public static void testFTP(String ftpHost, String ftpUserName, String ftpPassword, \n                               String fileToDownload, String localDestinationFile)\n        throws Exception\n    {\n        File localFile = new File( localDestinationFile );\n        FTPClient ftpClient = setupConnection(ftpHost, ftpUserName, ftpPassword);\n\n        ftpClient.setFileType( FTP.BINARY_FILE_TYPE );\n        System.out.println(\"Attempting to download '\" + fileToDownload + \"' from host: \" + ftpHost);\n        System.out.println(\"to the localhost: '\" + localFile.getAbsolutePath() + \"'\");\n        FileOutputStream outStream = new FileOutputStream( localFile );\n\n        InputStream ftpIn = ftpClient.retrieveFileStream( fileToDownload );\n\n        InputStream tempStream = new BufferedInputStream( ftpIn );\n\n        byte[] buf = new byte[ftpClient.getBufferSize()];\n        int len;\n\n        //Read from the ftpStream and write to the local file\n        while ( (len = tempStream.read( buf )) >= 0 )\n        {\n            outStream.write( buf, 0, len );\n        }\n\n        if ( !ftpClient.completePendingCommand() )\n        {\n            throw new Exception(\n                \"Error downloading file: \" +\n                localDestinationFile + \"\\n\" +\n                ftpClient.getReplyString() + \"\\n\" );\n        }\n        System.out.println(\"Success!\");\n    }\n    \n    private static FTPClient setupConnection(String ftpHost, String ftpUserName, String ftpPassword) throws Exception\n    {\n        FTPClient ftpClient = new FTPClient();\n        ftpClient.connect(ftpHost);\n        ftpClient.login(ftpUserName, ftpPassword);\n        int reply = ftpClient.getReplyCode();\n        if (!FTPReply.isPositiveCompletion(reply))\n        {\n            throw new Exception( \"Error connecting to: \" + ftpHost + \"\\n\" + ftpClient.getReplyString() + \"\\n\" );\n        }\n        return ftpClient;\n    }\n\n\npublic class App \n{\n    private static final String FTP_HOST = \"\";\n    private static final String FTP_USERNAME = \"zheisman\";\n    private static final String FTP_PASSWORD = \"\";\n    private static final String FILE_TO_DOWNLOAD = \"/home/zheisman/pom.xml\";\n    private static final String FTP_FILE_DESTINATION = \"/pom.xml\";\n    \n    private static void testFTP() throws Exception\n    {\n        File localFile = new File( FTP_FILE_DESTINATION );\n        FTPClient ftpClient = setupConnection();\n\n        ftpClient.setFileType( FTP.BINARY_FILE_TYPE );\n        System.out.println(\"Attempting to download '\" + FILE_TO_DOWNLOAD + \"' from host: \" + FTP_HOST);\n        System.out.println(\"to the localhost: '\" + localFile.getAbsolutePath() + \"'\");\n        FileOutputStream outStream = new FileOutputStream( localFile );\n\n        InputStream ftpIn = ftpClient.retrieveFileStream( FILE_TO_DOWNLOAD );\n\n        InputStream tempStream = new BufferedInputStream( ftpIn );\n\n        byte[] buf = new byte[ftpClient.getBufferSize()];\n        int len;\n\n        //Read from the ftpStream and write to the local file\n        while ( (len = tempStream.read( buf )) >= 0 )\n        {\n            outStream.write( buf, 0, len );\n        }\n\n        if ( !ftpClient.completePendingCommand() )\n        {\n            throw new Exception(\n                \"Error downloading file: \" +\n                FILE_TO_DOWNLOAD + \"\\n\" +\n                ftpClient.getReplyString() + \"\\n\" );\n        }\n    }\n    \n    private static FTPClient setupConnection() throws Exception\n    {\n        FTPClient ftpClient = new FTPClient();\n        ftpClient.connect(FTP_HOST);\n        ftpClient.login(FTP_USERNAME, FTP_PASSWORD);\n        int reply = ftpClient.getReplyCode();\n        if (!FTPReply.isPositiveCompletion(reply))\n        {\n            throw new Exception( \"Error connecting to: \" + FTP_HOST + \"\\n\" + ftpClient.getReplyString() + \"\\n\" );\n        }\n        return ftpClient;\n    }\n\n    \n    public static void main( String[] args )\n    {\n        try\n        {\n            testFTP();\n        }\n        catch (Exception ex)\n        {\n            ex.printStackTrace();\n        }\n    }\n\n",
            "resolved": "2008-12-01",
            "versions": [
                "1.4"
            ],
            "fixVersions": []
        },
        {
            "issue_id": "NET-191",
            "project": "Commons Net",
            "title": "date parsing in the FTP client doesn't work for 29th Feb (leap years)",
            "type": "Bug",
            "description": "http://blogs.lodgon.com/johan/Leap_year_issues_in_apache_commonsnet\n\nWe have a production app that is being impacted as well. we have the same issue as the user here : not able to parse LEAP YEAR(29th feb) dates in Ftp client.",
            "resolved": "2008-03-01",
            "versions": [
                "1.4"
            ],
            "fixVersions": []
        },
        {
            "issue_id": "NET-190",
            "project": "Commons Net",
            "title": "[FTP Client] Not listing files with 'invalid' date",
            "type": "Bug",
            "description": "When trying to list files in a FTP directory with two files returns 0 FileObjects.\n\nWith another FTP client.... response is:\nftp> ls\n227 Entering Passive Mode (212,163,35,155,160,40)\n150 Conexi\u00f3n de datos aceptada\n-rw-r--r--    1 0        0             222 Feb 29 09:47 AYC01R\n-rw-r--r--    1 0        0             688 Feb 29 03:04 AYC02R\n226-Options: -l \n226 2 ocurrencias en total\n\n... so there are two files with date \"FEBRUARY 29\" (2008 is a leap year)\n\nWhen listing files with Jakarta Commons VFS over Jakarta Commons NET it returns 0 files.\n\nI revised Commons Net source and I found in 'org.apache.commons.net.ftp.parser.UnixFTPEntryParser' the following code:\n            try\n            {\n                file.setTimestamp(super.parseTimestamp(datestr));\n            }\n            catch (ParseException e)\n            {\n            \treturn null;  // this is a parsing failure too.\n            }\n\nSo I guess maybe the timestamp parser is throwing a ParseException (perhaps it's guessing a incorrect year) and in this case is returning NULL so the calling class is ignoring these files with 'Feb 29' date.\n\nI think this behaviour is incorrect and must be fixed. If date is considered invalid it would throw an exception,... not simply ignore the file.",
            "resolved": "2008-03-01",
            "versions": [
                "1.4"
            ],
            "fixVersions": []
        },
        {
            "issue_id": "NET-188",
            "project": "Commons Net",
            "title": "FTPClient#listFiles returns null element when file's timestamp is \"02/29\"",
            "type": "Bug",
            "description": "This issue has same cause as VALIDATOR-221.\norg.apache.commons.net.ftp.parser.FTPTimestampParserImpl#parseTimestamp throws ParseException with timestampStr = \"Feb 29 11:22\".\n\nFTP Server status:\n\n{code}\n[root@localhost test-commonsnet]# pwd\n/tmp/test-commonsnet\n[root@localhost test-commonsnet]# ls -l\ntotal 0\n-rw-r--r--  1 root root 0 Dec 19  2006 aaa.txt\n-rw-r--r--  1 root root 0 Feb 29 11:22 bbb.txt\n{code}\n\ntest code:\n\n{code}\npublic void testCommonsNetLeapDay() throws Exception {\n    final FTPClient ftp = new FTPClient();\n    ftp.connect(host);\n    ftp.login(user, password);\n    final FTPFile[] listFiles = ftp.listFiles(\"/tmp/test-commonsnet\");\n    for (int i = 0; i < listFiles.length; i++) {\n        System.out.println(\"[\" + i + \"] \" + listFiles[i]);\n    }\n    ftp.disconnect();\n}\n{code}\n\nresults bellow.\n\n{code}\n[0] -rw-r--r--    1 0        0               0 Dec 18  2006 aaa.txt\n[1] null\n{code}\n\nSecond element(bbb.txt) should not be null.\n",
            "resolved": "2008-05-15",
            "versions": [
                "1.4"
            ],
            "fixVersions": [
                "1.5",
                "2.0"
            ]
        },
        {
            "issue_id": "NET-185",
            "project": "Commons Net",
            "title": "Possible NPE in Threader.java",
            "type": "Bug",
            "description": "In Threader.gatherSubjects, it appears to be possible for tail.next = c.child; to be null [line 356]:\n\n\t349\t if (old.threadable == null && c.threadable == null) {\n\t350\t\t// both dummies - merge them\n\t351\t\tThreadContainer tail;\n\t352\t\tfor (tail = old.child;\n\t353\t\ttail != null && tail.next != null;\n\t354\t\ttail = tail.next);\n\t355\t\n\t356\t\ttail.next = c.child;\n\nIt also seems kind of pointless, given that the subsequent line immediately resets tail to c.child. Perhaps the ; is not intended there?",
            "resolved": "2011-03-08",
            "versions": [],
            "fixVersions": [
                "3.0"
            ]
        },
        {
            "issue_id": "NET-184",
            "project": "Commons Net",
            "title": "FtpClient.listFiles truncates directory name beginning with a number",
            "type": "Bug",
            "description": "I used FtpClient.listFiles() to get a listing of all files in the current working directory on a remote Windows server.  If a remote directory begins with a number followed by a space and more text (e.g., 2008 Rates) the name returned by FTPFile.getName() has the leading number truncated (so '2008 Rates' would be 'Rates').  Examining the value returned by FTPFile.toString() or getRawListing() both show the full file name, but the name returned by getName() is truncated.\n\nIf the directory begins with a number and is not followed by a space (e.g., 2008_Rates) the correct name is returned by getName().  If there is a number after the test (like'Rates for 2008') the correct name is returned by getName().\n\nFiles do not appear to be affected by this.  The getName() function returns the correct name regardless of  the position of a number or the white space aorund it.\n\n",
            "resolved": "2008-02-19",
            "versions": [
                "1.4"
            ],
            "fixVersions": [
                "2.0"
            ]
        },
        {
            "issue_id": "NET-182",
            "project": "Commons Net",
            "title": "NPE in DefaultFTPFileEntryParserFactory",
            "type": "Bug",
            "description": "createFileEntryParser needs to null protect from a null 'key' parameter.",
            "resolved": "2008-02-18",
            "versions": [],
            "fixVersions": [
                "2.0"
            ]
        },
        {
            "issue_id": "NET-180",
            "project": "Commons Net",
            "title": "Telnet EOR is \"consumed\" by TelnetInputStream when in BINARY transmission",
            "type": "Bug",
            "description": "I have a TN5250 client (see rfc1205) which extends TelnetClient. Basically, the client negotiates BINARY transmission and operates in block-mode. However the host sends IAC EOR at the end of each block in order to notify the client that the transmission of the block of data is complete, and the client should build the display. The problem is that the IAC EOR is \"consumed\" by the TelnetInputStream and therefore never reaches the client.\n\nThere are a few ways this could be handled, here are couple of suggestions (the 2nd is probably better):-\n\n1. Within TelnetInputStream, treat IAC EOR as data when in BINARY transmission state\n2. Extend TelnetNotificationHandler and send notifications of all Telnet Commands received\n",
            "resolved": "2010-07-11",
            "versions": [
                "1.4"
            ],
            "fixVersions": [
                "2.2"
            ]
        },
        {
            "issue_id": "NET-178",
            "project": "Commons Net",
            "title": "Support for unciode character is missing",
            "type": "Bug",
            "description": "I'm using sendMessageData() method of SMTPClient class to obtain a Writer object. The mails i need to send contain unicode characters. The Writer which sendMessageData() method returns, uses \"ISO-8859-1\" encoding which does not provide support for all unicode characters. Also the encoding is not configurable i.e. there is no method through which i can set the encoding to something else. This issue has delayed the release of my project. I think this is a very major issue which needs to be addressed as soon as possible. Unicode support should be provided by this API or encoding must be made configurable. Please provide me a workaround for this issue. It's very urgent!",
            "resolved": "2008-02-21",
            "versions": [
                "1.4"
            ],
            "fixVersions": [
                "2.0"
            ]
        },
        {
            "issue_id": "NET-177",
            "project": "Commons Net",
            "title": "FTPClient fails to parse valid PASV responses",
            "type": "Bug",
            "description": "The FTPClient.__parsePassiveModeReply function expects PASV mode parameters to be enclosed in parenthesis.  While this is often the case, it is not a requirement and parsing fails with a StringIndexOutOfBoundsException when PASV mode parameters are not enclosed in parenthesis.\n\nPlease refer to RFC 1123 section 4.1.2.6 for more information.",
            "resolved": "2008-02-18",
            "versions": [
                "1.4",
                "1.5",
                "2.0"
            ],
            "fixVersions": [
                "2.0"
            ]
        },
        {
            "issue_id": "NET-176",
            "project": "Commons Net",
            "title": "Incorrect downloading binary files from FTP",
            "type": "Bug",
            "description": "When I am trying to download some archive files (.zip), they are stored sometimes on my PC wrong (damaged).\n\nWorks _always_ good with Gene6 FTP Server (local) on WinXP SP2.\nWorks _always_ bad with ProFTPd (remote!!!) on Linux.\n\nExample of code, based on Commons.Net:\n\nFTPClient c = new FTPClient();\nc.connect(host);\nc.enterRemotePassiveMode();\nc.setFileType(FTP.BINARY_FILE_TYPE);\nc.login(user, pass);\nc.changeWorkingDirectory(dir);\nFileOutputStream fos = new FileOutputStream(outFile);\nc.retrieveFile(fileName, fos);\nfos.close();\nc.disconnect();\n\n\n\nExample of code, successfuly working (not based on Commons.Net, just standart JDK modules):\n\nURL ur = new URL(\"ftp://\" + user+ \":\" + pass + \"@\" + host + \"/\" + dir + \"/\" + fileName);\nURLConnection urlc = ur.openConnection();\nBufferedInputStream bis = new BufferedInputStream(urlc.getInputStream());\nBufferedOutputStream bos = new BufferedOutputStream(new FileOutputStream(outFile));\nint by;\nwhile ((by = bis.read()) != -1)\n           bos.write(by);\nbis.close();\nbos.close();\n",
            "resolved": "2008-02-17",
            "versions": [
                "1.4"
            ],
            "fixVersions": []
        },
        {
            "issue_id": "NET-174",
            "project": "Commons Net",
            "title": "if 150 Here comes directory listing comes before 200, then FTPClient throws exception",
            "type": "Bug",
            "description": "1. On a FTPClient.listNames(dir), if the 150 Here comes the directory listing, comes before 200 Directory Send Ok, then org.apache.commons.net.ftp.FTP throws exception: \nCould not parse response code. Server Reply: comes the directory listing.\n\n2. Also there seems to be no way to set verbose off.\n\nMay I know how to resolve the above? Please pardon me if I am missing something here. ",
            "resolved": "2008-02-26",
            "versions": [],
            "fixVersions": [
                "2.0"
            ]
        },
        {
            "issue_id": "NET-173",
            "project": "Commons Net",
            "title": "Duplicate IAC when sending a IAC using TelnetClient.getOutputStream()",
            "type": "Bug",
            "description": "TelnetOutputStream.java appears to have a bug that if we send a IAC to the stream returned by TelnetClient.getOutputStream() we get duplicate IAC commands to the telnet server.\n\nI looked through the code and I think I have found the reason.\n\nLine 82-85 appears to just send two IAC commands.\n82                  case TelnetCommand.IAC:\n83                      __client._sendByte(TelnetCommand.IAC);\n84                      __client._sendByte(TelnetCommand.IAC);\n85                      break;\n\nLine 91-95 appears to send the original character (which is a IAC) and a IAC thus producing two IACs in the stream.\n91              else if (ch == TelnetCommand.IAC)\n92              {\n93                  __client._sendByte(ch);\n94                  __client._sendByte(TelnetCommand.IAC);\n95              }\n\n\n\n50      public void write(int ch) throws IOException\n51      {\n52  \n53          synchronized (__client)\n54          {\n55              ch &= 0xff;\n56  \n57              if (__client._requestedWont(TelnetOption.BINARY))\n58              {\n59                  if (__lastWasCR)\n60                  {\n61                      if (__convertCRtoCRLF)this\n62                      {\n63                          __client._sendByte('\\n');\n64                          if (ch == '\\n')\n65                          {\n66                              __lastWasCR = false;\n67                              return ;\n68                          }\n69                      }\n70                      else if (ch != '\\n')\n71                          __client._sendByte('\\0');\n72                  }\n73  \n74                  __lastWasCR = false;\n75  \n76                  switch (ch)\n77                  {\n78                  case '\\r':\n79                      __client._sendByte('\\r');\n80                      __lastWasCR = true;\n81                      break;\n82                  case TelnetCommand.IAC:\n83                      __client._sendByte(TelnetCommand.IAC);\n84                      __client._sendByte(TelnetCommand.IAC);\n85                      break;\n86                  default:\n87                      __client._sendByte(ch);\n88                      break;\n89                  }\n90              }\n91              else if (ch == TelnetCommand.IAC)\n92              {\n93                  __client._sendByte(ch);\n94                  __client._sendByte(TelnetCommand.IAC);\n95              }\n96              else\n97                  __client._sendByte(ch);\n98          }\n99      }",
            "resolved": "2014-12-12",
            "versions": [
                "1.4"
            ],
            "fixVersions": []
        },
        {
            "issue_id": "NET-172",
            "project": "Commons Net",
            "title": "NTP client should not bind to the local port when using UDP",
            "type": "Bug",
            "description": "NTP client when using UDP should not bind to port 123 on the local system.  This renders the software unusable for the very common case where you also have an NTP server running on your system.  It should send to port 123 on the server, but the client should not bind to the local port 123.  ",
            "resolved": "2008-02-20",
            "versions": [
                "1.4"
            ],
            "fixVersions": [
                "2.0"
            ]
        },
        {
            "issue_id": "NET-170",
            "project": "Commons Net",
            "title": "UnixFTPEntryParser does not handle file owner names with spaces",
            "type": "Bug",
            "description": "The regex in UnixFTPEntryParser does not cope with the situation where the file owner name contains spaces. A patch was previously submitted to fix group names with spaces but a similar bug also affects the owner name. As a result, a call to FTPClient.listFiles() returns a FTPFile[] which does not contain entries for affected files.",
            "resolved": "2008-02-19",
            "versions": [
                "1.4"
            ],
            "fixVersions": [
                "2.0"
            ]
        },
        {
            "issue_id": "NET-169",
            "project": "Commons Net",
            "title": "Cannot return files with listNames() function",
            "type": "Bug",
            "description": "Hi, \nI am connecting to an ftp server with my username and password. When I call ftpClient.listNames();  it returns 0 length string array although i am very sure that there are files inside. \n\nI also know that when I changed the ftp server to another one this function works. So I am assuming the server that I connected has a weird ftp server. When I called the function ftpClient.getSystemName() it returns UNKNOWN Type: L8.\nIf I call ftpClient.listNames I got this exception\n org.apache.commons.net.ftp.parser.ParserInitializationException: Unknown parser type: UNKNOWN Type: L8\n\tat org.apache.commons.net.ftp.parser.DefaultFTPFileEntryParserFactory.createFileEntryParser(DefaultFTPFileEntryParserFactory.java:125)\n\tat org.apache.commons.net.ftp.FTPClient.initiateListParsing(FTPClient.java:2362)\n\tat org.apache.commons.net.ftp.FTPClient.listFiles(FTPClient.java:2145)\n\tat org.apache.commons.net.ftp.FTPClient.listFiles(FTPClient.java:2192)\n\nI have to get the filenames from the server, so how can I solve the problem.\nThanks for the helps.\nBurak Ulutoprak",
            "resolved": "2008-03-08",
            "versions": [
                "1.4"
            ],
            "fixVersions": [
                "2.0"
            ]
        },
        {
            "issue_id": "NET-168",
            "project": "Commons Net",
            "title": "NullPointerException in TelnetClient.disconnect() while being connected",
            "type": "Bug",
            "description": "java.lang.NullPointerException\norg.apache.commons.net.telnet.TelnetClient.disconnect(TelnetClient.java:125)\norg.apache.commons.net.ftp.FTP.disconnect(FTP.java:397)\norg.apache.commons.net.ftp.FTPClient.disconnect(FTPClient.java:590)\n\nThis exception occurs when trying to invoke myFTPClient.disconnect() method, when ftpclient hangs for a long time and dont want to connect...",
            "resolved": "2008-03-08",
            "versions": [
                "1.4"
            ],
            "fixVersions": []
        },
        {
            "issue_id": "NET-167",
            "project": "Commons Net",
            "title": "FTPClient.storeFile returns false in case the file is being transferred to some Windows machine",
            "type": "Bug",
            "description": "The method works perfectly in case I am transferring the file to a Linux/Unix machine. However if I am transferring a file to a windows machine the storeFile method returns false.\nThe code snippet:\nFile local = new File(localFile);\nif (local.exists()){\n          in = new FileInputStream(local);\n          if (ftpSession.storeFile(remoteFile, in)) {\n                      System.out.println(\"file transferred\");\n             }\n             else{\n                      System.out.println(\"file cannot be transferred\");\n             }\n}\n\nThe remoteFile and the the local fileName are correct. Still the storeFile method is returning false.\n",
            "resolved": "2008-02-17",
            "versions": [
                "1.4"
            ],
            "fixVersions": [
                "1.5"
            ]
        },
        {
            "issue_id": "NET-162",
            "project": "Commons Net",
            "title": "Logout failure",
            "type": "Bug",
            "description": "Hi all,\n\nI have a small class that just logs into a FTP serever and then Logs out\n\nI tried both of the following lines for logging out\n\n      1. ftp.logout();\n      2. ftp.sendCommand(\"quit\");\n\nand they both cause this exception:\n\nConnected to www.ideas.ie.\n220 ProFTPD 1.3.0a Server (IDEAs FTP Server) [193.1.99.22]\n230 User **** logged in.\njava.net.SocketException: Connection reset\n        at java.net.SocketInputStream.read(SocketInputStream.java:168)\n0\n        at java.io.BufferedInputStream.read1(BufferedInputStream.java:256)\n        at java.io.BufferedInputStream.read(BufferedInputStream.java:317)\n        at java.io.BufferedInputStream.fill(BufferedInputStream.java:218)\n        at java.io.BufferedInputStream.read(BufferedInputStream.java:237)\n        at org.apache.commons.net.telnet.TelnetInputStream.__read(TelnetInputStream.java:114)\n        at org.apache.commons.net.telnet.TelnetInputStream.run(TelnetInputStream.java:535)\n        at java.lang.Thread.run(Thread.java:619)\n\nAny suggestions ?\n\nDoes  ftp.disconnect has the same effect as logging out ? Because disconnect function works allright.\n\n",
            "resolved": "2008-03-08",
            "versions": [
                "1.4"
            ],
            "fixVersions": []
        },
        {
            "issue_id": "NET-161",
            "project": "Commons Net",
            "title": "TFTP TFTPClient.sendFile() just doesen't work",
            "type": "Bug",
            "description": "sendFile() in TFTP sendFile() method does not work. It does not causes an error.\nLooks like there is a bug in the communication.\nI testet it with a sniffer. \n1. write request looks ok\n2. aknowlege from server \n3. aknowlege from server\n4. aknowlege from server\nand so on.\nI replaced the lib with version 1.1 and it works now.",
            "resolved": "2008-02-19",
            "versions": [
                "1.4"
            ],
            "fixVersions": [
                "1.5",
                "2.0"
            ]
        },
        {
            "issue_id": "NET-160",
            "project": "Commons Net",
            "title": "FTP Client API Hangs - Attached Scenario.",
            "type": "Bug",
            "description": "FTP client hangs with the following error.   Here is the truss output. The client hangs indefinitely and no work is being done other than this error when you truss the process.  I use Java 1.5 to run this.  We wrote a long-running ftp daemon and this happens after 20-23 hours of continuous running.\n\nHere is the code to pull files from the ftp server. This one lists files that are received after this particular \"incal\" time (currently it lists but the intention is to implement an incremental download).  We initially thought doing periodic noop would keep the client alive by sending dummy commands to the server. But we found this probelm still occurs.\n\npublic void ListIncrementalFiles (String directory, Calendar incal)\n\t{\n\t\ttry \n\t\t{\n\t\t\tFTPFile[] files = listFiles(directory);\n\t\t\t\n\t\t\tint total_files = 0;\n\t\t\t\t\t\n\t\t\tSystem.out.println(\"FileName\\tFileSize\\t\\tDate Time Stamp\");\n\t\t\tfor (int i = 0; i < files.length; i++)\n\t\t\t{\n\t\t\t\t\t\t\t\t\t\t\t\t\n\t\t\t\t\tFTPFile file = files[i];\n\t\t\t\t\tif ((i % 1000) == 0)\n\t\t\t\t\t{\n\t\t\t\t\t\tSystem.out.println(\"noop occurred at this instance---> \" + i + \"\\n\");\n\t\t\t\t\t\tnoop();\n\t\t\t\t\t}\n\t\t\t\t\t\t\t\n\t\t\t\t\tif (file.isFile())\n\t\t\t\t\t{\n\t\t\t\t\t\tCalendar c = file.getTimestamp();\n\t\t\t\t\t\t\t\t\t\t\t\t\n\t\t\t\t\t\tif (c.after(incal) || c.equals(incal))\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\tSystem.out.println(file.getName() + \"\\t\" + file.getSize() + \"\\t\\t\" + c.getTime());\n\t\t\t\t\t\t\t\ttotal_files++;\n\t\t\t\t\t\t}\n\t\t\t\t\t }\n\n    \t\t\t\t\n\t\t\t}\n\t\t\tSystem.out.println(\"Total Files in the listing ----> \" + total_files);\n\t\t} \n\t\tcatch (Exception e)\n\t\t{\n\t\t\tSystem.out.println(\"FTP Getfiles exception occured\");\n\t\t\te.printStackTrace();\n\t\t}\n    \n\t}\n\n---------------------------------------------------------------------------------------------------------------------------------Truss output begins--------------------------------------------------------\n/14:\tpollsys(0x00000000, 0, 0xB3F7FC10, 0x00000000)\t= 0\n/14:\tpollsys(0x00000000, 0, 0xB3F7FC10, 0x00000000)\t= 0\n/14:\tpollsys(0x00000000, 0, 0xB3F7FC10, 0x00000000)\t= 0\n/14:\tpollsys(0x00000000, 0, 0xB3F7FC10, 0x00000000)\t= 0\n/14:\tpollsys(0x00000000, 0, 0xB3F7FC10, 0x00000000)\t= 0\n/14:\tpollsys(0x00000000, 0, 0xB3F7FC10, 0x00000000)\t= 0\n/14:\tpollsys(0x00000000, 0, 0xB3F7FC10, 0x00000000)\t= 0\n/14:\tpollsys(0x00000000, 0, 0xB3F7FC10, 0x00000000)\t= 0\n/6:\tlwp_cond_wait(0x00035F08, 0x00035EF0, 0xB477FBE0, 0) Err#62 ETIME\n/14:\tpollsys(0x00000000, 0, 0xB3F7FC10, 0x00000000)\t= 0\n/14:\tpollsys(0x00000000, 0, 0xB3F7FC10, 0x00000000)\t= 0\n/14:\tpollsys(0x00000000, 0, 0xB3F7FC10, 0x00000000)\t= 0\n/14:\tpollsys(0x00000000, 0, 0xB3F7FC10, 0x00000000)\t= 0\n/14:\tpollsys(0x00000000, 0, 0xB3F7FC10, 0x00000000)\t= 0\n/14:\tpollsys(0x00000000, 0, 0xB3F7FC10, 0x00000000)\t= 0\n/14:\tpollsys(0x00000000, 0, 0xB3F7FC10, 0x00000000)\t= 0\n/14:\tpollsys(0x00000000, 0, 0xB3F7FC10, 0x00000000)\t= 0\n/14:\tpollsys(0x00000000, 0, 0xB3F7FC10, 0x00000000)\t= 0\n/9:\tlwp_park(0x00000000, 0)\t\t(sleeping...)\n/3:\tlwp_cond_wait(0x000B77C0, 0x000B77A8, 0x00000000, 0) (sleeping...)\n/8:\tlwp_cond_wait(0x0014A908, 0x0014A8F0, 0x00000000, 0) (sleeping...)\n/10:\tlwp_cond_wait(0x000366E8, 0x000366D0, 0x00000000, 0) (sleeping...)\n/1:\tpollsys(0x00000000, 0, 0xFFBFEB60, 0x00000000) (sleeping...)\n/11:\tlwp_cond_wait(0x00036778, 0x00036760, 0x00000000, 0) (sleeping...)\n/4:\tlwp_cond_wait(0x000B77C0, 0x000B77A8, 0x00000000, 0) (sleeping...)\n/12:\tlwp_cond_wait(0x00036778, 0x00036760, 0x00000000, 0) (sleeping...)\n/2:\tlwp_cond_wait(0x000B77C0, 0x000B77A8, 0x00000000, 0) (sleeping...)\n/7:\tlwp_cond_wait(0x00149F98, 0x00149F80, 0x00000000, 0) (sleeping...)\n/5:\tlwp_cond_wait(0x000B77C0, 0x000B77A8, 0x00000000, 0) (sleeping...)\n/13:\tlwp_cond_wait(0x00034958, 0x00034940, 0x00000000, 0) (sleeping...)\n/14:\tpollsys(0x00000000, 0, 0xB3F7FC10, 0x00000000)\t= 0\n/14:\tpollsys(0x00000000, 0, 0xB3F7FC10, 0x00000000)\t= 0\n/14:\tpollsys(0x00000000, 0, 0xB3F7FC10, 0x00000000)\t= 0\n/14:\tpollsys(0x00000000, 0, 0xB3F7FC10, 0x00000000)\t= 0\n/14:\tpollsys(0x00000000, 0, 0xB3F7FC10, 0x00000000)\t= 0\n/14:\tpollsys(0x00000000, 0, 0xB3F7FC10, 0x00000000)\t= 0\n/14:\tpollsys(0x00000000, 0, 0xB3F7FC10, 0x00000000)\t= 0\n/14:\tpollsys(0x00000000, 0, 0xB3F7FC10, 0x00000000)\t= 0\n/6:\tlwp_cond_wait(0x00035F08, 0x00035EF0, 0xB477FBE0, 0) Err#62 ETIME\n/14:\tpollsys(0x00000000, 0, 0xB3F7FC10, 0x00000000)\t= 0\n/14:\tpollsys(0x00000000, 0, 0xB3F7FC10, 0x00000000)\t= 0\n/14:\tpollsys(0x00000000, 0, 0xB3F7FC10, 0x00000000)\t= 0\n/14:\tpollsys(0x00000000, 0, 0xB3F7FC10, 0x00000000)\t= 0\n/14:\tpollsys(0x00000000, 0, 0xB3F7FC10, 0x00000000)\t= 0\n/14:\tpollsys(0x00000000, 0, 0xB3F7FC10, 0x00000000)\t= 0\n/14:\tpollsys(0x00000000, 0, 0xB3F7FC10, 0x00000000)\t= 0\n/14:\tpollsys(0x00000000, 0, 0xB3F7FC10, 0x00000000)\t= 0\n/14:\tpollsys(0x00000000, 0, 0xB3F7FC10, 0x00000000)\t= 0\n/14:\tpollsys(0x00000000, 0, 0xB3F7FC10, 0x00000000)\t= 0\n/14:\tpollsys(0x00000000, 0, 0xB3F7FC10, 0x00000000)\t= 0\n/14:\tpollsys(0x00000000, 0, 0xB3F7FC10, 0x00000000)\t= 0\n/14:\tpollsys(0x00000000, 0, 0xB3F7FC10, 0x00000000)\t= 0\n/14:\tpollsys(0x00000000, 0, 0xB3F7FC10, 0x00000000)\t= 0\n/14:\tpollsys(0x00000000, 0, 0xB3F7FC10, 0x00000000)\t= 0\n/14:\tpollsys(0x00000000, 0, 0xB3F7FC10, 0x00000000)\t= 0\n/14:\tpollsys(0x00000000, 0, 0xB3F7FC10, 0x00000000)\t= 0\n/6:\tlwp_cond_wait(0x00035F08, 0x00035EF0, 0xB477FBE0, 0) Err#62 ETIME\n/14:\tpollsys(0x00000000, 0, 0xB3F7FC10, 0x00000000)\t= 0\n/14:\tpollsys(0x00000000, 0, 0xB3F7FC10, 0x00000000)\t= 0\n/14:\tpollsys(0x00000000, 0, 0xB3F7FC10, 0x00000000)\t= 0\n/14:\tpollsys(0x00000000, 0, 0xB3F7FC10, 0x00000000)\t= 0\n/14:\tpollsys(0x00000000, 0, 0xB3F7FC10, 0x00000000)\t= 0\n/14:\tpollsys(0x00000000, 0, 0xB3F7FC10, 0x00000000)\t= 0\n/14:\tpollsys(0x00000000, 0, 0xB3F7FC10, 0x00000000)\t= 0\n/14:\tpollsys(0x00000000, 0, 0xB3F7FC10, 0x00000000)\t= 0\n/14:\tpollsys(0x00000000, 0, 0xB3F7FC10, 0x00000000)\t= 0\n/14:\tpollsys(0x00000000, 0, 0xB3F7FC10, 0x00000000)\t= 0\n/14:\tpollsys(0x00000000, 0, 0xB3F7FC10, 0x00000000)\t= 0\n/14:\tpollsys(0x00000000, 0, 0xB3F7FC10, 0x00000000)\t= 0\n/14:\tpollsys(0x00000000, 0, 0xB3F7FC10, 0x00000000)\t= 0\n/14:\tpollsys(0x00000000, 0, 0xB3F7FC10, 0x00000000)\t= 0\n/14:\tpollsys(0x00000000, 0, 0xB3F7FC10, 0x00000000)\t= 0\n/14:\tpollsys(0x00000000, 0, 0xB3F7FC10, 0x00000000)\t= 0\n/14:\tpollsys(0x00000000, 0, 0xB3F7FC10, 0x00000000)\t= 0\n/6:\tlwp_cond_wait(0x00035F08, 0x00035EF0, 0xB477FBE0, 0) Err#62 ETIME\n/14:\tpollsys(0x00000000, 0, 0xB3F7FC10, 0x00000000)\t= 0\n/14:\tpollsys(0x00000000, 0, 0xB3F7FC10, 0x00000000)\t= 0\n/14:\tpollsys(0x00000000, 0, 0xB3F7FC10, 0x00000000)\t= 0\n/14:\tpollsys(0x00000000, 0, 0xB3F7FC10, 0x00000000)\t= 0\n/14:\tpollsys(0x00000000, 0, 0xB3F7FC10, 0x00000000)\t= 0\n/14:\tpollsys(0x00000000, 0, 0xB3F7FC10, 0x00000000)\t= 0\n/14:\tpollsys(0x00000000, 0, 0xB3F7FC10, 0x00000000)\t= 0\n/14:\tpollsys(0x00000000, 0, 0xB3F7FC10, 0x00000000)\t= 0\n/14:\tpollsys(0x00000000, 0, 0xB3F7FC10, 0x00000000)\t= 0\n/14:\tpollsys(0x00000000, 0, 0xB3F7FC10, 0x00000000)\t= 0\n/14:\tpollsys(0x00000000, 0, 0xB3F7FC10, 0x00000000)\t= 0\n/14:\tpollsys(0x00000000, 0, 0xB3F7FC10, 0x00000000)\t= 0\n/14:\tpollsys(0x00000000, 0, 0xB3F7FC10, 0x00000000)\t= 0\n/14:\tpollsys(0x00000000, 0, 0xB3F7FC10, 0x00000000)\t= 0\n/14:\tpollsys(0x00000000, 0, 0xB3F7FC10, 0x00000000)\t= 0\n/14:\tpollsys(0x00000000, 0, 0xB3F7FC10, 0x00000000)\t= 0\n/14:\tpollsys(0x00000000, 0, 0xB3F7FC10, 0x00000000)\t= 0\n/6:\tlwp_cond_wait(0x00035F08, 0x00035EF0, 0xB477FBE0, 0) Err#62 ETIME\n/14:\tpollsys(0x00000000, 0, 0xB3F7FC10, 0x00000000)\t= 0\n/14:\tpollsys(0x00000000, 0, 0xB3F7FC10, 0x00000000)\t= 0\n/14:\tpollsys(0x00000000, 0, 0xB3F7FC10, 0x00000000)\t= 0\n/14:\tpollsys(0x00000000, 0, 0xB3F7FC10, 0x00000000)\t= 0\n/14:\tpollsys(0x00000000, 0, 0xB3F7FC10, 0x00000000)\t= 0\n/14:\tpollsys(0x00000000, 0, 0xB3F7FC10, 0x00000000)\t= 0\n/14:\tpollsys(0x00000000, 0, 0xB3F7FC10, 0x00000000)\t= 0\n/14:\tpollsys(0x00000000, 0, 0xB3F7FC10, 0x00000000)\t= 0\n/14:\tpollsys(0x00000000, 0, 0xB3F7FC10, 0x00000000)\t= 0\n/14:\tpollsys(0x00000000, 0, 0xB3F7FC10, 0x00000000)\t= 0\n/14:\tpollsys(0x00000000, 0, 0xB3F7FC10, 0x00000000)\t= 0\n/14:\tpollsys(0x00000000, 0, 0xB3F7FC10, 0x00000000)\t= 0\n/14:\tpollsys(0x00000000, 0, 0xB3F7FC10, 0x00000000)\t= 0\n/14:\tpollsys(0x00000000, 0, 0xB3F7FC10, 0x00000000)\t= 0\n/14:\tpollsys(0x00000000, 0, 0xB3F7FC10, 0x00000000)\t= 0\n/14:\tpollsys(0x00000000, 0, 0xB3F7FC10, 0x00000000)\t= 0\n/14:\tpollsys(0x00000000, 0, 0xB3F7FC10, 0x00000000)\t= 0\n/6:\tlwp_cond_wait(0x00035F08, 0x00035EF0, 0xB477FBE0, 0) Err#62 ETIME\n/14:\tpollsys(0x00000000, 0, 0xB3F7FC10, 0x00000000)\t= 0\n/14:\tpollsys(0x00000000, 0, 0xB3F7FC10, 0x00000000)\t= 0\n/14:\tpollsys(0x00000000, 0, 0xB3F7FC10, 0x00000000)\t= 0\n/14:\tpollsys(0x00000000, 0, 0xB3F7FC10, 0x00000000)\t= 0\n/14:\tpollsys(0x00000000, 0, 0xB3F7FC10, 0x00000000)\t= 0\n/14:\tpollsys(0x00000000, 0, 0xB3F7FC10, 0x00000000)\t= 0\n/14:\tpollsys(0x00000000, 0, 0xB3F7FC10, 0x00000000)\t= 0\n/14:\tpollsys(0x00000000, 0, 0xB3F7FC10, 0x00000000)\t= 0\n/14:\tpollsys(0x00000000, 0, 0xB3F7FC10, 0x00000000)\t= 0\n/14:\tpollsys(0x00000000, 0, 0xB3F7FC10, 0x00000000)\t= 0\n/14:\tpollsys(0x00000000, 0, 0xB3F7FC10, 0x00000000)\t= 0\n/14:\tpollsys(0x00000000, 0, 0xB3F7FC10, 0x00000000)\t= 0\n/14:\tpollsys(0x00000000, 0, 0xB3F7FC10, 0x00000000)\t= 0\n/14:\tpollsys(0x00000000, 0, 0xB3F7FC10, 0x00000000)\t= 0\n/14:\tpollsys(0x00000000, 0, 0xB3F7FC10, 0x00000000)\t= 0\n/14:\tpollsys(0x00000000, 0, 0xB3F7FC10, 0x00000000)\t= 0\n/6:\tlwp_cond_wait(0x00035F08, 0x00035EF0, 0xB477FBE0, 0) Err#62 ETIME\n/14:\tpollsys(0x00000000, 0, 0xB3F7FC10, 0x00000000)\t= 0\n/14:\tpollsys(0x00000000, 0, 0xB3F7FC10, 0x00000000)\t= 0\n/14:\tpollsys(0x00000000, 0, 0xB3F7FC10, 0x00000000)\t= 0\n/14:\tpollsys(0x00000000, 0, 0xB3F7FC10, 0x00000000)\t= 0\n/14:\tpollsys(0x00000000, 0, 0xB3F7FC10, 0x00000000)\t= 0\n/14:\tpollsys(0x00000000, 0, 0xB3F7FC10, 0x00000000)\t= 0\n/14:\tpollsys(0x00000000, 0, 0xB3F7FC10, 0x00000000)\t= 0\n/14:\tpollsys(0x00000000, 0, 0xB3F7FC10, 0x00000000)\t= 0\n/14:\tpollsys(0x00000000, 0, 0xB3F7FC10, 0x00000000)\t= 0\n/14:\tpollsys(0x00000000, 0, 0xB3F7FC10, 0x00000000)\t= 0\n/14:\tpollsys(0x00000000, 0, 0xB3F7FC10, 0x00000000)\t= 0\n/14:\tpollsys(0x00000000, 0, 0xB3F7FC10, 0x00000000)\t= 0\n/14:\tpollsys(0x00000000, 0, 0xB3F7FC10, 0x00000000)\t= 0\n/14:\tpollsys(0x00000000, 0, 0xB3F7FC10, 0x00000000)\t= 0\n------------------------------------------------------------------------------------------Truss output ends-------------------------------------------------------------------------------------------",
            "resolved": "2011-04-04",
            "versions": [
                "1.4"
            ],
            "fixVersions": []
        },
        {
            "issue_id": "NET-159",
            "project": "Commons Net",
            "title": "FTPFile.getTimestamp() is off by one year",
            "type": "Bug",
            "description": "The Calendar object returned by FTPFile.getTimestamp seems to be short by one year.",
            "resolved": "2007-06-03",
            "versions": [
                "1.4"
            ],
            "fixVersions": [
                "2.0"
            ]
        },
        {
            "issue_id": "NET-158",
            "project": "Commons Net",
            "title": "login in FTPClient does not always read the complete server response",
            "type": "Bug",
            "description": "When a password is required to connect the FTP server, the implementation of method login in class FTPClient ends with:\n  return FTPReply.isPositiveCompletion(pass(password))\nwhich returns false for any code >= 300.\n\nHowever, some servers send a code 451 before returning the code 530 (NOT_LOGGED_IN). Ignoring this addtional answer,\nleads to desynch the client with the server, hence leading to unexpected behaviors in next exchanges.\n\nThrefore i propose to replace the above code in the end of the method with:\n\n      _replyCode = p_Client.pass(p_Password);\n      boolean result = FTPReply.isPositiveCompletion(_replyCode);\n      if (!result && _replyCode==FTPReply.ACTION_ABORTED){\n        try {\n          _replyCode = p_Client.getReply();\n        } catch (Exception e){\n          e.printStackTrace();\n        }\n      }\n      return result;\n",
            "resolved": "2007-06-06",
            "versions": [
                "1.4"
            ],
            "fixVersions": [
                "2.0"
            ]
        },
        {
            "issue_id": "NET-155",
            "project": "Commons Net",
            "title": "Integer is too small to hold article number value (NNTPClient __parseNewsgroupListEntry() function)",
            "type": "Bug",
            "description": "running the following code:\n\n  client.connect(\"news.icm.edu.pl\");\n  NewsgroupInfo[] grps = client.listNewsgroups();\n\nresults MalformedServerReplyException (alt.atheism 2147485259 2147483647 y)\n\nit's because in function NNTPClient.__parseNewsgroupListEntry():\n\nlast = tokenizer.nextToken();\n        first = tokenizer.nextToken();\n        permission = tokenizer.nextToken();\n\n        try\n        {\n            lastNum = Integer.parseInt(last);\n            firstNum = Integer.parseInt(first);\n            result._setFirstArticle(firstNum);\n            result._setLastArticle(lastNum);\n\n\t    if((firstNum == 0) && (lastNum == 0))\n\t\t    result._setArticleCount(0);\n\t    else\n\t\t    result._setArticleCount(lastNum - firstNum + 1);\n        }\n        catch (NumberFormatException e)\n        {\n            return null;\n        }\n\nlastNum and firstNum are Integer (too small for received values)\n\n",
            "resolved": "2007-03-29",
            "versions": [
                "1.4"
            ],
            "fixVersions": [
                "2.0"
            ]
        },
        {
            "issue_id": "NET-152",
            "project": "Commons Net",
            "title": "FTPClient.retrieveFileStream hangs occassionally",
            "type": "Bug",
            "description": "Occassionally, retrieveFileStream on FTPClient hangs. The thread dump gives the following trace:\n\n java.net.PlainSocketImpl.socketAccept (native method)\n java.net.PlainSocketImpl.accept (PlainSocketImpl.java:353)\n java.net.ServerSocket.implAccept (ServerSocket.java:448)\n java.net.ServerSocket.accept (ServerSocket.java:419)\n org.apache.commons.net.ftp.FTPClient._openDataConnection_(FTPClient.java:502)\n org.apache.commons.net.ftp.FTPClient.retrieveFileStream(FTPClient.java:1,342) \n\nThis seems to occur randomly. Hence, I have not been able to get any specific information for further debugging.  Is this a known issue? Is there any work-around for this issue?",
            "resolved": "2008-03-08",
            "versions": [
                "1.4"
            ],
            "fixVersions": []
        },
        {
            "issue_id": "NET-150",
            "project": "Commons Net",
            "title": "Line terminator \"/r/n\" not properly traced in TelnetClient SpyStream",
            "type": "Bug",
            "description": "Line terminator \"/r/n\" isn't properly traced in TelnetClient SpyStream \n[ see TelnetClient.registerSpyStream(OutputStream  spystream) ].\nActually, it's traced as:\n\"\\n\\r\"\n\nSuggested PATCH:\n\nModify the method \n        _spyRead(int ch) \nin class \n        org.apache.commons.net.telnet.Telnet \n(from wich TelnetClient inherits):\n\n    void _spyRead(int ch)\n    {\n        if (spyStream != null)\n        {\n            try\n            {\n                if (ch != (int) '\\r')\n                {\n                \t// ======Giancarlo Barresi PATCH START====\n                    spyStream.write(ch);\n                    // END =================================\n                    \n\tif (ch == (int) '\\n')\n                    {\n                        spyStream.write((int) '\\r');\n                    }\n\t// START PREVIOUS VERSION ******************************\n\t// spyStream.write(ch);\n\t// END *************************************************\n                    \n\tspyStream.flush();\n                }\n            }\n            catch (Exception e)\n            {\n                spyStream = null;\n            }\n        }\n    }",
            "resolved": "2007-01-26",
            "versions": [
                "1.4"
            ],
            "fixVersions": [
                "1.4"
            ]
        },
        {
            "issue_id": "NET-149",
            "project": "Commons Net",
            "title": "when i am connecting to FTPServer it is throwing Truncated server reply:",
            "type": "Bug",
            "description": "Configure a Microsoft IIS FTP Server on windows 2003 server or xp  to have a multiline Banner Message: Default FTP Site Properties, Messages tab, Banner field.\nFill the Banner filed with data and at the end of the data give 2 or more new lines(just press enter 2 or more times) and say Apply and OK.\n\nFTPClient fp = new FTPClient();\nfp.connect(\"localhost\");\nfp.login(\"anonymous\",\"\");\n\nJust perform above operations, the client program will throw exception at the time of login.\n\n\n",
            "resolved": "2008-03-08",
            "versions": [
                "1.4"
            ],
            "fixVersions": []
        },
        {
            "issue_id": "NET-148",
            "project": "Commons Net",
            "title": "Relaxed condition in __getReply causes other failures.",
            "type": "Bug",
            "description": "In FTP.java's __getReply() method, this do/while loop reads multi-line responses from the server:\n\n            do\n            {\n                line = _controlInput.readLine();\n...\n            }\n            while (!(line.length() >= 4 && line.charAt(3) != '-' &&\n                     Character.isDigit(line.charAt(0))));\n            // This is too strong a condition because of non-conforming ftp\n            // servers like ftp.funet.fi which sent 226 as the last line of a\n            // 426 multi-line reply in response to ls /.  We relax the condition to\n            // test that the line starts with a digit rather than starting with\n            // the code.\n            // line.startsWith(code)));\n        }\n\nNote the comment and the commented-out termination condition.  I think the relevant spec is http://www.ietf.org/rfc/rfc0959.txt  and the section is \"4.2.  FTP REPLIES\".  This is causing problems with the return from the STAT command from Geocities' FTP servers.  Here is an example reply.\n\n211- ftp.us.geocities.com FTP server status: \n     Version wu-2.6.0(48) Tue Jan 2 16:30:15 PST 2007 \n Connected to 144.212.217.85 \n Logged in anonymously \n TYPE: ASCII, FORM: Nonprint; STRUcture: File; transfer MODE: Stream \n No data connection \n 0 data bytes received in 0 files \n 0 data bytes transmitted in 0 files \n0 data bytes total in 0 files \n57 traffic bytes received in 0 transfers \n733 traffic bytes transmitted in 0 transfers \n834 traffic bytes total in 0 transfers \n211  End of status\n\nNote that the line \"0 data bytes total in 0 files\" starts with a digit, but it isn't a reply code.  This prematurely halts reading of lines from the server, and the remaining lines will look like a reply from the next command.",
            "resolved": "2008-02-21",
            "versions": [
                "1.4",
                "Nightly Builds"
            ],
            "fixVersions": [
                "2.0"
            ]
        },
        {
            "issue_id": "NET-146",
            "project": "Commons Net",
            "title": "wrong handling of timeouts",
            "type": "Bug",
            "description": "If you set a timeout on the control connection and then make a data transfer (upload, download) which takes longer than that timeout, the client throws the following exception. It seems like the client tries to read something from the control connection while the data transfer is in progress and then it just throws an exception. It makes the application think that the transfer failed even though it succeeded.\n\naused by: java.net.SocketTimeoutException: Read timed out\n        at java.net.SocketInputStream.socketRead0(Native Method)\n        at java.net.SocketInputStream.read(SocketInputStream.java:129)\n        at java.io.BufferedInputStream.fill(BufferedInputStream.java:218)\n        at java.io.BufferedInputStream.read(BufferedInputStream.java:235)\n        at java.io.FilterInputStream.read(FilterInputStream.java:66)\n        at java.io.PushbackInputStream.read(PushbackInputStream.java:120)\n        at org.apache.commons.net.io.FromNetASCIIInputStream.__read(FromNetASCIIInputStream.java:75)\n        at org.apache.commons.net.io.FromNetASCIIInputStream.read(FromNetASCIIInputStream.java:170)\n        at java.io.BufferedInputStream.fill(BufferedInputStream.java:218)\n        at java.io.BufferedInputStream.read(BufferedInputStream.java:235)\n        at org.apache.commons.net.telnet.TelnetInputStream.__read(TelnetInputStream.java:114)\n        at org.apache.commons.net.telnet.TelnetInputStream.run(TelnetInputStream.java:535)\n        at java.lang.Thread.run(Thread.java:595)",
            "resolved": "2006-12-20",
            "versions": [
                "1.4"
            ],
            "fixVersions": [
                "2.0"
            ]
        },
        {
            "issue_id": "NET-145",
            "project": "Commons Net",
            "title": "Deadlock in TelnetInputStream",
            "type": "Bug",
            "description": "\"Sometimes\" single threads of our application (each thread transfering data from ftp servers) get locked forever. When monitoring our tool with JConsole, I can see that such a thread usually hangs at org.apache.commons.net.telnet.TelnetInputStream, line 339.\n\nThis line contains the statement \n__queue.wait();\n\nUnfortunately I haven't found a way to reproduce this issue, it just happens about once a day (while running 24 hours and transfering about 50000 files).\n\nAs a quick and dirty workaround: What do you think about replacing this line with something like\nlong startTime = System.currentTimeMillis();\n__queue.wait(60000);\nif ((System.currentTimeMillis() - startTime) > 55000) {\n    throw new InterruptedException(\"Unknown strange and nasty blocker detected\");\n} \n\nSo at least it would not just block the thread.",
            "resolved": "2006-12-20",
            "versions": [
                "1.4"
            ],
            "fixVersions": [
                "2.0"
            ]
        },
        {
            "issue_id": "NET-144",
            "project": "Commons Net",
            "title": "FTP: Filenames containing leading and trailing spaces",
            "type": "Bug",
            "description": "The FTPClient's listFiles() method seems to trim filenames removing leading and trailing spaces.\n\nE. g.:\nCreate a directory \"/parent\" containing a file \" test \" (one leading and one trailing space) on an ftp server.\n\nThen call this code:\n        FTPClient ftp = new FTPClient();\n        ftp.connect(SERVER_NAME);\n        ftp.login(LOGIN, PASS);\n        \n        FTPFile[] files = ftp.listFiles(\"/parent\");\n        \n        for (FTPFile file : files) {\n            System.out.println(\"\\\"\" + file.getName() + \"\\\"\");\n        }\n\nIt will print out \"test\" instead of \" test \".",
            "resolved": "2006-11-28",
            "versions": [
                "1.4"
            ],
            "fixVersions": []
        },
        {
            "issue_id": "NET-143",
            "project": "Commons Net",
            "title": "FTPClient.listFiles(String pathname) returns no entry on RH AS 4",
            "type": "Bug",
            "description": "The following code snippet works fine on RedHat AS 3 ftp server.  However, it only works on the top level of a RedHat AS 4 ftp server (e.g. ftp://myftpserver) but not on any subdirectory.  ftpClient.listFiles(url.getPath()) return an empty array on any subdirectory (e.g. ftp://myftpserver/abc).\n\n    \tURL url = new URL(urlString);\n    \tFTPClient ftpClient = new FTPClient();\n        FTPFile[] ftpFiles;\n    \t\n\tftpClient.connect(url.getHost());\n\tftpClient.login(username, password);\n\tint rc = ftpClient.getReplyCode();\n   \tif (!FTPReply.isPositiveCompletion(rc)) {\n    \t\tthrow new Exception(ftpClient.getReplyString());\n    \t}\n    \tftpFiles = ftpClient.listFiles(url.getPath());\n",
            "resolved": "2006-12-13",
            "versions": [
                "1.4"
            ],
            "fixVersions": []
        },
        {
            "issue_id": "NET-142",
            "project": "Commons Net",
            "title": "FTPClient.listFiles() returns null for entries with space in group name",
            "type": "Bug",
            "description": "FTPClient fails parsing file list if the group name contains spaces, for example \"Domain users\" in Windows. The following patch helps:\n\n--- commons-net-1.4.1/src/java/org/apache/commons/net/ftp/parser/FTPTimestampParserImpl.java    Sat Dec  3 19:05:48 2005\n+++ /u/ndv/sns_commons_io/src/org/apache/commons/net/ftp/parser/FTPTimestampParserImpl.java     Sat Sep  2 16:47:03 2006\n@@ -21,6 +21,7 @@\n import java.text.SimpleDateFormat;\n import java.util.Calendar;\n import java.util.Date;\n+import java.util.Locale;\n import java.util.TimeZone;\n \n import org.apache.commons.net.ftp.Configurable;\n@@ -98,9 +99,16 @@\n                        if (parsed != null && pp.getIndex() == timestampStr.length()) {\n                                working.setTime(parsed);\n                        } else {\n-                               throw new ParseException(\n-                                       \"Timestamp could not be parsed with older or recent DateFormat\", \n-                                       pp.getIndex());\n+                               // H4cK3D by mAXm\n+                               SimpleDateFormat dmy = new SimpleDateFormat(\"d MMM yyyy\");\n+                               SimpleDateFormat dmh = new SimpleDateFormat(\"d MMM HH:ss\");\n+\n+                               try {\n+                                       working.setTime(dmh.parse(timestampStr));\n+                                       working.set(Calendar.YEAR, Calendar.getInstance().get(Calendar.YEAR));\n+                               } catch (ParseException ex) {\n+                                       working.setTime(dmy.parse(timestampStr));\n+                               }\n                        }\n                }\n                return working;\n",
            "resolved": "2006-12-20",
            "versions": [
                "1.4"
            ],
            "fixVersions": [
                "2.0"
            ]
        },
        {
            "issue_id": "NET-140",
            "project": "Commons Net",
            "title": "FTPClient listFiles returns incorrect timestamp on freshly uploaded file but corrects itself after about 15 minutes",
            "type": "Bug",
            "description": "This is an odd one:\n\nWe upload GPS data each hour to a public site using FTPClient. Every 24 hours we check for files older than 60 days using listFiles and getting the timestamps do decide if we want to delete older files.\n\nWhen we list the files, the most recently uploaded files have a time stamp exactly one year too old. After about 15 minutes, it seems to correct itself and eventually displays the correct timestamp.\n\nDuring this time while FTPFile.getTimestamp is giving the incorrect timestamp, browsing the folder with a web browser, a commercial FTP client, or actually checking the file info in a shell shows the correct timestamp (i.e. does not seem to be a problem on the remote site)\n\ncommons-net-1.4.1 (as well as commons-net-20060901) exhibits this behavior.\n\ncommons-net-1.3.0 works properly\n\nI did a little investigating, and it seems to happen with every file written to the remote directory each hour, and the incorrect timestamp will be returned using listFiles for about 15 minutes... and then it corrects itself.\n",
            "resolved": "2007-06-04",
            "versions": [
                "1.4"
            ],
            "fixVersions": [
                "2.0"
            ]
        },
        {
            "issue_id": "NET-139",
            "project": "Commons Net",
            "title": "Trunk fails to build under JDK 1.6",
            "type": "Bug",
            "description": "java:compile:\n    [echo] Compiling to /home/hen/apache/jakarta/commons-proper/net/target/classes\n    [javac] Compiling 150 source files to /home/hen/apache/jakarta/commons-proper/net/target/classes\njavac: target release 1.2 conflicts with default source release 1.5",
            "resolved": "2006-08-27",
            "versions": [],
            "fixVersions": [
                "2.0"
            ]
        },
        {
            "issue_id": "NET-115",
            "project": "Commons Net",
            "title": "[net] FTP - WinZip file downloads are corrupted",
            "type": "Bug",
            "description": "function retrieveFile() corrupts winzipped files. error returned on open is: \n\nerror [<file>]: start of central directory not found; Zip file corrupt. Possible\ncause: file transfer error.\n\nthis occurs for both .zip and tar.gz files I have tested.",
            "resolved": "2006-08-27",
            "versions": [
                "1.4"
            ],
            "fixVersions": []
        },
        {
            "issue_id": "NET-113",
            "project": "Commons Net",
            "title": "Broken javadoc link in ..net.ftp.FTP",
            "type": "Bug",
            "description": "From the introductory comments in org.apache.commons.net.ftp.FTP, the link \nto \"FTPClient\" in the second paragraph is broken.",
            "resolved": "2007-09-20",
            "versions": [
                "1.2"
            ],
            "fixVersions": []
        },
        {
            "issue_id": "NET-112",
            "project": "Commons Net",
            "title": "java.lang.IllegalAccessError is thrown when trying MS FTP.",
            "type": "Bug",
            "description": "java.lang.IllegalAccessError: try to access method \njava.util.Calendar.getTimeInMillis()J from class \norg.apache.commons.net.ftp.parser.NTFTPEntryParser\n\nI am using JDK 1.3.1_09. This error is thrown because \njava.util.Calendar.getTimeMillis() method has protected access till JDK 1.3.x.\nThis has been changed to public from JDK 1.4.x. \n\nI got this error when I tried to use the ftp task, to ftp to a MS/NT machine.\nI had commons-net-1.2.0.jar in my ant/lib directory. \n\nGot this problem solved when I installed JDK 1.4.2v, and had the ftp task \nrunning perfectly fine.\n\nThanks & Regards\nRaghu.",
            "resolved": "2007-09-20",
            "versions": [
                "1.2"
            ],
            "fixVersions": []
        },
        {
            "issue_id": "NET-111",
            "project": "Commons Net",
            "title": "[net] The telnet client is leaving the connection even after calling the disconnect properly.",
            "type": "Bug",
            "description": "The TelnetClient module of commons/net is leaving the connection on the server \nopen even after the disconnect() is called properly. This is happening only on \nLinux but not on solaris. I am using redhat Linux 8.0 on Intel xeon. Kernel \nversion 2.4.20-20.8smp.\n\nTemporarly we are sending exit to the telnet shell, which is clearing the \nconnection, but causing the null pointer exception.\n\n==========================\nlogin: java.lang.NullPointerException\n        at java.io.BufferedInputStream.read(BufferedInputStream.java:208)\n        at java.io.FilterInputStream.read(FilterInputStream.java:69)\n        at java.io.PushbackInputStream.read(PushbackInputStream.java:123)\n        at org.apache.commons.net.io.FromNetASCIIInputStream.__read\n(FromNetASCIIInputStream.java:114)\n        at org.apache.commons.net.io.FromNetASCIIInputStream.read\n(FromNetASCIIInputStream.java:209)\n        at java.io.BufferedInputStream.fill(BufferedInputStream.java:186)\n        at java.io.BufferedInputStream.read(BufferedInputStream.java:204)\n        at org.apache.commons.net.telnet.TelnetInputStream.__read\n(TelnetInputStream.java:140)\n        at org.apache.commons.net.telnet.TelnetInputStream.run\n(TelnetInputStream.java:464)\n        at java.lang.Thread.run(Thread.java:484)\n=================================================================\n\nPlease help on this. This problem is there in 1.0.0. Recenly we downloaded \n1.1.0. this new version also has the same problem on linux. I am not sure, \nthis bug is related to linux or commons-net.\n\nThank you for your help\nKrishnarao.\nknandipati@s-square.net",
            "resolved": "2009-03-22",
            "versions": [
                "1.1"
            ],
            "fixVersions": []
        },
        {
            "issue_id": "NET-110",
            "project": "Commons Net",
            "title": "[net] FTP component fails to throw error when ftp site fails to list contents properly",
            "type": "Bug",
            "description": "Hi, below I've attached a copy of an FTP session taken through the command\nprompt. This ftp server has a problem were every second command issued to it\nfails. It first issues a 200 command successful, but then fails with 425 Can't\nopen data connection. The result from a call to FTPClient.listFiles() and\nFTPClientlistFiles(String) returns an array of 0 files. Given this case it\nshould throw an IOException in this case. I imagine it doesn't probably because\nof the 200 command successful that comes up in this case, but I haven't gone\nthrough the source to verify it.\n\nftp> dir\n200 command successful\n150 Opening ASCII data connection for directory listing\ndrwxr-x---  2 cwftp    System            0 Nov 19 22:51 .\ndrwxr-x---  2 cwftp    System            0 Nov 19 22:51 ..\n226 transfer complete\nftp: 119 bytes received in 0.00Seconds 119000.00Kbytes/sec.\nftp> dir\n200 command successful\n425 Can't open data connection.\nftp> dir\n200 command successful\n150 Opening ASCII data connection for directory listing\ndrwxr-x---  2 cwftp    System            0 Nov 19 22:51 .\ndrwxr-x---  2 cwftp    System            0 Nov 19 22:51 ..\n226 transfer complete\nftp: 119 bytes received in 0.00Seconds 119000.00Kbytes/sec.\nftp> dir\n200 command successful\n425 Can't open data connection.",
            "resolved": "2007-09-20",
            "versions": [
                "1.2"
            ],
            "fixVersions": []
        },
        {
            "issue_id": "NET-109",
            "project": "Commons Net",
            "title": "TFTPClient.sendFile()  not sending last packet",
            "type": "Bug",
            "description": "It appears that the sendFile() method in TFTPClient from Commons Net release\n1.4.0 is not working. What happens is all 512 byte fixed length data packets are\nsend, but the last packet (which is less then 512) is never sent, yet the method\nexits cleanly. I discovered this issue when writing an application which uses\nthe Commons Net API to send a file via TFTP and things weren't working. After\nsome packet sniffing to see what the was being sent, I compared the Windows\ncommand-line TFTP client to the Commons Net API, and discovered a discontinuity\nbetween the two transfers, which shouldn't be the case. According to Ethereal,\nthe Commons Net API does not appear to be sending out the last packet in a\nnormal TFTP session (the packet with less then 512 bytes of data, which signals\nthe end of a transfer). Using the example program \"tftp.java\" from\n\"commons-net/java/example\" the same issue is present. If you send a file using\nthe TFTPClient, take a look at the send file on the destination machine, and\nyou'll see that the file is incomplete (missing a < 512 byte section from the\nend of file).\n\nLooking at the source, the problem is that the \"lastAckWait\" boolean variable in\nthe send() method is never being modified, resulting in the last packet never\nbeing sent. The solution to this issue is to add the following marked if\nstatement to the bottom of the send() method:\n\n\n\t\t\tdata.setBlockNumber(block);\n\t\t\tdata.setData(_sendBuffer, 4, offset - 4);\n\t\t\tsent = data;\n\t\t\t\n\t\t\t/*\n\t\t\t *  BUG FIX: Start\n\t\t\t */\n\t\t\tif(dataLength != 0){\n\t\t\t\tlastAckWait = true;\n\t\t\t}\n\t\t\t/*\n\t\t\t *  BUG FIX: End\n\t\t\t */\n\t\t\t\n\t\t} while (dataLength == 0 || lastAckWait);\n\n\t\tendBufferedOps();\n\t}\n\n\n\nI'll submitting my source patch right away for this bug.",
            "resolved": "2007-09-20",
            "versions": [
                "1.4"
            ],
            "fixVersions": []
        },
        {
            "issue_id": "NET-108",
            "project": "Commons Net",
            "title": "Directory names starting with numbers parsed improperly with NTFTPEntryParser",
            "type": "Bug",
            "description": "When connecting to a Microsoft FTP Service using MS-DOS directory listings if \nthe directory starts with a number the directory name is parsed incorrectly \nwhen using the following:\n\n  NTFTPEntryParser parser = new NTFTPEntryParser();\n  FTPFile[] FTPFiles = ftp.listFiles(parser);\n\nFor example if the directory name is 2003-05-27 the FTPFile[i].getName() \nreturns -05-27.\n\nThe issue is with the regexp in NTFTPEntryParser. For a quick fix I just\nslightly modified the 8th group from \"([0-9]+)?\\\\s*\" to \"([0-9]+)?\\\\s\\\\s*\"\nso the final regexp is as follows:\n\n    private static final String REGEX =\n        \"((?:0[1-9])|(?:1[0-2]))-\" \n        + \"((?:0[1-9])|(?:[1-2]\\\\d)|(?:3[0-1]))-\" \n        + \"(\\\\d\\\\d)\\\\s*\" \n        + \"((?:0[1-9])|(?:1[012])):\" \n        + \"([0-5]\\\\d)\\\\s*\" \n        + \"([AP])M\\\\s*\" \n        + \"(<DIR>)?\\\\s*\" \n        + \"([0-9]+)?\\\\s\\\\s*\"\n        + \"(\\\\S.*)\";",
            "resolved": "2007-09-20",
            "versions": [
                "1.0"
            ],
            "fixVersions": []
        },
        {
            "issue_id": "NET-107",
            "project": "Commons Net",
            "title": "FTPClient.listFiles intermittently locks up",
            "type": "Bug",
            "description": "FTPClient.listFiles intermittently locks up on me, about every couple dozen \ntimes I call it.  I can reproduce this with the 1.0 release and with last \nnight's build.  When I attach a debugger and look at the stack traces (below), \nI see that DefaultFTPFileListParser.parseFileList calls \nBufferedReader.readLine.  Is it possible that due to networking hiccups, \nreadLine isn't getting its end-of-line and it never times out?\n\nUsing the 1.0 version:\n\nmain:\n  [1] java.net.SocketInputStream.socketRead0 (native method)\n  [2] java.net.SocketInputStream.read (null)\n  [3] sun.nio.cs.StreamDecoder$CharsetSD.readBytes (null)\n  [4] sun.nio.cs.StreamDecoder$CharsetSD.implRead (null)\n  [5] sun.nio.cs.StreamDecoder.read (null)\n  [6] java.io.InputStreamReader.read (null)\n  [7] java.io.BufferedReader.fill (null)\n  [8] java.io.BufferedReader.readLine (null)\n  [9] java.io.BufferedReader.readLine (null)\n  [10] org.apache.commons.net.ftp.DefaultFTPFileListParser.parseFileList\n(DefaultFTPFileListParser.java:397)\n  [11] org.apache.commons.net.ftp.FTPClient.listFiles\n(FTPClient.java:1,933)\n  [12] org.apache.commons.net.ftp.FTPClient.listFiles\n(FTPClient.java:1,964)\n  [13] org.apache.commons.net.ftp.FTPClient.listFiles\n(FTPClient.java:2,020)\n\nUsing last night's build:\n\nmain:\n  [1] java.net.SocketInputStream.socketRead0 (native method)\n  [2] java.net.SocketInputStream.read (null)\n  [3] sun.nio.cs.StreamDecoder$CharsetSD.readBytes (null)\n  [4] sun.nio.cs.StreamDecoder$CharsetSD.implRead (null)\n  [5] sun.nio.cs.StreamDecoder.read (null)\n  [6] java.io.InputStreamReader.read (null)\n  [7] java.io.BufferedReader.fill (null)\n  [8] java.io.BufferedReader.readLine (null)\n  [9] java.io.BufferedReader.readLine (null)\n  [10] org.apache.commons.net.ftp.DefaultFTPFileListParser.parseFileList\n(DefaultFTPFileListParser.java:395)\n  [11] org.apache.commons.net.ftp.FTPClient.listFiles\n(FTPClient.java:1,985)\n  [12] org.apache.commons.net.ftp.FTPClient.listFiles\n(FTPClient.java:2,016)\n  [13] org.apache.commons.net.ftp.FTPClient.listFiles\n(FTPClient.java:2,072)\n\nFound using Windows 2000 with Sun's 1.4.2 VM.",
            "resolved": "2009-10-30",
            "versions": [
                "1.0"
            ],
            "fixVersions": []
        },
        {
            "issue_id": "NET-106",
            "project": "Commons Net",
            "title": "Parsing error",
            "type": "Bug",
            "description": "The NTFTPEntryParser parsing  a row in not correct mode  of \"dir\" when the \nfilename starts with a number. In such case the number is cut by the name and \nmaybe interpreted as size of the file.\nI patched the problem specifing in the regular expression of the row that the \nnumber must be followed by at least a space to be interpreted as size of the \nfile and not as part of the name.\nHowever if the filename contains more words and the first word is a number the \nproblem also appears\n\nMy Patch:\nBefore of the correction \n     private static final String REGEX =\n       ..................\n        + \"([0-9]+)?\\\\s*\" \n        + \"(\\\\S.*)\";\n\nAfter the correction\n    private static final String REGEX =\n         ........\n        + \"([0-9]+)?\\\\s+\"     <--- Here the correction\n        + \"(\\\\S.*)\";\n\n\nBest Regards\nLuca Chiesa",
            "resolved": "2007-09-20",
            "versions": [
                "1.2"
            ],
            "fixVersions": []
        },
        {
            "issue_id": "NET-105",
            "project": "Commons Net",
            "title": "[net] FTP Parsing off in Net Components for ACL",
            "type": "Bug",
            "description": "If a directory has a access control list tied to it, when a directory listing is\nspit out, a plus is appended onto the end of the permissions.  This causes\nparsing of the file fails.  Below are two patches that solves this.  The first\nis for the test file under\n/net/trunk/src/test/org/apache/commons/net/ftp/parser/.  The second is the\nactual parser that is under /net/trunk/src/java/org/apache/commons/net/ftp/parser.\n\n\nIndex: UnixFTPEntryParserTest.java\n===================================================================\n--- UnixFTPEntryParserTest.java\t(revision 155093)\n+++ UnixFTPEntryParserTest.java\t(working copy)\n@@ -24,7 +24,7 @@\n \n /**\n  * @author <a href=\"mailto:scohen@apache.org\">Steve Cohen</a>\n- * @version $Id: UnixFTPEntryParserTest.java,v 1.15 2004/09/14 01:47:17 scohen\nExp $\n+ * @version $Id$\n  */\n public class UnixFTPEntryParserTest extends FTPParseTestFramework\n {\n@@ -45,6 +45,7 @@\n \n     private static final String[] goodsamples =\n     {\n+\n         \"-rw-r--r--   1 500      500            21 Aug  8 14:14 JB3-TES1.gz\",\n         \"-rwxr-xr-x   2 root     root         4096 Mar  2 15:13 zxbox\",\n         \"drwxr-xr-x   2 root     root         4096 Aug 24  2001 zxjdbc\",\n@@ -70,6 +71,8 @@\n         \"-rwSr-Sr--   1 500      500             0 Mar 25 08:22 testSuid\",\n \t\t\"-rwsr-sr--   1 500      500             0 Mar 25 08:23 testSuidExec\",\n \t\t\"-rwsr-sr--   1 500      500             0 Mar 25 0:23 testSuidExec2\",\n+        \"drwxrwx---+ 23 500     500    0 Jan 10 13:09 testACL\",\n+\n \t\t\"-rw-r--r--   1 1        3518644 May 25 12:12 std\"\n     };\n\n\nIndex: UnixFTPEntryParser.java\n===================================================================\n--- UnixFTPEntryParser.java\t(revision 155093)\n+++ UnixFTPEntryParser.java\t(working copy)\n@@ -26,7 +26,7 @@\n  * This class is based on the logic of Daniel Savarese's\n  * DefaultFTPListParser, but adapted to use regular expressions and to fit the\n  * new FTPFileEntryParser interface.\n- * @version $Id: UnixFTPEntryParser.java,v 1.21 2005/01/02 03:17:50 scohen Exp $\n+ * @version $Id$\n  * @see org.apache.commons.net.ftp.FTPFileEntryParser FTPFileEntryParser (for\nusage instructions)\n  */\n public class UnixFTPEntryParser extends ConfigurableFTPFileEntryParserImpl\n@@ -65,7 +65,7 @@\n      */\n     private static final String REGEX =\n         \"([bcdlfmpSs-])\"\n-        +\n\"(((r|-)(w|-)([xsStTL-]))((r|-)(w|-)([xsStTL-]))((r|-)(w|-)([xsStTL-])))\\\\s+\"\n+        +\n\"(((r|-)(w|-)([xsStTL-]))((r|-)(w|-)([xsStTL-]))((r|-)(w|-)([xsStTL-])))\\\\+?\\\\s+\"\n         + \"(\\\\d+)\\\\s+\"\n         + \"(\\\\S+)\\\\s+\"\n         + \"(?:(\\\\S+)\\\\s+)?\"",
            "resolved": "2007-09-20",
            "versions": [
                "Nightly Builds"
            ],
            "fixVersions": []
        },
        {
            "issue_id": "NET-104",
            "project": "Commons Net",
            "title": "[net] POP3Client ProtocolCommandListener protocolReplyReceived method event.getMessage() is empty/blank",
            "type": "Bug",
            "description": "Using POP3Client.addProtocolCommandListener, when the listener's\nprotocolReplyReceived method is called with a ProtocolCommandEvent object, the\ngetMessage() method of this object returns a blank string. It should return the\nreply string. Caused by POP3.__getReply() calling the listener before it has\nsaved the reply string in _replyLines.\n\nPseudocode example:\n\npublic class TestPOP3 implements ProtocolCommandLister \n{\n\tpublic void connect()\n\t{\n\t\t\t\tPOP3Client client = new POP3Client();\n\t\t\t\tclient.addProtocolCommandListener(this);\n\t\t\t\tclient.connect(emailServer);\n\t\t\t\tclient.login(emailUsername, emailPassword);\n\t\t\t\tclient.disconnect();\n\t}\n\tpublic void protocolCommandSent(ProtocolCommandEvent vent)\n\t{\n\t\tlog.debug(\">\" + event.getMessage());\n\t}\n\tpublic void protocolReplyReceived(ProtocolCommandEvent vent)\n\t{\n\t\t// bug: event.getMessage() is always an empty string ere\n\t\tlog.debug(\"<\" + event.getMessage());\n\t}\n}",
            "resolved": "2007-09-20",
            "versions": [
                "Nightly Builds"
            ],
            "fixVersions": []
        },
        {
            "issue_id": "NET-103",
            "project": "Commons Net",
            "title": "All FTPEntryParser do not work with files > 4GB",
            "type": "Bug",
            "description": "I use commons-net-1.2.2\nAll FTPEntryParser only support Files smaller than 4 GB because they use \nInteger.parseInt() to parse the file size.Most FTP servers today support files \n> 4GB. FTPFile.setSize() and all other classes in commons-net supports long \nvalues so Long.parseLong() would be much better.",
            "resolved": "2007-09-20",
            "versions": [
                "1.2"
            ],
            "fixVersions": []
        },
        {
            "issue_id": "NET-102",
            "project": "Commons Net",
            "title": "[net] FTP: NoSuchMethodError thrown when sending command to disconnected FTP server",
            "type": "Bug",
            "description": "- This bug only happens when running under JDK1.3.x or lower.\n  (when running under JDK1.4.x or higher, this bug does not happen)\n- Create and configure an FTP server. Make sure it runs OK.\n\n- Create a program and run it under JDK1.3.x or lower:\n=== Test Program ===================================\n...\n...\n// Connect to the above FTP server and login\n// Check that everything went fine.\n...\nwhile (true)\n{\n    try {\n        FTPFile[] files = ftpClient.listFiles(\"*\");\n        showFiles(files);\n    }\n    catch (FTPConnectionClosedException fcce) {\n        // Oops.. the FTP server has been disconnected.\n        System.out.println(\"Disconnected from FTP Server. Ending prog.\");\n        break; // while(true)\n    }\n    Thread.sleep(3000);\n}\n... // close/disconnect and clean-up.\n...\n====================================================\n\n- Run the above program. The ftpClient.listFiles(...) works OK.\n- At some point, stop the FTP server.\n\n=== Expected result: ===============================\nProgram ends normally with message \"Disconnected from FTP Server. Ending prog.\"\n====================================================\n\n=== Actual result: =================================\nPogram throws java.lang.NoSuchMethodError.\n====================================================\n\n=== Stacktrace: ====================================\njava.lang.NoSuchMethodError\n\tat org.apache.commons.net.ftp.FTP.sendCommand(FTP.java:442)\n\tat org.apache.commons.net.ftp.FTP.sendCommand(FTP.java:484)\n\tat org.apache.commons.net.ftp.FTP.sendCommand(FTP.java:533)\n\tat org.apache.commons.net.ftp.FTP.pasv(FTP.java:833)\n\tat org.apache.commons.net.ftp.FTPClient._openDataConnection_\n(FTPClient.java:493)\n\tat org.apache.commons.net.ftp.FTPClient.initiateListParsing\n(FTPClient.java:2356)\n\tat org.apache.commons.net.ftp.FTPClient.initiateListParsing\n(FTPClient.java:2330)\n\tat org.apache.commons.net.ftp.FTPClient.listFiles(FTPClient.java:2072)\n\tat org.apache.commons.net.ftp.FTPClient.listFiles(FTPClient.java:2123)\n====================================================\n\n=== Probable cause: ================================\nThe FTP.sendCommand(...) method, on line 442 is as follows:\n\n    if (!isConnected() || _socket_ == null || !_socket_.isConnected())\n\nThe '_socket_' variable is of type 'java.net.Socket'.\nUnder JKD1.3, the 'java.net.Socket' class does NOT implement 'isConnected()'.\n====================================================\n\nWhy this bug is \"P1 & critical\": If the FTP Server closed the connection (e.g. \ndue to a time-out), our code catches the FTPConnectionClosedException exception \nand tries to reconnect to the server. If this exception is not thrown, but the \nNoSuchMethodError is thrown instead, our code fails.\n\nPS: It is hard to find information about which JDK-versions support the \nCommons/Net component. This page (http://jakarta.apache.org/commons/net/changes-\nreport.html#1_3_0), indicates that the component should run correctly at least \nunder JDK1.3.x.",
            "resolved": "2007-09-20",
            "versions": [
                "1.3"
            ],
            "fixVersions": []
        },
        {
            "issue_id": "NET-101",
            "project": "Commons Net",
            "title": "[net] Stream Corruption while sending data to telnet session",
            "type": "Bug",
            "description": "The stream written to a telnet session using the \norg.apache.commons.net.telnet.TelnetClient class gets corrupted while\nrunning on a Windows 2000 Professional/ Server. I am not sure if this happens \non other OS'. This happens regardless of the JVM i run it under. I have tried \neven 1.2, 1.3 and 1.4. \n\nFor e.g., If I send a command \n<  copy bbb.txt aaa.txt >\nWhat is written to the stream is \n<  copy b.txt a.txt >\nAll consecutive bytes which are identical seem to get discarded. This happens \nonly during normal execution and debugging doesnt help, because the problems \ngoes away in the debug mode.",
            "resolved": "2007-09-20",
            "versions": [
                "Nightly Builds"
            ],
            "fixVersions": []
        },
        {
            "issue_id": "NET-100",
            "project": "Commons Net",
            "title": "TelnetInputStream zombie thread memory leak, FTPClient TelnetClient",
            "type": "Bug",
            "description": "If myFTPClient.setReaderThread(false) and many ftp clients are instanciated \nover time, the VM gets out of memory errors. The problem is that the underlying \nTelnetClient's TelnetInputStream creates a new thread that it never uses (never \nstarts, or joins). The VM is unable to garbage collect these zombie threads. \nThis problem is paticularly notable given that several users have observed \nhangs doing continual ftp unless setReaderThread(false). This observed on hpux \njdk 1.3 <todo lookup specific version>\n\nHere's a patch:\n\ncvs server: Diffing src/java/org/apache/commons/net/telnet\nIndex: src/java/org/apache/commons/net/telnet/TelnetClient.java\n===================================================================\nRCS file: /home/cvspublic/jakarta-\ncommons/net/src/java/org/apache/commons/net/telnet/TelnetClient.java,v\nretrieving revision 1.12\ndiff -r1.12 TelnetClient.java\n100,101c100\n< \n<         tmp = new TelnetInputStream(input, this);\n---\n>         tmp = new TelnetInputStream(input, this, readerThread);\nIndex: src/java/org/apache/commons/net/telnet/TelnetInputStream.java\n===================================================================\nRCS file: /home/cvspublic/jakarta-\ncommons/net/src/java/org/apache/commons/net/telnet/TelnetInputStream.java,v\nretrieving revision 1.11\ndiff -r1.11 TelnetInputStream.java\n56c56\n<     TelnetInputStream(InputStream input, TelnetClient client)\n---\n>     TelnetInputStream(InputStream input, TelnetClient client, boolean \nreaderThread)\n72c72,74\n<         __thread = new Thread(this);\n---\n>         if (readerThread) {\n>             __thread = new Thread(this);\n>         }\n76a79\n>         if (__thread==null) { return; }\n498c501\n<             if (__thread.isAlive())\n---\n>             if (__thread!=null && __thread.isAlive())",
            "resolved": "2006-05-16",
            "versions": [
                "Nightly Builds"
            ],
            "fixVersions": []
        },
        {
            "issue_id": "NET-96",
            "project": "Commons Net",
            "title": "[net] commons-net 1.4.0 binaries are incorrectly compiled as JDK 1.4",
            "type": "Bug",
            "description": "Commons-Net is supposed to be targeting jdk 1.2, yet project.properties for the\nproject contains the line\n\nmaven.compile.target=1.4\n\nAlthough some of the incompatibilites were cleaned up in SOURCE earlier, the\nrelease binaries are wrong and cause problems for those who use jdk 1.3.x.",
            "resolved": "2007-09-20",
            "versions": [
                "1.4"
            ],
            "fixVersions": []
        },
        {
            "issue_id": "NET-93",
            "project": "Commons Net",
            "title": "[net] commons-net-1.4.0 cannot compile with my code",
            "type": "Bug",
            "description": "I downloaded commons-net-1.4.0 and tried to use it to compile my java file\n(called FTPActiveDataSocket.java) and I get the following error which is\npreventing me from moving using the commons-net-1.4.0 library:\n\nC:\\test>javac -deprecation -classpath commons-net-1.4.0.jar FTPActiveDataSocket.java\nFTPActiveDataSocket.java:3: cannot access org.apache.commons.net.ftp.FTPClient\nbad class file: commons-net-1.4.0.jar(org/apache/commons/net/ftp/FTPClient.class\n)\nclass file has wrong version 48.0, should be 47.0\nPlease remove or make sure it appears in the correct subdirectory of the classpa\nth.\nimport org.apache.commons.net.ftp.FTPClient;\n                                  ^\n1 error\n\n\nI am using JDK 1.3.1_04 and I cannot upgrade due to the fact that our product is\nin production and uses iPlanet which uses JDK 1.3.1. When I compile with\ncommons-net-1.3.0, it's fine; however, I want to use commons-net-1.4.0 because I\nget an exception when I use commons-net-1.3.0 when I call FTPClient.listFiles(\nfileName ), no matter whether I use FTPClient.listFiles() or FTPClient.listFiles\nwith a specfic parser. Here's the exception I get with commons-net-1.3.0.\n\nException in thread \"main\" java.lang.NoClassDefFoundError: org/apache/oro/text/r\negex/MalformedPatternException\n        at org.apache.commons.net.ftp.parser.DefaultFTPFileEntryParserFactory.cr\neateNTFTPEntryParser(DefaultFTPFileEntryParserFactory.java:134)\n        at org.apache.commons.net.ftp.parser.DefaultFTPFileEntryParserFactory.cr\neateFileEntryParser(DefaultFTPFileEntryParserFactory.java:95)\n        at org.apache.commons.net.ftp.FTPClient.initiateListParsing(FTPClient.ja\nva:2327)\n        at org.apache.commons.net.ftp.FTPClient.listFiles(FTPClient.java:2072)\n        at org.apache.commons.net.ftp.FTPClient.listFiles(FTPClient.java:2123)\n        at FTPClientTest.getRemoteFileInfoListFiles(FTPClientTest.java:277)\n        at FTPClientTest.main(FTPClientTest.java:375)",
            "resolved": "2007-09-20",
            "versions": [
                "1.4"
            ],
            "fixVersions": []
        },
        {
            "issue_id": "NET-92",
            "project": "Commons Net",
            "title": "ftp directory parsing doesn't work at ftp://ftp.infobiogen.fr",
            "type": "Bug",
            "description": "The ftp daemon at ftp://ftp.infobiogen.fr appears to have a rather unique way of\nlisting files and directories which the 'ftp handler' in Commons.Net can't take\ncare of. \n\nApparently, it's running 'wu-2.6.2+Sun",
            "resolved": "2007-09-20",
            "versions": [
                "Nightly Builds"
            ],
            "fixVersions": []
        },
        {
            "issue_id": "NET-91",
            "project": "Commons Net",
            "title": "commons.net.FTPClient hangs on disconnect or logout",
            "type": "Bug",
            "description": "By repetitively calling \n\n        try { \n            \n            // connect and login to the FTP server\n            ftpc.connect(getPropertyFromEnv(\"FTP_SERVER\"));\n            \n            ftpc.login(getPropertyFromEnv(\"USERNAME\"), getPropertyFromEnv\n(\"PASSWORD\"));   //technically we may have to break this into 2 blocks see \nexamples\n\n            // After connection attempt, check the reply code to verify success.\n            reply = ftpc.getReplyCode();\n            response = ftpc.getReplyString();\n\n            if(!FTPReply.isPositiveCompletion(reply)) {\n                System.err.println(\"FTP server refused connection or login.\");\n                killFTP(ftpc);\n                ftpc = null;\n            }\n        } catch(IOException e) {\n            System.err.println(\"Can't connect or login to server, reply \n= \"+reply+ \" response = \" + response);\n            killFTP(ftpc);\n            ftpc = null;\n        }\n\n\nand then\n\n        if (ftpc.isConnected()) {\n            try {\n                ftpc.logout();\n            } catch (Exception e) { // do nothing \n                System.out.println(\"Exception in ftpc.logout()\");\n            }\n            try {\n                ftpc.disconnect();\n            } catch (Exception e) { // do nothing \n                System.out.println(\"Exception in ftpc.disconnect()\");\n            }\n        }\n\none of the two bottom calls hangs and I'm assuming that it's in an infinite\nloop waiting for something that the server isn't sending.  We try and hook to\na Linux FTP server, and Windows FTP server and 99.99 % of the time it works, \nbut every once in a while, it hangs and we have to kill the FTP daemon.  After \ndoing that everything works again!!!",
            "resolved": "2007-09-20",
            "versions": [
                "1.4"
            ],
            "fixVersions": []
        },
        {
            "issue_id": "NET-90",
            "project": "Commons Net",
            "title": "[net] FTP \"get\" and \"list\" tasks fail",
            "type": "Bug",
            "description": "When attempting to get or list files via FTP, ANT returns the filenames \ncorrupted.\n\nRunning Ant 1.6.1 under MS Windows 2000, client is Unix on AIX RS6000.\n \nTo reproduce:\n-------------------------------------------------------------------------\n<?xml version='1.0'?>\n<project name='INGDirect' basedir='.' default='FTPList'> \n\t\n\t<description>\n\t\t\tUse FTP to list files on Unix box\n\t</description>\n\t\n    <property name='libhome' location='D:\\apache-ant-1.6.1\\lib' />\n    <property name='java.classpath' location='${libhome}\\ant-starteam-1.6.jar;\n{libhome}\\commons-net.jar;{libhome}\\jakarta-oro.jar'/>\n\t<taskdef name=\"ftp\" \nclassname=\"org.apache.tools.ant.taskdefs.optional.net.FTP\" />\n\n\t<target name='FTPList'>       \n\t\n   \t<ftp action=\"list\"\n\t\t       server=\"abcd\"\n\t\t       userid=\"****\"\n\t\t       password=\"****\" \n\t\t       remotedir=\"mirtest\"\n\t\t       listing='tmp.list'\n\t\t       verbose=\"yes\">\n\t\t  <fileset>\n\t\t  \t<include name=\"**.m\"/>\n\t\t  </fileset>\n\t\t</ftp>\n\n\n\t</target>\n\n</project>\n\n-------------------------------------------------------------\nOutput is:\n\n\nD:\\ant-scripts\\source>set PATH=D:\\apache-ant-1.6.1\\bin;\\\\rdgswas1\n\\StarGate_Lib;C:\\WINNT\\System32;D:\\apache-ant-1.6.1\\lib \n\nD:\\ant-scripts\\source>set CLASSPATH=\\\\rdgswas1\\StarGate_Lib\\starteam54.jar \n\nD:\\ant-scripts\\source>ANT -d   \nApache Ant version 1.6.1 compiled on February 12 2004\nBuildfile: build.xml\nAdding reference: ant.PropertyHelper\nDetected Java version: 1.4 in: C:\\j2sdk1.4.1_01\\jre\nDetected OS: Windows 2000\nAdding reference: ant.ComponentHelper\nSetting ro project property: ant.version -> Apache Ant version 1.6.1 compiled \non February 12 2004\nSetting ro project property: ant.file -> D:\\ant-scripts\\source\\build.xml\nAdding reference: ant.projectHelper\nAdding reference: ant.parsing.context\nAdding reference: ant.targets\nparsing buildfile D:\\ant-scripts\\source\\build.xml with URI = file:///D:/ant-\nscripts/source/build.xml\nSetting ro project property: ant.project.name -> INGDirect\nAdding reference: INGDirect\nSetting ro project property: ant.file.INGDirect -> D:\\ant-\nscripts\\source\\build.xml\nProject base dir set to: D:\\ant-scripts\\source\n +Target: \n +Target: FTPList\nSetting project property: libhome -> D:\\apache-ant-1.6.1\\lib\nSetting project property: java.classpath -> D:\\apache-ant-1.6.1\\lib\\ant-\nstarteam-1.6.jar;{libhome}\\commons-net.jar;{libhome}\\jakarta-oro.jar\n  [taskdef] dropping rdgswas1\\StarGate_Lib\\starteam54.jar from path as it \ndoesn't exist\nClass org.apache.tools.ant.taskdefs.optional.net.FTP loaded from parent loader \n(parentFirst)\nBuild sequence for target `FTPList' is [FTPList]\nComplete build sequence is [FTPList, ]\n\nFTPList:\n      [ftp] Opening FTP connection to dbos\n      [ftp] connected\n      [ftp] logging in to FTP server\n      [ftp] login succeeded\n      [ftp] changing the remote directory\n      [ftp] listing files\nCould not load a dependent class (com/sun/media/jai/codec/FileSeekableStream) \nfor type image\nCould not load a dependent class (com/jcraft/jsch/UserInfo) for type sshexec\nCould not load a dependent class (com/jcraft/jsch/UserInfo) for type scp\nCould not load class (org.apache.tools.ant.tasksdefs.cvslib.CvsVersion) for \ntype cvsversion\nCould not load a dependent class (jdepend/xmlui/JDepend) for type jdepend\nCould not load a dependent class (junit/framework/TestListener) for type junit\nfileset: Setup scanner in dir null with patternSet{ includes: [**.m] excludes: \n[] }\n      [ftp] listing ar 16:27 ZMIR2.m\n      [ftp] listing ar 16:27 ZMIR69.m\n      [ftp] listing ar 16:27 ZMIRNEW.m\n      [ftp] listing ar 16:27 ZMRPC03A.m\n      [ftp] listing ar 16:27 ZMRPC03B.m\n      [ftp] listing ar 16:27 ZMRPC61A.m\n      [ftp] listing ar 16:27 ZMRPC800.m\n      [ftp] listing ar 16:27 ZMRPC801.m\n      [ftp] listing ar 16:27 ZMRPC802.m\n      [ftp] listing ar 16:27 ZMRPC803.m\n      [ftp] listing ar 16:27 ZMRPC804.m\n      [ftp] listing ar 16:27 ZMRPC805.m\n      [ftp] listing ar 16:27 ZMRPC806.m\n      [ftp] listing ar 16:27 ZMRPC808.m\n      [ftp] listing ar 16:27 ZMRPC809.m\n      [ftp] listing ar 16:27 ZMRPC810.m\n      [ftp] listing ar 16:27 ZMRPC812.m\n      [ftp] listing ar 16:27 ZMRPC901.m\n      [ftp] listing ar 16:27 ZMRPC902.m\n      [ftp] listing ar 16:27 ZMRPC903.m\n      [ftp] listing ar 16:27 ZMRPC904.m\n      [ftp] listing ar 16:27 ZMRPC905.m\n      [ftp] listing ar 16:27 ZMRPC906.m\n      [ftp] listing ar 16:27 ZMRPC907.m\n      [ftp] listing ar 16:27 ZMRPC908.m\n      [ftp] listing ar 16:27 ZMRPC909.m\n      [ftp] listing ar 16:27 ZMRPC910.m\n      [ftp] listing ar 16:27 ZMRPC913.m\n      [ftp] listing ar 16:27 ZMRPC914.m\n      [ftp] listing ar 16:27 ZMRPC921.m\n      [ftp] listing ar 16:27 ZMRPC925.m\n      [ftp] listing ar 16:27 ZMRPC926.m\n      [ftp] listing ar 16:27 ZMRPC927.m\n      [ftp] listing ar 16:27 ZMRPC929.m\n      [ftp] listing ar 16:27 ZMRPC930.m\n      [ftp] listing ar 16:27 ZMRPC935.m\n      [ftp] listing ar 16:27 ZMRPC938.m\n      [ftp] listing ar 16:27 ZMRPC940.m\n      [ftp] listing ar 16:27 ZMRPC941.m\n      [ftp] listing ar 16:27 ZMRPC942.m\n      [ftp] listing ar 16:27 ZMRPC961.m\n      [ftp] listing ar 16:27 ZMRPC962.m\n      [ftp] listing ar 16:27 ZMRPC963.m\n      [ftp] listing ar 16:27 ZMRPC964.m\n      [ftp] listing ar 16:27 ZMRPC979.m\n      [ftp] listing ar 16:27 ZMRPC991.m\n      [ftp] listing ar 16:27 ZMRPCP29.m\n      [ftp] listing ar 16:27 ZMRPCUTL.m\n      [ftp] 48 files listed\n      [ftp] disconnecting\n\nBUILD SUCCESSFUL\nTotal time: 2 seconds\n---------------------------------------------------------------------------\nContents of \"listing\" file\n\n\n-rw-r-----   1 ravensm  sca          814 02 Mar 16:27 ZMIR2.m\n-rw-r-----   1 ravensm  sca          780 02 Mar 16:27 ZMIR69.m\n-rw-r-----   1 ravensm  sca         2120 02 Mar 16:27 ZMIRNEW.m\n-rw-r-----   1 ravensm  sca        15347 02 Mar 16:27 ZMRPC03A.m\n-rw-r-----   1 ravensm  sca        12172 02 Mar 16:27 ZMRPC03B.m\n-rw-r-----   1 ravensm  sca         6242 02 Mar 16:27 ZMRPC61A.m\n-rw-r-----   1 ravensm  sca         3259 02 Mar 16:27 ZMRPC800.m\n-rw-r-----   1 ravensm  sca         3264 02 Mar 16:27 ZMRPC801.m\n-rw-r-----   1 ravensm  sca         5145 02 Mar 16:27 ZMRPC802.m\n-rw-r-----   1 ravensm  sca         5071 02 Mar 16:27 ZMRPC803.m\n-rw-r-----   1 ravensm  sca         5096 02 Mar 16:27 ZMRPC804.m\n-rw-r-----   1 ravensm  sca         4683 02 Mar 16:27 ZMRPC805.m\n-rw-r-----   1 ravensm  sca         5009 02 Mar 16:27 ZMRPC806.m\n-rw-r-----   1 ravensm  sca         2425 02 Mar 16:27 ZMRPC808.m\n-rw-r-----   1 ravensm  sca         9150 02 Mar 16:27 ZMRPC809.m\n-rw-r-----   1 ravensm  sca        18007 02 Mar 16:27 ZMRPC810.m\n-rw-r-----   1 ravensm  sca         3923 02 Mar 16:27 ZMRPC812.m\n-rw-r-----   1 ravensm  sca         7023 02 Mar 16:27 ZMRPC901.m\n-rw-r-----   1 ravensm  sca        15221 02 Mar 16:27 ZMRPC902.m\n-rw-r-----   1 ravensm  sca        16943 02 Mar 16:27 ZMRPC903.m\n-rw-r-----   1 ravensm  sca        11454 02 Mar 16:27 ZMRPC904.m\n-rw-r-----   1 ravensm  sca         5926 02 Mar 16:27 ZMRPC905.m\n-rw-r-----   1 ravensm  sca        14167 02 Mar 16:27 ZMRPC906.m\n-rw-r-----   1 ravensm  sca        31350 02 Mar 16:27 ZMRPC907.m\n-rw-r-----   1 ravensm  sca        26765 02 Mar 16:27 ZMRPC908.m\n-rw-r-----   1 ravensm  sca        40841 02 Mar 16:27 ZMRPC909.m\n-rw-r-----   1 ravensm  sca         3493 02 Mar 16:27 ZMRPC910.m\n-rw-r-----   1 ravensm  sca         4636 02 Mar 16:27 ZMRPC913.m\n-rw-r-----   1 ravensm  sca         5633 02 Mar 16:27 ZMRPC914.m\n-rw-r-----   1 ravensm  sca        12887 02 Mar 16:27 ZMRPC921.m\n-rw-r-----   1 ravensm  sca         8606 02 Mar 16:27 ZMRPC925.m\n-rw-r-----   1 ravensm  sca         9463 02 Mar 16:27 ZMRPC926.m\n-rw-r-----   1 ravensm  sca         5786 02 Mar 16:27 ZMRPC927.m\n-rw-r-----   1 ravensm  sca        12513 02 Mar 16:27 ZMRPC929.m\n-rw-r-----   1 ravensm  sca         6603 02 Mar 16:27 ZMRPC930.m\n-rw-r-----   1 ravensm  sca         4194 02 Mar 16:27 ZMRPC935.m\n-rw-r-----   1 ravensm  sca         7216 02 Mar 16:27 ZMRPC938.m\n-rw-r-----   1 ravensm  sca         4466 02 Mar 16:27 ZMRPC940.m\n-rw-r-----   1 ravensm  sca        23840 02 Mar 16:27 ZMRPC941.m\n-rw-r-----   1 ravensm  sca         3964 02 Mar 16:27 ZMRPC942.m\n-rw-r-----   1 ravensm  sca         6405 02 Mar 16:27 ZMRPC961.m\n-rw-r-----   1 ravensm  sca        41925 02 Mar 16:27 ZMRPC962.m\n-rw-r-----   1 ravensm  sca         9280 02 Mar 16:27 ZMRPC963.m\n-rw-r-----   1 ravensm  sca        10757 02 Mar 16:27 ZMRPC964.m\n-rw-r-----   1 ravensm  sca         3907 02 Mar 16:27 ZMRPC979.m\n-rw-r-----   1 ravensm  sca         3592 02 Mar 16:27 ZMRPC991.m\n-rw-r-----   1 ravensm  sca        44899 02 Mar 16:27 ZMRPCP29.m\n-rw-r-----   1 ravensm  sca        21039 02 Mar 16:27 ZMRPCUTL.m\n\n----------------------------------------------------------------------\n\ni.e. The FTP command is corrupting the incoming filenames. A similar example \nusing FTP \"get\" results in a DOS file being created named \"ar 16\".",
            "resolved": "2007-09-20",
            "versions": [
                "1.1"
            ],
            "fixVersions": []
        },
        {
            "issue_id": "NET-89",
            "project": "Commons Net",
            "title": "[net] TelnetClient broken for binary transmissions + solution",
            "type": "Bug",
            "description": "TelnetClient does not handle correctly binary transmissions in two places:\n\nFirst in TelnetClient#_connectAction_() the telnet input and output streams are\nwrapped in the NetASCII streams to handle net vs platform line separator\nconversion which breaks the binary data. My quick solution was to simply remove\nthose two wrapping streams. A more general solution might be to provide access\nto the unfilterer stream with methods like getUnfilteredInputStream and\ngetUnfilteredOutputStream or to dynamically stop the NetASCII stream from\n'corrupting' the stream when a TelnetOption.BINARY option is negotiated.\n\n{quote}\nAlso, in TelnetInputStream#__read() there is a bug in the __receiveState\nhandling for the _STATE_IAC state. When a second consecutive IAC (0x255) is\nreceived to encode the single 0x255 character, read does not return 0x255 but\ninstead move on to reading the next char in the stream.\n...\n{quote}\n\nThe above bug report has been moved to the subtask NET-329\n\nI'll provide patches for this.\nColin.",
            "resolved": "2011-03-22",
            "versions": [],
            "fixVersions": [
                "3.0"
            ]
        },
        {
            "issue_id": "NET-88",
            "project": "Commons Net",
            "title": "[net] Unable to initiate FTP send",
            "type": "Bug",
            "description": "I get the following error when trying to transfer a file to a server:\n\nError during FTP transfer: java.io.IOException: Host attempting data connection\nxxx.xxx.xxx.xxx is not same as server yyy.yyy.yyy.yyy\n\nThis is perplexing because I can use a standalone FTP client without incident. \nThought it might be related to proxy settings, but none are used in the\nstandalone client.  If I remove the verification check from the code, the\ntransfer works.",
            "resolved": "2007-09-20",
            "versions": [
                "1.1"
            ],
            "fixVersions": []
        },
        {
            "issue_id": "NET-86",
            "project": "Commons Net",
            "title": "[net] FTP task pathname not recognizable",
            "type": "Bug",
            "description": "If there are spaces in given the pathname then it is not possible to get the \ndirectory or file listing in that path.\nFor example:\n/ftp/ftpcrawl server/xyz.txt is the pathname then if we do\n\nFtpfile[] files=ftp.listfiles(\"/ftp/ftpcrawl server/\");\n\nThen the pathname /ftp/ftpcrawl is recognised and hence it fails to list \nxyz.txt file.Here \"ftpcrawl server\" is the name of the folder.",
            "resolved": "2007-09-20",
            "versions": [
                "1.2"
            ],
            "fixVersions": []
        },
        {
            "issue_id": "NET-85",
            "project": "Commons Net",
            "title": "[net] telnet client not working well with Zirion Power Controller Model PSS-108MA",
            "type": "Bug",
            "description": "Description:\n\nWhen I used commons-net telnet client to get the power status of the ports in\nZirion Power controller (Model: PSS-108MA), I am not getting the output\nimmediately after the command \"*magic#POS\" is typed. Instead I get the output\nafter another command is typed. Please have a look below to understand well:\n\nActual Result: \njava -classpath commons-net-1.3.0-dev.jar examples.TelnetClientExample\n192.168.11.203 8000\n\nTelnetClientExample\nType AYT to send an AYT telnet command\nType OPT to print a report of status of options (0-24)\nType REGISTER to register a new SimpleOptionHandler\nType UNREGISTER to unregister an OptionHandler\nType SPY to register the spy (connect to port 3333 to spy)\nType UNSPY to stop spying the connection\n 220 192.168.11.203 RCON server (ZIRION v1.1) ready.\nReceived DO for option code 1\n\n*magic#POS\n *magic#exit\n11111111\n 221 Goodbye.\n\n\nExpected Result:\n\nWhen I used Linux telnet client to connect to the above controller, the Linux\ntelnet client is working fine.\n\ntelnet 192.168.11.203 8000\nTrying 192.168.11.203...\nConnected to 192.168.11.203 (192.168.11.203).\nEscape character is '^]'.\n 220 192.168.11.203 RCON server (ZIRION v1.1) ready.\n*magic#POS\n 11111111    (Comment:we r getting O/P imediately after issuing command)\n*magic#exit\n 221 Goodbye.\nConnection closed by foreign host.\n\nI have tcp dump traces for linux telnet client and commons-net telnet client\nwhich say that the data is sitting on the kernel which is not read by the\ncommons-net telnet client. I am attaching the tcpdump traces both for Linux\ntelnet client (tcp_linux_telnet.txt) and commons-net telnet\nclient(tcp_commons_net.txt). You can view 4 telnet packet dump using the command\n\"tcpdump -r <filename> -xx -s 1500\" or ethereal. I have taken telnet dump at the\ntime of issuing the command \"*magic#POS\".\n\nBuild Date & Platform:\n\nI have build \"commons-net-1.3.0-dev.jar\" from the cvs HEAD of jakarta-commons. I\nalso used latest commons-net-1.4.1.tar.gz, but even then the same problem persists.",
            "resolved": "2008-02-19",
            "versions": [
                "1.4"
            ],
            "fixVersions": []
        },
        {
            "issue_id": "NET-84",
            "project": "Commons Net",
            "title": "[net] TelnetClient#disconnect() causes NullPointerException from Linux when connected to Windows 2000 Telnet Server",
            "type": "Bug",
            "description": "When calling TelnetClient#disconnect(), a NullPointerException is thrown because\neither __input or __output is already null.  After fixing my working copy of the\nsource, an additional NPE is thrown in SocketClient#disconnect() because the\n_socket_ variable is already null.  I've patched both files to check for null of\nthe affected intasnce variables before calling the close() methods and will be\nsubmitting a patch.",
            "resolved": "2006-12-20",
            "versions": [
                "1.1"
            ],
            "fixVersions": [
                "2.0"
            ]
        },
        {
            "issue_id": "NET-83",
            "project": "Commons Net",
            "title": "[net] FTP timestamp: year recognition",
            "type": "Bug",
            "description": "org.apache.commons.net.ftp.parser.FTPTimestampParserImpl\n\npublic Calendar parseTimestamp(String timestampStr)\n      :\n    if (working.after(now)) {\n        working.add(Calendar.YEAR, -1);\n    }\n\nIf system date of the remote machine is ahead of local machine, the code above\ndoes not work well. For example, when the system date of local machine is five\nminutes later than date of file at the remote machine, it is recognized as the\nfile a year ago.\n\n  LOCAL SYSDATE:Jun/02/2005 14:00\n  File TimeStamp\n    Jun/02 14:05 --recognized as--> Jun/02/2004 14:05\n\nThe date format is switched after six months, so I think that the code above\nshuold be changed as following:\n\n    //    s  m  h  d half-year\n    // 1000*60*60*24*183=15811200000ms\n    long wkt = working.getTimeInMillis();\n    long nwt = now.getTimeInMillis();\n    if (wkt > (nwt+15811200000L)) {\n        working.add(Calendar.YEAR, -1);\n    }",
            "resolved": "2008-03-09",
            "versions": [
                "1.4"
            ],
            "fixVersions": []
        },
        {
            "issue_id": "NET-82",
            "project": "Commons Net",
            "title": "FTPClient.enterLocalPassiveMode() does not work",
            "type": "Bug",
            "description": "Test :\n...\nftp = new FTPClient();\nftp.addProtocolCommandListener(new ProtocolCommandListener() {...});\nftp.enterLocalPassiveMode();\nftp.connect(host);\nftp.login(username, password);\nftp.changeWorkingDirectory(remoteDir);\nInputStream is = ...;\nftp.storeFile(fileName,is);\nResult:\n\nReply code=220 Command=null Message=220 ProFTPD 1.2.2rc2 Server (PSDI Guest) \n[xxx]\nReply code=0 Command=USER Message=USER rrrr\nReply code=331 Command=null Message=331 Password required for rrrr.\nReply code=0 Command=PASS Message=PASS eeee\nReply code=230 Command=null Message=230 User rrrrlogged in.\nReply code=0 Command=CWD Message=CWD /xxx/yyy/\nReply code=250 Command=null Message=250 CWD command successful.\nReply code=0 Command=PORT Message=PORT 134,101,212,4,18,162\nReply code=200 Command=null Message=200 PORT command successful.\nReply code=0 Command=STOR Message=STOR file.ext\n\nThere are no \"PASV\" coomand in the trace!",
            "resolved": "2006-05-16",
            "versions": [
                "1.0"
            ],
            "fixVersions": []
        },
        {
            "issue_id": "NET-81",
            "project": "Commons Net",
            "title": "[net] UNIX directory listing parser errors",
            "type": "Bug",
            "description": "If a directory line contains a single digit for the hour of the day or day of \nthe month, a null pointer is returned instead of the file or directory name.\n\nThe following quick hack to UnixFTPEntryParser appears to fix this problem:\n\n        //+ \"((?:[0-9])|(?:[0-2][0-9])|(?:3[0-1]))\\\\s+\"\n        //+ \"((\\\\d\\\\d\\\\d\\\\d)|((?:[01]\\\\d)|(?:2[0123])):([012345]\\\\d))\\\\s\"\n        + \"((?:[0-9])|(?:[0-2][0-9])|(?:3[0-1])|[1-9])\\\\s+\"\n        + \"((\\\\d\\\\d\\\\d\\\\d)|((?:[01]\\\\d)|(?:2[0123])|\\\\d):([012345]\\\\d))\\\\s\"",
            "resolved": "2007-09-20",
            "versions": [
                "Nightly Builds"
            ],
            "fixVersions": []
        },
        {
            "issue_id": "NET-80",
            "project": "Commons Net",
            "title": "[net] InterruptedException converted to IOException",
            "type": "Bug",
            "description": "Package:\norg.apache.commons.net.telnet\n\nClass:\nTelnetInputStream\n\nMethod:\npublic int read() throws IOException\n\nLine 342:\ncatch (InterruptedException e)\n{\n   throw new IOException(\"Fatal thread interruption during read.\");\n}\n\nInterruptedException should propagate to the calling application.",
            "resolved": "2007-09-20",
            "versions": [
                "1.4"
            ],
            "fixVersions": []
        },
        {
            "issue_id": "NET-79",
            "project": "Commons Net",
            "title": "extra byte in WRQ TFTP packet",
            "type": "Bug",
            "description": "I obeserved that each tftp \"write request\" packet had two bytes with value x00\nat the end of the packet.\ne.g: 00 02 2f 6d 69 62 2f 63 6f 6e 66 69 67 00 6e 65 74 61 73 63 69 69 00 00 \n\nMy tftp server (tftp4java) rejects this type WRQ packets.\nI checked the RFC1350 and there I found:\n                                               \n          2 bytes    string   1 byte     string   1 byte\n          -----------------------------------------------\n   RRQ/  | 01/02 |  Filename  |   0  |    Mode    |   0  |\n   WRQ    -----------------------------------------------\n\n\nGerard.",
            "resolved": "2007-09-20",
            "versions": [
                "1.2"
            ],
            "fixVersions": []
        },
        {
            "issue_id": "NET-78",
            "project": "Commons Net",
            "title": "[net] Non existant files and empty directories not detected",
            "type": "Bug",
            "description": "When using the method FTPClient.listFiles(pathname) on a non-existant file or an\nempty directory, incorrect results are returned - in both cases a null array\nwould be expected.  \n\nIn the case of a non-existant file an array of size 1 is returned with the value\nbeing \"... No such file or directory ...\".  \n\nIn the case of an empty directory an array of size 0 is returned.",
            "resolved": "2007-09-20",
            "versions": [
                "1.1"
            ],
            "fixVersions": []
        },
        {
            "issue_id": "NET-77",
            "project": "Commons Net",
            "title": "[net] MVSFTPEntryParser setRawListing",
            "type": "Bug",
            "description": "The MVSFTPEntryParser is not setting the raw listing in the FTPFile that it\ncreates. The toString on FTPFile returns this value which causes a NPE when\ntrying to list files via ant.\n\nAlso it is creating an FTPFile for the header (\"Volume Unit...\") that it\nreceives from the host. This also causes a problem with the list function in ant\nbecause it receives 2 entries when requesting a listing for 1 file. Ant\n(probably wrongfully) is just taking the first entry in the array that it\nreceives back so you never get your file names.\n\nThe following code is how I got it to work...\n\n    private static final String HEADER = \"Volume Unit    Referred Ext Used Recfm\nLrecl BlkSz Dsorg Dsname\";\n\n   ...\n\n    public FTPFile parseFTPEntry(String entry)\n    {       \n        FTPFile f = null;\n        if (matches(entry) && !entry.trim().equals(HEADER))          \n        {\n            f = new FTPFile();\n            String dataSetName = group(2);\n            f.setType(FTPFile.FILE_TYPE);\n            f.setName(dataSetName);\n            f.setRawListing(entry);\n            return (f);\n        }\n        return null;\n    }",
            "resolved": "2008-02-19",
            "versions": [
                "1.4"
            ],
            "fixVersions": [
                "2.0"
            ]
        },
        {
            "issue_id": "NET-76",
            "project": "Commons Net",
            "title": "Documentation under \"USAGE\" in the class NTFTPFileEntryParser is out-of-date.",
            "type": "Bug",
            "description": "Documentation under \"USAGE\" in the class NTFTPFileEntryParser is out-of-date.\nAlso, there is some other javadoc code in\nFTPClient.createFileList(FTPFileEntryParser parser) which is more up-to-date but\nfor some reason does not appear in the javadocs that are generated.",
            "resolved": "2007-09-20",
            "versions": [
                "1.1"
            ],
            "fixVersions": []
        },
        {
            "issue_id": "NET-75",
            "project": "Commons Net",
            "title": "Uninitialised variable in FTPClient",
            "type": "Bug",
            "description": "When NetComponents became commons-net, a new variable __restartOffset was added in FTPClient.java. Although there is a new \"setter\" method, there is no explicit initialisation of this variable in the constructor. It may be that Java automatically initialises instance variables to zero (I am more familiar with C++ in this regard) but I feel that it would be better to do this explicitly, especially as all of the other variables are explicitly initialised.",
            "resolved": "2007-09-20",
            "versions": [
                "1.1"
            ],
            "fixVersions": []
        },
        {
            "issue_id": "NET-74",
            "project": "Commons Net",
            "title": "[net]Telnet option handlers subnegotiations does not handle 0xFF correctly",
            "type": "Bug",
            "description": "in accordance to RFC855: \"Finally, if parameters in an option \"subnegotiation\"\ninclude a byte with a value of 255, it is necessary to double this byte in\naccordance the general TELNET rules.\"\n\nI've actually encontered this while implementing WindowSize option handler, but\nit seems that all the currently avilable handlers are vulnerable to this.",
            "resolved": "2010-07-11",
            "versions": [],
            "fixVersions": [
                "2.2"
            ]
        },
        {
            "issue_id": "NET-73",
            "project": "Commons Net",
            "title": "[net][PATCH] TelnetInputStream.read hangs when socket data ends in a command sequence",
            "type": "Bug",
            "description": "Background: If one calls TelnetInputStream.read() in single-threaded mode (no \nreader thread) and there is no data immediately available, the call blocks on \na socket read. When data starts to arrive, the stream adds all the available \nbytes to its internal queue before returning the first one to the caller. To \ndo this, it calls __read() in a loop for as long as there are bytes available. \nThe __read() method returns the first byte of \"user data\" from the socket. If \n__read() encounters a Telnet command sequence (IAC, WILL, WONT, DO, DONT, \netc.), it handles the negotiation transparently and then returns the first \nbyte of user data.\n\nIn most cases, this works fine, but a problem arises if a chunk of data from \nthe remote host ends in a Telnet command sequence. When that happens, the \nTelnetInputStream.read() method hangs, even though it may have already \nacquired some user data. This is because it calls __read() in a loop as long \nas super.available() returns true. But if the remaining data from the socket \nconsists entirely of Telnet commands, __read() will process those AND THEN \nBLOCK waiting for user data.\n\nJust checking super.available() is not sufficient. We should continue the loop \nonly if there are bytes of USER DATA still available from the socket. Not \ndoing this can cause the client to wait indefinitely.",
            "resolved": "2012-08-18",
            "versions": [
                "1.4"
            ],
            "fixVersions": [
                "1.5",
                "2.0"
            ]
        },
        {
            "issue_id": "NET-71",
            "project": "Commons Net",
            "title": "[net][PATCH] \"MVS is the operating system of this server. FTP Server is running on z/OS.\"",
            "type": "Bug",
            "description": "Jeff Nadler created the original fix to this issue and I wrote the test case.  I\nwill post the patch directly.",
            "resolved": "2007-09-20",
            "versions": [
                "Nightly Builds"
            ],
            "fixVersions": []
        },
        {
            "issue_id": "NET-69",
            "project": "Commons Net",
            "title": "UnixFTPEntryParser.java fails to properly set MILLISECONDS field on FTPFile",
            "type": "Bug",
            "description": "[This defect may affect other parsers too -- I haven't checked.]\n\nOn listings returned from UNIX FTP servers, only the hour and minute of the\nmodification time of a given FTPFile is shown. UnixFTPEntryParser.java does the\nfollowing when encountering such a listing:\n\n\n            Calendar cal = Calendar.getInstance();\n            cal.set(Calendar.SECOND, 0);\n            cal.set(Calendar.MINUTE, 0);\n            cal.set(Calendar.HOUR_OF_DAY, 0);\n\n            try\n            {\n                int pos = MONTHS.indexOf(mo);\n                int month = pos / 4;\n\n                if (null != yr)\n                {\n                    // it's a year\n                    cal.set(Calendar.YEAR, Integer.parseInt(yr));\n                }\n                else\n                {\n                    // it must be  hour/minute or we wouldn't have matched\n                    int year = cal.get(Calendar.YEAR);\n                    // if the month we're reading is greater than now, it must\n                    // be last year\n                    if (cal.get(Calendar.MONTH) < month)\n                    {\n                        year--;\n                    }\n                    cal.set(Calendar.YEAR, year);\n                    cal.set(Calendar.HOUR_OF_DAY, Integer.parseInt(hr));\n                    cal.set(Calendar.MINUTE, Integer.parseInt(min));\n                }\n                cal.set(Calendar.MONTH, month);\n\n                cal.set(Calendar.DATE, Integer.parseInt(da));\n                file.setTimestamp(cal);\n\nUnfortunately, the code does not properly set the MILLISECOND field of the\noriginal Calendar object. This means the MILLISECOND field is dependent upon the\nsystem time that the object is actually created. Therefore, the FTPFile's\ntimestamp is wrong.\n\nI propose that the above code be patched to add a cal.set(Calendar.MILLISECOND, 0);",
            "resolved": "2007-09-20",
            "versions": [
                "Nightly Builds"
            ],
            "fixVersions": []
        },
        {
            "issue_id": "NET-68",
            "project": "Commons Net",
            "title": "[net] TFTPClient's send file discards last ack",
            "type": "Bug",
            "description": "TFTPClient reads all acks just fine except the last-one when sending a file. I\nfigured this out when I tried to use the same TFTPClient-instance for something\nelse (reading a file) after sending a file. This ack was next in the buffer and\nsome exception was thrown (don't remember which anymore). \n\nI fixed this for myself using a flag (lastAckWait). Here is a the result of\ndiff-command:\n\ndiff -u TFTPClient.java.original TFTPClient.java.patched\n--- TFTPClient.java.original    2004-12-28 15:02:37.235997984 +0200\n+++ TFTPClient.java.patched     2004-12-28 15:09:14.516602152 +0200\n@@ -372,6 +372,7 @@\n\n         dataLength = lastBlock = hostPort = bytesRead = 0;\n         block = 0;\n+        boolean lastAckWait = false;\n\n         if (mode == TFTP.ASCII_MODE)\n             input = new ToNetASCIIInputStream(input);\n@@ -455,7 +456,10 @@\n                         if (lastBlock == block)\n                         {\n                             ++block;\n-                            break _receivePacket;\n+                            if (lastAckWait)\n+                              break _sendPacket;\n+                            else\n+                              break _receivePacket;\n                         }\n                         else\n                         {\n@@ -501,9 +505,8 @@\n             data.setData(_sendBuffer, 4, offset - 4);\n             sent = data;\n         }\n-        while (dataLength == 0);\n+        while (dataLength == 0 || lastAckWait);\n\n-        bufferedSend(sent);\n         endBufferedOps();\n     }\n\n\n\nBy the way we have implemented a TFTP server also (heavily unit-tested). I could\ntry to contribute it back if it fits in commons net. There was some talk in the\nweb-pages of doing only client-side stuff for commons-net. \n\n-Perttu",
            "resolved": "2006-08-27",
            "versions": [
                "1.3"
            ],
            "fixVersions": [
                "1.5",
                "2.0"
            ]
        },
        {
            "issue_id": "NET-67",
            "project": "Commons Net",
            "title": "[net] Problem calculating total article count",
            "type": "Bug",
            "description": "I am using Commons Net 1.2.2\n\nWhen you ask for the list of newsgroups of a NNTP Server, the framework doesn't\ncalculate correctly the total article count when that specific newsgroup has no\narticles.\n\nFor example, the NNTP Server answers something like this:\n\n  org.javahispano.j2ee 0 0 y\n\nthen, debugging the source code of class:\n\n  org.apache.commons.net.nntp.NNTPClient\n\nI found the problem in method:\n\n  private NewsgroupInfo __parseNewsgroupListEntry(String entry)\n\nwhere it does:\n\n  ...\n  result._setNewsgroup(tokenizer.nextToken());\n  last = tokenizer.nextToken();\n  first = tokenizer.nextToken();\n  permission = tokenizer.nextToken();\n\n  try\n  {\n    lastNum = Integer.parseInt(last);\n    firstNum = Integer.parseInt(first);\n    result._setFirstArticle(firstNum);\n    result._setLastArticle(lastNum);\n    result._setArticleCount(lastNum - firstNum + 1);\n  }\n  catch (NumberFormatException e)\n  {\n    return null;\n  }\n\nThe proble is in this line:\n\n  result._setArticleCount(lastNum - firstNum + 1);\n\nwhere if lastNum is 0 and firstNum is 0, it sais that the newsgroup has 1\narticle. I understand the code should add a control line where it double check\nif lastNum and firstNum are 0. Right?",
            "resolved": "2007-09-20",
            "versions": [
                "1.2"
            ],
            "fixVersions": []
        },
        {
            "issue_id": "NET-66",
            "project": "Commons Net",
            "title": "file size",
            "type": "Bug",
            "description": "I am using commons net package version 1.1.0 (which is pretty old, I know) to \nwrite data using FTP into a remote dataset residing on a MVS system. Now, my \nrequirement is, I need to find out the size of the dataset before I write and \nif the dataset is full I need to throw a message in my program that the remote \nfile I am trying to append is full and cannot further append data into it. \nI have had a look at commons-net-1.4.1 package, which has the new addition of \nMVSFTPParser class to the parser package. It would be helpful if you could let \nme know how to go about using it. Probably a sample code will be useful.",
            "resolved": "2007-09-20",
            "versions": [
                "1.1"
            ],
            "fixVersions": []
        },
        {
            "issue_id": "NET-65",
            "project": "Commons Net",
            "title": "[net] program hangs while trying to delete a file on a remote FTP Server after downloading same",
            "type": "Bug",
            "description": "I am using the commons-net-1.1.0.jar to perform FTP related activities. The \nprocess I am doing is as follows:\n\n1. Logon to the remote FTP Server running on Solaris (which is behind a \nfirewall)\n2. Download a file\n3. Delete the remote file after successful download\n\nBut here I am facing a problem, once the file is downloaded, it does not get \ndeleted in the remote FTP server and the program hangs. An interrupted IO \nException is being thrown and the program just hangs. \n\nAny suggestions will be appreciated",
            "resolved": "2006-12-20",
            "versions": [
                "1.1"
            ],
            "fixVersions": [
                "2.0"
            ]
        },
        {
            "issue_id": "NET-64",
            "project": "Commons Net",
            "title": "[net] TelnetClientTest has a failure on OS X 10.4",
            "type": "Bug",
            "description": "A unit test fails on OS X 10.4, it succeeds on Linux. Running against the\ncurrent HEAD. Here's the test report:\n\n\nTestsuite: org.apache.commons.net.telnet.TelnetClientTest\nTests run: 8, Failures: 1, Errors: 0, Time elapsed: 44.329 sec\n\nTestcase: testSetReaderThread(org.apache.commons.net.telnet.TelnetClientTest): \nFAILED\nExpected negotiation1_ok to be true, got false\njunit.framework.AssertionFailedError: Expected negotiation1_ok to be true, got false\n    at\norg.apache.commons.net.telnet.TelnetClientTest.testSetReaderThread(TelnetClientTest.java:825)",
            "resolved": "2008-02-19",
            "versions": [
                "Nightly Builds"
            ],
            "fixVersions": []
        },
        {
            "issue_id": "NET-63",
            "project": "Commons Net",
            "title": "[net] NTFTPEntryParser parses directory names starting with a number followed by space incorrectly.",
            "type": "Bug",
            "description": "When I used FTPClient.listFiles() with MS FTP Server I found that directories with names starting with a \nnumber followed by space being parsed incorrectly. But when I browse above-mentioned server with \nInternet Explorer or with Total Commander\u0092s built-in ftp client directory names are shown correctly.\nNow look at the following failing test. (It should be added to NTFTPEntryParserTest class):\n\n    public void testDirectoryBeginningWithNumberFollowedBySpaces() throws Exception\n    {\n        FTPFile f = getParser().parseFTPEntry(\"12-03-96  06:38AM       <DIR>          123 xyz\");\n        assertEquals(\"name\", \"123 xyz\", f.getName());\n    }\n\nJunit output:\n\u0085\n[junit] name expected:<123 ...> but was:<...>\n[junit] junit.framework.ComparisonFailure: name expected:<123 ...> but was:<...>\n\u0085\n\nThe following patch fixes the problem:\n\nIndex: jakarta-commons/net/src/java/org/apache/commons/net/ftp/parser/NTFTPEntryParser.java\n===============================================================\n====\nRCS file: /home/cvspublic/jakarta-commons/net/src/java/org/apache/commons/net/ftp/parser/\nNTFTPEntryParser.java,v\nretrieving revision 1.19\ndiff -u -r1.19 NTFTPEntryParser.java\n--- jakarta-commons/net/src/java/org/apache/commons/net/ftp/parser/NTFTPEntryParser.java\n\t2 Jan 2005 03:17:50 -0000\t1.19\n+++ jakarta-commons/net/src/java/org/apache/commons/net/ftp/parser/NTFTPEntryParser.java\n\t13 Jun 2005 17:26:16 -0000\n@@ -39,8 +39,7 @@\n      */\n     private static final String REGEX =\n         \"(\\\\S+)\\\\s+(\\\\S+)\\\\s+\"\n-        + \"(<DIR>)?\\\\s*\"\n-        + \"([0-9]+)?\\\\s+\"\n+        + \"(?:(<DIR>)|([0-9]+))\\\\s+\"\n         + \"(\\\\S.*)\";\n \n     /**",
            "resolved": "2007-09-20",
            "versions": [
                "1.4"
            ],
            "fixVersions": []
        },
        {
            "issue_id": "NET-62",
            "project": "Commons Net",
            "title": "[net] FTP Client fails to retrieve file list",
            "type": "Bug",
            "description": "[\n  using commons-net-1.4.1.jar\n  jsdk 1.4.2_08\n]\n\na) Both ftp servers require authorization.\nb) login and authorization complete successfully.\nc) change of working directory completes successfully.\nd) At the end is the connection log using FileZilla to connect to ftp servers.\ne) Both of the fetches below fail when a file exists in directory:\n\nFTPListParseEngine engine = this.initiateListParsing();\nFTPFile[] m_files = engine.getFiles();\n\nOR \n\nFTPFile[] m_files = this.listFiles();\n\nwhere THIS = the org.apache.commons.net.ftp.FTPClient\n\nAny ideas why I can't get a file list?\n\n*********** FileZilla Connection Log ***************\n*********** I replace server names/ips with <HOST (A or B)> ***********\n\nStatus:\tConnecting to <HOSTA> ...\nStatus:\tConnected with <HOSTA>. Waiting for welcome message...\nResponse:\t220 ProFTPD 1.2.10 Server (<HOSTA>) [<HOSTA>]\nCommand:\tUSER myusername\nResponse:\t331 Password required for filer.\nCommand:\tPASS ******\nResponse:\t230 User myusername logged in.\nCommand:\tFEAT\nResponse:\t211-Features:\nResponse:\t MDTM\nResponse:\t REST STREAM\nResponse:\t SIZE\nResponse:\t211 End\nCommand:\tSYST\nResponse:\t215 UNIX Type: L8\nStatus:\tConnected\nStatus:\tRetrieving directory listing...\nCommand:\tPWD\nResponse:\t257 \"/\" is current directory.\nCommand:\tTYPE A\nResponse:\t200 Type set to A\nCommand:\tPASV\nResponse:\t227 Entering Passive Mode (<HOSTA IP LIST>).\nCommand:\tLIST\nResponse:\t150 Opening ASCII mode data connection for file list\nResponse:\t226 Transfer complete.\nStatus:\tDirectory listing successful\nCommand:\tTYPE I\nResponse:\t200 Type set to I\nCommand:\tPWD\nResponse:\t257 \"/\" is current directory.\nCommand:\tREST 0\nResponse:\t350 Restarting at 0. Send STORE or RETRIEVE to initiate transfer\nCommand:\tREST 0\nResponse:\t350 Restarting at 0. Send STORE or RETRIEVE to initiate transfer\nStatus:\tDisconnected from server\nStatus:\tConnecting to <HOSTB> ...\nStatus:\tConnected with <HOSTB>. Waiting for welcome message...\nResponse:\t220 <HOSTB> NcFTPd Server (licensed copy) ready.\nCommand:\tUSER myusername\nResponse:\t331 User myusername okay, need password.\nCommand:\tPASS **********\nResponse:\t230-You are user #5 of 150 simultaneous users allowed.\nResponse:\t230-\nResponse:\t230 Restricted user logged in.\nCommand:\tFEAT\nResponse:\t211-Extensions supported:\nResponse:\t CLNT\nResponse:\t LANG EN*\nResponse:\t MDTM\nResponse:\t MLST\nType*;Size*;Modify*;Perm;Unique;UNIX.mode*;UNIX.owner;UNIX.uid;UNIX.group;UNIX.gid;\nResponse:\t PASV\nResponse:\t REST STREAM\nResponse:\t SIZE\nResponse:\t UTF8\nResponse:\t TVFS\nResponse:\t Compliance Level: 20040701 (IETF mlst-16)\nResponse:\t211 End.\nCommand:\tCLNT FileZilla\nResponse:\t200 Noted.\nCommand:\tOPTS UTF8 ON\nResponse:\t501 Option not recognized.\nCommand:\tSYST\nResponse:\t215 UNIX Type: L8\nStatus:\tConnected\nStatus:\tRetrieving directory listing...\nCommand:\tPWD\nResponse:\t257 \"/\" is cwd.\nCommand:\tTYPE A\nResponse:\t200 Type okay.\nCommand:\tPASV\nResponse:\t227 Entering Passive Mode (<HOSTB IP List>)\nCommand:\tLIST\nResponse:\t150 Data connection accepted from <CLIENT>:1229; transfer starting.\nResponse:\t226 Listing completed.\nStatus:\tDirectory listing successful\nCommand:\tTYPE A\nResponse:\t200 Type okay.\nStatus:\tDisconnected from server",
            "resolved": "2007-09-20",
            "versions": [
                "1.4"
            ],
            "fixVersions": []
        },
        {
            "issue_id": "NET-61",
            "project": "Commons Net",
            "title": "[net] FTPClient.listFiles() hangs on Red Hat Linux",
            "type": "Bug",
            "description": "A Java app that uses FTPClient to download a file from a website to Windows XP \nworks properly. But, when the same app runs on Linux to download the same file \nfrom the same website, it hangs at listFiles().\n\nUsing Java 1.5.0_03 on both the Windows XP and Linux. The version of Linux \nused is Fedor Red Hat Linux Core 3 with all the latest updates. The following \nsegment of code from the program demonstrates the problem:\n\n              FTPClient ftp = new FTPClient();\n              ftp.connect(host);\n              reply = ftp.getReplyCode();\n              if (!FTPReply.isPositiveCompletion(reply)) {\n                final String ftpStatus = ftp.getReplyString();\n                ftp.disconnect();\n                throw new IOException(\n                    \"FTP server refused connection. Status: \" +\n                   ftpStatus);\n              }\n              ftp.login(user, password);\n              reply = ftp.getReplyCode();\n              if (!FTPReply.isPositiveCompletion(reply)) {\n                final String ftpStatus = ftp.getReplyString();\n                ftp.disconnect();\n                throw new IOException(\n                    \"FTP server refused username/password. Status: \" +\n                   ftpStatus);\n              }\n              String[] list = ftp.listNames();",
            "resolved": "2011-02-26",
            "versions": [
                "1.4"
            ],
            "fixVersions": []
        },
        {
            "issue_id": "NET-60",
            "project": "Commons Net",
            "title": "commons-net 1.2 incompatible with JDK < 1.4",
            "type": "Bug",
            "description": "<raghu.changlaveedu@bt.com>\n> I got this error when using JDK 1.3.1_09\n> version.\n>\n> java.lang.IllegalAccessError: try to access method\n> java.util.Calendar.getTimeInMillis()J from class \n> org.apache.commons.net.ftp.parser.NTFTPEntryParser\n\n\"Edelson, Justin\" <Justin.Edelson@mtvi.com>:\n>However, net 1.2 won't compile against anything prior to 1.4 (I'm\n>working with 1.3.1) because\n>org.apache.commons.net.ftp.parser.NTFTPEntryParser tries to call\n>Calendar.getTimeInMillis() on line 132, which prior to 1.4 was a\n>protected method.",
            "resolved": "2007-09-20",
            "versions": [
                "1.2"
            ],
            "fixVersions": []
        },
        {
            "issue_id": "NET-59",
            "project": "Commons Net",
            "title": "[net] NullpointerException on FTPClient.disconnect() if an Exception occured while FTPClient.connect",
            "type": "Bug",
            "description": "Hello,\n\nthink this bug is the same (or at least similiar) to the following one:\nhttp://issues.apache.org/bugzilla/show_bug.cgi?id=26296\nbut since I was not sure, I opened it as a seperate report.\n\nVersions affected: commons-net-1.2.2, think also commons-net-1.4.0\n\nProblem: If an exception occures while FTPClient.connect() is running, a call to \nFTPClient.disconnect() in a finally-block might throw a NullPointerException.\nI am pretty shure, that this might cause some Threads so keep alive, also they \ncannot be interrupted anymore.\n\nReason: This happens since TelnetClient.disconnect() does not check whether the \nStreams (__input and __ouput) it tries to close are NULL or not.\nNormally it is sufficent to check FTPClient.isConnected(), but if a exceptions \nis thrown after SocketClient.__connectAction_ has been excecuted, SocketClient.\n_isConnected_ is set to true, so the check will indicate that the connection is \nalive.\n\nChristian",
            "resolved": "2006-12-20",
            "versions": [
                "1.2"
            ],
            "fixVersions": [
                "2.0"
            ]
        },
        {
            "issue_id": "NET-57",
            "project": "Commons Net",
            "title": "[net] How to implement FTPS extending FTPClient, from a diferente package...",
            "type": "Bug",
            "description": "Hi everybody, I'm Jose from Spain.\n\nI make an implement of FTPS: using\nhttp://sourceforge.net/projects/ufsc implementation (which use a new\nclass, created by UFSC, org.apache.commons.net.ftp.FtpsClient that\nextends org.apache.commons.net.ftp.FTPClient), with some minor\nmodification to adapt Java 1.3 and solve some fix with PASV transfer\n(modification and fix, that i comunicate to the author).\n\nI try to build FtpsClient under diferent packege, then i found that\ncouldn't do it because, in org.apache.commons.net.ftp.FTP the\nvariables\n\nBufferedReader _controlInput;\nBufferedWriter _controlOutput;\n\nwere declare with packege visibility, and FtpsClient use this, to\nimplement securety\nconnection to SSLSocket. Something like this:\n\nthis._controlInput = new BufferedReader(new\nInputStreamReader(socket.getInputStream(), getControlEncoding()));\nthis._controlOutput = new BufferedWriter(new\nOutputStreamWriter(socket.getOutputStream(), getControlEncoding()));\n\nBecause of this, FtpsClient, in UFSC, is under org.apache.commons.net.ftp.\n\nThen the solution I adopt, was copy (and minor modify) FTPClient and\nFTP from org.apache.commons.net.ftp in my own package, and extends\nFtpsClient, from my own FTPClient, to make it in a difetent pakage...\n\nAnd my suggestion is: It could be possible, for future version, declare\nprotected, for simplify the extension of api, to implement FTPS, or other future\nprotocol... in diferent package...?\n\nas well, could by a setter, for this variables, to assing then the socket stream...\n\nThanks to all.",
            "resolved": "2006-05-16",
            "versions": [
                "1.4"
            ],
            "fixVersions": []
        },
        {
            "issue_id": "NET-56",
            "project": "Commons Net",
            "title": "[net] Nullpointer exception after using parseFTPEntry in FTPFileEntryParser",
            "type": "Bug",
            "description": "Performing an FTP get action on HP-UX can result in a null pointer exception. \nThis occurs when getFiles() calls this.parser.parseFTPEntry(entry) in \nFTPListParseEngine and returns an FTPFile[] array that includes null values. \nThis can occur when the files on HP-UX have for example the following \ncharacteristics:\n-rw-------   1 svcpeova   TEAM-OVA-CC4300800 Dec  7 09:35 sdserver-4.5-sp.depot\n\nAs you can see there is no space between the group name and file size, and \nthat is exactly where the parseFTPEntry method fails. In this method \napparently the file characteristics is retrieved and checked, but for some \nreason it appears to rely on spaces to differentiate between the various \ncharacteristics. Because there is no space between the group name and the file \nsize, the method returns a null which ultimately causes a null pointer \nexception when trying to get this file via FTP.\n\nAfter changing the group of the file the problem no longer occurs:\n-rw-------   1 svcpeova   users      4300800 Dec  7 09:35 sdserver-4.5-sp.depot",
            "resolved": "2006-08-27",
            "versions": [
                "1.4"
            ],
            "fixVersions": []
        },
        {
            "issue_id": "NET-54",
            "project": "Commons Net",
            "title": "[net] FTPReply.isPositivePreliminary(int) returns false when reply = 220 (Server ready) Causes FTPClient.retrieveFile(String, OutputStream) to fail",
            "type": "Bug",
            "description": "public static boolean isPositivePreliminary(int reply)\n    {\n        return (reply >= 100 && reply < 200);\n    }\n\nshould be changed to\n\n    public static boolean isPositivePreliminary(int reply)\n    {\n        return (reply >= 100 && reply < 220); //or is it some other magic \nnumber?\n    }",
            "resolved": "2007-04-11",
            "versions": [
                "1.4"
            ],
            "fixVersions": []
        },
        {
            "issue_id": "NET-53",
            "project": "Commons Net",
            "title": "InterruptedException converted to IOException",
            "type": "Bug",
            "description": "Package:\norg.apache.commons.net.telnet\n\nClass:\nTelnetInputStream\n\nMethod:\npublic int read() throws IOException\n\nLine 342:\ncatch (InterruptedException e)\n{\n   throw new IOException(\"Fatal thread interruption during read.\");\n}\n\nInterruptedException should propagate to the calling application.",
            "resolved": "2007-09-20",
            "versions": [
                "1.4"
            ],
            "fixVersions": []
        },
        {
            "issue_id": "NET-52",
            "project": "Commons Net",
            "title": "TFTPClient.setMaxTimeouts() param check broken",
            "type": "Bug",
            "description": "The input check on this method inspects the instance variable it is \ngoing to set not the input received.\n\nIndex: TFTPClient.java\n===================================================================\nRCS file: /home/cvspublic/jakarta-commons/net/src/java/org/apache/commons/net/\ntftp/TFTPClient.java,v\nretrieving revision 1.14\ndiff -u -r1.14 TFTPClient.java\n--- TFTPClient.java\t29 Jun 2004 04:54:31 -0000\t1.14\n+++ TFTPClient.java\t23 Sep 2004 13:55:24 -0000\n@@ -86,7 +86,7 @@\n      ***/\n     public void setMaxTimeouts(int numTimeouts)\n     {\n-        if (__maxTimeouts < 1)\n+        if (numTimeouts < 1)\n             __maxTimeouts = 1;\n         else\n             __maxTimeouts = numTimeouts;",
            "resolved": "2007-09-20",
            "versions": [
                "Nightly Builds"
            ],
            "fixVersions": []
        },
        {
            "issue_id": "NET-51",
            "project": "Commons Net",
            "title": "NTFTPEntryParser wrong parsing of timestamp 12:24 PM",
            "type": "Bug",
            "description": "e.g. raw Data: \"02-19-04  12:24PM             10728307 FAUSLSILVS.00001\"\nwill result in date: Fri Feb 20 00:24:00 CET 2004\nbut should be: Thu Feb 19 12:24:00 CET 2004.\n\nYours,\nDieter M\u00c3\u00bcller",
            "resolved": "2007-09-20",
            "versions": [
                "1.1"
            ],
            "fixVersions": []
        },
        {
            "issue_id": "NET-50",
            "project": "Commons Net",
            "title": "[net] NTFTPEntryParser doesn't parse NT ftp server list correctly.",
            "type": "Bug",
            "description": "Windows NT IIS ftp server, use ms-dos style listing.\nIf the dirtory name is number leading and contains space, it will give wrong result.\ne.g.\n2005-11-22  15:52    <DIR>          123 folder\n\nThe folder name is \"123 folder\", but NTFTPEntryParse deal \"123\" as size of the\ndir. This issue is caused by the regexp\n\"(\\\\S+)\\\\s+(\\\\S+)\\\\s+(<DIR>)?\\\\s*([0-9]+)?\\\\s+(\\\\S.*)\" in NTFTPEntryParser.\n\nThis defeact can be fixed by change this regexp to\n\"(\\\\S+)\\\\s+(\\\\S+)\\\\s+(<DIR>|[0-9]+)?\\\\s+(\\\\S.*)\" and make changes to some code\nin this file.",
            "resolved": "2007-09-20",
            "versions": [
                "1.4"
            ],
            "fixVersions": []
        },
        {
            "issue_id": "NET-49",
            "project": "Commons Net",
            "title": "[net] FTPClient.listFiles can not get file list of directorychinese characters",
            "type": "Bug",
            "description": "When I use FTPClient.listFiles(String pathname) to get the file list of \ndirectory on a ServU2.5k FTP server I found the problem: if the name of \ndirectory has some chinese characters, then the return is not correct. For \nexample, I use listFiles to get the file list of directory \"dir\u00e4\u00b8\u00ad\u00e6\u0096\u0087\", the \nresult FTPFile array has only one element and this element is \"dir\u00e4\u00b8\u00ad\u00e6\u0096\u0087\" itself.",
            "resolved": "2006-08-27",
            "versions": [
                "1.1"
            ],
            "fixVersions": []
        },
        {
            "issue_id": "NET-48",
            "project": "Commons Net",
            "title": "[net] Compile problem",
            "type": "Bug",
            "description": "When I'm compiling commons-net then I have this error:\n\n[javac]\n/builder/rpm/BUILD/commons-net-1.3.0-src/src/java/org/apache/commons/net/ftp/parser/VMSFTPEntryParser.java:104:\nwarning: readServerList(java.io.InputStream) in\norg.apache.commons.net.ftp.FTPListParseEngine has been deprecated\n    [javac]         engine.readServerList(listStream);\n    [javac]               ^\n    [javac] 12 warnings\n    [mkdir] Created dir:\n/builder/rpm/BUILD/commons-net-1.3.0-src/target/classes/META-INF\n     [copy] Copying 1 file to\n/builder/rpm/BUILD/commons-net-1.3.0-src/target/classes/META-INF\n\njunit-present:\n\ncompile-tests:\n    [mkdir] Created dir:\n/builder/rpm/BUILD/commons-net-1.3.0-src/target/test-classes\n    [javac] Compiling 27 source files to\n/builder/rpm/BUILD/commons-net-1.3.0-src/target/test-classes\n    [javac]\n/builder/rpm/BUILD/commons-net-1.3.0-src/src/test/org/apache/commons/net/ftp/parser/VMSFTPEntryParserTest.java:93:\nwarning: readServerList(java.io.InputStream) in\norg.apache.commons.net.ftp.FTPListParseEngine has been deprecated\n    [javac]         engine.readServerList(\n    [javac]               ^\n    [javac]\n/builder/rpm/BUILD/commons-net-1.3.0-src/src/test/org/apache/commons/net/ftp/parser/VMSFTPEntryParserTest.java:113:\nwarning: readServerList(java.io.InputStream) in\norg.apache.commons.net.ftp.FTPListParseEngine has been deprecated\n    [javac]         engine.readServerList(\n    [javac]               ^\n    [javac] 2 warnings\n\ninternal-test:\n    [mkdir] Created dir:\n/builder/rpm/BUILD/commons-net-1.3.0-src/target/test-reports\n\nBUILD FAILED\n/builder/rpm/BUILD/commons-net-1.3.0-src/build.xml:93: Could not create task or\ntype of type: junit.\n\nAnt could not find the task or a class this task relies upon.\n\nThis is common and has a number of causes; the usual\nsolutions are to read the manual pages then download and\ninstall needed JAR files, or fix the build file:\n - You have misspelt 'junit'.\n   Fix: check your spelling.\n - The task needs an external JAR file to execute\n     and this is not found at the right place in the classpath.\n   Fix: check the documentation for dependencies.\n   Fix: declare the task.\n - The task is an Ant optional task and the JAR file and/or libraries\n     implementing the functionality were not found at the time you\n     yourself built your installation of Ant from the Ant sources.\n   Fix: Look in the ANT_HOME/lib for the 'ant-' JAR corresponding to the\n     task and make sure it contains more than merely a META-INF/MANIFEST.MF.\n     If all it contains is the manifest, then rebuild Ant with the needed\n     libraries present in ${ant.home}/lib/optional/ , or alternatively,\n     download a pre-built release version from apache.org\n - The build file was written for a later version of Ant\n   Fix: upgrade to at least the latest release version of Ant\n - The task is not an Ant core or optional task\n     and needs to be declared using <taskdef>.\n - You are attempting to use a task defined using\n    <presetdef> or <macrodef> but have spelt wrong or not\n   defined it at the point of use\n\nRemember that for JAR files to be visible to Ant tasks implemented\nin ANT_HOME/lib, the files must be in the same directory or on the\nclasspath\n\nPlease neither file bug reports on this problem, nor email the\nAnt mailing lists, until all of these causes have been explored,\nas this is not an Ant bug.\n\nTotal time: 9 seconds\n\n\nJava HotSpot(TM) 64-Bit Server VM warning: Can't detect initial thread stack\nlocation - no /proc/self/stat\nApache Ant version 1.6.2 compiled on December 22 2004\n\nJava HotSpot(TM) 64-Bit Server VM warning: Can't detect initial thread stack\nlocation - no /proc/self/stat\njava version \"1.4.2-01\"\nJava(TM) 2 Runtime Environment, Standard Edition (build Blackdown-1.4.2-01)\nJava HotSpot(TM) 64-Bit Server VM (build Blackdown-1.4.2-01, mixed mode)",
            "resolved": "2007-09-20",
            "versions": [
                "1.3"
            ],
            "fixVersions": []
        },
        {
            "issue_id": "NET-47",
            "project": "Commons Net",
            "title": "FtpClient.retrieveFileStream returns null",
            "type": "Bug",
            "description": "My program calls FtpClient.retrieveFileStream for every file in a directory and \ndeletes the file from the directory after it has been successfully read.\n\nFtpClient.retrieveFileStream returns null for every 2nd file.\nFtpClient.getReplyCode() returns 200 when this happens.\n\nWhen I call FtpClient.retrieveFileStream a 2nd time for the same file it works. \nSo this is my workaround code:\n\n    InputStream in = null;\n\n    int i;\n    for (i=0; i<100 && in == null; i++) {\n      in = ftpClient.retrieveFileStream(absoluteFileName);\n\n      // This is a workaround for what seems to be a bug in jakarta commons-net \n1.0.0\n      // FtpClient.retrieveFileStream() returns null on every second call with \na reply code of 200\n      // But 200 is a positive completetion code, so this should not fail. try \nagain\n      if (in == null && !FTPReply.isPositiveCompletion( ftpClient.getReplyCode\n() )) break;\n    };\n\n    if (in == null) throw new IOException( ftpClient.getReplyString() );\n\n\nMy program is rather small and simple, so I could send you the whole program if \nyou want to reproduce this with minimum effort.",
            "resolved": "2006-05-16",
            "versions": [
                "1.0"
            ],
            "fixVersions": []
        },
        {
            "issue_id": "NET-46",
            "project": "Commons Net",
            "title": "[FTP] retrieveFileStream fails randomly or hangs",
            "type": "Bug",
            "description": "For my application I need a way to get the InputStream of a binary file on a\nFTPServer. What I did was :\n\n// connect and get ftpFiles as an array\n// for each ftpFile ...\n\nInputStream is = ftp.retrieveFileStream(ftpFiles[i].getName());\n\nHowever, this behaves erratically : sometimes the inputstream is correct and\nsometimes it is null (and the ftpFile exists, no weird name or anything odd\nabout it).\n\nAfter first blaming my FTPServer (I use GuildFTPd 0.9.9.13) I tried another\nFTPServer (Serv-U 6.1), but this also had the same behavior. \n\nThen I thought I might have to do with timing. So I tried Thread.sleep(xxx) on a\ncouple of locations but to no avail. In a last attempt (was getting pretty\ndesperate :) ) I rewrote my original line and replaced it by this :\n\nByteArrayOutputStream out = new ByteArrayOutputStream();\nftp.retrieveFile(ftpFiles[i].getName(),out);\nInputStream is = new ByteArrayInputStream(out.toByteArray());\n\nAnd much to my surprise, it worked like a charm. Tested it a couple of times (on\nboth FTPServer products) and works perfectly.\n\nSo I'm guessing something is going wrong in your retrieveFileStream\nimplementation. Maybe something worth looking into ? (easiest fix : use the\nByteArrayOut/InputStream swap :)).\n\nkind regards,\n\nDennis",
            "resolved": "2012-11-26",
            "versions": [
                "1.4",
                "3.1"
            ],
            "fixVersions": [
                "3.2"
            ]
        },
        {
            "issue_id": "NET-45",
            "project": "Commons Net",
            "title": "javadoc FTPClient inconsistent",
            "type": "Bug",
            "description": "The javadoc of ftpclient says :\nyou must first connect to the server with connect before doing anything, and\nfinally disconnect after you're completely finished interacting with the server\n\nbut the given source code doesn't disconnect if ftp.connect(\"ftp.foobar.com\");\nsucceed\n\nchange proposal:\nreplace in FTPClient javaDoc\n\n     if(!FTPReply.isPositiveCompletion(reply)) {\n        ftp.disconnect();\n        System.err.println(\"FTP server refused connection.\");\n        System.exit(1);\n      }\n    } catch(IOException e) {\n      if(ftp.isConnected()) \n\nby\n\n     if(!FTPReply.isPositiveCompletion(reply)) {\n        ftp.disconnect();\n        System.err.println(\"FTP server refused connection.\");\n        System.exit(1);\n      }\n     ftp.disconnect();\n    } catch(IOException e) {\n      if(ftp.isConnected())",
            "resolved": "2007-09-20",
            "versions": [
                "1.2"
            ],
            "fixVersions": []
        },
        {
            "issue_id": "NET-44",
            "project": "Commons Net",
            "title": "FTP get actions won't download files",
            "type": "Bug",
            "description": "The FTP get action returns success but does not get files.\n\nEnvironment:\n------------\nant 1.6.0 (downloaded December 18th)\nWindows 2000 Server\nJAVA_HOME=c:\\jsdk1.4.1_02\nANT_HOME=c:\\ant1.6\nANT_OPTS=-Xmx128m\nClassPath=c:\\ant1.6\\apache-ant-1.6.0\\lib\n\n\nSteps to reproduce:\n-------------------\n1. Create an anonymous ftp server on a windows localhost \n2. Create the following target (substitute the server and login credentials as \nnecessary):\n\n<target name=\"downloadftp\"> \n  <ftp action=\"get\"\n\tserver=\"krothe\"\n\tuserid=\"anonymous\"\n\tpassword=\"\"\n\tverbose=\"yes\"\n\tpassive=\"yes\"\n\tseparator=\"\\\"\n    <fileset dir=\"c:\\\">\n\t<include name=\"linux.md5\"/>\n    </fileset>\n  </ftp>\n</target>\n\n3. run the following ant command from the location of your build.xml:\nant downloadftp\n\nNote that the following output appears on std. out:\n\ndownloadftp:\n  [ftp] getting files\n  [ftp] 0 files retrieved\n\nBUILD SUCCESSFUL\nTotal Time: 2 seconds\n\n\nNo matter what settings I try the get action does not work.",
            "resolved": "2007-09-20",
            "versions": [
                "Nightly Builds"
            ],
            "fixVersions": []
        },
        {
            "issue_id": "NET-43",
            "project": "Commons Net",
            "title": "[net] FTPClient: No reply codes available",
            "type": "Bug",
            "description": "Unfortunately, many of the ftp client methods return a boolean value, only. This\nis usually not suffient, since one does not know, why e.g. a file transfer was\nnot successful and thus can't take any measures to avoid/circumvent the problem. \nAlso it is totally user-unfriendly, just to say, that e.g. an xfer was not\nsuccessful, without giving a hint why ...\n\nOK, perhaps one might be able to do all actions, which are done in the\n\"highlevel\" methods, manually using the \"lowerlevel\" commands to find out the\nproblem, but than using the whole FTPclient package doesn't make any sense\nanymore (which is the current scenario I have :-( ).\n\nSo it would be quite useful, if all the \"highlevel\" methods would return the\nreply code of the last action instead of the simple, almost nothing saying\ntrue|false.",
            "resolved": "2007-09-20",
            "versions": [
                "1.4"
            ],
            "fixVersions": []
        },
        {
            "issue_id": "NET-42",
            "project": "Commons Net",
            "title": "[net] Offset and resume not working...",
            "type": "Bug",
            "description": "When setting the restart offset : setRestartOffset(long offset) one would \nexpect that when resuming storing the same file on the server, it will restart \nfrom that offset and not from beggining.\n\nI made the follwoing change (-->><<--) in the org.apache.commons.net.io.Util \nclass\n\npublic static final long copyStream(long offset, source,...\n\n...\n\t\ttry {\n\t\t\t-->> source.skip(offset); <<--\n\t\t\twhile ((bytes = source.read(buffer)) != -1) {\n...\n\nThis change allows to skip the bytes until the offset mark.\n\nIn the main code there is of course a need to set :\n\t      ftpClient.setRestartOffset(dest_file_size);\n\t      output = ftp.storeFileStream(\"filename\");\n\ndest_file_size was calculated using the following code as I haven't found a \nmethod return the size of the file:\n\n\tstatic long getSize(FTPFile[] ftpFiles, String filename){\n\t\tfor(int i=0; i<ftpFiles.length;i++){\n\t\t\tif (ftpFiles[i].getName().equalsIgnoreCase(filename)){\n\t\t\t\treturn ftpFiles[i].getSize();\n\t\t\t}\n\t\t}\n\t\treturn -1;\n\t}\n\nwhere ftpFiles = ftpClient.initiateListParsing().getFiles(); \n\nWhat do you think??",
            "resolved": "2011-02-26",
            "versions": [
                "1.4"
            ],
            "fixVersions": []
        },
        {
            "issue_id": "NET-41",
            "project": "Commons Net",
            "title": "ftp transfer resume not working with passive mode.",
            "type": "Bug",
            "description": "subject says it all: I think you just omitted the following code in \nftpclient.java:\n\ninstead of:\n            socket = _socketFactory_.createSocket(__passiveHost, __passivePort);\n\n            if (!FTPReply.isPositivePreliminary(sendCommand(command, arg)))\n            {\n                socket.close();\n                return null;\n            }\n\nshould read:\n\n            socket = _socketFactory_.createSocket(__passiveHost, __passivePort);\n\n            if ((__restartOffset > 0) && !restart(__restartOffset))\n            {\n                socket.close();\n                return null;\n            }\n\n            if (!FTPReply.isPositivePreliminary(sendCommand(command, arg)))\n            {\n                socket.close();\n                return null;\n            }\n\n\nThat is, you just forgot a simple clause (which I adapted from the active mode \ncode).  I tested it (basically) and it works.\nhope this helps your excellent project.",
            "resolved": "2007-09-20",
            "versions": [
                "1.0"
            ],
            "fixVersions": []
        },
        {
            "issue_id": "NET-40",
            "project": "Commons Net",
            "title": "[Net] FTPClient.storeFile keeps returning false on XP only, stores nothing to FTP server",
            "type": "Bug",
            "description": "Windows JRE version: j2re-1_4_2_09-windows-i586-p.exe\nLinux JRE version: j2re-1_4_2_05-linux-i586-rpm.bin\n\nFTPClient.storeFile keeps consistently returning false on XP machines\n(unservicepacked, SP1 and SP2) that are tested of being capable of FTPing using\na normal FTP client. The code under discussion is defined as an applet and\ncalled from -within IE- in XP. All relevant applet permission restrictions have\nbeen waived for the Windows JVM by putting \n\npermission java.security.AllPermission;\n\nin java.policy on all concerned Windows XP machines.\n\nThe method works perfectly in Linux as an applet under Firefox, returning true\nand storing the file to the FTP server. I have traced the apparent problem to\nthe following line in \n\ncommons-net-1.4.0-src.tar.gz/\ncommons-net-1.4.0/src/java/org/apache/commons/net/ftp/FTPClient.java Line 388:\n\nif ((socket = _openDataConnection_(FTPCommand.RETR, remote)) == null)\n            return false;\n\nThis method returns false on XP, which eventually returns false thru the\nstoreFile method originating call. This happens only on Windows XP machines -\nthree different physical machines tested, against both a local and\ninternet-located FTP servers, with the JRE version given above. No exceptions\nare raised, the calling method being located in relevant try...catch blocks.\n\nCode Snippet of applet code causing error inside of IE on XP:\n\n    public boolean uploadFile (String localFile, String serverFile) \n\tthrows IOException, FTPConnectionClosedException,CopyStreamException {\n\tFileInputStream in = new FileInputStream(localFile);\t\t\n\tboolean result = storeFile(serverFile, in);\n\tin.close();\n\treturn result;\n    }\n\nAs stated, the above works on Linux, correctly transferring a file to the\nserver. However, on my test XP machines, the above keeps failing with false in\nthe boolean variable 'result', indicating that _openDataConnection_ failed in\ncreating a socket for the transfer.",
            "resolved": "2006-08-27",
            "versions": [
                "1.4"
            ],
            "fixVersions": []
        },
        {
            "issue_id": "NET-39",
            "project": "Commons Net",
            "title": "[net] Solution for ant ftp fails with Nullpointerexception when a symlink is evaluated in method checkRemoteSensitivity in FTP.java for a z/OS ftp server",
            "type": "Bug",
            "description": "The following code is trying to download a file from a z/OS FTP server:\n<ftp action=\"get\" server=\"${server}\" userid=\"${userid}\" password=\"${password}\"\nremotedir=\"/usr/lpp/ims/imsjava91\">\n  <fileset dir=\"C:\\temp\">\n    <include name=\"imsjava.jar\"/>\n  </fileset>\n</ftp>\n\nThe directory in my case also contains symlinks to non Unix File Systems. For\nthose symlinks somehow the FTP classes are not able to obtain file information,\ne.g. the following listing prints String target and array[pcounter] from method\ncheckRemoteSensitivity in org/apache/tools/ant/taskdefs/optional/net/FTP.java:\n\n      [ftp] getting files\n      [ftp] ibm drwxr-xr-x   2 OMVSKERN SYS1        8192 Feb 14  2005 IBM\n      [ftp] ibm -rw-r--r--   2 OMVSKERN SYS1        1963 Feb 14  2005 README\n      [ftp] ibm drwxr-xr-x   3 OMVSKERN SYS1        8192 Feb 14  2005 cics\n      [ftp] ibm drwxr-xr-x   4 OMVSKERN SYS1        8192 Jun 16 13:50 dlimodel\n      [ftp] ibm -rw-r--r--   2 OMVSKERN SYS1      267217 Jun 16 13:50 imsjava.ja\nr\n      [ftp] ibm -rw-r--r--   2 OMVSKERN SYS1        5545 Jun 16 13:50 imsjava91.\nrar\n      [ftp] ibm drwxr-xr-x   3 OMVSKERN SYS1        8192 Feb 14  2005 lib\n      [ftp] ibm null\n\nIn FTP.java at line 536 it is not checked if array[pcounter] is null.\n\nCommons-net is at 1.4.0. Apache Ant version is 1.6.2 compiled on July 16 2004. I\ndid not try to research the cause in the code, why the file information is null.\nFor me I added an if clause around lines 536-538 to check if array[pcounter] is\nnull and this worked great.\n\nSo I replaced lines:\n                              if (array[pcounter].getName().equals(target) &&\npcounter != icounter) {\n                                candidateFound = false;\n                              }\n\nwith:\n                           if (array[pcounter] != null) {\n                              if (array[pcounter].getName().equals(target) &&\npcounter != icounter) {\n                                candidateFound = false;\n                              }\n                           }\n\nI would highly appreciate to add that code to Ant, otherwise my customers will\nnot be able to use any Ant version for some z/OS directories.\nThank you in advance.",
            "resolved": "2006-08-27",
            "versions": [
                "1.4"
            ],
            "fixVersions": [
                "2.0"
            ]
        },
        {
            "issue_id": "NET-38",
            "project": "Commons Net",
            "title": "[net] FTP with Ant",
            "type": "Bug",
            "description": "when using commons-net-1.2.1.jar in conjuction with Ant 1.6.1, Ant FTP tasks:\ndel, list and get do not work, (tasks: put and get still work). this is not an\nissue when using commons-net-1.1.0.jar. Note: FTP tasks with Ant are considered\noptional tasks and require the additional commons-net jar in order to work.",
            "resolved": "2007-09-20",
            "versions": [
                "1.2"
            ],
            "fixVersions": []
        },
        {
            "issue_id": "NET-36",
            "project": "Commons Net",
            "title": "[net] PATCH] FTP and FTPClient changes",
            "type": "Bug",
            "description": "I've included 3 patch files for changes I've made to the FTP andFTPClient\nclasses in the commons-net package.\n\nThe first patch is for the FTP class making it extend SocketClientinstead of\nTelnetClient. I noticed that the behavior of theTelnetClient's input stream\nreader thread was effectively ignoring thesocket's SOTimeout causing reads to\nhang forever if the server decidednot to respond to a client request at all.\nThis should also answer oneof the goals from the TODO list:\n\n\"Divorce FTPClient from TelnetClient, getting rid of the TelnetClientthreads\nwhich cause problems on some platforms (e.g., MacOS).\"\n\nThe second patch is for an FTPTest unit test. I've covered most of thebasic\nmethods (connect(), disconnect(), sendCommand(), getReplyCode(),etc). Ignored\nfor now are the convenience methods since they all callsendCommand() underneath.\nPart of the FTPTest class is a DummyFTPServerinner class which is used to\ncommunicate to the test FTP class - don'tknow if that would be useful elsewhere\n(maybe part of FTPClient unittests), so you might consider making it a utility\nclass for other unittests.\n\nFinally I've attached a patch for minor changes to FTPClient:\n - changed __storeFile() from private to protected so that it can beused by\nclasses that extend FTPClient\n\n - added __storeFile(String, String) method - so that the commands itaccepts are\nnot limited to what's found in FTPCommand. Note: the__storeFile(int, String)\nmethod now calls the __storeFile(String,String) method.\n\n - added _openDataConnection_(String, String) method - so that thecommands it\naccepts are not limited to what's found in FTPCommand. Note:the\n_openDataConnection_(int, String) method now calls\nthe_openDataConnection_(String, String) method.\n\nHopefully you'll find the changes agreeable and will incorporate theminto the\ncode base.",
            "resolved": "2008-03-08",
            "versions": [
                "1.2"
            ],
            "fixVersions": [
                "2.0"
            ]
        },
        {
            "issue_id": "NET-35",
            "project": "Commons Net",
            "title": "[net] FTPClient.setDataTimeout() should contain a default timeout",
            "type": "Bug",
            "description": "The method FTPClient.setDataTimeout() appears not to have a default value, or \nbetter said, it appears that the default value is 0, meaning that if a socket \nhangs (which will happen with an ftp connection eventually) you may block \nindefinately waiting on the connection.\n\nIf we omit a call to setDataTimeout() it's almost certain that we will face a \nbug in our code later on, and unfortunately it's relatively unlikely that this \nbug will be caught in development. I think it would be far safer to have a \ndefault timeout value of say, pick a number, maybe 60 seconds? Those that need \nthis changes should specically call it to make the change. If you do want it to \nblock indefinately (I doubt almost anyone actually wants this) then they should \nexplicitly set this to 0, but I think 99.9% of your users will actually want a \nresonable timeout, thus it would be best to set this 'resonable' timeout value \nas the default to safeguard those that miss adding it to their code.\n\nThanks,\nDavid Parks",
            "resolved": "2010-01-26",
            "versions": [
                "1.2"
            ],
            "fixVersions": []
        },
        {
            "issue_id": "NET-34",
            "project": "Commons Net",
            "title": "[net] FTP CWD command seems not to trigger server responses properly",
            "type": "Bug",
            "description": "org.apache.commons.net.ftp.FTPClient:\n\nwhen sending the cwd command to an ftp server, the server sometimes does not\nunderstand the command is complete:\n\n06.05.2005 10:21:17 - < 230 User logged in, proceed.\n06.05.2005 10:21:17 - > SYST\n06.05.2005 10:21:17 - < 215 UNIX type: L8\n06.05.2005 10:21:17 - > CWD /home/archiveserver\n06.05.2005 10:21:17 - < 250 CWD Command successful.\n06.05.2005 10:21:17 - > PORT 127,0,0,1,9,51\n06.05.2005 10:21:17 - < 200 PORT Command successful.\n06.05.2005 10:21:17 - > LIST\n06.05.2005 10:21:17 - < 125 File status okay; about to open data connection.\n06.05.2005 10:21:17 - < 226 Transfer complete, closing data connection. Time:\n00:00:00, Efficiency: 28.16 KiB/s.\n06.05.2005 10:21:17 - > CWD /home/archiveserver\n06.05.2005 10:21:38 - < 214 whats going on?\n\nthe FTPClient continues after I sent a message to it (the last line: 214\nwhats...) via the ftp server\n\nalso note that i change twice (or more) into the same directory (CWD) using an\nabsolute path.\n\nthis does not happen all the time but often.\n\nalso different ftp servers show the same client behaviour:\n - http://zftpserver.serveftp.com/ (zFTPd)\n - http://www.nitrolic.com/ (GuildFTPd)",
            "resolved": "2006-08-27",
            "versions": [
                "1.3"
            ],
            "fixVersions": []
        },
        {
            "issue_id": "NET-32",
            "project": "Commons Net",
            "title": "[net] Date localization",
            "type": "Bug",
            "description": "Commons-net 1.2.2\n\nWhen listing files from a Unix server that return month names in non-English\nlanguages, no good parsing is done: FTPFileEntryParser.parseFTPEntry() returns null.\n\nBy patching UnixFTPEntryParser.MONTHS in the UnixFTPEntryParser.java file, I've\nbeen able to solve this.\n\nMaybe would need to use a more flexible aproach when parsing months.\n\nThe effect in an Ant script, the FTP get task gives a NullPointerException.",
            "resolved": "2007-09-20",
            "versions": [
                "1.2"
            ],
            "fixVersions": []
        },
        {
            "issue_id": "NET-31",
            "project": "Commons Net",
            "title": "[net] Freeze during FTP connect",
            "type": "Bug",
            "description": "Several times a day a Java process open FTP connections (using Commons Net) and\nsome times (approximately twice a week) the process hang until I kill it.\nBy looking at the dump it seems the lock appears during the connection opening\nbut I have no clue why it happens.\n\nHere are the information I have :\n\n-------------------------------\nFTP client :\n- OS \"Red Hat Enterprise Linux ES release 3 (Taroon Update 2)\"\n- Java j2sdk1.4.2_05\n\nFTP server on windows\n\n-------------------------------\n\nThread dump get through kill -3 on java process :\n\nFull thread dump Java HotSpot(TM) Client VM (1.4.2_05-b04 mixed mode):\n\n\"Thread-1\" daemon prio=1 tid=0x081e2cc0 nid=0x72c5 runnable [a926e000..a926e87c]\n        at java.net.SocketInputStream.socketRead0(Native Method)\n        at java.net.SocketInputStream.read(SocketInputStream.java:129)\n        at java.io.BufferedInputStream.fill(BufferedInputStream.java:183)\n        at java.io.BufferedInputStream.read(BufferedInputStream.java:201)\n        - locked <0xaadc0d80> (a java.io.BufferedInputStream)\n        at java.io.FilterInputStream.read(FilterInputStream.java:66)\n        at java.io.PushbackInputStream.read(PushbackInputStream.java:120)\n        at\norg.apache.commons.net.io.FromNetASCIIInputStream.__read(FromNetASCIIInputStream.java:75)\n        at\norg.apache.commons.net.io.FromNetASCIIInputStream.read(FromNetASCIIInputStream.java:170)\n        at java.io.BufferedInputStream.fill(BufferedInputStream.java:183)\n        at java.io.BufferedInputStream.read(BufferedInputStream.java:201)\n        - locked <0xaadc0028> (a org.apache.commons.net.telnet.TelnetInputStream)\n        at\norg.apache.commons.net.telnet.TelnetInputStream.__read(TelnetInputStream.java:114)\n        at\norg.apache.commons.net.telnet.TelnetInputStream.run(TelnetInputStream.java:535)\n        at java.lang.Thread.run(Thread.java:534)\n\n\"Signal Dispatcher\" daemon prio=1 tid=0x0809c440 nid=0x72c5 waiting on condition\n[0..0]\n\n\"Finalizer\" daemon prio=1 tid=0x08097aa0 nid=0x72c5 in Object.wait()\n[aabbd000..aabbd87c]\n        at java.lang.Object.wait(Native Method)\n        - waiting on <0xab22b7a8> (a java.lang.ref.ReferenceQueue$Lock)\n        at java.lang.ref.ReferenceQueue.remove(ReferenceQueue.java:111)\n        - locked <0xab22b7a8> (a java.lang.ref.ReferenceQueue$Lock)\n        at java.lang.ref.ReferenceQueue.remove(ReferenceQueue.java:127)\n        at java.lang.ref.Finalizer$FinalizerThread.run(Finalizer.java:159)\n\n\"Reference Handler\" daemon prio=1 tid=0x08096ef8 nid=0x72c5 in Object.wait()\n[aac3e000..aac3e87c]\n        at java.lang.Object.wait(Native Method)\n        - waiting on <0xab22b810> (a java.lang.ref.Reference$Lock)\n        at java.lang.Object.wait(Object.java:429)\n        at java.lang.ref.Reference$ReferenceHandler.run(Reference.java:115)\n        - locked <0xab22b810> (a java.lang.ref.Reference$Lock)\n\n\"main\" prio=1 tid=0x0805ba20 nid=0x72c5 in Object.wait() [bfff9000..bfff9eec]\n        at java.lang.Object.wait(Native Method)\n        - waiting on <0xaad40000> (a [I)\n        at java.lang.Object.wait(Object.java:429)\n        at\norg.apache.commons.net.telnet.TelnetInputStream.read(TelnetInputStream.java:339)\n        - locked <0xaad40000> (a [I)\n        at\norg.apache.commons.net.telnet.TelnetInputStream.read(TelnetInputStream.java:466)\n        at java.io.BufferedInputStream.read1(BufferedInputStream.java:220)\n        at java.io.BufferedInputStream.read(BufferedInputStream.java:277)\n        - locked <0xaad42108> (a java.io.BufferedInputStream)\n        at sun.nio.cs.StreamDecoder$CharsetSD.readBytes(StreamDecoder.java:408)\n        at sun.nio.cs.StreamDecoder$CharsetSD.implRead(StreamDecoder.java:450)\n        at sun.nio.cs.StreamDecoder.read(StreamDecoder.java:182)\n        - locked <0xaad42988> (a java.io.InputStreamReader)\n        at java.io.InputStreamReader.read(InputStreamReader.java:167)\n        at java.io.BufferedReader.fill(BufferedReader.java:136)\nat java.io.BufferedReader.readLine(BufferedReader.java:299)\n        - locked <0xaad42988> (a java.io.InputStreamReader)\n        at java.io.BufferedReader.readLine(BufferedReader.java:362)\n        at org.apache.commons.net.ftp.FTP.__getReply(FTP.java:264)\n        at org.apache.commons.net.ftp.FTP._connectAction_(FTP.java:335)\n        at org.apache.commons.net.ftp.FTPClient._connectAction_(FTPClient.java:550)\n        at org.apache.commons.net.SocketClient.connect(SocketClient.java:163)\n        at org.apache.commons.net.SocketClient.connect(SocketClient.java:250)\n        at com.cnetchannel.common.ftp.connect(ftp.java:405)\n        at com.cnetchannel.dataSource.increment(dataSource.java:137)\n        at com.cnetchannel.dataSource.main(dataSource.java:62)\n\n\"VM Thread\" prio=1 tid=0x08095c98 nid=0x72c5 runnable\n\n\"VM Periodic Task Thread\" prio=1 tid=0x0809ec70 nid=0x72c5 waiting on condition\n\"Suspend Checker Thread\" prio=1 tid=0x0809bae8 nid=0x72c5 runnable",
            "resolved": "2006-11-11",
            "versions": [
                "1.4"
            ],
            "fixVersions": [
                "2.0"
            ]
        },
        {
            "issue_id": "NET-29",
            "project": "Commons Net",
            "title": "ftp.parser.NTFTPEntryParser doesn't recognize numerical named directory",
            "type": "Bug",
            "description": "On Windows2k's built-in FTP server, FtpClient.listFiles() doesn't list \nnumerical named directories like '1994'.\n\nHere is a quick fix:\n\n--- NTFTPEntryParser.java.orig\tThu Oct 23 10:13:00 2003\n+++ NTFTPEntryParser.java\tThu Apr 15 17:23:58 2004\n@@ -162,7 +162,7 @@\n             {\n                 return (null);\n             }\n-            f.setName(name);\n+\n             //convert all the calendar stuff to ints\n             int month = new Integer(mo).intValue() - 1;\n             int day = new Integer(da).intValue();\n@@ -198,6 +198,14 @@\n             {\n                 f.setType(FTPFile.DIRECTORY_TYPE);\n                 f.setSize(0);\n+                if (null != size)\n+                {\n+                    f.setName(size+name);\n+                }\n+                else\n+                {\n+                    f.setName(name);\n+                }    \n             }\n             else\n             {\n@@ -206,6 +214,7 @@\n                 {\n                     f.setSize(new Integer(size).intValue());\n                 }\n+                f.setName(name);\n             }\n             return (f);\n         }",
            "resolved": "2007-09-20",
            "versions": [
                "1.1"
            ],
            "fixVersions": []
        },
        {
            "issue_id": "NET-28",
            "project": "Commons Net",
            "title": "[PATCH] [net] patch of FTPS",
            "type": "Bug",
            "description": "Hi, All.\n\nI have improved and tested some functions of FTPS.\n\n  DO NOT REPLY [COM-2710]  - [net] How to implent FTPS\n&#12288;http://marc.theaimsgroup.com/?t=113763609300003&r=1&w=2\n\nI attach a patch (src.zip).\n\nChanges:\n - add the implicit mode\n - add the CCC command handling\n - improve a behavior of the PROT command. (C and P)\n\nSources:\n FTPSClient.java   [modified]\n FTPSCommand.java  [new]\n FTPSReply.java    [new]\n\n\nBest Regards.",
            "resolved": "2006-08-27",
            "versions": [
                "1.4"
            ],
            "fixVersions": [
                "2.0"
            ]
        },
        {
            "issue_id": "NET-27",
            "project": "Commons Net",
            "title": "FTPClient getSystem method call returns null value on VMS system",
            "type": "Bug",
            "description": "FTPClient getSystem method call returns null value on VMS systems.\n\nThis command is successfully processed by server, and its response was \"200 VMS \nOpenVMS 7.2 ......\".\n\ngetSystem method is waiting only for \"215\" (SYSTEM_NAME) response, but \"200\" is \nan other right response (COMMAND_OK).",
            "resolved": "2007-09-20",
            "versions": [
                "1.0"
            ],
            "fixVersions": []
        },
        {
            "issue_id": "NET-26",
            "project": "Commons Net",
            "title": "NullPointerException in SocketClient.getRemoteAddress()",
            "type": "Bug",
            "description": "Description: java program running overnight.  Unknown network conditions caused\na NullPointerException in the SocketClient class.  The client had previously\nbeen connected to a remote host.  There was not a programmatic disconnect from\nthe remote client.  However, there _may_ have been network issues causing a\ndisconnect from the remote client.  \n\nStack trace:\njava.lang.NullPointerException\n        at\norg.apache.commons.net.SocketClient.getRemoteAddress(SocketClient.java:502)\n        at\ncom.hp.isee.perftest.harness.resources.TelnetKeepAlive.run(RemoteSystem.java:417)\n        at java.util.TimerThread.mainLoop(Unknown Source)\n        at java.util.TimerThread.run(Unknown Source)\n\nSuggestion:\nI think that a disconnected client should return a null value rather than throw\na NullPointerException.  I'd recommend changing line 502 of SocketClient.java from \n\n502         return _socket_.getInetAddress();\n\nto \n\n502         if (_socket_ == null)\n503             return null;\n504         else\n505              return _socket_.getInetAddress();",
            "resolved": "2007-09-20",
            "versions": [
                "1.1"
            ],
            "fixVersions": []
        },
        {
            "issue_id": "NET-25",
            "project": "Commons Net",
            "title": "[net] Unix parser does not handle special files.",
            "type": "Bug",
            "description": "At present, the Unix parser (v 1.2.1 of commons-net) doesn't match against a\nfile with a leading 's'. \n\nA side effect is that the parser returns null back to engine.getFiles() (because\nthe listed line from the FTP server doesn't match the regex), which is then\nadded to the temp LinkedList being created.\n\nThe result is, you end up with null FTPFile instances in the collection returned\nby listFiles().\n\nI'm not sure if this is by design or not.",
            "resolved": "2008-03-16",
            "versions": [
                "1.2"
            ],
            "fixVersions": []
        },
        {
            "issue_id": "NET-24",
            "project": "Commons Net",
            "title": "[net] Commons RLogin timeout",
            "type": "Bug",
            "description": "When calling the connect method on org.apache.commons.net.bsd.RLoginClient,\ntimeout can take 10 minutes +.\n\nI have found that this is down to the RCommandClient connect method.\n\nThe exception to catch should be a BindException.  The logic here is that so\nlong as we have got a valid local port and address (no BindException) then we\nshouldn't bother trying all of the other local ports.  If this is adopted, then\na connect exception is thrown from the connect method indicating that the remote\nserver is not present or responding.\n\nPlease see snippet from the corrected connect method below.\n\n        for (localPort = MAX_CLIENT_PORT; localPort >= MIN_CLIENT_PORT; --localPort)\n        {\n            try\n            {\n                _socket_ =\n                    _socketFactory_.createSocket(host, port, localAddr, localPort);\n            }\n//            catch (SocketException e)\n            catch (BindException e)\n            {\n                continue;\n            }\n            break;\n        }",
            "resolved": "2008-02-17",
            "versions": [
                "1.2"
            ],
            "fixVersions": [
                "2.0"
            ]
        },
        {
            "issue_id": "NET-23",
            "project": "Commons Net",
            "title": "[net-ftp] VMSFTPEntryParser class doesn't fullfill VMS specifications",
            "type": "Bug",
            "description": "See below a real directory sample from an Alpha Server running on Open VMS. This\nexample doesn't work with current version of VMSFTPEntryParser.\n\nFirst of all, field [GROUP,OWNER] could be translated by system to an unique\nidentifier.\n\nSecondly, files could be sorted in alpha-numeric order or in another kind of\norder. For this sample, if \"last version mode\" is kept for downloading file\n3-JUN.LIS, as a result 3-JUN.LIS;9 will be downloaded instead of 3-JUN.LIS;11.\n\nFinally, directory sample contains an header \"Directory XXXX\" and a tailer\n\"Total files XXXX\". As a result, first file never be downloaded.\n\nSample :\n\nDirectory USER1:[TEMP]\n\nFORGOTTEN_FILE.COM;6     9/9           2-JUN-1998 07:32:04  [TRANSLATED]   \n(RWED,RWED,RWED,)\n3-JUN.LIS;1              9/9           2-JUN-1998 07:32:04  [TRANSLATED]   \n(RWED,RWED,RWED,)\n3-JUN.LIS;10             9/9           2-JUN-1998 07:32:04  [TRANSLATED]   \n(RWED,RWED,RWED,)\n3-JUN.LIS;11             9/9           2-JUN-1998 07:32:04  [GROUP,OWNER]   \n(RWED,RWED,RWED,)\n3-JUN.LIS;2              9/9           2-JUN-1998 07:32:04  [TRANSLATED]   \n(RWED,RWED,RWED,)\n3-JUN.LIS;3              9/9           2-JUN-1998 07:32:04  [GROUP,OWNER]   \n(RWED,RWED,RWED,)\n3-JUN.LIS;4              9/9           2-JUN-1998 07:32:04  [GROUP,OWNER]   \n(RWED,RWED,RWED,)\n3-JUN.LIS;5              9/9           2-JUN-1998 07:32:04  [GROUP,OWNER]   \n(RWED,RWED,RWED,)\n3-JUN.LIS;6              9/9           2-JUN-1998 07:32:04  [GROUP,OWNER]   \n(RWED,RWED,RWED,)\n3-JUN.LIS;7              9/9           2-JUN-1998 07:32:04  [GROUP,OWNER]   \n(RWED,RWED,RWED,)\n3-JUN.LIS;8              9/9           2-JUN-1998 07:32:04  [GROUP,OWNER]   \n(RWED,RWED,RWED,)\n3-JUN.LIS;9              9/9           2-JUN-1998 07:32:04  [GROUP,OWNER]   \n(RWED,RWED,RWED,)\n\nTotal 11 files",
            "resolved": "2007-09-20",
            "versions": [
                "Nightly Builds"
            ],
            "fixVersions": []
        },
        {
            "issue_id": "NET-22",
            "project": "Commons Net",
            "title": "[net] FTP component: FTPFile does not initialize miliseconds correctly",
            "type": "Bug",
            "description": "Hi, I have been working with the FTP utilities and was saving the filename and \nlastModifiedTime (as taken from FTPFile.lastModifiedTime()) and had a problem \nwhere I would query a directory, save those two parameters for each of the \nfiles, then later on query the same directory (which in my test case has not \nchanged any) and I would find that the FTPFile.lastModifiedTime() objects did \nnot match. \n\nIn looking furthur into it I found that the calendar objects returned by this \nfunction were off by a some random number of milliseconds, however it looked \nlike the hour, minutes, and all other times of the calendar were correct, it \nwas only the milliseconds.\n\nDrilling furthur into the source code for the Commons FTP components I think I \nsee what was overlooked to cause this condition.\n\nIn version 1.2.2 if you look at the UnixFTPEntryParser.java source (I believe \nthis is the parser being used for my WSFTP server I am running, you can \ndownload this ftp server from download.com, I am using this for my development \nenvironment), looking on line 185 you have the following code:\n\n            Calendar cal = Calendar.getInstance();\n            cal.set(Calendar.SECOND, 0);\n            cal.set(Calendar.MINUTE, 0);\n            cal.set(Calendar.HOUR_OF_DAY, 0);\n\nI see that you are initially creating a new calendar instance, which, by \ndefault sets the calendar to the current time. Then you update the seconds, \nminutes, and hour of dat, however you are not initializing the miliseconds, \nhence the miliseconds vary between different instantiations of the same ftp \nentry.  This causes the Calendar.equals() function to indicate that the two \ntimes are different, though they should be equal.\n\nIf you add:\n            cal.set(Calendar.MILLISECOND, 0);\n\nI think you eliminate this problem.\n\nBest regards,\nDavid",
            "resolved": "2007-09-20",
            "versions": [
                "1.2"
            ],
            "fixVersions": []
        },
        {
            "issue_id": "NET-20",
            "project": "Commons Net",
            "title": "[net] FTPClient: setSoTimeout() doesn't work properly on retrieveFile() method",
            "type": "Bug",
            "description": "My purpose is to terminate or cancel  a retrieveFile() method if it takes more\ntime than a specified timeout value. I connected with ftp client, set soTimeout\nto 700 msec and started to retrieve a file that takes 6000 seconds to get. When\nretrieving continues, after nearly 700 milisec., timeout occurs (I guess) but\nthe retrieve procedure continues. After 6000msec. timeout exception is thrown. I\ndon't want to     \nwait for 6000 msec., and I think, I should get the exception after 700 msec. I\ncouldn't find other helpful methods, setDataTimeout () method does something\ndifferent I guess: If I set setDataTimeout to 10 msec., if a package of remote\nfile comes more than 10 msec. late after the previous package , exception is\nthrown, am I right?",
            "resolved": "2007-09-20",
            "versions": [
                "1.3"
            ],
            "fixVersions": []
        },
        {
            "issue_id": "NET-19",
            "project": "Commons Net",
            "title": "[net] NNTP \"removeProtocolCommandistener\" a typo",
            "type": "Bug",
            "description": "The version of org.apache.commons.net.nntp.NNTP in CVS as of today (21-Nov-2001)\nhas a misspelled method name.  \"removeProtocolCommandistener\" should be renamed\nto \"removeProtocolCommandListener\".",
            "resolved": "2007-09-20",
            "versions": [
                "Nightly Builds"
            ],
            "fixVersions": []
        },
        {
            "issue_id": "NET-18",
            "project": "Commons Net",
            "title": "SocketClient.setDefaultTimeout has no effect",
            "type": "Bug",
            "description": "The API state \n\n> Set the default timeout in milliseconds to use when opening a socket. \n> This value is only used previous to a call to connect() and should not \n> be confused with setSoTimeout() which operates on an the currently opened\n> socket. _timeout_ contains the new timeout value\n\nbut the code doese something else.\n\nMaybe the declaration comment of _timout_ misled the implementor...\n\n  /** The timeout to use after opening a socket. */\n  protected int _timeout_;\n\nWhen connecting, _timeout_ is used for setting soTimout, wich is wrong\n \n  protected void _connectAction_() throws IOException {\n    _socket_.setSoTimeout(_timeout_);\n    _input_ = _socket_.getInputStream();\n    _output_ = _socket_.getOutputStream();\n    _isConnected_ = true;\n  }",
            "resolved": "2007-09-20",
            "versions": [
                "Nightly Builds"
            ],
            "fixVersions": []
        },
        {
            "issue_id": "NET-14",
            "project": "Commons Net",
            "title": "[net] [patch] Unable to compile with JDK 1.3",
            "type": "Bug",
            "description": "Hi,\n\ndue to few trivial errors the following classes of the commons-net package \ndoes not compile with JDK 1.3.\n- org.apache.commons.net.nntp.Article\n- org.apache.commons.net.ftp.FTPClientConfig\n\nThis can cause subtle linkage errors when using commons-net 1.4 under a JVM \n1.3 environment.\n\nThe problem applies to the development version too.\n\nSee the attached patches to correct the problem.\n\nAndrea.",
            "resolved": "2007-09-20",
            "versions": [
                "1.4"
            ],
            "fixVersions": []
        },
        {
            "issue_id": "NET-12",
            "project": "Commons Net",
            "title": "[net] FTPClient.retrieveFile() results in 0 byte files",
            "type": "Bug",
            "description": "FTPClient's retrieveFile() always returns false and results in 0 byte files\nFTPClient's completePendingCommand() always never returns when uncommented out\nAttempted client on Win2000 and Server on HPUX 11(?), also client and server \nboth on HPUX.\n\n/lib contains commons-net-1.4.0.jar and jakarta-oro-2.0.8.jar.\n\nThanks,\nSteve\n\nRelative Source Code:\n\nimport org.apache.commons.net.ftp.*;\n\nimport java.io.BufferedInputStream;\nimport java.io.BufferedOutputStream;\nimport java.io.File;\nimport java.io.FileOutputStream;\nimport java.io.PrintWriter;\nimport java.rmi.dgc.VMID;\nimport java.text.DateFormat;\nimport java.util.Calendar;\nimport java.util.GregorianCalendar;\nimport java.util.Date;\nimport java.util.zip.ZipEntry;\nimport java.util.zip.ZipOutputStream;\n\n\tprivate void get(Calendar criteriaDateTime) throws Exception {\n\n    \tFTPClient ftp = null;\n    \tFTPFile[] serverFiles = null;\n    \tboolean isLoggedIn = false;\n\t\tException exception = null;\n\n\t\tDate serverFileDate;\n\n\t\ttry {\n\t    \t// Connect and logon to FTP Server\n\t\t\tftp = new FTPClient();\n\t\t\tftp.connect(server);\n\t\t\tisLoggedIn = ftp.login(userId, password);\n\t\t\tif (!FTPReply.isPositiveCompletion(ftp.getReplyCode())){\n\t\t\t\tthrow new Exception(\"FTP server refused \nconnection.\");\n\t\t\t}\n\t\t\tLogger.log(\"ftp post-login reply: \" + ftp.getReplyString\n());\n\n\t\t\t// Use passive mode assuming we are behind a firewall.\n\t\t\tftp.enterLocalPassiveMode();\n\t\t\t// default to binary transfer\n\t\t\tftp.setFileType(FTP.BINARY_FILE_TYPE);\n\n\t\t\tLogger.log(\"ftp status: \" + ftp.getStatus());\n\t\t\t\n\t\t\t// get list of files in FTP server directory\n\t\t\tFTPListParseEngine engine = ftp.initiateListParsing\n(serverDirectory);\n\n\t\t    if(engine.hasNext()) {\n\t\t    \tserverFiles = engine.getFiles();\n\t\t\t\tLogger.log(\"Number of files in server \ndirectory: \" + serverFiles.length);\n\n\t\t\t\t// what if the file is removed by another \nprocess?\n\t\t\t\t\n\t\t\t\tfor (int i = 0; i < serverFiles.length; i++) {\n\t\n\t\t\t\t\tif(serverFiles[i].isFile()){\n\t\t\t\t\t\tserverFileDate = serverFiles\n[i].getTimestamp().getTime();\n\t\t\n\t\t\t\t\t\t// select files form the server \nif file attributes have not changed in x seconds\n\t\t\t\t\t\tif (serverFileDate.compareTo\n(criteriaDateTime.getTime()) <= 0) {\n\t\t\t\t\t\t\tif(isZipClientFile){\n\t\t\t\t\t\t\t\tdoFtpZip(ftp, \nserverFiles[i]);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\telse{\n\t\t\t\t\t\t\t\tdoFtpOnly(ftp, \nserverFiles[i]);\n\t\t\t\t\t\t\t}\n\t\t\n\t\t\t\t\t\t\t// delete server file \nif requested\n\t\t\t\t\t\t\tif(isDeleteServerFile){\n\t\t\t\t\t\t\t\tftp.deleteFile\n(serverFiles[i].getName());\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t    }\n\n\t\t} catch (Exception e) {\n            Logger.handleError(this.getClass().getName(), \"get\", e);\n\t\t\texception = e;\n\t\t}\n\t\tfinally{\n\t\t\t// Logout and disconnect from the FTP Server \n\t\t\tif(ftp != null){\n\t\t\t\tif(isLoggedIn)\n\t\t\t\t\tftp.logout();\n\t\t\t\tif(ftp.isConnected())\n\t\t\t\t\tftp.disconnect();\n\t\t\t}\n\t\t}\n\t\tif(exception != null){\n\t\t\tthrow exception;\n\t\t}\n\t}\n\n\tprivate void doFtpOnly(FTPClient ftp, FTPFile serverFile) throws \nException {\n\n\t\tDateFormat df = DateFormat.getDateInstance(DateFormat.SHORT);\n\t\tint count;\n\t\tbyte data[] = new byte[BUFFER];\n\t\tFileOutputStream fos = null;\n\t\tException exception = null;\n\n\t\ttry{\n\t\t\tLogger.log(\"FTP Download: \" +\n\t\t\t\t\tserverFile.getName() +\n\t\t\t\t\t\" with timestamp \" +\n\t\t\t\t\tdf.format(serverFile.getTimestamp\n().getTime()));\n\t\t\t\n\t\t\tfos = new FileOutputStream(\n\t\t\t\t\tclientDirectory +\n\t\t\t\t\tFile.separator +\n\t\t\t\t\tserverFile.getName());\n\t\t\t\n\t\t\t// stream the ftp contents into an inputstream\n\t\t\t// this always returns false\n\t\t\tif(!ftp.retrieveFile(serverFile.getName(), fos)){\n\t\t\t\t// throw new Exception(\"false return from \nftp.retrieveFile()\");\n\t\t\t\tLogger.log(\"false return from ftp.retrieveFile\n()\");\n\t\t\t}\n\t\t\t/*  this command freezes every time when running on \nWindows */\n\t\t\tLogger.log(\"to ftp.completePendingCommand()\");\n\t\t\tif(!ftp.completePendingCommand()){\n\t\t\t\tthrow new Exception(\"completePendingCommand() \nreturned false\");\n\t\t\t}\n\t\t\tLogger.log(\"did ftp.completePendingCommand()\");\n\t\t}\n\t\tcatch(Exception e){\n            Logger.handleError(this.getClass().getName(), \"doFtpOnly\", e);\n\t\t\texception = e;\n\t\t}\n\t\tfinally{\n\t\t\t// close input stream\n\t\t\tif(fos != null)\n\t\t\t\tfos.close();\n\t\t\tLogger.log(\"FTP end\");\n\t\t}\n\t\tif(exception != null){\n\t\t\tthrow exception;\n\t\t}\n\t}",
            "resolved": "2006-08-27",
            "versions": [
                "1.4"
            ],
            "fixVersions": []
        },
        {
            "issue_id": "NET-11",
            "project": "Commons Net",
            "title": "FTPFile.getSize() returns 0 on large files",
            "type": "Bug",
            "description": "The FTPFile.getSize() returns a 0 when the file size is actually larger than 2GB\n(Integer.MAX_VALUE) although the return type is a long.",
            "resolved": "2007-09-20",
            "versions": [
                "Nightly Builds"
            ],
            "fixVersions": []
        },
        {
            "issue_id": "NET-10",
            "project": "Commons Net",
            "title": "[net] FTPClient.listFiles(filename) return empty array with long file name",
            "type": "Bug",
            "description": "I tried to get FTPClient.listFiles(filename) and it returns an empty (zero \nlength)array with long file name. \nIn the test I made I use a text file with this name \"iSeriesNuovo_ESQy140535 - \nanagrafica titoli per nome.txt\". \nIn the same class and with the same content, if I use a name as \"pippo.txt\" I \ncan get the array filled with the correct attributes.\nI use \"commons-net-1.4.0.jar\" dated 07 May 2005 running on win xp pro under \njdk 1.4.2_09.\nHTH",
            "resolved": "2007-09-20",
            "versions": [
                "1.4"
            ],
            "fixVersions": []
        },
        {
            "issue_id": "NET-9",
            "project": "Commons Net",
            "title": "[telnet] unable to register option hamdlers if option > 39",
            "type": "Bug",
            "description": "In the TelnetOption class the following costants are declared\n\npublic static final int MAX_OPTION_VALUE = 255;\npublic static int NEW_ENVIRONMENT_VARIABLES = 39;\nprivate static int __LAST_OPTION = NEW_ENVIRONMENT_VARIABLES;\n\nSetting __LAST_OPTION = NEW_ENVIRONMENT_VARIABLES prevents any registration of\noption handlers if option code is > 39(a InvalidTelnetOptionException is rised\nwith error Invalid Option Code).\n\nA workaround is changing the LAST_OPTION declaration to \n\nprivate static int __LAST_OPTION = MAX_OPTION_VALUE;\n\nbut this only partially fix the problem because the getOption() method, which\nconverts option code to name, will fail if  the table size and content are not\nupdated.",
            "resolved": "2007-09-20",
            "versions": [
                "1.0"
            ],
            "fixVersions": []
        },
        {
            "issue_id": "NET-7",
            "project": "Commons Net",
            "title": "[net] FTPClient.connect() does not timeout",
            "type": "Bug",
            "description": "I have a Java application which transmits files using FTPClient. The system is \nrunning live and usually has no problems. Sometimes, we cannot connect to the \nFTP server, the connect() call timesout after 3mins 45 secs and we try later - \nusually successfully.\n\nOver the weekend we had a situation where the application hung. The logs showed \nthat FTPClient.connect() had been called but had not returned. Neither had it \nthrown an exception.\n\nI have managed to reproduce this condition by writing a SimpleServer class \n(code attached). The SimpleServer accepts a TCP connection on port 6001 but \ndoes not enter the FTP dialogue. I called the SimpleServer using client.connect\n(\"localhost\", 6001). The connection was accepted by the SimpleServer, the call \nto connect() did not return or throw an exception.\n\nAlthough I had to reproduce this problem by creating an artificial situation, \nthe problem does occur on real, live systems. So, a fix would really benefit \nthe user community.\n\nKind Regards\n\n\nSimpleServer.java:\n==================\n\nimport java.io.*;\nimport java.net.*;\nimport java.util.*;\n\npublic class SimpleServer {\n\n\tSimpleServer(int port){\n\t\tServerSocket\t\tsocket;\n\t\tSocket\t\t\t\tconnection;\n\t\tBufferedInputStream\tis;\n\t\tboolean\t\t\t\tconnected\t= false;\n\n\t\ttry{\n\t\t\tSystem.out.println(\"Listen\");\n\t\t\tsocket\t\t= new ServerSocket(port);\n\n\t\t\tSystem.out.println(\"Accept\");\n\t\t\tconnection\t= socket.accept();\n\t\t\tconnected\t= true;\n\n\t\t\tSystem.out.println(\"Setup streams\\n\");\n\t\t\tis\t= new BufferedInputStream \n(connection.getInputStream());\n\n\t\t\twhile(connected){\n\t\t\t\tint \tsize;\n\t\t\t\tbyte[]\tbuff\t= new byte[1024];\n\n\t\t\t\tSystem.out.println(\"Reading\");\n\t\t\t\tsize\t= is.read(buff, 0, buff.length);\n\n\t\t\t\tif (size >= 0){\n\t\t\t\t\tSystem.out.println(\"Read [\" + size \n+ \"]: \" + new String(buff, 0, size));\n\t\t\t\t}\n\t\t\t\telse{\n\t\t\t\t\tSystem.out.println(\"no more data\");\n\t\t\t\t\tconnected\t= false;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tcatch (Exception e){\n\t\t\tSystem.err.println(\"Exception: \" + e);\n\t\t\tSystem.exit(1);\n\t\t}\n\t}\n\n\tpublic static void main (String args[]){\n\t\tSimpleServer ss\t= new SimpleServer(6001);\n\t}\n\n}",
            "resolved": "2007-09-20",
            "versions": [
                "1.3"
            ],
            "fixVersions": []
        },
        {
            "issue_id": "NET-4",
            "project": "Commons Net",
            "title": "Inconsistent behavior on FTP Client listfiles",
            "type": "Bug",
            "description": "I'm trying to connect to GuildFTPd FTP Server running in w2k\nif I call FTPClient.listFiles() I get an array of files\n\nbut if I call FTPClient.listFiles(FTPClient.printWorkingDirectory())\nI get a null value \nFTPClient.printWorkingDirectory()) = \"/\"\n\nalso if I pass in the name of a single sub directory I get a null value\n\nif I use FTPClient.changeWorkingDirectory() first and then use the \nno arg listFiles it works.",
            "resolved": "2007-09-20",
            "versions": [
                "1.1"
            ],
            "fixVersions": []
        },
        {
            "issue_id": "NET-2",
            "project": "Commons Net",
            "title": "[net] The FTPClient is unable to list files on Japanese servers",
            "type": "Bug",
            "description": "I ran into some problems attempting to get the FTPClient to be able to list\nfiles on a Solaris server which is configured to use the Japanese locale.  The\nproblem turned out to be caused by the regular expressions used to parse the\nindividual lines received from the server.\n\nIt works great with the English locale, but on Japanese servers, every single\nline of output was failing to match.\n\nI modified the UnixFTPEntryParser to work correctly with either English or\nJapanese locales. I also added appropriate test cases to make sure every thing\nworks.\n\nObviously other languages are going to most likely have similar problems.  The\nway I modified the regex, should work correctly with any language that uses\nnumerical months and adds units after the month, day, and/or years.\n\nI also found that there were some encoding problems.  The FTP class allows the\nuser to configure a control encoding using the setControlEncoding() method.  But\nthis encoding was not being used is several places throughout the code.\n\nI had to add a couple new methods to handle encoding, but all existing public\nmethods were left unchanged and function the same as they did before.\n\nIn addition, if the user specified an invalid control encoding when used with\nthe Ant task, it was kicking out some some nasty NPEs because the ant task always\ntries to log off. That could be viewed as a problem with the Ant task, but I made\nthe FTP class handle this case more gracefully.  The problem is that the\nisConnected method returns true when the socket has been opened, but the\nprotocol is not yet all the way initialized. The logout and disconnect methods\nnow handle these cases correctly.\n\nI will post right back with the patch.   This message was also posted on the dev\nlist.\n\nCheers,\nLeif",
            "resolved": "2007-09-20",
            "versions": [
                "Nightly Builds"
            ],
            "fixVersions": []
        },
        {
            "issue_id": "NET-1",
            "project": "Commons Net",
            "title": "commons-net 1.2.2 does not compile with JDK 1.5",
            "type": "Bug",
            "description": "It uses 'enum' which is a restricted keyword in JDK 1.5; you have to compile it\nwith -source 1.4. I will attach a patch",
            "resolved": "2007-09-20",
            "versions": [
                "1.2"
            ],
            "fixVersions": []
        }
    ]
}