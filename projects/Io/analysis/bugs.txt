{
    "bugs info": {
        "bug counter": 324,
        "bugs": [
            {
                "issue_id": "IO-776",
                "project": "Commons IO",
                "title": "DeferredFileOutputStream uses wrong order of parameters in Object.requireNonNull",
                "type": "Bug",
                "description": "Placeholder for https://github.com/apache/commons-io/pull/368/",
                "resolved": "2022-07-20",
                "versions": [
                    "2.11.0"
                ],
                "fixVersions": [
                    "2.12.0"
                ]
            },
            {
                "issue_id": "IO-775",
                "project": "Commons IO",
                "title": "IOUtils.byteArray() java.lang.NoSuchMethodError",
                "type": "Bug",
                "description": "Exception in thread \"main\" java.lang.NoSuchMethodError: org/apache/commons/io/IOUtils.byteArray(I)[B (loaded from file:/C:/Users/dwohlers/Maximoworkspace/maximo/lib/axis2.jar by sun.misc.Launcher$AppClassLoader@53fdf001) called from class org.apache.commons.io.output.AbstractByteArrayOutputStream (loaded from file:/C:/Users/dwohlers/Maximoworkspace/maximo/lib/commons-io-2.11.0.jar by sun.misc.Launcher$AppClassLoader@53fdf001).\r\n\u00a0 \u00a0 at org.apache.commons.io.output.AbstractByteArrayOutputStream.needNewBuffer(AbstractByteArrayOutputStream.java:104)\r\n\u00a0 \u00a0 at org.apache.commons.io.output.UnsynchronizedByteArrayOutputStream.<init>(UnsynchronizedByteArrayOutputStream.java:51)\r\n\u00a0 \u00a0 at org.apache.poi.util.IOUtils.peekFirstNBytes(IOUtils.java:139)\r\n\u00a0 \u00a0 at org.apache.poi.poifs.filesystem.FileMagic.valueOf(FileMagic.java:209)\r\n\u00a0 \u00a0 at org.apache.poi.openxml4j.opc.internal.ZipHelper.verifyZipHeader(ZipHelper.java:143)\r\n\u00a0 \u00a0 at org.apache.poi.openxml4j.opc.internal.ZipHelper.openZipStream(ZipHelper.java:175)\r\n\u00a0 \u00a0 at org.apache.poi.openxml4j.opc.ZipPackage.<init>(ZipPackage.java:130)\r\n\u00a0 \u00a0 at org.apache.poi.openxml4j.opc.OPCPackage.open(OPCPackage.java:312)\r\n\u00a0 \u00a0 at org.apache.poi.ooxml.util.PackageHelper.open(PackageHelper.java:59)\r\n\u00a0 \u00a0 at org.apache.poi.xssf.usermodel.XSSFWorkbook.<init>(XSSFWorkbook.java:289)\r\n\u00a0 \u00a0 at org.apache.poi.xssf.usermodel.XSSFWorkbook.<init>(XSSFWorkbook.java:285)",
                "resolved": "2022-08-08",
                "versions": [
                    "2.11.0"
                ],
                "fixVersions": []
            },
            {
                "issue_id": "IO-773",
                "project": "Commons IO",
                "title": "RegexFileFilter is no longer Serializable",
                "type": "Bug",
                "description": "org.apache.commons.io.filefilter.RegexFileFilter cannot be serialized b/c org.apache.commons.io.filefilter.RegexFileFilter.pathToString Function",
                "resolved": "2022-06-23",
                "versions": [
                    "2.10.0",
                    "2.11.0"
                ],
                "fixVersions": [
                    "2.12.0"
                ]
            },
            {
                "issue_id": "IO-772",
                "project": "Commons IO",
                "title": "Confusing Javadoc on IOUtils#resourceToURL() and other resource* methods",
                "type": "Bug",
                "description": "The Javadoc for IOUtils::resourceToURL (and the String and byte[] variants) says that the \"name\" parameter is expected to be absolute and is not well defined otherwise. When this is called without a ClassLoader, using an absolute path makes sense as Class::getResource is called against a class that is not the caller's, so a non-absolute path would be looking inside the commons-io package.\u00a0 But when called with a ClassLoader, instead the ClassLoader::getResource method is called, and using an absolute path with that does not work the same way.\u00a0\r\n\r\nFor example, both of these work the same for a file sitting at the root of the classpath (src/main/resources in typical Maven/Gradle build):\r\n * {{IOUtils.resourceToString(\"/file.txt\");}}\r\n * {{IOUtils.resourceToString(\"file.txt\", getClass().getClassLoader());}}\r\n\r\nBut this does not work:\r\n * {{IOUtils.resourceToString(\"/file.txt\", getClass().getClassLoader());}}\r\n\r\nThat behavior is consistent with the explanation in this [accepted StackOverflow answer|[https://stackoverflow.com/a/51645482/1270447].]\r\n\r\nI believe the doc on the method variants that take a ClassLoader should call this out.",
                "resolved": "2022-06-19",
                "versions": [
                    "2.11.0"
                ],
                "fixVersions": [
                    "2.12.0"
                ]
            },
            {
                "issue_id": "IO-764",
                "project": "Commons IO",
                "title": "IOUtils.write() throws OutOfMemoryError/NegativeArraySizeException while writing big strings",
                "type": "Bug",
                "description": "Currently, if I try to write a sufficiently big to a stream, IOUtils.write fails:\r\n{code:java}\r\njava.lang.NegativeArraySizeException: -1283060862\r\nat java.base/java.lang.StringCoding.encodeUTF8(StringCoding.java:904)\r\nat java.base/java.lang.StringCoding.encode(StringCoding.java:449)\r\nat java.base/java.lang.String.getBytes(String.java:964)\r\nat org.apache.commons.io.IOUtils.write(IOUtils.java:3251)\r\nat org.apache.commons.io.FileUtils.writeStringToFile(FileUtils.java:3541)\r\nat org.apache.commons.io.FileUtils.writeStringToFile(FileUtils.java:3524){code}\r\nThe reason for this is that getBytes does not support Strings with this size. This should be fixed.",
                "resolved": "2022-04-05",
                "versions": [
                    "2.11.0"
                ],
                "fixVersions": [
                    "2.12.0"
                ]
            },
            {
                "issue_id": "IO-762",
                "project": "Commons IO",
                "title": "FileSystem.WINDOWS.isReservedFileName doesn't check for file extension",
                "type": "Bug",
                "description": "FileSystem.WINDOWS.isReservedFileName() doesn't check file names without extension, for instance FileSystem.WINDOWS.isReservedFileName(\"COM1.txt\") returns false but the creation of the latter file on a Windows platform will fail.\r\n\r\nAlso the method should be case-insensitive, eg FileSystem.WINDOWS.isReservedFileName(\"com1\") should return true\r\n\r\n\u00a0\r\n\r\n\u00a0\r\n\r\n\u00a0",
                "resolved": "2022-06-14",
                "versions": [
                    "2.11.0"
                ],
                "fixVersions": [
                    "2.12.0"
                ]
            },
            {
                "issue_id": "IO-761",
                "project": "Commons IO",
                "title": "IOCase.isCaseSensitive(IOCase) result is backward",
                "type": "Bug",
                "description": "When the argument is IOCase.SENSITIVE, I think the static method isCaseSensitive should return true.\r\n\r\nI did the following test with the code.\r\n{code:java}\r\npublic void testIsCaseSensitive() {\r\n  // return true. I think it is right.\r\n  boolean b1 = IOCase.SENSITIVE.isCaseSensitive();\r\n  System.out.println(b1);\r\n\r\n  // but invoke static method and return false.\r\n  boolean b2 = IOCase.isCaseSensitive(IOCase.SENSITIVE);\r\n  System.out.println(b2);\r\n}{code}\r\n\u00a0\r\n\r\n\u00a0",
                "resolved": "2022-02-06",
                "versions": [
                    "2.10.0",
                    "2.11.0"
                ],
                "fixVersions": [
                    "2.12.0"
                ]
            },
            {
                "issue_id": "IO-760",
                "project": "Commons IO",
                "title": "FileUtils.iterateFiles create Too many open files",
                "type": "Bug",
                "description": "When i use FileUtils.iterateFiles and i decide to not iterate on all results, something is not closed correctly.\r\n\r\nThis code create \"Too Many Open files\":\r\n{code:java}\r\nimport java.io.File;\r\nimport java.io.IOException;\r\nimport java.nio.file.Files;\r\nimport java.util.Iterator;\r\nimport org.apache.commons.io.FileUtils;public class FileUtilsTest {\r\n\u00a0 \u00a0 static long step=0;\r\n\u00a0 \u00a0 public static void main(String[] argv) throws IOException {\r\n\u00a0 \u00a0 \u00a0 \u00a0\u00a0\r\n\u00a0 \u00a0 \u00a0 \u00a0 /*\r\n\u00a0 \u00a0 \u00a0 \u00a0 \u00a0* create test directory\r\n\u00a0 \u00a0 \u00a0 \u00a0 \u00a0*/\r\n\u00a0 \u00a0 \u00a0 \u00a0 File tmpDirectory = Files.createTempDirectory(\"pipo\").toFile();\r\n\u00a0 \u00a0 \u00a0 \u00a0 try {\r\n\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 /*\r\n\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0* add one file\r\n\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0*/\r\n\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 new File(tmpDirectory, \"first\").createNewFile();\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 /*\r\n\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0* try until TooManyOpenFiles Exception\r\n\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0*/\r\n\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 while(true) {\r\n\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 /*\r\n\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0* Iterate only to find first entry\r\n\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0*/\r\n\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 Iterator<File> candidates = FileUtils.iterateFiles(tmpDirectory, null, false);\r\n\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 if (!candidates.hasNext()) {\r\n\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 throw new RuntimeException(\"one file must exists\");\r\n\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 }\r\n\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 System.out.print(\"\\rend step:\"+(++step));\r\n\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 }\r\n\u00a0 \u00a0 \u00a0 \u00a0 } finally {\r\n\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 FileUtils.deleteDirectory(tmpDirectory);\r\n\u00a0 \u00a0 \u00a0 \u00a0 }\r\n\u00a0 \u00a0 }}\r\n {code}\r\nException trace:\r\n{code:java}\r\njava -cp Bug-all.jar FileUtilsTest\r\nend step:2044\r\nException in thread \"main\" java.io.UncheckedIOException: /tmp/pipo4192501847009771344\r\n\u00a0 \u00a0 \u00a0 \u00a0 at org.apache.commons.io.FileUtils.iterateFiles(FileUtils.java:1927)\r\n\u00a0 \u00a0 \u00a0 \u00a0 at FileUtilsTest.main(FileUtilsTest.java:28)\r\nCaused by: java.nio.file.FileSystemException: /tmp/pipo4192501847009771344: Too many open files\r\n\u00a0 \u00a0 \u00a0 \u00a0 at java.base/sun.nio.fs.UnixException.translateToIOException(UnixException.java:100)\r\n\u00a0 \u00a0 \u00a0 \u00a0 at java.base/sun.nio.fs.UnixException.rethrowAsIOException(UnixException.java:111)\r\n\u00a0 \u00a0 \u00a0 \u00a0 at java.base/sun.nio.fs.UnixException.rethrowAsIOException(UnixException.java:116)\r\n\u00a0 \u00a0 \u00a0 \u00a0 at java.base/sun.nio.fs.UnixFileSystemProvider.newDirectoryStream(UnixFileSystemProvider.java:432)\r\n\u00a0 \u00a0 \u00a0 \u00a0 at java.base/java.nio.file.Files.newDirectoryStream(Files.java:472)\r\n\u00a0 \u00a0 \u00a0 \u00a0 at java.base/java.nio.file.FileTreeWalker.visit(FileTreeWalker.java:300)\r\n\u00a0 \u00a0 \u00a0 \u00a0 at java.base/java.nio.file.FileTreeWalker.walk(FileTreeWalker.java:322)\r\n\u00a0 \u00a0 \u00a0 \u00a0 at java.base/java.nio.file.FileTreeIterator.<init>(FileTreeIterator.java:71)\r\n\u00a0 \u00a0 \u00a0 \u00a0 at java.base/java.nio.file.Files.walk(Files.java:3825)\r\n\u00a0 \u00a0 \u00a0 \u00a0 at org.apache.commons.io.file.PathUtils.walk(PathUtils.java:1044)\r\n\u00a0 \u00a0 \u00a0 \u00a0 at org.apache.commons.io.FileUtils.streamFiles(FileUtils.java:2971)\r\n\u00a0 \u00a0 \u00a0 \u00a0 at org.apache.commons.io.FileUtils.iterateFiles(FileUtils.java:1925)\r\n\u00a0 \u00a0 \u00a0 \u00a0 ... 1 more{code}\r\n\u00a0",
                "resolved": "2022-02-02",
                "versions": [
                    "2.11.0"
                ],
                "fixVersions": []
            },
            {
                "issue_id": "IO-759",
                "project": "Commons IO",
                "title": "behavior change of org.apache.commons.io.output.FileWriterWithEncoding",
                "type": "Bug",
                "description": "*behavior change*\u00a0of\u00a0{*}org.apache.commons.io.output.FileWriterWithEncoding{*}!\r\n\r\n- Using commons-io-2.10.0.jar overwritting a file just creates a new file with the new content.\r\n- Using commons-io-2.11.0.jar overwrites just the existing file with new content, but leaves the rest of previous biger content in the file.\r\n\r\nCode example:\r\n\r\ntry (BufferedWriter fkfwr = new BufferedWriter(new FileWriterWithEncoding(ftokeyfile,\"UTF-8\"))) { ...\r\n\r\n\u00a0",
                "resolved": "2022-06-23",
                "versions": [
                    "2.11.0"
                ],
                "fixVersions": []
            },
            {
                "issue_id": "IO-757",
                "project": "Commons IO",
                "title": "listFilesAndDirs doesn't list symbolicLinks when the original file has been deleted. The link does exist on OS",
                "type": "Bug",
                "description": "When upgrading from version 2.8.0 to 2.11.0 i found out a difference in behaviour in the FileUtils.listFilesAndDirs method concerning symbolic links. I tracked it back to version 2.9.0 that introduced it. On the changelist of that release I found following that might be related/caused it:\r\n{quote}FileUtils.iterateFiles runs out of memory when executed for a directory with large number of files. Re-implement FileUtils' iterateFiles(), iterateFilesAndDirs(), listFiles(), listFilesAndDirs() to use NIO file tree walking instead of IO file listings to avoid memory consumption issues on large file trees. Fixes IO-597. Thanks to Gary Gregory, Arvind, Rob Spoor.\r\n{quote}\r\nThe testcase is following:\r\n\r\n1. create a file F in a directory D\r\n2. create a symbolic link S to F in D\r\n3. call FileUtils.listFilesAndDirs for D to verify setup is ok\r\n-> The results is 3 items, D, F and S\r\n4. delete file F\r\n5. call FileUtils.listFilesAndDirs for D\r\n-> Before release 2.9.0 the result here is 2 items. D and S, from release 2.9.0 on, the result is 1 item, only D. The symbolic link is not listed anymore while it does exist on disk still.\r\n\r\nI call this a bug as the result does not reflect the situation on disk and Files.list does show the symbolic link\r\n\r\nIncluded unit test project, succeeds when using version 2.8.0, fails when using 2.9.0",
                "resolved": "2022-08-08",
                "versions": [
                    "2.9.0"
                ],
                "fixVersions": [
                    "2.12.0"
                ]
            },
            {
                "issue_id": "IO-755",
                "project": "Commons IO",
                "title": "Using FileUtils.listFiles() with background changes fails on Linux",
                "type": "Bug",
                "description": "When calling {{FileUtils.listFiles}} and a file is being removed from this or a subdirectory during the execution the following Error occurs on linux.\r\n\r\nh3. Stacktrace\r\n{code:trace}\r\nCaused by: java.nio.file.NoSuchFileException: /**\r\n\tat java.base/sun.nio.fs.UnixException.translateToIOException(UnixException.java:92)\r\n\tat java.base/sun.nio.fs.UnixException.rethrowAsIOException(UnixException.java:111)\r\n\tat java.base/sun.nio.fs.UnixException.rethrowAsIOException(UnixException.java:116)\r\n\tat java.base/sun.nio.fs.UnixFileAttributeViews$Basic.readAttributes(UnixFileAttributeViews.java:55)\r\n\tat java.base/sun.nio.fs.UnixFileSystemProvider.readAttributes(UnixFileSystemProvider.java:149)\r\n\tat java.base/sun.nio.fs.LinuxFileSystemProvider.readAttributes(LinuxFileSystemProvider.java:99)\r\n\tat java.base/java.nio.file.Files.readAttributes(Files.java:1764)\r\n\tat java.base/java.nio.file.FileTreeWalker.getAttributes(FileTreeWalker.java:219)\r\n\tat java.base/java.nio.file.FileTreeWalker.visit(FileTreeWalker.java:276)\r\n\tat java.base/java.nio.file.FileTreeWalker.next(FileTreeWalker.java:373)\r\n\tat java.base/java.nio.file.Files.walkFileTree(Files.java:2761)\r\n\tat org.apache.commons.io.FileUtils.listAccumulate(FileUtils.java:2076)\r\n\tat org.apache.commons.io.FileUtils.listFiles(FileUtils.java:2132)\r\n{code}\r\n\r\nh3. Upgrade of apache commons-io\r\nThe version of the dependency was upgraded from 2.8 to 2.11. In 2.9 the library started using java.nio instead of java.io which might behave differently on unix, when a file is not existent during processing of directories.\r\n\r\nh3. Causing functionality in our implementation\r\nIn some part we have multithreaded access to the filesystem. A folder is accessed from multiple threads which access the folder with {{org.apache.commons.io.FileUtils#listFiles(java.io.File, org.apache.commons.io.filefilter.IOFileFilter, org.apache.commons.io.filefilter.IOFileFilter)}}. These threads also *move*, *delete* and *rename* files from this directory. While this seems to be working on a windows machine, it is not the case on a Linux machine. In 2.8 apparently there was no issue with this.\r\n\r\n*In short*: While a directory is being listed with {{FileUtils.listFiles()}}, a file is being deleted. When trying to read its file-attributes it stops because of a {{NoSuchFileException}}.\r\n\r\nh3. Other commons-io functionalities\r\nWe tried using {{PathUtils.walk(directory filters, 5, false).map(Path::toFile).collect(Collectors.toList())}}. This method was introduced with the same change.\r\nThis produced a similar stacktrace:\r\n{code:trace}\r\nCaused by: java.io.UncheckedIOException: java.nio.file.NoSuchFileException: /*\r\n\tat java.base/java.nio.file.FileTreeIterator.fetchNextIfNeeded(FileTreeIterator.java:87)\r\n\tat java.base/java.nio.file.FileTreeIterator.hasNext(FileTreeIterator.java:103)\r\n\tat java.base/java.util.Iterator.forEachRemaining(Iterator.java:132)\r\n\tat java.base/java.util.Spliterators$IteratorSpliterator.forEachRemaining(Spliterators.java:1801)\r\n\tat java.base/java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:484)\r\n\tat java.base/java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:474)\r\n\tat java.base/java.util.stream.ReduceOps$ReduceOp.evaluateSequential(ReduceOps.java:913)\r\n\tat java.base/java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234)\r\n\tat java.base/java.util.stream.ReferencePipeline.collect(ReferencePipeline.java:578)\r\n\t... 47 more\r\nCaused by: java.nio.file.NoSuchFileException: /*\r\n\tat java.base/sun.nio.fs.UnixException.translateToIOException(UnixException.java:92)\r\n\tat java.base/sun.nio.fs.UnixException.rethrowAsIOException(UnixException.java:111)\r\n\tat java.base/sun.nio.fs.UnixException.rethrowAsIOException(UnixException.java:116)\r\n\tat java.base/sun.nio.fs.UnixFileAttributeViews$Basic.readAttributes(UnixFileAttributeViews.java:55)\r\n\tat java.base/sun.nio.fs.UnixFileSystemProvider.readAttributes(UnixFileSystemProvider.java:149)\r\n\tat java.base/sun.nio.fs.LinuxFileSystemProvider.readAttributes(LinuxFileSystemProvider.java:99)\r\n\tat java.base/java.nio.file.Files.readAttributes(Files.java:1764)\r\n\tat java.base/java.nio.file.FileTreeWalker.getAttributes(FileTreeWalker.java:219)\r\n\tat java.base/java.nio.file.FileTreeWalker.visit(FileTreeWalker.java:276)\r\n\tat java.base/java.nio.file.FileTreeWalker.next(FileTreeWalker.java:373)\r\n\tat java.base/java.nio.file.FileTreeIterator.fetchNextIfNeeded(FileTreeIterator.java:83)\r\n\t... 59 more{code}\r\n\r\nh3. git commit\r\nhttps://github.com/apache/commons-io/commit/4a514d3306b55b3667d1449ebd4cbe5f19dd7af0\r\n\r\nh3. Other Questions\r\n* What was the reason to wrap all {{IOException}} into {{UncheckedIOException}} in those methods?",
                "resolved": "2022-06-20",
                "versions": [
                    "2.9.0",
                    "2.10.0",
                    "2.11.0"
                ],
                "fixVersions": [
                    "2.12.0"
                ]
            },
            {
                "issue_id": "IO-751",
                "project": "Commons IO",
                "title": "When deleting symlinks, File/PathUtils.deleteDirectory() changes file permissions of the target",
                "type": "Bug",
                "description": "When {{FileUtils.deleteDirectory(...)}} and {{PathUtils.deleteDirectory(...)}} encounter a symlink while recursively deleting, the default behaviour is to delete the symlink, but leave the target of the symlink alone. This works for the most part: the symlink is correctly deleted, and the target is not deleted or recursed into.\r\n\r\nHowever, the methods _alter the file permissions of the target_:\r\n\r\n- {{FileUtils.deleteDirectory(file)}} _removes_ all write permissions from the target\r\n- {{PathUtils.deleteDirectory(path, StandardDeleteOption.OVERRIDE_READ_ONLY)}} _removes_ all write permissions, and _adds_ all execute permissions (even if the target is a file, not a directory)\r\n- {{PathUtils.deleteDirectory(path)}} works correctly and does not change the target's permissions\r\n\r\nA JUnit 4 test case that demonstrates the behaviour of all three methods is attached.\r\n\r\nThe behaviour is unexpected (the Javadocs give no hint), inconvenient (it leaves the owner of the target without write permission) and potentially dangerous (it adds execute permissions for anyone).\r\n\r\nIt appears the implementation assumes it can freely modify permissions because it is going to delete the file/directory anyway, and the case of symlinks was simply not considered. The handling of write permissions is particularly puzzling. I could understand  why an implementation would _add_ write permission, but why _remove_ it?",
                "resolved": "2022-02-12",
                "versions": [
                    "2.11.0"
                ],
                "fixVersions": [
                    "2.12.0"
                ]
            },
            {
                "issue_id": "IO-750",
                "project": "Commons IO",
                "title": "FileUtils.iterateFiles also lists directories",
                "type": "Bug",
                "description": "After updating commons-io from 2.8.0 to 2.9.0 the method FileUtils.iterateFiles also returns directories.\r\n\r\nCodeexample:\r\n\r\n{code:java}\r\n        final File directory = new File(FileUtils.getTempDirectory(), \"TEST\");\r\n        directory.mkdir();\r\n        new File(directory, \"TEST\").mkdir();\r\n        new File(directory, \"test.txt\").createNewFile();\r\n\r\n        final IOFileFilter filter = new WildcardFileFilter(\"*\", IOCase.INSENSITIVE);\r\n        for (final Iterator<File> itFiles = FileUtils.iterateFiles(directory, filter, null); itFiles\r\n                .hasNext();) {\r\n            final File file = itFiles.next();\r\n            System.out.println(file.getAbsolutePath());\r\n        }\r\n{code}\r\n\r\nresult in version 2.8.0:\r\n{noformat}\r\n/tmp/TEST/test.txt\r\n{noformat}\r\n\r\nresult from version 2.9.0:\r\n{noformat}\r\n/tmp/TEST/test.txt\r\n/tmp/TEST/TEST\r\n{noformat}\r\n\r\niterateFiles shouldn't return directories.",
                "resolved": "2021-09-26",
                "versions": [
                    "2.9.0"
                ],
                "fixVersions": [
                    "2.12.0"
                ]
            },
            {
                "issue_id": "IO-749",
                "project": "Commons IO",
                "title": "FileUtils.listFiles() does not list matching files if File parameter is a symbolic link",
                "type": "Bug",
                "description": "same issue with https://issues.apache.org/jira/browse/IO-741\r\n\r\nbut method is\u00a0\r\n{code:java}\r\npublic static Collection<File> listFiles(\r\n final File directory, final IOFileFilter fileFilter, final IOFileFilter dirFilter)\r\n{code}",
                "resolved": "2021-09-21",
                "versions": [
                    "2.11.0"
                ],
                "fixVersions": [
                    "2.12.0"
                ]
            },
            {
                "issue_id": "IO-748",
                "project": "Commons IO",
                "title": "FileUtils.moveToDirectory() exception documentation and exception message error",
                "type": "Bug",
                "description": "When executing\r\n{code:java}\r\nFileUtils.moveToDirectory(new File('foobarbaz'), new File('/tmp'), false){code}\r\nwhile \"foobarbaz\" doesn't exist, I get\r\n{code:java}\r\njava.io.FileNotFoundException: Source 'foobarbaz' does not exist {code}\r\nbut the documentation doesn't mention \"FileNotFoundException\".\r\n\r\nOTOH, if \"foobarbaz\" exists both as source and in the destination directory, I get\r\n{code:java}\r\norg.apache.commons.io.FileExistsException: File element in parameter 'null' already exists: '/tmp/foobarbaz'\r\n{code}\r\nWhat's that \"parameter 'null'\"?",
                "resolved": "2021-09-14",
                "versions": [
                    "2.11.0"
                ],
                "fixVersions": [
                    "2.12.0"
                ]
            },
            {
                "issue_id": "IO-744",
                "project": "Commons IO",
                "title": "FileWriterWithEncoding for an existing file no longer truncates the file.",
                "type": "Bug",
                "description": "Creating a new FileWriterWithEncoding for an existing file no longer truncates the file. This was the case in the versions before including 2.10.0.\r\n\r\nStarting with 2.11.0 i'm facing issues with files containing my new content but still have the old one if the existing file was larger than the new content.\r\n\r\n\u00a0\r\n\r\ncommit b2811e86 seems to introduce the problem - i think we should use StandardOpenOption.CREATE_NEW instead of StandardOpenOption.CREATE (inside the initWriter method)\r\n\r\n\u00a0\r\n\r\nPlease give me a sign if you\u00a0 need more details.",
                "resolved": "2021-07-26",
                "versions": [
                    "2.11.0"
                ],
                "fixVersions": [
                    "2.12.0"
                ]
            },
            {
                "issue_id": "IO-742",
                "project": "Commons IO",
                "title": "IOUtils.close(Closeable, IOConsumer<IOException>) should not throw IOException",
                "type": "Bug",
                "description": "The method\r\n{code:java}\r\npublic static void close(Closeable closeable, IOConsumer<IOException> consumer){code}\r\nshould not include a _throws IOException_ clause as the IOException will be handled by consumer (which is the point of the method).",
                "resolved": "2022-02-06",
                "versions": [
                    "2.10.0"
                ],
                "fixVersions": []
            },
            {
                "issue_id": "IO-741",
                "project": "Commons IO",
                "title": "FileUtils.listFiles does not list matching files if File parameter is a symbolic link",
                "type": "Bug",
                "description": "This is a regression from 2.6.0.\u00a0 We are using the following FileUtils utility function to list matching files under a directory:\r\n{noformat}\r\npublic static Collection<File> listFiles(File directory, String[] extensions, boolean recursive){noformat}\r\n\u00a0\r\n\r\nIn particular the call we are making is:\r\n\r\n\r\n{noformat}\r\nFileUtils.listFiles(extension, new String[]{\"jar\"}, false);{noformat}\r\nThis used to return all matching files in 2.6.0 when the directory was a symlink, but it no longer does. Breaking through the code in a debugger, I was able to manually add the FileVisitOptions.FOLLOW_LINKS option, but this is not specifiable from an external caller outside of commons-io.",
                "resolved": "2021-06-30",
                "versions": [
                    "2.9.0",
                    "2.10.0"
                ],
                "fixVersions": [
                    "2.11.0"
                ]
            },
            {
                "issue_id": "IO-740",
                "project": "Commons IO",
                "title": "RegexFileFilter matches on full path instead of filename",
                "type": "Bug",
                "description": "org.apache.commons.io.filefilter.RegexFileFilter#accept(java.nio.file.Path, java.nio.file.attribute.BasicFileAttributes) is a new method added in 2.9.0 and it's javadoc states:\u00a0\r\n\r\n\r\n{code:java}\r\n/**\r\n * Checks to see if the file name matches one of the regular expressions.\r\n *\r\n * @param path the path\r\n * @param attributes the path attributes\r\n * @return true if the file name matches one of the regular expressions\r\n */\r\n{code}\r\nHowever in it's implementation:\u00a0\r\n{code:java}\r\nreturn toFileVisitResult(pattern.matcher(path.toString()).matches(), path);\r\n{code}\r\nit matches on path.toString() which will be the full path instead of the filename.\r\n\r\n\u00a0\r\n\r\nThis is also inconsistent with the other method \u00a0org.apache.commons.io.filefilter.RegexFileFilter#accept(java.io.File, java.lang.String) which does match only on filename.",
                "resolved": "2021-06-11",
                "versions": [
                    "2.9.0"
                ],
                "fixVersions": [
                    "2.10.0"
                ]
            },
            {
                "issue_id": "IO-739",
                "project": "Commons IO",
                "title": "RegexFileFilter matches on path instead of name",
                "type": "Bug",
                "description": "The new RegexFileFilter.accept(Path, BasicFileAttributes) uses the full path for matching. When this filter is used in combination with FileUtils.listFiles(File, IOFileFilter, IOFileFilter), then it will not match anything if a path separator is not part of the pattern.\r\n\r\nThe following small program will list all files when used with version 2.8.0 and nothing when used with version 2.9.0:\r\n\r\n{color:#770055}import {color}{color:#339999}org.apache.commons.io.FileUtils{color};\r\n{color:#770055}import {color}{color:#339999}org.apache.commons.io.filefilter.{color}*;\r\n\r\n{color:#770055}import {color}{color:#339999}java.io.File{color};\r\n{color:#770055}import {color}{color:#339999}java.util.Collection{color};\r\n\r\n{color:#770055}class {color}{color:#339999}ListFilesRegexBug {color}{\r\n\u00a0\u00a0 {color:#770055}public static void {color}main({color:#339999}String{color}[] {color:#660088}args{color}) {\r\n\u00a0\u00a0\u00a0\u00a0 {color:#339999}RegexFileFilter {color}{color:#6688ff}filter {color}= {color:#770055}new {color}RegexFileFilter({color:#0000cc}\"[^/{color}{color:#cc88ff}\\\\\\\\{color}{color:#0000cc}]+\"{color});\r\n\u00a0\u00a0\u00a0\u00a0 {color:#339999}Collection{color}<{color:#339999}File{color}> {color:#6688ff}files {color}= {color:#339999}FileUtils{color}.{color:#575757}listFiles{color}({color:#770055}new {color}File({color:#0000cc}\".\"{color}), {color:#6688ff}filter{color}, {color:#339999}TrueFileFilter{color}.{color:#0000aa}TRUE{color});\r\n\u00a0\u00a0\u00a0\u00a0 {color:#770055}for {color}({color:#339999}File {color}{color:#6688ff}f {color}: {color:#6688ff}files{color}) {\r\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 {color:#339999}System{color}.{color:#0000aa}out{color}.println({color:#6688ff}f{color}.getAbsolutePath());\r\n\u00a0\u00a0\u00a0\u00a0 }\r\n\u00a0\u00a0 }\r\n}",
                "resolved": "2021-06-10",
                "versions": [
                    "2.9.0"
                ],
                "fixVersions": [
                    "2.10.0"
                ]
            },
            {
                "issue_id": "IO-738",
                "project": "Commons IO",
                "title": "com.sun.nio should be an optional import",
                "type": "Bug",
                "description": "OSGi headers in commons-io 2.9.0 are not fully correct. At least {{com.sun.nio}} import should be optional. I'm preparing a PR.",
                "resolved": "2021-06-07",
                "versions": [
                    "2.9.0"
                ],
                "fixVersions": [
                    "2.10.0"
                ]
            },
            {
                "issue_id": "IO-737",
                "project": "Commons IO",
                "title": "RegexFileFilter is broken, matches against path (and not filename)",
                "type": "Bug",
                "description": "org.apache.commons.io.filefilter.RegexFileFilter.accept(Path, BasicFileAttributes) filters against path\r\n\r\n\r\nshould be sth like\u00a0\r\nreturn toFileVisitResult(pattern.matcher(path.getFileName().toString()).matches(), path);",
                "resolved": "2021-06-07",
                "versions": [
                    "2.9.0"
                ],
                "fixVersions": [
                    "2.10.0"
                ]
            },
            {
                "issue_id": "IO-736",
                "project": "Commons IO",
                "title": "commons-io version 2.7+: IOUtils.length(boms) returns 0 even if boms is not empty",
                "type": "Bug",
                "description": "\u00a0in\"BOMInputStream\" class, IOUtils.length(boms) would return 0 and breaks the method while \"boms\" has five elements:\r\n\r\n!image-2021-06-02-16-47-57-567.png|width=450,height=300!\r\n\r\nplease investigate and provide a fix, thanks!",
                "resolved": "2021-06-08",
                "versions": [
                    "2.7"
                ],
                "fixVersions": []
            },
            {
                "issue_id": "IO-735",
                "project": "Commons IO",
                "title": "2.9.0 breaks OSGi with new Import-Package header",
                "type": "Bug",
                "description": "Upon updating our project to use commons-io 2.9.0 over 2.8.0 - we got build failures due to missing resolution of sun.nio.ch and sun.misc\r\n\r\n{{missing requirement [org.apache.commons.commons-io/2.9.0] osgi.wiring.package; filter:=\"(osgi.wiring.package=sun.nio.ch)\"]]\r\n}}\r\n\r\nRunning diffoscope over the 2.8.0->2.9.0 changes I see a new MANIFEST.MF entry:\r\n\r\n{{Import-Package:\u00b7sun.misc,sun.nio.ch}}\r\n\r\nI don't think we should import internal Sun packages here.\r\n",
                "resolved": "2021-06-01",
                "versions": [],
                "fixVersions": [
                    "2.9.0"
                ]
            },
            {
                "issue_id": "IO-734",
                "project": "Commons IO",
                "title": "The OSGi manifest now contains sun.* packages in the Import-Package instruction",
                "type": "Bug",
                "description": "After attempting to upgrade to commons-io:2.9.0 for apache sling I see that there are now required imports for some sun.* packages in the OSGi manifest.\u00a0 These references appear to be coming from a new\u00a0BufferedFileChannelInputStream class in version 2.9.0.\r\n\r\nThis results in an error for OSGi environments where those packages are not exposed anywhere.\r\n\r\nSpecifically this error:\r\n\r\n\u00a0\r\n{noformat}\r\ncommons-io:commons-io:2.9.0: is importing package(s) [sun.nio.ch, sun.misc] in start level 5 but no bundle is exporting these for that start level.\u00a0\r\n{noformat}\r\nIt would be best if commons-io was not using sun.* packages, but if you must reference those then perhaps those imported packages could be marked optional in the manifest so the commons-io OSGi bundle will not fail to activate when those are not available?",
                "resolved": "2021-05-31",
                "versions": [
                    "2.9.0"
                ],
                "fixVersions": [
                    "2.10.0"
                ]
            },
            {
                "issue_id": "IO-733",
                "project": "Commons IO",
                "title": "RegexFileFilter uses the path and file name instead of just the file name.",
                "type": "Bug",
                "description": "I had a filename search where I looked for patterns that would not be picked up by surefire but had similar naming. \r\n\r\nIt is with an \"and\", \"no\", and a \"regex\" filter similar to\r\n{code:java}\r\nIOFileFilter fileFilter = FileFilterUtils.and(//\r\n            FileFilterUtils.notFileFilter(includeFileFilter), //\r\n            new RegexFileFilter(\".*Test.*\\\\.java\")); {code}\r\n\r\nI created a test project to reproduce the issue\r\n[https://github.com/sellersj/apache-commons-io-issue]\r\n\r\nI tested back to version 2.2 and it was the same to 2.8.0. The new behaviour happens with 2.9.0",
                "resolved": "2021-05-28",
                "versions": [
                    "2.9.0"
                ],
                "fixVersions": [
                    "2.10.0"
                ]
            },
            {
                "issue_id": "IO-729",
                "project": "Commons IO",
                "title": "BrokenReader, BrokenWriter, BrokenInputStream, BrokenOutputStream can cause IllegalArgumentException in combination with try-with-resources",
                "type": "Bug",
                "description": "The following little code snippet can cause an IllegalArgumentException with message \"Self-suppression not permitted\":\r\n{code}        try (Writer writer = new BrokenWriter()) {\r\n            writer.write('a');\r\n        }{code}\r\nThe try-with-resources mechanism will try to add the exception thrown from {{close}} as suppress exception to the exception thrown from {{write}}. Since those are the same, an exception is thrown. From the source of java.lang.Throwable:\r\n{code}    public final synchronized void addSuppressed(Throwable exception) {\r\n        if (exception == this)\r\n            throw new IllegalArgumentException(SELF_SUPPRESSION_MESSAGE, exception);{code}",
                "resolved": "2021-09-28",
                "versions": [
                    "2.8.0"
                ],
                "fixVersions": [
                    "2.12.0"
                ]
            },
            {
                "issue_id": "IO-728",
                "project": "Commons IO",
                "title": "MimeHeaders.setValue throws NPE when IOUtils.copy is called",
                "type": "Bug",
                "description": "I have a Spring Boot Microservice and I am using *IOUtils.copy(InputStream, OutputStream)* which sporadically throws NPE while setting MimeHeaders as shown below:\r\n\r\n2021-03-18 18:14:05.081 ERROR [http-nio-80-exec-8] o.a.c.c.C.[.[.[.[dispatcherServlet] - Servlet.service() for servlet [dispatcherServlet] threw exception2021-03-18 18:14:05.081 ERROR [http-nio-80-exec-8] o.a.c.c.C.[.[.[.[dispatcherServlet] - Servlet.service() for servlet [dispatcherServlet] threw exception\r\n java.lang.NullPointerException: null at\r\n org.apache.tomcat.util.http.MimeHeaders.setValue(MimeHeaders.java:318) at org.apache.coyote.http11.Http11Processor.prepareResponse(Http11Processor.java:1285) at org.apache.coyote.AbstractProcessor.action(AbstractProcessor.java:374) at org.apache.coyote.Response.action(Response.java:206) at org.apache.coyote.http11.Http11OutputBuffer.doWrite(Http11OutputBuffer.java:219) at org.apache.coyote.Response.doWrite(Response.java:602) at org.apache.catalina.connector.OutputBuffer.realWriteBytes(OutputBuffer.java:352) at org.apache.catalina.connector.OutputBuffer.flushByteBuffer(OutputBuffer.java:833) at org.apache.catalina.connector.OutputBuffer.append(OutputBuffer.java:738) at org.apache.catalina.connector.OutputBuffer.writeBytes(OutputBuffer.java:399) at org.apache.catalina.connector.OutputBuffer.write(OutputBuffer.java:377) at org.apache.catalina.connector.CoyoteOutputStream.write(CoyoteOutputStream.java:96) at org.springframework.security.web.util.OnCommittedResponseWrapper$SaveContextServletOutputStream.write(OnCommittedResponseWrapper.java:639) at\r\n org.apache.commons.io.IOUtils.copyLarge(IOUtils.java:2147) at\r\n org.apache.commons.io.IOUtils.copy(IOUtils.java:2102) at \r\n org.apache.commons.io.IOUtils.copyLarge(IOUtils.java:2123) at \r\n org.apache.commons.io.IOUtils.copy(IOUtils.java:2078)\r\n\r\nI have attached the complete stack trace in the attachment and also provided the environment where this appears.\r\n I feel that there is some issue with the Commons IO lib and would like to know if this can be fixed.\r\n\r\nMy application has the following code to which the stack trace points to:\r\n{quote}FileInputStream fis = new FileInputStream(tempOutputFile);\r\n return outputStream ->\u00a0\\{ IOUtils._copy_(fis, outputStream); }\r\n\r\n;\r\n{quote}\r\nFound the page [http://tomcat.10.x6.nabble.com/NullPointerException-in-MimeHeaders-td2054107.html] which talks about a similar problem and coincidentally we too use *org.apache.catalina.connector.RECYCLE_FACADES=true* system property to avoid reuse of request and response objects, but it isn't not working for us as well.\r\n \u00a0",
                "resolved": "2022-02-06",
                "versions": [
                    "2.5"
                ],
                "fixVersions": []
            },
            {
                "issue_id": "IO-727",
                "project": "Commons IO",
                "title": "FilenameUtils.directoryContains() and FileUtils.directoryContains() return wrong result when parent and child have the same path prefix",
                "type": "Bug",
                "description": "FilenameUtils.directoryContains() and FileUtils.directoryContains() will return `true` with the following input.\r\n{code:java}\r\ncanonicalParent: /path/foo\r\ncanonicalChild:  /path/foobar\r\n{code}\r\nThere were several issues on this but the problem still remains.\r\n IO-423 didn't do anything.\r\n IO-466 test case added in [676c03|https://github.com/apache/commons-io/commit/67325cf97946f053da51dd358a9ffca0a9676c03] just happened to passed because the input file didn't exist.\r\nGithub PR: https://github.com/apache/commons-io/pull/217",
                "resolved": "2021-09-26",
                "versions": [],
                "fixVersions": [
                    "2.12.0"
                ]
            },
            {
                "issue_id": "IO-724",
                "project": "Commons IO",
                "title": "FileUtils.deleteDirectory javadoc is inaccurate for nonexistent directory",
                "type": "Bug",
                "description": "FileUtils.deleteDirectory javadoc claims:\r\n{code:java}\r\n@throws IllegalArgumentException if {@code directory} does not exist or is not a directory{code}\r\nbut the first two lines of the code are:\r\n{code:java}\r\nObjects.requireNonNull(directory, \"directory\");\r\nif (!directory.exists()) {\r\n    return;\r\n}{code}\r\n\u00a0",
                "resolved": "2021-06-22",
                "versions": [
                    "2.8.0"
                ],
                "fixVersions": [
                    "2.11.0"
                ]
            },
            {
                "issue_id": "IO-721",
                "project": "Commons IO",
                "title": "Wrong exception message in FileUtils.setLastModified(File, File)",
                "type": "Bug",
                "description": "A simple\r\n{code:java}\r\nFileUtils.copyDirectory(source, dest, glob) {code}\r\nworks fine when using Commons-IO 2.7, but fails with\r\n{code:java}\r\nCaught: java.io.IOException: Failed setLastModified on /path/to/source\r\njava.io.IOException: Failed setLastModified on /path/to/source\r\n \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0at org.apache.commons.io.FileUtils.setLastModified(FileUtils.java:2561)\r\n \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0at org.apache.commons.io.FileUtils.doCopyDirectory(FileUtils.java:1361)\r\n \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0at org.apache.commons.io.FileUtils.copyDirectory(FileUtils.java:733)\r\n \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0at org.apache.commons.io.FileUtils.copyDirectory(FileUtils.java:659)\r\n \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0at org.apache.commons.io.FileUtils.copyDirectory(FileUtils.java:606)\r\n{code}\r\nafter update to 2.8.0. From reading the documentation, it's also my understanding that \"setLastModified()\" should be executed on \"dest\" to set the same modification time as \"source\", but *not* on \"source\".",
                "resolved": "2021-09-26",
                "versions": [
                    "2.8.0"
                ],
                "fixVersions": [
                    "2.12.0"
                ]
            },
            {
                "issue_id": "IO-719",
                "project": "Commons IO",
                "title": "PathUtils.copyDirectory() does not work when source and dest belong to different file systems",
                "type": "Bug",
                "description": "This code:\r\n{code:java}\r\n@Test\r\npublic void pathUtilsCopyDirFailure() throws IOException {\r\n\tFileSystem fs1 = Jimfs.newFileSystem();\r\n\tPath srcDir = fs1.getPath(\"srcDir\");\r\n\t// Create files/dirs in srcDir\r\n\tPath targetDir = Paths.get(\"targetDir\");\r\n\tPathUtils.copyDirectory(srcDir, targetDir);\r\n}\r\n{code}\r\nthrows exception:\r\n\r\n{noformat}\r\njava.nio.file.ProviderMismatchException\r\n\tat java.base/sun.nio.fs.UnixPath.toUnixPath(UnixPath.java:198)\r\n\tat java.base/sun.nio.fs.UnixPath.resolve(UnixPath.java:410)\r\n\tat java.base/sun.nio.fs.UnixPath.resolve(UnixPath.java:43)\r\n\tat org.apache.commons.io.file.CopyDirectoryVisitor.preVisitDirectory(CopyDirectoryVisitor.java:130)\r\n\tat org.apache.commons.io.file.CopyDirectoryVisitor.preVisitDirectory(CopyDirectoryVisitor.java:36)\r\n\tat java.base/java.nio.file.Files.walkFileTree(Files.java:2731)\r\n\tat java.base/java.nio.file.Files.walkFileTree(Files.java:2796)\r\n\tat org.apache.commons.io.file.PathUtils.visitFileTree(PathUtils.java:687)\r\n\tat org.apache.commons.io.file.PathUtils.copyDirectory(PathUtils.java:196)\r\n{noformat}\r\n",
                "resolved": "2021-02-10",
                "versions": [
                    "2.8.0"
                ],
                "fixVersions": [
                    "2.9.0"
                ]
            },
            {
                "issue_id": "IO-718",
                "project": "Commons IO",
                "title": "FileUtils.checksumCRC32 and FileUtils.checksum are not thread safe",
                "type": "Bug",
                "description": "When calling {{FileUtils.checksumCRC32}} from multiple threads (in order to improve throughput when calculating CRC's for a large folder), the code is not thread-safe, resulting in incorrect CRC output.\r\n\r\nThe following simple test demonstrates the issue:\r\n{code:java}\r\n@Test\r\npublic void should() throws ExecutionException, InterruptedException {\r\n  File testFile = new File(\"C:\\\\Temp\\\\large-file.txt\");\r\n  // ScheduledExecutorService scheduler = Executors.newScheduledThreadPool(1);\r\n  ScheduledExecutorService scheduler = Executors.newScheduledThreadPool(5);\r\n  List<Future<Long>> futures = new ArrayList<>();\r\n  for (int i = 0; i < 20; i++) {\r\n    futures.add(scheduler.submit(() -> FileUtils.checksumCRC32(testFile)));\r\n  }\r\n  List<Long> crcs = new ArrayList<>();\r\n  for (Future<Long> future : futures) {\r\n    crcs.add(future.get());\r\n  }\r\n  Assertions.assertThat(crcs).allMatch(c -> crcs.get(0).equals(c));\r\n} {code}\r\nIn the above code, with a thread-pool size of 1, all calculated CRC's for the file are the same.\u00a0 With a thread-pool size of more, the CRC's differ.\r\n\r\nThe issue appears to be related to the use of a common {{SKIP_BYTE_BUFFER}} in {{IOUtils.consume}}.\u00a0 The multiple threads all read into the same buffer as the data is being \"discarded\".\u00a0 However, {{FileUtils.checksum}} uses a {{CheckedInputStream}} to calculate the CRC, which uses the value read into the shared buffer.\u00a0 With multiple threads writing to that buffer the CRC mechanism breaks down.",
                "resolved": "2021-02-17",
                "versions": [
                    "2.8.0"
                ],
                "fixVersions": [
                    "2.9.0"
                ]
            },
            {
                "issue_id": "IO-717",
                "project": "Commons IO",
                "title": "Infinite loop in ReaderInputStream instead of throwing exception for CodingErrorAction.REPORT",
                "type": "Bug",
                "description": "{{org.apache.commons.io.input.ReaderInputStream}} constructed with a {{CharsetEncoder}} with {{CodingErrorAction.REPORT}} does not throw exceptions when unmappable or malformed input is encountered. And in some cases can even enter infinite loops.\r\n\r\nExample:\r\n{code}\r\nCharsetEncoder encoder = StandardCharsets.UTF_8.newEncoder().onMalformedInput(CodingErrorAction.REPORT);\r\ntry (InputStream in = new ReaderInputStream(new StringReader(\"\\uD800aa\"), encoder, 2)) {\r\n    in.read();\r\n}\r\n{code}\r\n\r\nThe reason for this is that the class does not check [{{CoderResult.isError()}}|https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/nio/charset/CoderResult.html#isError()] and then call [{{CoderResult.throwException()}}|https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/nio/charset/CoderResult.html#throwException()].\r\n\r\n----\r\n\r\nIt would also be good to improve the documentation of the constructors taking a {{Charset}} or charset name to describe that they replace unmappable or malformed input with the default replacement character.",
                "resolved": "2021-09-26",
                "versions": [
                    "2.8.0"
                ],
                "fixVersions": [
                    "2.12.0"
                ]
            },
            {
                "issue_id": "IO-716",
                "project": "Commons IO",
                "title": "ReaderInputStream enter infinite loop for too small buffer sizes",
                "type": "Bug",
                "description": "{{org.apache.commons.io.input.ReaderInputStream}} enters an infinite loop when it was constructed with a too small buffer size (0 or 1) and one of its reading methods is called.\r\n\r\nExample:\r\n{code}\r\nint bufferSize = 1;\r\ntry (InputStream in = new ReaderInputStream(new StringReader(\"\\uD800\"), StandardCharsets.UTF_8, bufferSize)) {\r\n    in.read();\r\n}\r\n{code}\r\n\r\nThis could be solved by making sure that the buffer size is always >= 2. This should solve this issue because as far as I know all charsets only report {{UNDERFLOW}} without encoding any chars if the only char in the buffer is a surrogate.\r\nHowever, the saner solution might be to increase the buffer when {{UNDERFLOW}} is encountered and no chars from {{encoderIn}} have been consumed.\r\n\r\n----\r\n\r\nSimilarly for sanety it would be good to throw an {{AssertionError}} (or increase the size of {{encoderOut}}) if {{OVERFLOW}} is returned. I don't think there are any encodings which require more than 128 bytes (used by {{ReaderInputStream}} for the output buffer) for encoding a single char or flushing, but would be good to at least handle that case in a saner way than entering an infinite loop anyways.",
                "resolved": "2021-09-26",
                "versions": [
                    "2.8.0"
                ],
                "fixVersions": [
                    "2.12.0"
                ]
            },
            {
                "issue_id": "IO-715",
                "project": "Commons IO",
                "title": "ReaderInputStream does not mention behavior regarding CharsetEncoder.reset()",
                "type": "Bug",
                "description": "Neither the class documentation of {{org.apache.commons.io.input.ReaderInputStream}} nor the documentation of the constructors taking {{CharsetEncoder}} arguments describe whether [{{CharsetEncoder.reset()}}|https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/nio/charset/CharsetEncoder.html#reset()] is called.\r\n\r\nSince calling {{reset()}} is part of the _encoding operation_ (see {{CharsetEncoder}} documentation), it should at least be specified whether this method is called or not.\r\n\r\nAdditionally it _might_ make sense to call {{reset()}} (though this might be a breaking change?) because encoding from a new (\\?) reader with an already used encoder which is not reset might lead to unexpected and incorrect results.",
                "resolved": "2022-02-07",
                "versions": [
                    "2.8.0"
                ],
                "fixVersions": [
                    "2.12.0"
                ]
            },
            {
                "issue_id": "IO-714",
                "project": "Commons IO",
                "title": "ReaderInputStream does not call CharsetEncoder.flush(...)",
                "type": "Bug",
                "description": "As defined by the {{CharsetEncoder}} [documentation|https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/nio/charset/CharsetEncoder.html] the _encoding operation_ consists of:\r\n# (reset)\r\n# encode\r\n# flush\r\n\r\nHowever, {{org.apache.commons.io.input.ReaderInputStream}} does not call {{flush}}. This leads to incorrect results for charsets whose {{flush}} method appends additional bytes.\r\n\r\nExample:\r\n{code}\r\n// Charset whose CharsetEncoder.flush(...) puts bytes\r\nCharset charset = Charset.forName(\"Cp930\");\r\n\r\n// \\u0391: Causes CharsetEncoder.flush(...) to put additional bytes\r\nString s = \"\\u0391\";\r\n\r\nbyte[] expected = s.getBytes(charset);\r\nbyte[] actual;\r\ntry (InputStream in = new ReaderInputStream(new StringReader(s), charset)) {\r\n    actual = IOUtils.toByteArray(in);\r\n}\r\n\r\nif (!Arrays.equals(expected, actual)) {\r\n    throw new AssertionError(\"\\n  Expected: \" + Arrays.toString(expected) + \"\\n  Actual:   \" + Arrays.toString(actual));\r\n}\r\n{code}\r\n\r\nAlso make sure to check the result of {{flush()}} because {{OVERFLOW}} as result is possible. In theory {{isError() == true}} might be possible as well, but I don't think any of charset implementations currently return that.",
                "resolved": "2021-10-16",
                "versions": [
                    "2.8.0"
                ],
                "fixVersions": [
                    "2.12.0"
                ]
            },
            {
                "issue_id": "IO-713",
                "project": "Commons IO",
                "title": "ReaderInputStream documentation regarding available() is incorrect",
                "type": "Bug",
                "description": "The documentation for {{org.apache.commons.io.input.ReaderInputStream}} says:\r\n{quote}\r\nGiven the fact that the Reader class doesn't provide any way to predict whether the next read operation will block or not, it is not possible to provide a meaningful implementation of the InputStream.available() method. A call to this method will always return 0.\r\n{quote}\r\n\r\nHowever, {{Reader}} does actually provide such functionality: [{{Reader.ready()}}|https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/io/Reader.html#ready()].\r\n\r\nBut properly implementing {{available()}} might be tricky, see [related Guava pull request|https://github.com/google/guava/pull/5397].\r\nTherefore it might be easiest to change the documentation, stating that {{available()}} always returns 0 without providing a reason for it.\r\nOr {{available()}} could at least return a result based on {{encoderOut}}.",
                "resolved": "2022-02-07",
                "versions": [
                    "2.8.0"
                ],
                "fixVersions": [
                    "2.12.0"
                ]
            },
            {
                "issue_id": "IO-712",
                "project": "Commons IO",
                "title": "SecurityExceptions are hidden instead of breaking the regular flow",
                "type": "Bug",
                "description": "Several points in the code hide SecurityException. These _must_ always _break_ the regular control flow, if you're not the SecurityManager. \r\n\r\nUseCase A: One wants to configure the SecurityManager and grant permissions. Part of the application is to delete a file. If the permission is missing, cleaning does not work. The missing exception does not allow to recognize that.\r\n UseCase B: One has activated the SecurityManager. An attacker abuses the relevant method. The missing SecurityException hides this attempt, ones IDS can't alarm.\r\n UseCase C: One utilizes the SecurityManager to test the system, to ensure every property (like file location) is set properly. The missing SecurityException does not support this UseCase.",
                "resolved": "2022-02-06",
                "versions": [
                    "2.8.0"
                ],
                "fixVersions": []
            },
            {
                "issue_id": "IO-705",
                "project": "Commons IO",
                "title": "MarkShieldInputStream#reset should throw UnsupportedOperationException",
                "type": "Bug",
                "description": "The code of\u00a0MarkShieldInputStream#reset is as follows:\r\n{code:java}\r\n public void reset() throws IOException {\r\n        throw new IOException(\"mark/reset not supported\");\r\n    }\r\n{code}\r\nThe message indicates that it is better to throw\u00a0UnsupportedOperationException. Indeed, otehr classes throw that exception in similar contexts:\r\n\r\nWindowsLineEndingInputStream#mark\r\n{code:java}\r\n public synchronized void mark(final int readlimit) {\r\n        throw new UnsupportedOperationException(\"Mark not supported\");\r\n    }\r\n{code}\r\nNullReader#reset:\r\n{code:java}\r\npublic synchronized void reset() throws IOException {\r\n        if (!markSupported) {\r\n            throw new UnsupportedOperationException(\"Mark not supported\");\r\n        }\r\n        if (mark < 0) {\r\n            throw new IOException(\"No position has been marked\");\r\n        }\r\n        if (position > mark + readlimit) {\r\n            throw new IOException(\"Marked position [\" + mark +\r\n                    \"] is no longer valid - passed the read limit [\" +\r\n                    readlimit + \"]\");\r\n        }\r\n        position = mark;\r\n        eof = false;\r\n    }{code}",
                "resolved": "2021-01-21",
                "versions": [],
                "fixVersions": [
                    "2.9.0"
                ]
            },
            {
                "issue_id": "IO-703",
                "project": "Commons IO",
                "title": "FileUtils.directoryContains shall throw NullPointerException for null inputs",
                "type": "Bug",
                "description": "The code of this method is as follows:\r\n{code:java}\r\n public static boolean directoryContains(final File directory, final File child) throws IOException {        // Fail fast against NullPointerException\r\n        if (directory == null) {\r\n            throw new IllegalArgumentException(\"Directory must not be null\");\r\n        }        if (!directory.isDirectory()) {\r\n            throw new IllegalArgumentException(\"Not a directory: \" + directory);\r\n        }\r\n       ...\r\n}{code}\r\nWhen directory is null, it throws\u00a0IllegalArgumentException, but all the other methods of this class throw NullPointerException:\r\n\r\n\u00a0\r\n{code:java}\r\n   public static void copyToDirectory(final File src, final File destDir) throws IOException {\r\n        if (src == null) {\r\n            throw new NullPointerException(\"Source must not be null\");\r\n        }\r\n ....\r\n}{code}\r\n\u00a0\r\n{code:java}\r\nprivate static void checkFileRequirements(final File src, final File dest) throws FileNotFoundException {\r\n        if (src == null) {\r\n            throw new NullPointerException(\"Source must not be null\");\r\n        }\r\n        if (dest == null) {\r\n            throw new NullPointerException(\"Destination must not be null\");\r\n        }\r\n        if (!src.exists()) {\r\n            throw new FileNotFoundException(\"Source '\" + src + \"' does not exist\");\r\n        }\r\n    }\r\n\r\n{code}",
                "resolved": "2021-02-17",
                "versions": [],
                "fixVersions": [
                    "2.9.0"
                ]
            },
            {
                "issue_id": "IO-702",
                "project": "Commons IO",
                "title": "FileUtils.forceDelete does not delete invalid links",
                "type": "Bug",
                "description": "The current implementation of FileUtils.forceDelete does not delete invalid links. Invalid links means one pointing to a non existing directory. This is _not related_ to the intended behaviour to _keep the destination_ of the link.\r\n\r\nThe FileUtils.cleanDirectory is based on forceDelete but does not check the result. FileUtils.cleanDirectory assumes \"no exception\" means \"directory is clean\".\r\n\r\nFileUtils.deleteDirectory fails with \"directory not empty\".\r\n\r\nTestcase result (will provide that)\r\n{code:java}\r\njava.nio.file.DirectoryNotEmptyException: /tmp/junit4962570063696933090/realParentDirC\r\n\tat java.base/sun.nio.fs.UnixFileSystemProvider.implDelete(UnixFileSystemProvider.java:246)\r\n\tat java.base/sun.nio.fs.AbstractFileSystemProvider.delete(AbstractFileSystemProvider.java:105)\r\n\tat java.base/java.nio.file.Files.delete(Files.java:1146)\r\n\tat org.apache.commons.io.FileUtils.delete(FileUtils.java:1173)\r\n\tat org.apache.commons.io.FileUtils.deleteDirectory(FileUtils.java:1192)\r\n\tat org.apache.commons.io.FileUtilsDeleteDirectoryBaseTestCase.testDeleteInvalidLinks(FileUtilsDeleteDirectoryBaseTestCase.java:216)\r\n{code}",
                "resolved": "2021-01-16",
                "versions": [
                    "2.8.0"
                ],
                "fixVersions": [
                    "2.9.0"
                ]
            },
            {
                "issue_id": "IO-701",
                "project": "Commons IO",
                "title": "PathUtils.setReadOnly do not deal with LinuxDosFileAttributeView",
                "type": "Bug",
                "description": "PathUtils.setReadOnly use a DosFileAttributeView first. If this fails with a Exception, a second try with PosixFileAttributeView will not be done.\r\n\r\nThe approach is to catch a IOException (java.nio.file.FileSystemException Operation not supported), add it to a exception list. Throw the exception list if not empty.\r\n\r\nPlease check the environment of this bug: integration tests are all run on Ubuntu. This occured on Fedora. (Maybe the difference is ext4 ?)\r\n\r\nExample stacktrace (Message is \"Operation not supported\")\r\n{code:java}\r\njava.nio.file.FileSystemException: /tmp/junit4674316189874192997/file1-test.txt: Die Operation wird nicht unterst\u00fctzt\r\n\tat java.base/sun.nio.fs.UnixException.translateToIOException(UnixException.java:100)\r\n\tat java.base/sun.nio.fs.UnixException.rethrowAsIOException(UnixException.java:111)\r\n\tat java.base/sun.nio.fs.UnixException.rethrowAsIOException(UnixException.java:116)\r\n\tat java.base/sun.nio.fs.LinuxDosFileAttributeView.updateDosAttribute(LinuxDosFileAttributeView.java:278)\r\n\tat java.base/sun.nio.fs.LinuxDosFileAttributeView.setReadOnly(LinuxDosFileAttributeView.java:191)\r\n\tat org.apache.commons.io.file.PathUtils.setReadOnly(PathUtils.java:876)\r\n\tat org.apache.commons.io.file.PathUtils.deleteFile(PathUtils.java:486)\r\n\tat org.apache.commons.io.file.PathUtils.delete(PathUtils.java:393)\r\n\tat org.apache.commons.io.FileUtils.forceDelete(FileUtils.java:1337)\r\n\tat org.apache.commons.io.FileUtils.cleanDirectory(FileUtils.java:303)\r\n\tat org.apache.commons.io.FileUtils.deleteDirectory(FileUtils.java:1189)\r\n\tat org.apache.commons.io.FileUtilsTestCase.setUp(FileUtilsTestCase.java:299)\r\n{code}",
                "resolved": "2021-01-15",
                "versions": [
                    "2.8.0"
                ],
                "fixVersions": [
                    "2.9.0"
                ]
            },
            {
                "issue_id": "IO-700",
                "project": "Commons IO",
                "title": "Add FileUtils.moveFile(srcFile, dstFile, CopyOption...)",
                "type": "Bug",
                "description": "The current implementation 2.8.0 throws an Exception, if moveFiles or copyFiles (with preserveFileDate=true) cannot update the lastModifiedDate. This was not the case in 2.6.\r\n\r\n\u00a0\r\n\r\nFor FileUtils.moveFile the copyFile(File, File) method is used, which results in a copy with preserveFileDate=true. Could you provide a method overload to moveFile similiar to copyFile.\r\n\r\n\u00a0\r\n{code:java}\r\npublic static void moveFile(final File srcFile, final File destFile) throws IOException {\r\n  moveFile(srcFile, destFile, true);\r\n}\r\n\r\npublic static void moveFile(final File srcFile, final File destFile, boolean preserveFileDate) throws IOException {\r\n  ...\r\n  copyFile(srcFile, destFile, preserveFileDate);\r\n}\r\n\r\n{code}\r\n\u00a0\r\n\r\n(We have a cifs mount where the server is not allowing the update)",
                "resolved": "2021-01-12",
                "versions": [
                    "2.8.0"
                ],
                "fixVersions": [
                    "2.9.0"
                ]
            },
            {
                "issue_id": "IO-699",
                "project": "Commons IO",
                "title": "Wrong logging in FileUtils.setLastModified",
                "type": "Bug",
                "description": "We run into a small issue with FileUtils.copyDirectory(File srcDir, File destDir).\r\n\r\n\u00a0\r\n\r\nThe javadoc is wrong, setting preserveFileDate=true will now result in an IOException if the operation fails. Issue IO-695 already exists for that.\r\n\r\n\u00a0\r\n\r\norg.apache.commons.io.FileUtils.setLastModified(File, File) sets the lastModified of the targetFile, but the IOException logs \"failed setLastModified on *sourceFile*\".\r\n\r\nThe setter failed on targetFile - so it should log the *targetFile*?",
                "resolved": "2021-01-11",
                "versions": [
                    "2.8.0"
                ],
                "fixVersions": []
            },
            {
                "issue_id": "IO-697",
                "project": "Commons IO",
                "title": "IOUtils.toByteArray size validation does not match documenation.",
                "type": "Bug",
                "description": "According to the javadoc, \"throws IOException ... or InputStream size differ from parameter size.\r\n\r\nI read that as the passed in parameter size must exactly match the length of data represented by the InputStream. However, the current implementation will:\r\n* Throw an exception if size parameter is larger than the InputStream\r\n* Work as expected if size parameter matches size of InputStream\r\n* *Return a byte array only containing up-to size parameter when InputStream is larger than size parameter. No exception is thrown*.\r\n\r\nWhat is the actual intention of the method? What the javadoc says, or what the implementation is currently doing?\r\n\r\n\u00a0\r\n{code:java}\r\n/**\r\n * Gets the contents of an <code>InputStream</code> as a <code>byte[]</code>.\r\n * Use this method instead of <code>toByteArray(InputStream)</code>\r\n * when <code>InputStream</code> size is known\r\n *\r\n * @param input the <code>InputStream</code> to read from\r\n * @param size the size of <code>InputStream</code>\r\n * @return the requested byte array\r\n * @throws IOException              if an I/O error occurs or <code>InputStream</code> size differ from parameter\r\n * size\r\n * @throws IllegalArgumentException if size is less than zero\r\n * @since 2.1\r\n */\r\npublic static byte[] toByteArray(final InputStream input, final int size) throws IOException {code}",
                "resolved": "2022-03-25",
                "versions": [
                    "2.8.0"
                ],
                "fixVersions": [
                    "2.12.0"
                ]
            },
            {
                "issue_id": "IO-696",
                "project": "Commons IO",
                "title": "IOUtils.toByteArray throws inconsistent exceptions",
                "type": "Bug",
                "description": "The code of this method is as follows:\r\n{code:java}\r\npublic static byte[] toByteArray(final InputStream input, final int size) throws IOException {        \r\n\r\n      if (size < 0) {\r\n            throw new IllegalArgumentException(\"Size must be equal or greater than zero: \" + size);\r\n        }        if (size == 0) {\r\n            return new byte[0];\r\n        }        final byte[] data = new byte[size];\r\n        int offset = 0;\r\n        int read;        while (offset < size && (read = input.read(data, offset, size - offset)) != EOF) {\r\n            offset += read;\r\n        }        \r\n        if (offset != size) {\r\n            throw new IOException(\"Unexpected read size. current: \" + offset + \", expected: \" + size);\r\n        }        return data;\r\n    }\r\n{code}\r\nWhen size is below zero, it throws\u00a0IllegalArgumentException, but when size is not equal to offset, it throws\u00a0IOException. It is somewhat confusing. It shall throw\u00a0IOException in both cases, in that both cases check legal sizes.\u00a0",
                "resolved": "2021-02-15",
                "versions": [],
                "fixVersions": [
                    "2.9.0"
                ]
            },
            {
                "issue_id": "IO-695",
                "project": "Commons IO",
                "title": "Exception while there should be none in copyFile",
                "type": "Bug",
                "description": "{{public static void copyFile(final File srcFile, final File destFile, final boolean preserveFileDate)}} java doc says: \"If the modification operation fails, no indication is provided\", yet the method raises an {{IOException}} \"Failed setLastModified on ...\".",
                "resolved": "2021-01-19",
                "versions": [
                    "2.8.0"
                ],
                "fixVersions": []
            },
            {
                "issue_id": "IO-694",
                "project": "Commons IO",
                "title": "Behaviour change in FileUtils.copyDirectory() file last modified date/times preservation",
                "type": "Bug",
                "description": "API documentation for FileUtils.copyDirectory() says:\r\n{quote}Note: This method tries to preserve the files' last modified date/times using File.setLastModified(long), however it is not guaranteed that those operations will succeed. If the modification operation fails, *no indication is provided*.\r\n{quote}\r\n(bold emphasis added)\r\n\r\nIn version 2.7 the \"no indication is provided\" part is true - if the last modified date/times could not changed, then the FileUtils.copyDirectory() will still succeed.\r\n\r\nIn version 2.8.0, if the last modified date/times could not changed, then the FileUtils.copyDirectory() will throw an IOException. However, the API documentation is not updated, so the documentation and the implementation are inconsistent.\r\n\r\nThe behaviour change in 2.8.0 can be traced to commit b99b3f9f484074454c6d67ec658a4e0e8555ffd2 (Throw an IOException if calling setLastModified() fails.).\r\n\r\nPlease do *one* of the following:\r\n * Update the documentation to say that an IOException will be thrown.\r\n * Revert the implementation to the previous behaviour.\r\n\r\nThanks.",
                "resolved": "2020-12-11",
                "versions": [
                    "2.8.0"
                ],
                "fixVersions": [
                    "2.9.0"
                ]
            },
            {
                "issue_id": "IO-692",
                "project": "Commons IO",
                "title": "PathUtils delete throws an exception when deleting a symlink that points to a file that does not exist",
                "type": "Bug",
                "description": "*PathUtils.delete* throws an Exception when deleting a symlink to a file that doesn't exist, in our case this was when the files were deleted out of sequence.\r\n\r\nMinimal reproducing code running as a unit test (scala). This creates a symlink to a fail that does not exist at all.\r\n{code:java}\r\nval file = Files.createSymbolicLink(\r\n  Paths.get(\"target\", \"x.txt\"),\r\n  Paths.get(\"target\",  \"y.txt\").toAbsolutePath,\r\n)\r\nPathUtils.delete(file)\r\n{code}\r\nThis throws the following exception\r\n{noformat}\r\n[error]    java.nio.file.NoSuchFileException: target/x.txt (UnixException.java:86)\r\n[error] sun.nio.fs.UnixException.translateToIOException(UnixException.java:86)\r\n[error] sun.nio.fs.UnixException.rethrowAsIOException(UnixException.java:102)\r\n[error] sun.nio.fs.UnixException.rethrowAsIOException(UnixException.java:107)\r\n[error] sun.nio.fs.UnixFileAttributeViews$Basic.readAttributes(UnixFileAttributeViews.java:55)\r\n[error] sun.nio.fs.UnixFileSystemProvider.readAttributes(UnixFileSystemProvider.java:144)\r\n[error] org.apache.commons.io.file.PathUtils.deleteFile(PathUtils.java:361)\r\n[error] org.apache.commons.io.file.PathUtils.delete(PathUtils.java:304)\r\n[error] org.apache.commons.io.file.PathUtils.delete(PathUtils.java:280){noformat}\r\nThe offending code is this in\u00a0*PathUtils*\r\n{code:java}\r\npublic static PathCounters deleteFile(final Path file, final DeleteOption... options) throws IOException {\r\n    // Files.deleteIfExists() never follows links, so use LinkOption.NOFOLLOW_LINKS in other calls to Files.\r\n    if (Files.isDirectory(file, LinkOption.NOFOLLOW_LINKS)) {\r\n        throw new NoSuchFileException(file.toString());\r\n    }\r\n    final PathCounters pathCounts = Counters.longPathCounters();\r\n    final boolean exists = Files.exists(file, LinkOption.NOFOLLOW_LINKS);\r\n    final long size = exists ? Files.size(file) : 0;\r\n    if (overrideReadOnly(options) && exists) {\r\n        setReadOnly(file, false, LinkOption.NOFOLLOW_LINKS);\r\n    }\r\n    if (Files.deleteIfExists(file)) {\r\n        pathCounts.getFileCounter().increment();\r\n        pathCounts.getByteCounter().add(size);\r\n    }\r\n    return pathCounts;\r\n}\r\n{code}\r\nThis manifests because\u00a0\r\n{code:java}\r\nFiles.exists(file, LinkOption.NOFOLLOW_LINKS); // this always returns true if the symlink exists\r\n\r\nFiles.size(file) // this throws an exception because there is no file to check the size of{code}\r\nA guess at the solution would be to only check the size if the file exists and is not a symlink\r\n{code:java}\r\nfinal long size = exists && !Files.isSymbolicLink() ? Files.size(file) : 0;{code}\r\nThis was discovered when using *FileUtils.deleteDirectory*\u00a0where we have a structure like the following. We clean up these directories when the process finishes, since upgrading to 2.8.0 this fails if the parent directory is deleted before the child.\r\n{code:java}\r\n work_dir/\r\n   parent_dir/\r\n     big_file.txt\r\n   child_dir/\r\n     symlink_to_big_file.txt{code}\r\nAs a work around using\u00a0*PathUtils.deleteDirectory* seems to work regardless of the deletion order\r\n\r\n\u00a0",
                "resolved": "2020-12-06",
                "versions": [
                    "2.8.0"
                ],
                "fixVersions": [
                    "2.9.0"
                ]
            },
            {
                "issue_id": "IO-691",
                "project": "Commons IO",
                "title": "IOUtils copyLarge gives incorrect result with buffered stream and zip file",
                "type": "Bug",
                "description": "I run the following code\u00a0\r\n\r\n\u00a0\r\n{code:java}\r\nimport org.apache.commons.io.IOUtils;\r\n\r\nimport java.io.*;\r\n\r\nclass Scratch {\r\n\r\n    public static void main(String[] args) throws IOException {\r\n        String oldFilePath = \"your_path/test.zip\";\r\n        String newFilePath = \"your_path/new_zip.zip\";\r\n        InputStream inputStream = new FileInputStream(oldFilePath);\r\n\r\n        File file = new File(newFilePath);\r\n        file.createNewFile();\r\n\r\n        IOUtils.copyLarge(inputStream, new BufferedOutputStream(new FileOutputStream(file)));\r\n    }\r\n}\r\n\r\n{code}\r\n\r\nI then try to open the new_zip.zip and it is impossible to open, the file is not well copied\r\n\r\nHowever if I remove the BufferedOutputStream as below, the copy works correctly \r\n\r\n {code:java}\r\nimport org.apache.commons.io.IOUtils;\r\n\r\nimport java.io.*;\r\n\r\nclass Scratch {\r\n\r\n    public static void main(String[] args) throws IOException {\r\n        String oldFilePath = \"your_path/test.zip\";\r\n        String newFilePath = \"your_path/new_zip.zip\";\r\n        InputStream inputStream = new FileInputStream(oldFilePath);\r\n\r\n        File file = new File(newFilePath);\r\n        file.createNewFile();\r\n\r\n        IOUtils.copyLarge(inputStream, new FileOutputStream(file));\r\n    }\r\n}\r\n\r\n{code}",
                "resolved": "2020-10-29",
                "versions": [
                    "2.8.0"
                ],
                "fixVersions": []
            },
            {
                "issue_id": "IO-690",
                "project": "Commons IO",
                "title": "IOUtils.toByteArray(null) no longer throws a NullPointerException",
                "type": "Bug",
                "description": "The javadoc for IOUtils.toByteArray still says\r\n\r\n\r\n\r\n{{Throws:}}\r\n{{ NullPointerException - if the input is null}}\r\n\r\n\u00a0\r\n\r\nbut in 2.8.0 it returns an empty byte[] instead.",
                "resolved": "2021-01-18",
                "versions": [
                    "2.8.0"
                ],
                "fixVersions": [
                    "2.9.0"
                ]
            },
            {
                "issue_id": "IO-689",
                "project": "Commons IO",
                "title": "All new FileUtils methods do a useless Instant->ZonedDateTime->Instant roundtrip",
                "type": "Bug",
                "description": "This commit in PR #124 breaks FileUtils with new Java 8 datetime APIs:\r\nhttps://github.com/apache/commons-io/pull/124/commits/2eb549873470844c88681e92c64631f796002020\r\n\r\nBecause of this I had to put all of the methods to the list of blacklisted APIs in Apache Lucene / Solr. The reason for this change is that now all depend on local datetime, there's no way to pass an Instant with a UNIX timestamp through the API without it being corrupted due to forwards/backwards transformation.\r\n\r\nBackground: During DST changes the same local date time exists two times (in autumn, you have in most countries two time the 2:30am time, once before and once after the DST change - because time is rolled back).\r\n\r\nWith the above commit you first convert an Instant (which is by definition just a UNIX timestamp and can be converted as-is to a long) to a local Datetime and then back to an Instant. By this forward/backward transformation you get off by an hour during that one hour in autumn, when DST switches back to standard time.\r\n\r\nPlease revert this commit and release a bugfix.\r\n\r\nThere is no reason to convert an Instant to local and back, the arguments in the PR are plain wrong. Instants are timezoneless and are identical to UNIX timestamps.\r\n\r\nThis commit breaks all new methods, because at the end all new methods go through the \"Instant\" path which does the faulty transformation.",
                "resolved": "2020-09-26",
                "versions": [
                    "2.8.0"
                ],
                "fixVersions": [
                    "2.9.0"
                ]
            },
            {
                "issue_id": "IO-688",
                "project": "Commons IO",
                "title": "CopyUtils deprecation message gives wrong version",
                "type": "Bug",
                "description": "Class CopyUtils.java has a [comment|https://github.com/apache/commons-io/blob/7a26933008ecb89c3ddfdf0703b281c5293b712e/src/main/java/org/apache/commons/io/CopyUtils.java#L106] that says:\r\n\r\n@deprecated Use IOUtils. Will be removed in 2.0.\r\n\r\nIt was not removed in 2.0.\u00a0 Either it should be removed now, or \"2.0\" should be changed to a future release.\r\n\r\n\u00a0",
                "resolved": "2021-01-11",
                "versions": [
                    "2.0",
                    "2.8.0"
                ],
                "fixVersions": [
                    "2.9.0"
                ]
            },
            {
                "issue_id": "IO-686",
                "project": "Commons IO",
                "title": "IOUtils.toByteArray(InputStream) Javadoc does not match code",
                "type": "Bug",
                "description": "According to the code in the v2.8.0 release, passing null to the method should throw an exception, however it is producing an empty byte array instead.\r\n{code:java}\r\n/**\r\n * Gets the contents of an <code>InputStream</code> as a <code>byte[]</code>.\r\n * <p>\r\n * This method buffers the input internally, so there is no need to use a\r\n * <code>BufferedInputStream</code>.\r\n * </p>\r\n *\r\n * @param input the <code>InputStream</code> to read from\r\n * @return the requested byte array\r\n * @throws NullPointerException if the input is null\r\n * @throws IOException          if an I/O error occurs\r\n */\r\npublic static byte[] toByteArray(final InputStream input) throws IOException {\r\n    try (final ByteArrayOutputStream output = new ByteArrayOutputStream()) {\r\n        copy(input, output);\r\n        return output.toByteArray();\r\n    }\r\n} {code}\r\nThis can be recreated by the following:\r\n{code:java}\r\n@Test\r\npublic void shouldThrowNullPointerException() {\r\n    assertThrows(NullPointerException.class, () -> IOUtils.toByteArray((InputStream) null))\r\n} {code}\r\nOn v2.7 the test passes, on v2.8.0 it fails.",
                "resolved": "2021-01-19",
                "versions": [
                    "2.8.0"
                ],
                "fixVersions": [
                    "2.9.0"
                ]
            },
            {
                "issue_id": "IO-684",
                "project": "Commons IO",
                "title": "Add force version of PathUtils.delete() APIs and friends.",
                "type": "Bug",
                "description": "With the changes from IO-629 I'm getting an {{AccessDeniedException}} when trying to recursively delete a directory with read-only files, e.g. a {{.git}} repository. Before this change the directory was successfully deleted. It is due to the difference between {{File.delete()}} and {{Files.delete()}} (see https://stackoverflow.com/a/12234217/3375325).\r\nI think an option should be introduced to make the previous behavior available again with an overloaded method like {{PathUtils.delete(Path path, boolean force)}}.\r\n\r\nStacktrace:\r\n{noformat}\r\njava.nio.file.AccessDeniedException: C:\\Users\\xyz\\AppData\\Local\\Temp\\.git\\objects\\pack\\pack-6576964fbde069f1787513ce358d2260530d5738.idx\r\n\tat sun.nio.fs.WindowsException.translateToIOException(WindowsException.java:83)\r\n\tat sun.nio.fs.WindowsException.rethrowAsIOException(WindowsException.java:97)\r\n\tat sun.nio.fs.WindowsException.rethrowAsIOException(WindowsException.java:102)\r\n\tat sun.nio.fs.WindowsFileSystemProvider.implDelete(WindowsFileSystemProvider.java:269)\r\n\tat sun.nio.fs.AbstractFileSystemProvider.deleteIfExists(AbstractFileSystemProvider.java:108)\r\n\tat java.nio.file.Files.deleteIfExists(Files.java:1165)\r\n\tat org.apache.commons.io.file.DeletingPathVisitor.visitFile(DeletingPathVisitor.java:99)\r\n\tat org.apache.commons.io.file.DeletingPathVisitor.visitFile(DeletingPathVisitor.java:35)\r\n\tat java.nio.file.Files.walkFileTree(Files.java:2670)\r\n\tat java.nio.file.Files.walkFileTree(Files.java:2742)\r\n\tat org.apache.commons.io.file.PathUtils.visitFileTree(PathUtils.java:535)\r\n\tat org.apache.commons.io.file.PathUtils.deleteDirectory(PathUtils.java:265)\r\n\tat org.apache.commons.io.file.PathUtils.delete(PathUtils.java:254)\r\n{noformat}\r\n",
                "resolved": "2020-08-15",
                "versions": [
                    "2.7"
                ],
                "fixVersions": [
                    "2.8.0"
                ]
            },
            {
                "issue_id": "IO-683",
                "project": "Commons IO",
                "title": "CircularBufferInputStream.read() fails to convert byte to unsigned int",
                "type": "Bug",
                "description": "The method int CircularBufferInputStream.read() returns CircularByteBuffer.read() which a byte. \r\n\r\nHowever it does not convert it to an unsigned byte, so byte values outside the range 0-127 will be sign-extended to a negative value.\r\n\r\nThis is wrong, and can result in premature EOF.\r\n\r\nNote: this bug was reported by Sonarlint.\r\nSpotbugs does not appear to detect the bug.",
                "resolved": "2020-08-10",
                "versions": [],
                "fixVersions": [
                    "2.8.0"
                ]
            },
            {
                "issue_id": "IO-679",
                "project": "Commons IO",
                "title": "input.AbstractCharacterFilterReader passes count of chars read to filter, not the filter char",
                "type": "Bug",
                "description": " \u00a0Ran into a bug with\u00a0AbstractCharacterFilterReader where I noticed that my filter was not receiving the actual characters, but was instead receiving an int value corresponding to the number of chars in my input stream buffer.\r\n\r\nI looked at\u00a0the [source file|https://github.com/apache/commons-io/blob/master/src/main/java/org/apache/commons/io/input/AbstractCharacterFilterReader.java]\u00a0and realized that on line 64:\r\n {{if (filter(read)) {}}\r\n should have been:\r\n\r\n{{if (filter(cbuf[readPos])) {}}\r\n\r\n'read` has the number of chars read from the source reader, not the code point of the character read.\r\n\r\nI have attached a sample program that illustrates the issue.\r\n\r\nI can work on a patch and submit it when done. I will add a test case in the patch.\r\n\r\n\u00a0",
                "resolved": "2020-07-29",
                "versions": [
                    "2.7"
                ],
                "fixVersions": [
                    "2.8.0"
                ]
            },
            {
                "issue_id": "IO-677",
                "project": "Commons IO",
                "title": "FileSystem.getCurrent() does not return the correct enum",
                "type": "Bug",
                "description": "FileSystem.getCurrent() does not return the correct enum",
                "resolved": "2020-07-28",
                "versions": [
                    "2.7"
                ],
                "fixVersions": [
                    "2.8.0"
                ]
            },
            {
                "issue_id": "IO-675",
                "project": "Commons IO",
                "title": "InfiniteCircularInputStream throws a divide-by-zero exception when reading if its input buffer is size 0",
                "type": "Bug",
                "description": "{{InfiniteCircularInputStream}} throws a divide-by-zero exception when reading if its input buffer is size 0.\r\n\r\nInstead, we will validate the buffer on construction.",
                "resolved": "2020-07-01",
                "versions": [],
                "fixVersions": [
                    "2.8.0"
                ]
            },
            {
                "issue_id": "IO-674",
                "project": "Commons IO",
                "title": "InfiniteCircularInputStream is not infinite if its input buffer contains -1",
                "type": "Bug",
                "description": "{{InfiniteCircularInputStream}} is not infinite if its input buffer contains -1 since that is the end of stream marker.\r\n\r\nInstead, we will validate the buffer on construction.\r\n\r\n\u00a0",
                "resolved": "2020-07-01",
                "versions": [],
                "fixVersions": [
                    "2.8.0"
                ]
            },
            {
                "issue_id": "IO-672",
                "project": "Commons IO",
                "title": "Copying a File sets last modified date to 01 January 1970",
                "type": "Bug",
                "description": "The behaviour is new in 2.7 and worked in 2.6. I tested it out, by switching the library versions.\r\n\r\nI could not exactly indicate, which call is the cause for the behaviour, but it seems it occurs when a file copy / move is done, using FileUtils.\r\n\r\nAfter copying the file, the destination file has a last modified date of 01.01.1970.\r\n\r\n\u00a0",
                "resolved": "2020-08-06",
                "versions": [
                    "2.7"
                ],
                "fixVersions": []
            },
            {
                "issue_id": "IO-671",
                "project": "Commons IO",
                "title": "Version 2.7 is binary incompatible",
                "type": "Bug",
                "description": "The method org.apache.commons.io.output.ByteArrayOutputStream#toString() has been removed.\r\n\r\n\u00a0\r\n\r\nSee https://github.com/policeman-tools/forbidden-apis/issues/168",
                "resolved": "2020-06-11",
                "versions": [
                    "2.7"
                ],
                "fixVersions": []
            },
            {
                "issue_id": "IO-665",
                "project": "Commons IO",
                "title": "XmlStreamReader throws IOException stream closed on null input stream",
                "type": "Bug",
                "description": "Had to go into the debugger because when some code passed null into the org.apache.commons.io.input.XmlStreamReader constructor it threw an IOException with the message \"Stream closed\". \r\n\r\n\u00a0\r\n\r\nThis is not accurate. There was no stream. It was null. If a NullPointerException had been thrown instead, this would have been easier to debug.\r\n\r\n\u00a0\r\n\r\n\u00a0\r\n\r\n\u00a0",
                "resolved": "2020-04-14",
                "versions": [],
                "fixVersions": [
                    "2.7"
                ]
            },
            {
                "issue_id": "IO-661",
                "project": "Commons IO",
                "title": "FileUtils throws inconsistent exceptions",
                "type": "Bug",
                "description": "The\u00a0FileUtils throws inconsistent exceptions, when an input is not a directory.\u00a0\r\n\r\nThe\u00a0copyFileToDirectory throws\u00a0IllegalArgumentException:\r\n\r\n\u00a0\r\n{code:java}\r\n  public static void copyFileToDirectory(final File srcFile, final File destDir, final boolean preserveFileDate)\r\n            throws IOException {\r\n        if (destDir == null) {\r\n            throw new NullPointerException(\"Destination must not be null\");\r\n        }\r\n        if (destDir.exists() && destDir.isDirectory() == false) {\r\n            throw new IllegalArgumentException(\"Destination '\" + destDir + \"' is not a directory\");\r\n        }\r\n        final File destFile = new File(destDir, srcFile.getName());\r\n        copyFile(srcFile, destFile, preserveFileDate);\r\n    }\r\n\r\n{code}\r\nThe other methods throw\u00a0IOException:\r\n\r\n\u00a0\r\n\r\n\u00a0\r\n{code:java}\r\n public static void moveFileToDirectory(final File srcFile, final File destDir, final boolean createDestDir)\r\n            throws IOException {\r\n        validateMoveParameters(srcFile, destDir);\r\n        if (!destDir.exists() && createDestDir) {\r\n            destDir.mkdirs();\r\n        }\r\n        if (!destDir.exists()) {\r\n            throw new FileNotFoundException(\"Destination directory '\" + destDir +\r\n                    \"' does not exist [createDestDir=\" + createDestDir + \"]\");\r\n        }\r\n        if (!destDir.isDirectory()) {\r\n            throw new IOException(\"Destination '\" + destDir + \"' is not a directory\");\r\n        }\r\n        moveFile(srcFile, new File(destDir, srcFile.getName()));\r\n    }\r\n{code}\r\nI feel that\u00a0IOException is more reasonable. Although the messages are the same, the different exception can cause problems when programmers catch the thrown exceptions.\u00a0\r\n\r\n\u00a0\r\n\r\n\u00a0",
                "resolved": "2021-02-17",
                "versions": [
                    "2.6"
                ],
                "fixVersions": [
                    "2.9.0"
                ]
            },
            {
                "issue_id": "IO-660",
                "project": "Commons IO",
                "title": "How to contribute patch for ByteArrayOutputStream",
                "type": "Bug",
                "description": "I would like to contribute some code to improve ByteArrayOutputStream.\r\n\r\n\u00a0\r\n\r\nAt the moment that class has explicit synchronisation, which impacts its performance when used in single-thread scenarios. I would like to refactor it into an\u00a0AbstractByteArrayOutputStream and provide two implementations, one with sync and one without.\r\n\r\n\u00a0\r\n\r\nI also have a couple of additional utility methods that I would like to add to it...\r\n\r\n\u00a0\r\n\r\nWhat is the best way to start contributing to Commons-IO?",
                "resolved": "2020-08-10",
                "versions": [
                    "2.6"
                ],
                "fixVersions": []
            },
            {
                "issue_id": "IO-646",
                "project": "Commons IO",
                "title": " org.apache.commons.io.FileUtils.writeStringToFile causes crashes on Android 4.2",
                "type": "Bug",
                "description": "Version 2.6 causes the following crash on Android 4.2 (probably on versions lower than 4.2 too)\r\n\r\n{{java.lang.NoClassDefFoundError: \r\n  at org.apache.commons.io.Charsets.<clinit> (Charsets.java:120)\r\n  at org.apache.commons.io.FileUtils.writeStringToFile (FileUtils.java:2035)\r\n  at org.apache.commons.io.FileUtils.writeStringToFile (FileUtils.java:1999)}}\r\n\r\n{{}}\r\n\r\n{{}}Version 2.5 works flawlessly",
                "resolved": "2020-08-08",
                "versions": [
                    "2.6"
                ],
                "fixVersions": []
            },
            {
                "issue_id": "IO-644",
                "project": "Commons IO",
                "title": "NPE in org.apache.commons.io.FileUtils.contentEqualsIgnoreEOL(File, File) when only one input is null",
                "type": "Bug",
                "description": "NPE in org.apache.commons.io.IOUtils.contentEquals(Reader, Reader) when only one input is null",
                "resolved": "2019-11-25",
                "versions": [],
                "fixVersions": [
                    "2.7"
                ]
            },
            {
                "issue_id": "IO-643",
                "project": "Commons IO",
                "title": "NPE in org.apache.commons.io.FileUtils.contentEquals(File, File) when only one input is null",
                "type": "Bug",
                "description": "NPE in org.apache.commons.io.IOUtils.contentEquals(Reader, Reader) when only one input is null",
                "resolved": "2019-11-25",
                "versions": [],
                "fixVersions": [
                    "2.7"
                ]
            },
            {
                "issue_id": "IO-642",
                "project": "Commons IO",
                "title": "NPE in org.apache.commons.io.IOUtils.contentEqualsIgnoreEOL(Reader, Reader) when only one input is null",
                "type": "Bug",
                "description": "NPE in org.apache.commons.io.IOUtils.contentEquals(Reader, Reader) when only one input is null",
                "resolved": "2019-11-25",
                "versions": [],
                "fixVersions": [
                    "2.7"
                ]
            },
            {
                "issue_id": "IO-641",
                "project": "Commons IO",
                "title": "NPE in org.apache.commons.io.IOUtils.contentEquals(Reader, Reader) when only one input is null",
                "type": "Bug",
                "description": "NPE in org.apache.commons.io.IOUtils.contentEquals(Reader, Reader) when only one input is null",
                "resolved": "2019-11-25",
                "versions": [],
                "fixVersions": [
                    "2.7"
                ]
            },
            {
                "issue_id": "IO-640",
                "project": "Commons IO",
                "title": "NPE in org.apache.commons.io.IOUtils.contentEquals(InputStream, InputStream) when only one input is null",
                "type": "Bug",
                "description": "NPE in\u00a0{{org.apache.commons.io.IOUtils.contentEquals(InputStream, InputStream)}} when only one input is {{null}}.",
                "resolved": "2019-11-25",
                "versions": [],
                "fixVersions": [
                    "2.7"
                ]
            },
            {
                "issue_id": "IO-638",
                "project": "Commons IO",
                "title": "Infinite loop in CharSequenceInputStream.read for 4-byte characters with UTF-8 and 3-byte buffer.",
                "type": "Bug",
                "description": "In the constructor of `CharSequenceInputStream` there is the following code to ensure the buffer is large enough to hold one character:\r\n\r\n\r\n{code:java}\r\n // Ensure that buffer is long enough to hold a complete character   \r\nfinal float maxBytesPerChar = encoder.maxBytesPerChar();      \r\nif (bufferSize < maxBytesPerChar) {\r\n    throw new IllegalArgumentException(\"Buffer size \" + bufferSize + \" is less than maxBytesPerChar \" +\r\n    maxBytesPerChar);\r\n}\r\n{code}\r\nHowever, for UTF-8, `maxBytesPerChar` returns 3.0 not 4.0, even though some characters (such as emoji) require 4 bytes to encode.\u00a0 As a result you can create a `CharSequenceInputStream` with a buffer size of 3, but when attempting to fill the buffer, `CharsetEncoder.encode` will succeed with an OVERFLOW result without actually writing anything to buffer if attempting to encode a 4 byte character. This in turn results in an infinite loop in read methods, since the buffer never actually gets anything written to it.\r\n\r\n\u00a0\r\n\r\nNOTE: as I understand it, the reason the encoder returns 3 and not 4 is because 3 is the maximum number of byte that a single java `char` can represent, since a 4 byte encoding in UTF-8 would require two a surragate pair of two `char`s.\r\n\r\n\u00a0\r\n\r\nThis is may be a problem for other encodings as well, but I've only tested it for utf-8.\r\n\r\n\u00a0\r\n\r\nRequiring the buffer to be at least twice the maxBytesPerChar would ensure this doesn't happen.",
                "resolved": "2021-09-26",
                "versions": [
                    "2.6"
                ],
                "fixVersions": [
                    "2.12.0"
                ]
            },
            {
                "issue_id": "IO-637",
                "project": "Commons IO",
                "title": "Technical Support Expiration Date",
                "type": "Bug",
                "description": "Hello,\r\n\r\nI work for a long-term project which requires strong and stable technical support for every software used.\r\n\r\nI want to know how long you are providing technical support for Commons-io 2.1.\r\n\r\nPlease I appreciate so much that you can give me expiration dates for this software product or expectations of its EOL.\r\n\r\nThank you!\r\n Sergi",
                "resolved": "2020-08-08",
                "versions": [
                    "2.1"
                ],
                "fixVersions": []
            },
            {
                "issue_id": "IO-626",
                "project": "Commons IO",
                "title": "A mistake in the FilenameUtils.concat()'s Javadoc about an absolute path.",
                "type": "Bug",
                "description": "Javadoc\r\n/foo/a/ + ../bar --> foo/bar\r\n\r\nSystem.out.println(FilenameUtils.concat(\"/foo/a/\", \"../bar\"));\r\n/foo/a/ + ../bar --> /foo/bar\r\n\r\n\u00a0",
                "resolved": "2021-01-18",
                "versions": [],
                "fixVersions": [
                    "2.7"
                ]
            },
            {
                "issue_id": "IO-625",
                "project": "Commons IO",
                "title": "FileUtils.copyDirectoryToDirectory does not reflect srcDir in exception message when srcDir is not a directory",
                "type": "Bug",
                "description": "When srcDir parameter to FileUtils.copyDirectoryToDirectory method is not a directory, exception message contains destDir instead of srcDir.\r\n\r\nRelated issue is, that based on Javadocs one would expect IOException instead of IllegalArgumentException. Changing type of the exception would probably break some clients. Fixing message seems reasonable.",
                "resolved": "2019-09-08",
                "versions": [
                    "2.6"
                ],
                "fixVersions": [
                    "2.7"
                ]
            },
            {
                "issue_id": "IO-624",
                "project": "Commons IO",
                "title": "IOUtils.writeLines updating incompatible issue",
                "type": "Bug",
                "description": "Hi,\r\n\r\nThe following code snippets throw an incompatible issue when I try to rolling update Commons-io from 2.2 to 2.6.\r\n\r\n{code:java}\r\n@Test\r\npublic void test() throws IOException{\r\n\t\r\n\tFile TestFile = new File( \"test.txt\" );\r\n\tOutputStream out = null;\r\n\tList<String> lines = Arrays.asList(\"a\",\"b\",\"c\");\r\n    try {\r\n        out = new FileOutputStream(TestFile, true);\r\n        IOUtils.writeLines(lines, null, out, null);\r\n    } finally {\r\n        IOUtils.closeQuietly(out);\r\n    }\r\n{code}\r\n\r\n\r\nIt throws an error:\r\n{code:java}\r\nerror: reference to writeLines is ambiguous\r\n{code}",
                "resolved": "2020-08-09",
                "versions": [
                    "2.6"
                ],
                "fixVersions": []
            },
            {
                "issue_id": "IO-623",
                "project": "Commons IO",
                "title": "IOUtils.lineIterator updating incompatible issue",
                "type": "Bug",
                "description": "Hi,\r\n\r\nThe following code snippets throw an incompatible issue when I try to rolling update Commons-io from 2.1 to 2.6.\r\n\r\n\r\n{code:java}\r\n// Some comments here\r\n@Test\r\npublic void Test() throws IOException{\r\n\tLineIterator iter = IOUtils.lineIterator (getClass ().getResourceAsStream (\"/tmp/test.txt\"), null);\r\n}\r\n{code}\r\n\r\nIt throws an error:\r\n\r\n{code:java}\r\nreference to lineIterator is ambiguous\r\n[ERROR] both method lineIterator(java.io.InputStream,java.nio.charset.Charset) in org.apache.commons.io.IOUtils and method lineIterator(java.io.InputStream,java.lang.String) in org.apache.commons.io.IOUtils match\r\n{code}\r\n",
                "resolved": "2020-08-09",
                "versions": [
                    "2.6"
                ],
                "fixVersions": []
            },
            {
                "issue_id": "IO-622",
                "project": "Commons IO",
                "title": "FileUtils.readLines incompatible issue",
                "type": "Bug",
                "description": "Hi,\r\n\r\nThe following code snippets throw an incompatible issue when I try to rolling update Commons IO to 2.6. It works well before 2.3.\r\n\r\n\r\n{code:java}\r\n@Test\r\npublic void DemoTest(){\r\n\r\n\tList<String> l = new ArrayList();\r\n\tFile TestFile = new File(\"TestFile\");\r\n\ttry {\r\n\t    l.addAll(org.apache.commons.io.FileUtils.readLines(TestFile, null));\r\n\t} catch (IOException e) {\r\n\t    e.printStackTrace();\r\n\t}\r\n}\r\n{code}\r\n\r\nThanks a lot.\r\n\r\n",
                "resolved": "2020-08-10",
                "versions": [
                    "2.3",
                    "2.4",
                    "2.5",
                    "2.6"
                ],
                "fixVersions": []
            },
            {
                "issue_id": "IO-621",
                "project": "Commons IO",
                "title": "Updating source incompatible issue",
                "type": "Bug",
                "description": "Hi,\r\n\r\nThe following code snippets throw an incompatible issue when I try to rolling update Commons IO from 2.4 to 2.6.\r\n\r\n{code:java}\r\n@Test\r\npublic void DemoTest(){\r\n\t\r\n    LineIterator it = null;\r\n    File TestFile = new File(\"TestFile\");\r\n    try {\r\n        it = FileUtils.lineIterator(TestFile , \"UTF-8\");\r\n        while (it.hasNext()) {\r\n            String line = it.nextLine();\r\n        }\r\n    } catch (IOException e) {\r\n        e.printStackTrace();\r\n    } finally {\r\n        if (it != null)\r\n            it.close();\r\n    }\r\n}\r\n{code}\r\n\r\n\r\nThanks a lot.",
                "resolved": "2019-09-08",
                "versions": [
                    "2.6"
                ],
                "fixVersions": []
            },
            {
                "issue_id": "IO-620",
                "project": "Commons IO",
                "title": "FileUtils.writeStringToFile does not close() stream",
                "type": "Bug",
                "description": "FileUtils.writeStringToFile() method does not close the OutputStream.\u00a0 This can lead to running out of file descriptors, inability to write to the file a second time (Windows), and unpredictable file contents (Unix).\r\n\r\n\u00a0\u00a0\u00a0 public static void writeStringToFile(final File file, final String data, final Charset encoding,\r\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 final boolean append) throws IOException {\r\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 try (OutputStream out = openOutputStream(file, append)) {\r\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 IOUtils.write(data, out, encoding);\r\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 }\r\n\u00a0\u00a0\u00a0 }\r\n\r\n\u00a0\r\n\r\nThe stream is closed in version 2.5, but not in 2.6.\u00a0 It may have been introduced on the following commit:\r\n\r\nhttps://github.com/apache/commons-io/commit/4dc97b64005f0083b2facaa70f661138a4fa3fc0#diff-5999114d4c52063bbe7063696cf20215",
                "resolved": "2019-08-13",
                "versions": [
                    "2.6"
                ],
                "fixVersions": []
            },
            {
                "issue_id": "IO-609",
                "project": "Commons IO",
                "title": "FileUtils.copyToFile backward incompatibility bug",
                "type": "Bug",
                "description": "Hi,\r\n\r\nThe following code snippets throw an IOException: Stream closed. It works well before commons-io 2.6. When I update commons-io to 2.6, it failed. There is a backward incompatibility bug behind it.\r\n\r\nThe function code:\r\n\r\n{code:java}\r\npublic class Demo {\r\n\t  private void backupFile(String srcPath, String entryPath, ZipOutputStream stream) throws IOException {\r\n\t\t    ZipEntry zipEntry = new ZipEntry(entryPath);\r\n\t\t    stream.putNextEntry(zipEntry);\r\n\t\t    Files.copy(Paths.get(srcPath), stream);\r\n\t\t  }\r\n\t  private void backupDir(String srcDir, String dstDir, ZipOutputStream stream) throws IOException {\r\n\t\t    File dir = new File(srcDir);\r\n\t\t    for (String path : dir.list()) {\r\n\t\t      System.out.println(path);\r\n\t\t      backupFile(dir.getAbsolutePath() + File.separator + path, dstDir + File.separator + path, stream);\r\n\t\t    }\r\n\t\t  }\r\n\t  public void backup(String name) throws IOException {\r\n\t\t      Files.createDirectories(Paths.get(\"/Users/chenlingchao/eclipse_projects/workspace/BBI.BugDetection\"));\r\n\t\t      ZipOutputStream stream = new ZipOutputStream(\r\n\t\t          Files.newOutputStream(Paths.get(\"/Users/chenlingchao/eclipse_projects/workspace/BBI.BugDetection/tmp\" + File.separator + name)));\r\n\t\t      try {\r\n\t\t        backupDir(\"/Users/chenlingchao/eclipse_projects/workspace/BBI.BugDetection/tmp\", \"meta\" + File.separator + \"tables\", stream);\r\n\t\t        stream.closeEntry();\r\n\t\t      } finally {\r\n\t\t        stream.close();\r\n\t\t      }\r\n\t\t    }\r\n\t  \r\n\t  public void restore(String name) throws IOException {\r\n\t\t      ZipInputStream stream = new ZipInputStream(\r\n\t\t          Files.newInputStream(Paths.get(\"/Users/chenlingchao/eclipse_projects/workspace/BBI.BugDetection/tmp\" + File.separator + name)));\r\n\t\t      try {\r\n\t\t        ZipEntry entry;\r\n\t\t        while ((entry = stream.getNextEntry()) != null) {\r\n\t\t          FileUtils.copyToFile(stream, new File(\"/Users/chenlingchao/eclipse_projects/workspace/BBI.BugDetection/tmp\" + File.separator + entry.getName()));\r\n\t\t        }\r\n\t\t      } finally {\r\n\t\t        stream.close();\r\n\t\t      }\r\n\t\t  }\r\n}\r\n{code}\r\n\r\nThe test code:\r\n\r\n{code:java}\r\n\t@Test\r\n\tpublic void TestDemo() throws IOException{\r\n    Demo test = new Demo();\r\n    test.backup(\"test.zip\");\r\n    test.restore(\"test.zip\");\r\n\t}\r\n\t\r\n{code}\r\n\r\n",
                "resolved": "2022-06-23",
                "versions": [
                    "2.6"
                ],
                "fixVersions": []
            },
            {
                "issue_id": "IO-606",
                "project": "Commons IO",
                "title": "FilenameUtils.concat fails with relative path",
                "type": "Bug",
                "description": "{{FilenameUtils.concat(\"../../../../src/test/resources/\", \"filename.xml\")}}\r\n\r\nreturns {{null}}, where expected result should be like\r\n\r\n{{../../../../src/test/resources/filename.xml}}",
                "resolved": "2022-06-23",
                "versions": [
                    "2.6"
                ],
                "fixVersions": []
            },
            {
                "issue_id": "IO-604",
                "project": "Commons IO",
                "title": "FileUtils.doCopyFile(File, File, boolean) can throw ClosedByInterruptException",
                "type": "Bug",
                "description": "The method {{FileUtils.doCopyFile(File, File, boolean)}} can throw {{ClosedByInterruptException}} apparently randomly:\r\n{noformat}\r\nThread [main] (Suspended (entry into method <init> in ClosedByInterruptException))\u00a0\u00a0\r\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 owns: Object\u00a0 (id=405)\u00a0\r\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 owns: AbstractComponentSubManager$3\u00a0 (id=406)\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\r\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 owns: RunnableLock\u00a0 (id=407)\u00a0\u00a0\r\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 ClosedByInterruptException.<init>() line: 51\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\r\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 FileChannelImpl(AbstractInterruptibleChannel).end(boolean) line: 202\u00a0\r\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 FileChannelImpl.size() line: 315\r\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 FileUtils.doCopyFile(File, File, boolean) line: 1145\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\r\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 FileUtils.copyFile(File, File, boolean) line: 1088\u00a0\u00a0\r\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 FileUtils.copyFile(File, File) line: 1040\u00a0\u00a0\u00a0\u00a0\u00a0\r\n... Stack frames from my app...\r\n{noformat}\r\nI want to workaround this by updating {{doCopyFile}} to use Java 7's {{Files.copy(Path,Path,CopyOptions)}} API.",
                "resolved": "2019-04-05",
                "versions": [],
                "fixVersions": [
                    "2.7"
                ]
            },
            {
                "issue_id": "IO-602",
                "project": "Commons IO",
                "title": "listFiles(File directory, IOFileFilter fileFilter, IOFileFilter dirFilter) does not recurse into subdirectories",
                "type": "Bug",
                "description": "Calling FileUtils.listFiles (someDir, TrueFileFilter.INSTANCE, TrueFileFilter.INSTANCE) will only return top level files.\r\n\r\nThis contradicts the documentation that says the list should walk the file tree.",
                "resolved": "2019-02-15",
                "versions": [
                    "2.0",
                    "2.0.1",
                    "2.1",
                    "2.2",
                    "2.3",
                    "2.4",
                    "2.5",
                    "2.6"
                ],
                "fixVersions": []
            },
            {
                "issue_id": "IO-600",
                "project": "Commons IO",
                "title": "getPrefixLength returns wrong length on linux for filename \"C:\"",
                "type": "Bug",
                "description": "On most unix filesystems only null byte and / are reserved characters. So its perfectly valid to have a file called \"C:\".\r\n\r\nIf the getPrefixLength method is called for the path of such a file then it returns 2 whereas the expected value is 0.",
                "resolved": "2020-12-31",
                "versions": [
                    "2.6"
                ],
                "fixVersions": [
                    "2.9.0"
                ]
            },
            {
                "issue_id": "IO-597",
                "project": "Commons IO",
                "title": "FileUtils.iterateFiles goes out of memory when executed for a directory with large number of files",
                "type": "Bug",
                "description": "FileUtils.iterateFiles goes out of memory when executed for a directory with large number of files because it uses the listFiles method which returns an array of java.io.File objects. The iterator itself should not be derived from a list but from a Java Stream which will have lesser memory footprint. This feature however can be used only with Java 8 or later because streams were introduced only in Java 8.",
                "resolved": "2021-02-17",
                "versions": [],
                "fixVersions": [
                    "2.9.0"
                ]
            },
            {
                "issue_id": "IO-594",
                "project": "Commons IO",
                "title": "Add IOUtils copy methods with java.lang.Appendable as the target",
                "type": "Bug",
                "description": "Add {{IOUtils}} {{copy()}} methods with {{java.lang.Appendable}} as the target:\r\n\r\n* {{org.apache.commons.io.IOUtils.copy(Reader, Appendable)}}\r\n* {{org.apache.commons.io.IOUtils.copy(Reader, Appendable, CharBuffer)}}",
                "resolved": "2018-12-08",
                "versions": [],
                "fixVersions": [
                    "2.7"
                ]
            },
            {
                "issue_id": "IO-593",
                "project": "Commons IO",
                "title": "copyToFile incorrectly closes input stream",
                "type": "Bug",
                "description": "h3. Description of the Problem\r\n\r\nFileUtils.copyToFile is supposed to _not_ close the input stream. According to the documentation:\u00a0\r\n{quote}The \\{@code source} stream is left open, e.g. for use with \\{@link java.util.zip.ZipInputStream ZipInputStream}.\r\n{quote}\r\nIn 2.5 [FileUtils.java:1551-1559|https://github.com/apache/commons-io/blob/commons-io-2.5/src/main/java/org/apache/commons/io/FileUtils.java#L1551-L1559] this\u00a0was implemented correctly.\u00a0In 2.6\u00a0[FileUtils.java:1528-1531|https://github.com/apache/commons-io/blob/commons-io-2.6-RC3/src/main/java/org/apache/commons/io/FileUtils.java#L1528-L1531]\u00a0the source stream is used in a try-with-resources block, which incorrectly closes the\u00a0input stream at the end of the block.\r\n----\r\nh3. How to Reproduce?\r\n\r\nWe discovered this bug in the following code:\r\n{code:java}\r\ntry (JarInputStream jarStream = new JarInputStream(fileInputStream)) {\r\n  JarEntry entry = jarStream.getNextJarEntry();\r\n  while (jarStream.available() != 0) {\r\n    File file = new File(directory, entry.getName());\r\n\r\n    if (!entry.isDirectory()) {\r\n      FileUtils.copyToFile(jarStream, file);\r\n    }\r\n    entry = jarStream.getNextJarEntry();\r\n  }\r\n}\r\n{code}\r\nAt some point, jarStream.getNextJarEntry(); throws an exception because the stream is closed:\r\n{code:java}\r\nCaused by: java.io.IOException: Stream closed\r\n        at java.util.zip.ZipInputStream.ensureOpen(ZipInputStream.java:67)\r\n        at java.util.zip.ZipInputStream.getNextEntry(ZipInputStream.java:116)\r\n        at java.util.jar.JarInputStream.getNextEntry(JarInputStream.java:142)\r\n        at java.util.jar.JarInputStream.getNextJarEntry(JarInputStream.java:179)\r\n{code}\r\nYou may need to read from a sufficiently large JAR to expose the bug.\r\n----\r\nh3. How to Fix?\r\n\r\nFixing this is relatively easy: do not alias `in = source` in the try-with-resources block. Let me know if this bug gets acknowledged, I would be happy to work on a fix.",
                "resolved": "2018-12-05",
                "versions": [
                    "2.6"
                ],
                "fixVersions": [
                    "2.7"
                ]
            },
            {
                "issue_id": "IO-586",
                "project": "Commons IO",
                "title": "FileUtils.copyFile fails with java.io.IOException: No such device",
                "type": "Bug",
                "description": "When trying to copy file on CEPH filesystem, FileUtils.copyFile fails with exception. I don't see any workaround except of replacing that call and rebuilding the project.\r\n\r\n*Test Case*:\r\n\r\nHere's a simple class to reproduce the issue:\r\n\r\n\u00a0\r\n\r\n\u00a0\r\n{code:java}\r\nimport org.apache.commons.io.FileUtils;\r\nimport java.io.File;\r\nimport java.io.IOException;\r\nimport java.io.PrintWriter;\r\nimport java.nio.file.Files;\r\n\r\npublic class Test3 {\r\n\u00a0 \u00a0 public static void main(String[] args) throws IOException {\r\n\u00a0 \u00a0 \u00a0 \u00a0 PrintWriter writer = new PrintWriter(\"file.txt\", \"UTF-8\");\r\n\u00a0 \u00a0 \u00a0 \u00a0 writer.println(\"test input \" + Math.random());\r\n\u00a0 \u00a0 \u00a0 \u00a0 writer.close();\r\n\u00a0 \u00a0 \u00a0 \u00a0 FileUtils.copyFile(new File(\"file.txt\"), new File(\"file-copy.txt\"));\r\n\u00a0 \u00a0 }\r\n}\r\n{code}\r\nbelow is the stacktrace:\r\n{code:java}\r\nException in thread \"main\" java.io.IOException: No such device at sun.nio.ch.FileChannelImpl.map0(Native Method) at sun.nio.ch.FileChannelImpl.map(FileChannelImpl.java:926) at sun.nio.ch.FileChannelImpl.transferFromFileChannel(FileChannelImpl.java:634) at sun.nio.ch.FileChannelImpl.transferFrom(FileChannelImpl.java:708) at org.apache.commons.io.FileUtils.doCopyFile(FileUtils.java:1131) at org.apache.commons.io.FileUtils.copyFile(FileUtils.java:1076) at org.apache.commons.io.FileUtils.copyFile(FileUtils.java:1028) at ztst.Test3.main(Test3.java:17)\r\n{code}\r\nHere's our server's file system configuration:\r\n{code:java}\r\n1. a squashfs (read only) image stored on a ceph's rbd\r\n2. a directory on cephfs (read/write)\r\n\r\n1 is the lower layer and 2 is the upper layer of an unionfs mount with the following options:\r\n\r\ncow\r\nmax_files=32768\r\nallow_other\r\nuse_ino\r\ndirect_io\r\nstatfs_omit_ro\r\nnonempty\r\n{code}\r\n\u00a0",
                "resolved": "2020-08-10",
                "versions": [
                    "2.6"
                ],
                "fixVersions": []
            },
            {
                "issue_id": "IO-585",
                "project": "Commons IO",
                "title": "FilenameUtils#normalizeNoEndSeparator does not sanitize multiple backslashes directly after the colon in windows file paths",
                "type": "Bug",
                "description": "FilenameUtils#normalizeNoEndSeparator states in the javadoc that :\r\n \"A double slash will be merged to a single slash (but UNC names are handled).\"\r\n\r\nIt has been observed that if a double backslash occurs after the colon in a windows filepath, then the\u00a0returned path\u00a0still contains this double backslash. For example:\r\n{code:java}\r\nC:\\\\Program Files\\\\ExampleDirectory  -->  C:\\\\Program Files\\ExampleDirectory\u00a0{code}\r\nWhile the\u00a0expectation is that we should be returning ' C:\\Program Files\\ExampleDirectory '\r\n\r\n\u00a0",
                "resolved": "2021-06-07",
                "versions": [
                    "2.6"
                ],
                "fixVersions": [
                    "2.10.0"
                ]
            },
            {
                "issue_id": "IO-582",
                "project": "Commons IO",
                "title": "ObservableInputStream.Observer are package-private",
                "type": "Bug",
                "description": "Hi,\r\n\r\nAccording with the documentation of `ObservableInputStream` and `ObservableInputStream.Observer`, it should be possible to use those classes as part of the `commons-io` utilities. However, `ObservableInputStream.Observer`'s methods are package private and can't be\u00a0extended outside the project's source code.\r\n\r\nMy suggestion is to make\u00a0`ObservableInputStream.Observer`'s methods protected.\r\n\r\nI'm happy to open a PR for this.\r\n\r\nThank you\r\n\r\n\u00a0",
                "resolved": "2018-07-27",
                "versions": [
                    "2.6"
                ],
                "fixVersions": [
                    "2.7"
                ]
            },
            {
                "issue_id": "IO-579",
                "project": "Commons IO",
                "title": "FilenameUtils.isExtension() is case-sensitive",
                "type": "Bug",
                "description": "FilenameUtils.isExtension() is case-sensitive.\u00a0\r\n\r\nAll 3 implementations of this method call String.equals() rather than equalsIgnoreCase(), so it means that if my extension is \"jpg\", for example, and my filename is something.JPG, the method (any of them) will return 'false'.\r\n\r\n\u00a0\r\n\r\nfix suggestion: should use the method [FilenameUtils.eqauls(...)|https://github.com/apache/commons-io/blob/master/src/main/java/org/apache/commons/io/FilenameUtils.java#L1200]\r\n\r\n\u00a0",
                "resolved": "2022-06-20",
                "versions": [
                    "2.6"
                ],
                "fixVersions": []
            },
            {
                "issue_id": "IO-578",
                "project": "Commons IO",
                "title": "ReversedLinesFileReader cannot be used with non-default file systems on Java 7+",
                "type": "Bug",
                "description": "It's not currently possible to use {{ReversedLinesFileReader}} with a non-default file system like Jimfs. The file would first have to be copied to the default file system. Non-default file systems can be supported by\u00a0preferring {{java.nio.file.Path}}\u00a0and {{java.nio.channels.SeekableByteChannel}}\u00a0to\u00a0{{java.io.File}}\u00a0and {{java.io.RandomAccessFile}}.",
                "resolved": "2019-05-15",
                "versions": [
                    "2.6"
                ],
                "fixVersions": [
                    "2.7"
                ]
            },
            {
                "issue_id": "IO-570",
                "project": "Commons IO",
                "title": "Missing Javadoc in FilenameUtils causing Travis-CI build to fail",
                "type": "Bug",
                "description": "Travis builds are failing due to violations reported by checkstyle plugin (missing javadoc) in\u00a0src/main/java/org/apache/commons/io/FilenameUtils.java:[1066,5]",
                "resolved": "2018-03-08",
                "versions": [
                    "2.6"
                ],
                "fixVersions": [
                    "2.7"
                ]
            },
            {
                "issue_id": "IO-569",
                "project": "Commons IO",
                "title": "Incorrect documentation for cloning repository",
                "type": "Bug",
                "description": "https://commons.apache.org/proper/commons-io/source-repository.html\r\nsays:\r\n\r\n> Anonymous Access\r\n> \r\n> The source can be checked out anonymously from Git with this command:\r\n> \r\n> git clone --branch commons-io-2.6 http://git-wip-us.apache.org/repos/asf/commons-io.git\r\n\r\nHowever, when I run that command, I get:\r\n\r\n% git clone --branch commons-io-2.6 http://git-wip-us.apache.org/repos/asf/commons-io.git\r\nCloning into 'commons-io'...\r\nwarning: redirecting to https://git1-us-west.apache.org/repos/asf/commons-io.git/\r\nfatal: Remote branch commons-io-2.6 not found in upstream origin\r\n\r\nThe tags include these:\r\n\r\ncommons-io-2.5\r\ncommons-io-2.5-RC1\r\ncommons-io-2.5-RC2\r\ncommons-io-2.5-RC3\r\ncommons-io-2.5-RC4\r\ncommons-io-2.6-RC1\r\ncommons-io-2.6-RC2\r\ncommons-io-2.6-RC3\r\n\r\nbut there is no tag for commons-io-2.6.",
                "resolved": "2022-06-23",
                "versions": [
                    "2.6"
                ],
                "fixVersions": [
                    "2.11.0"
                ]
            },
            {
                "issue_id": "IO-563",
                "project": "Commons IO",
                "title": "IOUtils lose data when write base64 string to file",
                "type": "Bug",
                "description": "h1.  commons-io-1.3.2-IOUtils-Bug\r\nh2. IOUtils write file lose data \r\nmethod: public static void write(String data, Writer output)\r\n\r\n*  result of file: mycat.jpg.b64\r\n!http://static.tuzhihao.com//1514115829.png?imageMogr2/thumbnail/!100p!\r\n\r\n*  result of file: mystring\r\n!http://static.tuzhihao.com//1514115874.png?imageMogr2/thumbnail/!100p!\r\n\r\nh2. This bug test in Github\r\n[https://github.com/chenjiangtao/commons-io-1.3.2-IOUtils-Bug]\r\n\r\n",
                "resolved": "2017-12-24",
                "versions": [
                    "1.3.2"
                ],
                "fixVersions": []
            },
            {
                "issue_id": "IO-562",
                "project": "Commons IO",
                "title": "IOUtils write file lose data",
                "type": "Bug",
                "description": "h1.  commons-io-1.3.2-IOUtils-Bug\r\nh2. IOUtils write file lose data \r\nmethod: public static void write(String data, Writer output)\r\n\r\n*  result of file: mycat.jpg.b64\r\n!http://static.tuzhihao.com//1514115829.png?imageMogr2/thumbnail/!100p!\r\n\r\n*  result of file: mystring\r\n!http://static.tuzhihao.com//1514115874.png?imageMogr2/thumbnail/!100p!\r\n\r\nThis bug test in Github\r\n[https://github.com/chenjiangtao/commons-io-1.3.2-IOUtils-Bug]\r\n\r\n",
                "resolved": "2017-12-24",
                "versions": [
                    "1.3.2"
                ],
                "fixVersions": []
            },
            {
                "issue_id": "IO-561",
                "project": "Commons IO",
                "title": "IOUtils write file lose data",
                "type": "Bug",
                "description": "# commons-io-1.3.2-IOUtils-Bug\r\n## IOUtils write file lose data \r\nmethod: public static void write(String data, Writer output)\r\n\r\n- result of file: mycat.jpg.b64\r\n!http://static.tuzhihao.com//1514115829.png?imageMogr2/thumbnail/!100p!\r\n\r\n- result of file: mystring\r\n!http://static.tuzhihao.com//1514115874.png?imageMogr2/thumbnail/!100p!\r\n\r\nThis bug test in Github\r\n[https://github.com/chenjiangtao/commons-io-1.3.2-IOUtils-Bug]\r\n\r\n",
                "resolved": "2017-12-24",
                "versions": [
                    "1.3.2"
                ],
                "fixVersions": []
            },
            {
                "issue_id": "IO-560",
                "project": "Commons IO",
                "title": "IOUtils write file lose data",
                "type": "Bug",
                "description": "# commons-io-1.3.2-IOUtils-Bug\r\n## IOUtils write file lose data \r\nmethod: public static void write(String data, Writer output)\r\n\r\n- result of file: mycat.jpg.b64\r\n![](http://static.tuzhihao.com//1514115829.png?imageMogr2/thumbnail/!100p)\r\n\r\n- result of file: mystring\r\n![](http://static.tuzhihao.com//1514115874.png?imageMogr2/thumbnail/!100p)\r\n\r\nThis bug test in Github\r\n[https://github.com/chenjiangtao/commons-io-1.3.2-IOUtils-Bug]\r\n\r\n",
                "resolved": "2020-08-10",
                "versions": [
                    "1.3.2"
                ],
                "fixVersions": []
            },
            {
                "issue_id": "IO-559",
                "project": "Commons IO",
                "title": "FilenameUtils.normalize should verify hostname syntax in UNC path",
                "type": "Bug",
                "description": "{{FilenameUtils.normalize}} will accept broken file names as UNC path even if their hostname part doesn't match the syntax of a proper hostname. Using certain hostnames like \".\" this may lead to strange side effects.\r\n\r\nMost likely the best fix will be to make {{getPrefixLength}} verify the hostname part of a suspected UNC path and return a value of {{NOT_FOUND}} if it is not a valid hostname - much like it does for triple slashes.",
                "resolved": "2018-05-30",
                "versions": [
                    "2.6"
                ],
                "fixVersions": [
                    "2.7"
                ]
            },
            {
                "issue_id": "IO-557",
                "project": "Commons IO",
                "title": "UnsupportedEncodingException when opening an ISO-8859-1 XML stream with Turkish as the default locale",
                "type": "Bug",
                "description": "When the default locale is set to the Turkish language, using the XmlStreamReader constructor on an XML stream with a prolog including the ISO-8859-1 charset name in lowercase as its encoding throws a UnsupportedEncodingException (java.io.UnsupportedEncodingException: \u0130SO-8859-1).\r\nExample XML prolog : <?xml version=\"1.0\" encoding=\"iso-8859-1\"?>\r\n\r\nThis is apparently because the XmlStreamReader class uses String.toUpperCase() in its getXmlProlog() function. It should rather use toUpperCase(Locale.ROOT) or toUpperCase(Locale.US) as already done in the getContentTypeEncoding() function. Otherwise the behaviour can be different depending on the default locale, as the dotted lower case i becomes a dotted upper case i in the Turkish language, which not the case with other languages.",
                "resolved": "2018-01-14",
                "versions": [
                    "2.6"
                ],
                "fixVersions": [
                    "2.7"
                ]
            },
            {
                "issue_id": "IO-556",
                "project": "Commons IO",
                "title": "Unexpected behavior of FileNameUtils.normalize may lead to limited path traversal vulnerabilies",
                "type": "Bug",
                "description": "I sent this report in an Email to security@apache.org on 2017-10-16. I did not receive any kind of response yet (2017-11-18 as of writing). I am now posting it publicly, to open the issue up for discussion, and hopefully initiate a fix.\r\n\r\nThis report is not about a vulnerability in {{commons-io}} per se, but an unexpected behavior that has a high chance of introducing a path traversal vulnerability when using {{FilenameUtils.normalize}} to sanitize user input. The traversal is limited to a single out-of-bounds-stepping \"/../\" segment.\r\nh5. Reproduction\r\n{code:java}\r\nFilenameUtils.normalize(\"//../foo\");        // returns \"//../foo\" or \"\\\\\\\\..\\\\foo\", based on java.io.File.separatorChar\r\nFilenameUtils.normalize(\"\\\\\\\\..\\\\foo\");        // returns \"//../foo\" or \"\\\\\\\\..\\\\foo\", based on java.io.File.separatorChar\r\n{code}\r\nh5. Possible impact (example)\r\n\r\nConsider a web-application that uses {{FilenameUtils.normalize}} to sanitize a user-supplied file name string, and then appends the sanitized value to a configured upload directory to store the uploaded content in:\r\n{code:java}\r\nString fileName = \"//../foo\";            // actually user-supplied (e.g. from multipart-POST request)\r\nfileName = FilenameUtils.normalize(fileName);    // still holds the same value (\"//../foo\")   \r\n           \r\nif (fileName != null) {\r\n    File newFile = new File(\"/base/uploads\", fileName);    // java.io.File treats double forward slashes as singles\r\n                                // newFile now points to \"/base/uploads//../foo\"\r\n    newFile = newFile.getCanonicalFile();            // newFile now points to \"/base/foo\", which should be inaccessible\r\n\r\n    // Write contents to newFile...\r\n} else {\r\n    // Assume malicious activity, handle error\r\n}\r\n{code}\r\nh5. Relevant code locations\r\n * {{org.apache.commons.io.FilenameUtils#getPrefixLength}} : everything between a leading \"//\" and the next \"/\" is treated as a UNC server name, and ignored in all further validation logic of {{org.apache.commons.io.FilenameUtils#doNormalize}} .\r\n\r\nh5. Discussion\r\n\r\nOne might argue that the given example is a misuse of the {{FilenameUtils.normalize}} method, and that everyone using it should expect absolute paths, full UNC paths, etc. to be returned by the method.\r\n Furthermore, the vulnerability can only occur due to the lax behavior of {{java.io.File}} .\r\n\r\nOn the other hand, I believe that the JavaDoc of {{FilenameUtils.normalize}} suggests to most readers, that this method is exactly what is needed to sanitize file names:\r\n{noformat}\r\n//-----------------------------------------------------------------------\r\n    /**\r\n     * Normalizes a path, removing double and single dot path steps,\r\n     * and removing any final directory separator.\r\n     * <p>\r\n     * This method normalizes a path to a standard format.\r\n     * The input may contain separators in either Unix or Windows format.\r\n     * The output will contain separators in the format of the system.\r\n     * <p>\r\n     * A trailing slash will be removed.\r\n     * A double slash will be merged to a single slash (but UNC names are handled).\r\n     * A single dot path segment will be removed.\r\n     * A double dot will cause that path segment and the one before to be removed.\r\n     * If the double dot has no parent path segment to work with, {@code null}\r\n     * is returned.\r\n     * <p>\r\n     * The output will be the same on both Unix and Windows except\r\n     * for the separator character.\r\n     * <pre>\r\n     * /foo//               --&gt;   /foo\r\n     * /foo/./              --&gt;   /foo\r\n     * /foo/../bar          --&gt;   /bar\r\n     * /foo/../bar/         --&gt;   /bar\r\n     * /foo/../bar/../baz   --&gt;   /baz\r\n     * //foo//./bar         --&gt;   /foo/bar\r\n     * /../                 --&gt;   null\r\n     * ../foo               --&gt;   null\r\n     * foo/bar/..           --&gt;   foo\r\n     * foo/../../bar        --&gt;   null\r\n     * foo/../bar           --&gt;   bar\r\n     * //server/foo/../bar  --&gt;   //server/bar\r\n     * //server/../bar      --&gt;   null\r\n     * C:\\foo\\..\\bar        --&gt;   C:\\bar\r\n     * C:\\..\\bar            --&gt;   null\r\n     * ~/foo/../bar/        --&gt;   ~/bar\r\n     * ~/../bar             --&gt;   null\r\n     * </pre>\r\n     * (Note the file separator returned will be correct for Windows/Unix)\r\n     *\r\n     * @param filename  the filename to normalize, null returns null\r\n     * @return the normalized filename, or null if invalid. Null bytes inside string will be removed\r\n     */\r\n{noformat}\r\nI have done a quick survey of the usages of the method in public GitHub repositories. I have found numerous projects that suffer from the limited path traversal vulnerability that is described here because of this very issue. This includes Webservers, Web-Frameworks, Archive-Extraction-Software, and others.\r\n\r\nPreventing path traversal attacks is not trivial, and many people turn to libraries like {{commons-io}} to avoid making mistakes when implementing parsing logic on their own. They trust that {{FilenameUtils}} will provide them with the most complete, and suitable sanitation logic for file names.\r\n In addition, \"..\" is not a valid UNC host name according to [https://msdn.microsoft.com/de-de/library/gg465305.aspx] , so prohibiting it shouldn't result in any major problems.",
                "resolved": "2017-11-30",
                "versions": [
                    "1.1",
                    "1.2",
                    "1.3",
                    "1.3.1",
                    "1.3.2",
                    "1.4",
                    "2.0.1",
                    "2.1",
                    "2.2",
                    "2.3",
                    "2.4",
                    "2.5",
                    "2.6"
                ],
                "fixVersions": [
                    "2.7"
                ]
            },
            {
                "issue_id": "IO-554",
                "project": "Commons IO",
                "title": "FileUtils.copyToFile(InputStream source, File destination) should not close input stream",
                "type": "Bug",
                "description": "In 2.6 this method is closing the input stream, while the javadoc states the opposite.\r\nThe correct behavior is to leave the stream open, as stated in the javadoc.\r\n\r\nI assigned a high priority because this incorrect behavior breaks existing code, especially when used in combination with ZipInputStream.\r\n\r\n{code:java}\r\n/**\r\n * Copies bytes from an {@link InputStream} <code>source</code> to a file\r\n * <code>destination</code>. The directories up to <code>destination</code>\r\n * will be created if they don't already exist. <code>destination</code>\r\n * will be overwritten if it already exists.\r\n * The {@code source} stream is left open, e.g. for use with {@link java.util.zip.ZipInputStream ZipInputStream}.\r\n * See {@link #copyInputStreamToFile(InputStream, File)} for a method that closes the input stream.\r\n *\r\n * @param source      the <code>InputStream</code> to copy bytes from, must not be {@code null}\r\n * @param destination the non-directory <code>File</code> to write bytes to\r\n *                    (possibly overwriting), must not be {@code null}\r\n * @throws IOException if <code>destination</code> is a directory\r\n * @throws IOException if <code>destination</code> cannot be written\r\n * @throws IOException if <code>destination</code> needs creating but can't be\r\n * @throws IOException if an IO error occurs during copying\r\n * @since 2.5\r\n */\r\npublic static void copyToFile(final InputStream source, final File destination) throws IOException {\r\n\ttry (InputStream in = source;\r\n\t\t OutputStream out = openOutputStream(destination)) {\r\n\t\tIOUtils.copy(in, out);\r\n\t}\r\n}\r\n{code}\r\n\r\ninstead it should be:\r\n\r\n{code:java}\r\npublic static void copyToFile(final InputStream source, final File destination) throws IOException {\r\n\ttry (OutputStream out = openOutputStream(destination)) {\r\n\t\tIOUtils.copy(source, out);\r\n\t}\r\n}{code}\r\n\r\n",
                "resolved": "2018-06-12",
                "versions": [
                    "2.6"
                ],
                "fixVersions": [
                    "2.7"
                ]
            },
            {
                "issue_id": "IO-550",
                "project": "Commons IO",
                "title": "Documentation issue",
                "type": "Bug",
                "description": "Most of the links on this page are broken:\nhttps://commons.apache.org/proper/commons-io/description.html\n\n",
                "resolved": "2017-09-14",
                "versions": [],
                "fixVersions": [
                    "2.6"
                ]
            },
            {
                "issue_id": "IO-547",
                "project": "Commons IO",
                "title": "Throw a IllegalArgumentException  instead of NullPointerException in FileSystemUtils.freeSpaceWindows()",
                "type": "Bug",
                "description": "In FileSystemutils.freeSpaceWindows(String path,long timeout) , path cannot be null. In this function for following assignment\n          path = FilenameUtils.normalize(path,bool), path is assigned null value when \n          (1) path argument is null.\n          (2) path argument is illegal/invalid path as per windows system.\n\n{code:java}\npublic class FileSystemutilTest {\n\tpublic static void main(String args[]){\n\t\tFileSystemUtils fsuobj = new FileSystemUtils();\n                String path = \":\\\\Users\\\\nikhil\\\\Desktop\\\\tests\";  /* Invalid path, causes Nullpointer Exception*/\n\t\ttry {\n\t\t\tlong space = fsuobj.freeSpace(path);\n\t\t} catch (IOException e) {\n\t\t\te.printStackTrace();\n\t\t}\n\t}\n}\n{code}\n\nFor above test case, as path is illegal for windows system, Nullpointer exception occurs. A check for validity of path as per windows file system, will resolve this bug.\n\n\n",
                "resolved": "2017-09-07",
                "versions": [
                    "2.5"
                ],
                "fixVersions": [
                    "2.6"
                ]
            },
            {
                "issue_id": "IO-544",
                "project": "Commons IO",
                "title": "Should FileUtils.copyFile be flushed and synced before comparing file sizes?",
                "type": "Bug",
                "description": "I've been struggling to troubleshoot intermittent {{IOExceptions}} thrown from {{FileUtils.doCopyFile}} when copying 2-4KB files from a local temporary file to a network drive. Despite the error, the file appears on the network drive when I check. Should the output channel/buffer be forced/flushed before closing, and synchronized before comparing the file lengths? It's a rather intermittent issue on a relatively high throughput PC so I'd expect there to be more IO latency than normal.\n\nI found myself referencing:\n* [The source code for FileUtils v2.5|https://commons.apache.org/proper/commons-io/javadocs/api-2.5/src-html/org/apache/commons/io/FileUtils.html]\n* [FileChannel#force(boolean)|https://docs.oracle.com/javase/8/docs/api/java/nio/channels/FileChannel.html#force-boolean-]\n* [IO-443 - FileUtils.copyFile methods throw an unnecessary \"Failed to copy full contents from\" exception|https://issues.apache.org/jira/browse/IO-443]\n\nThanks,\nSean",
                "resolved": "2022-08-08",
                "versions": [
                    "2.5"
                ],
                "fixVersions": [
                    "2.12.0"
                ]
            },
            {
                "issue_id": "IO-536",
                "project": "Commons IO",
                "title": "2.5 ExceptionInInitializerError",
                "type": "Bug",
                "description": "In its static block, org.apache.commons.io.Java7Support executes:\n\nClassLoader cl = Thread.currentThread().getContextClassLoader();\n            \nThis can be null.\n\nIn that case, I believe the class should fall back to using:\n\nJava7Support.class.getClassLoader();\n\nBut someone with a better understanding of the security implications should weigh in on that change.\n",
                "resolved": "2017-05-17",
                "versions": [
                    "2.5"
                ],
                "fixVersions": [
                    "2.6"
                ]
            },
            {
                "issue_id": "IO-535",
                "project": "Commons IO",
                "title": "Thread bug in FileAlterationMonitor#stop(int)",
                "type": "Bug",
                "description": "The thread in FileAlterationMonitor wasn't stopped by the `stop(int)` method, which forbid application to shutdown until all `Thread` are exited (if FileAlterationMonitor is part of a DI managed component).\n\nThis behavior conflict with the method javadoc `@param stopInterval the amount of time in milliseconds to wait for the thread to finish.`\n\nh5. Simple example to understand\n\nBad behavior\n{code:java}\n    Thread t = new Thread(() -> {\n        try {\n            Thread.sleep(500000);\n        } catch (final InterruptedException e) {\n        }\n    });\n    t.start();\n    t.join(50);\n   // Ok, we reach this point until 500000ms are elapsed, but the thread is still alive.\n   //   because Thread#join(int) does not kill the thread. And the thread remains alive.\n{code}\n\nGood behavior\n{code:java}\n    Thread t = new Thread(() -> {\n        try {\n            Thread.sleep(500000);\n        } catch (final InterruptedException e) {\n        }\n    });\n    t.start();\n    t.join(50);\n    t.interupt();\n   // Thread is exited\n{code}\n\nIn this case, we waited the given time BEFORE exiting the `Thread`, as described in the javadoc, and the `Thread` is now finished and killed.",
                "resolved": "2018-04-29",
                "versions": [
                    "2.5"
                ],
                "fixVersions": [
                    "2.7"
                ]
            },
            {
                "issue_id": "IO-534",
                "project": "Commons IO",
                "title": "FileUtilTestCase.testForceDeleteDir() should not delete testDirectory parent",
                "type": "Bug",
                "description": "The test case FileUtilTestCase.testForceDeleteDir() has always attempted to delete the testDirectory parent.\n\nThis is wrong; it should not assume that the testDirectory has a parent that can safely be deleted.\n\nThis is why the testDirectory is currently defined as \"test/io\" when it would make more sense to use a temporary directory under target. It also explains why the \"test\" directory is left behind when tests complete.",
                "resolved": "2017-04-23",
                "versions": [],
                "fixVersions": [
                    "2.6"
                ]
            },
            {
                "issue_id": "IO-530",
                "project": "Commons IO",
                "title": "Tailer pegs CPU if file disappears and doesn't come back",
                "type": "Bug",
                "description": "I ran into a situation where a bug in my log rotation leads to the tailed file being renamed, but the original file name does not re-appear (new log entries still go to the renamed log file). This uncovered a bug in the Tailer class. In this case, tailer enters a tight loop trying to re-open the file:\n{code}\nwhile (getRun()) {\n                final boolean newer = FileUtils.isFileNewer(file, last); // IO-279, must be done first\n                // Check the file length to see if it was rotated\n                final long length = file.length();\n                if (length < position) {\n                    // File was rotated\n                    listener.fileRotated();\n                    // Reopen the reader after rotation ensuring that the old file is closed iff we re-open it\n                    // successfully\n                    try (RandomAccessFile save = reader) {\n                        reader = new RandomAccessFile(file, RAF_MODE);\n                        // At this point, we're sure that the old file is rotated\n                        // Finish scanning the old file and then we'll start with the new one\n                        try {\n                            readLines(save);\n                        }  catch (IOException ioe) {\n                            listener.handle(ioe);\n                        }\n                        position = 0;\n                    } catch (final FileNotFoundException e) {\n                        // in this case we continue to use the previous reader and position values\n                        listener.fileNotFound();\n                    }\n                    continue;\n{code}\nSince a non-existent file returns a length of zero, we keep entering this top loop, trying to open the missing file, getting a FileNotFoundException and starting over.\n\nThere should be some delay here.\n",
                "resolved": "2017-04-23",
                "versions": [
                    "2.5"
                ],
                "fixVersions": []
            },
            {
                "issue_id": "IO-528",
                "project": "Commons IO",
                "title": "Tailer.run race condition runaway logging",
                "type": "Bug",
                "description": "`Tailer.run` has a race condition that can have serious effects. \n\nThe `run()` method has two while loops. The first waits till the file exists and the second loop reads lines from the file doing some file rotation checking on the way.  If the file is deleted while the second loop is in progress then the loop goes crazy logging warnings that look like this:\n\n`\nDec 06, 2016 1:02:18 AM com.github.davidmoten.logan.LogFile$1 fileRotated\nINFO: file rotated\nDec 06, 2016 1:02:18 AM com.github.davidmoten.logan.LogFile$1 fileNotFound\nWARNING: file not found\nDec 06, 2016 1:02:18 AM com.github.davidmoten.logan.LogFile$1 fileRotated\nINFO: file rotated\nDec 06, 2016 1:02:18 AM com.github.davidmoten.logan.LogFile$1 fileNotFound\nWARNING: file not found\nDec 06, 2016 1:02:18 AM com.github.davidmoten.logan.LogFile$1 fileRotated\nINFO: file rotated\nDec 06, 2016 1:02:18 AM com.github.davidmoten.logan.LogFile$1 fileNotFound\nWARNING: file not found\nDec 06, 2016 1:02:18 AM com.github.davidmoten.logan.LogFile$1 fileRotated\nINFO: file rotated\nDec 06, 2016 1:02:18 AM com.github.davidmoten.logan.LogFile$1 fileNotFound\nWARNING: file not found\n`\n\nIn our case this had serious effects. The file being tailed was deleted by another process and all available disk space was rapidly used up by the logging. This crashed a system.\n\nThe fix is to put a sleep after the call to `fileNotFound()`.\n\nThis problem was raised in IO-398 three years ago but no change was made to the code base.\n\nPR submitted via github repo.",
                "resolved": "2017-04-23",
                "versions": [
                    "2.5"
                ],
                "fixVersions": [
                    "2.6"
                ]
            },
            {
                "issue_id": "IO-526",
                "project": "Commons IO",
                "title": "The problem of log acquisition",
                "type": "Bug",
                "description": "Problem Description:\n        Recently a problem appeared in the use of commons io 2.5 when Tailer class is in the process of monitoring and reading log files: there is lost logs and repeatedly collected logs for the collection of log files continuously split by time .\nScene reproduction:\n      We use log4j-1.2.17 in our project to generate the log file and split it up once every hour. If the current file name is system.log, the file name after splitting is system1.log.The Tailer class in commons io 2.5 monitors changes to the file every 500 milliseconds.\n     1. The current system.log length is 10, position is also 10, after cutting the new system.log length is 20, then this.length is greater than position and position is set to 0, the old file collection then repeats (ie, system1. Log). New log is missing.\n     2. The current system.log length is 10,position is 10, after cutting new system.log length is 10, then this.length is equal to position, no log information is read. New file logs is missing.\n    I hope commons io team can solve this problem, thank you!",
                "resolved": "2022-06-23",
                "versions": [
                    "2.5"
                ],
                "fixVersions": []
            },
            {
                "issue_id": "IO-525",
                "project": "Commons IO",
                "title": "ValidatingObjectInputStream does not handle arrays of primitive types",
                "type": "Bug",
                "description": "ValidatingObjectInputStream does not handle arrays and primitive types correctly. \n\nThe current behaviour expects a classname, but for example for byte arrays it fails on unknown class with name [B\n\nI would expect some possibility of whitelisting of primitive types and/or arrays",
                "resolved": "2022-06-23",
                "versions": [
                    "2.5"
                ],
                "fixVersions": []
            },
            {
                "issue_id": "IO-524",
                "project": "Commons IO",
                "title": "Documentation Bug of Tailer - it opens thread within",
                "type": "Bug",
                "description": "Documentation of\norg.apache.commons.io.input.Tailer\ndescribes how to handle threading, while it seems that thread being openened within, and seamlessly to user.\n\nneed to update the doc.",
                "resolved": "2017-02-16",
                "versions": [
                    "2.4",
                    "2.5"
                ],
                "fixVersions": []
            },
            {
                "issue_id": "IO-522",
                "project": "Commons IO",
                "title": "Symbolic links get followed in deleteQuietly",
                "type": "Bug",
                "description": "IO-168 describes the problem. \n\n`deleteQuietly` will behave correctly for nested symlinks but the initial call erroneously calls `cleanDirectory`. Calling `deleteDirectory` and returning would probably be the better behaviour (analogous to `forceDelete`)",
                "resolved": "2021-01-29",
                "versions": [
                    "2.5"
                ],
                "fixVersions": [
                    "2.9.0"
                ]
            },
            {
                "issue_id": "IO-520",
                "project": "Commons IO",
                "title": "FileUtilsTestCase#testContentEqualsIgnoreEOL fails on Windows",
                "type": "Bug",
                "description": "On current master FileUtilsTestCase#testContentEqualsIgnoreEOL always fails with:\n\nmaster java.lang.AssertionError\n\tat org.apache.commons.io.FileUtilsTestCase.testContentEqualsIgnoreEOL(FileUtilsTestCase.java:727)\n\nwhen run on Windows.",
                "resolved": "2016-11-10",
                "versions": [],
                "fixVersions": [
                    "2.6"
                ]
            },
            {
                "issue_id": "IO-517",
                "project": "Commons IO",
                "title": "FileUtils#copyDirectory cannot copy directory structure",
                "type": "Bug",
                "description": "Have a directory structure like ..\\users/domain\\username and would copy the folder users with all subfolders and files. the problem now is that domain\\username is a folder which is generated by ldap connecting the domain and the username with a backslash.\n\n{code}\njava.io.IOException: Destination '/var/lib/jenkins_backup_mnt/FULL-2016-11-07_11-00/users/domain\\username' directory cannot be created\nat org.apache.commons.io.FileUtils.doCopyDirectory(FileUtils.java:1416)\nat org.apache.commons.io.FileUtils.doCopyDirectory(FileUtils.java:1426)\nat org.apache.commons.io.FileUtils.copyDirectory(FileUtils.java:1389)\nat org.apache.commons.io.FileUtils.copyDirectory(FileUtils.java:1310)\n{code}\n\nhttps://issues.jenkins-ci.org/browse/JENKINS-39546",
                "resolved": "2016-11-20",
                "versions": [
                    "2.4"
                ],
                "fixVersions": []
            },
            {
                "issue_id": "IO-516",
                "project": "Commons IO",
                "title": ".gitattributes not correctly applied",
                "type": "Bug",
                "description": "the .gitattributes [commit 941a9a6] is \"corrupting\" test resources and several source resources did not yet have their line ending normalized [commit 9e2b2c0].\n\n",
                "resolved": "2016-11-08",
                "versions": [
                    "2.6"
                ],
                "fixVersions": [
                    "2.6"
                ]
            },
            {
                "issue_id": "IO-512",
                "project": "Commons IO",
                "title": "ThresholdingOutputStream.thresholdReached() results in FileNotFoundException",
                "type": "Bug",
                "description": "I upgraded from commons-io-2.0.1.jar to v2.5 (and fileupload to v1.32)\n\nand now I get\n\njava.io.FileNotFoundException: /usr/share/tomcat/temp/dfifp/upload_4d9f8898_1a83_4092_9070_ddf9c15de6d1_00000027.tmp (No such file or directory)\n\tat java.io.FileOutputStream.open(Native Method)\n\tat java.io.FileOutputStream.<init>(FileOutputStream.java:213)\n\tat java.io.FileOutputStream.<init>(FileOutputStream.java:162)\n\tat org.apache.commons.io.output.DeferredFileOutputStream.thresholdReached(DeferredFileOutputStream.java:179)\n\nIn thresholdReached(), the prefix is null, so no temp file is created.\nIn the subsequent new FileOutputStream(outputFile), the exception is thrown.\n\nSuggested fix:\nbefore new FileOutputStream(outputFile) , add\n\nFileUtils.forceMkdirParent(outputFile);\n\nSimilar issues reported by others:\n- IO-497\n- https://java.net/jira/browse/GLASSFISH-20581\n- https://jira.sakaiproject.org/si/jira.issueviews:issue-html/SAM-1537/SAM-1537.html\n",
                "resolved": "2016-08-17",
                "versions": [
                    "2.5"
                ],
                "fixVersions": [
                    "2.6"
                ]
            },
            {
                "issue_id": "IO-511",
                "project": "Commons IO",
                "title": "After a few unit tests, a few newly created are directories not cleaned completely.",
                "type": "Bug",
                "description": "After a few unit tests, \"test/io\" folder is not deleted. It's a bad practice in software engineering, because disk shouldn't polluted.",
                "resolved": "2016-06-26",
                "versions": [],
                "fixVersions": [
                    "2.6"
                ]
            },
            {
                "issue_id": "IO-509",
                "project": "Commons IO",
                "title": "FileUtils.readFileToString: null not usable for default encoding",
                "type": "Bug",
                "description": "Since 2.5 FileUtils.readFileToString(File) is deprecated. readFileToString(File, Charset) should be used instead.\nThe javadoc of readFileToString(File, Charset) says that, if the charset is null, the platform default charset will be used.\nBut I cannot use readFileToString(File, null) to get that behaviour, since there also is readFileToString(File, String), so that readFileToString(File, null) is ambiguous.",
                "resolved": "2016-06-07",
                "versions": [
                    "2.5"
                ],
                "fixVersions": []
            },
            {
                "issue_id": "IO-508",
                "project": "Commons IO",
                "title": "Veracode static  scan still shows 1 very high OS Command injection in commons-io-2.4.jar",
                "type": "Bug",
                "description": "I cloned IO-474 because we specifically upgraded the commons-io jar in our application recently to 2.4 jar and still sees, in the Veracode static scan result this one instance:  17561 189 - commons-io-2.4.jar org/.../io/FileSystemUtils.java 535 4/23/16\n\nSince this is going to be visible on our security reports including to potential customers, please help us at least remediate or otherwise fix in a higher version.  Thanks!  ",
                "resolved": "2016-05-09",
                "versions": [
                    "2.4"
                ],
                "fixVersions": []
            },
            {
                "issue_id": "IO-502",
                "project": "Commons IO",
                "title": "Exceptions are suppressed incorrectly when copying files.",
                "type": "Bug",
                "description": "When copying files or directories, exceptions thrown on closing streams are suppressed incorrectly and need to be propagated to the caller.",
                "resolved": "2016-04-27",
                "versions": [
                    "2.4",
                    "2.5"
                ],
                "fixVersions": [
                    "2.6"
                ]
            },
            {
                "issue_id": "IO-501",
                "project": "Commons IO",
                "title": "commons-io-2.4-src.zip and 2.5 fails test cases",
                "type": "Bug",
                "description": "Failed tests:   testCanRead(org.apache.commons.io.filefilter.FileFilterTestCase): Filter(File) org.apache.commons.io.filefilter.AndFileFilter not true for /commons-io-2.4-src/test/io/read-only-file1.txt expected:<true> but was:<false>\n  testCanWrite(org.apache.commons.io.filefilter.FileFilterTestCase): Filter(File) org.apache.commons.io.filefilter.CanWriteFileFilter not false for /commons-io-2.4-src/test/io/read-only-file2.txt expected:<false> but was:<true>\n  testThrowsOnNullList(org.apache.commons.io.FileUtilsCleanDirectoryTestCase): expected IOException\n  testThrowsOnCannotDeleteFile(org.apache.commons.io.FileUtilsCleanDirectoryTestCase): expected IOException\n\nTests run: 966, Failures: 4, Errors: 0, Skipped: 0\n\n[INFO] ------------------------------------------------------------------------\n[INFO] BUILD FAILURE\n[INFO] ------------------------------------------------------------------------\n[INFO] Total time: 01:32 min\n[INFO] Finished at: 2016-04-21T12:56:24-04:00\n[INFO] Final Memory: 17M/178M\n[INFO] ------------------------------------------------------------------------\n[ERROR] Failed to execute goal org.apache.maven.plugins:maven-surefire-plugin:2.12:test (default-test) on project commons-io: There are test failures.\n[ERROR] \n[ERROR] Please refer to /commons-io-2.4-src/target/surefire-reports for the individual test results.\n[ERROR] -> [Help 1]\n[ERROR] \n[ERROR] To see the full stack trace of the errors, re-run Maven with the -e switch.\n[ERROR] Re-run Maven using the -X switch to enable full debug logging.\n[ERROR] \n[ERROR] For more information about the errors and possible solutions, please read the following articles:\n[ERROR] [Help 1] http://cwiki.apache.org/confluence/display/MAVEN/MojoFailureException\nThe command '/bin/sh -c cd commons-io-2.4-src && mvn install' returned a non-zero code: 1\n\nDockerfile\n\nFROM fedora:21\nRUN yum update -y\nRUN yum install -y java-1.8.0-openjdk unzip\nRUN yum install -y maven\nCOPY commons-io-2.4-src.zip commons-io-2.4-src.zip\nRUN unzip commons-io-2.4-src.zip\nRUN cd commons-io-2.4-src && mvn initialize\nRUN cd commons-io-2.4-src && mvn test-compile\nRUN cd commons-io-2.4-src && mvn install\nRUN chmod -R 755 /root\nCMD /bin/bash\n\n==\nDid a second run with commons-io.2,5\n\nFailed tests: \n  FileUtilsCleanDirectoryTestCase.testThrowsOnNullList:109 expected IOException\n  FileUtilsCleanDirectoryTestCase.testThrowsOnCannotDeleteFile:129 expected IOException\n  FileFilterTestCase.testCanRead:984->assertFiltering:64 Filter(File) org.apache.commons.io.filefilter.AndFileFilter not true for /root/commons-io-2.5-src/test/io/read-only-file1.txt expected:<true> but was:<false>\n  FileFilterTestCase.testCanWrite:1005->assertFiltering:64 Filter(File) org.apache.commons.io.filefilter.CanWriteFileFilter not false for /root/commons-io-2.5-src/test/io/read-only-file2.txt expected:<false> but was:<true>\n\nTests run: 1157, Failures: 4, Errors: 0, Skipped: 4\n\nDockerfile contents\nFROM fedora:21\nRUN yum update -y\nRUN yum install -y java-1.8.0-openjdk unzip\nRUN yum install -y maven\nRUN yum install -y wget\nRUN cd /root && wget http://apache.parentingamerica.com//commons/io/source/commons-io-2.5-src.zip\nRUN cd /root && unzip commons-io-2.5-src.zip\nRUN cd /root && cd commons-io-2.5-src && mvn initialize\nRUN cd /root && cd commons-io-2.5-src && mvn test-compile\nRUN cd /root && cd commons-io-2.5-src && mvn install\nRUN chmod -R 755 /root\nCMD /bin/bash\n\ncommand: $docker build .\n\n==\nDebian Jessie, JDK 7 also fails with code coming from trunk\n\nFailed tests: \n  FileUtilsCleanDirectoryTestCase.testThrowsOnNullList:109 expected IOException\n  FileUtilsCleanDirectoryTestCase.testThrowsOnCannotDeleteFile:129 expected IOException\n  FileFilterTestCase.testCanRead:984->assertFiltering:64 Filter(File) org.apache.commons.io.filefilter.AndFileFilter not true for /root/commons-io/test/io/read-only-file1.txt expected:<true> but was:<false>\n  FileFilterTestCase.testCanWrite:1005->assertFiltering:64 Filter(File) org.apache.commons.io.filefilter.CanWriteFileFilter not false for /root/commons-io/test/io/read-only-file2.txt expected:<false> but was:<true>\nFROM debian:8.4\nCMD /bin/bash\nRUN apt-get update -y\nRUN apt-get install -y openjdk-7-jdk openjdk-7-jre unzip maven wget subversion\nRUN cd /root && svn checkout -r 1740549 http://svn.apache.org/repos/asf/commons/proper/io/trunk /root/commons-io\nRUN cd /root/commons-io && mvn initialize\nRUN cd /root/commons-io && mvn test-compile\nRUN cd /root/commons-io && mvn install\nRUN chmod -R 755 /root\n======================\nAll the above are where the users home directory is NFS mounted.\nI retried 2.5-src on a machine where the home directory for the users was local and it made no difference.\nUsing Fedora23 in VirtualBox on Windows 7.\n\n\n",
                "resolved": "2016-12-01",
                "versions": [
                    "2.4"
                ],
                "fixVersions": []
            },
            {
                "issue_id": "IO-499",
                "project": "Commons IO",
                "title": "FilenameUtils.directoryContains(String, String) gives false positive when two directories exist with equal prefixes",
                "type": "Bug",
                "description": "In a folder layout as such:\n\n{code}\n/foo/a.txt\n/foo2/b.txt\n{code}\n\nThe result of invoking directoryContains is wrong:\n{code}\nFilenameUtils.directoryContains(\"/foo\", \"/foo2/b.txt\"); // returns true\n{code}\n\neven if \"/foo\" and \"/foo2/b.txt\" are the canonical paths, they start with the same characters, and the current implementation of the method fails.\n\nAs workaround we are currently appending a path separator '/' to the first argument.\nIt is noteworthy that the current implementation of FileUtils.directoryContains() reveals this issue because it uses the File.getCanonicalPath() to obtain the String paths of \"/foo\" and \"/foo2/b.txt\".",
                "resolved": "2022-06-23",
                "versions": [
                    "2.4"
                ],
                "fixVersions": []
            },
            {
                "issue_id": "IO-498",
                "project": "Commons IO",
                "title": "FileUtils.directoryContains(File, File) returns wrong results when the file name contains unreadable characters",
                "type": "Bug",
                "description": "When testing for FileUtils.directoryContains(File, File) on a file which is in fact contained in the given directory but has odd characters in the name, the method returns wrong results.\n\nThis file:\n{code:title=File name}\nbof@testcorso2015:~/tmp/test$ ls col* | xxd\n0000000: 636f 6c74 e00a                           colt..\n{code}\n\nfails to be recognized as belonging to the current directory in this simple snippet of code:\n\n{code:title=Snippet|borderStyle=solid}\nFile[] files = new File(\".\").listFiles();\nfor(File f : files){\n     System.out.println(\"contains \" + f + \" = \" + FileUtils.directoryContains(new File(\".\"), f));\n}\n{code}\n",
                "resolved": "2022-06-20",
                "versions": [
                    "2.4"
                ],
                "fixVersions": []
            },
            {
                "issue_id": "IO-496",
                "project": "Commons IO",
                "title": "javadoc of copyDirectory misleading",
                "type": "Bug",
                "description": "javadoc of copyDirectory states:\n\nThis method copies the specified directory and all its child directories and files to the specified destination. \n\nIn fact it only copies the children of the directory (contrary to copyDirectoryToDirectory).\n\n\n\n",
                "resolved": "2016-01-11",
                "versions": [
                    "2.4"
                ],
                "fixVersions": []
            },
            {
                "issue_id": "IO-494",
                "project": "Commons IO",
                "title": "Mismatch return type in api docs of class DirectoryWalker.",
                "type": "Bug",
                "description": "In the api docs of class org.apache.commons.io.DirectoryWalker<T>, topic of 3.1 External / Multi-threaded.Method handleIsCancelled in demo code returns boolean but with a void return type.",
                "resolved": "2016-01-07",
                "versions": [
                    "2.4"
                ],
                "fixVersions": [
                    "2.5"
                ]
            },
            {
                "issue_id": "IO-492",
                "project": "Commons IO",
                "title": "Typo: In an IOUtils.java comment it says \"focussed\" instead of \"focused\"",
                "type": "Bug",
                "description": "See here: https://github.com/apache/commons-io/blob/trunk/src/main/java/org/apache/commons/io/IOUtils.java#L101",
                "resolved": "2015-12-29",
                "versions": [
                    "2.4",
                    "2.5",
                    "2.6",
                    "3.x"
                ],
                "fixVersions": [
                    "2.5"
                ]
            },
            {
                "issue_id": "IO-491",
                "project": "Commons IO",
                "title": "Copying *.app corrupts the file",
                "type": "Bug",
                "description": "Hi,\n\nWhen ever I try to copy a *.app to a folder, *.app corrupts completely. \n\nThanks.",
                "resolved": "2017-02-16",
                "versions": [
                    "2.4"
                ],
                "fixVersions": []
            },
            {
                "issue_id": "IO-489",
                "project": "Commons IO",
                "title": "EmptyFileFilter doesn't work on directories using FileUtils.listFilesAndDirs",
                "type": "Bug",
                "description": "My directory tree:\n{code}\n~/ioutils> ls -lhR\n.:\ntotal 20K\ndrwxrwxr-x 2 jorge jorge 4.0K Dec  2 14:54 empty/\ndrwxrwxr-x 2 jorge jorge 4.0K Dec  2 14:54 not-empty/\n-rw-rw-r-- 1 jorge jorge    5 Dec  2 15:02 text.txt\n\n./empty:\ntotal 0\n\n./not-empty:\ntotal 12K\n-rw-rw-r-- 1 jorge jorge 5 Dec  2 14:54 text.txt\n{code}\nWhen I execute:\n{code}\nFile baseDir = new File(\"/home/jorge/ioutils\");\nIOFileFilter emptyDirectoriesFilter = FileFilterUtils.and(\n  DirectoryFileFilter.DIRECTORY, \n  EmptyFileFilter.EMPTY\n);\nFileUtils.listFilesAndDirs(baseDir, emptyDirectoriesFilter, TrueFileFilter.TRUE);\n{code}\nI obtain:\n{code}\n[/home/jorge/ioutils, /home/jorge/ioutils/not-empty, /home/jorge/ioutils/empty]\n{code}\nIssue:  {{/home/jorge/ioutils/not-empty}} directory is included in the result.\n\nBut If I execute\n{code}\nbaseDir.list(emptyDirectoriesFilter);\n{code}\nthe correct result includes {{/home/jorge/empty}} directory.\n",
                "resolved": "2015-12-03",
                "versions": [
                    "2.4"
                ],
                "fixVersions": []
            },
            {
                "issue_id": "IO-485",
                "project": "Commons IO",
                "title": "org.apache.commons.io.output.LockableFileWriter#append() overwrites rather than appends when two instance invoke this method to a same file.",
                "type": "Bug",
                "description": "LockableFileWriter fw0 = new LockableFileWriter(\"/tmp/push_failure.log\");\n        fw0.append(\"hello,\\n\");\n        fw0.flush();\n        fw0.close();\n\nLockableFileWriter fw1 = new LockableFileWriter(\"/tmp/push_failure.log\");\n        fw1.append(\"world.\");\n        fw1.flush();\n        fw1.close();\n\nthen the file's content is \"world.\"",
                "resolved": "2015-08-19",
                "versions": [
                    "2.4"
                ],
                "fixVersions": []
            },
            {
                "issue_id": "IO-484",
                "project": "Commons IO",
                "title": "FilenameUtils should handle embedded null bytes",
                "type": "Bug",
                "description": "embedding nulls in filenames exposes injection vectors if the application passes unsanitized data to some functions in FileNameUtils",
                "resolved": "2015-08-06",
                "versions": [
                    "2.4"
                ],
                "fixVersions": [
                    "2.5"
                ]
            },
            {
                "issue_id": "IO-483",
                "project": "Commons IO",
                "title": "getPrefixLength return -1 if unix file contains colon",
                "type": "Bug",
                "description": "A simple\n\n{code:java}\nint prefixLength = FilenameUtils.getPrefixLength(\"/:foo/bar\");\n{code}\n\nreturn {{-1}}, but {{0}} was expected. The path is absolutely valid for unix systems.",
                "resolved": "2016-12-02",
                "versions": [
                    "2.4"
                ],
                "fixVersions": []
            },
            {
                "issue_id": "IO-482",
                "project": "Commons IO",
                "title": "BOMInputStream.hasBOM(ByteOrderMark) do not read the BOM header",
                "type": "Bug",
                "description": "The method hasBOM(ByteOrderMark) in BOMInputStream do not read a BOM prefix.",
                "resolved": "2022-06-23",
                "versions": [
                    "2.4"
                ],
                "fixVersions": [
                    "2.11.0"
                ]
            },
            {
                "issue_id": "IO-481",
                "project": "Commons IO",
                "title": "org.apache.commons.io.FileUtils#waitFor waits too long",
                "type": "Bug",
                "description": "The timing algorithm is basically broken, since Thread.sleep is imprecise. There is also a counter error in the looping code. \n\nThe following testcase will never run in less than 4 seconds on my machine\n\n  public void testRealWallTime() {\n        long start = System.currentTimeMillis();\n        FileUtils.waitFor(new File(\"\"), 2);\n        System.out.println(\"elapsed = \" + (System.currentTimeMillis() - start));\n    }",
                "resolved": "2015-06-23",
                "versions": [
                    "2.4"
                ],
                "fixVersions": [
                    "2.5"
                ]
            },
            {
                "issue_id": "IO-480",
                "project": "Commons IO",
                "title": "IOUtils.closeQuietly can throw NullPointerException",
                "type": "Bug",
                "description": "The IOUtils#closeQuietly method in its javadoc suggests that ANY exceptions will be ignored. This is not the case, as the code only catches IOExceptions. As this example stack trace shows, it is possible for some InputStreams to throw NullPointerExceptions during close:\n\njava.lang.NullPointerException: null\n\tat java.io.FilterInputStream.close(FilterInputStream.java:155) ~[na:1.6.0_35]\n\tat sun.net.www.protocol.jar.JarURLConnection$JarURLInputStream.close(JarURLConnection.java:90) ~[na:1.6.0_35]\n\tat org.apache.commons.io.IOUtils.closeQuietly(IOUtils.java:281) ~[commons-io-2.1.jar:2.1]\n\tat org.apache.commons.io.IOUtils.closeQuietly(IOUtils.java:224) ~[commons-io-2.1.jar:2.1]\n\nClose quietly should do as advertised/suggested and catch all Exceptions.",
                "resolved": "2017-02-16",
                "versions": [
                    "2.4"
                ],
                "fixVersions": []
            },
            {
                "issue_id": "IO-479",
                "project": "Commons IO",
                "title": "Correct exception message in FileUtils.getFile(File, String...)",
                "type": "Bug",
                "description": "Placeholder issue for https://github.com/apache/commons-io/pull/3",
                "resolved": "2015-05-22",
                "versions": [
                    "2.4"
                ],
                "fixVersions": [
                    "2.5"
                ]
            },
            {
                "issue_id": "IO-474",
                "project": "Commons IO",
                "title": " veracode scan points cross site scripting vulnerability at org/.../commons/io/FileUtils.java 2095. ",
                "type": "Bug",
                "description": "We use commons-io-2.4.jar. Recently our veracode scan points cross site scripting vulnerability at org/.../commons/io/FileUtils.java 2095. Do we have a recent version that addresses this issue",
                "resolved": "2015-04-03",
                "versions": [
                    "2.4"
                ],
                "fixVersions": []
            },
            {
                "issue_id": "IO-472",
                "project": "Commons IO",
                "title": "FileUtils.openOutputStream doesn't create file if it doesn't exist",
                "type": "Bug",
                "description": "The javadoc for this method has a pretty unambiguous statement: \"The file will be created if it does not exist.\"  However, this isn't happening.  The code is pretty clear on this:\n{code:java}\npublic static FileOutputStream openOutputStream(File file, boolean append) throws IOException {\n        if (file.exists()) {\n            if (file.isDirectory()) {\n                throw new IOException(\"File '\" + file + \"' exists but is a directory\");\n            }\n            if (file.canWrite() == false) {\n                throw new IOException(\"File '\" + file + \"' cannot be written to\");\n            }\n        } else {\n            File parent = file.getParentFile();\n            if (parent != null) {\n                if (!parent.mkdirs() && !parent.isDirectory()) {\n                    throw new IOException(\"Directory '\" + parent + \"' could not be created\");\n                }\n            }\n        }\n        return new FileOutputStream(file, append);\n    }\n{code}\n\nIf it doesn't exist, it will just try to create a FileOutputStream, which throws a FileNotFoundException.",
                "resolved": "2017-04-23",
                "versions": [
                    "2.4"
                ],
                "fixVersions": []
            },
            {
                "issue_id": "IO-467",
                "project": "Commons IO",
                "title": "AbstractFileComparator class is not declared 'public'",
                "type": "Bug",
                "description": "The AbstractFileComparator class in Commons IO 2.4 is not declared 'public', so the sort method is not visible outside its package .",
                "resolved": "2015-01-29",
                "versions": [
                    "2.4"
                ],
                "fixVersions": []
            },
            {
                "issue_id": "IO-466",
                "project": "Commons IO",
                "title": "FileUtils.directoryContains returns wrong response due to startsWith comparison",
                "type": "Bug",
                "description": "Consider the following:\n{code:java}\nFile fooDir = new File(\"/temp/foo\");\nFile fooFile = new File(\"/temp/foo.txt\");\nFileUtils.directoryContains(fooDir, fooFile); // returns true, should return false\n{code}\n\nfooFile is a sibling of fooDir.  fooDir does not contain fooFile.\n\nThis is due to the way FilenameUtils.directoryContains is implemented in that this method uses a simple 'startsWith' comparison.  A related bug is filed for the FilenameUtils method that I believe should be fixed as well.",
                "resolved": "2015-06-23",
                "versions": [
                    "2.4"
                ],
                "fixVersions": []
            },
            {
                "issue_id": "IO-462",
                "project": "Commons IO",
                "title": "IOExceptionWithCause no longer needed",
                "type": "Bug",
                "description": "The class IOExceptionWithCause is no longer needed in Java 6, because IOException now includes a constructor that takes a Throwable.\n\nThe class should be deprecated and internal usage can revert to using IOException directly.",
                "resolved": "2014-12-09",
                "versions": [
                    "2.4"
                ],
                "fixVersions": [
                    "2.5"
                ]
            },
            {
                "issue_id": "IO-461",
                "project": "Commons IO",
                "title": "Veracode scan detected OS command injection vulnerability in commons-io-1.2.jar - FileSystemUtils.java:357",
                "type": "Bug",
                "description": "Commons IO is embedded in EMC Corporation's DFS 6.7SP1.\nWe performed Veracode scan for DFS 6.7SP1 and scan reported that code in commons-io-1.2.jar - FileSystemUtils.java:357 (no further details) is POSSIBLY vulnerable for OS command injection attacks.\n\nNeed update on this from Apache side.\nIt it really vulnerable? if yes, is it fixed in some future version?",
                "resolved": "2014-12-01",
                "versions": [
                    "1.2"
                ],
                "fixVersions": []
            },
            {
                "issue_id": "IO-453",
                "project": "Commons IO",
                "title": "Regression in FileUtils.readFileToString from 2.0.1",
                "type": "Bug",
                "description": "FileUtils.readFileToString has changed it's behavior to make a call from {{IOUtils.toByteArray(in)}} to {{IOUtils.toByteArray(in, file.length())}} in {{FileUtils.readFileToString}}. This is a regression because if the file.length = 0, then it will return 0. According to the javadocs for [File#length|http://docs.oracle.com/javase/6/docs/api/java/io/File.html#length()], it is possible to return 0 if it is a System dependent entities, so even though the File.length might return 0, the stream is still open and  \n\nSteps to reproduce (Ubuntu):\n1. Execute {{nohup sleep 10000 &}} in a terminal, and get the process id of the sleep command ({{ps -ef | grep sleep}}).\n2. Call {{FileUtils.readFileToString(new File(\"/proc/$PID/environ\"));}} where $PID is the process ID from step 1.\n\nYou will notice that in 2.0.1 it returns several elements, however in 2.1 it will return nothing.\n\nSee [~ndeloof]'s comment in https://github.com/apache/commons-io/commit/53a40a6d9dcaaa616b404255406edc30fe2d524c.",
                "resolved": "2014-07-30",
                "versions": [
                    "2.1",
                    "2.2",
                    "2.3",
                    "2.4"
                ],
                "fixVersions": [
                    "2.5"
                ]
            },
            {
                "issue_id": "IO-451",
                "project": "Commons IO",
                "title": "ant test fails - resources missing from test classpath",
                "type": "Bug",
                "description": "ant test does not copy test resources to target/ and does not include test resources in test class path.\nmaven test is ok.\n\nExample failure:\n----------------------------------------------\nsomeguy@weeble:~/prog/java/commons-io/commons-io$ ant clean\nBuildfile: /home/someguy/prog/java/commons-io/commons-io/build.xml\n .\n .\n .\nBUILD SUCCESSFUL\nTotal time: 0 seconds\n\nsomeguy@weeble:~/prog/java/commons-io/commons-io$ ant test\nBuildfile: /home/someguy/prog/java/commons-io/commons-io/build.xml\n .\n .\n .\n    [junit] Running org.apache.commons.io.FileUtilsListFilesTestCase\n    [junit] Tests run: 3, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.064 sec\n    [junit] Running org.apache.commons.io.FileUtilsTestCase\n    [junit] Tests run: 20, Failures: 1, Errors: 0, Skipped: 0, Time elapsed: 0.087 sec\n\nBUILD FAILED\n/home/someguy/prog/java/commons-io/commons-io/build.xml:192: Test org.apache.commons.io.FileUtilsTestCase failed\n\nTotal time: 32 seconds\n\n----------------------------------------------\n\n\ncandidate patch to resolve issue\n------------------------------------------------\n{code}\nsomeguy@weeble:~/prog/java/commons-io/commons-io$ svn diff build.xml \nIndex: build.xml\n===================================================================\n--- build.xml   (revision 1609743)\n+++ build.xml   (working copy)\n@@ -63,6 +63,9 @@\n   <!-- The base directory for unit test sources -->\n   <property name=\"test.home\"               value=\"src/test/java\"/>\n \n+  <!-- The base directory for unit test resources -->\n+  <property name=\"test.resources.home\"               value=\"src/test/resources\"/>\n+\n   <!-- Download lib dir -->\n   <property name=\"download.lib.dir\"        value=\"lib\"/>\n \n@@ -115,6 +118,7 @@\n   <path id=\"test.classpath\">\n     <pathelement location=\"${build.home}/classes\"/>\n     <pathelement location=\"${build.home}/test-classes\"/>\n+    <pathelement location=\"${build.home}/test-resources\"/>\n     <pathelement location=\"${junit.jar}\"/>\n     <path refid=\"downloaded.lib.classpath\"/>\n   </path>\n@@ -177,6 +181,9 @@\n              includeantruntime=\"false\">\n           <classpath refid=\"test.classpath\"/>\n       </javac>\n+      <copy todir=\"${build.home}/test-resources\">\n+        <fileset dir=\"${test.resources.home}\"/>\n+      </copy>\n     </target>\n \n   <target name=\"test\"  depends=\"compile.tests\"\n{code}\n",
                "resolved": "2014-07-28",
                "versions": [
                    "2.5"
                ],
                "fixVersions": [
                    "2.5"
                ]
            },
            {
                "issue_id": "IO-449",
                "project": "Commons IO",
                "title": "FileUtils.sizeOfDirectory(File) throws IllegalArgumentException on symlink that does not exist",
                "type": "Bug",
                "description": "FileUtils.isSymlink(File) will throw an IllegalArgumentException if the symbolic link does not exist. FileUtils.sizeOfDirectory(File) ignores any exceptions that are from the symbolic link. I added another catch to ignore IllegalArgumentException.",
                "resolved": "2022-06-02",
                "versions": [
                    "2.5"
                ],
                "fixVersions": [
                    "2.11.0"
                ]
            },
            {
                "issue_id": "IO-448",
                "project": "Commons IO",
                "title": "FileUtils.waitFor(...) swallows thread interrupted status",
                "type": "Bug",
                "description": "The method waits for a file to appear for a given amount of time. To do so it calls Thread.sleep several times. If the thread is interrupted, the interrupt will be ignored by catching the ThreadInterrupted exception and waiting further.\n\nCatching the ThreadInterrupted exception automatically clears the thread's interrupted flag. Consequently the calling method has no chance to detect whether the thread was interrupted. A possible solution is to restore the interrupted status before returning - something like this:\n{code}\n    public static boolean waitFor(File file, int seconds) {\n        int timeout = 0;\n        int tick = 0;\n        boolean wasInterrupted = false;\n        try {\n            while (!file.exists()) {\n                // ...\n                try {\n                    Thread.sleep(100);\n                } catch (InterruptedException ignore) {\n                    wasInterrupted = true;\n                } catch (Exception ex) {\n                    break;\n                }\n            }\n            return true;\n        } finally {\n            if (wasInterrupted) {\n                   Thread.currentThread.interrupt();\n            }\n        }\n    }\n{code}\n",
                "resolved": "2015-06-23",
                "versions": [
                    "2.4"
                ],
                "fixVersions": [
                    "2.5"
                ]
            },
            {
                "issue_id": "IO-445",
                "project": "Commons IO",
                "title": "attributes are missing in MANIFEST.MF",
                "type": "Bug",
                "description": "We are encountering an issue using commons-io-2.4.jar inside an applet.\nSince the 7U45 of java, the MANIFEST of a jar used inside an applet must be complete.\n3 attributes are missing in the MANIFEST\nTrusted-Library : true\nApplication-Name : <<as you want>>\nPermissions : all-permissions (or less if you want to be precise)\nCodebase : *\nsee : http://docs.oracle.com/javase/7/docs/technotes/guides/jweb/security/manifest.html\n\nWithout these attributes, the JRE refuse to execute an applet containing commons-io-2.4.jar.\nCould you please fix that in order to make these two jars usable inside an applet ?\n\nThanks",
                "resolved": "2014-06-07",
                "versions": [
                    "2.4"
                ],
                "fixVersions": []
            },
            {
                "issue_id": "IO-443",
                "project": "Commons IO",
                "title": "FileUtils.copyFile methods throw an unnecessary \"Failed to copy full contents from\" exception ",
                "type": "Bug",
                "description": "The private doCopyFile method of FileUtils does a comparison between the source and destination file sizes after the data has been copied. \n\nIf the destination file has been removed, renamed, or otherwise no more accessible (remote share no more available) between the finally block and the size comparison the destFile.length() returns zero. If the source file is not zero bytes in size an exception with the message \"Failed to copy full contents from '\" + srcFile + \"' to '\" + destFile \" will be thrown.\n\nRegards\nSami",
                "resolved": "2022-08-08",
                "versions": [
                    "2.4"
                ],
                "fixVersions": [
                    "2.12.0"
                ]
            },
            {
                "issue_id": "IO-442",
                "project": "Commons IO",
                "title": "Javadoc contradictory for FileFilterUtils.ageFileFilter(cutoff) and the filter it constructs: AgeFileFilter(cutoff)",
                "type": "Bug",
                "description": "Documentation states that it returns true if the file is *after* cutoff... but the code does opposite!\n{code}\n    /**\n     * Returns a filter that returns true if the file was last modified after\n     * the specified cutoff time.\n     */\n{code}\n\nBUT..the code constructs the following:\n{code}\n    public static IOFileFilter ageFileFilter(long cutoff) {\n        return new AgeFileFilter(cutoff);\n    }\n{code}\n\nAnd the Javadoc for this AgeFileFilter says...OLDER i.e. before\n{code}\n    /**\n     * Constructs a new age file filter for files equal to or older than\n     * a certain cutoff\n     *\n     * @param cutoff  the threshold age of the files\n     */\n{code}\nWhich is it?!",
                "resolved": "2017-04-23",
                "versions": [
                    "2.4"
                ],
                "fixVersions": [
                    "2.6"
                ]
            },
            {
                "issue_id": "IO-436",
                "project": "Commons IO",
                "title": "Improper JavaDoc comment for FilenameUtils.indexOfExtension",
                "type": "Bug",
                "description": "The method FilenameUtils.indexOfExtension contains this JavaDoc comment:\n\n  \\* @param filename  the filename to find the last path separator in, null returns -1\n  \\* @return the index of the last separator character, or -1 if there\n  \\* is no such character\n\nThis comment was obviously copied from the FilenameUtils.indexOfLastSeparator method, where it makes perfect sense.\n\nThe JavaDoc comment for FilenameUtils.indexOfExtension should rather read e.g. as follows:\n\n  \\* @param filename  the filename to find the last extension separator in, null returns -1\n  \\* @return the index of the last extension separator character, or -1 if there\n  \\* is no such character",
                "resolved": "2014-04-10",
                "versions": [
                    "2.4"
                ],
                "fixVersions": [
                    "2.5"
                ]
            },
            {
                "issue_id": "IO-430",
                "project": "Commons IO",
                "title": "IOUtils.copy(IS, Writer) implementation and javadoc disagrees",
                "type": "Bug",
                "description": "The Javadoc of the (deprecated) IOUtils.copy(InputStream,Writer) states:\n\n{code}\n  * This method uses {@link InputStreamReader}.\n{code}\n\nbut the actual code does not:\n\n{code}\n    @Deprecated\n    public static void copy(final InputStream input, final Writer output)\n            throws IOException {\n        copy(input, output, Charset.defaultCharset());\n    }\n{code}\n\nMy suggestion would be to change the javadoc to state \"@link copy(InputStream, Writer, Charset)} with @{code Charset.defaultCharset()}\"",
                "resolved": "2017-04-23",
                "versions": [
                    "2.5"
                ],
                "fixVersions": []
            },
            {
                "issue_id": "IO-429",
                "project": "Commons IO",
                "title": "ByteArrayOutputStream can overflow",
                "type": "Bug",
                "description": "There are many places involved in the problem, and a good fix might be problematic performance wise.\n\nFor example:\nIOUtils.toByteArray(InputStream input) invoked with a Stream which feeds more than Integer.MAX_VALUE bytes will either crash with NegativeArraySizeException or maybe worse overflow in such a way that it returns fine (but only with partial data)\n\nThe ByteArrayOutputStream will happily consume the full stream but \"int count\" will overflow. At some point then toByteArray is invoked which will do like new byte[count].\n\nmaybe \"needNewBuffer\" can throw the IllegalArgumentException, as it gets  the count and could check for the overflow.",
                "resolved": "2021-05-16",
                "versions": [],
                "fixVersions": [
                    "2.9.0"
                ]
            },
            {
                "issue_id": "IO-428",
                "project": "Commons IO",
                "title": "BOMInputStream.skip returns wrong count if stream contains no BOM",
                "type": "Bug",
                "description": "If the {{skip}} method of {{BOMInputStream}} is used on a stream without a BOM, {{skip}} returns the wrong number of bytes (n - max(BOM-length)). This can lead to problems if the return value is evaluated for example from guava {{ByteStreams.skipFully}}.\n\n{code:title=BomTest.java}\npublic class BomTest {\n\n\tprivate static InputStream createInputStream(boolean addBOM) {\n\t\tByteBuffer bb = ByteBuffer.allocate(64);\n\t\tif (addBOM) {\n\t\t\t// UTF-8 BOM\n\t\t\tbb.put(new byte[] { (byte) 0xEF, (byte) 0xBB, (byte) 0xBF });\n\t\t}\n\t\tbb.put((byte) 0x31);\n\t\tbb.put((byte) 0x32);\n\t\tbb.put((byte) 0x33);\n\t\treturn new ByteArrayInputStream(bb.array());\n\t}\n\t\n\tpublic static void main(String[] args) throws IOException {\n\t\tBOMInputStream is1 = new BOMInputStream(createInputStream(true));\n\t\tassertEquals(2, is1.skip(2));\n\t\tassertEquals((byte) 0x33, is1.read());\n\t\t\n\t\tBOMInputStream is2 = new BOMInputStream(createInputStream(false));\n\t\tassertEquals(2, is2.skip(2)); // fails here - skip returns 0\n\t\tassertEquals((byte) 0x33, is2.read());\n\t}\n\t\n}\n{code}\n\nI catched this bug in 2.0.1, but as far as I can see on the source 2.5 is still affected.\n\nI suggest the following change to the {{skip}} method:\n{code:title=BOMInputStream.java}\n    public long skip(long n) throws IOException {\n    \tint skipped = 0;\n        while ((n > skipped) && (readFirstBytes() >= 0)) {\n            skipped++;\n        }\n        return in.skip(n - skipped) + skipped;\n    }\n{code}",
                "resolved": "2015-06-23",
                "versions": [
                    "2.0.1"
                ],
                "fixVersions": [
                    "2.5"
                ]
            },
            {
                "issue_id": "IO-424",
                "project": "Commons IO",
                "title": "Javadoc fixes, mostly to appease 1.8.0",
                "type": "Bug",
                "description": null,
                "resolved": "2017-04-23",
                "versions": [],
                "fixVersions": [
                    "2.5"
                ]
            },
            {
                "issue_id": "IO-423",
                "project": "Commons IO",
                "title": "FilenameUtils.directoryContains assumes separator at end of parent path",
                "type": "Bug",
                "description": "FilenameUtils.directoryContains(\"/abc\", \"/abcd\") returns true, while FilenameUtils.directoryContains(\"/abc/\", \"/abcd\") returns false.\n\nThe implementation does a simple checkStartsWith() without taking the separator into consideration.",
                "resolved": "2014-07-16",
                "versions": [
                    "2.4"
                ],
                "fixVersions": []
            },
            {
                "issue_id": "IO-411",
                "project": "Commons IO",
                "title": "moveFile throws Exception prematurely?",
                "type": "Bug",
                "description": "This may not be an issue, but I noticed that the moveFile command throws an exception after trying and ignoring the return value of deleteQuietly. Look at line 2969 below.\n\nTaken from SVN head:\n{code}\n2965         final boolean rename = srcFile.renameTo(destFile);\n2966\t        if (!rename) {\n2967\t            copyFile( srcFile, destFile );\n2968\t            if (!srcFile.delete()) {\n2969\t                FileUtils.deleteQuietly(destFile);\n2970\t                throw new IOException(\"Failed to delete original file '\" srcFile + \"' after copy to '\" + destFile + \"'\");\n2972\t            }\n2973\t        }\n{code}\n\ndeleteQuietly will just end up trying File.delete() again which will likely fail at that point, but still, shouldn't there be another if statement there?\n\nNote: Haven't actually had issues with this.",
                "resolved": "2017-04-23",
                "versions": [
                    "2.4"
                ],
                "fixVersions": []
            },
            {
                "issue_id": "IO-401",
                "project": "Commons IO",
                "title": "[IO] copyFileToDirectory - Over-Write File",
                "type": "Bug",
                "description": "I came across a small annoyance at work today.  I have code that takes a file and copies it to a mounted directory on a remote server.  I am using FileUtils.copyFileToDirectory() to do the move, but it does not have an overwrite flag.  If something goes wrong with the file transfer over the network, and only part of the file is transferred, all subsequent attempts are blocked by the fact that the file \"already exists.\"  I would like to see another overloaded copyFileToDirectory() method with a flag to overwrite the file if it already exists.  The current behavior is to throw an IoException.\n\nThanks!",
                "resolved": "2013-10-25",
                "versions": [
                    "2.4"
                ],
                "fixVersions": [
                    "2.5"
                ]
            },
            {
                "issue_id": "IO-398",
                "project": "Commons IO",
                "title": "listener.fileRotated() will be invoked more than one time in a real rotate activity",
                "type": "Bug",
                "description": "       When Tailer considers file rotation is occurred, listener.fileRotated() will be execute, and file will re-open by \"reader = new RandomAccessFile(file, RAF_MODE);\". However, the new file may not be created yet, FileNotFoundException would be caught and while loop would be executed again and again until the new file is actually created, which cause listener.fileRotated() triggered repeatedly. \nThis is the piece of code causing the problem:\n{noformat} \nwhile (getRun()) {\n    final boolean newer = isFileNewer(file, last); // IO-279, must be done first\n    // Check the file length to see if it was rotated\n    final long length = file.length();\n    if (length < position) {\n        // File was rotated\n        listener.fileRotated();\n        // Reopen the reader after rotation\n        try {\n            // Ensure that the old file is closed iff we re-open it successfully\n            final RandomAccessFile save = reader;\n            reader = new RandomAccessFile(file, RAF_MODE);\n            /* some code */\n        } catch (final FileNotFoundException e) {\n            // in this case we continue to use the previous reader and position values\n            listener.fileNotFound();\n        }\n        continue;\n{noformat}\n      While condition checkes can be deployed in listener.fileRotated() to correct the sematic of fileRotate, it is better to prevent multiple invocation of listener.fileRotated() on this issue.",
                "resolved": "2017-04-23",
                "versions": [
                    "2.4"
                ],
                "fixVersions": []
            },
            {
                "issue_id": "IO-396",
                "project": "Commons IO",
                "title": "FileUtils.writeStringToFile() with append flag set does not work properly.",
                "type": "Bug",
                "description": "When attempting to do multiple rapid append operations on a file, not all operations are applied properly. This may indicate a handle leak. \n\nI would be happy to take a look and fix it, but I have not contributed before and need to take some time to learn how.",
                "resolved": "2013-08-21",
                "versions": [
                    "2.4"
                ],
                "fixVersions": []
            },
            {
                "issue_id": "IO-395",
                "project": "Commons IO",
                "title": "[IO] Configurable Buffered Size",
                "type": "Bug",
                "description": "Would be great if there was an environmental variable that could be set that would set the size of the IO Utils toBufferedInputStream/Writer for all invocations.",
                "resolved": "2013-10-25",
                "versions": [],
                "fixVersions": [
                    "2.5"
                ]
            },
            {
                "issue_id": "IO-390",
                "project": "Commons IO",
                "title": "FileUtils.sizeOfDirectoryAsBigInteger can overflow",
                "type": "Bug",
                "description": "FileUtils.sizeOfDirectoryAsBigInteger can overflow.\n\nThis is because it calls FileUtils.sizeOf(file) which calls sizeOfDirectory() for processing subdirectories.\n\nAs it stands, the method only works properly at the top level.\n\nA possible solution would be to create private \"Big\" versions of the called methods; these would not need all the checks so should be faster.",
                "resolved": "2013-07-10",
                "versions": [
                    "2.4"
                ],
                "fixVersions": [
                    "2.5"
                ]
            },
            {
                "issue_id": "IO-389",
                "project": "Commons IO",
                "title": "FileUtils.sizeOfDirectory can throw IllegalArgumentException",
                "type": "Bug",
                "description": "FileUtils.sizeOfDirectory has a small concurrency issue. Between the call to File.listFiles and the call to FileUtils.sizeOf, a file may be deleted. This can cause FileUtils.sizeOf to throw an IllegalArgumentException, indicating that the file does not exist.",
                "resolved": "2013-07-10",
                "versions": [],
                "fixVersions": [
                    "2.5"
                ]
            },
            {
                "issue_id": "IO-386",
                "project": "Commons IO",
                "title": "FileUtils.doCopyFile uses different methods to check the file sizes",
                "type": "Bug",
                "description": "FileUtils.doCopyFile uses FileChannel.size() to measure the input file length at the start, and File.length() to compare the lengths at the end.\n\nThis is inconsistent.\nIf there is a good reason for this it should be documented, otherwise it should probably use the same method for all the checks.\n[Note: is FileChannel.size() accurate if the file has not been flushed?]",
                "resolved": "2022-08-08",
                "versions": [],
                "fixVersions": [
                    "2.12.0"
                ]
            },
            {
                "issue_id": "IO-383",
                "project": "Commons IO",
                "title": "FileUtils.doCopyFile caches the file size; needs to be documented",
                "type": "Bug",
                "description": "FileUtils.doCopyFile saves the input file size before starting the copy.\n\nThe copy is considered complete when the original file size is reached.\n\nThe method then checks the new input file size against the destination size.\nThis will fail if the file has changed in size since the copy started.\n\nThis behaviour should be documented; also it would help if the two sizes were shown in the exception message.",
                "resolved": "2013-06-02",
                "versions": [
                    "2.4"
                ],
                "fixVersions": [
                    "2.5"
                ]
            },
            {
                "issue_id": "IO-379",
                "project": "Commons IO",
                "title": "CharSequenceInputStream - add tests for available()",
                "type": "Bug",
                "description": "There are currently no tests for the available() method.\n\nTme method should return an estimate of the number of items remaining, so it should be possible to read - or skip - that many items without reaching EOF.\n\nAt present, the code measures the number of CharBuf entries remaining; I think that is wrong - it should be the number of bytes left in the byte stream.",
                "resolved": "2013-04-22",
                "versions": [],
                "fixVersions": [
                    "2.5"
                ]
            },
            {
                "issue_id": "IO-377",
                "project": "Commons IO",
                "title": "Tailer uses default charset to read the file",
                "type": "Bug",
                "description": "The Tailer class reads bytes from a file and presents them to the TailerListener as Strings. The conversion from byte[] to String currently uses the default charset, which may not always be appropriate.",
                "resolved": "2013-05-16",
                "versions": [
                    "2.4"
                ],
                "fixVersions": []
            },
            {
                "issue_id": "IO-374",
                "project": "Commons IO",
                "title": "WildcardFileFilter ctors should not use null to mean IOCase.SENSITIVE when delegating to other ctors",
                "type": "Bug",
                "description": "WildcardFileFilter ctors should not use null to mean IOCase.SENSITIVE when delegating to other ctors.\n\nJust because null happens to mean case-sensitive, does not mean that internal calls to ctors should use that feature. It makes the code harder to read.",
                "resolved": "2013-04-07",
                "versions": [
                    "2.4"
                ],
                "fixVersions": [
                    "2.5"
                ]
            },
            {
                "issue_id": "IO-372",
                "project": "Commons IO",
                "title": "FileUtils.moveDirectory can produce misleading error message on failiure",
                "type": "Bug",
                "description": "I am seeing the following error message when trying to move a directory:\n\n\"Cannot move directory: /path/to/directory to a subdirectory of itself: /path/to/directory_renamed\"\n\nThis statement is iincorrect the destination path is not a sub directory of the source path.\n\nLooking at the source l.2752 the destination directory is being compared to the source directory without using a File.separator\n\nHere's a patch for the current trunk.\n\n{noformat}\nIndex: src/main/java/org/apache/commons/io/FileUtils.java\n===================================================================\n--- src/main/java/org/apache/commons/io/FileUtils.java\t(revision 1453996)\n+++ src/main/java/org/apache/commons/io/FileUtils.java\t(working copy)\n@@ -2803,7 +2803,7 @@\n         }\n         final boolean rename = srcDir.renameTo(destDir);\n         if (!rename) {\n-            if (destDir.getCanonicalPath().startsWith(srcDir.getCanonicalPath())) {\n+            if (destDir.getCanonicalPath().startsWith(srcDir.getCanonicalPath() + File.separator)) {\n                 throw new IOException(\"Cannot move directory: \"+srcDir+\" to a subdirectory of itself: \"+destDir);\n             }\n             copyDirectory( srcDir, destDir );\n  {noformat}",
                "resolved": "2013-04-16",
                "versions": [],
                "fixVersions": [
                    "2.5"
                ]
            },
            {
                "issue_id": "IO-370",
                "project": "Commons IO",
                "title": "Links are broken on User Guide....",
                "type": "Bug",
                "description": "When navigating the main page links most are broken.",
                "resolved": "2013-03-05",
                "versions": [
                    "2.4"
                ],
                "fixVersions": []
            },
            {
                "issue_id": "IO-369",
                "project": "Commons IO",
                "title": "Apache Commons - standard links for documents are failing",
                "type": "Bug",
                "description": "Not Found\n\nThe requested URL /proper/commons-io/api-release/index.html was not found on this server.\n\nApache/2.4.4 (Unix) OpenSSL/1.0.0g Server at commons.apache.org Port 80",
                "resolved": "2013-03-01",
                "versions": [
                    "2.4"
                ],
                "fixVersions": [
                    "2.4"
                ]
            },
            {
                "issue_id": "IO-368",
                "project": "Commons IO",
                "title": "ClassLoaderObjectInputStream does not handle primitive typed members",
                "type": "Bug",
                "description": "Any class with a simple primitive (such as long, or int) cannot be deserialized.  For example, the following code:\n\n{code:java}\n    ObjectInputStream ois = null;\n    try {\n      ois = new ClassLoaderObjectInputStream(getClass().getClassLoader(), new ByteArrayInputStream(bytes));\n      return (T) ois.readObject();\n    } catch (ClassNotFoundException e) {\n      LOGGER.error(\"Deserialization failed for {}\", objectClass, e);\n    } catch (IOException e) {\n      LOGGER.error(\"Deserialization failed for {}\", objectClass, e);\n    } finally {\n      if (ois != null) {\n        try {\n          ois.close();\n        } catch (IOException ignored) {\n        }\n      }\n    }\n{code}\n\nWill fail if bytes represents a byte[] of the serialized version of the following class:\n\n{code:java}\npublic class Foo {\n\n  private static final long serialVersionUID = 1L;\n\n  private long thisFieldWillCauseCLOISToFail;\n\n  // class logic, ctors, etc...\n\n}\n{code}\n\nWith the following stacktrace:\n\n{noformat}\nCaused by: java.lang.ClassNotFoundException: long\n        at java.net.URLClassLoader$1.run(URLClassLoader.java:202)\n        at java.security.AccessController.doPrivileged(Native Method)\n        at java.net.URLClassLoader.findClass(URLClassLoader.java:190)\n        at java.lang.ClassLoader.loadClass(ClassLoader.java:306)\n        at java.lang.ClassLoader.loadClass(ClassLoader.java:247)\n        at java.lang.Class.forName0(Native Method)\n        at java.lang.Class.forName(Class.java:247)\n        at org.apache.commons.io.input.ClassLoaderObjectInputStream.resolveClass(ClassLoaderObjectInputStream.java:68)\n        at java.io.ObjectInputStream.readNonProxyDesc(ObjectInputStream.java:1574)\n        at java.io.ObjectInputStream.readClassDesc(ObjectInputStream.java:1495)\n        at java.io.ObjectInputStream.readClass(ObjectInputStream.java:1461)\n        at java.io.ObjectInputStream.readObject0(ObjectInputStream.java:1311)\n        at java.io.ObjectInputStream.defaultReadFields(ObjectInputStream.java:1946)\n        at java.io.ObjectInputStream.readSerialData(ObjectInputStream.java:1870)\n        at java.io.ObjectInputStream.readOrdinaryObject(ObjectInputStream.java:1752)\n        at java.io.ObjectInputStream.readObject0(ObjectInputStream.java:1328)\n        at java.io.ObjectInputStream.defaultReadFields(ObjectInputStream.java:1946)\n        at java.io.ObjectInputStream.readSerialData(ObjectInputStream.java:1870)\n        at java.io.ObjectInputStream.readOrdinaryObject(ObjectInputStream.java:1752)\n        at java.io.ObjectInputStream.readObject0(ObjectInputStream.java:1328)\n        at java.io.ObjectInputStream.defaultReadFields(ObjectInputStream.java:1946)\n        at java.io.ObjectInputStream.readSerialData(ObjectInputStream.java:1870)\n        at java.io.ObjectInputStream.readOrdinaryObject(ObjectInputStream.java:1752)\n        at java.io.ObjectInputStream.readObject0(ObjectInputStream.java:1328)\n        at java.io.ObjectInputStream.defaultReadFields(ObjectInputStream.java:1946)\n        at java.io.ObjectInputStream.readSerialData(ObjectInputStream.java:1870)\n        at java.io.ObjectInputStream.readOrdinaryObject(ObjectInputStream.java:1752)\n        at java.io.ObjectInputStream.readObject0(ObjectInputStream.java:1328)\n        at java.io.ObjectInputStream.readObject(ObjectInputStream.java:350)\n        at java.util.ArrayList.readObject(ArrayList.java:593)\n        at sun.reflect.GeneratedMethodAccessor4.invoke(Unknown Source)\n        at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25)\n        at java.lang.reflect.Method.invoke(Method.java:597)\n        at java.io.ObjectStreamClass.invokeReadObject(ObjectStreamClass.java:974)\n        at java.io.ObjectInputStream.readSerialData(ObjectInputStream.java:1848)\n        at java.io.ObjectInputStream.readOrdinaryObject(ObjectInputStream.java:1752)\n        at java.io.ObjectInputStream.readObject0(ObjectInputStream.java:1328)\n        at java.io.ObjectInputStream.defaultReadFields(ObjectInputStream.java:1946)\n...\n{noformat}\n\nOf some relevance may be:\nhttp://issues.liferay.com/browse/LPS-30742\nhttps://groups.google.com/forum/?hl=en&fromgroups=#!topic/akka-user/3PC4L48qyqs",
                "resolved": "2013-04-17",
                "versions": [
                    "2.0.1"
                ],
                "fixVersions": [
                    "2.5"
                ]
            },
            {
                "issue_id": "IO-365",
                "project": "Commons IO",
                "title": "NullPointerException IOUtils",
                "type": "Bug",
                "description": "This is normal way to do like this?\n{code}\n    public static InputStream toInputStream(String input) { // if i put null here?\n        byte[] bytes = input.getBytes();\n        return new ByteArrayInputStream(bytes);\n    }\n{code}\n\nYou might to warn users of framework, you know throw some or handle it.",
                "resolved": "2013-02-01",
                "versions": [
                    "2.2"
                ],
                "fixVersions": []
            },
            {
                "issue_id": "IO-363",
                "project": "Commons IO",
                "title": "FileUtils.readFileToString((new File(\"myFile\"), null)  produces the following compilation error ",
                "type": "Bug",
                "description": "org.apache.commons.io.FileUtils.readFileToString(new File(\"myFile\"), null) in 2.4 produces the following compilation error \"The method readFileToString(File, Charset) is ambiguous for the type FileUtils\", even though the javadoc says \"encoding - the encoding to use, null means platform default\".\n\nThis is due to FileUtils having 2 readFileToString methods -  readFileToString(File file, Charset encoding) and readFileToString(File file,\nString encoding)",
                "resolved": "2013-04-16",
                "versions": [
                    "2.4"
                ],
                "fixVersions": []
            },
            {
                "issue_id": "IO-362",
                "project": "Commons IO",
                "title": "IOUtils.contentEquals* methods returns false if input1 == input2, should return true",
                "type": "Bug",
                "description": "The fix should be relatively simple, just add an identity check to the beginning of the method:\n\nif(is1 == is2) {\n  return true;\n}\n\nThe methods affected are:\n\n- org.apache.commons.io.IOUtils.contentEquals(InputStream, InputStream)\n- org.apache.commons.io.IOUtils.contentEquals(Reader, Reader)\n- org.apache.commons.io.IOUtils.contentEqualsIgnoreEOL(Reader, Reader)\n",
                "resolved": "2013-01-04",
                "versions": [
                    "2.4"
                ],
                "fixVersions": [
                    "2.5"
                ]
            },
            {
                "issue_id": "IO-361",
                "project": "Commons IO",
                "title": "Add API FileUtils.forceMkdirsParent()",
                "type": "Bug",
                "description": "Add API FileUtils.forceMkdirsParent():\n\n{code:java}\n    /**\n     * Makes any necessary but nonexistent parent directories for a given File. If the parent directory cannot be\n     * created then an IOException is thrown.\n     * \n     * @param file\n     *            file with parent to create, must not be {@code null}\n     * @throws NullPointerException\n     *             if the file is {@code null}\n     * @throws IOException\n     *             if the parent directory cannot be created\n     * @since 2.5\n     */\n    public static void forceMkdirParent(final File file) throws IOException \n{code}",
                "resolved": "2012-12-19",
                "versions": [],
                "fixVersions": [
                    "2.5"
                ]
            },
            {
                "issue_id": "IO-357",
                "project": "Commons IO",
                "title": "[Tailer] InterruptedException while the thead is sleeping is silently ignored",
                "type": "Bug",
                "description": "The implementation of org.apache.commons.io.input.Tailer silently ignores interruptions while sleeping (in two places).\n\nSource snippet:\n{code}\n360\t                    try {\n361\t                        Thread.sleep(delayMillis);\n362\t                    } catch (InterruptedException e) {\n363\t                    }\n...\n425\t                try {\n426\t                    Thread.sleep(delayMillis);\n427\t                } catch (InterruptedException e) {\n428\t                }\n{code}\n\nThis is an inappropriate behavior, since it prevents controlled shutdown by a container.\n\nThis may be rectified in one of these ways:\n\n# Declare the method as \"throws InterruptedException\" and re-throw the InterruptedException, after possibly performing come cleanup, or removing the catch clause entirely. This will ensure that a thread interruption (possibly caused by the forced shutdown by a container) will cause processing to stop, and shutdown to proceed. Problem: Requires backwards incompatible change to method signature.\n# Treat an interrupt as an alternate way of signalling the Tailer to stop, by calling {{stop()}} in the catch clause.\n# Reassert the interrupted state of the thread by calling {{Thread.currentThread.interrupt()}} to be able to detect the interruption at a later stage.\n\nFor reference, please refer to these resources about handling thread interruption:\n* http://www.ibm.com/developerworks/java/library/j-jtp05236/index.html\n* Java Concurrency in Practice http://www.javaconcurrencyinpractice.com/",
                "resolved": "2012-11-22",
                "versions": [
                    "2.4"
                ],
                "fixVersions": [
                    "2.5"
                ]
            },
            {
                "issue_id": "IO-356",
                "project": "Commons IO",
                "title": "CharSequenceInputStream#reset() behaves incorrectly in case when buffer size is not dividable by data size",
                "type": "Bug",
                "description": "The size effect happens when buffer size of input stream is not dividable by requested data size. The bug is hidden in {{CharSequenceInputStream#reset()}} method which should also call (I think) {{bbuf.limit(0)}} otherwise next call to {{CharSequenceInputStream#read()}} will return the remaining tail which {{bbuf}} has accumulated.\n\nIn the attached test case the test fails, if {{dataSize = 13}} (not dividable by 10) and runs OK if {{dataSize = 20}} (dividable by 10).",
                "resolved": "2013-04-24",
                "versions": [
                    "2.4"
                ],
                "fixVersions": [
                    "2.5"
                ]
            },
            {
                "issue_id": "IO-355",
                "project": "Commons IO",
                "title": "IOUtils copyLarge() and skip() methods are performance hogs",
                "type": "Bug",
                "description": "IOUtils.skip(InputStream, long) and IOUtils.skip(Reader, long) have the worst possible performance as they always use read() on the input instead of using skip(). In many cases, using skip() from a subclass of InputStream is much faster than read(), as the skip() can be implemented via a disk seek.\n\nThe IOUtils.skip() methods are also used in the copyLarge() methods that involve a skip.\n\nCase in point: I have observed this performance degradation with Java 7 on Windows 7. A series of consecutive copyLarge() invocations on a large file on disk that involved skips changed my performance from 30 secs as my baseline to 10 minutes after starting to use IOUtils.copyLarge().",
                "resolved": "2013-04-16",
                "versions": [
                    "2.3",
                    "2.4"
                ],
                "fixVersions": [
                    "2.5"
                ]
            },
            {
                "issue_id": "IO-354",
                "project": "Commons IO",
                "title": "Commons IO Tailer does not respect UTF-8 Charset",
                "type": "Bug",
                "description": "I just realized there is a defect in the source code of \"org.apache.commons.io.input.Tailer.java\". Basically, the current implementation does not work for multi-byte encoded files. See the following snippet,\n\n448    private long readLines(RandomAccessFile reader) throws IOException {\n449        StringBuilder sb = new StringBuilder();\n450\n451        long pos = reader.getFilePointer();\n452        long rePos = pos; // position to re-read\n453\n454        int num;\n455        boolean seenCR = false;\n456        while (run && ((num = reader.read(inbuf)) != -1)) {\n457            for (int i = 0; i < num; i++) {\n458                byte ch = inbuf[i];\n459                switch (ch) {\n460                case '\\n':\n461                    seenCR = false; // swallow CR before LF\n462                    listener.handle(sb.toString());\n463                    sb.setLength(0);\n464                    rePos = pos + i + 1;\n465                    break;\n466                case '\\r':\n467                    if (seenCR) {\n468                        sb.append('\\r');\n469                    }\n470                    seenCR = true;\n471                    break;\n472                default:\n473                    if (seenCR) {\n474                        seenCR = false; // swallow final CR\n475                        listener.handle(sb.toString());\n476                        sb.setLength(0);\n477                        rePos = pos + i + 1;\n478                    }\n479                    sb.append((char) ch); // add character, not its ascii value\n480                }\n481            }\n482\n483            pos = reader.getFilePointer();\n484        }\n485\n486        reader.seek(rePos); // Ensure we can re-read if necessary\n487        return rePos;\n488    }\n\nAt line 479, the conversion of byte to char type breaks the encoding.",
                "resolved": "2013-05-16",
                "versions": [
                    "2.3"
                ],
                "fixVersions": [
                    "2.5"
                ]
            },
            {
                "issue_id": "IO-351",
                "project": "Commons IO",
                "title": "The Tailer keeps closing and re-opening file, leads to logs lost while file rotation.",
                "type": "Bug",
                "description": "If reOpen is true, log texts reading lost while file rotation.",
                "resolved": "2013-04-16",
                "versions": [
                    "2.4"
                ],
                "fixVersions": []
            },
            {
                "issue_id": "IO-347",
                "project": "Commons IO",
                "title": "commons-io:commons-io:1.3.2 POM incorrectly deployed under org.apache.commons",
                "type": "Bug",
                "description": "As already discussed a bit on IO-125 and related to https://issues.sonatype.org/browse/MVNCENTRAL-244:\n\nhttp://repo1.maven.org/maven2/org/apache/commons/commons-io/1.3.2/commons-io-1.3.2.pom has a incorrect {{groupId}} {{commons-io}}, Artifactory e.g. complains about this.\n\nAFAIS the artifacts at org/apache/commons have the same checksums as those at commons-io. As a workaround I deployed a relocation POM https://raw.github.com/gist/3832570/ac0c2503cea5e8642035eae0904fab4ad2fb74f3/commons-io-1.3.2.pom in a repository which is searched before central in my Artifactory instance.\n",
                "resolved": "2012-11-10",
                "versions": [
                    "1.3.2"
                ],
                "fixVersions": []
            },
            {
                "issue_id": "IO-344",
                "project": "Commons IO",
                "title": "Exception throwns for  IOUtils.closeQuietly",
                "type": "Bug",
                "description": "Hi I am using apache commons tailer utilities as follows\n TailerListener listener = new VFTailerListerner();\n tailer = new Tailer(new File(myfile.txt), listener, 1000L,true);\n Thread thread = new Thread(tailer);\n thread.setDaemon(true);\n thread.start();\n\nBut on calling tailer.stop \n\nI am getting this error message \n\n\"Exception in thread \"Thread-0\" java.lang.NoSuchMethodError: org.apache.commons.io.IOUtils.closeQuietly(Ljava/io/Closeable;)V\n        at org.apache.commons.io.input.Tailer.run(Tailer.java:430)\n        at java.lang.Thread.run(Thread.java:662)\"\n\nThanks\nsirfak\n\n\t",
                "resolved": "2012-09-13",
                "versions": [
                    "2.4"
                ],
                "fixVersions": []
            },
            {
                "issue_id": "IO-343",
                "project": "Commons IO",
                "title": "org.apache.commons.io.comparator Javadoc is inconsistent with real code",
                "type": "Bug",
                "description": "Package org.apache.commons.io.comparator has a lot of inconsistent JavaDocs. \nFor example this class org.apache.commons.io.comparator.NameFileComparator\nhttp://svn.apache.org/viewvc/commons/proper/io/trunk/src/main/java/org/apache/commons/io/comparator/NameFileComparator.java?view=markup\nhas JavaDocs\n List&lt;File&gt; list = ...\n NameFileComparator.NAME_COMPARATOR.sort(list); ....\n\n File[] array = ...\n NameFileComparator.NAME_INSENSITIVE_REVERSE.sort(array);\n\nbut this will not work because all static members of NameFileComparator declared as Comparator<File> for example \n public static final Comparator<File> NAME_REVERSE = new ReverseComparator(NAME_COMPARATOR);\npublic static final Comparator<File> NAME_INSENSITIVE_REVERSE = new ReverseComparator(NAME_INSENSITIVE_COMPARATOR);\n\nand Comparator class doesn't have the sort() method.\n",
                "resolved": "2013-04-17",
                "versions": [
                    "2.4"
                ],
                "fixVersions": [
                    "2.5"
                ]
            },
            {
                "issue_id": "IO-336",
                "project": "Commons IO",
                "title": "Yottabyte (YB) incorrectly defined in FileUtils",
                "type": "Bug",
                "description": "In FileUtils, a yottabyte is currently defined as follows:\n\npublic static final BigInteger ONE_YB = ONE_ZB.multiply(BigInteger.valueOf(ONE_EB));\n\nI believe this should be:\n\npublic static final BigInteger ONE_YB = ONE_ZB.multiply(BigInteger.valueOf(ONE_KB));",
                "resolved": "2012-06-12",
                "versions": [
                    "2.3"
                ],
                "fixVersions": [
                    "2.4"
                ]
            },
            {
                "issue_id": "IO-335",
                "project": "Commons IO",
                "title": "Tailer#readLines - incorrect CR handling",
                "type": "Bug",
                "description": "The readLines method checks for CR. If found, it is not stored immediately, but a flag is set.\n\nIf the next char is an LF, the buffer is passed to the listener without the CR.\nAs soon as the next non-LF (and non-CR) character is received, the saved CR is written to the buffer.\n\nThe net result is that CR before LF migrates to the start of the next non-empty line, and repeated CRs are collapsed. This is clearly wrong.\n\nThe original code (before IO-274) used RandomAccessFile#readLine() which returns on CR, LF or CRLF.\n\nIt looks as though the intention was to retain this behaviour whilst not blocking.",
                "resolved": "2012-06-07",
                "versions": [],
                "fixVersions": [
                    "2.4"
                ]
            },
            {
                "issue_id": "IO-334",
                "project": "Commons IO",
                "title": "FileUtils.toURLs throws NPE for null parameter; this is inconsistent with toFiles method behaviour",
                "type": "Bug",
                "description": "The toFiles method treats null input the same as an empty array, however the toURLs method throws NPE for null input.\n\nThis is inconsistent.\n\nThe Javadoc for toURLs does not specify the behaviour for null input.\n\nEither the method should be fixed to treat null as an empty array, or the NPE should be documented.",
                "resolved": "2012-06-07",
                "versions": [],
                "fixVersions": [
                    "2.4"
                ]
            },
            {
                "issue_id": "IO-331",
                "project": "Commons IO",
                "title": "BOMInputStream wrongly detects UTF-32LE_BOM files as UTF-16LE_BOM files in method getBOM()",
                "type": "Bug",
                "description": "Hi,\n\nThe BOMInputStream works great for most UTF encoded files when detecting Byte Order Marks. However, if a file is UTF-32LE encoded with BOM the class takes it as UTF-16LE instead. This is not expected behavior.\n\nThe problem comes from method getBOM(). And the first two bytes for UTF-16LE and UTF-32LE are the same, which might be the root cause of the problem.\n\nThe following lists the bytes for UTF encodings for reference. The content is a BOM followed by letter 't'.\n||Encoding||Byte 1||Byte 2||Byte 3||Byte 4|| || || || ||\n|UTF8|EF|BB|BF|74| | | | |\n|UTF16-LE|FF|FE|74|00| | | | |\n|UTF16-BE|FE|FF|00|74| | | | |\n|UTF32-LE|FF|FE|00|00|74|00|00|00\n|UTF32-BE|00|00|FE|FF|00|00|00|74\n\n\nI personally used the following code to work around this problem at the moment. Hope it helps.\n\n{code}\n\tprivate void detectBOM(InputStream in) throws IOException{\n\t\tList<ByteOrderMark> all=availableBOMs();\n\t\tint max=0;\n        for (ByteOrderMark bom : all) {\n            max = Math.max(max, bom.length());\n        }\n\t\tbyte[] firstBytes=new byte[max];\n\t\tfor (int i = 0; i < max; i++) {\n\t\t\tfirstBytes[i]=(byte) in.read();\n\t\t\tSystem.out.print(Integer.toHexString(firstBytes[i] & 0xff).toUpperCase()+\" \");\n\t\t}\n\t\t\n\t\tboolean found=false;\n\t\tfor (int j = max; j >1; j--) {\n\t\t\tbyte[] _copy=Arrays.copyOf(firstBytes, j);\n\t\t\tfor (ByteOrderMark mark : all) {\n\t\t\t\tfound=Arrays.equals(_copy, mark.getBytes());\n\t\t\t\tif (found) {\n\t\t\t\t\tSystem.out.println(\"\\nBOM is: \"+mark.getCharsetName());\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (found) break;\n\t\t}\n\t}\n\t\n\tprivate static List<ByteOrderMark> availableBOMs(){\n\t\tList<ByteOrderMark> all=new ArrayList<ByteOrderMark>();\n\t\tall.add(ByteOrderMark.UTF_8);\n\t\tall.add(ByteOrderMark.UTF_16BE);\n\t\tall.add(ByteOrderMark.UTF_16LE);\n\t\tall.add(ByteOrderMark.UTF_32BE);\n\t\tall.add(ByteOrderMark.UTF_32LE);\n\t\treturn all;\n\t}\n{code}",
                "resolved": "2012-06-05",
                "versions": [
                    "2.3"
                ],
                "fixVersions": [
                    "2.4"
                ]
            },
            {
                "issue_id": "IO-329",
                "project": "Commons IO",
                "title": "FileUtils.writeLines uses unbuffered IO",
                "type": "Bug",
                "description": "FileUtils.writeLines looks like next:\n\n out = openOutputStream(file, append);\n IOUtils.writeLines(lines, lineEnding, out, encoding);\n\nopenOutputStream opens plain FileOutputStream without any buffering and IOUtils.writeLines does not add abyt buffering. This means each line require 2 write syscalls (one for the line and one for line separator). This makes call very slow, especially for short lines",
                "resolved": "2012-05-28",
                "versions": [
                    "2.3"
                ],
                "fixVersions": [
                    "2.4"
                ]
            },
            {
                "issue_id": "IO-328",
                "project": "Commons IO",
                "title": "FileUtils.listFilesAndDirs includes original dir in results even when it doesn't match filter",
                "type": "Bug",
                "description": "listFilesAndDirs seems to always include the \"directory\" passed as input in it's resulting Collection.  This is unexpected given the docs for the method...\n\nbq. Finds files within a given directory (and optionally its subdirectories). All files found are filtered by an IOFileFilter. \n\n* the \"given directory\" is not a subdirectory of itself\n* it is not subjected to the IOFileFilter dirFilter, it is always added.",
                "resolved": "2013-04-21",
                "versions": [],
                "fixVersions": [
                    "2.5"
                ]
            },
            {
                "issue_id": "IO-323",
                "project": "Commons IO",
                "title": "What should happen in FileUtils.sizeOf[Directory] when an overflow takes place?",
                "type": "Bug",
                "description": "FileUtils.sizeOf[Directory] adds longs. What should happen when an overflow happens?",
                "resolved": "2013-04-16",
                "versions": [
                    "2.3"
                ],
                "fixVersions": [
                    "2.5"
                ]
            },
            {
                "issue_id": "IO-321",
                "project": "Commons IO",
                "title": "ByteOrderMark UTF_32LE is incorrect",
                "type": "Bug",
                "description": "ByteOrderMark UTF_32LE is incorrect.\n\nIs should be {{FF FE 00 00}} not {{FE FF 00 00}}",
                "resolved": "2012-04-06",
                "versions": [],
                "fixVersions": [
                    "2.3"
                ]
            },
            {
                "issue_id": "IO-319",
                "project": "Commons IO",
                "title": "FileUtils.sizeOfDirectory follows symbolic links.",
                "type": "Bug",
                "description": "First of all Thanks tons Apache Commons folks for all the amazing work! :) My first JIRA. Yayyy. I contributed B-)\n\nA symbolic link may create a cycle and so sizeOfDirectory crashes with an IllegalArgumentException. e.g. \n{noformat}\n$ tree test\ntest\n\u251c\u2500\u2500 file\n\u2514\u2500\u2500 ravi\n    \u251c\u2500\u2500 cycle -> ../../test\n    \u2514\u2500\u2500 file\n{noformat}\n\ncauses FileUtils.sizeOfDirectory to crash like so\n\n{noformat}\njava TestJAVA\nException in thread \"main\" java.lang.IllegalArgumentException: <somepath>/test/ravi/cycle/ravi/cycle/ravi/cycle/ravi/cycle/ravi/cycle/ravi/cycle/ravi/cycle/ravi/cycle/ravi/cycle/ravi/cycle/ravi/cycle/ravi/cycle/ravi/cycle/ravi/cycle/ravi/cycle/ravi/cycle/ravi/cycle/ravi/cycle/ravi/cycle/ravi/cycle/ravi/cycle/ravi/cycle/ravi/cycle/ravi/cycle/ravi/cycle/ravi/cycle/ravi/cycle/ravi/cycle/ravi/cycle/ravi/cycle/ravi/cycle/ravi/cycle/ravi/cycle/ravi/cycle/ravi/cycle/ravi/cycle/ravi/cycle/ravi/cycle/ravi/cycle/ravi/cycle/ravi/cycle does not exist\n        at org.apache.commons.io.FileUtils.sizeOf(FileUtils.java:2053)\n        at org.apache.commons.io.FileUtils.sizeOfDirectory(FileUtils.java:2089)\n        at org.apache.commons.io.FileUtils.sizeOf(FileUtils.java:2057)\n        at org.apache.commons.io.FileUtils.sizeOfDirectory(FileUtils.java:2089)\n        at org.apache.commons.io.FileUtils.sizeOf(FileUtils.java:2057)\n        at org.apache.commons.io.FileUtils.sizeOfDirectory(FileUtils.java:2089)\n        at org.apache.commons.io.FileUtils.sizeOf(FileUtils.java:2057)\n        at org.apache.commons.io.FileUtils.sizeOfDirectory(FileUtils.java:2089)\n{noformat}\n\nWe faced the same issue in Hadoop :(. Checkout https://issues.apache.org/jira/browse/HADOOP-6963 for our solution",
                "resolved": "2012-04-16",
                "versions": [
                    "2.1"
                ],
                "fixVersions": [
                    "2.4"
                ]
            },
            {
                "issue_id": "IO-312",
                "project": "Commons IO",
                "title": "CharSequenceInputStream(CharSequence s, Charset charset, int bufferSize) ignores bufferSize",
                "type": "Bug",
                "description": null,
                "resolved": "2012-03-22",
                "versions": [],
                "fixVersions": [
                    "2.2"
                ]
            },
            {
                "issue_id": "IO-311",
                "project": "Commons IO",
                "title": "IOUtils.read(InputStream/Reader) ignores the offset parameter",
                "type": "Bug",
                "description": "IOUtils.read(InputStream input, byte[] buffer, int offset, int length) and\nread(Reader input, char[] buffer, int offset, int length) don't take the \noffset parameter into account...\n",
                "resolved": "2012-03-22",
                "versions": [],
                "fixVersions": [
                    "2.2"
                ]
            },
            {
                "issue_id": "IO-307",
                "project": "Commons IO",
                "title": "ReaderInputStream#read(byte[] b, int off, int len) should check for valid parameters",
                "type": "Bug",
                "description": "If the buffer is null, the method should throw NPE immediately (rather than letting it occur later)\n\nIf the offset or length are < 0 or would overflow the buffer, then throw IndexOutOfBoundsException with details of the values.",
                "resolved": "2012-03-14",
                "versions": [
                    "2.1"
                ],
                "fixVersions": [
                    "2.2"
                ]
            },
            {
                "issue_id": "IO-306",
                "project": "Commons IO",
                "title": "ReaderInputStream#read(byte[] b, int off, int len) should always return 0 for length == 0",
                "type": "Bug",
                "description": "The method read(byte[] b, int off, int len) should always return 0 if the requested length == 0, even if the stream is empty or at EOF, as that is how the overridden java.io.InputStream method is documented to behave.",
                "resolved": "2012-03-13",
                "versions": [
                    "2.1"
                ],
                "fixVersions": [
                    "2.2"
                ]
            },
            {
                "issue_id": "IO-304",
                "project": "Commons IO",
                "title": "The second constructor of Tailer  class does not pass 'delay' to the third one",
                "type": "Bug",
                "description": "Here is the second contructor of Tailer class:\n{code:}\n    public Tailer(File file, TailerListener listener, long delay) {\n        this(file, listener, 1000, false);\n    }\n{code}",
                "resolved": "2012-03-01",
                "versions": [
                    "2.1"
                ],
                "fixVersions": [
                    "2.2"
                ]
            },
            {
                "issue_id": "IO-303",
                "project": "Commons IO",
                "title": "TeeOutputStream does not call branch.close() when main.close() throws an exception",
                "type": "Bug",
                "description": "TeeOutputStream.close() looks like this:\n{code:title=TeeOutputStream.java|borderStyle=solid}\n    /**\n     * Closes both streams. \n     * @throws IOException if an I/O error occurs\n     */\n    @Override\n    public void close() throws IOException {\n        super.close();\n        this.branch.close();\n    }\n{code} \n\nIt is obvious that {{this.branch.close()}} is not executed when {{super.close()}} raises an exception. {{super.close()}} may in fact raise an IOException since {{ProxyOutputStream.handleIOException(IOException)}} is not overridden.",
                "resolved": "2012-02-17",
                "versions": [
                    "2.1"
                ],
                "fixVersions": [
                    "2.2"
                ]
            },
            {
                "issue_id": "IO-302",
                "project": "Commons IO",
                "title": "ArrayIndexOutOfBoundsException in BOMInputStream when reading a file without BOM multiple times",
                "type": "Bug",
                "description": "Resetting the BOMInputStream doesn't reset the _fbLength_ member variable. This causes _fbLength_ to grow bigger than the _firstBytes_ array (when the file doesn't contain a BOM), which leads to an ArrayIndexOutOfBoundsException in the _readFirstBytes_ method.\n\nThe attached test case reveals the problem.",
                "resolved": "2012-02-22",
                "versions": [
                    "2.1"
                ],
                "fixVersions": [
                    "2.2"
                ]
            },
            {
                "issue_id": "IO-300",
                "project": "Commons IO",
                "title": "FileUtils.moveDirectoryToDirectory removes source directory if destination is a subdirectory",
                "type": "Bug",
                "description": "Since moveDirectoryToDirectory performs a copy then delete, if you specify a target directory that is a subdirectory of the source, everything under the source directory is deleted.\n\nSteps to recreate:\n        File dest = new File(\"/tmp/dir1/dir2\");\n        File src  = new File(\"/tmp/dir1/\");\n\n        dest.mkdirs();\n\n        System.out.println(src.exists());\n\n        FileUtils.moveDirectoryToDirectory(src, dest, false);\n\n        System.out.println(src.exists());\n\nOutput:\n true\n false\n\nIf you try the same thing with a move command on Linux, you receive: \"mv: cannot move `dir1/' to a subdirectory of itself, `dir1/dir2/dir1'\"\n\nMaybe throw an exception if dest.getCanonicalPath().startsWith(src.getCanonicalPath())",
                "resolved": "2012-03-14",
                "versions": [],
                "fixVersions": [
                    "2.2"
                ]
            },
            {
                "issue_id": "IO-299",
                "project": "Commons IO",
                "title": "getPrefixLength returns null if filename has leading slashes",
                "type": "Bug",
                "description": "Situation:\nFilenameUtils.getPrefixLength is used in FilenameUtils.doNormalize.\nFilenameUtils.normalize(\"////I don't want to become null!\") returns null.\n\nProblem:\nExpected was: \"I don't want to become null!\"\nThe method FilenameUtils.getPrefixLength returns -1 for the mentioned string.\nThe root problem is found in following lines of code:\n{code:title=FilenameUtils.getPrefixLength}\n...\n                int posUnix = filename.indexOf(UNIX_SEPARATOR, 2);\n                int posWin = filename.indexOf(WINDOWS_SEPARATOR, 2);\n                if ((posUnix == -1 && posWin == -1) || posUnix == 2 || posWin == 2) {\n                    return -1;\n                }\n...\n{code}\n\nSolution:\nAll leading slashes should be ignored at all, but considering the rest of the string.",
                "resolved": "2013-04-22",
                "versions": [
                    "2.0.1",
                    "2.1"
                ],
                "fixVersions": [
                    "2.5"
                ]
            },
            {
                "issue_id": "IO-298",
                "project": "Commons IO",
                "title": "Various methods of class 'org.apache.commons.io.FileUtils' incorrectly suppress 'java.io.IOException's.",
                "type": "Bug",
                "description": null,
                "resolved": "2012-03-01",
                "versions": [
                    "2.1"
                ],
                "fixVersions": [
                    "2.2"
                ]
            },
            {
                "issue_id": "IO-283",
                "project": "Commons IO",
                "title": "When using the 2.0 Commons IO, there is no sort method for LastModifiedFileComparator",
                "type": "Bug",
                "description": "Although the javadocs and source code from version 2.0 of Apache Commons makes mentions of a sort method, the actual jar does not have the sort method that is available. It seems that the LastModifiedFileComparator in the jar is not extending AbstractFileComparator like it is in the source code.",
                "resolved": "2011-09-05",
                "versions": [
                    "2.0"
                ],
                "fixVersions": []
            },
            {
                "issue_id": "IO-281",
                "project": "Commons IO",
                "title": "WildcardFileFilter fails for wild card pattern with a '*' in it",
                "type": "Bug",
                "description": "The code below reports no files found when there is a file matching the wild card pattern.  If I enter this command in a DOS windows in the same directory it finds the file so the wild card pattern is correct as far as DOS is concerned:\n\n{code}\nC:\\dean\\clipper\\src\\metadata.mail>dir 320620110821433-*.RWD\n \n Directory of C:\\dean\\clipper\\src\\metadata.mail\n\n08/22/2011  12:36 PM             9,728 320620110821433-1.RWD\n               1 File(s)          9,728 bytes\n               0 Dir(s)  50,033,049,600 bytes free\n{code}\n\nThis code should work according to the docs but it reports no file found:\n\n{code}\n\tvoid testFileNameFilter() throws IOException {\n\t\t\n\t\tString fileNamePrefix = \"320620110821433\";\n\t\tFile f = new File(fileNamePrefix + \".rwd\");\n\t\tString filterString = fileNamePrefix + \"-*.RWD\";\n\t\tFileFilter filter = new WildcardFileFilter(filterString, IOCase.SYSTEM);\n\t\tFile dir = f.getCanonicalFile();\n\t\tFile[] existingFiles = dir.listFiles(filter);\n\t\t\n\t\tif (existingFiles != null)\n\t\t\tfor (File f2 : existingFiles)\n\t\t\t\tSystem.out.println(f2.getName());\n\t\telse\n\t\t\tSystem.out.println(\"No files found for\" + filterString);\n\t}\n{code}\n",
                "resolved": "2011-08-23",
                "versions": [
                    "1.3.2"
                ],
                "fixVersions": []
            },
            {
                "issue_id": "IO-280",
                "project": "Commons IO",
                "title": "Dubious use of mkdirs() return code",
                "type": "Bug",
                "description": "FileUtils.openOutputStream() has the following code:\n\n{code}\nFile parent = file.getParentFile();\nif (parent != null && parent.exists() == false) {\n    if (parent.mkdirs() == false) {\n        throw new IOException(\"File '\" + file + \"' could not be created\");\n    }\n}\n{code}\n\nNow mkdirs() returns true only if the method actually created the directories; it's theoretically possible for the directory to be created in the window between the exists() and mkdirs() invocations. [Indeed the class actually checks for this in the forceMkdir() method]\n\nIt would be safer to use:\n\n{code}\nFile parent = file.getParentFile();\nif (parent != null && !parent.mkdirs() && !parent.isDirectory()) {\n    throw new IOException(\"Directory '\" + parent + \"' could not be created\"); // note changed text\n}\n{code}\n\nSimilarly elsewhere in the class where mkdirs() is used.",
                "resolved": "2011-08-30",
                "versions": [],
                "fixVersions": [
                    "2.1"
                ]
            },
            {
                "issue_id": "IO-277",
                "project": "Commons IO",
                "title": "ReaderInputStream enters infinite loop when it encounters an unmappable character",
                "type": "Bug",
                "description": "The ReaderInputStream.read(byte[] b, int off, int len) method enters an infinite loop when its CharsetEncoder encounters an unmappable character in the input buffer.\n\nWhen its CharsetEncoder encounters an unmappable character, the value of CoderResult lastCoderResult.isUnmappable() == true, and Reader.read() is not invoked on the underlying Reader ever again.\n\nAttaching source file that reproduces this behavior.\n\n\n\nOne fix to consider is to call CharsetEncoder.onUnmappableCharacter(CodingErrorAction) in the ReaderInputStream constructor with a value other than the default CodingErrorAction.REPORT. e.g.:\n\npublic ReaderInputStream(Reader reader, Charset charset, int bufferSize) {\n            this.reader = reader;\n            encoder = charset.newEncoder();\n            encoder.onUnmappableCharacter(CodingErrorAction.REPLACE);\n...\n\nBy replacing the unmappable character with encoder's default replacement character, this effectively prevents the infinite loop from occurring. I'm not sure if that's the ideal behavior, but it seems fairly consistent with what org.apache.commons.io.output.WriterOutputStream does.\n",
                "resolved": "2011-09-05",
                "versions": [
                    "2.0.1"
                ],
                "fixVersions": [
                    "2.1"
                ]
            },
            {
                "issue_id": "IO-276",
                "project": "Commons IO",
                "title": "\"FileUtils#deleteDirectoryOnExit(File)\" does not work",
                "type": "Bug",
                "description": "I called this method, but the target directory was not deleted.\n\n\nThe source of this method is as follows.\n----------\n    private static void deleteDirectoryOnExit(File directory) throws IOException {\n        if (!directory.exists()) {\n            return;\n        }\n\n        cleanDirectoryOnExit(directory);\n        directory.deleteOnExit();\n    }\n----------\nIn other words, this method calls \"java.io.File#deleteOnExit\" in order of \"grandchildren -> children -> parent\" for files of the target directory hierarchy.\n\n\nThere is following mention in javadoc of \"java.io.File#deleteOnExit\".\n----------\nFiles (or directories) are deleted in the reverse order that they are registered.\n----------\n\n\nTherefore, I think the calling order of \"java.io.File#deleteOnExit\" should be reverse.\n\n\nHow will be it?",
                "resolved": "2012-03-01",
                "versions": [],
                "fixVersions": [
                    "2.2"
                ]
            },
            {
                "issue_id": "IO-274",
                "project": "Commons IO",
                "title": "Tailer returning partial lines when reaching EOF before EOL",
                "type": "Bug",
                "description": "As reported here: http://mail-archives.apache.org/mod_mbox/commons-user/201105.mbox/%3cBANLkTim6hA-xGjn8cA6FfcPkVa6ax6KGag@mail.gmail.com%3e",
                "resolved": "2011-05-26",
                "versions": [
                    "2.0.1"
                ],
                "fixVersions": [
                    "2.1"
                ]
            },
            {
                "issue_id": "IO-273",
                "project": "Commons IO",
                "title": "BoundedInputStream.read() treats max differently from BoundedInputStream.read(byte[]...)",
                "type": "Bug",
                "description": "BoundedInputStream.read() treats max differently from BoundedInputStream.read(byte[]...)\n\nread() checks for pos == max, whereas read(byte[]...) checks for pos >= max.\n\nThe latter check is safer (works even if pos overshoots max).",
                "resolved": "2012-03-01",
                "versions": [],
                "fixVersions": [
                    "2.2"
                ]
            },
            {
                "issue_id": "IO-270",
                "project": "Commons IO",
                "title": "\"IllegalArgumentException: Negative time\" copying to Windows share",
                "type": "Bug",
                "description": "A customer reported the following exception to us:\n\n{noformat}java.lang.IllegalArgumentException: Negative time\n      at java.io.File.setLastModified(File.java:1258)\n      at org.apache.commons.io.FileUtils.doCopyFile(FileUtils.java:686)\n      at org.apache.commons.io.FileUtils.copyFile(FileUtils.java:653)\n      at org.apache.commons.io.FileUtils.copyFile(FileUtils.java:607)\n      at <in house code>{noformat}\n\nPart of the problem is the exception itself but also our code was expecting FileUtils to throw IOException instead of ISE.",
                "resolved": "2011-11-10",
                "versions": [
                    "1.4"
                ],
                "fixVersions": []
            },
            {
                "issue_id": "IO-269",
                "project": "Commons IO",
                "title": "Tailer locks file from deletion/rename on Windows",
                "type": "Bug",
                "description": "The Tailer code works on Windows, except that it locks the file against deletion or rename.\n\nThe test code fails to detect this, because it fails to check if the file deletion succeeds.\n\nThis seems to be a Windows OS issue.\n\nA possible solution might be to keep closing and re-opening the file.\n",
                "resolved": "2012-06-11",
                "versions": [],
                "fixVersions": [
                    "2.4"
                ]
            },
            {
                "issue_id": "IO-266",
                "project": "Commons IO",
                "title": "FileUtils.copyFile() throws IOException when copying large files to a shared directory (on Windows)",
                "type": "Bug",
                "description": "java.io.IOException: Insufficient system resources exist to complete the requested service\n\tat sun.nio.ch.FileDispatcher.pwrite0(Native Method)\n\tat sun.nio.ch.FileDispatcher.pwrite(Unknown Source)\n\tat sun.nio.ch.IOUtil.writeFromNativeBuffer(Unknown Source)\n\tat sun.nio.ch.IOUtil.write(Unknown Source)\n\tat sun.nio.ch.FileChannelImpl.write(Unknown Source)\n\tat sun.nio.ch.FileChannelImpl.transferFromFileChannel(Unknown Source)\n\tat sun.nio.ch.FileChannelImpl.transferFrom(Unknown Source)\n\tat org.apache.commons.io.FileUtils.doCopyFile(FileUtils.java:813)\n\tat org.apache.commons.io.FileUtils.copyFile(FileUtils.java:783)\n\tat org.test.igor.TestFileUtils.main(TestFileUtils.java:55)\n\nNOTE: the issue is cased by the function doCopyFile(File srcFile, File destFile, boolean preserveFileDate) using hardcoded data chunks of FIFTY_MB in the transferFrom() call.\nReducing this chunk from 50M to 31M solves the issue for my situation (32M still fails).\n\nHere is a test program to reproduce the issue:\n\npackage org.test.igor;\n\nimport java.io.File;\nimport java.io.FileInputStream;\nimport java.io.FileOutputStream;\nimport java.io.IOException;\nimport java.nio.channels.FileChannel;\n\nimport org.apache.commons.io.FileUtils;\nimport org.apache.commons.io.IOUtils;\n\npublic class TestFileUtils {\n\n    public static void main(String[] args){\n        \n        \n        File src = new File(\"D:\\\\2011.1-dev\\\\test\\\\test\");\n        File dest = new File(\"\\\\\\\\ismerek1\\\\Shared\");\n        \n        String filename = \"jdk-6u19-windows-x64.exe\";\n        \n        File file = new File(src, filename);\n        File toFile = new File(dest, filename);\n        \n        try {\n            FileUtils.copyFile(file, toFile, true);\n            System.out.println(\"Successful copy\");\n        }\n        catch (IOException e1) {\n            e1.printStackTrace();\n        }\n    }\n}\n\n\n\n\n\n\n",
                "resolved": "2011-05-09",
                "versions": [
                    "2.0.1"
                ],
                "fixVersions": [
                    "2.1"
                ]
            },
            {
                "issue_id": "IO-264",
                "project": "Commons IO",
                "title": "FileUtils.moveFile() JavaDoc should specify FileExistsException thrown",
                "type": "Bug",
                "description": "FileUtils.moveFile() JavaDoc does specify the behaviour of the method in a case when the destFile exists. It would be helpful to know from the JavaDoc that in such case an exception is thrown as it's not immediately obvious.",
                "resolved": "2011-03-12",
                "versions": [
                    "2.0"
                ],
                "fixVersions": [
                    "2.1"
                ]
            },
            {
                "issue_id": "IO-263",
                "project": "Commons IO",
                "title": "FileSystemUtils.freeSpaceKb throws exception for Windows volumes with no visible files.",
                "type": "Bug",
                "description": "Doing a FileSystemUtils.freeSpaceKb(\"D:/\") where the drive (in this example d:\\) is an empty drive (A drive with no non-hidden files on it yet) results in an exception being thrown.\n\n     \"Command line returned OS error code '1' for command [cmd.exe, /C, dir /-c \"D:\\\"]\n\nPerhaps it could do a \"dir /a /-c\" to work in more cases? (Since hidden file \"System Volume Information\" will usually be available)",
                "resolved": "2011-04-10",
                "versions": [
                    "2.0.1"
                ],
                "fixVersions": [
                    "2.1"
                ]
            },
            {
                "issue_id": "IO-260",
                "project": "Commons IO",
                "title": "ClassLoaderObjectInputStream does not handle Proxy classes",
                "type": "Bug",
                "description": "ObjectInputSteam has 2 methods that need to be overloaded for proper behavior in this case.\n\nresolveClass is ok, but resolveProxyClass doesn't attempt to look in the passed class loader to resolve the interfaces.",
                "resolved": "2011-03-12",
                "versions": [
                    "2.0.1"
                ],
                "fixVersions": [
                    "2.1"
                ]
            },
            {
                "issue_id": "IO-258",
                "project": "Commons IO",
                "title": "XmlStreamReader consumes the stream during encoding detection",
                "type": "Bug",
                "description": "XmlStreamReader reads the underlying InputStream to try and detect the encoding. However once that process is done the bytes read from the stream should still be available to be read - this was accidentally broken in r1004882 by creating the underlying reader with the original InputStream, rather than the wrapped streams used to detect encoding.",
                "resolved": "2010-12-23",
                "versions": [
                    "2.0"
                ],
                "fixVersions": [
                    "2.0.1"
                ]
            },
            {
                "issue_id": "IO-257",
                "project": "Commons IO",
                "title": "BOMInputStream.read(byte[]) can return 0 which it should not",
                "type": "Bug",
                "description": "BOMInputStream.read(byte[]) returns 0 when it should return -1.\n\nThis is not a valid action (unless buf.length == 0) and can cause problems, e.g. \"java.io.IOException: Underlying input stream returned zero bytes - at sun.nio.cs.StreamDecoder.readBytes(StreamDecoder.java:268)\"\n\nFrom java.io.InputStream.read(byte[]) JavaDocs: \"If the length of b is zero, then no bytes are read and 0 is returned; otherwise, there is an attempt to read at least one byte. If no byte is available because the stream is at the end of the file, the value -1 is returned; otherwise, at least one byte is read and stored into b.\"\n\nSuggested fix, change line 287 of BOMInputStream.java from\n        return (secondCount < 0) ? firstCount : firstCount + secondCount;\ninto\n        return (secondCount < 0) ? (firstCount > 0 ? firstCount : -1) : firstCount + secondCount;\n",
                "resolved": "2010-12-22",
                "versions": [
                    "2.0"
                ],
                "fixVersions": [
                    "2.0.1"
                ]
            },
            {
                "issue_id": "IO-253",
                "project": "Commons IO",
                "title": "Test Failures using IBM JDK",
                "type": "Bug",
                "description": "J\u00f6rg Schaible reports the following test failures in RC5 of Commons IO 2.0\n\n    * http://markmail.org/message/eoo5bk6n3pfsvfwk\n\n\"IBM JDK 1.5 does not like the OOME handling in the FileCleanerTestCase and FileCleanerTrackingTestCase, while IBM JDK 1.6 has problems with the WriterOutputStream handling UTF16.\"",
                "resolved": "2017-04-23",
                "versions": [
                    "2.0"
                ],
                "fixVersions": [
                    "2.5"
                ]
            },
            {
                "issue_id": "IO-252",
                "project": "Commons IO",
                "title": "NumberFormatException from FileUtils.toFile method",
                "type": "Bug",
                "description": "Certain strings can cause the org.apache.commons.io.FileUtils.toFile(URL url) method to call Integer.parseInt with an invalid argument and thus throw a NumberFormatException:\n\nException in thread \"main\" java.lang.NumberFormatException: For input string: \"%2\"\n\tat java.lang.NumberFormatException.forInputString(NumberFormatException.java:48)\n\tat java.lang.Integer.parseInt(Integer.java:449)\n\tat org.apache.commons.io.FileUtils.toFile(FileUtils.java:476)\n\nOne example of such a string: \"both%20are%20100%20%25%20true\"\n",
                "resolved": "2010-10-14",
                "versions": [
                    "1.4"
                ],
                "fixVersions": []
            },
            {
                "issue_id": "IO-248",
                "project": "Commons IO",
                "title": "getFullPathNoEndSeparator return empty while path is one level directory",
                "type": "Bug",
                "description": "the getFullPathNoEndSeparator method in FilenameUtils.java (Revision 736890) \nif filename=\"/\" return \"/\" <<==right\nif filename=\"/abc\" return empty <<==bug\nif filename=\"/abc/xyz\" return \"/abc\" <<==right \n\n\n{code}\n885 \tint index = indexOfLastSeparator(filename);\n886 \tif (index < 0) {\n887 \t\treturn filename.substring(0, prefix);\n888 \t}\n889 \tint end = index + (includeSeparator ? 1 : 0);\n================\n                if(end==0) return \"/\";\n>>>>>>>>>>>>>>>>\n890 \treturn filename.substring(0, end);\n{code}",
                "resolved": "2010-09-29",
                "versions": [
                    "1.4"
                ],
                "fixVersions": [
                    "2.0"
                ]
            },
            {
                "issue_id": "IO-246",
                "project": "Commons IO",
                "title": "FilenameUtils.wildcardMatch gives incorrect results",
                "type": "Bug",
                "description": "This wildcard pattern \"*?\" does not match correctly. The command:\n\nSystem.out.println(FilenameUtils.wildcardMatch(\"aaa\", \"*?\"));\n\nprints out \"false\", even though it matches. The wildcard mask is a bit unusal, but not incorrect. It should match any input with at least one character.",
                "resolved": "2010-09-29",
                "versions": [
                    "1.4"
                ],
                "fixVersions": [
                    "2.0"
                ]
            },
            {
                "issue_id": "IO-245",
                "project": "Commons IO",
                "title": "FileSystemUtils.freeSpaceKb fail and causes to reboot the machine",
                "type": "Bug",
                "description": "My application server is running as windows service. One of it's components - responsible check free disk space  Then it call to FileSystemUtils.freeSpaceKb(path) - throws IO Exception and server shutting down: \n\n\nINFO   | jvm 1    | 2010/06/02 23:25:03 | 23:25:03,535 ERROR [ManagementLog] Filed to check server free disk space. \nINFO   | jvm 1    | 2010/06/02 23:25:03 | java.io.IOException: Command line returned OS error code '128' for command [cmd.exe, /C, dir /-c D:]\nINFO   | jvm 1    | 2010/06/02 23:25:03 | \tat org.apache.commons.io.FileSystemUtils.performCommand(FileSystemUtils.java:419)\nINFO   | jvm 1    | 2010/06/02 23:25:03 | \tat org.apache.commons.io.FileSystemUtils.freeSpaceWindows(FileSystemUtils.java:225)\nINFO   | jvm 1    | 2010/06/02 23:25:03 | \tat org.apache.commons.io.FileSystemUtils.freeSpaceOS(FileSystemUtils.java:194)\nINFO   | jvm 1    | 2010/06/02 23:25:03 | \tat org.apache.commons.io.FileSystemUtils.freeSpaceKb(FileSystemUtils.java:166)\nINFO   | jvm 1    | 2010/06/02 23:25:03 | \tat com.proficiency.cg.core.utils.job.ServerDiskSpaceChecker.isDiskSpaceAvailable(ServerDiskSpaceChecker.java:151)\nINFO   | jvm 1    | 2010/06/02 23:25:03 | \tat com.proficiency.cg.core.utils.job.ServerDiskSpaceChecker.perform(ServerDiskSpaceChecker.java:93)\nINFO   | jvm 1    | 2010/06/02 23:25:03 | \tat org.jboss.varia.scheduler.Scheduler$Listener.handleNotification(Scheduler.java:1221)\nINFO   | jvm 1    | 2010/06/02 23:25:03 | \tat sun.reflect.GeneratedMethodAccessor3.invoke(Unknown Source)\nINFO   | jvm 1    | 2010/06/02 23:25:03 | \tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25)\nINFO   | jvm 1    | 2010/06/02 23:25:03 | \tat java.lang.reflect.Method.invoke(Method.java:585)\nINFO   | jvm 1    | 2010/06/02 23:25:03 | \tat org.jboss.mx.notification.NotificationListenerProxy.invoke(NotificationListenerProxy.java:138)\nINFO   | jvm 1    | 2010/06/02 23:25:03 | \tat $Proxy9.handleNotification(Unknown Source)\nINFO   | jvm 1    | 2010/06/02 23:25:03 | \tat javax.management.NotificationBroadcasterSupport.handleNotification(NotificationBroadcasterSupport.java:221)\nINFO   | jvm 1    | 2010/06/02 23:25:03 | \tat javax.management.NotificationBroadcasterSupport.sendNotification(NotificationBroadcasterSupport.java:184)\nINFO   | jvm 1    | 2010/06/02 23:25:03 | \tat javax.management.timer.Timer.sendNotification(Timer.java:1295)\nINFO   | jvm 1    | 2010/06/02 23:25:03 | \tat javax.management.timer.Timer.notifyAlarmClock(Timer.java:1264)\nINFO   | jvm 1    | 2010/06/02 23:25:03 | \tat javax.management.timer.TimerAlarmClock.run(Timer.java:1347)\nINFO   | jvm 1    | 2010/06/02 23:25:03 | \tat java.util.TimerThread.mainLoop(Timer.java:512)\nINFO   | jvm 1    | 2010/06/02 23:25:03 | \tat java.util.TimerThread.run(Timer.java:462)\nSTATUS | wrapper  | 2010/06/02 23:25:16 | Machine is shutting down.\nINFO   | jvm 1    | 2010/06/02 23:25:16 | 23:25:16,754 INFO  [Server] JBoss SHUTDOWN: Undeploying all packages\n  ",
                "resolved": "2010-06-06",
                "versions": [
                    "1.4"
                ],
                "fixVersions": []
            },
            {
                "issue_id": "IO-243",
                "project": "Commons IO",
                "title": "SwappedDataInputStream readBoolean is inverted",
                "type": "Bug",
                "description": "The method readBoolean in SwappedDataInputStream returns true when the byte is zero, false otherwise. In accordance with the contract in java.io.DataInput, true should indicate a non-zero byte. SwappedDataInputStream is for reading Little Endian formats, it should not change the boolean value of individual bytes.",
                "resolved": "2010-09-08",
                "versions": [
                    "1.0",
                    "1.1",
                    "1.2",
                    "1.3",
                    "1.3.1",
                    "1.3.2",
                    "1.4"
                ],
                "fixVersions": [
                    "2.0"
                ]
            },
            {
                "issue_id": "IO-241",
                "project": "Commons IO",
                "title": "CompositeFileComparator(Comparator<File>... delegates) - Using varargs for non-reifiable type goes against type-safety",
                "type": "Bug",
                "description": "The constructor CompositeFileComparator(Comparator<File>... delegates)  cannot be used without generating a Type safety warning.\n\nThis is because the type is not reifiable.\n\nThis is a new class, so I suggest this constructor is replaced with something that supports type-safety, for example List.",
                "resolved": "2010-09-28",
                "versions": [
                    "2.0"
                ],
                "fixVersions": []
            },
            {
                "issue_id": "IO-240",
                "project": "Commons IO",
                "title": "FileFilterUtils can create cvsFilter and svnFilter more than once",
                "type": "Bug",
                "description": "FileFilterUtils lazily creates the static fields cvsFilter and svnFilter; however access to the fields is not synchronized and the fields are not volatile.\n\nOne thread can create the filter, but the updated value won't necessarily be seen by any/all other threads.\n\nThis means that the fields can be created multiple times.\n\nPossible solutions: make the fields volatile, or use the singleton IODH idiom. The latter uses a bit more code, but is probably marginally cheaper if the field is used a lot.",
                "resolved": "2010-08-05",
                "versions": [],
                "fixVersions": [
                    "2.0"
                ]
            },
            {
                "issue_id": "IO-235",
                "project": "Commons IO",
                "title": "Bugs in CopyUtilsTest test cases?",
                "type": "Bug",
                "description": "testCopy_byteArrayToWriter() has the following code:\n\n{code}\nByteArrayOutputStream baout = new ByteArrayOutputStream();\nOutputStream out = new YellOnFlushAndCloseOutputStream(baout, false, true); // out is not used\nWriter writer = new java.io.OutputStreamWriter(baout, \"US-ASCII\"); // uses baout - should it use out instead\n{code}\n\nIt looks like the Writer should be created from out rather than baout - otherwise why create out?\n\nSimilarly for\n\ntestCopy_inputStreamToWriter()\ntestCopy_readerToWriter()\ntestCopy_stringToWriter()\n\nThe tests still pass if the Writer is changed to use out.\n\nThoughts?",
                "resolved": "2010-08-04",
                "versions": [],
                "fixVersions": [
                    "2.0"
                ]
            },
            {
                "issue_id": "IO-231",
                "project": "Commons IO",
                "title": "FileUtils generate wrong exception message in isFileNewer method",
                "type": "Bug",
                "description": "{code}\nif (!reference.exists()) {\n    throw new IllegalArgumentException(\"The reference file '\" + file + \"' doesn't exist\");\n}\n{code}\nIf second argument file does not exist isFileNewer method generates exception with message about first argument file does not exist.",
                "resolved": "2010-03-04",
                "versions": [
                    "1.4"
                ],
                "fixVersions": [
                    "2.0"
                ]
            },
            {
                "issue_id": "IO-227",
                "project": "Commons IO",
                "title": "AutoCloseInputStream.read() throws IOException after autoclose",
                "type": "Bug",
                "description": "A custom reported a problem, wherein our product was catching and logging many IOExceptions.  Upon examining the logs I see:\n\njava.io.IOException: Attempted read on closed stream.\n\tat org.apache.commons.httpclient.AutoCloseInputStream.isReadAllowed(AutoCloseInputStream.java:183)\n\tat org.apache.commons.httpclient.AutoCloseInputStream.read(AutoCloseInputStream.java:107)\n\tat java.io.FilterInputStream.read(FilterInputStream.java:116)\n\tat com.acme.DocPusher$BigEmptyDocumentFilterInputStream.read(DocPusher.java:679)\n\tat com.acme.CompressedFilterInputStream.fillbuff(CompressedFilterInputStream.java:96)\n\tat com.acme.CompressedFilterInputStream.read(CompressedFilterInputStream.java:67)\n\tat com.acme.Base64FilterInputStream.fillbuff(Base64FilterInputStream.java:138)\n\tat com.acme.Base64FilterInputStream.read(Base64FilterInputStream.java:115)\n\tat java.io.FilterInputStream.read(FilterInputStream.java:116)\n\tat com.acme.DocPusher$AlternateContentFilterInputStream.read(DocPusher.java:609)\n        ...\n\nAs you can see, this is a pipeline consisting of multiple FilterInputStream segments that process data flowing through the pipeline.  The source of the data is in InputStream provided by a third party plug-in component.  In our customer's situation, that InputStream is a AutoCloseInputStream returned by a Sharepoint API call.\n\nWhen I saw the \"Attempted read on closed stream.\", I was incredulous; \"Reading from a closed stream - that's a rookie mistake.\"  However, when examining the JavaDoc for AutoCloseInputStream, I read:  [emphasis mine]\n\"Proxy stream that closes and discards the underlying stream *as soon as the end of input has been reached* or when the stream is explicitly closed.\"\n\n\n",
                "resolved": "2010-01-28",
                "versions": [
                    "1.4"
                ],
                "fixVersions": []
            },
            {
                "issue_id": "IO-225",
                "project": "Commons IO",
                "title": "UTF-8 support on CSV",
                "type": "Bug",
                "description": "I have a struts 2 application from which user can download CSV file. \nThe problem is \n I download the CSV on the website then save to desktop of my computer and Open it on NOTEPAD... \nthat works fine I could still see all the utf-8 text OK with no problem, but if I open the CSV file in Microsoft EXCEL, \nall the  utf-8 text are no longer readable. \n\nDoes any one have the solution for this, how could I make it readable in MS Excel \nI am using org.apache.commons.io.FileUtils \nFileUtils.writeStringToFile(file, test); \ni also tried it with \nFileUtils.writeStringToFile(file, test,encoding) method \nStill the problem exists",
                "resolved": "2009-12-31",
                "versions": [
                    "1.4"
                ],
                "fixVersions": []
            },
            {
                "issue_id": "IO-223",
                "project": "Commons IO",
                "title": "IOUtils.copy Javadoc inconsistency (return -1 vs. throw ArithmeticException)",
                "type": "Bug",
                "description": "The javadoc for IOUtils.copy says:\n\"Large streams (over 2GB) will return a bytes copied value of -1 after the copy has completed since the correct number of bytes cannot be returned as an int.\"\nbut then it says:\n\"Throws:\nArithmeticException - if the byte count is too large\"\nThis is an inconsistency since -1 is always returned if the byte count is too large. ArithmeticException is never actually thrown.\n\nSee IO-84 for discussion on solving the \"too large byte count\" problem.",
                "resolved": "2010-01-07",
                "versions": [
                    "1.3",
                    "1.3.1",
                    "1.3.2",
                    "1.4"
                ],
                "fixVersions": [
                    "2.0"
                ]
            },
            {
                "issue_id": "IO-220",
                "project": "Commons IO",
                "title": "FileCleaningTracker Vector performs badly under load",
                "type": "Bug",
                "description": "When subjected to heavy load, the performance of org.apache.commons.io.FileCleaningTracker degrades and becomes a bottleneck to the system.  In our case, we had over 2 millions entries on the \"trackers\" Vector.  Under these conditions, the call to trackers.remove(tracker) on line 214 becomes very inefficient as it causes the Vector to shift and reindex the remaining data.  In addition, calls to trackers.add are forced to wait on the inefficient remove operation.  With the application idle, it took several hours for the File Reaper thread to finish processing the entries on the trackers Vector.\n\nThe solution for use was to implement trackers as a HashSet instead of a Vector.  Thus line 52 was changed from:\n    final Collection /* Tracker */ trackers = new Vector();  // synchronized\nto\n    final Collection /* Tracker */ trackers = Collections.synchronizedSet(new HashSet());  // synchronized\nImports were also change appropriately.",
                "resolved": "2010-08-04",
                "versions": [
                    "1.0",
                    "1.1",
                    "1.2",
                    "1.3",
                    "1.3.1",
                    "1.3.2",
                    "1.4",
                    "2.0",
                    "3.x"
                ],
                "fixVersions": [
                    "2.0"
                ]
            },
            {
                "issue_id": "IO-217",
                "project": "Commons IO",
                "title": "FileUtils.copyDirectoryToDirectory makes infinite loops",
                "type": "Bug",
                "description": "When using FileUtils.copyDirectoryToDirectory, infinite loops has occurred.\n\n-- detail --\nsrc directory :  D:\\a\ndest directory : D:\\a\ncall : FileUtils.copyDirectoryToDirectory(new File(\"D:\\a\"), new File(\"D:\\a\"));\nexpected result : directory D:\\a\\a will be created\nactual result      : D:\\a\\a\\a\\a.......   was created\n\ni guess FileUtils.copyDirectoryToDirectory causes of this result.\n(\"destDir.mkdir()\" is done before \"srcDir.listFiles()\")\n\nam i calling wrong method?\n\nthank you.",
                "resolved": "2010-09-28",
                "versions": [
                    "1.4"
                ],
                "fixVersions": [
                    "2.0"
                ]
            },
            {
                "issue_id": "IO-216",
                "project": "Commons IO",
                "title": "Delete files quietly when an exception is thrown during initialization",
                "type": "Bug",
                "description": "LockableFileWriter fails to report lock file deletion failure - it calls lockFile.delete() several times but fails to check the return code.\n\nN.B. IIRC, file.delete() returns false if there was no file to delete, so any fix needs to take this into account.",
                "resolved": "2010-09-28",
                "versions": [
                    "1.4"
                ],
                "fixVersions": [
                    "2.0"
                ]
            },
            {
                "issue_id": "IO-215",
                "project": "Commons IO",
                "title": "FileUtils copy methods swallow date modification failures",
                "type": "Bug",
                "description": "FileUtils.doCopyDirectory(..) and .FileUtils.doCopyFile(..) both call the setLastModified() method, but fail to check if it succeeded or not.\n\nSurely if the caller has asked for the date to be preserved, failure to do so should be reported somehow?",
                "resolved": "2010-09-29",
                "versions": [],
                "fixVersions": [
                    "2.0"
                ]
            },
            {
                "issue_id": "IO-214",
                "project": "Commons IO",
                "title": "Inconsistent synchronization of fields",
                "type": "Bug",
                "description": "The field ByteArrayOutputStream.count is always accessed in a synchronised block, apart from when the user calls toBufferedInputStream().\n\nThis seems wrong.\n\nSimilarly for the count field in CountingOutputStream.beforeWrite(int n)",
                "resolved": "2010-09-29",
                "versions": [],
                "fixVersions": [
                    "2.0"
                ]
            },
            {
                "issue_id": "IO-213",
                "project": "Commons IO",
                "title": "LineIterator should  implement Iterator<String> as well/instead of Iterator",
                "type": "Bug",
                "description": "Typesafety is nicer than having to cast from object on every pass through the loop. As LineIterator only outputs strings, this should be trivial.",
                "resolved": "2010-03-05",
                "versions": [],
                "fixVersions": [
                    "2.0"
                ]
            },
            {
                "issue_id": "IO-212",
                "project": "Commons IO",
                "title": "Incorrect ProxyInputStream.skip() javadoc",
                "type": "Bug",
                "description": "The ProxyInputStream.skip() method documents the return value as \"the number of bytes to skipped or -1 if the end of stream\" when the underlying InputStream.skip() method returns \"the actual number of bytes skipped\", i.e. never -1.",
                "resolved": "2009-08-17",
                "versions": [
                    "1.4"
                ],
                "fixVersions": [
                    "2.0"
                ]
            },
            {
                "issue_id": "IO-209",
                "project": "Commons IO",
                "title": "FileSystemUtils.freeSpaceKb fails to return correct size for a windows mount point",
                "type": "Bug",
                "description": "FileSystemUtils.freeSpaceKb fails to return correct result for a NTFS mount point or junction.\n\nSuppose I have a NTFS partition mounted at C:\\Data\\partition1.\n\nNow assume that the free space on Partition mounted as C: is 1GB and that mounted on \"C:\\Data\\partition1\" is 2GB. A call to FileSystemUtils.freeSpaceKb(\"C:\\Data\\partition1\") will return the free space on C: and not on \"C:\\Data\\partition1\".\n\nThis is because while running the \"dir /-c\" with the given path, the code just retains first 2 chars i.e. for any path under \"C:\\blah\\de\\blah\", \"dir /-c\" will be called with \"C:\" which will return incorrect result.",
                "resolved": "2010-09-29",
                "versions": [
                    "1.4",
                    "2.0",
                    "3.x"
                ],
                "fixVersions": [
                    "2.0"
                ]
            },
            {
                "issue_id": "IO-207",
                "project": "Commons IO",
                "title": "Race condition in forceMkdir",
                "type": "Bug",
                "description": "If two processes or threads call forceMkdir() with the same directory there is a chance that one will throw an IOException even though a directory was correctly created (by the other process or thread). ",
                "resolved": "2010-03-05",
                "versions": [
                    "1.4"
                ],
                "fixVersions": [
                    "2.0"
                ]
            },
            {
                "issue_id": "IO-206",
                "project": "Commons IO",
                "title": "ProxyInputStream: misleading parameter names",
                "type": "Bug",
                "description": "ProxyInputStream has a the following method signatures:\n- public int read(byte[] bts, int st, int end)\n- public void mark(int idx)\n\nBut they should be:\n- public int read(byte[] bts, int off, int length)\n- public void mark(int readlimit)\n\nEspecially the \"end\" parameter could be misinterpreted.\n",
                "resolved": "2009-05-18",
                "versions": [
                    "2.0"
                ],
                "fixVersions": [
                    "2.0"
                ]
            },
            {
                "issue_id": "IO-205",
                "project": "Commons IO",
                "title": "FileUtils.forceMkdir Javadoc is unclear",
                "type": "Bug",
                "description": "The Javadoc for FileUtils.forceMkdir doesn't say what is supposed to happen if a directory already exists with the same path.\n\nIt does (misleadingly) say that if a file already exists, it fails.  I interpreted this to mean that a directory would also fail, as it said *file* and not *normal file*.  However in reality, if the directory already exists, the method passes.\n\nFor clarity it should say that it succeeds if the directory already exists, and should probably also explicitly say \"normal file\" instead of just \"file\", as all directories are files.\n\nAlso, internally, I notice it is checking for File.isFile() whereas our existing method for implementing the same thing is checking !File.isDirectory().  On some filesystems, a file can be both a directory and a normal file, and in this situation I would expect the method to pass, whereas with Commons' implementation it would fail.  Maybe this is a trip-up because Sun themselves documented \"normal file\" as meaning \"something which is not a directory\", which is going to break the moment someone runs something on a more exotic filesystem. :-(\n\n",
                "resolved": "2010-03-05",
                "versions": [],
                "fixVersions": [
                    "2.0"
                ]
            },
            {
                "issue_id": "IO-204",
                "project": "Commons IO",
                "title": "Manifest for OSGi has invalid syntax",
                "type": "Bug",
                "description": "I just posted an issue for FileUpload that had the same problem. The manifest for IO that specifies the export-package and import-package has an invalid syntax. Extra attributes such as \"version\" and \"uses\" need to have quotes around them. E.g. com.xyz;version=\"1.4\";uses=:\"com.abc\". \n\n",
                "resolved": "2010-08-04",
                "versions": [
                    "1.4"
                ],
                "fixVersions": [
                    "2.0"
                ]
            },
            {
                "issue_id": "IO-202",
                "project": "Commons IO",
                "title": "NotFileFilter documentation is incorrect",
                "type": "Bug",
                "description": "The documentation for NotFileFilter (http://commons.apache.org/io/api-release/index.html) incorrectly states that it, \"Checks to see if both filters are true.\"  It looks to be the result of a hasty copy-and-paste from an old version of AndFileFilter (http://svn.apache.org/viewvc/commons/proper/io/trunk/src/java/org/apache/commons/io/filefilter/AndFileFilter.java?revision=140357&view=markup).  It should say something like, \"Returns the logical NOT of the underlying filter's return value for the same arguments.\"\n\nPatch is attached.",
                "resolved": "2009-04-26",
                "versions": [
                    "1.4"
                ],
                "fixVersions": [
                    "2.0"
                ]
            },
            {
                "issue_id": "IO-201",
                "project": "Commons IO",
                "title": "CountingInputStream/CountingOutputStream only partially synchronized",
                "type": "Bug",
                "description": "CountingInputStream is only partially synchronized.\n\nThe count is not synchronized when it is updated in read operations, so is not guaranteed to be published correctly\n\nThe synchronization could be removed without loss of functionality.\n\nNot sure it makes sense to share a stream between threads anyway, as the underlying stream is unlikely to be thread-safe.\n\nIf only one thread reads the stream, then the count field could be made volatile.\nThis would allow other threads to read the count safely.\n",
                "resolved": "2010-10-04",
                "versions": [
                    "1.4"
                ],
                "fixVersions": [
                    "2.0"
                ]
            },
            {
                "issue_id": "IO-196",
                "project": "Commons IO",
                "title": "Occasional FileSystemObserver test failures",
                "type": "Bug",
                "description": "The FilesystemObserverTestCase method testFileCreate() fails occasionally in the Continuum build at http://vmbuild.apache.org/continuum/projectView.action?projectId=155. The failure, when it happens, is:\n\nFilesystemObserverTestCase\n  testFileCreate :\n junit.framework.AssertionFailedError\n junit.framework.AssertionFailedError: E[0 0 0 1 0 0]: No. of directories changed expected:<1> but was:<0>\n       at junit.framework.Assert.fail(Assert.java:47)\n       at junit.framework.Assert.failNotEquals(Assert.java:282)\n       at junit.framework.Assert.assertEquals(Assert.java:64)\n       at junit.framework.Assert.assertEquals(Assert.java:201)\n       at org.apache.commons.io.monitor.FilesystemObserverTestCase.checkCollectionSizes(FilesystemObserverTestCase.java:424)\n       at org.apache.commons.io.monitor.FilesystemObserverTestCase.testFileCreate(FilesystemObserverTestCase.java:203)\n\n",
                "resolved": "2010-10-01",
                "versions": [],
                "fixVersions": [
                    "2.0"
                ]
            },
            {
                "issue_id": "IO-190",
                "project": "Commons IO",
                "title": "FileUtils.copyDirectory preserves destination subdirectories, rather than overwriting with the source subdirectories",
                "type": "Bug",
                "description": "When using FileUtils.copyDirectory to copy directories with subdirectories, the source will overwrite all files that exist in the destination directory, but not the subdirectories themselves. The files inside the subdirectories will be overwritten. The only difference that I've noticed thus far is that this preserves the old file dates of the subdirectories rather than using the dates from the source or the current date, if preserveFileDate is set to 'false.'",
                "resolved": "2010-09-29",
                "versions": [
                    "1.4"
                ],
                "fixVersions": [
                    "2.0"
                ]
            },
            {
                "issue_id": "IO-187",
                "project": "Commons IO",
                "title": "FileSystemUtils.freeSpaceKb doesn't work with relative paths on Linux",
                "type": "Bug",
                "description": "Calling FileSystemUtils.freeSpaceKb with \".\", \"./\", \"../\", \"../foo\" etc. will result in an empty string being passed to df.\nfreeSpaceKb calls FileNameUtils.normalize on the path which destroys relative paths.\n\nI don't see any need to normalize the path so the fix is simply to remove that call.",
                "resolved": "2010-03-06",
                "versions": [
                    "1.2",
                    "1.3",
                    "1.3.1",
                    "1.3.2",
                    "1.4"
                ],
                "fixVersions": [
                    "2.0"
                ]
            },
            {
                "issue_id": "IO-185",
                "project": "Commons IO",
                "title": "FileSystemUtils.freeSpaceWindows blocks",
                "type": "Bug",
                "description": "Hi,\n\nin my Application I have the problem that FileSystemUtils.freeSpaceWindows works properly for hours and then the function call blocks and does not return anymore. Any Ideas? Thanks.\n\nThe stacktrace:\n-------------\n\"Thread-16\" daemon prio=5 tid=33 RUNNABLE\n    java.io.FileInputStream.readBytes(Native Method)\n    java.io.FileInputStream.read(Unknown Source)\n    java.io.BufferedInputStream.read1(Unknown Source)\n    java.io.BufferedInputStream.read(Unknown Source)\n    sun.nio.cs.StreamDecoder.readBytes(Unknown Source)\n    sun.nio.cs.StreamDecoder.implRead(Unknown Source)\n    sun.nio.cs.StreamDecoder.read(Unknown Source)\n    java.io.InputStreamReader.read(Unknown Source)\n    java.io.BufferedReader.fill(Unknown Source)\n    java.io.BufferedReader.readLine(Unknown Source)\n    java.io.BufferedReader.readLine(Unknown Source)\n    org.apache.commons.io.FileSystemUtils.performCommand(FileSystemUtils.java:413)\n    org.apache.commons.io.FileSystemUtils.freeSpaceWindows(FileSystemUtils.java:225)\n    org.apache.commons.io.FileSystemUtils.freeSpaceOS(FileSystemUtils.java:194)\n    org.apache.commons.io.FileSystemUtils.freeSpaceKb(FileSystemUtils.java:166)\n-------------\n\nRegards,\nMartin",
                "resolved": "2010-09-29",
                "versions": [
                    "1.4"
                ],
                "fixVersions": [
                    "2.0"
                ]
            },
            {
                "issue_id": "IO-180",
                "project": "Commons IO",
                "title": "LineIterator documentation ",
                "type": "Bug",
                "description": "In the Javadoc for rg.apache.commons.io.LineIterator (in Commons IO 1.4),\nthis code snippet is incorrect:  the last instance of \"iterator\" should be\n\"it\".\n\n  LineIterator it = FileUtils.lineIterator(file, \"UTF-8\");\n   try {\n     while (it.hasNext()) {\n       String line = it.nextLine();\n       /// do something with line\n     }\n   } finally {\n     LineIterator.closeQuietly(iterator);\n   }\n",
                "resolved": "2008-09-11",
                "versions": [
                    "1.4"
                ],
                "fixVersions": [
                    "2.0"
                ]
            },
            {
                "issue_id": "IO-179",
                "project": "Commons IO",
                "title": "StringIndexOutOfBounds exception on FilenameUtils.getPathNoEndSeparator",
                "type": "Bug",
                "description": "public void testFilenameUtils() {\n String path = \"/foo.xml\";\n org.apache.commons.io.FilenameUtils.getPathNoEndSeparator(path);\n }\n\n\nLeads to:\n\njava.lang.StringIndexOutOfBoundsException: String index out of range: -1\n\tat java.lang.String.substring(String.java:1768)\n\tat org.apache.commons.io.FilenameUtils.doGetPath(FilenameUtils.java:705)\n\tat org.apache.commons.io.FilenameUtils.getPathNoEndSeparator(FilenameUtils.java:683)\n\n\n  ",
                "resolved": "2008-11-29",
                "versions": [
                    "1.3.2",
                    "1.4"
                ],
                "fixVersions": [
                    "2.0"
                ]
            },
            {
                "issue_id": "IO-175",
                "project": "Commons IO",
                "title": "IOUtils.doCopyFile() issues with very large files and closing file input streams",
                "type": "Bug",
                "description": "I've noticed the code in http://svn.apache.org/repos/asf/commons/proper/io/trunk/src/java/org/apache/commons/io/FileUtils.java for doCopyFile() contains:\n\noutput.transferFrom(input, 0, input.size());\n\nI know from experience (I had code that did this previously) this will not work on large files, at least under Windows.  By default, the transferFrom() method will try to create a single memory map equal to the size of the input.  If you are running a 32-bit process, and are trying to copy a file gigabytes in size, this will fail as you won't have enough virtual address space to create the memory map.  We had to use transferFrom() in smaller chunk sizes to work around this.\n\nAlso I believe in the code of this method, the file input streams need to be closed explicitly, since closing the channel objects that are derived from them will not close any resources held by the file input stream objects themselves.\n",
                "resolved": "2008-12-04",
                "versions": [],
                "fixVersions": [
                    "2.0"
                ]
            },
            {
                "issue_id": "IO-174",
                "project": "Commons IO",
                "title": "CharSequenceReader does not obey Reader contract and throw IOExceptions if read when closed",
                "type": "Bug",
                "description": "In the Java specs for [*java.io.Reader.close()*|http://java.sun.com/j2se/1.5.0/docs/api/java/io/Reader.html#close()], it states\n{panel}\nOnce a stream has been closed, further read(), ready(), mark(), or reset() invocations will throw an IOException\n{panel}\nHowever, the *org.apache.commons.io.input.CharSequenceReader* does not do this, but instead resets the file back to the start when it is closed. This causes problems when passing this reader to some libraries (albeit admittedly poorly written ones) that rely on *read* throwing an *IOException* after the reader has been closed.",
                "resolved": "2011-03-12",
                "versions": [
                    "1.4"
                ],
                "fixVersions": []
            },
            {
                "issue_id": "IO-168",
                "project": "Commons IO",
                "title": "Symbolic links (symlinks) followed when deleting directory.",
                "type": "Bug",
                "description": "If 'dlink' is a symbolic link to a directory 'dir', and FileUtils.forceDelete is called on dlink, then here is what happens:\n\n1) the contents of 'dir' are emptied (the link is followed).\n2) 'dir' continues to exist (but is empty).\n3) 'dlink' is removed.\n\nThe correct behavior is to simply remove 'dlink' without following it and thus without altering the contents of 'dir' (or 'dir' itself).",
                "resolved": "2010-09-28",
                "versions": [
                    "1.4"
                ],
                "fixVersions": [
                    "2.0"
                ]
            },
            {
                "issue_id": "IO-167",
                "project": "Commons IO",
                "title": "Fix case-insensitive string handling",
                "type": "Bug",
                "description": "Case-insensitive operations are currently platform-dependent, please see [Common Bug #3|http://www.nabble.com/Re%3A-Common-Bugs-p14931921s177.html] for details.",
                "resolved": "2008-05-30",
                "versions": [
                    "1.4"
                ],
                "fixVersions": [
                    "2.0"
                ]
            },
            {
                "issue_id": "IO-166",
                "project": "Commons IO",
                "title": "Fix URL decoding in FileUtils.toFile()",
                "type": "Bug",
                "description": "The sequence \"%2520\" should decode to \"%20\".",
                "resolved": "2010-09-29",
                "versions": [
                    "1.4"
                ],
                "fixVersions": [
                    "2.0"
                ]
            },
            {
                "issue_id": "IO-163",
                "project": "Commons IO",
                "title": "FileUtils.toURLs() uses deprecated (and bad) method of conversion to URL",
                "type": "Bug",
                "description": "The method FileUtils.toURLs() uses the following method to convert from File to URL:\n    File.toURL();\n\nThis method has scary warnings that it's a bad way to do the conversion because characters will not be escaped as required in URL strings.  In Java 1.6, this method has actually been deprecated.  All recent JDK versions recommend instead using:\n    File.toURI().toURL();\n\nas the URI code will properly perform the escaping.",
                "resolved": "2008-04-10",
                "versions": [
                    "1.4"
                ],
                "fixVersions": [
                    "2.0"
                ]
            },
            {
                "issue_id": "IO-161",
                "project": "Commons IO",
                "title": "FileCleaningTrackerTestCase hangs",
                "type": "Bug",
                "description": "The following code in FileCleaningTrackerTestCase never exits, hanging the whole compilation/testing process:\n\n    private void waitUntilTrackCount() {\n        while (theInstance.getTrackCount() != 0) {\n            int total = 0;\n            while (theInstance.getTrackCount() != 0) {\n                byte[] b = new byte[1024 * 1024];\n                b[0] = (byte) System.currentTimeMillis();\n                total = total + b[0];\n                System.gc();\n            }\n        }\n    }\n\nIt is clear that in theory this code might loop forever, as the allocation of the byte arrays might never unleash a garbage collection complete enough to deallocate all marker objects, so to bring the track count to zero. Believe me, it's not only theory :).",
                "resolved": "2008-12-04",
                "versions": [
                    "1.4"
                ],
                "fixVersions": [
                    "2.0"
                ]
            },
            {
                "issue_id": "IO-160",
                "project": "Commons IO",
                "title": "[patch] FileSystemUtils.freeSpace fails on solaris ",
                "type": "Bug",
                "description": "FileSystemUtils.freeSpace fails its tests on Solaris.  The following patch fixes it, and with it all tests pass on:\nRedHat (FC7, EL3, EL4, CentOS4, CentOS5) and Solaris (8, 9-sparc, 9-i386, 10-sparc, 10-i386).\n\nThe fix is to force the use of /usr/xpg4/bin/df on Solaris, which is the posix version.  This then means that the output-parsing works as expected.\n\n\nIndex: src/java/org/apache/commons/io/FileSystemUtils.java\n===================================================================\nRCS file: /cvsroot/upstream/jpackage/jakarta-commons-io/src/java/org/apache/commons/io/FileSystemUtils.java,v\nretrieving revision 1.1.1.1\nretrieving revision 1.1.1.1.2.3\ndiff -u -r1.1.1.1 -r1.1.1.1.2.3\n--- src/java/org/apache/commons/io/FileSystemUtils.java 2 Mar 2007 06:31:03 -0000       1.1.1.1\n+++ src/java/org/apache/commons/io/FileSystemUtils.java 28 Mar 2008 11:56:06 -0000      1.1.1.1.2.3\n@@ -64,6 +64,10 @@\n \n     /** The operating system flag. */\n     private static final int OS;\n+\n+    /** The path to df */\n+    private static String dfPath = \"df\";\n+\n     static {\n         int os = OTHER;\n         try {\n@@ -76,9 +80,6 @@\n             if (osName.indexOf(\"windows\") != -1) {\n                 os = WINDOWS;\n             } else if (osName.indexOf(\"linux\") != -1 ||\n-                osName.indexOf(\"sun os\") != -1 ||\n-                osName.indexOf(\"sunos\") != -1 ||\n-                osName.indexOf(\"solaris\") != -1 ||\n                 osName.indexOf(\"mpe/ix\") != -1 ||\n                 osName.indexOf(\"freebsd\") != -1 ||\n                 osName.indexOf(\"irix\") != -1 ||\n@@ -86,6 +87,11 @@\n                 osName.indexOf(\"unix\") != -1 ||\n                 osName.indexOf(\"mac os x\") != -1) {\n                 os = UNIX;\n+            } else if (osName.indexOf(\"sun os\") != -1 ||\n+                osName.indexOf(\"sunos\") != -1 ||\n+                osName.indexOf(\"solaris\") != -1) {\n+                os = POSIX_UNIX;\n+                dfPath = \"/usr/xpg4/bin/df\";\n             } else if (osName.indexOf(\"hp-ux\") != -1 ||\n                 osName.indexOf(\"aix\") != -1) {\n                 os = POSIX_UNIX;\n@@ -116,7 +122,7 @@\n      * of {@link #freeSpaceKb(String)} which returns a result in kilobytes.\n      * <p>\n      * Note that some OS's are NOT currently supported, including OS/390,\n-     * OpenVMS and and SunOS 5. (SunOS is supported by <code>freeSpaceKb</code>.)\n+     * OpenVMS. \n      * <pre>\n      * FileSystemUtils.freeSpace(\"C:\");       // Windows\n      * FileSystemUtils.freeSpace(\"/volume\");  // *nix\n@@ -317,14 +323,14 @@\n             flags += \"P\";\n         }\n         String[] cmdAttribs = \n-            (flags.length() > 1 ? new String[] {\"df\", flags, path} : new String[] {\"df\", path});\n+            (flags.length() > 1 ? new String[] {dfPath, flags, path} : new String[] {dfPath, path});\n         \n         // perform the command, asking for up to 3 lines (header, interesting, overflow)\n         List lines = performCommand(cmdAttribs, 3);\n         if (lines.size() < 2) {\n             // unknown problem, throw exception\n             throw new IOException(\n-                    \"Command line 'df' did not return info as expected \" +\n+                    \"Command line '\" + dfPath + \"' did not return info as expected \" +\n                     \"for path '\" + path + \"'- response was \" + lines);\n         }\n         String line2 = (String) lines.get(1); // the line we're interested in\n@@ -338,7 +344,7 @@\n                 tok = new StringTokenizer(line3, \" \");\n             } else {\n                 throw new IOException(\n-                        \"Command line 'df' did not return data as expected \" +\n+                        \"Command line '\" + dfPath + \"' did not return data as expected \" +\n                         \"for path '\" + path + \"'- check path is valid\");\n             }\n         } else {\n@@ -364,14 +370,14 @@\n             long bytes = Long.parseLong(freeSpace);\n             if (bytes < 0) {\n                 throw new IOException(\n-                        \"Command line 'df' did not find free space in response \" +\n+                        \"Command line '\" + dfPath + \"' did not find free space in response \" +\n                         \"for path '\" + path + \"'- check path is valid\");\n             }\n             return bytes;\n             \n         } catch (NumberFormatException ex) {\n             throw new IOException(\n-                    \"Command line 'df' did not return numeric data as expected \" +\n+                    \"Command line '\" + dfPath + \"' did not return numeric data as expected \" +\n                     \"for path '\" + path + \"'- check path is valid\");\n         }\n     }\nIndex: src/test/org/apache/commons/io/FileSystemUtilsTestCase.java\n===================================================================\nRCS file: /cvsroot/upstream/jpackage/jakarta-commons-io/src/test/org/apache/commons/io/FileSystemUtilsTestCase.java,v\nretrieving revision 1.1.1.1\nretrieving revision 1.1.1.1.2.6\ndiff -u -r1.1.1.1 -r1.1.1.1.2.6\n--- src/test/org/apache/commons/io/FileSystemUtilsTestCase.java 2 Mar 2007 06:30:58 -0000       1.1.1.1\n+++ src/test/org/apache/commons/io/FileSystemUtilsTestCase.java 28 Mar 2008 15:26:43 -0000      1.1.1.1.2.6\n@@ -68,8 +68,13 @@\n             // have to figure out unix block size\n             String[] cmd = null;\n             String osName = System.getProperty(\"os.name\");\n+            osName = osName.toLowerCase();\n+\n             if (osName.indexOf(\"hp-ux\") >= 0 || osName.indexOf(\"aix\") >= 0) {\n                 cmd = new String[] {\"df\", \"-P\", \"/\"};\n+            } else if (osName.indexOf(\"sunos\") >= 0 || osName.indexOf(\"sun os\") >= 0\n+                       || osName.indexOf(\"solaris\") >= 0) {\n+                cmd = new String[] {\"/usr/xpg4/bin/df\", \"-P\", \"/\"};\n             } else {\n                 cmd = new String[] {\"df\", \"/\"};\n             }\n",
                "resolved": "2008-05-30",
                "versions": [
                    "1.3.2"
                ],
                "fixVersions": [
                    "2.0"
                ]
            },
            {
                "issue_id": "IO-147",
                "project": "Commons IO",
                "title": "Deletion of orphaned Softlinks does not work",
                "type": "Bug",
                "description": "If there is an orphaned softlink a -> b, but b does not exists anymore than the softlink will not be removed. This happens when you call FileUtils.deleteDirectory() and when the linked target b is deleted earlier than the link.\n\nThis is caused by the \"ugly\" file.exists() call in forceDelete()\n\nif (!file.exists()) {\n         throw new FileNotFoundException(\"File does not exist: \" + file);\n}\n\nif this check is not done, everything works as expected. I think this test is not neccessery, cause file.delete will test this better.\n\nPlease discuss and change this.\n\nthanx\n\nStefan ",
                "resolved": "2008-01-04",
                "versions": [
                    "1.3.2"
                ],
                "fixVersions": [
                    "1.4"
                ]
            },
            {
                "issue_id": "IO-146",
                "project": "Commons IO",
                "title": "html form select element with mutiple=\"true\", select option more than one.",
                "type": "Bug",
                "description": "Error case,\n\nIt happen when html from submit select had select more than two item.\n\nfor example i have a select  that has 5 items, 1,2,3,4,5\n\nI selected 2 items, 3,5,\n\nI support to get 3 and 5,\n\nbut it give me only one value.",
                "resolved": "2007-12-17",
                "versions": [
                    "1.3.2"
                ],
                "fixVersions": []
            },
            {
                "issue_id": "IO-141",
                "project": "Commons IO",
                "title": "Infinite loop on FileUtils.copyDirectory when the destination directory is within the source directory",
                "type": "Bug",
                "description": "When you attempt to copy a directory and the destination directory is inside the source directory an inifinite loop occurs in the copyDirectory causing Commons-IO to create a folder w/o stopping until its reaches OS limitation.\n\nThis code will recreate the bug:\n\nFileUtils.copyDirectory(new File(\"C:\\\\temp\\\\test-io\\\\a\\\\.\"), new File(\"C:\\\\temp\\\\test-io\\\\a\\\\.\" + File.separator + new Date().getTime()));\n\nMake sure C:\\temp\\test-io\\a exists",
                "resolved": "2008-01-05",
                "versions": [
                    "1.3.2"
                ],
                "fixVersions": [
                    "1.4"
                ]
            },
            {
                "issue_id": "IO-136",
                "project": "Commons IO",
                "title": "HexDump's use of static StringBuffers isn't thread-safe",
                "type": "Bug",
                "description": "HexDump has two private static dump() method's that alter static instances of StringBuffer:\n\ndump(long) modifies static StringBuffer variable _lbuffer returning _lbuffer \ndump(char) modifies static StringBuffer variable _cbuffer returning _cbuffer\n\nBoth these methods are called by the public static dump(byte[], long, OutputStream, int) method. Multiple threads calling the public dump method at the same time could cause these StringBuffer to contain mixed up data and result in a bug.",
                "resolved": "2007-11-20",
                "versions": [
                    "1.3.2"
                ],
                "fixVersions": [
                    "1.4"
                ]
            },
            {
                "issue_id": "IO-124",
                "project": "Commons IO",
                "title": "fix website permissions",
                "type": "Bug",
                "description": "http://jakarta.apache.org/commons/io/api-release/index.html\n\nsays:\n\nForbidden\n\nYou don't have permission to access /commons/io/api-release/index.html on this server.\nApache/2.3.0-dev (Unix) Server at jakarta.apache.org Port 80\n",
                "resolved": "2007-07-03",
                "versions": [],
                "fixVersions": [
                    "1.3.2"
                ]
            },
            {
                "issue_id": "IO-117",
                "project": "Commons IO",
                "title": "EndianUtils.readSwappedUnsignedInteger() may return a negative number",
                "type": "Bug",
                "description": "Methods about reading unsigned-integer in class EndianUtils may return a negative number, due to casting int to long.\nCalculations with operator & etc. are under integer in these methods so its results are integer,\nthen implicit casting the results to long keeps its positive/negative sign.",
                "resolved": "2007-05-18",
                "versions": [
                    "1.3.1"
                ],
                "fixVersions": [
                    "1.3.2"
                ]
            },
            {
                "issue_id": "IO-115",
                "project": "Commons IO",
                "title": "FileUtilsCleanDirectoryTestCase fails on Windoes if command chmod is available",
                "type": "Bug",
                "description": "Some tests in FileUtilsCleanDirectoryTestCase try to delete files that have been set to read-only. This is expected to throw an exception. To set the read-only flag the method chmod() tries to execute the unix \"chmod\" command. If this fails (which should normally be the case on windows), the test is ignored.\n\nIf Posix tools are available e.g. from Cygwin, MKS Toolkit, Microsoft's Posix Tools or similar ones the test fails.",
                "resolved": "2007-05-15",
                "versions": [
                    "1.3.1"
                ],
                "fixVersions": [
                    "1.3.2"
                ]
            },
            {
                "issue_id": "IO-113",
                "project": "Commons IO",
                "title": "FileUtils.readFileToString is not static",
                "type": "Bug",
                "description": "FileUtils.readFileToString isn't static.  It should be; since the constructor for FileUtils says \"Instances should NOT be constructed in standard programming\", this makes readFileToString unusable.  Right now I'm using FileUtils.readBytesToByteArray(file).toString().",
                "resolved": "2007-02-09",
                "versions": [
                    "1.3"
                ],
                "fixVersions": [
                    "1.3.1"
                ]
            },
            {
                "issue_id": "IO-112",
                "project": "Commons IO",
                "title": "NPE in FileUtils.openOutputStream(File) when file has no parent in path.",
                "type": "Bug",
                "description": "-----Original Message-----\nFrom: deng xinzi [mailto:xinzi6388@gmail.com] \nSent: Sunday, February 04, 2007 6:19 AM\nTo: commons-dev@jakarta.apache.org\nSubject: [bug]commons-io 1.3 FileUtils.openOutputStream(File file) NullPointException\n\nFileUtils.openOutputStream(File file)\nWhen the file = new File( \"abc.txt\" );\nThere will be a NullPointerException throw.\nCause\nfile = new File(\"abc.txt\")\nfile.getParentFile() returns null.\n\nSo I suggest adding the null check code like this.\n\n            File parent = file.getParentFile();\n            if( parent != null ) {   // ADD THIS!!!\n              if (parent.exists() == false) {\n                if (parent.mkdirs() == false) {\n                    throw new IOException(\"File '\" + file + \"' could not be\ncreated\");\n                }\n              }\n            }\n\n\n                                       Xinzi ...\n",
                "resolved": "2007-02-04",
                "versions": [
                    "1.3"
                ],
                "fixVersions": [
                    "1.3.1"
                ]
            },
            {
                "issue_id": "IO-111",
                "project": "Commons IO",
                "title": "FileSystemUtils.freeDiskSpaceUnix does not work if df is not in the shell path",
                "type": "Bug",
                "description": "if the df command is not in the path, the method freeSpaceUnix throws an exception:\n\njava.io.IOException: df: not found\n        at java.lang.UNIXProcess.forkAndExec(Native Method)\n        at java.lang.UNIXProcess.<init>(UNIXProcess.java:53)\n        at java.lang.ProcessImpl.start(ProcessImpl.java:65)\n        at java.lang.ProcessBuilder.start(ProcessBuilder.java:451)\n        at java.lang.Runtime.exec(Runtime.java:591)\n        at java.lang.Runtime.exec(Runtime.java:464)\n        at org.apache.commons.io.FileSystemUtils.openProcessStream(FileSystemUtils.java:357)\n        at org.apache.commons.io.FileSystemUtils.freeSpaceUnix(FileSystemUtils.java:298)\n\nRather than expecting df is in the path, it should be searched in the following standard location:\n/usr/bin/df\n/usr/sbin/df\n/bin/df\n/sbin/df\n/usr/ucb/df\n/usr/xpg4/bin/df\n\n",
                "resolved": "2007-02-17",
                "versions": [
                    "1.2",
                    "1.3"
                ],
                "fixVersions": []
            },
            {
                "issue_id": "IO-110",
                "project": "Commons IO",
                "title": "FileSystemUtils.freeSpaceKb does not work on AIX ",
                "type": "Bug",
                "description": "FileSystemUtils.freeSpaceKb does not work on AIX. Throws IOException . It is due to the format of 'df -k' output on AIX Operating System. \n\n$ df -k /\nFilesystem    1024-blocks      Free %Used    Iused %Iused Mounted on\n/dev/hd4           262144    168324   36%     3916    10% /\n\nNote the fourth entry is %Used. \n'df -kt' command provides the format expected by freeSpaceKb method. \n\n$ df -kt /\nFilesystem    1024-blocks      Used      Free %Used Mounted on\n/dev/hd4           262144     93820    168324   36% /\n\nSo, for AIX operating system, change it to use 'df -kt ' instead of df -k \n",
                "resolved": "2007-05-03",
                "versions": [
                    "1.2"
                ],
                "fixVersions": [
                    "1.3.1"
                ]
            },
            {
                "issue_id": "IO-109",
                "project": "Commons IO",
                "title": "FileSystemUtils freeSpaceUnix does not work for HP-UX 11",
                "type": "Bug",
                "description": "The freeSpaceUnix method does not work under HP-UX.  The df command under HP-UX is the old System V varient and the fields are not in the correct order.   This diff modifies the code to use the 'bdf' command when HP-UX is detected:\n\n--- FileSystemUtils.java        2006-03-19 12:42:48.000000000 -0800\n+++ FileSystemUtils-HP-UX-Fix.java      2007-01-11 13:05:34.844269000 -0800\n@@ -51,13 +51,15 @@\n     private static final int WINDOWS = 1;\n     /** Operating system state flag for Unix. */\n     private static final int UNIX = 2;\n+    /** Unix variant name */\n+       private static String osName = null;\n\n     /** The operating system flag. */\n     private static final int OS;\n     static {\n         int os = OTHER;\n         try {\n-            String osName = System.getProperty(\"os.name\");\n+            osName = System.getProperty(\"os.name\");\n             if (osName == null) {\n                 throw new IOException(\"os.name not found\");\n             }\n@@ -287,9 +289,18 @@\n         }\n         path = FilenameUtils.normalize(path);\n\n+               // HP-UX sucks we need to use bdf instead\n+               String dfCmd = \"df\";\n+               String dfOpts = \"-k\";\n+               if (osName.indexOf(\"hp-ux\") != -1)\n+               {\n+                       dfCmd = \"bdf\";\n+                       dfOpts = \"\";\n+               }\n+\n         // build and run the 'dir' command\n         String[] cmdAttribs =\n-            (kb ? new String[] {\"df\", \"-k\", path} : new String[] {\"df\", path});\n+            (kb ? new String[] {dfCmd, dfOpts, path} : new String[] {dfCmd, path});\n\n         // read the output from the command until we come to the second line\n         long bytes = -1;\n",
                "resolved": "2008-01-06",
                "versions": [
                    "1.2"
                ],
                "fixVersions": [
                    "1.4"
                ]
            },
            {
                "issue_id": "IO-103",
                "project": "Commons IO",
                "title": "commons-io cannot be deployed with Maven 2",
                "type": "Bug",
                "description": "The commons-io POM contains a resource section, which specifies that the NOTICE.txt and LICENSE.txt files are being added to the jar files META-INF directory. Unfortunately, this triggers MSOURCES-6, a well known bug in the maven-sources-plugin, which attempts to include the base directory into the source jar file. The base directory includes the sources jar itself, which is growing while it is being included into itself, which is growing while it is included into itself, ...\nIn other words, the maven-sources-plugin is creating a jar file endleseely.\n\nWhen deploying the commons-io with\n\n    mvn -Prc commons-io deploy\n\nor\n\n   mvn -Prelease commons-io deploy\n\nthen the maven-sources-plugin is invoked by the commons-parent POM. In other words, the commons-io jar file cannot be deployed.\n\nThe attached patch removes the resources section from the commons-parent POM: This can easily be done, because the commons-parent POM is already addressing this by invoking the antrun plugin.\n",
                "resolved": "2006-12-28",
                "versions": [
                    "1.3"
                ],
                "fixVersions": [
                    "1.3"
                ]
            },
            {
                "issue_id": "IO-102",
                "project": "Commons IO",
                "title": "Potential unread bytes in readSwappedLong(InputStream)",
                "type": "Bug",
                "description": "In:\n\n        byte[] bytes = new byte[8];\n        input.read( bytes );\n        return readSwappedLong( bytes, 0 );\n\nThere is no check on the int return value from input.read, so it's possible that 8 bytes won't be read.",
                "resolved": "2006-12-06",
                "versions": [],
                "fixVersions": [
                    "1.3"
                ]
            },
            {
                "issue_id": "IO-101",
                "project": "Commons IO",
                "title": "The method EndianUtils.writeSwappedDouble() and EndianUtils.readSwappedDouble() do not match!",
                "type": "Bug",
                "description": "Code:\n\npublic static void main(String[] args) {\n\n\t\tdouble[] tests = new double[] {34.345, -345.5645, 545.12, 10.043, 7.123456789123};\n\t\tfor (int i = 0; i< tests.length ;i++) {\n\t\t\tbyte[] buffer = new byte[8];\t\t\t\n\t\t\tEndianUtils.writeSwappedDouble(buffer, 0, tests[i]);\n\t\t\tdouble val = EndianUtils.readSwappedDouble(buffer, 0);\n\t\t\tSystem.out.println(val);\t\n\t\t}\n\t\t \n}\n\nResult:\n34.344969482421874\n-345.5645\n545.11951171875\n10.043\n7.123456789123\n\nNote:\nIn my opinion the values shouldn't be changed at all.",
                "resolved": "2006-12-09",
                "versions": [
                    "1.2"
                ],
                "fixVersions": [
                    "1.3"
                ]
            },
            {
                "issue_id": "IO-100",
                "project": "Commons IO",
                "title": "FileUtils.touch should raise an IOException if I may not modify the file",
                "type": "Bug",
                "description": "The documentation states, that FileUtils.touch implements the UNIX-touch command. However I may successfully FileUtils.touch files like /etc/passwd, which is not allowed on the shell as normal user. \n\nLooking at the implementation, you should propably raise an IOException if the returnvalue of `file.setLastModified(System.currentTimeMillis());` is `false`.",
                "resolved": "2006-12-04",
                "versions": [
                    "1.2"
                ],
                "fixVersions": [
                    "1.3"
                ]
            },
            {
                "issue_id": "IO-99",
                "project": "Commons IO",
                "title": "FileCleaner thread never ends and cause memory leak in AS",
                "type": "Bug",
                "description": "FileCleaner opens a thread and no solution is given to the user to end it. So when an application is undeployed\nin an Application Server, a thread is still alive. The WebApp can't be undeployed and this results in a classloader\nleak that will cause an OutOfMemoryError.\n\nI think the API should be extended so that a user can end the thread. A better way would be to provide a class that\ncleans everything for commons IO.",
                "resolved": "2006-12-29",
                "versions": [
                    "1.2"
                ],
                "fixVersions": [
                    "1.3"
                ]
            },
            {
                "issue_id": "IO-96",
                "project": "Commons IO",
                "title": "Test case misuses read(byte[]) and read(char[])",
                "type": "Bug",
                "description": "Message to mailing list from Anthony Green\nhttp://www.mail-archive.com/commons-dev@jakarta.apache.org/msg82127.html\n\n-----------------------------------------\nThis support routine from the commons-io project test code assumed that\nFileReader.read(byte[]) would always read the entire file.  There's no\nsuch guarantee, and some tests were failing on GNU Classpath based VMs\nbecause of this.\n\nThanks,\n\nAG\n\n\n\n--- src/test/org/apache/commons/io/testtools/FileBasedTestCase.java~\t2006-07-13 23:44:13.000000000 -0700\n+++ src/test/org/apache/commons/io/testtools/FileBasedTestCase.java\t2006-07-13 23:44:20.000000000 -0700\n@@ -167,18 +171,22 @@\n         throws IOException\n     {\n         Reader ir = new java.io.FileReader( file );\n-        try {\n-            char[] c1 = new char[ c0.length ];\n-            int numRead = ir.read( c1 );\n-            assertTrue( \"Different number of bytes\", numRead == c0.length );\n-            for( int i = 0;\n-                 i < numRead;\n-                 assertTrue( \"Byte \" + i + \" differs (\" + c0[ i ] + \" != \" + c1[ i ] + \")\", \n-                    c0[ i ] == c1[ i ] ), i++\n-                );\n-        } finally {\n-            ir.close();\n-        }\n+\tint count = 0, numRead = 0;\n+\tchar[] c1 = new char[ c0.length ];\n+\ttry {\n+\t  while (count < c0.length)\n+\t    {\n+\t      numRead = ir.read( c1, count, c0.length);\n+\t      for( int i = count;\n+\t\t   i < count+numRead;\n+\t\t   assertTrue( \"Byte \" + i + \" differs (\" + c0[ i ] + \" != \" + c1[ i ] + \")\", \n+\t\t\t       c0[ i ] == c1[ i ] ), i++\n+\t\t   );\n+\t      count += numRead;\n+\t    }\n+\t} finally {\n+\t  ir.close();\n+\t}\n     }\n \n     protected void checkWrite(OutputStream output) throws Exception {",
                "resolved": "2006-10-11",
                "versions": [
                    "1.2"
                ],
                "fixVersions": [
                    "1.3"
                ]
            },
            {
                "issue_id": "IO-93",
                "project": "Commons IO",
                "title": "FileSystemUtils needs to call Process.destroy() on exec'd processes",
                "type": "Bug",
                "description": "Calling the FileSystemUtils.getFreeSpace() method multiple times (~3000) will generate an IOException with the following text: \"Too many open files\". Documentation from Sun says this problem is due to not destroying the java.lang.Process object returned from the System.exec() call.\n\nSome sample code I wrote confirms that calling destroy prevents this error from occurring.",
                "resolved": "2006-10-07",
                "versions": [
                    "1.2"
                ],
                "fixVersions": [
                    "1.3"
                ]
            },
            {
                "issue_id": "IO-91",
                "project": "Commons IO",
                "title": "FileSystemUtils.freeSpace does not work on Sun Solaris",
                "type": "Bug",
                "description": "The method FileSystemUtils.freeSpace does not work on Sun Solaris.\n\n    [junit] Testcase: testGetFreeSpace_String took 0.216 sec\n    [junit] \tCaused an ERROR\n    [junit] Command line 'df' did not return info as expected for path '/'- response on first line was '/                  (/dev/dsk/c0t0d0s0 ):41676304 block  3133314 filer'\n    [junit] java.io.IOException: Command line 'df' did not return info as expected for path '/'- response on first line was '/                  (/dev/dsk/c0t0d0s0 ):41676304 block  3133314 filer'\n    [junit] \tat org.apache.commons.io.FileSystemUtils.freeSpaceUnix(FileSystemUtils.java:315)\n    [junit] \tat org.apache.commons.io.FileSystemUtils.freeSpaceOS(FileSystemUtils.java:179)\n    [junit] \tat org.apache.commons.io.FileSystemUtils.freeSpace(FileSystemUtils.java:126)\n    [junit] \tat org.apache.commons.io.FileSystemUtilsTestCase.testGetFreeSpace_String(FileSystemUtilsTestCase.java:90)\n\nThis is because on Solaris the df command work different if the flag -k is used or not:\n\n$ df /\n/                  (/dev/dsk/c0t1d0s0 ): 1070402 blocks   294205 files\n$ df -k /\nFilesystem            kbytes    used   avail capacity  Mounted on\n/dev/dsk/c0t1d0s0    1350955  815754  481163    63%    /\n\nI haven't found any flag that makes it output GNU format even when -k is omitted.",
                "resolved": "2006-08-29",
                "versions": [
                    "1.2"
                ],
                "fixVersions": [
                    "1.3"
                ]
            },
            {
                "issue_id": "IO-90",
                "project": "Commons IO",
                "title": "Infinite loop in FileSystemUtils.freeSpaceWindows if share directory empty",
                "type": "Bug",
                "description": "When using FileSystemUtils.freeSpaceWindows in an empty share directory, the line containing the free space does not exist which causes an infinite loop (the outerloop doesn't decrease the i index).\n\nIn fact to deal with all possible errors, I propose to test the exitCode of the dir command.\n\nHere is a proposed new code for this function :\n\n    /**\n     * Find free space on the Windows platform using the 'dir' command.\n     *\n     * @param path  the path to get free space for, including the colon\n     * @return the amount of free drive space on the drive\n     * @throws IOException if an error occurs\n     */\n    long freeSpaceWindows(String path) throws IOException {\n        path = FilenameUtils.normalize(path);\n        if (path.length() > 2 && path.charAt(1) == ':') {\n            path = path.substring(0, 2);  // seems to make it work\n        }\n\n        // build and run the 'dir' command\n        String[] cmdAttrbs = new String[] {\"cmd.exe\", \"/C\", \"dir /-c \" + path};\n\n        // read in the output of the command to an ArrayList\n        BufferedReader in = null;\n        String line = null;\n        ArrayList lines = new ArrayList();\n        int errorLevel = 0;\n        \n        try {\n            Process proc = Runtime.getRuntime().exec(cmdAttrbs);\n            in = new BufferedReader(\n                new InputStreamReader(proc.getInputStream()));\n            line = in.readLine();\n            while (line != null) {\n                line = line.toLowerCase().trim();\n                lines.add(line);\n                line = in.readLine();\n            }\n            \n            proc.waitFor();\n            errorLevel = proc.exitValue();\n           \n        } finally {\n            IOUtils.closeQuietly(in);\n        }\n\n        if (lines.size() == 0) {\n            // unknown problem, throw exception\n            throw new IOException(\n                    \"Command line 'dir /-c' did not return any info \" +\n                    \"for command '\" + cmdAttrbs[2] + \"'\");\n        }\n\n        if (errorLevel != 0) {\n            if (errorLevel == 2) {\n                // Empty directory : unable to calculate the freeSpace\n                return Integer.MAX_VALUE; // ???\n            } else {\n                // unknown problem, throw exception\n                throw new IOException(\n                        \"Command line 'dir /-c' error [\" + errorLevel +\n                        \"] for command '\" + cmdAttrbs[2] + \"'\");\n            }\n        }\n        \n        // now iterate over the lines we just read and find the LAST\n        // non-empty line (the free space bytes should be in the last element\n        // of the ArrayList anyway, but this will ensure it works even if it's\n        // not, still assuming it is on the last non-blank line)\n        long bytes = -1;\n        int i = lines.size() - 1;\n        int bytesStart = 0;\n        int bytesEnd = 0;\n        outerLoop: while (i > 0) {\n            line = (String) lines.get(i);\n            if (line.length() > 0) {\n                // found it, so now read from the end of the line to find the\n                // last numeric character on the line, then continue until we\n                // find the first non-numeric character, and everything between\n                // that and the last numeric character inclusive is our free\n                // space bytes count\n                int j = line.length() - 1;\n                innerLoop1: while (j >= 0) {\n                    char c = line.charAt(j);\n                    if (Character.isDigit(c)) {\n                      // found the last numeric character, this is the end of\n                      // the free space bytes count\n                      bytesEnd = j + 1;\n                      break innerLoop1;\n                    }\n                    j--;\n                }\n                innerLoop2: while (j >= 0) {\n                    char c = line.charAt(j);\n                    if (!Character.isDigit(c) && c != ',' && c != '.') {\n                      // found the next non-numeric character, this is the\n                      // beginning of the free space bytes count\n                      bytesStart = j + 1;\n                      break innerLoop2;\n                    }\n                    j--;\n                }\n                break outerLoop;\n            } else {\n                // If the last line is empty we are unable to parse the freeSpace\n                throw new IOException(\n                        \"Command line 'dir /-c' did not return valid info \" +\n                        \"for command '\" + cmdAttrbs[2] + \"'\");\n            }\n        }\n\n        // remove commas and dots in the bytes count\n        StringBuffer buf = new StringBuffer(line.substring(bytesStart, bytesEnd));\n        for (int k = 0; k < buf.length(); k++) {\n            if (buf.charAt(k) == ',' || buf.charAt(k) == '.') {\n                buf.deleteCharAt(k--);\n            }\n        }\n        bytes = Long.parseLong(buf.toString());\n        return bytes;\n    }\n",
                "resolved": "2006-08-26",
                "versions": [
                    "1.2"
                ],
                "fixVersions": [
                    "1.3"
                ]
            },
            {
                "issue_id": "IO-89",
                "project": "Commons IO",
                "title": "Inconsistency in SizeFileFilter and AgeFileFilter implementations",
                "type": "Bug",
                "description": "Theres an inconsistency (bug?) in the implementation of SizeFileFilter and AgeFileFilter.\n\nIn SizeFileFilter, using an \"acceptLarger\" parameter of true actually accepts files with a size equal to and larger, whereas\nspecifying an \"acceptLarger\" parameter of false only accepts smaller files.\n\nThe same is true for AgeFileFilter, using an \"acceptOlder\" parameter of true actually accepts files either the same age or older, whereas\nspecifying an \"acceptOlder\" parameter of false only accepts newer files.\n\n\nA big benefit of resolving these inconsistencies would mean that creating filters for any condition (i.e. <, >, <=, >= or =) becomes\nalot easier. For example if the AgeFileFilter did only do either newer or older, then creating a filters for \"the same age or older\"\nor \"the same age or younger\" could be done in the following way:\n\n    IOFileFilter equalOlder   = new NotFileFilter(new AgeFileFilter(cutoff, false));\n    IOFileFilter equalYounger = new NotFileFilter(new AgeFileFilter(cutoff, true));\n\n\nFor SizeFileFilter I propose changing the logic to the following:\n\n    if (acceptLarger) {\n        return file.length() >= size;\n    } else {\n        return file.length() <= size;\n    }\n\n(This would mean that \"new SizeFileFilter(cutoff)\" would operate the same way)\n\nI have added isOlderFile() methods to FileUtils and propose that AgeFileFilter is changed to the following:\n\n    if (acceptOlder) {\n        return FileUtils.isFileOlder(file, cutoff);\n    } else {\n        return FileUtils.isFileNewer(file, cutoff);\n    }\n",
                "resolved": "2008-02-07",
                "versions": [
                    "1.2"
                ],
                "fixVersions": []
            },
            {
                "issue_id": "IO-84",
                "project": "Commons IO",
                "title": "Many classes are limited to length of stream < 2 GB, and behave incorrectly on larger streams",
                "type": "Bug",
                "description": "java int.MAX_VALUE is 2 GB. Classes that handle streams larger than 2 GB will behave incorrectly.\n\nFor example, see \nhttp://svn.apache.org/viewvc/jakarta/commons/proper/io/trunk/src/java/org/apache/commons/io/IOUtils.java?view=markup\nMethod: int copy(InputStream input, OutputStream output).\n\nThe correct method would be: long copy(InputStream input, OutputStream output).\n\nThis issue may affect many classes and routines.",
                "resolved": "2006-10-13",
                "versions": [
                    "1.2"
                ],
                "fixVersions": [
                    "1.3"
                ]
            },
            {
                "issue_id": "IO-83",
                "project": "Commons IO",
                "title": "Bug with 'df' command on AIX 5.3",
                "type": "Bug",
                "description": "Reported via commons-owner@\n--------------------------------------------\n\nFrom: James Urie\nSent: Tuesday, July 11, 2006 8:51 AM\nTo: 'commons-dev-subscribe@jakarta.apache.org'\nSubject: New AIX fix?\n\n\n\nHello,\n\n\n\nI had to change the \"commons-io\" code to allow for usage on AIX 5.3.\nAttached is the file with changes.\n\nThe long and short of the change is that the \"df\" command used in the\nFile System Utils classes requires\n\nA \"P\" to be added to the switch to enable \"POSIX\" capability.\n\n\nJames Urie",
                "resolved": "2006-08-25",
                "versions": [
                    "1.2"
                ],
                "fixVersions": [
                    "1.3"
                ]
            },
            {
                "issue_id": "IO-82",
                "project": "Commons IO",
                "title": "Test takes a long time to run in Mustang",
                "type": "Bug",
                "description": "    [junit] Running org.apache.commons.io.FileCleanerTestCase\n    [junit] Tests run: 1, Failures: 0, Errors: 0, Time elapsed: 116.485 sec\n\nOn 1.4.2 on the same machine/checkout, it takes only 1.x seconds.",
                "resolved": "2006-10-12",
                "versions": [],
                "fixVersions": [
                    "1.3"
                ]
            },
            {
                "issue_id": "IO-45",
                "project": "Commons IO",
                "title": "FileUtils.touch() replaces file with an empty file.",
                "type": "Bug",
                "description": "FileUtils.touch() isn't even close to being a java implementation of the unix\n\"touch\"-command, as intended. It replaces the file touched with an empty file.",
                "resolved": "2007-03-09",
                "versions": [
                    "1.0"
                ],
                "fixVersions": [
                    "1.1"
                ]
            },
            {
                "issue_id": "IO-44",
                "project": "Commons IO",
                "title": "[io] Enhance LockableFileWriter to handle different character endocings.",
                "type": "Bug",
                "description": "Hi,\n\nLockableFileWriter needs to be enhanced so that it can support different\ncharacter encodings. Below is my attempt at introducing this functionality based\non the existing class:\n\n(Also, should LockableFileWriter be a decoration class?)\n\nCheers,\n\nAndy\n\n-- START CLASS --\n\npackage com.sita.ats.io;\n\nimport java.io.*;\n\nimport org.apache.commons.lang.StringUtils;\n\n/**\n * FileWriter that will create and honor lock files to allow simple\n * cross thread file lock handling and allow writing to a given encoding.\n * If <code>Writer</code> attributes\n * are unspecified, the default behavior is to overwrite (rather than\n * to iAppend), and to use the value of the system property\n * <code>java.io.tmpdir</code> for the lock file directory.\n *\n * @version $Id: ULockableFileWriter.java,v 1.1 2005/09/27 07:23:33 andyl Exp $\n * @author Andy Lehane\n */\npublic class ULockableFileWriter extends Writer {\n\n    /** The extension for the lock file. */\n    private static final String LCK = \".lck\";\n    /** The lock file. */\n    private File iLockFile;   // Initialises to null\n    /** The write used to write to the file. */\n    private Writer iWriter;    // Initialises to null\n    /** Should we append to the file or not. */\n    private boolean iAppend; // Initialises to false\n    /** The encoding to use. */\n    private String iEncoding; // Initialises to null \n    \n    /**\n     * Constructs a LockableFileWriter. If the file exists, it is overwritten.\n     * @param fileName file to write to\n     * @throws IOException in case of an I/O error\n     */\n    public ULockableFileWriter(final String fileName) throws IOException {\n        this(fileName, null, false, null);\n    }\n\n    /**\n     * Constructs a LockableFileWriter.\n     * @param fileName file to write to\n     * @param append true if content should be appended (default is to overwrite).\n     * @throws IOException in case of an I/O error\n     */\n    public ULockableFileWriter(final String fileName, final boolean append)\nthrows IOException {\n        this(fileName, null, append, null);\n    }\n\n    /**\n     * Constructs a LockableFileWriter.\n     * @param fileName file to write to\n     * @param append true if content should be appended (default is to overwrite).\n     * @param lockDir Specifies the directory in which the lock file should be held.\n     * @throws IOException in case of an I/O error\n     */\n    public ULockableFileWriter(final String fileName, final boolean append,\nfinal String lockDir) throws IOException {\n        this(new File(fileName), null, append, lockDir);\n    }\n\n    /**\n     * Constructs a LockableFileWriter. If the file exists, it is overwritten.\n     * @param file file to write to\n     * @throws IOException in case of an I/O error\n     */\n    public ULockableFileWriter(final File file) throws IOException {\n        this(file, null, false, null);\n    }\n\n    /**\n     * Constructs a LockableFileWriter.\n     * @param file file to write to\n     * @param append true if content should be appended (default is to overwrite).\n     * @throws IOException in case of an I/O error\n     */\n    public ULockableFileWriter(final File file, final boolean append) throws\nIOException {\n        this(file, null, append, null);\n    }\n\n    /**\n     * Constructs a LockableFileWriter.\n     * @param file file to write to\n     * @param append true if content should be appended (default is to overwrite).\n     * @param lockDir Specifies the directory in which the lock file should be held.\n     * @throws IOException in case of an I/O error\n     */\n    public ULockableFileWriter(final File file, final boolean append, final\nString lockDir) throws IOException {\n\n        this(file, null, append, lockDir);\n    }\n    \n    /**\n     * Constructs a LockableFileWriter. If the file exists, it is overwritten.\n     * @param fileName file to write to\n     * @param encoding The encoding to use when writing.\n     * @throws IOException in case of an I/O error\n     */\n    public ULockableFileWriter(\n            final String fileName,\n            final String encoding) throws IOException {\n        this(fileName, encoding, false, null);\n    }\n\n    /**\n     * Constructs a LockableFileWriter.\n     * @param fileName file to write to\n     * @param encoding The encoding to use when writing.\n     * @param append true if content should be appended (default is to overwrite).\n     * @throws IOException in case of an I/O error\n     */\n    public ULockableFileWriter(\n            final String fileName, \n            final String encoding,\n            final boolean append) throws IOException {\n        this(fileName, encoding, append, null);\n    }\n\n    /**\n     * Constructs a LockableFileWriter.\n     * @param fileName file to write to\n     * @param encoding The encoding to use when writing.\n     * @param append true if content should be appended (default is to overwrite).\n     * @param lockDir Specifies the directory in which the lock file should be held.\n     * @throws IOException in case of an I/O error\n     */\n    public ULockableFileWriter(\n            final String fileName,\n            final String encoding,\n            final boolean append,\n            final String lockDir) throws IOException {\n        this(new File(fileName), encoding, append, lockDir);\n    }\n\n    /**\n     * Constructs a LockableFileWriter. If the file exists, it is overwritten.\n     * @param file file to write to\n     * @param encoding The encoding to use when writing.\n     * @throws IOException in case of an I/O error\n     */\n    public ULockableFileWriter(final File file, final String encoding) throws\nIOException {\n        this(file, encoding, false, null);\n    }\n\n    /**\n     * Constructs a LockableFileWriter.\n     * @param file file to write to\n     * @param encoding The encoding to use when writing.\n     * @param append true if content should be appended (default is to overwrite).\n     * @throws IOException in case of an I/O error\n     */\n    public ULockableFileWriter(\n            final File file,\n            final String encoding,\n            final boolean append) throws IOException {\n        this(file, encoding, append, null);\n    }\n\n    /**\n     * Constructs a LockableFileWriter.\n     * @param file file to write to\n     * @param encoding The encoding to use when writing.\n     * @param append true if content should be appended (default is to overwrite).\n     * @param lockDir Specifies the directory in which the lock file should be held.\n     * @throws IOException in case of an I/O error\n     */\n    public ULockableFileWriter(\n            final File file,\n            final String encoding,\n            final boolean append,\n            final String lockDir) throws IOException {\n        \n        super(file);\n        iAppend = append;\n        iEncoding = encoding;\n        \n        String lDir = lockDir;\n        if (lDir == null) {\n            lDir = System.getProperty(\"java.io.tmpdir\");\n        }\n        testLockDir(new File(lDir));\n        iLockFile = new File(lDir, file.getName() + LCK);\n        createLock();\n        \n        try {\n            if (StringUtils.isEmpty(encoding)) {\n                iWriter = new FileWriter(file.getAbsolutePath(), iAppend);\n            } else {\n                \n                if (file.getParentFile().exists() == false) {\n                    file.getParentFile().mkdirs();\n                }\n                \n                if (file.getAbsoluteFile().exists() == false) {\n                    file.getAbsoluteFile().createNewFile();\n                }\n                \n                iWriter = new OutputStreamWriter(new\nFileOutputStream(file.getAbsolutePath(), iAppend), iEncoding);\n            }\n        } catch (IOException ioe) {\n            iLockFile.delete();\n            throw ioe;\n        }\n    }\n    \n    //-----------------------------------------------------------------------\n    /**\n     * Tests that we can write to the lock directory.\n     * \n     * @param lockDir File representing the lock directory.\n     * @throws IOException if we cannot write to the lock directory or cannot\nfile the lock file.\n     */\n    private void testLockDir(final File lockDir) throws IOException {\n        if (!lockDir.exists()) {\n            throw new IOException(\n                    \"Could not find lockDir: \" + lockDir.getAbsolutePath());\n        }\n        if (!lockDir.canWrite()) {\n            throw new IOException(\n                    \"Could not write to lockDir: \" + lockDir.getAbsolutePath());\n        }\n    }\n\n    /**\n     * Creates the lock file.\n     * \n     * @throws IOException if we cannot create the file.\n     */\n    private void createLock() throws IOException {\n        synchronized (ULockableFileWriter.class) {\n            if (!iLockFile.createNewFile()) {\n                throw new IOException(\"Can't write file, lock \" +\n                    iLockFile.getAbsolutePath() + \" exists\");\n            }\n            iLockFile.deleteOnExit();\n        }\n    }\n    \n    //-----------------------------------------------------------------------\n    /**\n     * Close the stream, flushing it first.  Once a stream has been closed,\n     * further write() or flush() invocations will cause an IOException to be\n     * thrown.  Closing a previously-closed stream, however, has no effect.\n     *\n     * @exception  IOException  If an I/O error occurs\n     */\n    public void close() throws IOException {\n        try {\n            iWriter.close();\n        } finally {\n            iLockFile.delete();\n        }\n    }\n\n    /**\n     * Write a portion of a string.\n     *\n     * @param  cbuf  The characters to write\n     * @param  off  Offset from which to start writing characters\n     * @param  len  Number of characters to write\n     *\n     * @exception  IOException  If an I/O error occurs\n     */\n    public void write(final char[] cbuf, final int off, final int len) throws\nIOException {\n        iWriter.write(cbuf, off, len);\n    }\n\n    /**\n     * Flush the stream.  If the stream has saved any characters from the\n     * various write() methods in a buffer, write them immediately to their\n     * intended destination.  Then, if that destination is another character or\n     * byte stream, flush it.  Thus one flush() invocation will flush all the\n     * buffers in a chain of Writers and OutputStreams.\n     * <p>\n     * If the intended destination of this stream is an abstraction provided by\n     * the underlying operating system, for example a file, then flushing the\n     * stream guarantees only that bytes previously written to the stream are\n     * passed to the operating system for writing; it does not guarantee that\n     * they are actually written to a physical device such as a disk drive.\n     *\n     * @exception  IOException  If an I/O error occurs\n     */\n    public void flush() throws IOException {\n        iWriter.flush();\n    }\n    \n    //-----------------------------------------------------------------------\n    /**\n     * Gets the character encoding used when writing to the file. \n     * \n     * @return The encoding method.\n     */\n    public String getEncoding() {\n        return iEncoding;\n    }\n}\n\n-- END CLASS --",
                "resolved": "2007-03-09",
                "versions": [
                    "1.1"
                ],
                "fixVersions": [
                    "1.1"
                ]
            },
            {
                "issue_id": "IO-43",
                "project": "Commons IO",
                "title": "[io] FilenameUtils#removeExtension and FilenameUtils#getExtension don't handle all cases.",
                "type": "Bug",
                "description": "public static String getExtension( String filename) {\n    int index = filename.lastIndexOf('.');\n\n    if (-1 == index) {\n        return \"\";\n    } else {\n        return filename.substring(index + 1);\n    }\n}\n\nis too simplistic.\n\nIt will not handle paths in the form \"/path.to/file\" at all well.  It will\nreturn \"to/file\" as the extension which is incorrect.  The file extension is \"\".\n\nremoveExtension falls into a similar trap.\n\nPerhaps it was the poor quality of these functions that caused FilenameUtils to\nbe removed from the 1.0 release?",
                "resolved": "2007-03-09",
                "versions": [
                    "1.0"
                ],
                "fixVersions": [
                    "1.1"
                ]
            },
            {
                "issue_id": "IO-42",
                "project": "Commons IO",
                "title": "[io] Binary download includes jar that does not the FilenameUtils",
                "type": "Bug",
                "description": "I downloaded commons-io-1.0.zip and extracted the commons-io-1.0.jar.  That jar\ndoes not contain the FilenameUtils class listed in the online javadocs.",
                "resolved": "2007-03-09",
                "versions": [
                    "1.0"
                ],
                "fixVersions": []
            },
            {
                "issue_id": "IO-41",
                "project": "Commons IO",
                "title": "[io] FileUtils.listFiles(File, String[], boolean) throws NullPointerException when the second parameter is null",
                "type": "Bug",
                "description": "jakarta-commons-io FileUtils.listFiles(File, String[], boolean) throws\nNullPointerException when the second parameter is null. But the javadoc says it\nshould list all files in such a case.\n\nHere is the patch:\n\n--- FileUtils.java.orig\t2003-12-24 12:35:06.000000000 +0200\n+++ FileUtils.java\t2003-12-24 12:28:22.000000000 +0200\n@@ -276,8 +276,13 @@\n      * @return an collection of java.io.File with the matching files\n      */\n     public static Collection listFiles(File directory, String[] extensions,\nboolean recursive) {\n-        String[] suffixes = toSuffixes(extensions);\n-        IOFileFilter filter = new SuffixFileFilter(suffixes);\n+        IOFileFilter filter;\n+        if (extensions == null) {\n+            filter = TrueFileFilter.INSTANCE;\n+        } else {\n+            String[] suffixes = toSuffixes(extensions);\n+            filter = new SuffixFileFilter(suffixes);\n+        }\n         return listFiles(directory, filter, \n             (recursive ? TrueFileFilter.INSTANCE : FalseFileFilter.INSTANCE));\n     }",
                "resolved": "2007-03-09",
                "versions": [],
                "fixVersions": [
                    "1.0"
                ]
            },
            {
                "issue_id": "IO-39",
                "project": "Commons IO",
                "title": "[io] NullPointerException in FileUtils.listFiles",
                "type": "Bug",
                "description": "I get following error:\nException in thread \"main\" java.lang.NullPointerException\n        at org.apache.commons.io.FileUtils.innerListFiles(FileUtils.java:145)\n        at org.apache.commons.io.FileUtils.innerListFiles(FileUtils.java:147)\n        at org.apache.commons.io.FileUtils.listFiles(FileUtils.java:215)\n        at test.Find.main(Find.java:17)\n\nto reproduce:\n\n$ mkdir /tmp/poa\n$ touch /tmp/poa/ft-v05.2005-05-22.221500\n$ java -cp .:/usr/local/lib/java/commons-io-1.0/commons-io-1.0.jar test.Find\nException in thread \"main\" java.lang.NullPointerException\n        at org.apache.commons.io.FileUtils.innerListFiles(FileUtils.java:145)\n        at org.apache.commons.io.FileUtils.innerListFiles(FileUtils.java:147)\n        at org.apache.commons.io.FileUtils.listFiles(FileUtils.java:215)\n        at test.Find.main(Find.java:17)\n\ntest.Find:\n\npackage test;\n\nimport java.io.File;\nimport java.util.Collection;\nimport java.util.Iterator;\nimport org.apache.commons.io.FileUtils;\nimport org.apache.commons.io.filefilter.FileFilterUtils;\nimport org.apache.commons.io.filefilter.IOFileFilter;\nimport org.apache.commons.io.filefilter.TrueFileFilter;\n\npublic class Find {\n\n\tpublic static void main(String[] args) {\n\t\tFile rootDir = new File(\"/tmp/\");\n\t\tIOFileFilter filter = FileFilterUtils.prefixFileFilter(\"ft-v05\");\n\t\tCollection files = FileUtils.listFiles(rootDir, filter, TrueFileFilter.INSTANCE);\n\t\tfor (Iterator i = files.iterator(); i.hasNext(); ) {\n\t\t\tFile f = (File)i.next();\n\t\t\tSystem.out.println(f.getName());\n\t\t}\n\t}\n}",
                "resolved": "2007-03-09",
                "versions": [
                    "1.0"
                ],
                "fixVersions": []
            },
            {
                "issue_id": "IO-38",
                "project": "Commons IO",
                "title": "[io] Tests Fail on Windows 2000",
                "type": "Bug",
                "description": "I tested IO 1.2-RC2 on both Windows 2000 and Windows XP.\n\nOn Windows XP using JDK 1.4.2_05 running the tests using maven and ant(1.6.1) \nboth passed with no problems. Using JDK 1.3.1_04 with maven the tests passed, \nbut with ant(1.6.1) the JUnit failed with a NoClassDefFoundError for \norg.w3c.dom.Node.\n\nOn Windows 2000 using JDK 1.4.2_07 the tests failed using both maven and ant\n(1.6.1)",
                "resolved": "2007-03-09",
                "versions": [
                    "1.2"
                ],
                "fixVersions": []
            },
            {
                "issue_id": "IO-37",
                "project": "Commons IO",
                "title": "[io] Tests fail on Windows 2000 due to File lastModified() behaviour",
                "type": "Bug",
                "description": "The following JUnit test cases fail when running on Windows 2000 (JDK 1.4.2_05)\n      FileFilterTestCase\n      FileUtilsFileNewerTestCase\n\nAccording to the java.io.File javadoc for the setLastModified() method \"All \nplatforms support file-modification times to the nearest second, but some \nprovide more precision\"\n\nhttp://java.sun.com/j2se/1.4.2/docs/api/java/io/File.html#setLastModified(long)\n\n1) FileFilterTestCase's testAgeFilter() method appears to be failing because \nthe lastModified date is being rounded up to the nearest second - but the spin\n() method is only waiting until the system time is later. I'm attaching a patch \nso that the spin() method waits until the system time is after the modification \ndate/time of the file.\n\n2) FileUtilsFileNewerTestCase seems to have a couple of problems:\n\n* The testIsFileNewer() method appears to be failing because calling \nsetLastModified() seems to be rounding up to the nearest two seconds, so the \ncheck on the temporary file lastModified time after it has been set fails. \nChanging testIsFileNewer() to use two seconds rather than one resolves this and \nI found the following bug which appears to back this up:\n\n  http://bugs.sun.com/bugdatabase/view_bug.do?bug_id=4697792\n\n* The testIsFileNewerImaginaryFile() method appears to be failing because \nsetting the lastModified to zero seems to be ignored. This is also mentioned in \nthe above bug. Passing the actual temporary file's modifiedDate rather than \nzero resolves this.",
                "resolved": "2007-03-09",
                "versions": [
                    "1.1"
                ],
                "fixVersions": [
                    "1.2"
                ]
            },
            {
                "issue_id": "IO-36",
                "project": "Commons IO",
                "title": "[io] FileUtils does not have a method for recursively copying a directory",
                "type": "Bug",
                "description": "Need to add a copyDirectory() method. I have such a method already written \nthat I will add to FileUtils and attach as a patch.",
                "resolved": "2007-03-09",
                "versions": [],
                "fixVersions": [
                    "1.1"
                ]
            },
            {
                "issue_id": "IO-35",
                "project": "Commons IO",
                "title": "[io] Updated FileSystemUtils to address issues before release",
                "type": "Bug",
                "description": "Attached please find an updated version of FileSystemUtils (because of some \nissues at my current location I am unable to create a patch... don't ask!)\n\nThis addresses the two outstanding issues that would keep this from being \nincluded in the next release, namely:\n\n(1) Wouldn't work on \"alternate\" (depending on your perspective I suppose!) \nlanguage versions of Windows... I do not have anything other than an English \nversion to test this on, so it'd be great it someone else could.  It does NOT \nlook for any particular string any longer though, so I expect it to work.  \nCertainly it does on my test platforms.  The Windows implementation is fairly \ndifferent than it was because of this.\n\n(2) Using cmd.exe on *nix systems... still don't know why I wrote it like that \nin the first place, or why it worked on my test Linux instances, but in any \ncase it doesn't use it any more, it uses df directly as it should have been \nall along.\n\nI also addressed a couple of Checkstyle complaints with regard to line \nlengths.  Nothing major.",
                "resolved": "2007-03-09",
                "versions": [],
                "fixVersions": [
                    "1.1"
                ]
            },
            {
                "issue_id": "IO-34",
                "project": "Commons IO",
                "title": "[io] FileSystemUtils returns incorrect free space on Linux",
                "type": "Bug",
                "description": "Re: Commons-IO class FileSystemUtils\n\nThe method freeSpace(String path) returns free disk space in bytes on Windows,\nand returns free disk space in kilobytes (not bytes) on Linux (possibly Unix /\nMac OS etc. also).  \n\nThe internal method freeSpaceUnix javadoc reads \"Find free space on the *nix\nplatform using the 'df' command.\" The value returned by df is read in to a\nvariable called bytes and returned. Man pages for df on Linux (Fedora Core 4)\nread \"Disk  space  is  shown  in  1K blocks  by  default\". So method\nfreeSpaceUnix is returning the number of kilobytes free space, not bytes.\n\nA simple fix could be to add line \"bytes = bytes * 1024;\" after bytes are read in.\n\nThe javadocs for this class could be improved also. Comment \"@return the amount\nof free drive space on the volume\" could read \"@return the amount of free drive\nspace on the volume in bytes\".",
                "resolved": "2006-06-06",
                "versions": [
                    "1.1"
                ],
                "fixVersions": [
                    "1.2"
                ]
            },
            {
                "issue_id": "IO-33",
                "project": "Commons IO",
                "title": "[io] Addition of FileSystemUtils class",
                "type": "Bug",
                "description": "First, let me say that this is my first Bugzilla submission of any kind \nanywhere, so if I did something wrong I apologize in advance, and I'd \nappreciate a kind nudge in the right direction :)\n\nThat aside, this is a follow-up to a submission I made on the Commons \nDeveloper list.  I submitted a function called getFreeSpace() that allows for \ngetting the free space on a drive or volume in a cross-platform nature, \nsomething that is missing from Java at this point.  There seemed to be at \nleast some support for this (IIRC, one +1 and one conditional +1), but Stephen \nColebourne suggested it be part of a new FileSystemUtils class.  I have \ncreated this class and it is available for download at the referenced URL.\n\nAs Stephen suggested, I cleaned up the code and tried to make it adhere to the \nother Commons IO code (although it's not my own preferred coding style, so I \ncould be off a bit in spots).\n\nI did not attempt to make a unit test for it for two reasons... (1) I have no \nexperience creating JUnit tests, although I would have tried except for (2) I \ndidn't really see a way to test this.  My original post on the mailing list \nincluded a test harness app that just took in a drive or volume name on the \ncommand line and displayed the free space.  Someone would have to manually \ncompare that result to what their OS reported, but aside from that I'm not \nsure how a test could be written for this.\n\nStephen also had a question regarding use cases for this.  I gave him two or \nthree, but only one seemed convincing, so let me state it here as well...\n\nIf an application has to copy files to a volume, or create a file or series of \nfiles, it is very helpful to know before hand if that operation will fail or \nnot, especially if it has to be an all-or-nothing operation.  This code will \nallow for that.  The alternative is to have exceptions thrown when the copy or \ncreate operations fail, and then clean up whatever did manage to get copied or \ncreated.  That's an obviously ugly solution.  In some cases it could even be a \nrather drastic problem: imagine creating a file on a server and running the \nvolume out of space.  We all know what can happen in that case: all sorts of \ngeneral nastiness!  Better to be able to tell before hand if you have enough \nspace or not.  This code allows you to do that.\n\nPlease feel free to contact me at fzammetti@omnytex.com if I can be of any \nfurther help getting this added to Commons IO, assuming enough committers \nagree it's a good addition.  Thanks!",
                "resolved": "2007-03-09",
                "versions": [],
                "fixVersions": [
                    "1.1"
                ]
            },
            {
                "issue_id": "IO-32",
                "project": "Commons IO",
                "title": "[io][PATCH] Iterate over the lines in a file and the files in a directory",
                "type": "Bug",
                "description": "Hi,\n\n \n\nTwo of the tasks listed in the IO to-do list are adding the ability to\niterate over the lines in a file and the files in a directory.  This\npatch implements those things as methods on FileUtils and provides test\ncases for the new methods.\n\n \n\n  Jim Harrington\n\n*** patch follows ***\nIndex: src/java/org/apache/commons/io/FileUtils.java\n\n===================================================================\n\n--- src/java/org/apache/commons/io/FileUtils.java\t(revision 359064)\n\n+++ src/java/org/apache/commons/io/FileUtils.java\t(working copy)\n\n@@ -28,6 +28,7 @@\n\n import java.util.Collection;\n import java.util.Date;\n import java.util.List;\n+import java.util.Iterator;\n \n import org.apache.commons.io.filefilter.DirectoryFileFilter;\n import org.apache.commons.io.filefilter.FalseFileFilter;\n@@ -226,7 +227,29 @@\n\n         return files;\n     }\n \n+    /**\n+     * <p>Allows iteration over the files in given directory (and optionally\n+     * its subdirectories). All files found are filtered by an IOFileFilter.\n+     *\n+     * See:\n+     * @see #listFiles(File, IOFileFilter, IOFileFilter)\n+     * for more information.\n+     * </p>\n+     * @param directory the directory to search in\n+     * @param fileFilter filter to apply when finding files.\n+     * @param dirFilter optional filter to apply when finding subdirectories.\n+     * If this parameter is null, subdirectories will not be included in the\n+     * search. Use TrueFileFilter.INSTANCE to match all directories.\n+     * @return an iterator of java.io.File for the matching files\n+     * @see org.apache.commons.io.filefilter.FileFilterUtils\n+     * @see org.apache.commons.io.filefilter.NameFileFilter\n+     */\n+    public static Iterator iterateFiles(File directory, IOFileFilter \nfileFilter,\n+                                        IOFileFilter dirFilter) {\n+        return (listFiles( directory, fileFilter, dirFilter)).iterator();\n+    }\n \n+\n     /**\n      * Converts an array of file extensions to suffixes for use\n      * with IOFileFilters.\n@@ -264,7 +287,21 @@\n\n             (recursive ? TrueFileFilter.INSTANCE : FalseFileFilter.INSTANCE));\n     }\n \n+    /**\n+     * Allows iteration over the files in a given directory (and optionally\n+     * its subdirectories) which match an array of extensions.\n+     * @param directory the directory to search in\n+     * @param extensions an array of extensions, ex. {\"java\",\"xml\"}. If this\n+     * parameter is null, all files are returned.\n+     * @param recursive If true all subdirectories are searched, too.\n+     * @return an iterator of java.io.File with the matching files\n+     */\n+    public static Iterator iterateFiles(\n+                                        File directory, String[] extensions, \nboolean recursive) {\n+        return (listFiles(directory, extensions, recursive)).iterator();\n+    }\n \n+\n     /**\n      * <p>Compare the contents of two files to determine if they are equal or\n      * not.</p>\n@@ -841,6 +878,29 @@\n\n     //-----------------------------------------------------------------------\n     /**\n      * <p>\n+     * Reads the contents of a file line by line and returns an iterator over\n+     * those lines.\n+     *\n+     * <p>\n+     * There is no iterateLines method without encoding parameter because\n+     * the default encoding can differ between platforms and therefore results\n+     * in inconsistent results.\n+     * </p>\n+     *\n+     * @param file  the file to read\n+     * @param encoding  the encoding to use, null means platform default\n+     * @return an iterator over the lines in the file\n+     * @throws IOException in case of an I/O error\n+     * @throws UnsupportedEncodingException if the encoding is not supported \nby the VM\n+     * @since Commons IO 1.2\n+     */\n+    public static final Iterator iterateLines(File file, String encoding) \nthrows IOException {\n+        return (readLines(file, encoding)).iterator();\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    /**\n+     * <p>\n      * Writes a String to a file creating the file if it does not exist.\n      * </p>\n      * <p>\nIndex: src/test/org/apache/commons/io/FileUtilsTestCase.java\n\n===================================================================\n\n--- src/test/org/apache/commons/io/FileUtilsTestCase.java\t(revision \n359064)\n\n+++ src/test/org/apache/commons/io/FileUtilsTestCase.java\t(working copy)\n\n@@ -24,12 +24,17 @@\n\n import java.util.Arrays;\n import java.util.GregorianCalendar;\n import java.util.List;\n+import java.util.Collection;\n+import java.util.Iterator;\n+import java.util.Map;\n+import java.util.HashMap;\n \n import junit.framework.Test;\n import junit.framework.TestSuite;\n import junit.textui.TestRunner;\n \n import org.apache.commons.io.testtools.FileBasedTestCase;\n+import org.apache.commons.io.filefilter.WildcardFilter;\n \n /**\n  * This is used to test FileUtils for correctness.\n@@ -659,6 +664,81 @@\n\n         assertEquals(\"FileUtils.touch() changed lastModified to less than \nnow+3s\", true, file.lastModified() <= (now + 3000));\n     }\n \n+    public void testListFiles() throws Exception {\n+        File srcDir = getTestDirectory();\n+        File subDir = new File(srcDir, \"list_test\" );\n+        subDir.mkdir();\n+\n+        String[] fileNames = \n{ \"a.txt\", \"b.txt\", \"c.txt\", \"d.txt\", \"e.txt\", \"f.txt\" };\n+        int[] fileSizes = { 123, 234, 345, 456, 678, 789 };\n+\n+        for(int i = 0; i < fileNames.length; ++i) {\n+            File theFile = new File(subDir, fileNames[i]);\n+            createFile(theFile, fileSizes[i]);\n+        }\n+\n+        Collection files = FileUtils.listFiles(subDir,\n+                                               new WildcardFilter(\"*.*\"),\n+                                               new WildcardFilter(\"*\"));\n+\n+        int count = files.size();\n+        Object[] fileObjs = files.toArray();\n+\n+        assertEquals(files.size(), fileNames.length);\n+\n+        Map foundFileNames = new HashMap();\n+\n+        for(int i = 0; i < count; ++i) {\n+            boolean found = false;\n+            for(int j = 0; (( !found ) && (j < fileNames.length)); ++j) {\n+                if ( fileNames[j].equals(((File) fileObjs[i]).getName())) {\n+                    foundFileNames.put(fileNames[j], fileNames[j]);\n+                    found = true;\n+                }\n+            }\n+        }\n+\n+        assertEquals(foundFileNames.size(), fileNames.length);\n+\n+        subDir.delete();\n+    }\n+\n+    public void testIterateFiles() throws Exception {\n+        File srcDir = getTestDirectory();\n+        File subDir = new File(srcDir, \"list_test\" );\n+        subDir.mkdir();\n+\n+        String[] fileNames = \n{ \"a.txt\", \"b.txt\", \"c.txt\", \"d.txt\", \"e.txt\", \"f.txt\" };\n+        int[] fileSizes = { 123, 234, 345, 456, 678, 789 };\n+\n+        for(int i = 0; i < fileNames.length; ++i) {\n+            File theFile = new File(subDir, fileNames[i]);\n+            createFile(theFile, fileSizes[i]);\n+        }\n+\n+        Iterator files = FileUtils.iterateFiles(subDir,\n+                                                new WildcardFilter(\"*.*\"),\n+                                                new WildcardFilter(\"*\"));\n+\n+        Map foundFileNames = new HashMap();\n+\n+        while(files.hasNext()) {\n+            boolean found = false;\n+            String fileName = ((File) files.next()).getName();\n+\n+            for(int j = 0; (( !found ) && (j < fileNames.length)); ++j) {\n+                if ( fileNames[j].equals(fileName)) {\n+                    foundFileNames.put(fileNames[j], fileNames[j]);\n+                    found = true;\n+                }\n+            }\n+        }\n+\n+        assertEquals(foundFileNames.size(), fileNames.length);\n+\n+        subDir.delete();\n+    }\n+\n     public void testReadFileToString() throws Exception {\n         File file = new File(getTestDirectory(), \"read.obj\");\n         FileOutputStream out = new FileOutputStream(file);\n@@ -698,6 +778,25 @@\n\n         }\n     }\n \n+    public void testIterateLines() throws Exception {\n+        File file = newFile(\"lines.txt\");\n+        try {\n+            String[] data = new String[] {\"hello\", \"/u1234\", \"\", \"this \nis\", \"some text\"};\n+            createLineBasedFile(file, data);\n+\n+            Iterator lines = FileUtils.iterateLines(file, \"UTF-8\");\n+            int counter = 0;\n+\n+            while( lines.hasNext() ) {\n+                String line = (String) lines.next();\n+                assertEquals(data[counter], line);\n+                ++counter;\n+            }\n+        } finally {\n+            deleteFile(file);\n+        }\n+    }\n+\n     public void testWriteStringToFile1() throws Exception {\n         File file = new File(getTestDirectory(), \"write.txt\");\n         FileUtils.writeStringToFile(file, \"Hello /u1234\", \"UTF8\");",
                "resolved": "2007-03-09",
                "versions": [
                    "1.1"
                ],
                "fixVersions": [
                    "1.2"
                ]
            },
            {
                "issue_id": "IO-30",
                "project": "Commons IO",
                "title": "[io] FileUtils.toFile() drops drive letter on windows",
                "type": "Bug",
                "description": "Using 1.0 release, downloaded from ibiblio\n\nThis test will fail for me:\n\n    public void testCommonsIOBug() throws Exception {\n        final File fileBefore = new File(\"Z:\\\\test\");\n        System.out.println(\"Before: \" + fileBefore);\n        final URL fileURL = new URL(\"file://\" + fileBefore.getAbsolutePath());\n        System.out.println(\"In URL: \" + fileURL);\n        final File fileAfter = FileUtils.toFile(fileURL);\n        System.out.println(\"After: \" + fileAfter);\n        assertEquals(fileBefore.getAbsolutePath(), fileAfter.getAbsolutePath());\n    }\n\nThe output for me is:\n\nBefore: Z:\\test\nIn URL: file://Z:/test\nAfter: \\test",
                "resolved": "2007-03-09",
                "versions": [
                    "1.0"
                ],
                "fixVersions": []
            },
            {
                "issue_id": "IO-29",
                "project": "Commons IO",
                "title": "[io] NPE in FileUtils.listFiles(dir, extensions, recursive)",
                "type": "Bug",
                "description": "Calling this method with dir=\"c:\\\\\" with recursion set to true on a Windows XP \nsystem with NTFS partition produces NPE (debugger told line 145). I think the \nproblem is when the method reaches dirs which the user has no permission to \nread, for instance \"c:\\System Volume Information\".\nMaybe file.canRead() should be added somewhere before trying to go one step \ndeeper in directory tree.\n\nThorsten",
                "resolved": "2006-07-13",
                "versions": [
                    "1.0"
                ],
                "fixVersions": []
            },
            {
                "issue_id": "IO-28",
                "project": "Commons IO",
                "title": "[io] Fix CheckStyle Issues",
                "type": "Bug",
                "description": "patch to follow",
                "resolved": "2007-03-09",
                "versions": [
                    "1.1"
                ],
                "fixVersions": [
                    "1.2"
                ]
            },
            {
                "issue_id": "IO-27",
                "project": "Commons IO",
                "title": "[io] FileUtils.toFile(URL) does not unescape %xx characters",
                "type": "Bug",
                "description": "FileUtils.toFile(URL) does not properly handle URLs with %xx escaped characters,\nwhich should be unescaped in the resulting File object (using\njava.net.URLDecoder.decode(String) or similar).\n\nThe following JUnit tests expose the problem:\n\n    public void testToFileHash() throws MalformedURLException\n    {\n        File expected = new File(\"ab#c\").getAbsoluteFile();\n        URL url = expected.toURI().toURL();\n\n        File actual = FileUtils.toFile(url);\n        \n        assertEquals(expected, actual);\n    }\n    \n    public void testToFileQuestionMark() throws MalformedURLException\n    {\n        File expected = new File(\"ab?c\").getAbsoluteFile();\n        URL url = expected.toURI().toURL();\n\n        File actual = FileUtils.toFile(url);\n        \n        assertEquals(expected, actual);\n    }",
                "resolved": "2007-03-09",
                "versions": [
                    "1.0"
                ],
                "fixVersions": []
            },
            {
                "issue_id": "IO-26",
                "project": "Commons IO",
                "title": "[io] Method wildcardMatch of FilenameUtils fail with recurent patterns",
                "type": "Bug",
                "description": "The method wildcardMatch of FilenameUtils does not handle recurrent pattern on\nfilename.\n\nAdd this test case in FilenameUtilsWildcardTestCase.java to check the bug:\n\nassertMatch(\"log.log\", \"*log\", true);",
                "resolved": "2007-03-09",
                "versions": [],
                "fixVersions": [
                    "1.1"
                ]
            },
            {
                "issue_id": "IO-25",
                "project": "Commons IO",
                "title": "[io] LockableFileWriter issues",
                "type": "Bug",
                "description": "LockableFileWriter can lock the file such that it can't be deleted due to the\nsequence of events in the constructor (no test).\n\nLockableFileWriter loses the lock after the first attempt to break the lock\n(test case error).\n\nLockableFileWriter can create a file then fail and not delete the file in the\nconstructor (no test).",
                "resolved": "2007-03-09",
                "versions": [
                    "1.1"
                ],
                "fixVersions": [
                    "1.2"
                ]
            },
            {
                "issue_id": "IO-24",
                "project": "Commons IO",
                "title": "[IO] Online API docs for 1.0 point to 1.1 docs",
                "type": "Bug",
                "description": "The link on the Commons-IO homepage to the API docs for version 1.0 actually\npoint to docs for a 1.1-dev version.  The URL is\nhttp://jakarta.apache.org/commons/io/api-1.0/index.html, but the content is not 1.0",
                "resolved": "2007-03-09",
                "versions": [],
                "fixVersions": [
                    "1.2"
                ]
            },
            {
                "issue_id": "IO-23",
                "project": "Commons IO",
                "title": "[io] CountingInputStream doesn't implement skip()",
                "type": "Bug",
                "description": "The CountingInputStream doesn't count skipped bytes in it's count.",
                "resolved": "2007-03-09",
                "versions": [
                    "1.0"
                ],
                "fixVersions": [
                    "1.1"
                ]
            },
            {
                "issue_id": "IO-22",
                "project": "Commons IO",
                "title": "[io] FileUtils.cleanDirectory throws NullPointerException when File.list() fails",
                "type": "Bug",
                "description": "java.io.File.list() returns null if an I/O error occurs.  In practice this can\nbe triggered by trying to list the contents of a directory to which the user\ndoes not have sufficient permissions (e.g. a directory with mode 0 on a\nunix-like filesystem).\n\nIn this case, FileUtils.cleanDirectory currently throws NPE because it assumes\nthat File.list() will always return successfully.  The correct behavior should\nbe to throw IOException instead.\n\nFollowing inline is a patch against trunk which resolves the issue.\n\nIndex: src/test/org/apache/commons/io/FileUtilsCleanDirectoryTestCase.java\n===================================================================\n--- src/test/org/apache/commons/io/FileUtilsCleanDirectoryTestCase.java (revision 0)\n+++ src/test/org/apache/commons/io/FileUtilsCleanDirectoryTestCase.java (revision 0)\n@@ -0,0 +1,143 @@\n+/*\n+ * Copyright 2003,2004 The Apache Software Foundation.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.commons.io;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+\n+import java.io.File;\n+import java.io.IOException;\n+\n+import org.apache.commons.io.testtools.FileBasedTestCase;\n+\n+/**\n+ * Test cases for FileUtils.cleanDirectory() method.\n+ */\n+public class FileUtilsCleanDirectoryTestCase extends FileBasedTestCase {\n+    final File top = getLocalTestDirectory();\n+\n+    public FileUtilsCleanDirectoryTestCase(String name) {\n+        super(name);\n+    }\n+\n+    private File getLocalTestDirectory() {\n+        return new File(getTestDirectory(), \"list-files\");\n+    }\n+\n+    /**\n+     * @see junit.framework.TestCase#setUp()\n+     */\n+    protected void setUp() throws Exception {\n+        top.mkdirs();\n+    }\n+\n+    /**\n+     * @see junit.framework.TestCase#tearDown()\n+     */\n+    protected void tearDown() throws Exception {\n+        chmod(top, 775, true);\n+        FileUtils.deleteDirectory(top);\n+    }\n+\n+    public void testCleanEmpty() throws Exception {\n+        assertEquals(0, top.list().length);\n+\n+        FileUtils.cleanDirectory(top);\n+\n+        assertEquals(0, top.list().length);\n+    }\n+\n+    public void testDeletesRegular() throws Exception {\n+        FileUtils.touch(new File(top, \"regular\"));\n+        FileUtils.touch(new File(top, \".hidden\"));\n+\n+        assertEquals(2, top.list().length);\n+\n+        FileUtils.cleanDirectory(top);\n+\n+        assertEquals(0, top.list().length);\n+    }\n+\n+    public void testDeletesNested() throws Exception {\n+        final File nested = new File(top, \"nested\");\n+\n+        assertTrue(nested.mkdirs());\n+\n+        FileUtils.touch(new File(nested, \"file\"));\n+\n+        assertEquals(1, top.list().length);\n+\n+        FileUtils.cleanDirectory(top);\n+\n+        assertEquals(0, top.list().length);\n+    }\n+\n+    public void testThrowsOnNullList() throws Exception {\n+        if (!chmod(top, 0, false)) {\n+            // test wont work if we can't restrict permissions on the\ndirectory; skip it.\n+            return;\n+        }\n+\n+        try {\n+            FileUtils.cleanDirectory(top);\n+            fail(\"expected IOException\");\n+        } catch (IOException e) {\n+            assertEquals(\"Failed to list contents of \" + top.getAbsolutePath(),\ne.getMessage());\n+        }\n+    }\n+\n+    public void testThrowsOnCannotDeleteFile() throws Exception {\n+        final File file = new File(top, \"restricted\");\n+        FileUtils.touch(file);\n+\n+        if (!chmod(top, 500, false)) {\n+            // test wont work if we can't restrict permissions on the\ndirectory; skip it.\n+            return;\n+        }\n+\n+        try {\n+            FileUtils.cleanDirectory(top);\n+            fail(\"expected IOException\");\n+        } catch (IOException e) {\n+            assertEquals(\"Unable to delete file: \" + file.getAbsolutePath(),\ne.getMessage());\n+        }\n+    }\n+\n+    private boolean chmod(File file, int mode, boolean recurse) throws\nIOException, InterruptedException {\n+        List args = new ArrayList();\n+        args.add(\"chmod\");\n+\n+        if (recurse) {\n+            args.add(\"-R\");\n+        }\n+\n+        args.add(Integer.toString(mode));\n+        args.add(file.getAbsolutePath());\n+\n+        Process proc;\n+\n+        try {\n+            proc = Runtime.getRuntime().exec((String[]) args.toArray(new\nString[args.size()]));\n+        } catch (IOException e) {\n+            return false;\n+        }\n+\n+        int result = proc.waitFor();\n+\n+        assertEquals(0, result);\n+        return true;\n+    }\n+}\nIndex: src/java/org/apache/commons/io/FileUtils.java\n===================================================================\n--- src/java/org/apache/commons/io/FileUtils.java       (revision 291328)\n+++ src/java/org/apache/commons/io/FileUtils.java       (working copy)\n@@ -701,6 +701,11 @@\n         IOException exception = null;\n\n         File[] files = directory.listFiles();\n+\n+        if (files == null) {\n+            throw new IOException(\"Failed to list contents of \" + directory);\n+        }\n+\n         for (int i = 0; i < files.length; i++) {\n             File file = files[i];\n             try {",
                "resolved": "2007-03-09",
                "versions": [
                    "1.0"
                ],
                "fixVersions": [
                    "1.1"
                ]
            },
            {
                "issue_id": "IO-21",
                "project": "Commons IO",
                "title": "[io] IOUtils does not provide methods for converting a String to an InputStream",
                "type": "Bug",
                "description": "This is a conversion I've had to do on a number of occasions. Even though it is \nfairly simple, I think utility methods in IOUtils would be useful.",
                "resolved": "2007-03-09",
                "versions": [],
                "fixVersions": [
                    "1.1"
                ]
            },
            {
                "issue_id": "IO-20",
                "project": "Commons IO",
                "title": "[io] IOFileFilter created by FileFilterUtils.makeCVSAware(IOFileFilter) only accept directory",
                "type": "Bug",
                "description": "The method makeCVSAware(IOFileFilter) in FileFilterUtils returns IOFileFilter \nthat ignores CVS directories. But this IOFileFilter also ignores normal files. \nonly accepts directories.\n\nI think it should accept files and directories except directories named \"CVS\".\n\nI will send a path for this problem, so please see that about details.",
                "resolved": "2007-03-09",
                "versions": [
                    "1.0"
                ],
                "fixVersions": [
                    "1.1"
                ]
            },
            {
                "issue_id": "IO-19",
                "project": "Commons IO",
                "title": "FileUtils missing path-related methods",
                "type": "Bug",
                "description": "The path-related methods described in its javadoc, such as removePath(), are \nall missing from the code.",
                "resolved": "2007-03-09",
                "versions": [
                    "1.0"
                ],
                "fixVersions": [
                    "1.1"
                ]
            },
            {
                "issue_id": "IO-17",
                "project": "Commons IO",
                "title": "[io] delete in FileUtils sometimes fails on Windows",
                "type": "Bug",
                "description": "The delete function in the FileUtils class will sometimes not delete a file or\ndirectory on windows. This is a known bug in the VM. Ant solves this by calling\nthe GC explecitly and then wait some time. See\nhttp://cvs.apache.org/viewcvs.cgi/ant/src/main/org/apache/tools/ant/taskdefs/Delete.java?view=markup\non how they do it.",
                "resolved": "2006-09-17",
                "versions": [
                    "1.0"
                ],
                "fixVersions": []
            },
            {
                "issue_id": "IO-16",
                "project": "Commons IO",
                "title": "DirectoryFileFilter does not work, the AbstractFileFilter bug",
                "type": "Bug",
                "description": "Env: Java 1.4.2, commons-io-1.0.jar, Win XP\n\nThe AbstractFileFilter's FilenameFilter's accept(File, String) method \nimplementation constructs the fileName/File (it passes to accept(File)) \nwrongly - please see below. This causes the DirectoryFileFilter (in example, I \ndid not have time to check out the other AbstractFileFilter implementations) \nfailure since it's FileFilter implementation receives the incorrect \nfilename/File. \n\nNote I stumbled into this in Win Env. and really don't know how it works in \nother platforms.\n\nv1.0 code:\n    public boolean accept(File dir, String name) {\n        String filename = dir.getName() + File.separator + name;\n        return accept(new File(filename));\n    }\n\ncorrect code should be:\n    public boolean accept(File dir, String name) {\n        String filename = dir.getPath() + File.separator + name;\n        return accept(new File(filename));\n    }",
                "resolved": "2007-03-09",
                "versions": [
                    "1.0"
                ],
                "fixVersions": [
                    "1.1"
                ]
            },
            {
                "issue_id": "IO-14",
                "project": "Commons IO",
                "title": "[io] Usage of dir /c instead of dir /-c in FileSystemUtils.freeSpaceWindows",
                "type": "Bug",
                "description": "In the function freeSpaceWindows of the class FileSystemUtils, the command use is \ndir /c (with thousand separator) instead of dir /-c (without thousand \nseparator) as state in the documentation : see line 166.\n\nThis is a problem for French locale where the thousand separator is the SPACE\ncharacter.\n\nThanks for this great package !!!",
                "resolved": "2007-03-09",
                "versions": [
                    "1.1"
                ],
                "fixVersions": [
                    "1.2"
                ]
            },
            {
                "issue_id": "IO-13",
                "project": "Commons IO",
                "title": "[IO] FileUtils.toFile( URL ) doesn't deal with URL encoding",
                "type": "Bug",
                "description": "If the URL passed to the FileUtils.toFile( URL ) method has been encoded, using\nthe numeric escapes ( e.g., space => %20 ) then the returned File object cannot\nbe used to access the file on disk, as the path is wrong. \n\nOne way this can occur is when the URL is returned from\nClassLoader.getResource(), and the path to the resource contains spaces. Suppose\nthe following code is run from a directory containing a space (say, /tmp/with\nspace/ or d:\\temp\\with space\\):\n\npublic static  void main( String[] args )\n    throws Exception\n{\n    System.out.println( System.getProperty( \"java.version\" ) );\n\n    URL u = file.class.getResource( \"t\" );\n    System.out.println( u.getFile() );\n\n    File f = FileUtils.toFile( u );\n    System.out.println( f );\n    System.out.println( f.canRead() );\n}\n\nLinux:\n1.4.1\n/tmp/with%20space/t\n/tmp/with%20space/t\nfalse\n\nWindows:\n1.4.1_06\n/D:/temp/with%20space/t\nD:\\temp\\with%20space\\t\nfalse\n\nTested on 1.4.1, 1.4.2 and 1.5.0.",
                "resolved": "2008-05-30",
                "versions": [
                    "1.0"
                ],
                "fixVersions": [
                    "1.1"
                ]
            },
            {
                "issue_id": "IO-12",
                "project": "Commons IO",
                "title": "[io] CountingInputStream.getCount() often returns invalid values",
                "type": "Bug",
                "description": "In all read methods there is code like this:\n\nint found = super.read(b);\nthis.count += found;\nreturn found;\n\nor like this:\n\nthis.count++;\nreturn super.read();\n\nIt is ok until we will reach EOF. In this case super.read() returns -1, and\ndecreases count in the first case, and increases in the second. In such case\ncount should not be changed. So when we have something like this:\n\nFile file = new File(\"somefile.txt\") //File with text \"123\" and no newlines\n\nCountingInputStream cis = new CountingInputStream(new FileInputStream (file));\nBufferedReader reader = new BufferedReader(new InputStreamReader(cis));\nwhile(reader.read() != -1) {}\n\nAfter this code when we call cis.getCount() it will return 2, while number of\nbytes in read file is 3.",
                "resolved": "2007-03-09",
                "versions": [
                    "1.0"
                ],
                "fixVersions": [
                    "1.1"
                ]
            },
            {
                "issue_id": "IO-10",
                "project": "Commons IO",
                "title": "[io] Synchronized methods in NullOutputStream",
                "type": "Bug",
                "description": "Two of the empty-bodied write methods in NullOutputStream are synchronized.  The\nsynchronized keyword needs removing.",
                "resolved": "2007-03-09",
                "versions": [
                    "1.0"
                ],
                "fixVersions": [
                    "1.1"
                ]
            },
            {
                "issue_id": "IO-8",
                "project": "Commons IO",
                "title": "org.apache.commons.io.FileUtils.copyFile shouldn't allow to copy a file on itself",
                "type": "Bug",
                "description": "The bug is described by a one-line code      \n\nFileUtils.copyFile(new File(\"c:/hello.txt\"), new File(\"c:/hello.txt\"));\n\nTry run it and check hello.txt size before and after: you will find\nthat the file has been razed to 0 bytes.\n\nIt should be illegal to copy a file with the same path as the destination,\nor better, with the same getCanonicalPath(), so I suggest the following \nenhancement:\n\n------------ in FileUtils.java -------------\n\n\n\n        //make sure we can write to destination\n        if (destination.exists() && !destination.canWrite()) {\n            String message =\n                \"Unable to open file \" + destination + \" for writing.\";\n            throw new IOException(message);\n        }\n        \n        //makes sure it is not the same file        \n        if(source.getCanonicalPath().equals(destination.getCanonicalPath())) {\n            String message =\n                \"Unable to write file \" + source + \" on itself.\";\n            throw new IOException(message);\n            \n        }\n\n-- end --\nthis code should be safe regarding path and canonical path: you\nare querying OS after existence test, and anyway you are sure\nthat there is a source file and it has a canonical path.\n(anyway getCanonicalPath throws a IOException, which is sound\nin the context)\n\nhope this may help\ndaniele rizzi (drizzi@largesys.it)",
                "resolved": "2007-03-09",
                "versions": [
                    "1.0"
                ],
                "fixVersions": [
                    "1.0"
                ]
            },
            {
                "issue_id": "IO-6",
                "project": "Commons IO",
                "title": "[io] Problem with copyFileToDirectory(File, File)",
                "type": "Bug",
                "description": "I am running a batch application that moves around some files. \nFileUtils.listFiles(new File(\"c:\\\\\"), new PrefixFileFilter(filePrefix), new \nNotFileFilter(new NameFileFilter(\"some\"))) works just great. But the more I \nstarted load testing application I came across this strange problem. I am \nmoving around 22000 files. And While its moving around the file on some file \nits changing file date. I am using FileUtils.copyFileToDirectory(file, todir);",
                "resolved": "2007-03-09",
                "versions": [
                    "1.0"
                ],
                "fixVersions": []
            },
            {
                "issue_id": "IO-5",
                "project": "Commons IO",
                "title": "Fi",
                "type": "Bug",
                "description": null,
                "resolved": "2007-03-09",
                "versions": [
                    "1.0"
                ],
                "fixVersions": []
            },
            {
                "issue_id": "IO-4",
                "project": "Commons IO",
                "title": "[io] use writeTo() instead of toByteArray in DeferredFileOutputStream.thresholdReached()",
                "type": "Bug",
                "description": "It is better not to allocate a new buffer when writing the memory buffer to file.\n\nrecommend using writeTo() insteand of toByteArray()\nat DeferredFileOutputStream.java:120\n------------\nprotected void thresholdReached() throws IOException\n{\n    FileOutputStream fos = new FileOutputStream(outputFile);\n    memoryOutputStream.writeTo(fos);\n    diskOutputStream = fos;\n    currentOutputStream = fos;\n    memoryOutputStream = null;\n}\n----------------------",
                "resolved": "2007-03-09",
                "versions": [],
                "fixVersions": [
                    "1.1"
                ]
            },
            {
                "issue_id": "IO-3",
                "project": "Commons IO",
                "title": "[IO] Last modified date not preserved in FileUtils.copyFile()",
                "type": "Bug",
                "description": "File copying using FileUtils.copyFile() does not preserve the last modified \ndate in the copy. I'm not sure about other OS's, but preservation of the last \nmodified date occurs when copying from Windows Explorer or the command window \nin a Windows environment. To add this feature to the class, just add the \nfollowing line at the end of FileUtils.copyFile():\n      destination.setLastModified(source.lastModified());\nTo unit test this change, add the following to the end of \nFileUtilsTestCase.testCopyFile1() and/or testCopyFile2():\n        assertTrue(\"Check last modified date preserved\", testFile1.lastModified\n() == destination.lastModified());",
                "resolved": "2007-03-09",
                "versions": [
                    "1.0"
                ],
                "fixVersions": [
                    "1.0"
                ]
            },
            {
                "issue_id": "IO-2",
                "project": "Commons IO",
                "title": "[IO] FilenameUtils.catPath cannot handle \"\\\"",
                "type": "Bug",
                "description": "Hi,\n\n(sorry to assign it to the wrong component, but I cannot choose for IO)\n\nwhen I try to concat 2 paths with \"\\\" as path separator instead of \"/\", an\nexception is thrown. I'll upload a patch for this as well as a junit test.\n\ne.g.: FilenameUtils.catPath(\"C:\\\\temp\\\\\", \"test\") throws an exception ...\n\nMaarten",
                "resolved": "2007-03-09",
                "versions": [],
                "fixVersions": [
                    "1.0"
                ]
            },
            {
                "issue_id": "IO-1",
                "project": "Commons IO",
                "title": "[io] API doc of FileUtils.forceMkdir(File) should mention that parent dirs are created if required",
                "type": "Bug",
                "description": "FileUtils.forceMkdir(File) calls File.mkdirs() to create the directory. The\nJavaDoc of this method does not mention that any necessary but nonexistent\nparent directories are created, too.",
                "resolved": "2007-03-09",
                "versions": [
                    "1.0"
                ],
                "fixVersions": [
                    "1.1"
                ]
            }
        ]
    }
}