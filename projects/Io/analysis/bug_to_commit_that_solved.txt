{
    "bugs to commit": [
        {
            "bug index": "9",
            "bug id": "IO-4",
            "hexsha": "742c51feeaf75542ab9db6782ad3d2ad506fb871",
            "fix_hash": "d929d05991ca677efaedb3d51abacb40dd1464d0",
            "description": "It is better not to allocate a new buffer when writing the memory buffer to file.\n\nrecommend using writeTo() insteand of toByteArray()\nat DeferredFileOutputStream.java:120\n------------\nprotected void thresholdReached() throws IOException\n{\n    FileOutputStream fos = new FileOutputStream(outputFile);\n    memoryOutputStream.writeTo(fos);\n    diskOutputStream = fos;\n    currentOutputStream = fos;\n    memoryOutputStream = null;\n}\n----------------------",
            "commit number version hash": 443,
            "commit number": 2422,
            "function that changed": [
                {
                    "function name": "errors",
                    "function params": [],
                    "file name": "ByteOrderMarkTest.java",
                    "file old path": "src/test/java/org/apache/commons/io/ByteOrderMarkTest.java",
                    "file new path": "src/test/java/org/apache/commons/io/ByteOrderMarkTest.java",
                    "full name": "src.test.java.org.apache.commons.io.ByteOrderMarkTest.errors"
                },
                {
                    "function name": "getOutput",
                    "function params": [
                        "threadName"
                    ],
                    "file name": "DemuxTest.java",
                    "file old path": "src/test/java/org/apache/commons/io/DemuxTest.java",
                    "file new path": "src/test/java/org/apache/commons/io/DemuxTest.java",
                    "full name": "src.test.java.org.apache.commons.io.DemuxTest.getOutput"
                },
                {
                    "function name": "getInput",
                    "function params": [
                        "threadName"
                    ],
                    "file name": "DemuxTest.java",
                    "file old path": "src/test/java/org/apache/commons/io/DemuxTest.java",
                    "file new path": "src/test/java/org/apache/commons/io/DemuxTest.java",
                    "full name": "src.test.java.org.apache.commons.io.DemuxTest.getInput"
                },
                {
                    "function name": "startWriter",
                    "function params": [
                        "name",
                        "data",
                        "demux"
                    ],
                    "file name": "DemuxTest.java",
                    "file old path": "src/test/java/org/apache/commons/io/DemuxTest.java",
                    "file new path": "src/test/java/org/apache/commons/io/DemuxTest.java",
                    "full name": "src.test.java.org.apache.commons.io.DemuxTest.startWriter"
                },
                {
                    "function name": "testMissingStartDirectory",
                    "function params": [],
                    "file name": "DirectoryWalkerTest.java",
                    "file old path": "src/test/java/org/apache/commons/io/DirectoryWalkerTest.java",
                    "file new path": "src/test/java/org/apache/commons/io/DirectoryWalkerTest.java",
                    "full name": "src.test.java.org.apache.commons.io.DirectoryWalkerTest.testMissingStartDirectory"
                },
                {
                    "function name": "testMissingStartDirectory",
                    "function params": [],
                    "file name": "DirectoryWalkerTestCaseJava4.java",
                    "file old path": "src/test/java/org/apache/commons/io/DirectoryWalkerTestCaseJava4.java",
                    "file new path": "src/test/java/org/apache/commons/io/DirectoryWalkerTestCaseJava4.java",
                    "full name": "src.test.java.org.apache.commons.io.DirectoryWalkerTestCaseJava4.testMissingStartDirectory"
                },
                {
                    "function name": "testEOFException",
                    "function params": [],
                    "file name": "EndianUtilsTest.java",
                    "file old path": "src/test/java/org/apache/commons/io/EndianUtilsTest.java",
                    "file new path": "src/test/java/org/apache/commons/io/EndianUtilsTest.java",
                    "full name": "src.test.java.org.apache.commons.io.EndianUtilsTest.testEOFException"
                },
                {
                    "function name": "testSameFile",
                    "function params": [],
                    "file name": "FileUtilsDirectoryContainsTest.java",
                    "file old path": "src/test/java/org/apache/commons/io/FileUtilsDirectoryContainsTest.java",
                    "file new path": "src/test/java/org/apache/commons/io/FileUtilsDirectoryContainsTest.java",
                    "full name": "src.test.java.org.apache.commons.io.FileUtilsDirectoryContainsTest.testSameFile"
                },
                {
                    "function name": "testDirectoryDoesNotExist",
                    "function params": [],
                    "file name": "FileUtilsDirectoryContainsTest.java",
                    "file old path": "src/test/java/org/apache/commons/io/FileUtilsDirectoryContainsTest.java",
                    "file new path": "src/test/java/org/apache/commons/io/FileUtilsDirectoryContainsTest.java",
                    "full name": "src.test.java.org.apache.commons.io.FileUtilsDirectoryContainsTest.testDirectoryDoesNotExist"
                },
                {
                    "function name": "testUnrealizedContainment",
                    "function params": [],
                    "file name": "FileUtilsDirectoryContainsTest.java",
                    "file old path": "src/test/java/org/apache/commons/io/FileUtilsDirectoryContainsTest.java",
                    "file new path": "src/test/java/org/apache/commons/io/FileUtilsDirectoryContainsTest.java",
                    "full name": "src.test.java.org.apache.commons.io.FileUtilsDirectoryContainsTest.testUnrealizedContainment"
                },
                {
                    "function name": "testListFiles",
                    "function params": [],
                    "file name": "FileUtilsListFilesTest.java",
                    "file old path": "src/test/java/org/apache/commons/io/FileUtilsListFilesTest.java",
                    "file new path": "src/test/java/org/apache/commons/io/FileUtilsListFilesTest.java",
                    "full name": "src.test.java.org.apache.commons.io.FileUtilsListFilesTest.testListFiles"
                },
                {
                    "function name": "testIsExtension_injection",
                    "function params": [],
                    "file name": "FilenameUtilsTest.java",
                    "file old path": "src/test/java/org/apache/commons/io/FilenameUtilsTest.java",
                    "file new path": "src/test/java/org/apache/commons/io/FilenameUtilsTest.java",
                    "full name": "src.test.java.org.apache.commons.io.FilenameUtilsTest.testIsExtension_injection"
                },
                {
                    "function name": "testGetPrefix_with_null_character",
                    "function params": [],
                    "file name": "FilenameUtilsTest.java",
                    "file old path": "src/test/java/org/apache/commons/io/FilenameUtilsTest.java",
                    "file new path": "src/test/java/org/apache/commons/io/FilenameUtilsTest.java",
                    "full name": "src.test.java.org.apache.commons.io.FilenameUtilsTest.testGetPrefix_with_null_character"
                },
                {
                    "function name": "testGetPathNoEndSeparator_with_null_character",
                    "function params": [],
                    "file name": "FilenameUtilsTest.java",
                    "file old path": "src/test/java/org/apache/commons/io/FilenameUtilsTest.java",
                    "file new path": "src/test/java/org/apache/commons/io/FilenameUtilsTest.java",
                    "full name": "src.test.java.org.apache.commons.io.FilenameUtilsTest.testGetPathNoEndSeparator_with_null_character"
                },
                {
                    "function name": "testInjectionFailure",
                    "function params": [],
                    "file name": "FilenameUtilsTest.java",
                    "file old path": "src/test/java/org/apache/commons/io/FilenameUtilsTest.java",
                    "file new path": "src/test/java/org/apache/commons/io/FilenameUtilsTest.java",
                    "full name": "src.test.java.org.apache.commons.io.FilenameUtilsTest.testInjectionFailure"
                },
                {
                    "function name": "testNormalize_with_null_character",
                    "function params": [],
                    "file name": "FilenameUtilsTest.java",
                    "file old path": "src/test/java/org/apache/commons/io/FilenameUtilsTest.java",
                    "file new path": "src/test/java/org/apache/commons/io/FilenameUtilsTest.java",
                    "full name": "src.test.java.org.apache.commons.io.FilenameUtilsTest.testNormalize_with_null_character"
                },
                {
                    "function name": "toAscii",
                    "function params": [
                        "c"
                    ],
                    "file name": "HexDumpTest.java",
                    "file old path": "src/test/java/org/apache/commons/io/HexDumpTest.java",
                    "file new path": "src/test/java/org/apache/commons/io/HexDumpTest.java",
                    "full name": "src.test.java.org.apache.commons.io.HexDumpTest.toAscii"
                },
                {
                    "function name": "testDump",
                    "function params": [],
                    "file name": "HexDumpTest.java",
                    "file old path": "src/test/java/org/apache/commons/io/HexDumpTest.java",
                    "file new path": "src/test/java/org/apache/commons/io/HexDumpTest.java",
                    "full name": "src.test.java.org.apache.commons.io.HexDumpTest.testDump"
                },
                {
                    "function name": "testFileContentEquals",
                    "function params": [],
                    "file name": "PathUtilsContentEqualsTest.java",
                    "file old path": "src/test/java/org/apache/commons/io/file/PathUtilsContentEqualsTest.java",
                    "file new path": "src/test/java/org/apache/commons/io/file/PathUtilsContentEqualsTest.java",
                    "full name": "src.test.java.org.apache.commons.io.file.PathUtilsContentEqualsTest.testFileContentEquals"
                },
                {
                    "function name": "testReadWithBOMUtf16Be",
                    "function params": [],
                    "file name": "BOMInputStreamTest.java",
                    "file old path": "src/test/java/org/apache/commons/io/input/BOMInputStreamTest.java",
                    "file new path": "src/test/java/org/apache/commons/io/input/BOMInputStreamTest.java",
                    "full name": "src.test.java.org.apache.commons.io.input.BOMInputStreamTest.testReadWithBOMUtf16Be"
                },
                {
                    "function name": "testReadWithBOMUtf32Le",
                    "function params": [],
                    "file name": "BOMInputStreamTest.java",
                    "file old path": "src/test/java/org/apache/commons/io/input/BOMInputStreamTest.java",
                    "file new path": "src/test/java/org/apache/commons/io/input/BOMInputStreamTest.java",
                    "full name": "src.test.java.org.apache.commons.io.input.BOMInputStreamTest.testReadWithBOMUtf32Le"
                },
                {
                    "function name": "testReadWithBOMUtf8",
                    "function params": [],
                    "file name": "BOMInputStreamTest.java",
                    "file old path": "src/test/java/org/apache/commons/io/input/BOMInputStreamTest.java",
                    "file new path": "src/test/java/org/apache/commons/io/input/BOMInputStreamTest.java",
                    "full name": "src.test.java.org.apache.commons.io.input.BOMInputStreamTest.testReadWithBOMUtf8"
                },
                {
                    "function name": "testReadWithBOMUtf32Be",
                    "function params": [],
                    "file name": "BOMInputStreamTest.java",
                    "file old path": "src/test/java/org/apache/commons/io/input/BOMInputStreamTest.java",
                    "file new path": "src/test/java/org/apache/commons/io/input/BOMInputStreamTest.java",
                    "full name": "src.test.java.org.apache.commons.io.input.BOMInputStreamTest.testReadWithBOMUtf32Be"
                },
                {
                    "function name": "testReadWithBOMUtf16Le",
                    "function params": [],
                    "file name": "BOMInputStreamTest.java",
                    "file old path": "src/test/java/org/apache/commons/io/input/BOMInputStreamTest.java",
                    "file new path": "src/test/java/org/apache/commons/io/input/BOMInputStreamTest.java",
                    "full name": "src.test.java.org.apache.commons.io.input.BOMInputStreamTest.testReadWithBOMUtf16Le"
                },
                {
                    "function name": "Test",
                    "function params": [
                        "other"
                    ],
                    "file name": "ClassLoaderObjectInputStreamTest.java",
                    "file old path": "src/test/java/org/apache/commons/io/input/ClassLoaderObjectInputStreamTest.java",
                    "file new path": "src/test/java/org/apache/commons/io/input/ClassLoaderObjectInputStreamTest.java",
                    "full name": "src.test.java.org.apache.commons.io.input.ClassLoaderObjectInputStreamTest.Test"
                },
                {
                    "function name": "testLargeFiles_IO84",
                    "function params": [],
                    "file name": "CountingInputStreamTest.java",
                    "file old path": "src/test/java/org/apache/commons/io/input/CountingInputStreamTest.java",
                    "file new path": "src/test/java/org/apache/commons/io/input/CountingInputStreamTest.java",
                    "full name": "src.test.java.org.apache.commons.io.input.CountingInputStreamTest.testLargeFiles_IO84"
                },
                {
                    "function name": "testEOFException",
                    "function params": [],
                    "file name": "NullInputStreamTest.java",
                    "file old path": "src/test/java/org/apache/commons/io/input/NullInputStreamTest.java",
                    "file new path": "src/test/java/org/apache/commons/io/input/NullInputStreamTest.java",
                    "full name": "src.test.java.org.apache.commons.io.input.NullInputStreamTest.testEOFException"
                },
                {
                    "function name": "testEOFException",
                    "function params": [],
                    "file name": "NullReaderTest.java",
                    "file old path": "src/test/java/org/apache/commons/io/input/NullReaderTest.java",
                    "file new path": "src/test/java/org/apache/commons/io/input/NullReaderTest.java",
                    "full name": "src.test.java.org.apache.commons.io.input.NullReaderTest.testEOFException"
                },
                {
                    "function name": "testMonitor",
                    "function params": [],
                    "file name": "FileAlterationMonitorTest.java",
                    "file old path": "src/test/java/org/apache/commons/io/monitor/FileAlterationMonitorTest.java",
                    "file new path": "src/test/java/org/apache/commons/io/monitor/FileAlterationMonitorTest.java",
                    "full name": "src.test.java.org.apache.commons.io.monitor.FileAlterationMonitorTest.testMonitor"
                },
                {
                    "function name": "testWrite",
                    "function params": [],
                    "file name": "ClosedOutputStreamTest.java",
                    "file old path": "src/test/java/org/apache/commons/io/output/ClosedOutputStreamTest.java",
                    "file new path": "src/test/java/org/apache/commons/io/output/ClosedOutputStreamTest.java",
                    "full name": "src.test.java.org.apache.commons.io.output.ClosedOutputStreamTest.testWrite"
                },
                {
                    "function name": "testFlush",
                    "function params": [],
                    "file name": "ClosedOutputStreamTest.java",
                    "file old path": "src/test/java/org/apache/commons/io/output/ClosedOutputStreamTest.java",
                    "file new path": "src/test/java/org/apache/commons/io/output/ClosedOutputStreamTest.java",
                    "full name": "src.test.java.org.apache.commons.io.output.ClosedOutputStreamTest.testFlush"
                },
                {
                    "function name": "testFlush",
                    "function params": [],
                    "file name": "ClosedWriterTest.java",
                    "file old path": "src/test/java/org/apache/commons/io/output/ClosedWriterTest.java",
                    "file new path": "src/test/java/org/apache/commons/io/output/ClosedWriterTest.java",
                    "full name": "src.test.java.org.apache.commons.io.output.ClosedWriterTest.testFlush"
                },
                {
                    "function name": "testWrite",
                    "function params": [],
                    "file name": "ClosedWriterTest.java",
                    "file old path": "src/test/java/org/apache/commons/io/output/ClosedWriterTest.java",
                    "file new path": "src/test/java/org/apache/commons/io/output/ClosedWriterTest.java",
                    "full name": "src.test.java.org.apache.commons.io.output.ClosedWriterTest.testWrite"
                },
                {
                    "function name": "testLargeFiles_IO84",
                    "function params": [],
                    "file name": "CountingOutputStreamTest.java",
                    "file old path": "src/test/java/org/apache/commons/io/output/CountingOutputStreamTest.java",
                    "file new path": "src/test/java/org/apache/commons/io/output/CountingOutputStreamTest.java",
                    "full name": "src.test.java.org.apache.commons.io.output.CountingOutputStreamTest.testLargeFiles_IO84"
                },
                {
                    "function name": "testThresholdReached",
                    "function params": [
                        "initialBufferSize"
                    ],
                    "file name": "DeferredFileOutputStreamTest.java",
                    "file old path": "src/test/java/org/apache/commons/io/output/DeferredFileOutputStreamTest.java",
                    "file new path": "src/test/java/org/apache/commons/io/output/DeferredFileOutputStreamTest.java",
                    "full name": "src.test.java.org.apache.commons.io.output.DeferredFileOutputStreamTest.testThresholdReached"
                },
                {
                    "function name": "testTempFileAboveThreshold",
                    "function params": [
                        "initialBufferSize"
                    ],
                    "file name": "DeferredFileOutputStreamTest.java",
                    "file old path": "src/test/java/org/apache/commons/io/output/DeferredFileOutputStreamTest.java",
                    "file new path": "src/test/java/org/apache/commons/io/output/DeferredFileOutputStreamTest.java",
                    "full name": "src.test.java.org.apache.commons.io.output.DeferredFileOutputStreamTest.testTempFileAboveThreshold"
                },
                {
                    "function name": "testWriteToSmall",
                    "function params": [
                        "initialBufferSize"
                    ],
                    "file name": "DeferredFileOutputStreamTest.java",
                    "file old path": "src/test/java/org/apache/commons/io/output/DeferredFileOutputStreamTest.java",
                    "file new path": "src/test/java/org/apache/commons/io/output/DeferredFileOutputStreamTest.java",
                    "full name": "src.test.java.org.apache.commons.io.output.DeferredFileOutputStreamTest.testWriteToSmall"
                },
                {
                    "function name": "testBelowThreshold",
                    "function params": [
                        "initialBufferSize"
                    ],
                    "file name": "DeferredFileOutputStreamTest.java",
                    "file old path": "src/test/java/org/apache/commons/io/output/DeferredFileOutputStreamTest.java",
                    "file new path": "src/test/java/org/apache/commons/io/output/DeferredFileOutputStreamTest.java",
                    "full name": "src.test.java.org.apache.commons.io.output.DeferredFileOutputStreamTest.testBelowThreshold"
                },
                {
                    "function name": "testTempFileAboveThresholdPrefixOnly",
                    "function params": [
                        "initialBufferSize"
                    ],
                    "file name": "DeferredFileOutputStreamTest.java",
                    "file old path": "src/test/java/org/apache/commons/io/output/DeferredFileOutputStreamTest.java",
                    "file new path": "src/test/java/org/apache/commons/io/output/DeferredFileOutputStreamTest.java",
                    "full name": "src.test.java.org.apache.commons.io.output.DeferredFileOutputStreamTest.testTempFileAboveThresholdPrefixOnly"
                },
                {
                    "function name": "testWriteToLarge",
                    "function params": [
                        "initialBufferSize"
                    ],
                    "file name": "DeferredFileOutputStreamTest.java",
                    "file old path": "src/test/java/org/apache/commons/io/output/DeferredFileOutputStreamTest.java",
                    "file new path": "src/test/java/org/apache/commons/io/output/DeferredFileOutputStreamTest.java",
                    "full name": "src.test.java.org.apache.commons.io.output.DeferredFileOutputStreamTest.testWriteToLarge"
                },
                {
                    "function name": "testTempFileError",
                    "function params": [],
                    "file name": "DeferredFileOutputStreamTest.java",
                    "file old path": "src/test/java/org/apache/commons/io/output/DeferredFileOutputStreamTest.java",
                    "file new path": "src/test/java/org/apache/commons/io/output/DeferredFileOutputStreamTest.java",
                    "full name": "src.test.java.org.apache.commons.io.output.DeferredFileOutputStreamTest.testTempFileError"
                },
                {
                    "function name": "testAtThreshold",
                    "function params": [
                        "initialBufferSize"
                    ],
                    "file name": "DeferredFileOutputStreamTest.java",
                    "file old path": "src/test/java/org/apache/commons/io/output/DeferredFileOutputStreamTest.java",
                    "file new path": "src/test/java/org/apache/commons/io/output/DeferredFileOutputStreamTest.java",
                    "full name": "src.test.java.org.apache.commons.io.output.DeferredFileOutputStreamTest.testAtThreshold"
                },
                {
                    "function name": "testAboveThreshold",
                    "function params": [
                        "initialBufferSize"
                    ],
                    "file name": "DeferredFileOutputStreamTest.java",
                    "file old path": "src/test/java/org/apache/commons/io/output/DeferredFileOutputStreamTest.java",
                    "file new path": "src/test/java/org/apache/commons/io/output/DeferredFileOutputStreamTest.java",
                    "full name": "src.test.java.org.apache.commons.io.output.DeferredFileOutputStreamTest.testAboveThreshold"
                },
                {
                    "function name": "testTempFileBelowThreshold",
                    "function params": [
                        "initialBufferSize"
                    ],
                    "file name": "DeferredFileOutputStreamTest.java",
                    "file old path": "src/test/java/org/apache/commons/io/output/DeferredFileOutputStreamTest.java",
                    "file new path": "src/test/java/org/apache/commons/io/output/DeferredFileOutputStreamTest.java",
                    "full name": "src.test.java.org.apache.commons.io.output.DeferredFileOutputStreamTest.testTempFileBelowThreshold"
                },
                {
                    "function name": "testTee",
                    "function params": [],
                    "file name": "ProxyCollectionWriterTest.java",
                    "file old path": "src/test/java/org/apache/commons/io/output/ProxyCollectionWriterTest.java",
                    "file new path": "src/test/java/org/apache/commons/io/output/ProxyCollectionWriterTest.java",
                    "full name": "src.test.java.org.apache.commons.io.output.ProxyCollectionWriterTest.testTee"
                },
                {
                    "function name": "testClose",
                    "function params": [],
                    "file name": "StringBuilderWriterTest.java",
                    "file old path": "src/test/java/org/apache/commons/io/output/StringBuilderWriterTest.java",
                    "file new path": "src/test/java/org/apache/commons/io/output/StringBuilderWriterTest.java",
                    "full name": "src.test.java.org.apache.commons.io.output.StringBuilderWriterTest.testClose"
                },
                {
                    "function name": "testBrokenStream",
                    "function params": [],
                    "file name": "TaggedOutputStreamTest.java",
                    "file old path": "src/test/java/org/apache/commons/io/output/TaggedOutputStreamTest.java",
                    "file new path": "src/test/java/org/apache/commons/io/output/TaggedOutputStreamTest.java",
                    "full name": "src.test.java.org.apache.commons.io.output.TaggedOutputStreamTest.testBrokenStream"
                },
                {
                    "function name": "testOtherException",
                    "function params": [],
                    "file name": "TaggedWriterTest.java",
                    "file old path": "src/test/java/org/apache/commons/io/output/TaggedWriterTest.java",
                    "file new path": "src/test/java/org/apache/commons/io/output/TaggedWriterTest.java",
                    "full name": "src.test.java.org.apache.commons.io.output.TaggedWriterTest.testOtherException"
                },
                {
                    "function name": "testBrokenWriter",
                    "function params": [],
                    "file name": "TaggedWriterTest.java",
                    "file old path": "src/test/java/org/apache/commons/io/output/TaggedWriterTest.java",
                    "file new path": "src/test/java/org/apache/commons/io/output/TaggedWriterTest.java",
                    "full name": "src.test.java.org.apache.commons.io.output.TaggedWriterTest.testBrokenWriter"
                },
                {
                    "function name": "testNormalWriter",
                    "function params": [],
                    "file name": "TaggedWriterTest.java",
                    "file old path": "src/test/java/org/apache/commons/io/output/TaggedWriterTest.java",
                    "file new path": "src/test/java/org/apache/commons/io/output/TaggedWriterTest.java",
                    "full name": "src.test.java.org.apache.commons.io.output.TaggedWriterTest.testNormalWriter"
                }
            ],
            "files that changed": [
                "src/test/java/org/apache/commons/io/ByteOrderMarkTest.java",
                "src/test/java/org/apache/commons/io/DemuxTest.java",
                "src/test/java/org/apache/commons/io/DirectoryWalkerTest.java",
                "src/test/java/org/apache/commons/io/DirectoryWalkerTestCaseJava4.java",
                "src/test/java/org/apache/commons/io/EndianUtilsTest.java",
                "src/test/java/org/apache/commons/io/FileUtilsDirectoryContainsTest.java",
                "src/test/java/org/apache/commons/io/FileUtilsListFilesTest.java",
                "src/test/java/org/apache/commons/io/FilenameUtilsTest.java",
                "src/test/java/org/apache/commons/io/HexDumpTest.java",
                "src/test/java/org/apache/commons/io/file/PathUtilsContentEqualsTest.java",
                "src/test/java/org/apache/commons/io/input/BOMInputStreamTest.java",
                "src/test/java/org/apache/commons/io/input/ClassLoaderObjectInputStreamTest.java",
                "src/test/java/org/apache/commons/io/input/CountingInputStreamTest.java",
                "src/test/java/org/apache/commons/io/input/NullInputStreamTest.java",
                "src/test/java/org/apache/commons/io/input/NullReaderTest.java",
                "src/test/java/org/apache/commons/io/monitor/FileAlterationMonitorTest.java",
                "src/test/java/org/apache/commons/io/output/ClosedOutputStreamTest.java",
                "src/test/java/org/apache/commons/io/output/ClosedWriterTest.java",
                "src/test/java/org/apache/commons/io/output/CountingOutputStreamTest.java",
                "src/test/java/org/apache/commons/io/output/DeferredFileOutputStreamTest.java",
                "src/test/java/org/apache/commons/io/output/ProxyCollectionWriterTest.java",
                "src/test/java/org/apache/commons/io/output/StringBuilderWriterTest.java",
                "src/test/java/org/apache/commons/io/output/TaggedOutputStreamTest.java",
                "src/test/java/org/apache/commons/io/output/TaggedWriterTest.java"
            ]
        },
        {
            "bug index": "10",
            "bug id": "IO-4",
            "hexsha": "742c51feeaf75542ab9db6782ad3d2ad506fb871",
            "fix_hash": "6320b11102599812b4d8915b7565750f16c1f619",
            "description": "It is better not to allocate a new buffer when writing the memory buffer to file.\n\nrecommend using writeTo() insteand of toByteArray()\nat DeferredFileOutputStream.java:120\n------------\nprotected void thresholdReached() throws IOException\n{\n    FileOutputStream fos = new FileOutputStream(outputFile);\n    memoryOutputStream.writeTo(fos);\n    diskOutputStream = fos;\n    currentOutputStream = fos;\n    memoryOutputStream = null;\n}\n----------------------",
            "commit number version hash": 443,
            "commit number": 2421,
            "function that changed": [
                {
                    "function name": "testGetBaseName_with_null_character",
                    "function params": [],
                    "file name": "FilenameUtilsTest.java",
                    "file old path": "src/test/java/org/apache/commons/io/FilenameUtilsTest.java",
                    "file new path": "src/test/java/org/apache/commons/io/FilenameUtilsTest.java",
                    "full name": "src.test.java.org.apache.commons.io.FilenameUtilsTest.testGetBaseName_with_null_character"
                }
            ],
            "files that changed": [
                "src/test/java/org/apache/commons/io/FilenameUtilsTest.java"
            ]
        },
        {
            "bug index": "11",
            "bug id": "IO-4",
            "hexsha": "742c51feeaf75542ab9db6782ad3d2ad506fb871",
            "fix_hash": "a3f9c8e97a3463b76a2ccb0adaba246388244553",
            "description": "It is better not to allocate a new buffer when writing the memory buffer to file.\n\nrecommend using writeTo() insteand of toByteArray()\nat DeferredFileOutputStream.java:120\n------------\nprotected void thresholdReached() throws IOException\n{\n    FileOutputStream fos = new FileOutputStream(outputFile);\n    memoryOutputStream.writeTo(fos);\n    diskOutputStream = fos;\n    currentOutputStream = fos;\n    memoryOutputStream = null;\n}\n----------------------",
            "commit number version hash": 443,
            "commit number": 2417,
            "function that changed": [
                {
                    "function name": "testNoBoms",
                    "function params": [],
                    "file name": "BOMInputStreamTest.java",
                    "file old path": "src/test/java/org/apache/commons/io/input/BOMInputStreamTest.java",
                    "file new path": "src/test/java/org/apache/commons/io/input/BOMInputStreamTest.java",
                    "full name": "src.test.java.org.apache.commons.io.input.BOMInputStreamTest.testNoBoms"
                }
            ],
            "files that changed": [
                "src/test/java/org/apache/commons/io/input/BOMInputStreamTest.java"
            ]
        },
        {
            "bug index": "14",
            "bug id": "IO-343",
            "hexsha": "d9406824aeba0e977c0692971a6dbb2e62823886",
            "fix_hash": "6926849b1dcfa31d1e4c521c8554d66cca31d4ae",
            "description": "Package org.apache.commons.io.comparator has a lot of inconsistent JavaDocs. \nFor example this class org.apache.commons.io.comparator.NameFileComparator\nhttp://svn.apache.org/viewvc/commons/proper/io/trunk/src/main/java/org/apache/commons/io/comparator/NameFileComparator.java?view=markup\nhas JavaDocs\n List&lt;File&gt; list = ...\n NameFileComparator.NAME_COMPARATOR.sort(list); ....\n\n File[] array = ...\n NameFileComparator.NAME_INSENSITIVE_REVERSE.sort(array);\n\nbut this will not work because all static members of NameFileComparator declared as Comparator<File> for example \n public static final Comparator<File> NAME_REVERSE = new ReverseComparator(NAME_COMPARATOR);\npublic static final Comparator<File> NAME_INSENSITIVE_REVERSE = new ReverseComparator(NAME_INSENSITIVE_COMPARATOR);\n\nand Comparator class doesn't have the sort() method.\n",
            "commit number version hash": 1288,
            "commit number": 2388,
            "function that changed": [
                {
                    "function name": "testBigString",
                    "function params": [],
                    "file name": "IOUtilsTest.java",
                    "file old path": "src/test/java/org/apache/commons/io/IOUtilsTest.java",
                    "file new path": "src/test/java/org/apache/commons/io/IOUtilsTest.java",
                    "full name": "src.test.java.org.apache.commons.io.IOUtilsTest.testBigString"
                }
            ],
            "files that changed": [
                "src/test/java/org/apache/commons/io/IOUtilsTest.java"
            ]
        },
        {
            "bug index": "16",
            "bug id": "IO-334",
            "hexsha": "364c2bf7f42e7679d910548d931be24332eaf6ad",
            "fix_hash": "6a2c2c23f98a45e73fbc47f5c5a9fd432bc9ae34",
            "description": "The toFiles method treats null input the same as an empty array, however the toURLs method throws NPE for null input.\n\nThis is inconsistent.\n\nThe Javadoc for toURLs does not specify the behaviour for null input.\n\nEither the method should be fixed to treat null as an empty array, or the NPE should be documented.",
            "commit number version hash": 990,
            "commit number": 2380,
            "function that changed": [
                {
                    "function name": "testPrefixCaseInsensitive",
                    "function params": [],
                    "file name": "FileFilterTest.java",
                    "file old path": "src/test/java/org/apache/commons/io/filefilter/FileFilterTest.java",
                    "file new path": "src/test/java/org/apache/commons/io/filefilter/FileFilterTest.java",
                    "full name": "src.test.java.org.apache.commons.io.filefilter.FileFilterTest.testPrefixCaseInsensitive"
                }
            ],
            "files that changed": [
                "src/test/java/org/apache/commons/io/filefilter/FileFilterTest.java"
            ]
        },
        {
            "bug index": "17",
            "bug id": "IO-323",
            "hexsha": "d9406824aeba0e977c0692971a6dbb2e62823886",
            "fix_hash": "eb8b4fd88b246a363824880768e7ba5b194dfa76",
            "description": "FileUtils.sizeOf[Directory] adds longs. What should happen when an overflow happens?",
            "commit number version hash": 1288,
            "commit number": 2360,
            "function that changed": [
                {
                    "function name": "dump",
                    "function params": [
                        "_lbuffer",
                        "value"
                    ],
                    "file name": "HexDump.java",
                    "file old path": "src/main/java/org/apache/commons/io/HexDump.java",
                    "file new path": "src/main/java/org/apache/commons/io/HexDump.java",
                    "full name": "src.main.java.org.apache.commons.io.HexDump.dump"
                },
                {
                    "function name": "dump",
                    "function params": [
                        "_cbuffer",
                        "value"
                    ],
                    "file name": "HexDump.java",
                    "file old path": "src/main/java/org/apache/commons/io/HexDump.java",
                    "file new path": "src/main/java/org/apache/commons/io/HexDump.java",
                    "full name": "src.main.java.org.apache.commons.io.HexDump.dump"
                },
                {
                    "function name": "makeCVSAware",
                    "function params": [
                        "filter"
                    ],
                    "file name": "FileFilterUtils.java",
                    "file old path": "src/main/java/org/apache/commons/io/filefilter/FileFilterUtils.java",
                    "file new path": "src/main/java/org/apache/commons/io/filefilter/FileFilterUtils.java",
                    "full name": "src.main.java.org.apache.commons.io.filefilter.FileFilterUtils.makeCVSAware"
                },
                {
                    "function name": "makeSVNAware",
                    "function params": [
                        "filter"
                    ],
                    "file name": "FileFilterUtils.java",
                    "file old path": "src/main/java/org/apache/commons/io/filefilter/FileFilterUtils.java",
                    "file new path": "src/main/java/org/apache/commons/io/filefilter/FileFilterUtils.java",
                    "full name": "src.main.java.org.apache.commons.io.filefilter.FileFilterUtils.makeSVNAware"
                }
            ],
            "files that changed": [
                "src/main/java/org/apache/commons/io/HexDump.java",
                "src/main/java/org/apache/commons/io/filefilter/FileFilterUtils.java"
            ]
        },
        {
            "bug index": "18",
            "bug id": "IO-321",
            "hexsha": "364c2bf7f42e7679d910548d931be24332eaf6ad",
            "fix_hash": "bcd5c9ba0cd1607b286ef0c116f119983e3f8a15",
            "description": "ByteOrderMark UTF_32LE is incorrect.\n\nIs should be {{FF FE 00 00}} not {{FE FF 00 00}}",
            "commit number version hash": 990,
            "commit number": 2359,
            "function that changed": [
                {
                    "function name": "cleanDirectory",
                    "function params": [
                        "directory"
                    ],
                    "file name": "FileUtils.java",
                    "file old path": "src/main/java/org/apache/commons/io/FileUtils.java",
                    "file new path": "src/main/java/org/apache/commons/io/FileUtils.java",
                    "full name": "src.main.java.org.apache.commons.io.FileUtils.cleanDirectory"
                },
                {
                    "function name": "cleanDirectoryOnExit",
                    "function params": [
                        "directory"
                    ],
                    "file name": "FileUtils.java",
                    "file old path": "src/main/java/org/apache/commons/io/FileUtils.java",
                    "file new path": "src/main/java/org/apache/commons/io/FileUtils.java",
                    "full name": "src.main.java.org.apache.commons.io.FileUtils.cleanDirectoryOnExit"
                }
            ],
            "files that changed": [
                "src/main/java/org/apache/commons/io/FileUtils.java",
                "src/main/java/org/apache/commons/io/output/FilterCollectionWriter.java"
            ]
        },
        {
            "bug index": "19",
            "bug id": "IO-484",
            "hexsha": "d9406824aeba0e977c0692971a6dbb2e62823886",
            "fix_hash": "b6a22186d8246d973c6dc9b7fd2aaa84f34cccbf",
            "description": "embedding nulls in filenames exposes injection vectors if the application passes unsanitized data to some functions in FileNameUtils",
            "commit number version hash": 1288,
            "commit number": 2358,
            "function that changed": [
                {
                    "function name": "requireNonNullChars",
                    "function params": [
                        "path"
                    ],
                    "file name": "FilenameUtils.java",
                    "file old path": "src/main/java/org/apache/commons/io/FilenameUtils.java",
                    "file new path": "src/main/java/org/apache/commons/io/FilenameUtils.java",
                    "full name": "src.main.java.org.apache.commons.io.FilenameUtils.requireNonNullChars"
                },
                {
                    "function name": "testGetBaseName_with_null_character",
                    "function params": [],
                    "file name": "FilenameUtilsTest.java",
                    "file old path": "src/test/java/org/apache/commons/io/FilenameUtilsTest.java",
                    "file new path": "src/test/java/org/apache/commons/io/FilenameUtilsTest.java",
                    "full name": "src.test.java.org.apache.commons.io.FilenameUtilsTest.testGetBaseName_with_null_character"
                },
                {
                    "function name": "testGetPrefix_with_null_character",
                    "function params": [],
                    "file name": "FilenameUtilsTest.java",
                    "file old path": "src/test/java/org/apache/commons/io/FilenameUtilsTest.java",
                    "file new path": "src/test/java/org/apache/commons/io/FilenameUtilsTest.java",
                    "full name": "src.test.java.org.apache.commons.io.FilenameUtilsTest.testGetPrefix_with_null_character"
                },
                {
                    "function name": "testGetPathNoEndSeparator_with_null_character",
                    "function params": [],
                    "file name": "FilenameUtilsTest.java",
                    "file old path": "src/test/java/org/apache/commons/io/FilenameUtilsTest.java",
                    "file new path": "src/test/java/org/apache/commons/io/FilenameUtilsTest.java",
                    "full name": "src.test.java.org.apache.commons.io.FilenameUtilsTest.testGetPathNoEndSeparator_with_null_character"
                },
                {
                    "function name": "testNormalize_with_null_character",
                    "function params": [],
                    "file name": "FilenameUtilsTest.java",
                    "file old path": "src/test/java/org/apache/commons/io/FilenameUtilsTest.java",
                    "file new path": "src/test/java/org/apache/commons/io/FilenameUtilsTest.java",
                    "full name": "src.test.java.org.apache.commons.io.FilenameUtilsTest.testNormalize_with_null_character"
                },
                {
                    "function name": "testGetPath_with_null_character",
                    "function params": [],
                    "file name": "FilenameUtilsTest.java",
                    "file old path": "src/test/java/org/apache/commons/io/FilenameUtilsTest.java",
                    "file new path": "src/test/java/org/apache/commons/io/FilenameUtilsTest.java",
                    "full name": "src.test.java.org.apache.commons.io.FilenameUtilsTest.testGetPath_with_null_character"
                }
            ],
            "files that changed": [
                "src/main/java/org/apache/commons/io/FilenameUtils.java",
                "src/test/java/org/apache/commons/io/FilenameUtilsTest.java"
            ]
        },
        {
            "bug index": "20",
            "bug id": "IO-319",
            "hexsha": "364c2bf7f42e7679d910548d931be24332eaf6ad",
            "fix_hash": "4810d9c57276b584942cf93ae297f10a12ab128c",
            "description": "First of all Thanks tons Apache Commons folks for all the amazing work! :) My first JIRA. Yayyy. I contributed B-)\n\nA symbolic link may create a cycle and so sizeOfDirectory crashes with an IllegalArgumentException. e.g. \n{noformat}\n$ tree test\ntest\n\u251c\u2500\u2500 file\n\u2514\u2500\u2500 ravi\n    \u251c\u2500\u2500 cycle -> ../../test\n    \u2514\u2500\u2500 file\n{noformat}\n\ncauses FileUtils.sizeOfDirectory to crash like so\n\n{noformat}\njava TestJAVA\nException in thread \"main\" java.lang.IllegalArgumentException: <somepath>/test/ravi/cycle/ravi/cycle/ravi/cycle/ravi/cycle/ravi/cycle/ravi/cycle/ravi/cycle/ravi/cycle/ravi/cycle/ravi/cycle/ravi/cycle/ravi/cycle/ravi/cycle/ravi/cycle/ravi/cycle/ravi/cycle/ravi/cycle/ravi/cycle/ravi/cycle/ravi/cycle/ravi/cycle/ravi/cycle/ravi/cycle/ravi/cycle/ravi/cycle/ravi/cycle/ravi/cycle/ravi/cycle/ravi/cycle/ravi/cycle/ravi/cycle/ravi/cycle/ravi/cycle/ravi/cycle/ravi/cycle/ravi/cycle/ravi/cycle/ravi/cycle/ravi/cycle/ravi/cycle/ravi/cycle does not exist\n        at org.apache.commons.io.FileUtils.sizeOf(FileUtils.java:2053)\n        at org.apache.commons.io.FileUtils.sizeOfDirectory(FileUtils.java:2089)\n        at org.apache.commons.io.FileUtils.sizeOf(FileUtils.java:2057)\n        at org.apache.commons.io.FileUtils.sizeOfDirectory(FileUtils.java:2089)\n        at org.apache.commons.io.FileUtils.sizeOf(FileUtils.java:2057)\n        at org.apache.commons.io.FileUtils.sizeOfDirectory(FileUtils.java:2089)\n        at org.apache.commons.io.FileUtils.sizeOf(FileUtils.java:2057)\n        at org.apache.commons.io.FileUtils.sizeOfDirectory(FileUtils.java:2089)\n{noformat}\n\nWe faced the same issue in Hadoop :(. Checkout https://issues.apache.org/jira/browse/HADOOP-6963 for our solution",
            "commit number version hash": 990,
            "commit number": 2357,
            "function that changed": [
                {
                    "function name": "copyURLToFile",
                    "function params": [
                        "source",
                        "destination"
                    ],
                    "file name": "FileUtils.java",
                    "file old path": "src/main/java/org/apache/commons/io/FileUtils.java",
                    "file new path": "src/main/java/org/apache/commons/io/FileUtils.java",
                    "full name": "src.main.java.org.apache.commons.io.FileUtils.copyURLToFile"
                },
                {
                    "function name": "testContentEquals",
                    "function params": [],
                    "file name": "FileUtilsTest.java",
                    "file old path": "src/test/java/org/apache/commons/io/FileUtilsTest.java",
                    "file new path": "src/test/java/org/apache/commons/io/FileUtilsTest.java",
                    "full name": "src.test.java.org.apache.commons.io.FileUtilsTest.testContentEquals"
                },
                {
                    "function name": "testCopyURLToFileCreatesParentDirs",
                    "function params": [],
                    "file name": "FileUtilsTest.java",
                    "file old path": "src/test/java/org/apache/commons/io/FileUtilsTest.java",
                    "file new path": "src/test/java/org/apache/commons/io/FileUtilsTest.java",
                    "full name": "src.test.java.org.apache.commons.io.FileUtilsTest.testCopyURLToFileCreatesParentDirs"
                },
                {
                    "function name": "assertContentMatchesAfterCopyURLToFileFor",
                    "function params": [
                        "resourceName",
                        "destination"
                    ],
                    "file name": "FileUtilsTest.java",
                    "file old path": "src/test/java/org/apache/commons/io/FileUtilsTest.java",
                    "file new path": "src/test/java/org/apache/commons/io/FileUtilsTest.java",
                    "full name": "src.test.java.org.apache.commons.io.FileUtilsTest.assertContentMatchesAfterCopyURLToFileFor"
                },
                {
                    "function name": "testCopyURLToFile",
                    "function params": [],
                    "file name": "FileUtilsTest.java",
                    "file old path": "src/test/java/org/apache/commons/io/FileUtilsTest.java",
                    "file new path": "src/test/java/org/apache/commons/io/FileUtilsTest.java",
                    "full name": "src.test.java.org.apache.commons.io.FileUtilsTest.testCopyURLToFile"
                },
                {
                    "function name": "testCopyURLToFileReplacesExisting",
                    "function params": [],
                    "file name": "FileUtilsTest.java",
                    "file old path": "src/test/java/org/apache/commons/io/FileUtilsTest.java",
                    "file new path": "src/test/java/org/apache/commons/io/FileUtilsTest.java",
                    "full name": "src.test.java.org.apache.commons.io.FileUtilsTest.testCopyURLToFileReplacesExisting"
                },
                {
                    "function name": "testSizeOf",
                    "function params": [],
                    "file name": "FileUtilsTest.java",
                    "file old path": "src/test/java/org/apache/commons/io/FileUtilsTest.java",
                    "file new path": "src/test/java/org/apache/commons/io/FileUtilsTest.java",
                    "full name": "src.test.java.org.apache.commons.io.FileUtilsTest.testSizeOf"
                },
                {
                    "function name": "testSizeOfAsBigInteger",
                    "function params": [],
                    "file name": "FileUtilsTest.java",
                    "file old path": "src/test/java/org/apache/commons/io/FileUtilsTest.java",
                    "file new path": "src/test/java/org/apache/commons/io/FileUtilsTest.java",
                    "full name": "src.test.java.org.apache.commons.io.FileUtilsTest.testSizeOfAsBigInteger"
                },
                {
                    "function name": "testForceMkdir",
                    "function params": [],
                    "file name": "FileUtilsTest.java",
                    "file old path": "src/test/java/org/apache/commons/io/FileUtilsTest.java",
                    "file new path": "src/test/java/org/apache/commons/io/FileUtilsTest.java",
                    "full name": "src.test.java.org.apache.commons.io.FileUtilsTest.testForceMkdir"
                },
                {
                    "function name": "testSizeOfDirectoryAsBigInteger",
                    "function params": [],
                    "file name": "FileUtilsTest.java",
                    "file old path": "src/test/java/org/apache/commons/io/FileUtilsTest.java",
                    "file new path": "src/test/java/org/apache/commons/io/FileUtilsTest.java",
                    "full name": "src.test.java.org.apache.commons.io.FileUtilsTest.testSizeOfDirectoryAsBigInteger"
                },
                {
                    "function name": "testContentEqualsIgnoreEOL",
                    "function params": [],
                    "file name": "FileUtilsTest.java",
                    "file old path": "src/test/java/org/apache/commons/io/FileUtilsTest.java",
                    "file new path": "src/test/java/org/apache/commons/io/FileUtilsTest.java",
                    "full name": "src.test.java.org.apache.commons.io.FileUtilsTest.testContentEqualsIgnoreEOL"
                },
                {
                    "function name": "testCopyURLToFileWithTimeout",
                    "function params": [],
                    "file name": "FileUtilsTest.java",
                    "file old path": "src/test/java/org/apache/commons/io/FileUtilsTest.java",
                    "file new path": "src/test/java/org/apache/commons/io/FileUtilsTest.java",
                    "full name": "src.test.java.org.apache.commons.io.FileUtilsTest.testCopyURLToFileWithTimeout"
                },
                {
                    "function name": "testFileContentEquals",
                    "function params": [],
                    "file name": "PathUtilsContentEqualsTest.java",
                    "file old path": "src/test/java/org/apache/commons/io/file/PathUtilsContentEqualsTest.java",
                    "file new path": "src/test/java/org/apache/commons/io/file/PathUtilsContentEqualsTest.java",
                    "full name": "src.test.java.org.apache.commons.io.file.PathUtilsContentEqualsTest.testFileContentEquals"
                }
            ],
            "files that changed": [
                "src/main/java/org/apache/commons/io/FileUtils.java",
                "src/test/java/org/apache/commons/io/FileUtilsTest.java",
                "src/test/java/org/apache/commons/io/file/PathUtilsContentEqualsTest.java"
            ]
        },
        {
            "bug index": "21",
            "bug id": "IO-448",
            "hexsha": "d9406824aeba0e977c0692971a6dbb2e62823886",
            "fix_hash": "31af606444524c8e16ed625490119bafa5f50962",
            "description": "The method waits for a file to appear for a given amount of time. To do so it calls Thread.sleep several times. If the thread is interrupted, the interrupt will be ignored by catching the ThreadInterrupted exception and waiting further.\n\nCatching the ThreadInterrupted exception automatically clears the thread's interrupted flag. Consequently the calling method has no chance to detect whether the thread was interrupted. A possible solution is to restore the interrupted status before returning - something like this:\n{code}\n    public static boolean waitFor(File file, int seconds) {\n        int timeout = 0;\n        int tick = 0;\n        boolean wasInterrupted = false;\n        try {\n            while (!file.exists()) {\n                // ...\n                try {\n                    Thread.sleep(100);\n                } catch (InterruptedException ignore) {\n                    wasInterrupted = true;\n                } catch (Exception ex) {\n                    break;\n                }\n            }\n            return true;\n        } finally {\n            if (wasInterrupted) {\n                   Thread.currentThread.interrupt();\n            }\n        }\n    }\n{code}\n",
            "commit number version hash": 1288,
            "commit number": 2355,
            "function that changed": [
                {
                    "function name": "waitForAsyncReadComplete",
                    "function params": [],
                    "file name": "ReadAheadInputStream.java",
                    "file old path": "src/main/java/org/apache/commons/io/input/ReadAheadInputStream.java",
                    "file new path": "src/main/java/org/apache/commons/io/input/ReadAheadInputStream.java",
                    "full name": "src.main.java.org.apache.commons.io.input.ReadAheadInputStream.waitForAsyncReadComplete"
                }
            ],
            "files that changed": [
                "src/main/java/org/apache/commons/io/input/ReadAheadInputStream.java"
            ]
        },
        {
            "bug index": "32",
            "bug id": "IO-10",
            "hexsha": "742c51feeaf75542ab9db6782ad3d2ad506fb871",
            "fix_hash": "46779065d258bc6429d330843267f1ca3d0ce99d",
            "description": "Two of the empty-bodied write methods in NullOutputStream are synchronized.  The\nsynchronized keyword needs removing.",
            "commit number version hash": 443,
            "commit number": 2286,
            "function that changed": [
                {
                    "function name": "testSetReadOnlyFile",
                    "function params": [],
                    "file name": "PathUtilsTest.java",
                    "file old path": "src/test/java/org/apache/commons/io/file/PathUtilsTest.java",
                    "file new path": "src/test/java/org/apache/commons/io/file/PathUtilsTest.java",
                    "full name": "src.test.java.org.apache.commons.io.file.PathUtilsTest.testSetReadOnlyFile"
                }
            ],
            "files that changed": [
                "src/test/java/org/apache/commons/io/file/PathUtilsTest.java"
            ]
        },
        {
            "bug index": "37",
            "bug id": "IO-276",
            "hexsha": "364c2bf7f42e7679d910548d931be24332eaf6ad",
            "fix_hash": "7e3d46d21d6dea98ed34e97e6f40a085a75d0451",
            "description": "I called this method, but the target directory was not deleted.\n\n\nThe source of this method is as follows.\n----------\n    private static void deleteDirectoryOnExit(File directory) throws IOException {\n        if (!directory.exists()) {\n            return;\n        }\n\n        cleanDirectoryOnExit(directory);\n        directory.deleteOnExit();\n    }\n----------\nIn other words, this method calls \"java.io.File#deleteOnExit\" in order of \"grandchildren -> children -> parent\" for files of the target directory hierarchy.\n\n\nThere is following mention in javadoc of \"java.io.File#deleteOnExit\".\n----------\nFiles (or directories) are deleted in the reverse order that they are registered.\n----------\n\n\nTherefore, I think the calling order of \"java.io.File#deleteOnExit\" should be reverse.\n\n\nHow will be it?",
            "commit number version hash": 990,
            "commit number": 2261,
            "function that changed": [],
            "files that changed": [
                "src/main/java/org/apache/commons/io/FileUtils.java"
            ]
        },
        {
            "bug index": "38",
            "bug id": "IO-3",
            "hexsha": "742c51feeaf75542ab9db6782ad3d2ad506fb871",
            "fix_hash": "c5dbd227697de296b2d9963a15328cf111dbe1d7",
            "description": "File copying using FileUtils.copyFile() does not preserve the last modified \ndate in the copy. I'm not sure about other OS's, but preservation of the last \nmodified date occurs when copying from Windows Explorer or the command window \nin a Windows environment. To add this feature to the class, just add the \nfollowing line at the end of FileUtils.copyFile():\n      destination.setLastModified(source.lastModified());\nTo unit test this change, add the following to the end of \nFileUtilsTestCase.testCopyFile1() and/or testCopyFile2():\n        assertTrue(\"Check last modified date preserved\", testFile1.lastModified\n() == destination.lastModified());",
            "commit number version hash": 443,
            "commit number": 2245,
            "function that changed": [
                {
                    "function name": "FileAlterationMonitorTest",
                    "function params": [],
                    "file name": "FileAlterationMonitorTest.java",
                    "file old path": "src/test/java/org/apache/commons/io/monitor/FileAlterationMonitorTest.java",
                    "file new path": "src/test/java/org/apache/commons/io/monitor/FileAlterationMonitorTest.java",
                    "full name": "src.test.java.org.apache.commons.io.monitor.FileAlterationMonitorTest.FileAlterationMonitorTest"
                },
                {
                    "function name": "FileAlterationObserverTest",
                    "function params": [],
                    "file name": "FileAlterationObserverTest.java",
                    "file old path": "src/test/java/org/apache/commons/io/monitor/FileAlterationObserverTest.java",
                    "file new path": "src/test/java/org/apache/commons/io/monitor/FileAlterationObserverTest.java",
                    "full name": "src.test.java.org.apache.commons.io.monitor.FileAlterationObserverTest.FileAlterationObserverTest"
                }
            ],
            "files that changed": [
                "src/test/java/org/apache/commons/io/ByteOrderMarkTest.java",
                "src/test/java/org/apache/commons/io/CharsetsTest.java",
                "src/test/java/org/apache/commons/io/DemuxTest.java",
                "src/test/java/org/apache/commons/io/DirectoryWalkerTest.java",
                "src/test/java/org/apache/commons/io/FileCleanerTest.java",
                "src/test/java/org/apache/commons/io/FileCleaningTrackerTest.java",
                "src/test/java/org/apache/commons/io/FileDeleteStrategyTest.java",
                "src/test/java/org/apache/commons/io/FileSystemTest.java",
                "src/test/java/org/apache/commons/io/FileSystemUtilsTest.java",
                "src/test/java/org/apache/commons/io/FileUtilsCleanDirectoryTest.java",
                "src/test/java/org/apache/commons/io/FileUtilsCleanSymlinksTest.java",
                "src/test/java/org/apache/commons/io/FileUtilsCopyDirectoryToDirectoryTest.java",
                "src/test/java/org/apache/commons/io/FileUtilsCopyToFileTest.java",
                "src/test/java/org/apache/commons/io/FileUtilsDeleteDirectoryBaseTest.java",
                "src/test/java/org/apache/commons/io/FileUtilsDeleteDirectoryLinuxTest.java",
                "src/test/java/org/apache/commons/io/FileUtilsDeleteDirectoryWindowsTest.java",
                "src/test/java/org/apache/commons/io/FileUtilsDirectoryContainsTest.java",
                "src/test/java/org/apache/commons/io/FileUtilsFileNewerTest.java",
                "src/test/java/org/apache/commons/io/FileUtilsListFilesTest.java",
                "src/test/java/org/apache/commons/io/FileUtilsTest.java",
                "src/test/java/org/apache/commons/io/FileUtilsWaitForTest.java",
                "src/test/java/org/apache/commons/io/FilenameUtilsTest.java",
                "src/test/java/org/apache/commons/io/FilenameUtilsWildcardTest.java",
                "src/test/java/org/apache/commons/io/IOCaseTest.java",
                "src/test/java/org/apache/commons/io/IOExceptionListTest.java",
                "src/test/java/org/apache/commons/io/IOExceptionWithCauseTest.java",
                "src/test/java/org/apache/commons/io/IOIndexedExceptionTest.java",
                "src/test/java/org/apache/commons/io/IOUtilsCopyTest.java",
                "src/test/java/org/apache/commons/io/IOUtilsTest.java",
                "src/test/java/org/apache/commons/io/IOUtilsWriteTest.java",
                "src/test/java/org/apache/commons/io/LineIteratorTest.java",
                "src/test/java/org/apache/commons/io/ThreadMonitorTest.java",
                "src/test/java/org/apache/commons/io/comparator/ComparatorAbstractTest.java",
                "src/test/java/org/apache/commons/io/comparator/CompositeFileComparatorTest.java",
                "src/test/java/org/apache/commons/io/comparator/DefaultFileComparatorTest.java",
                "src/test/java/org/apache/commons/io/comparator/DirectoryFileComparatorTest.java",
                "src/test/java/org/apache/commons/io/comparator/ExtensionFileComparatorTest.java",
                "src/test/java/org/apache/commons/io/comparator/LastModifiedFileComparatorTest.java",
                "src/test/java/org/apache/commons/io/comparator/NameFileComparatorTest.java",
                "src/test/java/org/apache/commons/io/comparator/PathFileComparatorTest.java",
                "src/test/java/org/apache/commons/io/comparator/SizeFileComparatorTest.java",
                "src/test/java/org/apache/commons/io/filefilter/AndFileFilterTest.java",
                "src/test/java/org/apache/commons/io/filefilter/ConditionalFileFilterAbstractTest.java",
                "src/test/java/org/apache/commons/io/filefilter/FileFilterTest.java",
                "src/test/java/org/apache/commons/io/filefilter/IOFileFilterAbstractTest.java",
                "src/test/java/org/apache/commons/io/filefilter/OrFileFilterTest.java",
                "src/test/java/org/apache/commons/io/filefilter/RegexFileFilterTest.java",
                "src/test/java/org/apache/commons/io/monitor/AbstractMonitorTest.java",
                "src/test/java/org/apache/commons/io/monitor/FileAlterationMonitorTest.java",
                "src/test/java/org/apache/commons/io/monitor/FileAlterationObserverTest.java",
                "src/test/java/org/apache/commons/io/output/ByteArrayOutputStreamTest.java"
            ]
        },
        {
            "bug index": "39",
            "bug id": "IO-3",
            "hexsha": "742c51feeaf75542ab9db6782ad3d2ad506fb871",
            "fix_hash": "2ff9462f0c74d6ea2c4574e5c43f659213989d27",
            "description": "File copying using FileUtils.copyFile() does not preserve the last modified \ndate in the copy. I'm not sure about other OS's, but preservation of the last \nmodified date occurs when copying from Windows Explorer or the command window \nin a Windows environment. To add this feature to the class, just add the \nfollowing line at the end of FileUtils.copyFile():\n      destination.setLastModified(source.lastModified());\nTo unit test this change, add the following to the end of \nFileUtilsTestCase.testCopyFile1() and/or testCopyFile2():\n        assertTrue(\"Check last modified date preserved\", testFile1.lastModified\n() == destination.lastModified());",
            "commit number version hash": 443,
            "commit number": 2244,
            "function that changed": [],
            "files that changed": []
        },
        {
            "bug index": "40",
            "bug id": "IO-273",
            "hexsha": "364c2bf7f42e7679d910548d931be24332eaf6ad",
            "fix_hash": "220a42bf62089c1cd2c9ed3d8d3652529d432f61",
            "description": "BoundedInputStream.read() treats max differently from BoundedInputStream.read(byte[]...)\n\nread() checks for pos == max, whereas read(byte[]...) checks for pos >= max.\n\nThe latter check is safer (works even if pos overshoots max).",
            "commit number version hash": 990,
            "commit number": 2232,
            "function that changed": [],
            "files that changed": [
                "src/main/java/org/apache/commons/io/ThreadMonitor.java"
            ]
        },
        {
            "bug index": "41",
            "bug id": "IO-32",
            "hexsha": "742c51feeaf75542ab9db6782ad3d2ad506fb871",
            "fix_hash": "218b5e7b7d76654004f4122c674308f78c87954e",
            "description": "Hi,\n\n \n\nTwo of the tasks listed in the IO to-do list are adding the ability to\niterate over the lines in a file and the files in a directory.  This\npatch implements those things as methods on FileUtils and provides test\ncases for the new methods.\n\n \n\n  Jim Harrington\n\n*** patch follows ***\nIndex: src/java/org/apache/commons/io/FileUtils.java\n\n===================================================================\n\n--- src/java/org/apache/commons/io/FileUtils.java\t(revision 359064)\n\n+++ src/java/org/apache/commons/io/FileUtils.java\t(working copy)\n\n@@ -28,6 +28,7 @@\n\n import java.util.Collection;\n import java.util.Date;\n import java.util.List;\n+import java.util.Iterator;\n \n import org.apache.commons.io.filefilter.DirectoryFileFilter;\n import org.apache.commons.io.filefilter.FalseFileFilter;\n@@ -226,7 +227,29 @@\n\n         return files;\n     }\n \n+    /**\n+     * <p>Allows iteration over the files in given directory (and optionally\n+     * its subdirectories). All files found are filtered by an IOFileFilter.\n+     *\n+     * See:\n+     * @see #listFiles(File, IOFileFilter, IOFileFilter)\n+     * for more information.\n+     * </p>\n+     * @param directory the directory to search in\n+     * @param fileFilter filter to apply when finding files.\n+     * @param dirFilter optional filter to apply when finding subdirectories.\n+     * If this parameter is null, subdirectories will not be included in the\n+     * search. Use TrueFileFilter.INSTANCE to match all directories.\n+     * @return an iterator of java.io.File for the matching files\n+     * @see org.apache.commons.io.filefilter.FileFilterUtils\n+     * @see org.apache.commons.io.filefilter.NameFileFilter\n+     */\n+    public static Iterator iterateFiles(File directory, IOFileFilter \nfileFilter,\n+                                        IOFileFilter dirFilter) {\n+        return (listFiles( directory, fileFilter, dirFilter)).iterator();\n+    }\n \n+\n     /**\n      * Converts an array of file extensions to suffixes for use\n      * with IOFileFilters.\n@@ -264,7 +287,21 @@\n\n             (recursive ? TrueFileFilter.INSTANCE : FalseFileFilter.INSTANCE));\n     }\n \n+    /**\n+     * Allows iteration over the files in a given directory (and optionally\n+     * its subdirectories) which match an array of extensions.\n+     * @param directory the directory to search in\n+     * @param extensions an array of extensions, ex. {\"java\",\"xml\"}. If this\n+     * parameter is null, all files are returned.\n+     * @param recursive If true all subdirectories are searched, too.\n+     * @return an iterator of java.io.File with the matching files\n+     */\n+    public static Iterator iterateFiles(\n+                                        File directory, String[] extensions, \nboolean recursive) {\n+        return (listFiles(directory, extensions, recursive)).iterator();\n+    }\n \n+\n     /**\n      * <p>Compare the contents of two files to determine if they are equal or\n      * not.</p>\n@@ -841,6 +878,29 @@\n\n     //-----------------------------------------------------------------------\n     /**\n      * <p>\n+     * Reads the contents of a file line by line and returns an iterator over\n+     * those lines.\n+     *\n+     * <p>\n+     * There is no iterateLines method without encoding parameter because\n+     * the default encoding can differ between platforms and therefore results\n+     * in inconsistent results.\n+     * </p>\n+     *\n+     * @param file  the file to read\n+     * @param encoding  the encoding to use, null means platform default\n+     * @return an iterator over the lines in the file\n+     * @throws IOException in case of an I/O error\n+     * @throws UnsupportedEncodingException if the encoding is not supported \nby the VM\n+     * @since Commons IO 1.2\n+     */\n+    public static final Iterator iterateLines(File file, String encoding) \nthrows IOException {\n+        return (readLines(file, encoding)).iterator();\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    /**\n+     * <p>\n      * Writes a String to a file creating the file if it does not exist.\n      * </p>\n      * <p>\nIndex: src/test/org/apache/commons/io/FileUtilsTestCase.java\n\n===================================================================\n\n--- src/test/org/apache/commons/io/FileUtilsTestCase.java\t(revision \n359064)\n\n+++ src/test/org/apache/commons/io/FileUtilsTestCase.java\t(working copy)\n\n@@ -24,12 +24,17 @@\n\n import java.util.Arrays;\n import java.util.GregorianCalendar;\n import java.util.List;\n+import java.util.Collection;\n+import java.util.Iterator;\n+import java.util.Map;\n+import java.util.HashMap;\n \n import junit.framework.Test;\n import junit.framework.TestSuite;\n import junit.textui.TestRunner;\n \n import org.apache.commons.io.testtools.FileBasedTestCase;\n+import org.apache.commons.io.filefilter.WildcardFilter;\n \n /**\n  * This is used to test FileUtils for correctness.\n@@ -659,6 +664,81 @@\n\n         assertEquals(\"FileUtils.touch() changed lastModified to less than \nnow+3s\", true, file.lastModified() <= (now + 3000));\n     }\n \n+    public void testListFiles() throws Exception {\n+        File srcDir = getTestDirectory();\n+        File subDir = new File(srcDir, \"list_test\" );\n+        subDir.mkdir();\n+\n+        String[] fileNames = \n{ \"a.txt\", \"b.txt\", \"c.txt\", \"d.txt\", \"e.txt\", \"f.txt\" };\n+        int[] fileSizes = { 123, 234, 345, 456, 678, 789 };\n+\n+        for(int i = 0; i < fileNames.length; ++i) {\n+            File theFile = new File(subDir, fileNames[i]);\n+            createFile(theFile, fileSizes[i]);\n+        }\n+\n+        Collection files = FileUtils.listFiles(subDir,\n+                                               new WildcardFilter(\"*.*\"),\n+                                               new WildcardFilter(\"*\"));\n+\n+        int count = files.size();\n+        Object[] fileObjs = files.toArray();\n+\n+        assertEquals(files.size(), fileNames.length);\n+\n+        Map foundFileNames = new HashMap();\n+\n+        for(int i = 0; i < count; ++i) {\n+            boolean found = false;\n+            for(int j = 0; (( !found ) && (j < fileNames.length)); ++j) {\n+                if ( fileNames[j].equals(((File) fileObjs[i]).getName())) {\n+                    foundFileNames.put(fileNames[j], fileNames[j]);\n+                    found = true;\n+                }\n+            }\n+        }\n+\n+        assertEquals(foundFileNames.size(), fileNames.length);\n+\n+        subDir.delete();\n+    }\n+\n+    public void testIterateFiles() throws Exception {\n+        File srcDir = getTestDirectory();\n+        File subDir = new File(srcDir, \"list_test\" );\n+        subDir.mkdir();\n+\n+        String[] fileNames = \n{ \"a.txt\", \"b.txt\", \"c.txt\", \"d.txt\", \"e.txt\", \"f.txt\" };\n+        int[] fileSizes = { 123, 234, 345, 456, 678, 789 };\n+\n+        for(int i = 0; i < fileNames.length; ++i) {\n+            File theFile = new File(subDir, fileNames[i]);\n+            createFile(theFile, fileSizes[i]);\n+        }\n+\n+        Iterator files = FileUtils.iterateFiles(subDir,\n+                                                new WildcardFilter(\"*.*\"),\n+                                                new WildcardFilter(\"*\"));\n+\n+        Map foundFileNames = new HashMap();\n+\n+        while(files.hasNext()) {\n+            boolean found = false;\n+            String fileName = ((File) files.next()).getName();\n+\n+            for(int j = 0; (( !found ) && (j < fileNames.length)); ++j) {\n+                if ( fileNames[j].equals(fileName)) {\n+                    foundFileNames.put(fileNames[j], fileNames[j]);\n+                    found = true;\n+                }\n+            }\n+        }\n+\n+        assertEquals(foundFileNames.size(), fileNames.length);\n+\n+        subDir.delete();\n+    }\n+\n     public void testReadFileToString() throws Exception {\n         File file = new File(getTestDirectory(), \"read.obj\");\n         FileOutputStream out = new FileOutputStream(file);\n@@ -698,6 +778,25 @@\n\n         }\n     }\n \n+    public void testIterateLines() throws Exception {\n+        File file = newFile(\"lines.txt\");\n+        try {\n+            String[] data = new String[] {\"hello\", \"/u1234\", \"\", \"this \nis\", \"some text\"};\n+            createLineBasedFile(file, data);\n+\n+            Iterator lines = FileUtils.iterateLines(file, \"UTF-8\");\n+            int counter = 0;\n+\n+            while( lines.hasNext() ) {\n+                String line = (String) lines.next();\n+                assertEquals(data[counter], line);\n+                ++counter;\n+            }\n+        } finally {\n+            deleteFile(file);\n+        }\n+    }\n+\n     public void testWriteStringToFile1() throws Exception {\n         File file = new File(getTestDirectory(), \"write.txt\");\n         FileUtils.writeStringToFile(file, \"Hello /u1234\", \"UTF8\");",
            "commit number version hash": 443,
            "commit number": 2221,
            "function that changed": [
                {
                    "function name": "Tailer",
                    "function params": [
                        "file",
                        "listener"
                    ],
                    "file name": "Tailer.java",
                    "file old path": "src/main/java/org/apache/commons/io/input/Tailer.java",
                    "file new path": "src/main/java/org/apache/commons/io/input/Tailer.java",
                    "full name": "src.main.java.org.apache.commons.io.input.Tailer.Tailer"
                },
                {
                    "function name": "create",
                    "function params": [
                        "file",
                        "listener",
                        "delayMillis",
                        "end",
                        "reOpen"
                    ],
                    "file name": "Tailer.java",
                    "file old path": "src/main/java/org/apache/commons/io/input/Tailer.java",
                    "file new path": "src/main/java/org/apache/commons/io/input/Tailer.java",
                    "full name": "src.main.java.org.apache.commons.io.input.Tailer.create"
                },
                {
                    "function name": "create",
                    "function params": [
                        "file",
                        "charset",
                        "listener",
                        "delayMillis",
                        "end",
                        "reOpen",
                        "bufSize"
                    ],
                    "file name": "Tailer.java",
                    "file old path": "src/main/java/org/apache/commons/io/input/Tailer.java",
                    "file new path": "src/main/java/org/apache/commons/io/input/Tailer.java",
                    "full name": "src.main.java.org.apache.commons.io.input.Tailer.create"
                },
                {
                    "function name": "Tailer",
                    "function params": [
                        "file",
                        "listener",
                        "delayMillis",
                        "end",
                        "reOpen",
                        "bufSize"
                    ],
                    "file name": "Tailer.java",
                    "file old path": "src/main/java/org/apache/commons/io/input/Tailer.java",
                    "file new path": "src/main/java/org/apache/commons/io/input/Tailer.java",
                    "full name": "src.main.java.org.apache.commons.io.input.Tailer.Tailer"
                },
                {
                    "function name": "readLines",
                    "function params": [
                        "reader"
                    ],
                    "file name": "Tailer.java",
                    "file old path": "src/main/java/org/apache/commons/io/input/Tailer.java",
                    "file new path": "src/main/java/org/apache/commons/io/input/Tailer.java",
                    "full name": "src.main.java.org.apache.commons.io.input.Tailer.readLines"
                },
                {
                    "function name": "run",
                    "function params": [],
                    "file name": "Tailer.java",
                    "file old path": "src/main/java/org/apache/commons/io/input/Tailer.java",
                    "file new path": "src/main/java/org/apache/commons/io/input/Tailer.java",
                    "full name": "src.main.java.org.apache.commons.io.input.Tailer.run"
                },
                {
                    "function name": "create",
                    "function params": [
                        "file",
                        "listener",
                        "delayMillis"
                    ],
                    "file name": "Tailer.java",
                    "file old path": "src/main/java/org/apache/commons/io/input/Tailer.java",
                    "file new path": "src/main/java/org/apache/commons/io/input/Tailer.java",
                    "full name": "src.main.java.org.apache.commons.io.input.Tailer.create"
                },
                {
                    "function name": "getDelayDuration",
                    "function params": [],
                    "file name": "Tailer.java",
                    "file old path": "src/main/java/org/apache/commons/io/input/Tailer.java",
                    "file new path": "src/main/java/org/apache/commons/io/input/Tailer.java",
                    "full name": "src.main.java.org.apache.commons.io.input.Tailer.getDelayDuration"
                },
                {
                    "function name": "create",
                    "function params": [
                        "file",
                        "listener",
                        "delayMillis",
                        "end"
                    ],
                    "file name": "Tailer.java",
                    "file old path": "src/main/java/org/apache/commons/io/input/Tailer.java",
                    "file new path": "src/main/java/org/apache/commons/io/input/Tailer.java",
                    "full name": "src.main.java.org.apache.commons.io.input.Tailer.create"
                },
                {
                    "function name": "create",
                    "function params": [
                        "file",
                        "listener",
                        "delayMillis",
                        "end",
                        "reOpen",
                        "bufferSize"
                    ],
                    "file name": "Tailer.java",
                    "file old path": "src/main/java/org/apache/commons/io/input/Tailer.java",
                    "file new path": "src/main/java/org/apache/commons/io/input/Tailer.java",
                    "full name": "src.main.java.org.apache.commons.io.input.Tailer.create"
                },
                {
                    "function name": "Builder",
                    "function params": [
                        "delayDuration"
                    ],
                    "file name": "Tailer.java",
                    "file old path": "src/main/java/org/apache/commons/io/input/Tailer.java",
                    "file new path": "src/main/java/org/apache/commons/io/input/Tailer.java",
                    "full name": "src.main.java.org.apache.commons.io.input.Tailer.Builder"
                },
                {
                    "function name": "Builder",
                    "function params": [
                        "tailable",
                        "tailerListener"
                    ],
                    "file name": "Tailer.java",
                    "file old path": "src/main/java/org/apache/commons/io/input/Tailer.java",
                    "file new path": "src/main/java/org/apache/commons/io/input/Tailer.java",
                    "full name": "src.main.java.org.apache.commons.io.input.Tailer.Builder"
                },
                {
                    "function name": "Tailer",
                    "function params": [
                        "file",
                        "listener",
                        "delayMillis",
                        "end",
                        "bufferSize"
                    ],
                    "file name": "Tailer.java",
                    "file old path": "src/main/java/org/apache/commons/io/input/Tailer.java",
                    "file new path": "src/main/java/org/apache/commons/io/input/Tailer.java",
                    "full name": "src.main.java.org.apache.commons.io.input.Tailer.Tailer"
                },
                {
                    "function name": "RandomAccessFileBridge",
                    "function params": [
                        "position"
                    ],
                    "file name": "Tailer.java",
                    "file old path": "src/main/java/org/apache/commons/io/input/Tailer.java",
                    "file new path": "src/main/java/org/apache/commons/io/input/Tailer.java",
                    "full name": "src.main.java.org.apache.commons.io.input.Tailer.RandomAccessFileBridge"
                },
                {
                    "function name": "Tailer",
                    "function params": [
                        "file",
                        "listener",
                        "delayMillis"
                    ],
                    "file name": "Tailer.java",
                    "file old path": "src/main/java/org/apache/commons/io/input/Tailer.java",
                    "file new path": "src/main/java/org/apache/commons/io/input/Tailer.java",
                    "full name": "src.main.java.org.apache.commons.io.input.Tailer.Tailer"
                },
                {
                    "function name": "readLines",
                    "function params": [
                        "reader"
                    ],
                    "file name": "Tailer.java",
                    "file old path": "src/main/java/org/apache/commons/io/input/Tailer.java",
                    "file new path": "src/main/java/org/apache/commons/io/input/Tailer.java",
                    "full name": "src.main.java.org.apache.commons.io.input.Tailer.readLines"
                },
                {
                    "function name": "create",
                    "function params": [
                        "file",
                        "listener",
                        "delayMillis",
                        "end",
                        "reOpen",
                        "bufSize"
                    ],
                    "file name": "Tailer.java",
                    "file old path": "src/main/java/org/apache/commons/io/input/Tailer.java",
                    "file new path": "src/main/java/org/apache/commons/io/input/Tailer.java",
                    "full name": "src.main.java.org.apache.commons.io.input.Tailer.create"
                },
                {
                    "function name": "create",
                    "function params": [
                        "file",
                        "listener",
                        "delayMillis",
                        "end",
                        "bufferSize"
                    ],
                    "file name": "Tailer.java",
                    "file old path": "src/main/java/org/apache/commons/io/input/Tailer.java",
                    "file new path": "src/main/java/org/apache/commons/io/input/Tailer.java",
                    "full name": "src.main.java.org.apache.commons.io.input.Tailer.create"
                },
                {
                    "function name": "TailablePath",
                    "function params": [],
                    "file name": "Tailer.java",
                    "file old path": "src/main/java/org/apache/commons/io/input/Tailer.java",
                    "file new path": "src/main/java/org/apache/commons/io/input/Tailer.java",
                    "full name": "src.main.java.org.apache.commons.io.input.Tailer.TailablePath"
                },
                {
                    "function name": "Tailer",
                    "function params": [
                        "file",
                        "listener",
                        "delayMillis",
                        "end",
                        "reOpen",
                        "bufferSize"
                    ],
                    "file name": "Tailer.java",
                    "file old path": "src/main/java/org/apache/commons/io/input/Tailer.java",
                    "file new path": "src/main/java/org/apache/commons/io/input/Tailer.java",
                    "full name": "src.main.java.org.apache.commons.io.input.Tailer.Tailer"
                },
                {
                    "function name": "RandomAccessFileBridge",
                    "function params": [
                        "b"
                    ],
                    "file name": "Tailer.java",
                    "file old path": "src/main/java/org/apache/commons/io/input/Tailer.java",
                    "file new path": "src/main/java/org/apache/commons/io/input/Tailer.java",
                    "full name": "src.main.java.org.apache.commons.io.input.Tailer.RandomAccessFileBridge"
                },
                {
                    "function name": "create",
                    "function params": [
                        "file",
                        "listener"
                    ],
                    "file name": "Tailer.java",
                    "file old path": "src/main/java/org/apache/commons/io/input/Tailer.java",
                    "file new path": "src/main/java/org/apache/commons/io/input/Tailer.java",
                    "full name": "src.main.java.org.apache.commons.io.input.Tailer.create"
                },
                {
                    "function name": "getDelay",
                    "function params": [],
                    "file name": "Tailer.java",
                    "file old path": "src/main/java/org/apache/commons/io/input/Tailer.java",
                    "file new path": "src/main/java/org/apache/commons/io/input/Tailer.java",
                    "full name": "src.main.java.org.apache.commons.io.input.Tailer.getDelay"
                },
                {
                    "function name": "RandomAccessFileBridge",
                    "function params": [
                        "file",
                        "mode"
                    ],
                    "file name": "Tailer.java",
                    "file old path": "src/main/java/org/apache/commons/io/input/Tailer.java",
                    "file new path": "src/main/java/org/apache/commons/io/input/Tailer.java",
                    "full name": "src.main.java.org.apache.commons.io.input.Tailer.RandomAccessFileBridge"
                },
                {
                    "function name": "getTailable",
                    "function params": [],
                    "file name": "Tailer.java",
                    "file old path": "src/main/java/org/apache/commons/io/input/Tailer.java",
                    "file new path": "src/main/java/org/apache/commons/io/input/Tailer.java",
                    "full name": "src.main.java.org.apache.commons.io.input.Tailer.getTailable"
                },
                {
                    "function name": "RandomAccessFileBridge",
                    "function params": [],
                    "file name": "Tailer.java",
                    "file old path": "src/main/java/org/apache/commons/io/input/Tailer.java",
                    "file new path": "src/main/java/org/apache/commons/io/input/Tailer.java",
                    "full name": "src.main.java.org.apache.commons.io.input.Tailer.RandomAccessFileBridge"
                },
                {
                    "function name": "RandomAccessFileBridge",
                    "function params": [],
                    "file name": "Tailer.java",
                    "file old path": "src/main/java/org/apache/commons/io/input/Tailer.java",
                    "file new path": "src/main/java/org/apache/commons/io/input/Tailer.java",
                    "full name": "src.main.java.org.apache.commons.io.input.Tailer.RandomAccessFileBridge"
                },
                {
                    "function name": "Builder",
                    "function params": [
                        "charset"
                    ],
                    "file name": "Tailer.java",
                    "file old path": "src/main/java/org/apache/commons/io/input/Tailer.java",
                    "file new path": "src/main/java/org/apache/commons/io/input/Tailer.java",
                    "full name": "src.main.java.org.apache.commons.io.input.Tailer.Builder"
                },
                {
                    "function name": "Builder",
                    "function params": [
                        "startThread"
                    ],
                    "file name": "Tailer.java",
                    "file old path": "src/main/java/org/apache/commons/io/input/Tailer.java",
                    "file new path": "src/main/java/org/apache/commons/io/input/Tailer.java",
                    "full name": "src.main.java.org.apache.commons.io.input.Tailer.Builder"
                },
                {
                    "function name": "create",
                    "function params": [
                        "file",
                        "charset",
                        "listener",
                        "delayMillis",
                        "end",
                        "reOpen",
                        "bufferSize"
                    ],
                    "file name": "Tailer.java",
                    "file old path": "src/main/java/org/apache/commons/io/input/Tailer.java",
                    "file new path": "src/main/java/org/apache/commons/io/input/Tailer.java",
                    "full name": "src.main.java.org.apache.commons.io.input.Tailer.create"
                },
                {
                    "function name": "Tailer",
                    "function params": [
                        "file",
                        "listener",
                        "delayMillis",
                        "end",
                        "reOpen"
                    ],
                    "file name": "Tailer.java",
                    "file old path": "src/main/java/org/apache/commons/io/input/Tailer.java",
                    "file new path": "src/main/java/org/apache/commons/io/input/Tailer.java",
                    "full name": "src.main.java.org.apache.commons.io.input.Tailer.Tailer"
                },
                {
                    "function name": "TailablePath",
                    "function params": [],
                    "file name": "Tailer.java",
                    "file old path": "src/main/java/org/apache/commons/io/input/Tailer.java",
                    "file new path": "src/main/java/org/apache/commons/io/input/Tailer.java",
                    "full name": "src.main.java.org.apache.commons.io.input.Tailer.TailablePath"
                },
                {
                    "function name": "create",
                    "function params": [
                        "file",
                        "listener",
                        "delayMillis",
                        "end",
                        "bufSize"
                    ],
                    "file name": "Tailer.java",
                    "file old path": "src/main/java/org/apache/commons/io/input/Tailer.java",
                    "file new path": "src/main/java/org/apache/commons/io/input/Tailer.java",
                    "full name": "src.main.java.org.apache.commons.io.input.Tailer.create"
                },
                {
                    "function name": "Tailer",
                    "function params": [
                        "file",
                        "charset",
                        "listener",
                        "delayMillis",
                        "end",
                        "reOpen",
                        "bufSize"
                    ],
                    "file name": "Tailer.java",
                    "file old path": "src/main/java/org/apache/commons/io/input/Tailer.java",
                    "file new path": "src/main/java/org/apache/commons/io/input/Tailer.java",
                    "full name": "src.main.java.org.apache.commons.io.input.Tailer.Tailer"
                },
                {
                    "function name": "TailablePath",
                    "function params": [
                        "path",
                        "linkOptions"
                    ],
                    "file name": "Tailer.java",
                    "file old path": "src/main/java/org/apache/commons/io/input/Tailer.java",
                    "file new path": "src/main/java/org/apache/commons/io/input/Tailer.java",
                    "full name": "src.main.java.org.apache.commons.io.input.Tailer.TailablePath"
                },
                {
                    "function name": "Builder",
                    "function params": [
                        "file",
                        "listener"
                    ],
                    "file name": "Tailer.java",
                    "file old path": "src/main/java/org/apache/commons/io/input/Tailer.java",
                    "file new path": "src/main/java/org/apache/commons/io/input/Tailer.java",
                    "full name": "src.main.java.org.apache.commons.io.input.Tailer.Builder"
                },
                {
                    "function name": "TailablePath",
                    "function params": [
                        "fileTime"
                    ],
                    "file name": "Tailer.java",
                    "file old path": "src/main/java/org/apache/commons/io/input/Tailer.java",
                    "file new path": "src/main/java/org/apache/commons/io/input/Tailer.java",
                    "full name": "src.main.java.org.apache.commons.io.input.Tailer.TailablePath"
                },
                {
                    "function name": "Tailer",
                    "function params": [
                        "file",
                        "charset",
                        "listener",
                        "delayDuration",
                        "end",
                        "reOpen",
                        "bufSize"
                    ],
                    "file name": "Tailer.java",
                    "file old path": "src/main/java/org/apache/commons/io/input/Tailer.java",
                    "file new path": "src/main/java/org/apache/commons/io/input/Tailer.java",
                    "full name": "src.main.java.org.apache.commons.io.input.Tailer.Tailer"
                },
                {
                    "function name": "Builder",
                    "function params": [
                        "bufferSize"
                    ],
                    "file name": "Tailer.java",
                    "file old path": "src/main/java/org/apache/commons/io/input/Tailer.java",
                    "file new path": "src/main/java/org/apache/commons/io/input/Tailer.java",
                    "full name": "src.main.java.org.apache.commons.io.input.Tailer.Builder"
                },
                {
                    "function name": "Builder",
                    "function params": [],
                    "file name": "Tailer.java",
                    "file old path": "src/main/java/org/apache/commons/io/input/Tailer.java",
                    "file new path": "src/main/java/org/apache/commons/io/input/Tailer.java",
                    "full name": "src.main.java.org.apache.commons.io.input.Tailer.Builder"
                },
                {
                    "function name": "Builder",
                    "function params": [
                        "end"
                    ],
                    "file name": "Tailer.java",
                    "file old path": "src/main/java/org/apache/commons/io/input/Tailer.java",
                    "file new path": "src/main/java/org/apache/commons/io/input/Tailer.java",
                    "full name": "src.main.java.org.apache.commons.io.input.Tailer.Builder"
                },
                {
                    "function name": "Tailer",
                    "function params": [
                        "file",
                        "listener",
                        "delayMillis",
                        "end"
                    ],
                    "file name": "Tailer.java",
                    "file old path": "src/main/java/org/apache/commons/io/input/Tailer.java",
                    "file new path": "src/main/java/org/apache/commons/io/input/Tailer.java",
                    "full name": "src.main.java.org.apache.commons.io.input.Tailer.Tailer"
                },
                {
                    "function name": "Tailer",
                    "function params": [
                        "tailable",
                        "charset",
                        "listener",
                        "delayDuration",
                        "end",
                        "reOpen",
                        "bufferSize"
                    ],
                    "file name": "Tailer.java",
                    "file old path": "src/main/java/org/apache/commons/io/input/Tailer.java",
                    "file new path": "src/main/java/org/apache/commons/io/input/Tailer.java",
                    "full name": "src.main.java.org.apache.commons.io.input.Tailer.Tailer"
                },
                {
                    "function name": "getFile",
                    "function params": [],
                    "file name": "Tailer.java",
                    "file old path": "src/main/java/org/apache/commons/io/input/Tailer.java",
                    "file new path": "src/main/java/org/apache/commons/io/input/Tailer.java",
                    "full name": "src.main.java.org.apache.commons.io.input.Tailer.getFile"
                },
                {
                    "function name": "Builder",
                    "function params": [
                        "file",
                        "listener"
                    ],
                    "file name": "Tailer.java",
                    "file old path": "src/main/java/org/apache/commons/io/input/Tailer.java",
                    "file new path": "src/main/java/org/apache/commons/io/input/Tailer.java",
                    "full name": "src.main.java.org.apache.commons.io.input.Tailer.Builder"
                },
                {
                    "function name": "TailablePath",
                    "function params": [
                        "mode"
                    ],
                    "file name": "Tailer.java",
                    "file old path": "src/main/java/org/apache/commons/io/input/Tailer.java",
                    "file new path": "src/main/java/org/apache/commons/io/input/Tailer.java",
                    "full name": "src.main.java.org.apache.commons.io.input.Tailer.TailablePath"
                },
                {
                    "function name": "TailablePath",
                    "function params": [],
                    "file name": "Tailer.java",
                    "file old path": "src/main/java/org/apache/commons/io/input/Tailer.java",
                    "file new path": "src/main/java/org/apache/commons/io/input/Tailer.java",
                    "full name": "src.main.java.org.apache.commons.io.input.Tailer.TailablePath"
                },
                {
                    "function name": "Tailer",
                    "function params": [
                        "file",
                        "listener",
                        "delayMillis",
                        "end",
                        "bufSize"
                    ],
                    "file name": "Tailer.java",
                    "file old path": "src/main/java/org/apache/commons/io/input/Tailer.java",
                    "file new path": "src/main/java/org/apache/commons/io/input/Tailer.java",
                    "full name": "src.main.java.org.apache.commons.io.input.Tailer.Tailer"
                },
                {
                    "function name": "TailablePath",
                    "function params": [],
                    "file name": "Tailer.java",
                    "file old path": "src/main/java/org/apache/commons/io/input/Tailer.java",
                    "file new path": "src/main/java/org/apache/commons/io/input/Tailer.java",
                    "full name": "src.main.java.org.apache.commons.io.input.Tailer.TailablePath"
                },
                {
                    "function name": "Builder",
                    "function params": [
                        "reOpen"
                    ],
                    "file name": "Tailer.java",
                    "file old path": "src/main/java/org/apache/commons/io/input/Tailer.java",
                    "file new path": "src/main/java/org/apache/commons/io/input/Tailer.java",
                    "full name": "src.main.java.org.apache.commons.io.input.Tailer.Builder"
                },
                {
                    "function name": "validateTailer",
                    "function params": [
                        "listener",
                        "tailer",
                        "file"
                    ],
                    "file name": "TailerTest.java",
                    "file old path": "src/test/java/org/apache/commons/io/input/TailerTest.java",
                    "file new path": "src/test/java/org/apache/commons/io/input/TailerTest.java",
                    "full name": "src.test.java.org.apache.commons.io.input.TailerTest.validateTailer"
                },
                {
                    "function name": "testCreaterWithDelayAndFromStartWithReopen",
                    "function params": [],
                    "file name": "TailerTest.java",
                    "file old path": "src/test/java/org/apache/commons/io/input/TailerTest.java",
                    "file new path": "src/test/java/org/apache/commons/io/input/TailerTest.java",
                    "full name": "src.test.java.org.apache.commons.io.input.TailerTest.testCreaterWithDelayAndFromStartWithReopen"
                },
                {
                    "function name": "createFile",
                    "function params": [
                        "file",
                        "size"
                    ],
                    "file name": "TailerTest.java",
                    "file old path": "src/test/java/org/apache/commons/io/input/TailerTest.java",
                    "file new path": "src/test/java/org/apache/commons/io/input/TailerTest.java",
                    "full name": "src.test.java.org.apache.commons.io.input.TailerTest.createFile"
                },
                {
                    "function name": "testSimpleConstructorWithDelayAndFromStart",
                    "function params": [],
                    "file name": "TailerTest.java",
                    "file old path": "src/test/java/org/apache/commons/io/input/TailerTest.java",
                    "file new path": "src/test/java/org/apache/commons/io/input/TailerTest.java",
                    "full name": "src.test.java.org.apache.commons.io.input.TailerTest.testSimpleConstructorWithDelayAndFromStart"
                },
                {
                    "function name": "writeString",
                    "function params": [
                        "file",
                        "strings"
                    ],
                    "file name": "TailerTest.java",
                    "file old path": "src/test/java/org/apache/commons/io/input/TailerTest.java",
                    "file new path": "src/test/java/org/apache/commons/io/input/TailerTest.java",
                    "full name": "src.test.java.org.apache.commons.io.input.TailerTest.writeString"
                },
                {
                    "function name": "NonStandardTailable",
                    "function params": [
                        "mode"
                    ],
                    "file name": "TailerTest.java",
                    "file old path": "src/test/java/org/apache/commons/io/input/TailerTest.java",
                    "file new path": "src/test/java/org/apache/commons/io/input/TailerTest.java",
                    "full name": "src.test.java.org.apache.commons.io.input.TailerTest.NonStandardTailable"
                },
                {
                    "function name": "testCreateWithDelayAndFromStart",
                    "function params": [],
                    "file name": "TailerTest.java",
                    "file old path": "src/test/java/org/apache/commons/io/input/TailerTest.java",
                    "file new path": "src/test/java/org/apache/commons/io/input/TailerTest.java",
                    "full name": "src.test.java.org.apache.commons.io.input.TailerTest.testCreateWithDelayAndFromStart"
                },
                {
                    "function name": "testCreateWithDelay",
                    "function params": [],
                    "file name": "TailerTest.java",
                    "file old path": "src/test/java/org/apache/commons/io/input/TailerTest.java",
                    "file new path": "src/test/java/org/apache/commons/io/input/TailerTest.java",
                    "full name": "src.test.java.org.apache.commons.io.input.TailerTest.testCreateWithDelay"
                },
                {
                    "function name": "NonStandardTailable",
                    "function params": [],
                    "file name": "TailerTest.java",
                    "file old path": "src/test/java/org/apache/commons/io/input/TailerTest.java",
                    "file new path": "src/test/java/org/apache/commons/io/input/TailerTest.java",
                    "full name": "src.test.java.org.apache.commons.io.input.TailerTest.NonStandardTailable"
                },
                {
                    "function name": "testSimpleConstructorWithDelayAndFromStartWithBufferSize",
                    "function params": [],
                    "file name": "TailerTest.java",
                    "file old path": "src/test/java/org/apache/commons/io/input/TailerTest.java",
                    "file new path": "src/test/java/org/apache/commons/io/input/TailerTest.java",
                    "full name": "src.test.java.org.apache.commons.io.input.TailerTest.testSimpleConstructorWithDelayAndFromStartWithBufferSize"
                },
                {
                    "function name": "testSimpleConstructorWithDelayAndFromStartWithReopenAndBufferSizeAndCharset",
                    "function params": [],
                    "file name": "TailerTest.java",
                    "file old path": "src/test/java/org/apache/commons/io/input/TailerTest.java",
                    "file new path": "src/test/java/org/apache/commons/io/input/TailerTest.java",
                    "full name": "src.test.java.org.apache.commons.io.input.TailerTest.testSimpleConstructorWithDelayAndFromStartWithReopenAndBufferSizeAndCharset"
                },
                {
                    "function name": "testSimpleConstructorWithDelayAndFromStartWithReopen",
                    "function params": [],
                    "file name": "TailerTest.java",
                    "file old path": "src/test/java/org/apache/commons/io/input/TailerTest.java",
                    "file new path": "src/test/java/org/apache/commons/io/input/TailerTest.java",
                    "full name": "src.test.java.org.apache.commons.io.input.TailerTest.testSimpleConstructorWithDelayAndFromStartWithReopen"
                },
                {
                    "function name": "testCreateWithDelayAndFromStartWithReopenAndBufferSize",
                    "function params": [],
                    "file name": "TailerTest.java",
                    "file old path": "src/test/java/org/apache/commons/io/input/TailerTest.java",
                    "file new path": "src/test/java/org/apache/commons/io/input/TailerTest.java",
                    "full name": "src.test.java.org.apache.commons.io.input.TailerTest.testCreateWithDelayAndFromStartWithReopenAndBufferSize"
                },
                {
                    "function name": "testCreate",
                    "function params": [],
                    "file name": "TailerTest.java",
                    "file old path": "src/test/java/org/apache/commons/io/input/TailerTest.java",
                    "file new path": "src/test/java/org/apache/commons/io/input/TailerTest.java",
                    "full name": "src.test.java.org.apache.commons.io.input.TailerTest.testCreate"
                },
                {
                    "function name": "testSimpleConstructorWithDelayAndFromStartWithReopenAndBufferSize",
                    "function params": [],
                    "file name": "TailerTest.java",
                    "file old path": "src/test/java/org/apache/commons/io/input/TailerTest.java",
                    "file new path": "src/test/java/org/apache/commons/io/input/TailerTest.java",
                    "full name": "src.test.java.org.apache.commons.io.input.TailerTest.testSimpleConstructorWithDelayAndFromStartWithReopenAndBufferSize"
                },
                {
                    "function name": "testCreateWithDelayAndFromStartWithBufferSize",
                    "function params": [],
                    "file name": "TailerTest.java",
                    "file old path": "src/test/java/org/apache/commons/io/input/TailerTest.java",
                    "file new path": "src/test/java/org/apache/commons/io/input/TailerTest.java",
                    "full name": "src.test.java.org.apache.commons.io.input.TailerTest.testCreateWithDelayAndFromStartWithBufferSize"
                },
                {
                    "function name": "TestTailerListener",
                    "function params": [],
                    "file name": "TailerTest.java",
                    "file old path": "src/test/java/org/apache/commons/io/input/TailerTest.java",
                    "file new path": "src/test/java/org/apache/commons/io/input/TailerTest.java",
                    "full name": "src.test.java.org.apache.commons.io.input.TailerTest.TestTailerListener"
                },
                {
                    "function name": "testStopWithNoFile",
                    "function params": [],
                    "file name": "TailerTest.java",
                    "file old path": "src/test/java/org/apache/commons/io/input/TailerTest.java",
                    "file new path": "src/test/java/org/apache/commons/io/input/TailerTest.java",
                    "full name": "src.test.java.org.apache.commons.io.input.TailerTest.testStopWithNoFile"
                },
                {
                    "function name": "TestTailerListener",
                    "function params": [
                        "expectedLines"
                    ],
                    "file name": "TailerTest.java",
                    "file old path": "src/test/java/org/apache/commons/io/input/TailerTest.java",
                    "file new path": "src/test/java/org/apache/commons/io/input/TailerTest.java",
                    "full name": "src.test.java.org.apache.commons.io.input.TailerTest.TestTailerListener"
                },
                {
                    "function name": "testMultiByteBreak",
                    "function params": [],
                    "file name": "TailerTest.java",
                    "file old path": "src/test/java/org/apache/commons/io/input/TailerTest.java",
                    "file new path": "src/test/java/org/apache/commons/io/input/TailerTest.java",
                    "full name": "src.test.java.org.apache.commons.io.input.TailerTest.testMultiByteBreak"
                },
                {
                    "function name": "testSimpleConstructor",
                    "function params": [],
                    "file name": "TailerTest.java",
                    "file old path": "src/test/java/org/apache/commons/io/input/TailerTest.java",
                    "file new path": "src/test/java/org/apache/commons/io/input/TailerTest.java",
                    "full name": "src.test.java.org.apache.commons.io.input.TailerTest.testSimpleConstructor"
                },
                {
                    "function name": "testStopWithNoFileUsingExecutor",
                    "function params": [],
                    "file name": "TailerTest.java",
                    "file old path": "src/test/java/org/apache/commons/io/input/TailerTest.java",
                    "file new path": "src/test/java/org/apache/commons/io/input/TailerTest.java",
                    "full name": "src.test.java.org.apache.commons.io.input.TailerTest.testStopWithNoFileUsingExecutor"
                },
                {
                    "function name": "testBuilderWithNonStandardTailable",
                    "function params": [],
                    "file name": "TailerTest.java",
                    "file old path": "src/test/java/org/apache/commons/io/input/TailerTest.java",
                    "file new path": "src/test/java/org/apache/commons/io/input/TailerTest.java",
                    "full name": "src.test.java.org.apache.commons.io.input.TailerTest.testBuilderWithNonStandardTailable"
                },
                {
                    "function name": "testTailer",
                    "function params": [],
                    "file name": "TailerTest.java",
                    "file old path": "src/test/java/org/apache/commons/io/input/TailerTest.java",
                    "file new path": "src/test/java/org/apache/commons/io/input/TailerTest.java",
                    "full name": "src.test.java.org.apache.commons.io.input.TailerTest.testTailer"
                },
                {
                    "function name": "TestTailerListener",
                    "function params": [
                        "timeout",
                        "timeUnit"
                    ],
                    "file name": "TailerTest.java",
                    "file old path": "src/test/java/org/apache/commons/io/input/TailerTest.java",
                    "file new path": "src/test/java/org/apache/commons/io/input/TailerTest.java",
                    "full name": "src.test.java.org.apache.commons.io.input.TailerTest.TestTailerListener"
                },
                {
                    "function name": "NonStandardTailable",
                    "function params": [],
                    "file name": "TailerTest.java",
                    "file old path": "src/test/java/org/apache/commons/io/input/TailerTest.java",
                    "file new path": "src/test/java/org/apache/commons/io/input/TailerTest.java",
                    "full name": "src.test.java.org.apache.commons.io.input.TailerTest.NonStandardTailable"
                },
                {
                    "function name": "TestTailerListener",
                    "function params": [
                        "line"
                    ],
                    "file name": "TailerTest.java",
                    "file old path": "src/test/java/org/apache/commons/io/input/TailerTest.java",
                    "file new path": "src/test/java/org/apache/commons/io/input/TailerTest.java",
                    "full name": "src.test.java.org.apache.commons.io.input.TailerTest.TestTailerListener"
                },
                {
                    "function name": "testCreateWithDelayAndFromStartWithReopenAndBufferSizeAndCharset",
                    "function params": [],
                    "file name": "TailerTest.java",
                    "file old path": "src/test/java/org/apache/commons/io/input/TailerTest.java",
                    "file new path": "src/test/java/org/apache/commons/io/input/TailerTest.java",
                    "full name": "src.test.java.org.apache.commons.io.input.TailerTest.testCreateWithDelayAndFromStartWithReopenAndBufferSizeAndCharset"
                },
                {
                    "function name": "testSimpleConstructorWithDelay",
                    "function params": [],
                    "file name": "TailerTest.java",
                    "file old path": "src/test/java/org/apache/commons/io/input/TailerTest.java",
                    "file new path": "src/test/java/org/apache/commons/io/input/TailerTest.java",
                    "full name": "src.test.java.org.apache.commons.io.input.TailerTest.testSimpleConstructorWithDelay"
                },
                {
                    "function name": "NonStandardTailable",
                    "function params": [
                        "fileTime"
                    ],
                    "file name": "TailerTest.java",
                    "file old path": "src/test/java/org/apache/commons/io/input/TailerTest.java",
                    "file new path": "src/test/java/org/apache/commons/io/input/TailerTest.java",
                    "full name": "src.test.java.org.apache.commons.io.input.TailerTest.NonStandardTailable"
                },
                {
                    "function name": "NonStandardTailable",
                    "function params": [
                        "file"
                    ],
                    "file name": "TailerTest.java",
                    "file old path": "src/test/java/org/apache/commons/io/input/TailerTest.java",
                    "file new path": "src/test/java/org/apache/commons/io/input/TailerTest.java",
                    "full name": "src.test.java.org.apache.commons.io.input.TailerTest.NonStandardTailable"
                }
            ],
            "files that changed": [
                "src/main/java/org/apache/commons/io/input/Tailer.java",
                "src/test/java/org/apache/commons/io/input/TailerTest.java"
            ]
        },
        {
            "bug index": "43",
            "bug id": "IO-17",
            "hexsha": "742c51feeaf75542ab9db6782ad3d2ad506fb871",
            "fix_hash": "e7b0b9231cd815ef4907f65c43e676fd83ed38d5",
            "description": "The delete function in the FileUtils class will sometimes not delete a file or\ndirectory on windows. This is a known bug in the VM. Ant solves this by calling\nthe GC explecitly and then wait some time. See\nhttp://cvs.apache.org/viewcvs.cgi/ant/src/main/org/apache/tools/ant/taskdefs/Delete.java?view=markup\non how they do it.",
            "commit number version hash": 443,
            "commit number": 2186,
            "function that changed": [],
            "files that changed": [
                "src/main/java/org/apache/commons/io/FileUtils.java",
                "src/main/java/org/apache/commons/io/comparator/DefaultFileComparator.java",
                "src/main/java/org/apache/commons/io/comparator/DirectoryFileComparator.java",
                "src/main/java/org/apache/commons/io/comparator/ExtensionFileComparator.java",
                "src/main/java/org/apache/commons/io/comparator/LastModifiedFileComparator.java",
                "src/main/java/org/apache/commons/io/comparator/NameFileComparator.java",
                "src/main/java/org/apache/commons/io/comparator/PathFileComparator.java",
                "src/main/java/org/apache/commons/io/input/TailerListener.java"
            ]
        },
        {
            "bug index": "45",
            "bug id": "IO-269",
            "hexsha": "364c2bf7f42e7679d910548d931be24332eaf6ad",
            "fix_hash": "a1fd31d3350350b54dcf4b6e35bcd19c0b2527d7",
            "description": "The Tailer code works on Windows, except that it locks the file against deletion or rename.\n\nThe test code fails to detect this, because it fails to check if the file deletion succeeds.\n\nThis seems to be a Windows OS issue.\n\nA possible solution might be to keep closing and re-opening the file.\n",
            "commit number version hash": 990,
            "commit number": 2154,
            "function that changed": [
                {
                    "function name": "testGetFreeSpace_String",
                    "function params": [],
                    "file name": "FileSystemUtilsTestCase.java",
                    "file old path": "src/test/java/org/apache/commons/io/FileSystemUtilsTestCase.java",
                    "file new path": "src/test/java/org/apache/commons/io/FileSystemUtilsTestCase.java",
                    "full name": "src.test.java.org.apache.commons.io.FileSystemUtilsTestCase.testGetFreeSpace_String"
                }
            ],
            "files that changed": [
                "src/test/java/org/apache/commons/io/FileSystemUtilsTestCase.java"
            ]
        },
        {
            "bug index": "49",
            "bug id": "IO-5",
            "hexsha": "742c51feeaf75542ab9db6782ad3d2ad506fb871",
            "fix_hash": "95248e3798a4fa4091f735cee9e540770e057cd7",
            "description": null,
            "commit number version hash": 443,
            "commit number": 2098,
            "function that changed": [
                {
                    "function name": "testAvailable",
                    "function params": [],
                    "file name": "BrokenInputStreamTest.java",
                    "file old path": "src/test/java/org/apache/commons/io/input/BrokenInputStreamTest.java",
                    "file new path": "src/test/java/org/apache/commons/io/input/BrokenInputStreamTest.java",
                    "full name": "src.test.java.org.apache.commons.io.input.BrokenInputStreamTest.testAvailable"
                },
                {
                    "function name": "testClose",
                    "function params": [],
                    "file name": "BrokenInputStreamTest.java",
                    "file old path": "src/test/java/org/apache/commons/io/input/BrokenInputStreamTest.java",
                    "file new path": "src/test/java/org/apache/commons/io/input/BrokenInputStreamTest.java",
                    "full name": "src.test.java.org.apache.commons.io.input.BrokenInputStreamTest.testClose"
                },
                {
                    "function name": "testSkip",
                    "function params": [],
                    "file name": "BrokenInputStreamTest.java",
                    "file old path": "src/test/java/org/apache/commons/io/input/BrokenInputStreamTest.java",
                    "file new path": "src/test/java/org/apache/commons/io/input/BrokenInputStreamTest.java",
                    "full name": "src.test.java.org.apache.commons.io.input.BrokenInputStreamTest.testSkip"
                },
                {
                    "function name": "testRead",
                    "function params": [],
                    "file name": "BrokenInputStreamTest.java",
                    "file old path": "src/test/java/org/apache/commons/io/input/BrokenInputStreamTest.java",
                    "file new path": "src/test/java/org/apache/commons/io/input/BrokenInputStreamTest.java",
                    "full name": "src.test.java.org.apache.commons.io.input.BrokenInputStreamTest.testRead"
                },
                {
                    "function name": "testReset",
                    "function params": [],
                    "file name": "BrokenInputStreamTest.java",
                    "file old path": "src/test/java/org/apache/commons/io/input/BrokenInputStreamTest.java",
                    "file new path": "src/test/java/org/apache/commons/io/input/BrokenInputStreamTest.java",
                    "full name": "src.test.java.org.apache.commons.io.input.BrokenInputStreamTest.testReset"
                }
            ],
            "files that changed": [
                "src/test/java/org/apache/commons/io/input/BrokenInputStreamTest.java"
            ]
        },
        {
            "bug index": "50",
            "bug id": "IO-5",
            "hexsha": "742c51feeaf75542ab9db6782ad3d2ad506fb871",
            "fix_hash": "3ff59a713a300675c19173f37f45ede331ab48f8",
            "description": null,
            "commit number version hash": 443,
            "commit number": 2097,
            "function that changed": [
                {
                    "function name": "testWriteByteArray",
                    "function params": [],
                    "file name": "BrokenOutputStreamTest.java",
                    "file old path": "src/test/java/org/apache/commons/io/output/BrokenOutputStreamTest.java",
                    "file new path": "src/test/java/org/apache/commons/io/output/BrokenOutputStreamTest.java",
                    "full name": "src.test.java.org.apache.commons.io.output.BrokenOutputStreamTest.testWriteByteArray"
                },
                {
                    "function name": "testFlush",
                    "function params": [],
                    "file name": "BrokenOutputStreamTest.java",
                    "file old path": "src/test/java/org/apache/commons/io/output/BrokenOutputStreamTest.java",
                    "file new path": "src/test/java/org/apache/commons/io/output/BrokenOutputStreamTest.java",
                    "full name": "src.test.java.org.apache.commons.io.output.BrokenOutputStreamTest.testFlush"
                },
                {
                    "function name": "testClose",
                    "function params": [],
                    "file name": "BrokenOutputStreamTest.java",
                    "file old path": "src/test/java/org/apache/commons/io/output/BrokenOutputStreamTest.java",
                    "file new path": "src/test/java/org/apache/commons/io/output/BrokenOutputStreamTest.java",
                    "full name": "src.test.java.org.apache.commons.io.output.BrokenOutputStreamTest.testClose"
                },
                {
                    "function name": "testWriteInt",
                    "function params": [],
                    "file name": "BrokenOutputStreamTest.java",
                    "file old path": "src/test/java/org/apache/commons/io/output/BrokenOutputStreamTest.java",
                    "file new path": "src/test/java/org/apache/commons/io/output/BrokenOutputStreamTest.java",
                    "full name": "src.test.java.org.apache.commons.io.output.BrokenOutputStreamTest.testWriteInt"
                },
                {
                    "function name": "testWriteByteArrayIndexed",
                    "function params": [],
                    "file name": "BrokenOutputStreamTest.java",
                    "file old path": "src/test/java/org/apache/commons/io/output/BrokenOutputStreamTest.java",
                    "file new path": "src/test/java/org/apache/commons/io/output/BrokenOutputStreamTest.java",
                    "full name": "src.test.java.org.apache.commons.io.output.BrokenOutputStreamTest.testWriteByteArrayIndexed"
                }
            ],
            "files that changed": [
                "src/test/java/org/apache/commons/io/output/BrokenOutputStreamTest.java"
            ]
        },
        {
            "bug index": "51",
            "bug id": "IO-5",
            "hexsha": "742c51feeaf75542ab9db6782ad3d2ad506fb871",
            "fix_hash": "5abe7b15f8ad26c5eed2123a8716e55cf5d81d72",
            "description": null,
            "commit number version hash": 443,
            "commit number": 2092,
            "function that changed": [
                {
                    "function name": "testWriteInt",
                    "function params": [],
                    "file name": "BrokenWriterTest.java",
                    "file old path": "src/test/java/org/apache/commons/io/output/BrokenWriterTest.java",
                    "file new path": "src/test/java/org/apache/commons/io/output/BrokenWriterTest.java",
                    "full name": "src.test.java.org.apache.commons.io.output.BrokenWriterTest.testWriteInt"
                },
                {
                    "function name": "setUp",
                    "function params": [],
                    "file name": "BrokenWriterTest.java",
                    "file old path": "src/test/java/org/apache/commons/io/output/BrokenWriterTest.java",
                    "file new path": "src/test/java/org/apache/commons/io/output/BrokenWriterTest.java",
                    "full name": "src.test.java.org.apache.commons.io.output.BrokenWriterTest.setUp"
                },
                {
                    "function name": "testWriteCharArray",
                    "function params": [],
                    "file name": "BrokenWriterTest.java",
                    "file old path": "src/test/java/org/apache/commons/io/output/BrokenWriterTest.java",
                    "file new path": "src/test/java/org/apache/commons/io/output/BrokenWriterTest.java",
                    "full name": "src.test.java.org.apache.commons.io.output.BrokenWriterTest.testWriteCharArray"
                },
                {
                    "function name": "testFlush",
                    "function params": [],
                    "file name": "BrokenWriterTest.java",
                    "file old path": "src/test/java/org/apache/commons/io/output/BrokenWriterTest.java",
                    "file new path": "src/test/java/org/apache/commons/io/output/BrokenWriterTest.java",
                    "full name": "src.test.java.org.apache.commons.io.output.BrokenWriterTest.testFlush"
                },
                {
                    "function name": "testClose",
                    "function params": [],
                    "file name": "BrokenWriterTest.java",
                    "file old path": "src/test/java/org/apache/commons/io/output/BrokenWriterTest.java",
                    "file new path": "src/test/java/org/apache/commons/io/output/BrokenWriterTest.java",
                    "full name": "src.test.java.org.apache.commons.io.output.BrokenWriterTest.testClose"
                },
                {
                    "function name": "testWriteCharArrayIndexed",
                    "function params": [],
                    "file name": "BrokenWriterTest.java",
                    "file old path": "src/test/java/org/apache/commons/io/output/BrokenWriterTest.java",
                    "file new path": "src/test/java/org/apache/commons/io/output/BrokenWriterTest.java",
                    "full name": "src.test.java.org.apache.commons.io.output.BrokenWriterTest.testWriteCharArrayIndexed"
                }
            ],
            "files that changed": [
                "src/test/java/org/apache/commons/io/output/BrokenWriterTest.java"
            ]
        },
        {
            "bug index": "52",
            "bug id": "IO-5",
            "hexsha": "742c51feeaf75542ab9db6782ad3d2ad506fb871",
            "fix_hash": "b785d75506cf29863a1b333a99aa914ca4d6af4b",
            "description": null,
            "commit number version hash": 443,
            "commit number": 2091,
            "function that changed": [
                {
                    "function name": "testReadCharArrayIndexed",
                    "function params": [],
                    "file name": "BrokenReaderTest.java",
                    "file old path": "src/test/java/org/apache/commons/io/input/BrokenReaderTest.java",
                    "file new path": "src/test/java/org/apache/commons/io/input/BrokenReaderTest.java",
                    "full name": "src.test.java.org.apache.commons.io.input.BrokenReaderTest.testReadCharArrayIndexed"
                },
                {
                    "function name": "testRead",
                    "function params": [],
                    "file name": "BrokenReaderTest.java",
                    "file old path": "src/test/java/org/apache/commons/io/input/BrokenReaderTest.java",
                    "file new path": "src/test/java/org/apache/commons/io/input/BrokenReaderTest.java",
                    "full name": "src.test.java.org.apache.commons.io.input.BrokenReaderTest.testRead"
                },
                {
                    "function name": "testReady",
                    "function params": [],
                    "file name": "BrokenReaderTest.java",
                    "file old path": "src/test/java/org/apache/commons/io/input/BrokenReaderTest.java",
                    "file new path": "src/test/java/org/apache/commons/io/input/BrokenReaderTest.java",
                    "full name": "src.test.java.org.apache.commons.io.input.BrokenReaderTest.testReady"
                },
                {
                    "function name": "testReset",
                    "function params": [],
                    "file name": "BrokenReaderTest.java",
                    "file old path": "src/test/java/org/apache/commons/io/input/BrokenReaderTest.java",
                    "file new path": "src/test/java/org/apache/commons/io/input/BrokenReaderTest.java",
                    "full name": "src.test.java.org.apache.commons.io.input.BrokenReaderTest.testReset"
                },
                {
                    "function name": "testReadCharArray",
                    "function params": [],
                    "file name": "BrokenReaderTest.java",
                    "file old path": "src/test/java/org/apache/commons/io/input/BrokenReaderTest.java",
                    "file new path": "src/test/java/org/apache/commons/io/input/BrokenReaderTest.java",
                    "full name": "src.test.java.org.apache.commons.io.input.BrokenReaderTest.testReadCharArray"
                },
                {
                    "function name": "testMark",
                    "function params": [],
                    "file name": "BrokenReaderTest.java",
                    "file old path": "src/test/java/org/apache/commons/io/input/BrokenReaderTest.java",
                    "file new path": "src/test/java/org/apache/commons/io/input/BrokenReaderTest.java",
                    "full name": "src.test.java.org.apache.commons.io.input.BrokenReaderTest.testMark"
                },
                {
                    "function name": "testClose",
                    "function params": [],
                    "file name": "BrokenReaderTest.java",
                    "file old path": "src/test/java/org/apache/commons/io/input/BrokenReaderTest.java",
                    "file new path": "src/test/java/org/apache/commons/io/input/BrokenReaderTest.java",
                    "full name": "src.test.java.org.apache.commons.io.input.BrokenReaderTest.testClose"
                },
                {
                    "function name": "testSkip",
                    "function params": [],
                    "file name": "BrokenReaderTest.java",
                    "file old path": "src/test/java/org/apache/commons/io/input/BrokenReaderTest.java",
                    "file new path": "src/test/java/org/apache/commons/io/input/BrokenReaderTest.java",
                    "full name": "src.test.java.org.apache.commons.io.input.BrokenReaderTest.testSkip"
                }
            ],
            "files that changed": [
                "src/test/java/org/apache/commons/io/input/BrokenReaderTest.java"
            ]
        },
        {
            "bug index": "53",
            "bug id": "IO-741",
            "hexsha": "de8899a8155e4e2f02639e46334369be00c398af",
            "fix_hash": "5a0096d9b8f25b271a6abe717f57693235272d7b",
            "description": "This is a regression from 2.6.0.\u00a0 We are using the following FileUtils utility function to list matching files under a directory:\r\n{noformat}\r\npublic static Collection<File> listFiles(File directory, String[] extensions, boolean recursive){noformat}\r\n\u00a0\r\n\r\nIn particular the call we are making is:\r\n\r\n\r\n{noformat}\r\nFileUtils.listFiles(extension, new String[]{\"jar\"}, false);{noformat}\r\nThis used to return all matching files in 2.6.0 when the directory was a symlink, but it no longer does. Breaking through the code in a debugger, I was able to manually add the FileVisitOptions.FOLLOW_LINKS option, but this is not specifiable from an external caller outside of commons-io.",
            "commit number version hash": 2079,
            "commit number": 2070,
            "function that changed": [
                {
                    "function name": "streamFiles",
                    "function params": [
                        "directory",
                        "recursive",
                        "extensions"
                    ],
                    "file name": "FileUtils.java",
                    "file old path": "src/main/java/org/apache/commons/io/FileUtils.java",
                    "file new path": "src/main/java/org/apache/commons/io/FileUtils.java",
                    "full name": "src.main.java.org.apache.commons.io.FileUtils.streamFiles"
                }
            ],
            "files that changed": [
                "src/main/java/org/apache/commons/io/FileUtils.java"
            ]
        },
        {
            "bug index": "54",
            "bug id": "IO-2",
            "hexsha": "742c51feeaf75542ab9db6782ad3d2ad506fb871",
            "fix_hash": "d6ca8197ce8a3c7b5947ca4ac50a474995d66d76",
            "description": "Hi,\n\n(sorry to assign it to the wrong component, but I cannot choose for IO)\n\nwhen I try to concat 2 paths with \"\\\" as path separator instead of \"/\", an\nexception is thrown. I'll upload a patch for this as well as a junit test.\n\ne.g.: FilenameUtils.catPath(\"C:\\\\temp\\\\\", \"test\") throws an exception ...\n\nMaarten",
            "commit number version hash": 443,
            "commit number": 2068,
            "function that changed": [
                {
                    "function name": "SymbolicLinkFileFilter",
                    "function params": [],
                    "file name": "SymbolicLinkFileFilter.java",
                    "file old path": null,
                    "file new path": "src/main/java/org/apache/commons/io/filefilter/SymbolicLinkFileFilter.java",
                    "full name": "src.main.java.org.apache.commons.io.filefilter.SymbolicLinkFileFilter.SymbolicLinkFileFilter"
                },
                {
                    "function name": "accept",
                    "function params": [
                        "file",
                        "attributes"
                    ],
                    "file name": "SymbolicLinkFileFilter.java",
                    "file old path": null,
                    "file new path": "src/main/java/org/apache/commons/io/filefilter/SymbolicLinkFileFilter.java",
                    "full name": "src.main.java.org.apache.commons.io.filefilter.SymbolicLinkFileFilter.accept"
                },
                {
                    "function name": "accept",
                    "function params": [
                        "file"
                    ],
                    "file name": "SymbolicLinkFileFilter.java",
                    "file old path": null,
                    "file new path": "src/main/java/org/apache/commons/io/filefilter/SymbolicLinkFileFilter.java",
                    "full name": "src.main.java.org.apache.commons.io.filefilter.SymbolicLinkFileFilter.accept"
                },
                {
                    "function name": "testSymbolicLinkFileFilter",
                    "function params": [],
                    "file name": "SymbolicLinkFileFilterTest.java",
                    "file old path": null,
                    "file new path": "src/test/java/org/apache/commons/io/filefilter/SymbolicLinkFileFilterTest.java",
                    "full name": "src.test.java.org.apache.commons.io.filefilter.SymbolicLinkFileFilterTest.testSymbolicLinkFileFilter"
                }
            ],
            "files that changed": []
        },
        {
            "bug index": "55",
            "bug id": "IO-724",
            "hexsha": "de8899a8155e4e2f02639e46334369be00c398af",
            "fix_hash": "5c1a230684e583d8058807caf9265c5cfa821080",
            "description": "FileUtils.deleteDirectory javadoc claims:\r\n{code:java}\r\n@throws IllegalArgumentException if {@code directory} does not exist or is not a directory{code}\r\nbut the first two lines of the code are:\r\n{code:java}\r\nObjects.requireNonNull(directory, \"directory\");\r\nif (!directory.exists()) {\r\n    return;\r\n}{code}\r\n\u00a0",
            "commit number version hash": 2079,
            "commit number": 2066,
            "function that changed": [],
            "files that changed": [
                "src/main/java/org/apache/commons/io/FileUtils.java"
            ]
        },
        {
            "bug index": "56",
            "bug id": "IO-243",
            "hexsha": "01afc9d7d01e802ee3a0d91ff47c75041cff0cfe",
            "fix_hash": "498cd03984bd0cd191a38ecfc03c46520df83f6b",
            "description": "The method readBoolean in SwappedDataInputStream returns true when the byte is zero, false otherwise. In accordance with the contract in java.io.DataInput, true should indicate a non-zero byte. SwappedDataInputStream is for reading Little Endian formats, it should not change the boolean value of individual bytes.",
            "commit number version hash": 717,
            "commit number": 2065,
            "function that changed": [
                {
                    "function name": "copy",
                    "function params": [
                        "input",
                        "output"
                    ],
                    "file name": "CopyUtils.java",
                    "file old path": "src/main/java/org/apache/commons/io/CopyUtils.java",
                    "file new path": "src/main/java/org/apache/commons/io/CopyUtils.java",
                    "full name": "src.main.java.org.apache.commons.io.CopyUtils.copy"
                },
                {
                    "function name": "copy",
                    "function params": [
                        "input",
                        "output"
                    ],
                    "file name": "CopyUtils.java",
                    "file old path": "src/main/java/org/apache/commons/io/CopyUtils.java",
                    "file new path": "src/main/java/org/apache/commons/io/CopyUtils.java",
                    "full name": "src.main.java.org.apache.commons.io.CopyUtils.copy"
                },
                {
                    "function name": "if",
                    "function params": [
                        "contains"
                    ],
                    "file name": "FileSystemUtils.java",
                    "file old path": "src/main/java/org/apache/commons/io/FileSystemUtils.java",
                    "file new path": "src/main/java/org/apache/commons/io/FileSystemUtils.java",
                    "full name": "src.main.java.org.apache.commons.io.FileSystemUtils.if"
                },
                {
                    "function name": "copyDirectory",
                    "function params": [
                        "srcDir",
                        "destDir",
                        "fileFilter",
                        "preserveFileDate",
                        "copyOptions"
                    ],
                    "file name": "FileUtils.java",
                    "file old path": "src/main/java/org/apache/commons/io/FileUtils.java",
                    "file new path": "src/main/java/org/apache/commons/io/FileUtils.java",
                    "full name": "src.main.java.org.apache.commons.io.FileUtils.copyDirectory"
                },
                {
                    "function name": "moveDirectoryToDirectory",
                    "function params": [
                        "src",
                        "destDir",
                        "createDestDir"
                    ],
                    "file name": "FileUtils.java",
                    "file old path": "src/main/java/org/apache/commons/io/FileUtils.java",
                    "file new path": "src/main/java/org/apache/commons/io/FileUtils.java",
                    "full name": "src.main.java.org.apache.commons.io.FileUtils.moveDirectoryToDirectory"
                },
                {
                    "function name": "isIPv6Address",
                    "function params": [
                        "inet6Address"
                    ],
                    "file name": "FilenameUtils.java",
                    "file old path": "src/main/java/org/apache/commons/io/FilenameUtils.java",
                    "file new path": "src/main/java/org/apache/commons/io/FilenameUtils.java",
                    "full name": "src.main.java.org.apache.commons.io.FilenameUtils.isIPv6Address"
                },
                {
                    "function name": "RelativeSortedPaths",
                    "function params": [
                        "dir1",
                        "dir2",
                        "maxDepth",
                        "linkOptions",
                        "fileVisitOptions"
                    ],
                    "file name": "PathUtils.java",
                    "file old path": "src/main/java/org/apache/commons/io/file/PathUtils.java",
                    "file new path": "src/main/java/org/apache/commons/io/file/PathUtils.java",
                    "full name": "src.main.java.org.apache.commons.io.file.PathUtils.RelativeSortedPaths"
                },
                {
                    "function name": "noop",
                    "function params": [],
                    "file name": "IOConsumer.java",
                    "file old path": "src/main/java/org/apache/commons/io/function/IOConsumer.java",
                    "file new path": "src/main/java/org/apache/commons/io/function/IOConsumer.java",
                    "full name": "src.main.java.org.apache.commons.io.function.IOConsumer.noop"
                },
                {
                    "function name": "getDirectBufferClass",
                    "function params": [],
                    "file name": "BufferedFileChannelInputStream.java",
                    "file old path": "src/main/java/org/apache/commons/io/input/BufferedFileChannelInputStream.java",
                    "file new path": "src/main/java/org/apache/commons/io/input/BufferedFileChannelInputStream.java",
                    "full name": "src.main.java.org.apache.commons.io.input.BufferedFileChannelInputStream.getDirectBufferClass"
                },
                {
                    "function name": "testTouch",
                    "function params": [],
                    "file name": "FileUtilsTestCase.java",
                    "file old path": "src/test/java/org/apache/commons/io/FileUtilsTestCase.java",
                    "file new path": "src/test/java/org/apache/commons/io/FileUtilsTestCase.java",
                    "full name": "src.test.java.org.apache.commons.io.FileUtilsTestCase.testTouch"
                }
            ],
            "files that changed": [
                "src/main/java/org/apache/commons/io/CopyUtils.java",
                "src/main/java/org/apache/commons/io/FileSystemUtils.java",
                "src/main/java/org/apache/commons/io/FileUtils.java",
                "src/main/java/org/apache/commons/io/FilenameUtils.java",
                "src/main/java/org/apache/commons/io/file/PathUtils.java",
                "src/main/java/org/apache/commons/io/function/IOConsumer.java",
                "src/main/java/org/apache/commons/io/input/BufferedFileChannelInputStream.java",
                "src/main/java/org/apache/commons/io/output/ThresholdingOutputStream.java",
                "src/test/java/org/apache/commons/io/ByteOrderMarkTestCase.java",
                "src/test/java/org/apache/commons/io/FileUtilsTestCase.java"
            ]
        },
        {
            "bug index": "57",
            "bug id": "IO-585",
            "hexsha": "498cd03984bd0cd191a38ecfc03c46520df83f6b",
            "fix_hash": "47f2593789aa72701afce199c60b70eec58c4a91",
            "description": "FilenameUtils#normalizeNoEndSeparator states in the javadoc that :\r\n \"A double slash will be merged to a single slash (but UNC names are handled).\"\r\n\r\nIt has been observed that if a double backslash occurs after the colon in a windows filepath, then the\u00a0returned path\u00a0still contains this double backslash. For example:\r\n{code:java}\r\nC:\\\\Program Files\\\\ExampleDirectory  -->  C:\\\\Program Files\\ExampleDirectory\u00a0{code}\r\nWhile the\u00a0expectation is that we should be returning ' C:\\Program Files\\ExampleDirectory '\r\n\r\n\u00a0",
            "commit number version hash": 2065,
            "commit number": 2064,
            "function that changed": [
                {
                    "function name": "doNormalize",
                    "function params": [
                        "fileName",
                        "separator",
                        "keepSeparator"
                    ],
                    "file name": "FilenameUtils.java",
                    "file old path": "src/main/java/org/apache/commons/io/FilenameUtils.java",
                    "file new path": "src/main/java/org/apache/commons/io/FilenameUtils.java",
                    "full name": "src.main.java.org.apache.commons.io.FilenameUtils.doNormalize"
                },
                {
                    "function name": "testNormalizeNoEndSeparator",
                    "function params": [],
                    "file name": "FilenameUtilsTestCase.java",
                    "file old path": "src/test/java/org/apache/commons/io/FilenameUtilsTestCase.java",
                    "file new path": "src/test/java/org/apache/commons/io/FilenameUtilsTestCase.java",
                    "full name": "src.test.java.org.apache.commons.io.FilenameUtilsTestCase.testNormalizeNoEndSeparator"
                }
            ],
            "files that changed": [
                "src/main/java/org/apache/commons/io/FilenameUtils.java",
                "src/test/java/org/apache/commons/io/FilenameUtilsTestCase.java"
            ]
        },
        {
            "bug index": "58",
            "bug id": "IO-733",
            "hexsha": "498cd03984bd0cd191a38ecfc03c46520df83f6b",
            "fix_hash": "91bd06a73ce3b404b58948e011b3fcff342b8ca3",
            "description": "I had a filename search where I looked for patterns that would not be picked up by surefire but had similar naming. \r\n\r\nIt is with an \"and\", \"no\", and a \"regex\" filter similar to\r\n{code:java}\r\nIOFileFilter fileFilter = FileFilterUtils.and(//\r\n            FileFilterUtils.notFileFilter(includeFileFilter), //\r\n            new RegexFileFilter(\".*Test.*\\\\.java\")); {code}\r\n\r\nI created a test project to reproduce the issue\r\n[https://github.com/sellersj/apache-commons-io-issue]\r\n\r\nI tested back to version 2.2 and it was the same to 2.8.0. The new behaviour happens with 2.9.0",
            "commit number version hash": 2065,
            "commit number": 2061,
            "function that changed": [
                {
                    "function name": "RegexFileFilter",
                    "function params": [
                        "pattern"
                    ],
                    "file name": "RegexFileFilter.java",
                    "file old path": "src/main/java/org/apache/commons/io/filefilter/RegexFileFilter.java",
                    "file new path": "src/main/java/org/apache/commons/io/filefilter/RegexFileFilter.java",
                    "full name": "src.main.java.org.apache.commons.io.filefilter.RegexFileFilter.RegexFileFilter"
                },
                {
                    "function name": "RegexFileFilter",
                    "function params": [
                        "pattern",
                        "pathToString"
                    ],
                    "file name": "RegexFileFilter.java",
                    "file old path": "src/main/java/org/apache/commons/io/filefilter/RegexFileFilter.java",
                    "file new path": "src/main/java/org/apache/commons/io/filefilter/RegexFileFilter.java",
                    "full name": "src.main.java.org.apache.commons.io.filefilter.RegexFileFilter.RegexFileFilter"
                },
                {
                    "function name": "accept",
                    "function params": [
                        "path",
                        "attributes"
                    ],
                    "file name": "RegexFileFilter.java",
                    "file old path": "src/main/java/org/apache/commons/io/filefilter/RegexFileFilter.java",
                    "file new path": "src/main/java/org/apache/commons/io/filefilter/RegexFileFilter.java",
                    "full name": "src.main.java.org.apache.commons.io.filefilter.RegexFileFilter.accept"
                },
                {
                    "function name": "testRegexFileNameOnly",
                    "function params": [],
                    "file name": "RegexFileFilterTestCase.java",
                    "file old path": "src/test/java/org/apache/commons/io/filefilter/RegexFileFilterTestCase.java",
                    "file new path": "src/test/java/org/apache/commons/io/filefilter/RegexFileFilterTestCase.java",
                    "full name": "src.test.java.org.apache.commons.io.filefilter.RegexFileFilterTestCase.testRegexFileNameOnly"
                }
            ],
            "files that changed": [
                "src/main/java/org/apache/commons/io/filefilter/RegexFileFilter.java",
                "src/test/java/org/apache/commons/io/filefilter/RegexFileFilterTestCase.java"
            ]
        },
        {
            "bug index": "59",
            "bug id": "IO-429",
            "hexsha": "94be75e45726aeab75681b0b8570ecc4826a2384",
            "fix_hash": "7e0d317ac61427e6004372622df4014c1e602487",
            "description": "There are many places involved in the problem, and a good fix might be problematic performance wise.\n\nFor example:\nIOUtils.toByteArray(InputStream input) invoked with a Stream which feeds more than Integer.MAX_VALUE bytes will either crash with NegativeArraySizeException or maybe worse overflow in such a way that it returns fine (but only with partial data)\n\nThe ByteArrayOutputStream will happily consume the full stream but \"int count\" will overflow. At some point then toByteArray is invoked which will do like new byte[count].\n\nmaybe \"needNewBuffer\" can throw the IllegalArgumentException, as it gets  the count and could check for the overflow.",
            "commit number version hash": 2059,
            "commit number": 2047,
            "function that changed": [
                {
                    "function name": "toByteArray",
                    "function params": [
                        "inputStream"
                    ],
                    "file name": "IOUtils.java",
                    "file old path": "src/main/java/org/apache/commons/io/IOUtils.java",
                    "file new path": "src/main/java/org/apache/commons/io/IOUtils.java",
                    "full name": "src.main.java.org.apache.commons.io.IOUtils.toByteArray"
                },
                {
                    "function name": "testToByteArray_InputStream_LongerThanIntegerMaxValue",
                    "function params": [],
                    "file name": "IOUtilsTestCase.java",
                    "file old path": "src/test/java/org/apache/commons/io/IOUtilsTestCase.java",
                    "file new path": "src/test/java/org/apache/commons/io/IOUtilsTestCase.java",
                    "full name": "src.test.java.org.apache.commons.io.IOUtilsTestCase.testToByteArray_InputStream_LongerThanIntegerMaxValue"
                }
            ],
            "files that changed": [
                "src/main/java/org/apache/commons/io/IOUtils.java",
                "src/test/java/org/apache/commons/io/IOUtilsTestCase.java"
            ]
        },
        {
            "bug index": "60",
            "bug id": "IO-227",
            "hexsha": "651332ef291809e8271cec74fdd6691cfb725f9f",
            "fix_hash": "8a681ea4bc91b3f58e44042d4e6eb23d996e0d76",
            "description": "A custom reported a problem, wherein our product was catching and logging many IOExceptions.  Upon examining the logs I see:\n\njava.io.IOException: Attempted read on closed stream.\n\tat org.apache.commons.httpclient.AutoCloseInputStream.isReadAllowed(AutoCloseInputStream.java:183)\n\tat org.apache.commons.httpclient.AutoCloseInputStream.read(AutoCloseInputStream.java:107)\n\tat java.io.FilterInputStream.read(FilterInputStream.java:116)\n\tat com.acme.DocPusher$BigEmptyDocumentFilterInputStream.read(DocPusher.java:679)\n\tat com.acme.CompressedFilterInputStream.fillbuff(CompressedFilterInputStream.java:96)\n\tat com.acme.CompressedFilterInputStream.read(CompressedFilterInputStream.java:67)\n\tat com.acme.Base64FilterInputStream.fillbuff(Base64FilterInputStream.java:138)\n\tat com.acme.Base64FilterInputStream.read(Base64FilterInputStream.java:115)\n\tat java.io.FilterInputStream.read(FilterInputStream.java:116)\n\tat com.acme.DocPusher$AlternateContentFilterInputStream.read(DocPusher.java:609)\n        ...\n\nAs you can see, this is a pipeline consisting of multiple FilterInputStream segments that process data flowing through the pipeline.  The source of the data is in InputStream provided by a third party plug-in component.  In our customer's situation, that InputStream is a AutoCloseInputStream returned by a Sharepoint API call.\n\nWhen I saw the \"Attempted read on closed stream.\", I was incredulous; \"Reading from a closed stream - that's a rookie mistake.\"  However, when examining the JavaDoc for AutoCloseInputStream, I read:  [emphasis mine]\n\"Proxy stream that closes and discards the underlying stream *as soon as the end of input has been reached* or when the stream is explicitly closed.\"\n\n\n",
            "commit number version hash": 499,
            "commit number": 2029,
            "function that changed": [
                {
                    "function name": "AbstractCharacterFilterReader",
                    "function params": [
                        "reader"
                    ],
                    "file name": "AbstractCharacterFilterReader.java",
                    "file old path": "src/main/java/org/apache/commons/io/input/AbstractCharacterFilterReader.java",
                    "file new path": "src/main/java/org/apache/commons/io/input/AbstractCharacterFilterReader.java",
                    "full name": "src.main.java.org.apache.commons.io.input.AbstractCharacterFilterReader.AbstractCharacterFilterReader"
                },
                {
                    "function name": "AbstractCharacterFilterReader",
                    "function params": [
                        "reader",
                        "skip"
                    ],
                    "file name": "AbstractCharacterFilterReader.java",
                    "file old path": "src/main/java/org/apache/commons/io/input/AbstractCharacterFilterReader.java",
                    "file new path": "src/main/java/org/apache/commons/io/input/AbstractCharacterFilterReader.java",
                    "full name": "src.main.java.org.apache.commons.io.input.AbstractCharacterFilterReader.AbstractCharacterFilterReader"
                },
                {
                    "function name": "filter",
                    "function params": [
                        "ch"
                    ],
                    "file name": "AbstractCharacterFilterReader.java",
                    "file old path": "src/main/java/org/apache/commons/io/input/AbstractCharacterFilterReader.java",
                    "file new path": "src/main/java/org/apache/commons/io/input/AbstractCharacterFilterReader.java",
                    "full name": "src.main.java.org.apache.commons.io.input.AbstractCharacterFilterReader.filter"
                },
                {
                    "function name": "CharacterFilterReader",
                    "function params": [
                        "reader",
                        "skip"
                    ],
                    "file name": "CharacterFilterReader.java",
                    "file old path": "src/main/java/org/apache/commons/io/input/CharacterFilterReader.java",
                    "file new path": "src/main/java/org/apache/commons/io/input/CharacterFilterReader.java",
                    "full name": "src.main.java.org.apache.commons.io.input.CharacterFilterReader.CharacterFilterReader"
                },
                {
                    "function name": "CharacterFilterReader",
                    "function params": [
                        "reader",
                        "skip"
                    ],
                    "file name": "CharacterFilterReader.java",
                    "file old path": "src/main/java/org/apache/commons/io/input/CharacterFilterReader.java",
                    "file new path": "src/main/java/org/apache/commons/io/input/CharacterFilterReader.java",
                    "full name": "src.main.java.org.apache.commons.io.input.CharacterFilterReader.CharacterFilterReader"
                },
                {
                    "function name": "CharacterSetFilterReader",
                    "function params": [
                        "reader",
                        "skip"
                    ],
                    "file name": "CharacterSetFilterReader.java",
                    "file old path": "src/main/java/org/apache/commons/io/input/CharacterSetFilterReader.java",
                    "file new path": "src/main/java/org/apache/commons/io/input/CharacterSetFilterReader.java",
                    "full name": "src.main.java.org.apache.commons.io.input.CharacterSetFilterReader.CharacterSetFilterReader"
                },
                {
                    "function name": "testInputSize0FilterAll",
                    "function params": [],
                    "file name": "CharacterFilterReaderIntPredicateTest.java",
                    "file old path": null,
                    "file new path": "src/test/java/org/apache/commons/io/input/CharacterFilterReaderIntPredicateTest.java",
                    "full name": "src.test.java.org.apache.commons.io.input.CharacterFilterReaderIntPredicateTest.testInputSize0FilterAll"
                },
                {
                    "function name": "testReadIntoBufferFilterWhitespace",
                    "function params": [],
                    "file name": "CharacterFilterReaderIntPredicateTest.java",
                    "file old path": null,
                    "file new path": "src/test/java/org/apache/commons/io/input/CharacterFilterReaderIntPredicateTest.java",
                    "full name": "src.test.java.org.apache.commons.io.input.CharacterFilterReaderIntPredicateTest.testReadIntoBufferFilterWhitespace"
                },
                {
                    "function name": "testInputSize2FilterAll",
                    "function params": [],
                    "file name": "CharacterFilterReaderIntPredicateTest.java",
                    "file old path": null,
                    "file new path": "src/test/java/org/apache/commons/io/input/CharacterFilterReaderIntPredicateTest.java",
                    "full name": "src.test.java.org.apache.commons.io.input.CharacterFilterReaderIntPredicateTest.testInputSize2FilterAll"
                },
                {
                    "function name": "testReadUsingReader",
                    "function params": [],
                    "file name": "CharacterFilterReaderIntPredicateTest.java",
                    "file old path": null,
                    "file new path": "src/test/java/org/apache/commons/io/input/CharacterFilterReaderIntPredicateTest.java",
                    "full name": "src.test.java.org.apache.commons.io.input.CharacterFilterReaderIntPredicateTest.testReadUsingReader"
                },
                {
                    "function name": "testInputSize1FilterAll",
                    "function params": [],
                    "file name": "CharacterFilterReaderIntPredicateTest.java",
                    "file old path": null,
                    "file new path": "src/test/java/org/apache/commons/io/input/CharacterFilterReaderIntPredicateTest.java",
                    "full name": "src.test.java.org.apache.commons.io.input.CharacterFilterReaderIntPredicateTest.testInputSize1FilterAll"
                },
                {
                    "function name": "testInputSize2FilterLast",
                    "function params": [],
                    "file name": "CharacterFilterReaderIntPredicateTest.java",
                    "file old path": null,
                    "file new path": "src/test/java/org/apache/commons/io/input/CharacterFilterReaderIntPredicateTest.java",
                    "full name": "src.test.java.org.apache.commons.io.input.CharacterFilterReaderIntPredicateTest.testInputSize2FilterLast"
                },
                {
                    "function name": "testInputSize5FilterWhitespace",
                    "function params": [],
                    "file name": "CharacterFilterReaderIntPredicateTest.java",
                    "file old path": null,
                    "file new path": "src/test/java/org/apache/commons/io/input/CharacterFilterReaderIntPredicateTest.java",
                    "full name": "src.test.java.org.apache.commons.io.input.CharacterFilterReaderIntPredicateTest.testInputSize5FilterWhitespace"
                },
                {
                    "function name": "testReadIntoBuffer",
                    "function params": [],
                    "file name": "CharacterFilterReaderIntPredicateTest.java",
                    "file old path": null,
                    "file new path": "src/test/java/org/apache/commons/io/input/CharacterFilterReaderIntPredicateTest.java",
                    "full name": "src.test.java.org.apache.commons.io.input.CharacterFilterReaderIntPredicateTest.testReadIntoBuffer"
                },
                {
                    "function name": "testReadUsingReaderFilterWhitespace",
                    "function params": [],
                    "file name": "CharacterFilterReaderIntPredicateTest.java",
                    "file old path": null,
                    "file new path": "src/test/java/org/apache/commons/io/input/CharacterFilterReaderIntPredicateTest.java",
                    "full name": "src.test.java.org.apache.commons.io.input.CharacterFilterReaderIntPredicateTest.testReadUsingReaderFilterWhitespace"
                },
                {
                    "function name": "testInputSize2FilterFirst",
                    "function params": [],
                    "file name": "CharacterFilterReaderIntPredicateTest.java",
                    "file old path": null,
                    "file new path": "src/test/java/org/apache/commons/io/input/CharacterFilterReaderIntPredicateTest.java",
                    "full name": "src.test.java.org.apache.commons.io.input.CharacterFilterReaderIntPredicateTest.testInputSize2FilterFirst"
                }
            ],
            "files that changed": [
                "src/main/java/org/apache/commons/io/input/AbstractCharacterFilterReader.java",
                "src/main/java/org/apache/commons/io/input/CharacterFilterReader.java",
                "src/main/java/org/apache/commons/io/input/CharacterSetFilterReader.java"
            ]
        },
        {
            "bug index": "61",
            "bug id": "IO-556",
            "hexsha": "401d17349e7ec52d8fa866c35efd24103f332c29",
            "fix_hash": "fe7543eee5cd4b2f9e78aa44c31031b68eba204d",
            "description": "I sent this report in an Email to security@apache.org on 2017-10-16. I did not receive any kind of response yet (2017-11-18 as of writing). I am now posting it publicly, to open the issue up for discussion, and hopefully initiate a fix.\r\n\r\nThis report is not about a vulnerability in {{commons-io}} per se, but an unexpected behavior that has a high chance of introducing a path traversal vulnerability when using {{FilenameUtils.normalize}} to sanitize user input. The traversal is limited to a single out-of-bounds-stepping \"/../\" segment.\r\nh5. Reproduction\r\n{code:java}\r\nFilenameUtils.normalize(\"//../foo\");        // returns \"//../foo\" or \"\\\\\\\\..\\\\foo\", based on java.io.File.separatorChar\r\nFilenameUtils.normalize(\"\\\\\\\\..\\\\foo\");        // returns \"//../foo\" or \"\\\\\\\\..\\\\foo\", based on java.io.File.separatorChar\r\n{code}\r\nh5. Possible impact (example)\r\n\r\nConsider a web-application that uses {{FilenameUtils.normalize}} to sanitize a user-supplied file name string, and then appends the sanitized value to a configured upload directory to store the uploaded content in:\r\n{code:java}\r\nString fileName = \"//../foo\";            // actually user-supplied (e.g. from multipart-POST request)\r\nfileName = FilenameUtils.normalize(fileName);    // still holds the same value (\"//../foo\")   \r\n           \r\nif (fileName != null) {\r\n    File newFile = new File(\"/base/uploads\", fileName);    // java.io.File treats double forward slashes as singles\r\n                                // newFile now points to \"/base/uploads//../foo\"\r\n    newFile = newFile.getCanonicalFile();            // newFile now points to \"/base/foo\", which should be inaccessible\r\n\r\n    // Write contents to newFile...\r\n} else {\r\n    // Assume malicious activity, handle error\r\n}\r\n{code}\r\nh5. Relevant code locations\r\n * {{org.apache.commons.io.FilenameUtils#getPrefixLength}} : everything between a leading \"//\" and the next \"/\" is treated as a UNC server name, and ignored in all further validation logic of {{org.apache.commons.io.FilenameUtils#doNormalize}} .\r\n\r\nh5. Discussion\r\n\r\nOne might argue that the given example is a misuse of the {{FilenameUtils.normalize}} method, and that everyone using it should expect absolute paths, full UNC paths, etc. to be returned by the method.\r\n Furthermore, the vulnerability can only occur due to the lax behavior of {{java.io.File}} .\r\n\r\nOn the other hand, I believe that the JavaDoc of {{FilenameUtils.normalize}} suggests to most readers, that this method is exactly what is needed to sanitize file names:\r\n{noformat}\r\n//-----------------------------------------------------------------------\r\n    /**\r\n     * Normalizes a path, removing double and single dot path steps,\r\n     * and removing any final directory separator.\r\n     * <p>\r\n     * This method normalizes a path to a standard format.\r\n     * The input may contain separators in either Unix or Windows format.\r\n     * The output will contain separators in the format of the system.\r\n     * <p>\r\n     * A trailing slash will be removed.\r\n     * A double slash will be merged to a single slash (but UNC names are handled).\r\n     * A single dot path segment will be removed.\r\n     * A double dot will cause that path segment and the one before to be removed.\r\n     * If the double dot has no parent path segment to work with, {@code null}\r\n     * is returned.\r\n     * <p>\r\n     * The output will be the same on both Unix and Windows except\r\n     * for the separator character.\r\n     * <pre>\r\n     * /foo//               --&gt;   /foo\r\n     * /foo/./              --&gt;   /foo\r\n     * /foo/../bar          --&gt;   /bar\r\n     * /foo/../bar/         --&gt;   /bar\r\n     * /foo/../bar/../baz   --&gt;   /baz\r\n     * //foo//./bar         --&gt;   /foo/bar\r\n     * /../                 --&gt;   null\r\n     * ../foo               --&gt;   null\r\n     * foo/bar/..           --&gt;   foo\r\n     * foo/../../bar        --&gt;   null\r\n     * foo/../bar           --&gt;   bar\r\n     * //server/foo/../bar  --&gt;   //server/bar\r\n     * //server/../bar      --&gt;   null\r\n     * C:\\foo\\..\\bar        --&gt;   C:\\bar\r\n     * C:\\..\\bar            --&gt;   null\r\n     * ~/foo/../bar/        --&gt;   ~/bar\r\n     * ~/../bar             --&gt;   null\r\n     * </pre>\r\n     * (Note the file separator returned will be correct for Windows/Unix)\r\n     *\r\n     * @param filename  the filename to normalize, null returns null\r\n     * @return the normalized filename, or null if invalid. Null bytes inside string will be removed\r\n     */\r\n{noformat}\r\nI have done a quick survey of the usages of the method in public GitHub repositories. I have found numerous projects that suffer from the limited path traversal vulnerability that is described here because of this very issue. This includes Webservers, Web-Frameworks, Archive-Extraction-Software, and others.\r\n\r\nPreventing path traversal attacks is not trivial, and many people turn to libraries like {{commons-io}} to avoid making mistakes when implementing parsing logic on their own. They trust that {{FilenameUtils}} will provide them with the most complete, and suitable sanitation logic for file names.\r\n In addition, \"..\" is not a valid UNC host name according to [https://msdn.microsoft.com/de-de/library/gg465305.aspx] , so prohibiting it shouldn't result in any major problems.",
            "commit number version hash": 1624,
            "commit number": 2027,
            "function that changed": [
                {
                    "function name": "testNormalize",
                    "function params": [],
                    "file name": "FilenameUtilsTestCase.java",
                    "file old path": "src/test/java/org/apache/commons/io/FilenameUtilsTestCase.java",
                    "file new path": "src/test/java/org/apache/commons/io/FilenameUtilsTestCase.java",
                    "full name": "src.test.java.org.apache.commons.io.FilenameUtilsTestCase.testNormalize"
                }
            ],
            "files that changed": [
                "src/test/java/org/apache/commons/io/FilenameUtilsTestCase.java"
            ]
        },
        {
            "bug index": "62",
            "bug id": "IO-718",
            "hexsha": "94be75e45726aeab75681b0b8570ecc4826a2384",
            "fix_hash": "ea7ccc5ce9a089b75d512c7c511473bd27be2a79",
            "description": "When calling {{FileUtils.checksumCRC32}} from multiple threads (in order to improve throughput when calculating CRC's for a large folder), the code is not thread-safe, resulting in incorrect CRC output.\r\n\r\nThe following simple test demonstrates the issue:\r\n{code:java}\r\n@Test\r\npublic void should() throws ExecutionException, InterruptedException {\r\n  File testFile = new File(\"C:\\\\Temp\\\\large-file.txt\");\r\n  // ScheduledExecutorService scheduler = Executors.newScheduledThreadPool(1);\r\n  ScheduledExecutorService scheduler = Executors.newScheduledThreadPool(5);\r\n  List<Future<Long>> futures = new ArrayList<>();\r\n  for (int i = 0; i < 20; i++) {\r\n    futures.add(scheduler.submit(() -> FileUtils.checksumCRC32(testFile)));\r\n  }\r\n  List<Long> crcs = new ArrayList<>();\r\n  for (Future<Long> future : futures) {\r\n    crcs.add(future.get());\r\n  }\r\n  Assertions.assertThat(crcs).allMatch(c -> crcs.get(0).equals(c));\r\n} {code}\r\nIn the above code, with a thread-pool size of 1, all calculated CRC's for the file are the same.\u00a0 With a thread-pool size of more, the CRC's differ.\r\n\r\nThe issue appears to be related to the use of a common {{SKIP_BYTE_BUFFER}} in {{IOUtils.consume}}.\u00a0 The multiple threads all read into the same buffer as the data is being \"discarded\".\u00a0 However, {{FileUtils.checksum}} uses a {{CheckedInputStream}} to calculate the CRC, which uses the value read into the shared buffer.\u00a0 With multiple threads writing to that buffer the CRC mechanism breaks down.",
            "commit number version hash": 2059,
            "commit number": 2017,
            "function that changed": [
                {
                    "function name": "copy",
                    "function params": [
                        "input",
                        "output"
                    ],
                    "file name": "CopyUtils.java",
                    "file old path": "src/main/java/org/apache/commons/io/CopyUtils.java",
                    "file new path": "src/main/java/org/apache/commons/io/CopyUtils.java",
                    "full name": "src.main.java.org.apache.commons.io.CopyUtils.copy"
                },
                {
                    "function name": "getByteArray",
                    "function params": [],
                    "file name": "IOUtils.java",
                    "file old path": "src/main/java/org/apache/commons/io/IOUtils.java",
                    "file new path": "src/main/java/org/apache/commons/io/IOUtils.java",
                    "full name": "src.main.java.org.apache.commons.io.IOUtils.getByteArray"
                },
                {
                    "function name": "copyLarge",
                    "function params": [
                        "input",
                        "output",
                        "inputOffset",
                        "length"
                    ],
                    "file name": "IOUtils.java",
                    "file old path": "src/main/java/org/apache/commons/io/IOUtils.java",
                    "file new path": "src/main/java/org/apache/commons/io/IOUtils.java",
                    "full name": "src.main.java.org.apache.commons.io.IOUtils.copyLarge"
                },
                {
                    "function name": "getCharArray",
                    "function params": [],
                    "file name": "IOUtils.java",
                    "file old path": "src/main/java/org/apache/commons/io/IOUtils.java",
                    "file new path": "src/main/java/org/apache/commons/io/IOUtils.java",
                    "full name": "src.main.java.org.apache.commons.io.IOUtils.getCharArray"
                },
                {
                    "function name": "skip",
                    "function params": [
                        "reader",
                        "toSkip"
                    ],
                    "file name": "IOUtils.java",
                    "file old path": "src/main/java/org/apache/commons/io/IOUtils.java",
                    "file new path": "src/main/java/org/apache/commons/io/IOUtils.java",
                    "full name": "src.main.java.org.apache.commons.io.IOUtils.skip"
                },
                {
                    "function name": "skip",
                    "function params": [
                        "input",
                        "toSkip"
                    ],
                    "file name": "IOUtils.java",
                    "file old path": "src/main/java/org/apache/commons/io/IOUtils.java",
                    "file new path": "src/main/java/org/apache/commons/io/IOUtils.java",
                    "full name": "src.main.java.org.apache.commons.io.IOUtils.skip"
                },
                {
                    "function name": "consume",
                    "function params": [
                        "input"
                    ],
                    "file name": "IOUtils.java",
                    "file old path": "src/main/java/org/apache/commons/io/IOUtils.java",
                    "file new path": "src/main/java/org/apache/commons/io/IOUtils.java",
                    "full name": "src.main.java.org.apache.commons.io.IOUtils.consume"
                },
                {
                    "function name": "skip",
                    "function params": [
                        "input",
                        "toSkip"
                    ],
                    "file name": "IOUtils.java",
                    "file old path": "src/main/java/org/apache/commons/io/IOUtils.java",
                    "file new path": "src/main/java/org/apache/commons/io/IOUtils.java",
                    "full name": "src.main.java.org.apache.commons.io.IOUtils.skip"
                },
                {
                    "function name": "copyLarge",
                    "function params": [
                        "reader",
                        "writer"
                    ],
                    "file name": "IOUtils.java",
                    "file old path": "src/main/java/org/apache/commons/io/IOUtils.java",
                    "file new path": "src/main/java/org/apache/commons/io/IOUtils.java",
                    "full name": "src.main.java.org.apache.commons.io.IOUtils.copyLarge"
                },
                {
                    "function name": "charArray",
                    "function params": [
                        "size"
                    ],
                    "file name": "IOUtils.java",
                    "file old path": "src/main/java/org/apache/commons/io/IOUtils.java",
                    "file new path": "src/main/java/org/apache/commons/io/IOUtils.java",
                    "full name": "src.main.java.org.apache.commons.io.IOUtils.charArray"
                },
                {
                    "function name": "contentEquals",
                    "function params": [
                        "input1",
                        "input2"
                    ],
                    "file name": "IOUtils.java",
                    "file old path": "src/main/java/org/apache/commons/io/IOUtils.java",
                    "file new path": "src/main/java/org/apache/commons/io/IOUtils.java",
                    "full name": "src.main.java.org.apache.commons.io.IOUtils.contentEquals"
                },
                {
                    "function name": "contentEquals",
                    "function params": [
                        "input1",
                        "input2"
                    ],
                    "file name": "IOUtils.java",
                    "file old path": "src/main/java/org/apache/commons/io/IOUtils.java",
                    "file new path": "src/main/java/org/apache/commons/io/IOUtils.java",
                    "full name": "src.main.java.org.apache.commons.io.IOUtils.contentEquals"
                },
                {
                    "function name": "charArray",
                    "function params": [],
                    "file name": "IOUtils.java",
                    "file old path": "src/main/java/org/apache/commons/io/IOUtils.java",
                    "file new path": "src/main/java/org/apache/commons/io/IOUtils.java",
                    "full name": "src.main.java.org.apache.commons.io.IOUtils.charArray"
                },
                {
                    "function name": "copyLarge",
                    "function params": [
                        "reader",
                        "writer",
                        "inputOffset",
                        "length"
                    ],
                    "file name": "IOUtils.java",
                    "file old path": "src/main/java/org/apache/commons/io/IOUtils.java",
                    "file new path": "src/main/java/org/apache/commons/io/IOUtils.java",
                    "full name": "src.main.java.org.apache.commons.io.IOUtils.copyLarge"
                }
            ],
            "files that changed": [
                "src/main/java/org/apache/commons/io/CopyUtils.java",
                "src/main/java/org/apache/commons/io/IOUtils.java"
            ]
        },
        {
            "bug index": "63",
            "bug id": "IO-201",
            "hexsha": "01afc9d7d01e802ee3a0d91ff47c75041cff0cfe",
            "fix_hash": "9f0074839bac413e75c943b2619d9a07b45bad1a",
            "description": "CountingInputStream is only partially synchronized.\n\nThe count is not synchronized when it is updated in read operations, so is not guaranteed to be published correctly\n\nThe synchronization could be removed without loss of functionality.\n\nNot sure it makes sense to share a stream between threads anyway, as the underlying stream is unlikely to be thread-safe.\n\nIf only one thread reads the stream, then the count field could be made volatile.\nThis would allow other threads to read the count safely.\n",
            "commit number version hash": 717,
            "commit number": 2013,
            "function that changed": [
                {
                    "function name": "wildcardMatch",
                    "function params": [
                        "fileName",
                        "wildcardMatcher",
                        "caseSensitivity"
                    ],
                    "file name": "FilenameUtils.java",
                    "file old path": "src/main/java/org/apache/commons/io/FilenameUtils.java",
                    "file new path": "src/main/java/org/apache/commons/io/FilenameUtils.java",
                    "full name": "src.main.java.org.apache.commons.io.FilenameUtils.wildcardMatch"
                },
                {
                    "function name": "XmlStreamReader",
                    "function params": [
                        "conn",
                        "defaultEncoding"
                    ],
                    "file name": "XmlStreamReader.java",
                    "file old path": "src/main/java/org/apache/commons/io/input/XmlStreamReader.java",
                    "file new path": "src/main/java/org/apache/commons/io/input/XmlStreamReader.java",
                    "full name": "src.main.java.org.apache.commons.io.input.XmlStreamReader.XmlStreamReader"
                },
                {
                    "function name": "checkIbmJdkWithBrokenUTF16",
                    "function params": [
                        "charset"
                    ],
                    "file name": "WriterOutputStream.java",
                    "file old path": "src/main/java/org/apache/commons/io/output/WriterOutputStream.java",
                    "file new path": "src/main/java/org/apache/commons/io/output/WriterOutputStream.java",
                    "full name": "src.main.java.org.apache.commons.io.output.WriterOutputStream.checkIbmJdkWithBrokenUTF16"
                },
                {
                    "function name": "testGetFreeSpace_String",
                    "function params": [],
                    "file name": "FileSystemUtilsTestCase.java",
                    "file old path": "src/test/java/org/apache/commons/io/FileSystemUtilsTestCase.java",
                    "file new path": "src/test/java/org/apache/commons/io/FileSystemUtilsTestCase.java",
                    "full name": "src.test.java.org.apache.commons.io.FileSystemUtilsTestCase.testGetFreeSpace_String"
                },
                {
                    "function name": "testFileDoesNotExistBug",
                    "function params": [],
                    "file name": "FileUtilsDirectoryContainsTestCase.java",
                    "file old path": "src/test/java/org/apache/commons/io/FileUtilsDirectoryContainsTestCase.java",
                    "file new path": "src/test/java/org/apache/commons/io/FileUtilsDirectoryContainsTestCase.java",
                    "full name": "src.test.java.org.apache.commons.io.FileUtilsDirectoryContainsTestCase.testFileDoesNotExistBug"
                },
                {
                    "function name": "testRead",
                    "function params": [],
                    "file name": "NullInputStreamTest.java",
                    "file old path": "src/test/java/org/apache/commons/io/input/NullInputStreamTest.java",
                    "file new path": "src/test/java/org/apache/commons/io/input/NullInputStreamTest.java",
                    "full name": "src.test.java.org.apache.commons.io.input.NullInputStreamTest.testRead"
                },
                {
                    "function name": "getXmlStream",
                    "function params": [
                        "bomType",
                        "xmlType",
                        "streamEnc",
                        "prologEnc"
                    ],
                    "file name": "XmlStreamReaderTest.java",
                    "file old path": "src/test/java/org/apache/commons/io/input/XmlStreamReaderTest.java",
                    "file new path": "src/test/java/org/apache/commons/io/input/XmlStreamReaderTest.java",
                    "full name": "src.test.java.org.apache.commons.io.input.XmlStreamReaderTest.getXmlStream"
                },
                {
                    "function name": "testCalculateRawEncodingAdditionalUTF32",
                    "function params": [],
                    "file name": "XmlStreamReaderUtilitiesTest.java",
                    "file old path": "src/test/java/org/apache/commons/io/input/XmlStreamReaderUtilitiesTest.java",
                    "file new path": "src/test/java/org/apache/commons/io/input/XmlStreamReaderUtilitiesTest.java",
                    "full name": "src.test.java.org.apache.commons.io.input.XmlStreamReaderUtilitiesTest.testCalculateRawEncodingAdditionalUTF32"
                },
                {
                    "function name": "testCalculateRawEncodingAdditionalUTF16",
                    "function params": [],
                    "file name": "XmlStreamReaderUtilitiesTest.java",
                    "file old path": "src/test/java/org/apache/commons/io/input/XmlStreamReaderUtilitiesTest.java",
                    "file new path": "src/test/java/org/apache/commons/io/input/XmlStreamReaderUtilitiesTest.java",
                    "full name": "src.test.java.org.apache.commons.io.input.XmlStreamReaderUtilitiesTest.testCalculateRawEncodingAdditionalUTF16"
                },
                {
                    "function name": "testWriteToLarge",
                    "function params": [
                        "initialBufferSize"
                    ],
                    "file name": "DeferredFileOutputStreamTest.java",
                    "file old path": "src/test/java/org/apache/commons/io/output/DeferredFileOutputStreamTest.java",
                    "file new path": "src/test/java/org/apache/commons/io/output/DeferredFileOutputStreamTest.java",
                    "full name": "src.test.java.org.apache.commons.io.output.DeferredFileOutputStreamTest.testWriteToLarge"
                }
            ],
            "files that changed": [
                "src/main/java/org/apache/commons/io/FileUtils.java",
                "src/main/java/org/apache/commons/io/FilenameUtils.java",
                "src/main/java/org/apache/commons/io/input/XmlStreamReader.java",
                "src/main/java/org/apache/commons/io/output/AbstractByteArrayOutputStream.java",
                "src/main/java/org/apache/commons/io/output/WriterOutputStream.java",
                "src/test/java/org/apache/commons/io/FileSystemUtilsTestCase.java",
                "src/test/java/org/apache/commons/io/FileUtilsDirectoryContainsTestCase.java",
                "src/test/java/org/apache/commons/io/input/BufferedFileChannelInputStreamTest.java",
                "src/test/java/org/apache/commons/io/input/NullInputStreamTest.java",
                "src/test/java/org/apache/commons/io/input/XmlStreamReaderTest.java",
                "src/test/java/org/apache/commons/io/input/XmlStreamReaderUtilitiesTest.java",
                "src/test/java/org/apache/commons/io/input/buffer/CircularBufferInputStreamTest.java",
                "src/test/java/org/apache/commons/io/output/DeferredFileOutputStreamTest.java"
            ]
        },
        {
            "bug index": "65",
            "bug id": "IO-705",
            "hexsha": "94be75e45726aeab75681b0b8570ecc4826a2384",
            "fix_hash": "b4d80a81558da0dc75cc2a93e629686b88c738cb",
            "description": "The code of\u00a0MarkShieldInputStream#reset is as follows:\r\n{code:java}\r\n public void reset() throws IOException {\r\n        throw new IOException(\"mark/reset not supported\");\r\n    }\r\n{code}\r\nThe message indicates that it is better to throw\u00a0UnsupportedOperationException. Indeed, otehr classes throw that exception in similar contexts:\r\n\r\nWindowsLineEndingInputStream#mark\r\n{code:java}\r\n public synchronized void mark(final int readlimit) {\r\n        throw new UnsupportedOperationException(\"Mark not supported\");\r\n    }\r\n{code}\r\nNullReader#reset:\r\n{code:java}\r\npublic synchronized void reset() throws IOException {\r\n        if (!markSupported) {\r\n            throw new UnsupportedOperationException(\"Mark not supported\");\r\n        }\r\n        if (mark < 0) {\r\n            throw new IOException(\"No position has been marked\");\r\n        }\r\n        if (position > mark + readlimit) {\r\n            throw new IOException(\"Marked position [\" + mark +\r\n                    \"] is no longer valid - passed the read limit [\" +\r\n                    readlimit + \"]\");\r\n        }\r\n        position = mark;\r\n        eof = false;\r\n    }{code}",
            "commit number version hash": 2059,
            "commit number": 1949,
            "function that changed": [
                {
                    "function name": "reset",
                    "function params": [],
                    "file name": "MarkShieldInputStream.java",
                    "file old path": "src/main/java/org/apache/commons/io/input/MarkShieldInputStream.java",
                    "file new path": "src/main/java/org/apache/commons/io/input/MarkShieldInputStream.java",
                    "full name": "src.main.java.org.apache.commons.io.input.MarkShieldInputStream.reset"
                },
                {
                    "function name": "resetThrowsExceptionWhenUnderylingSupports",
                    "function params": [],
                    "file name": "MarkShieldInputStreamTest.java",
                    "file old path": "src/test/java/org/apache/commons/io/input/MarkShieldInputStreamTest.java",
                    "file new path": "src/test/java/org/apache/commons/io/input/MarkShieldInputStreamTest.java",
                    "full name": "src.test.java.org.apache.commons.io.input.MarkShieldInputStreamTest.resetThrowsExceptionWhenUnderylingSupports"
                },
                {
                    "function name": "resetThrowsExceptionWhenUnderylingDoesNotSupport",
                    "function params": [],
                    "file name": "MarkShieldInputStreamTest.java",
                    "file old path": "src/test/java/org/apache/commons/io/input/MarkShieldInputStreamTest.java",
                    "file new path": "src/test/java/org/apache/commons/io/input/MarkShieldInputStreamTest.java",
                    "full name": "src.test.java.org.apache.commons.io.input.MarkShieldInputStreamTest.resetThrowsExceptionWhenUnderylingDoesNotSupport"
                }
            ],
            "files that changed": [
                "src/main/java/org/apache/commons/io/input/MarkShieldInputStream.java",
                "src/main/java/org/apache/commons/io/input/UnsupportedOperationExceptions.java",
                "src/test/java/org/apache/commons/io/input/MarkShieldInputStreamTest.java"
            ]
        },
        {
            "bug index": "66",
            "bug id": "IO-190",
            "hexsha": "01afc9d7d01e802ee3a0d91ff47c75041cff0cfe",
            "fix_hash": "9009ede38b2d30be7b9cebdaca47649a1ead5528",
            "description": "When using FileUtils.copyDirectory to copy directories with subdirectories, the source will overwrite all files that exist in the destination directory, but not the subdirectories themselves. The files inside the subdirectories will be overwritten. The only difference that I've noticed thus far is that this preserves the old file dates of the subdirectories rather than using the dates from the source or the current date, if preserveFileDate is set to 'false.'",
            "commit number version hash": 717,
            "commit number": 1947,
            "function that changed": [
                {
                    "function name": "doCopyDirectory",
                    "function params": [
                        "srcDir",
                        "destDir",
                        "fileFilter",
                        "exclusionList",
                        "preserveDirDate",
                        "copyOptions"
                    ],
                    "file name": "FileUtils.java",
                    "file old path": "src/main/java/org/apache/commons/io/FileUtils.java",
                    "file new path": "src/main/java/org/apache/commons/io/FileUtils.java",
                    "full name": "src.main.java.org.apache.commons.io.FileUtils.doCopyDirectory"
                },
                {
                    "function name": "listFiles",
                    "function params": [
                        "directory",
                        "fileFilter"
                    ],
                    "file name": "FileUtils.java",
                    "file old path": "src/main/java/org/apache/commons/io/FileUtils.java",
                    "file new path": "src/main/java/org/apache/commons/io/FileUtils.java",
                    "full name": "src.main.java.org.apache.commons.io.FileUtils.listFiles"
                },
                {
                    "function name": "listFiles",
                    "function params": [
                        "directory",
                        "fileFilter"
                    ],
                    "file name": "FileUtils.java",
                    "file old path": "src/main/java/org/apache/commons/io/FileUtils.java",
                    "file new path": "src/main/java/org/apache/commons/io/FileUtils.java",
                    "full name": "src.main.java.org.apache.commons.io.FileUtils.listFiles"
                },
                {
                    "function name": "requireDirectoryExists",
                    "function params": [
                        "directory",
                        "name"
                    ],
                    "file name": "FileUtils.java",
                    "file old path": "src/main/java/org/apache/commons/io/FileUtils.java",
                    "file new path": "src/main/java/org/apache/commons/io/FileUtils.java",
                    "full name": "src.main.java.org.apache.commons.io.FileUtils.requireDirectoryExists"
                },
                {
                    "function name": "requireFile",
                    "function params": [
                        "file",
                        "name"
                    ],
                    "file name": "FileUtils.java",
                    "file old path": "src/main/java/org/apache/commons/io/FileUtils.java",
                    "file new path": "src/main/java/org/apache/commons/io/FileUtils.java",
                    "full name": "src.main.java.org.apache.commons.io.FileUtils.requireFile"
                },
                {
                    "function name": "requireExistsChecked",
                    "function params": [
                        "file",
                        "fileParamName"
                    ],
                    "file name": "FileUtils.java",
                    "file old path": "src/main/java/org/apache/commons/io/FileUtils.java",
                    "file new path": "src/main/java/org/apache/commons/io/FileUtils.java",
                    "full name": "src.main.java.org.apache.commons.io.FileUtils.requireExistsChecked"
                },
                {
                    "function name": "doCopyDirectory",
                    "function params": [
                        "srcDir",
                        "destDir",
                        "fileFilter",
                        "exclusionList",
                        "preserveDirDate",
                        "copyOptions"
                    ],
                    "file name": "FileUtils.java",
                    "file old path": "src/main/java/org/apache/commons/io/FileUtils.java",
                    "file new path": "src/main/java/org/apache/commons/io/FileUtils.java",
                    "full name": "src.main.java.org.apache.commons.io.FileUtils.doCopyDirectory"
                },
                {
                    "function name": "requireDirectory",
                    "function params": [
                        "directory",
                        "name"
                    ],
                    "file name": "FileUtils.java",
                    "file old path": "src/main/java/org/apache/commons/io/FileUtils.java",
                    "file new path": "src/main/java/org/apache/commons/io/FileUtils.java",
                    "full name": "src.main.java.org.apache.commons.io.FileUtils.requireDirectory"
                },
                {
                    "function name": "requireFileIfExists",
                    "function params": [
                        "file",
                        "name"
                    ],
                    "file name": "FileUtils.java",
                    "file old path": "src/main/java/org/apache/commons/io/FileUtils.java",
                    "file new path": "src/main/java/org/apache/commons/io/FileUtils.java",
                    "full name": "src.main.java.org.apache.commons.io.FileUtils.requireFileIfExists"
                },
                {
                    "function name": "requireExists",
                    "function params": [
                        "file",
                        "fileParamName"
                    ],
                    "file name": "FileUtils.java",
                    "file old path": "src/main/java/org/apache/commons/io/FileUtils.java",
                    "file new path": "src/main/java/org/apache/commons/io/FileUtils.java",
                    "full name": "src.main.java.org.apache.commons.io.FileUtils.requireExists"
                },
                {
                    "function name": "requireAbsent",
                    "function params": [
                        "file",
                        "name"
                    ],
                    "file name": "FileUtils.java",
                    "file old path": "src/main/java/org/apache/commons/io/FileUtils.java",
                    "file new path": "src/main/java/org/apache/commons/io/FileUtils.java",
                    "full name": "src.main.java.org.apache.commons.io.FileUtils.requireAbsent"
                },
                {
                    "function name": "requireAbsent",
                    "function params": [
                        "file",
                        "name"
                    ],
                    "file name": "FileUtils.java",
                    "file old path": "src/main/java/org/apache/commons/io/FileUtils.java",
                    "file new path": "src/main/java/org/apache/commons/io/FileUtils.java",
                    "full name": "src.main.java.org.apache.commons.io.FileUtils.requireAbsent"
                },
                {
                    "function name": "requireExistsChecked",
                    "function params": [
                        "file",
                        "fileParamName"
                    ],
                    "file name": "FileUtils.java",
                    "file old path": "src/main/java/org/apache/commons/io/FileUtils.java",
                    "file new path": "src/main/java/org/apache/commons/io/FileUtils.java",
                    "full name": "src.main.java.org.apache.commons.io.FileUtils.requireExistsChecked"
                },
                {
                    "function name": "requireDirectoryExists",
                    "function params": [
                        "directory",
                        "name"
                    ],
                    "file name": "FileUtils.java",
                    "file old path": "src/main/java/org/apache/commons/io/FileUtils.java",
                    "file new path": "src/main/java/org/apache/commons/io/FileUtils.java",
                    "full name": "src.main.java.org.apache.commons.io.FileUtils.requireDirectoryExists"
                },
                {
                    "function name": "requireFileIfExists",
                    "function params": [
                        "file",
                        "name"
                    ],
                    "file name": "FileUtils.java",
                    "file old path": "src/main/java/org/apache/commons/io/FileUtils.java",
                    "file new path": "src/main/java/org/apache/commons/io/FileUtils.java",
                    "full name": "src.main.java.org.apache.commons.io.FileUtils.requireFileIfExists"
                },
                {
                    "function name": "requireExists",
                    "function params": [
                        "file",
                        "fileParamName"
                    ],
                    "file name": "FileUtils.java",
                    "file old path": "src/main/java/org/apache/commons/io/FileUtils.java",
                    "file new path": "src/main/java/org/apache/commons/io/FileUtils.java",
                    "full name": "src.main.java.org.apache.commons.io.FileUtils.requireExists"
                },
                {
                    "function name": "requireDirectoryIfExists",
                    "function params": [
                        "directory",
                        "name"
                    ],
                    "file name": "FileUtils.java",
                    "file old path": "src/main/java/org/apache/commons/io/FileUtils.java",
                    "file new path": "src/main/java/org/apache/commons/io/FileUtils.java",
                    "full name": "src.main.java.org.apache.commons.io.FileUtils.requireDirectoryIfExists"
                },
                {
                    "function name": "requireCanWrite",
                    "function params": [
                        "file",
                        "name"
                    ],
                    "file name": "FileUtils.java",
                    "file old path": "src/main/java/org/apache/commons/io/FileUtils.java",
                    "file new path": "src/main/java/org/apache/commons/io/FileUtils.java",
                    "full name": "src.main.java.org.apache.commons.io.FileUtils.requireCanWrite"
                },
                {
                    "function name": "requireDirectory",
                    "function params": [
                        "directory",
                        "name"
                    ],
                    "file name": "FileUtils.java",
                    "file old path": "src/main/java/org/apache/commons/io/FileUtils.java",
                    "file new path": "src/main/java/org/apache/commons/io/FileUtils.java",
                    "full name": "src.main.java.org.apache.commons.io.FileUtils.requireDirectory"
                },
                {
                    "function name": "requireFile",
                    "function params": [
                        "file",
                        "name"
                    ],
                    "file name": "FileUtils.java",
                    "file old path": "src/main/java/org/apache/commons/io/FileUtils.java",
                    "file new path": "src/main/java/org/apache/commons/io/FileUtils.java",
                    "full name": "src.main.java.org.apache.commons.io.FileUtils.requireFile"
                },
                {
                    "function name": "requireDirectoryIfExists",
                    "function params": [
                        "directory",
                        "name"
                    ],
                    "file name": "FileUtils.java",
                    "file old path": "src/main/java/org/apache/commons/io/FileUtils.java",
                    "file new path": "src/main/java/org/apache/commons/io/FileUtils.java",
                    "full name": "src.main.java.org.apache.commons.io.FileUtils.requireDirectoryIfExists"
                },
                {
                    "function name": "requireCanWrite",
                    "function params": [
                        "file",
                        "name"
                    ],
                    "file name": "FileUtils.java",
                    "file old path": "src/main/java/org/apache/commons/io/FileUtils.java",
                    "file new path": "src/main/java/org/apache/commons/io/FileUtils.java",
                    "full name": "src.main.java.org.apache.commons.io.FileUtils.requireCanWrite"
                },
                {
                    "function name": "visitFile",
                    "function params": [
                        "file",
                        "attrs"
                    ],
                    "file name": "DeletingPathVisitor.java",
                    "file old path": "src/main/java/org/apache/commons/io/file/DeletingPathVisitor.java",
                    "file new path": "src/main/java/org/apache/commons/io/file/DeletingPathVisitor.java",
                    "full name": "src.main.java.org.apache.commons.io.file.DeletingPathVisitor.visitFile"
                },
                {
                    "function name": "setReadOnly",
                    "function params": [
                        "path",
                        "readOnly",
                        "linkOptions"
                    ],
                    "file name": "PathUtils.java",
                    "file old path": "src/main/java/org/apache/commons/io/file/PathUtils.java",
                    "file new path": "src/main/java/org/apache/commons/io/file/PathUtils.java",
                    "full name": "src.main.java.org.apache.commons.io.file.PathUtils.setReadOnly"
                },
                {
                    "function name": "refill",
                    "function params": [],
                    "file name": "BufferedFileChannelInputStream.java",
                    "file old path": "src/main/java/org/apache/commons/io/input/BufferedFileChannelInputStream.java",
                    "file new path": "src/main/java/org/apache/commons/io/input/BufferedFileChannelInputStream.java",
                    "full name": "src.main.java.org.apache.commons.io.input.BufferedFileChannelInputStream.refill"
                },
                {
                    "function name": "write",
                    "function params": [
                        "b"
                    ],
                    "file name": "QueueOutputStream.java",
                    "file old path": "src/main/java/org/apache/commons/io/output/QueueOutputStream.java",
                    "file new path": "src/main/java/org/apache/commons/io/output/QueueOutputStream.java",
                    "full name": "src.main.java.org.apache.commons.io.output.QueueOutputStream.write"
                }
            ],
            "files that changed": [
                "src/main/java/org/apache/commons/io/FileCleaningTracker.java",
                "src/main/java/org/apache/commons/io/FileUtils.java",
                "src/main/java/org/apache/commons/io/LineIterator.java",
                "src/main/java/org/apache/commons/io/file/DeletingPathVisitor.java",
                "src/main/java/org/apache/commons/io/file/PathUtils.java",
                "src/main/java/org/apache/commons/io/input/BoundedInputStream.java",
                "src/main/java/org/apache/commons/io/input/BoundedReader.java",
                "src/main/java/org/apache/commons/io/input/BufferedFileChannelInputStream.java",
                "src/main/java/org/apache/commons/io/input/UnixLineEndingInputStream.java",
                "src/main/java/org/apache/commons/io/input/WindowsLineEndingInputStream.java",
                "src/main/java/org/apache/commons/io/monitor/FileAlterationMonitor.java",
                "src/main/java/org/apache/commons/io/output/CountingOutputStream.java",
                "src/main/java/org/apache/commons/io/output/DeferredFileOutputStream.java",
                "src/main/java/org/apache/commons/io/output/QueueOutputStream.java",
                "src/test/java/org/apache/commons/io/IOUtilsTestCase.java",
                "src/test/java/org/apache/commons/io/input/ObservableInputStreamTest.java",
                "src/test/java/org/apache/commons/io/input/TailerTest.java",
                "src/test/java/org/apache/commons/io/input/compatibility/XmlStreamReader.java"
            ]
        },
        {
            "bug index": "67",
            "bug id": "IO-690",
            "hexsha": "94be75e45726aeab75681b0b8570ecc4826a2384",
            "fix_hash": "5f9239e0452a1b5803e584419732661848ddc469",
            "description": "The javadoc for IOUtils.toByteArray still says\r\n\r\n\r\n\r\n{{Throws:}}\r\n{{ NullPointerException - if the input is null}}\r\n\r\n\u00a0\r\n\r\nbut in 2.8.0 it returns an empty byte[] instead.",
            "commit number version hash": 2059,
            "commit number": 1936,
            "function that changed": [
                {
                    "function name": "copyToFile",
                    "function params": [
                        "source",
                        "destination"
                    ],
                    "file name": "FileUtils.java",
                    "file old path": "src/main/java/org/apache/commons/io/FileUtils.java",
                    "file new path": "src/main/java/org/apache/commons/io/FileUtils.java",
                    "full name": "src.main.java.org.apache.commons.io.FileUtils.copyToFile"
                },
                {
                    "function name": "copyToFile",
                    "function params": [
                        "inputStream",
                        "file"
                    ],
                    "file name": "FileUtils.java",
                    "file old path": "src/main/java/org/apache/commons/io/FileUtils.java",
                    "file new path": "src/main/java/org/apache/commons/io/FileUtils.java",
                    "full name": "src.main.java.org.apache.commons.io.FileUtils.copyToFile"
                },
                {
                    "function name": "copyLarge",
                    "function params": [
                        "inputStream",
                        "outputStream",
                        "buffer"
                    ],
                    "file name": "IOUtils.java",
                    "file old path": "src/main/java/org/apache/commons/io/IOUtils.java",
                    "file new path": "src/main/java/org/apache/commons/io/IOUtils.java",
                    "full name": "src.main.java.org.apache.commons.io.IOUtils.copyLarge"
                },
                {
                    "function name": "testCopy_inputStreamToOutputStream_nullIn",
                    "function params": [],
                    "file name": "IOUtilsCopyTestCase.java",
                    "file old path": "src/test/java/org/apache/commons/io/IOUtilsCopyTestCase.java",
                    "file new path": "src/test/java/org/apache/commons/io/IOUtilsCopyTestCase.java",
                    "full name": "src.test.java.org.apache.commons.io.IOUtilsCopyTestCase.testCopy_inputStreamToOutputStream_nullIn"
                }
            ],
            "files that changed": [
                "src/main/java/org/apache/commons/io/FileUtils.java",
                "src/main/java/org/apache/commons/io/IOUtils.java",
                "src/test/java/org/apache/commons/io/IOUtilsCopyTestCase.java"
            ]
        },
        {
            "bug index": "68",
            "bug id": "IO-702",
            "hexsha": "94be75e45726aeab75681b0b8570ecc4826a2384",
            "fix_hash": "9eaab5c0a07e33cfe475fe6cbd1b5bbf77cca44d",
            "description": "The current implementation of FileUtils.forceDelete does not delete invalid links. Invalid links means one pointing to a non existing directory. This is _not related_ to the intended behaviour to _keep the destination_ of the link.\r\n\r\nThe FileUtils.cleanDirectory is based on forceDelete but does not check the result. FileUtils.cleanDirectory assumes \"no exception\" means \"directory is clean\".\r\n\r\nFileUtils.deleteDirectory fails with \"directory not empty\".\r\n\r\nTestcase result (will provide that)\r\n{code:java}\r\njava.nio.file.DirectoryNotEmptyException: /tmp/junit4962570063696933090/realParentDirC\r\n\tat java.base/sun.nio.fs.UnixFileSystemProvider.implDelete(UnixFileSystemProvider.java:246)\r\n\tat java.base/sun.nio.fs.AbstractFileSystemProvider.delete(AbstractFileSystemProvider.java:105)\r\n\tat java.base/java.nio.file.Files.delete(Files.java:1146)\r\n\tat org.apache.commons.io.FileUtils.delete(FileUtils.java:1173)\r\n\tat org.apache.commons.io.FileUtils.deleteDirectory(FileUtils.java:1192)\r\n\tat org.apache.commons.io.FileUtilsDeleteDirectoryBaseTestCase.testDeleteInvalidLinks(FileUtilsDeleteDirectoryBaseTestCase.java:216)\r\n{code}",
            "commit number version hash": 2059,
            "commit number": 1930,
            "function that changed": [
                {
                    "function name": "DeletingPathVisitor",
                    "function params": [
                        "pathCounter",
                        "deleteOption",
                        "skip"
                    ],
                    "file name": "DeletingPathVisitor.java",
                    "file old path": "src/main/java/org/apache/commons/io/file/DeletingPathVisitor.java",
                    "file new path": "src/main/java/org/apache/commons/io/file/DeletingPathVisitor.java",
                    "full name": "src.main.java.org.apache.commons.io.file.DeletingPathVisitor.DeletingPathVisitor"
                },
                {
                    "function name": "testDeleteInvalidLinks",
                    "function params": [],
                    "file name": "FileUtilsDeleteDirectoryBaseTestCase.java",
                    "file old path": "src/test/java/org/apache/commons/io/FileUtilsDeleteDirectoryBaseTestCase.java",
                    "file new path": "src/test/java/org/apache/commons/io/FileUtilsDeleteDirectoryBaseTestCase.java",
                    "full name": "src.test.java.org.apache.commons.io.FileUtilsDeleteDirectoryBaseTestCase.testDeleteInvalidLinks"
                }
            ],
            "files that changed": [
                "src/main/java/org/apache/commons/io/file/DeletingPathVisitor.java",
                "src/test/java/org/apache/commons/io/FileUtilsDeleteDirectoryBaseTestCase.java"
            ]
        },
        {
            "bug index": "69",
            "bug id": "IO-702",
            "hexsha": "94be75e45726aeab75681b0b8570ecc4826a2384",
            "fix_hash": "b1a84b203fd73b591e4431ea7854caf592d2bd74",
            "description": "The current implementation of FileUtils.forceDelete does not delete invalid links. Invalid links means one pointing to a non existing directory. This is _not related_ to the intended behaviour to _keep the destination_ of the link.\r\n\r\nThe FileUtils.cleanDirectory is based on forceDelete but does not check the result. FileUtils.cleanDirectory assumes \"no exception\" means \"directory is clean\".\r\n\r\nFileUtils.deleteDirectory fails with \"directory not empty\".\r\n\r\nTestcase result (will provide that)\r\n{code:java}\r\njava.nio.file.DirectoryNotEmptyException: /tmp/junit4962570063696933090/realParentDirC\r\n\tat java.base/sun.nio.fs.UnixFileSystemProvider.implDelete(UnixFileSystemProvider.java:246)\r\n\tat java.base/sun.nio.fs.AbstractFileSystemProvider.delete(AbstractFileSystemProvider.java:105)\r\n\tat java.base/java.nio.file.Files.delete(Files.java:1146)\r\n\tat org.apache.commons.io.FileUtils.delete(FileUtils.java:1173)\r\n\tat org.apache.commons.io.FileUtils.deleteDirectory(FileUtils.java:1192)\r\n\tat org.apache.commons.io.FileUtilsDeleteDirectoryBaseTestCase.testDeleteInvalidLinks(FileUtilsDeleteDirectoryBaseTestCase.java:216)\r\n{code}",
            "commit number version hash": 2059,
            "commit number": 1929,
            "function that changed": [
                {
                    "function name": "visitFile",
                    "function params": [
                        "file",
                        "attrs"
                    ],
                    "file name": "DeletingPathVisitor.java",
                    "file old path": "src/main/java/org/apache/commons/io/file/DeletingPathVisitor.java",
                    "file new path": "src/main/java/org/apache/commons/io/file/DeletingPathVisitor.java",
                    "full name": "src.main.java.org.apache.commons.io.file.DeletingPathVisitor.visitFile"
                },
                {
                    "function name": "testDeleteInvalidLinks",
                    "function params": [],
                    "file name": "FileUtilsDeleteDirectoryBaseTestCase.java",
                    "file old path": "src/test/java/org/apache/commons/io/FileUtilsDeleteDirectoryBaseTestCase.java",
                    "file new path": "src/test/java/org/apache/commons/io/FileUtilsDeleteDirectoryBaseTestCase.java",
                    "full name": "src.test.java.org.apache.commons.io.FileUtilsDeleteDirectoryBaseTestCase.testDeleteInvalidLinks"
                }
            ],
            "files that changed": [
                "src/main/java/org/apache/commons/io/file/DeletingPathVisitor.java",
                "src/test/java/org/apache/commons/io/FileUtilsDeleteDirectoryBaseTestCase.java"
            ]
        },
        {
            "bug index": "70",
            "bug id": "IO-701",
            "hexsha": "94be75e45726aeab75681b0b8570ecc4826a2384",
            "fix_hash": "8588c9c162c12ce6ac2654f80d3bd3bdae8ae351",
            "description": "PathUtils.setReadOnly use a DosFileAttributeView first. If this fails with a Exception, a second try with PosixFileAttributeView will not be done.\r\n\r\nThe approach is to catch a IOException (java.nio.file.FileSystemException Operation not supported), add it to a exception list. Throw the exception list if not empty.\r\n\r\nPlease check the environment of this bug: integration tests are all run on Ubuntu. This occured on Fedora. (Maybe the difference is ext4 ?)\r\n\r\nExample stacktrace (Message is \"Operation not supported\")\r\n{code:java}\r\njava.nio.file.FileSystemException: /tmp/junit4674316189874192997/file1-test.txt: Die Operation wird nicht unterst\u00fctzt\r\n\tat java.base/sun.nio.fs.UnixException.translateToIOException(UnixException.java:100)\r\n\tat java.base/sun.nio.fs.UnixException.rethrowAsIOException(UnixException.java:111)\r\n\tat java.base/sun.nio.fs.UnixException.rethrowAsIOException(UnixException.java:116)\r\n\tat java.base/sun.nio.fs.LinuxDosFileAttributeView.updateDosAttribute(LinuxDosFileAttributeView.java:278)\r\n\tat java.base/sun.nio.fs.LinuxDosFileAttributeView.setReadOnly(LinuxDosFileAttributeView.java:191)\r\n\tat org.apache.commons.io.file.PathUtils.setReadOnly(PathUtils.java:876)\r\n\tat org.apache.commons.io.file.PathUtils.deleteFile(PathUtils.java:486)\r\n\tat org.apache.commons.io.file.PathUtils.delete(PathUtils.java:393)\r\n\tat org.apache.commons.io.FileUtils.forceDelete(FileUtils.java:1337)\r\n\tat org.apache.commons.io.FileUtils.cleanDirectory(FileUtils.java:303)\r\n\tat org.apache.commons.io.FileUtils.deleteDirectory(FileUtils.java:1189)\r\n\tat org.apache.commons.io.FileUtilsTestCase.setUp(FileUtilsTestCase.java:299)\r\n{code}",
            "commit number version hash": 2059,
            "commit number": 1922,
            "function that changed": [
                {
                    "function name": "setupSymlink",
                    "function params": [
                        "res",
                        "link"
                    ],
                    "file name": "FileUtilsDeleteDirectoryWindowsTestCase.java",
                    "file old path": "src/test/java/org/apache/commons/io/FileUtilsDeleteDirectoryWindowsTestCase.java",
                    "file new path": "src/test/java/org/apache/commons/io/FileUtilsDeleteDirectoryWindowsTestCase.java",
                    "full name": "src.test.java.org.apache.commons.io.FileUtilsDeleteDirectoryWindowsTestCase.setupSymlink"
                }
            ],
            "files that changed": [
                "src/test/java/org/apache/commons/io/FileUtilsDeleteDirectoryWindowsTestCase.java"
            ]
        },
        {
            "bug index": "71",
            "bug id": "IO-701",
            "hexsha": "94be75e45726aeab75681b0b8570ecc4826a2384",
            "fix_hash": "b0b891c75f83dd011f4ac872933c635422bf0b54",
            "description": "PathUtils.setReadOnly use a DosFileAttributeView first. If this fails with a Exception, a second try with PosixFileAttributeView will not be done.\r\n\r\nThe approach is to catch a IOException (java.nio.file.FileSystemException Operation not supported), add it to a exception list. Throw the exception list if not empty.\r\n\r\nPlease check the environment of this bug: integration tests are all run on Ubuntu. This occured on Fedora. (Maybe the difference is ext4 ?)\r\n\r\nExample stacktrace (Message is \"Operation not supported\")\r\n{code:java}\r\njava.nio.file.FileSystemException: /tmp/junit4674316189874192997/file1-test.txt: Die Operation wird nicht unterst\u00fctzt\r\n\tat java.base/sun.nio.fs.UnixException.translateToIOException(UnixException.java:100)\r\n\tat java.base/sun.nio.fs.UnixException.rethrowAsIOException(UnixException.java:111)\r\n\tat java.base/sun.nio.fs.UnixException.rethrowAsIOException(UnixException.java:116)\r\n\tat java.base/sun.nio.fs.LinuxDosFileAttributeView.updateDosAttribute(LinuxDosFileAttributeView.java:278)\r\n\tat java.base/sun.nio.fs.LinuxDosFileAttributeView.setReadOnly(LinuxDosFileAttributeView.java:191)\r\n\tat org.apache.commons.io.file.PathUtils.setReadOnly(PathUtils.java:876)\r\n\tat org.apache.commons.io.file.PathUtils.deleteFile(PathUtils.java:486)\r\n\tat org.apache.commons.io.file.PathUtils.delete(PathUtils.java:393)\r\n\tat org.apache.commons.io.FileUtils.forceDelete(FileUtils.java:1337)\r\n\tat org.apache.commons.io.FileUtils.cleanDirectory(FileUtils.java:303)\r\n\tat org.apache.commons.io.FileUtils.deleteDirectory(FileUtils.java:1189)\r\n\tat org.apache.commons.io.FileUtilsTestCase.setUp(FileUtilsTestCase.java:299)\r\n{code}",
            "commit number version hash": 2059,
            "commit number": 1921,
            "function that changed": [],
            "files that changed": [
                "src/test/java/org/apache/commons/io/FileUtilsDeleteDirectoryWindowsTestCase.java"
            ]
        },
        {
            "bug index": "72",
            "bug id": "IO-701",
            "hexsha": "94be75e45726aeab75681b0b8570ecc4826a2384",
            "fix_hash": "843b057bdc9b72150b3b61cd67833adacbffd32e",
            "description": "PathUtils.setReadOnly use a DosFileAttributeView first. If this fails with a Exception, a second try with PosixFileAttributeView will not be done.\r\n\r\nThe approach is to catch a IOException (java.nio.file.FileSystemException Operation not supported), add it to a exception list. Throw the exception list if not empty.\r\n\r\nPlease check the environment of this bug: integration tests are all run on Ubuntu. This occured on Fedora. (Maybe the difference is ext4 ?)\r\n\r\nExample stacktrace (Message is \"Operation not supported\")\r\n{code:java}\r\njava.nio.file.FileSystemException: /tmp/junit4674316189874192997/file1-test.txt: Die Operation wird nicht unterst\u00fctzt\r\n\tat java.base/sun.nio.fs.UnixException.translateToIOException(UnixException.java:100)\r\n\tat java.base/sun.nio.fs.UnixException.rethrowAsIOException(UnixException.java:111)\r\n\tat java.base/sun.nio.fs.UnixException.rethrowAsIOException(UnixException.java:116)\r\n\tat java.base/sun.nio.fs.LinuxDosFileAttributeView.updateDosAttribute(LinuxDosFileAttributeView.java:278)\r\n\tat java.base/sun.nio.fs.LinuxDosFileAttributeView.setReadOnly(LinuxDosFileAttributeView.java:191)\r\n\tat org.apache.commons.io.file.PathUtils.setReadOnly(PathUtils.java:876)\r\n\tat org.apache.commons.io.file.PathUtils.deleteFile(PathUtils.java:486)\r\n\tat org.apache.commons.io.file.PathUtils.delete(PathUtils.java:393)\r\n\tat org.apache.commons.io.FileUtils.forceDelete(FileUtils.java:1337)\r\n\tat org.apache.commons.io.FileUtils.cleanDirectory(FileUtils.java:303)\r\n\tat org.apache.commons.io.FileUtils.deleteDirectory(FileUtils.java:1189)\r\n\tat org.apache.commons.io.FileUtilsTestCase.setUp(FileUtilsTestCase.java:299)\r\n{code}",
            "commit number version hash": 2059,
            "commit number": 1920,
            "function that changed": [],
            "files that changed": []
        },
        {
            "bug index": "73",
            "bug id": "IO-701",
            "hexsha": "94be75e45726aeab75681b0b8570ecc4826a2384",
            "fix_hash": "186e999374f0ff249b37d75100f05b7c7acb14b7",
            "description": "PathUtils.setReadOnly use a DosFileAttributeView first. If this fails with a Exception, a second try with PosixFileAttributeView will not be done.\r\n\r\nThe approach is to catch a IOException (java.nio.file.FileSystemException Operation not supported), add it to a exception list. Throw the exception list if not empty.\r\n\r\nPlease check the environment of this bug: integration tests are all run on Ubuntu. This occured on Fedora. (Maybe the difference is ext4 ?)\r\n\r\nExample stacktrace (Message is \"Operation not supported\")\r\n{code:java}\r\njava.nio.file.FileSystemException: /tmp/junit4674316189874192997/file1-test.txt: Die Operation wird nicht unterst\u00fctzt\r\n\tat java.base/sun.nio.fs.UnixException.translateToIOException(UnixException.java:100)\r\n\tat java.base/sun.nio.fs.UnixException.rethrowAsIOException(UnixException.java:111)\r\n\tat java.base/sun.nio.fs.UnixException.rethrowAsIOException(UnixException.java:116)\r\n\tat java.base/sun.nio.fs.LinuxDosFileAttributeView.updateDosAttribute(LinuxDosFileAttributeView.java:278)\r\n\tat java.base/sun.nio.fs.LinuxDosFileAttributeView.setReadOnly(LinuxDosFileAttributeView.java:191)\r\n\tat org.apache.commons.io.file.PathUtils.setReadOnly(PathUtils.java:876)\r\n\tat org.apache.commons.io.file.PathUtils.deleteFile(PathUtils.java:486)\r\n\tat org.apache.commons.io.file.PathUtils.delete(PathUtils.java:393)\r\n\tat org.apache.commons.io.FileUtils.forceDelete(FileUtils.java:1337)\r\n\tat org.apache.commons.io.FileUtils.cleanDirectory(FileUtils.java:303)\r\n\tat org.apache.commons.io.FileUtils.deleteDirectory(FileUtils.java:1189)\r\n\tat org.apache.commons.io.FileUtilsTestCase.setUp(FileUtilsTestCase.java:299)\r\n{code}",
            "commit number version hash": 2059,
            "commit number": 1919,
            "function that changed": [
                {
                    "function name": "delete",
                    "function params": [
                        "file"
                    ],
                    "file name": "FileUtils.java",
                    "file old path": "src/main/java/org/apache/commons/io/FileUtils.java",
                    "file new path": "src/main/java/org/apache/commons/io/FileUtils.java",
                    "full name": "src.main.java.org.apache.commons.io.FileUtils.delete"
                },
                {
                    "function name": "setReadOnly",
                    "function params": [
                        "path",
                        "readOnly",
                        "linkOptions"
                    ],
                    "file name": "PathUtils.java",
                    "file old path": "src/main/java/org/apache/commons/io/file/PathUtils.java",
                    "file new path": "src/main/java/org/apache/commons/io/file/PathUtils.java",
                    "full name": "src.main.java.org.apache.commons.io.file.PathUtils.setReadOnly"
                },
                {
                    "function name": "testDeleteDirWithASymlinkDir",
                    "function params": [],
                    "file name": "FileUtilsDeleteDirectoryBaseTestCase.java",
                    "file old path": "src/test/java/org/apache/commons/io/FileUtilsDeleteDirectoryBaseTestCase.java",
                    "file new path": "src/test/java/org/apache/commons/io/FileUtilsDeleteDirectoryBaseTestCase.java",
                    "full name": "src.test.java.org.apache.commons.io.FileUtilsDeleteDirectoryBaseTestCase.testDeleteDirWithASymlinkDir"
                },
                {
                    "function name": "testDeleteDirWithSymlinkFile",
                    "function params": [],
                    "file name": "FileUtilsDeleteDirectoryBaseTestCase.java",
                    "file old path": "src/test/java/org/apache/commons/io/FileUtilsDeleteDirectoryBaseTestCase.java",
                    "file new path": "src/test/java/org/apache/commons/io/FileUtilsDeleteDirectoryBaseTestCase.java",
                    "full name": "src.test.java.org.apache.commons.io.FileUtilsDeleteDirectoryBaseTestCase.testDeleteDirWithSymlinkFile"
                },
                {
                    "function name": "testDeletesRegular",
                    "function params": [],
                    "file name": "FileUtilsDeleteDirectoryBaseTestCase.java",
                    "file old path": "src/test/java/org/apache/commons/io/FileUtilsDeleteDirectoryBaseTestCase.java",
                    "file new path": "src/test/java/org/apache/commons/io/FileUtilsDeleteDirectoryBaseTestCase.java",
                    "full name": "src.test.java.org.apache.commons.io.FileUtilsDeleteDirectoryBaseTestCase.testDeletesRegular"
                },
                {
                    "function name": "testDeleteDirWithASymlinkDir2",
                    "function params": [],
                    "file name": "FileUtilsDeleteDirectoryBaseTestCase.java",
                    "file old path": "src/test/java/org/apache/commons/io/FileUtilsDeleteDirectoryBaseTestCase.java",
                    "file new path": "src/test/java/org/apache/commons/io/FileUtilsDeleteDirectoryBaseTestCase.java",
                    "full name": "src.test.java.org.apache.commons.io.FileUtilsDeleteDirectoryBaseTestCase.testDeleteDirWithASymlinkDir2"
                },
                {
                    "function name": "testDeletesNested",
                    "function params": [],
                    "file name": "FileUtilsDeleteDirectoryBaseTestCase.java",
                    "file old path": "src/test/java/org/apache/commons/io/FileUtilsDeleteDirectoryBaseTestCase.java",
                    "file new path": "src/test/java/org/apache/commons/io/FileUtilsDeleteDirectoryBaseTestCase.java",
                    "full name": "src.test.java.org.apache.commons.io.FileUtilsDeleteDirectoryBaseTestCase.testDeletesNested"
                },
                {
                    "function name": "setupSymlink",
                    "function params": [
                        "res",
                        "link"
                    ],
                    "file name": "FileUtilsDeleteDirectoryLinuxTestCase.java",
                    "file old path": "src/test/java/org/apache/commons/io/FileUtilsDeleteDirectoryLinuxTestCase.java",
                    "file new path": "src/test/java/org/apache/commons/io/FileUtilsDeleteDirectoryLinuxTestCase.java",
                    "full name": "src.test.java.org.apache.commons.io.FileUtilsDeleteDirectoryLinuxTestCase.setupSymlink"
                },
                {
                    "function name": "testThrowsOnNullList",
                    "function params": [],
                    "file name": "FileUtilsDeleteDirectoryLinuxTestCase.java",
                    "file old path": "src/test/java/org/apache/commons/io/FileUtilsDeleteDirectoryLinuxTestCase.java",
                    "file new path": "src/test/java/org/apache/commons/io/FileUtilsDeleteDirectoryLinuxTestCase.java",
                    "full name": "src.test.java.org.apache.commons.io.FileUtilsDeleteDirectoryLinuxTestCase.testThrowsOnNullList"
                },
                {
                    "function name": "setupSymlink",
                    "function params": [
                        "res",
                        "link"
                    ],
                    "file name": "FileUtilsDeleteDirectoryLinuxTestCase.java",
                    "file old path": "src/test/java/org/apache/commons/io/FileUtilsDeleteDirectoryLinuxTestCase.java",
                    "file new path": "src/test/java/org/apache/commons/io/FileUtilsDeleteDirectoryLinuxTestCase.java",
                    "full name": "src.test.java.org.apache.commons.io.FileUtilsDeleteDirectoryLinuxTestCase.setupSymlink"
                },
                {
                    "function name": "chmod",
                    "function params": [
                        "file",
                        "mode",
                        "recurse"
                    ],
                    "file name": "FileUtilsDeleteDirectoryLinuxTestCase.java",
                    "file old path": "src/test/java/org/apache/commons/io/FileUtilsDeleteDirectoryLinuxTestCase.java",
                    "file new path": "src/test/java/org/apache/commons/io/FileUtilsDeleteDirectoryLinuxTestCase.java",
                    "full name": "src.test.java.org.apache.commons.io.FileUtilsDeleteDirectoryLinuxTestCase.chmod"
                },
                {
                    "function name": "setupSymlink",
                    "function params": [
                        "res",
                        "link"
                    ],
                    "file name": "FileUtilsDeleteDirectoryWinTestCase.java",
                    "file old path": "src/test/java/org/apache/commons/io/FileUtilsDeleteDirectoryWinTestCase.java",
                    "file new path": "src/test/java/org/apache/commons/io/FileUtilsDeleteDirectoryWinTestCase.java",
                    "full name": "src.test.java.org.apache.commons.io.FileUtilsDeleteDirectoryWinTestCase.setupSymlink"
                },
                {
                    "function name": "setupSymlink",
                    "function params": [
                        "res",
                        "link"
                    ],
                    "file name": "FileUtilsDeleteDirectoryWinTestCase.java",
                    "file old path": "src/test/java/org/apache/commons/io/FileUtilsDeleteDirectoryWinTestCase.java",
                    "file new path": "src/test/java/org/apache/commons/io/FileUtilsDeleteDirectoryWinTestCase.java",
                    "full name": "src.test.java.org.apache.commons.io.FileUtilsDeleteDirectoryWinTestCase.setupSymlink"
                }
            ],
            "files that changed": [
                "src/main/java/org/apache/commons/io/FileUtils.java",
                "src/main/java/org/apache/commons/io/file/PathUtils.java",
                "src/test/java/org/apache/commons/io/FileUtilsDeleteDirectoryBaseTestCase.java",
                "src/test/java/org/apache/commons/io/FileUtilsDeleteDirectoryLinuxTestCase.java",
                "src/test/java/org/apache/commons/io/FileUtilsDeleteDirectoryWinTestCase.java"
            ]
        },
        {
            "bug index": "74",
            "bug id": "IO-701",
            "hexsha": "94be75e45726aeab75681b0b8570ecc4826a2384",
            "fix_hash": "580a7b5d395c315e4b7172f5563d3fe7461f92a6",
            "description": "PathUtils.setReadOnly use a DosFileAttributeView first. If this fails with a Exception, a second try with PosixFileAttributeView will not be done.\r\n\r\nThe approach is to catch a IOException (java.nio.file.FileSystemException Operation not supported), add it to a exception list. Throw the exception list if not empty.\r\n\r\nPlease check the environment of this bug: integration tests are all run on Ubuntu. This occured on Fedora. (Maybe the difference is ext4 ?)\r\n\r\nExample stacktrace (Message is \"Operation not supported\")\r\n{code:java}\r\njava.nio.file.FileSystemException: /tmp/junit4674316189874192997/file1-test.txt: Die Operation wird nicht unterst\u00fctzt\r\n\tat java.base/sun.nio.fs.UnixException.translateToIOException(UnixException.java:100)\r\n\tat java.base/sun.nio.fs.UnixException.rethrowAsIOException(UnixException.java:111)\r\n\tat java.base/sun.nio.fs.UnixException.rethrowAsIOException(UnixException.java:116)\r\n\tat java.base/sun.nio.fs.LinuxDosFileAttributeView.updateDosAttribute(LinuxDosFileAttributeView.java:278)\r\n\tat java.base/sun.nio.fs.LinuxDosFileAttributeView.setReadOnly(LinuxDosFileAttributeView.java:191)\r\n\tat org.apache.commons.io.file.PathUtils.setReadOnly(PathUtils.java:876)\r\n\tat org.apache.commons.io.file.PathUtils.deleteFile(PathUtils.java:486)\r\n\tat org.apache.commons.io.file.PathUtils.delete(PathUtils.java:393)\r\n\tat org.apache.commons.io.FileUtils.forceDelete(FileUtils.java:1337)\r\n\tat org.apache.commons.io.FileUtils.cleanDirectory(FileUtils.java:303)\r\n\tat org.apache.commons.io.FileUtils.deleteDirectory(FileUtils.java:1189)\r\n\tat org.apache.commons.io.FileUtilsTestCase.setUp(FileUtilsTestCase.java:299)\r\n{code}",
            "commit number version hash": 2059,
            "commit number": 1918,
            "function that changed": [
                {
                    "function name": "delete",
                    "function params": [
                        "file"
                    ],
                    "file name": "FileUtils.java",
                    "file old path": "src/main/java/org/apache/commons/io/FileUtils.java",
                    "file new path": "src/main/java/org/apache/commons/io/FileUtils.java",
                    "full name": "src.main.java.org.apache.commons.io.FileUtils.delete"
                },
                {
                    "function name": "setReadOnly",
                    "function params": [
                        "path",
                        "readOnly",
                        "linkOptions"
                    ],
                    "file name": "PathUtils.java",
                    "file old path": "src/main/java/org/apache/commons/io/file/PathUtils.java",
                    "file new path": "src/main/java/org/apache/commons/io/file/PathUtils.java",
                    "full name": "src.main.java.org.apache.commons.io.file.PathUtils.setReadOnly"
                },
                {
                    "function name": "testDeleteDirWithSymlinkFile",
                    "function params": [],
                    "file name": "FileUtilsDeleteDirectoryBaseTestCase.java",
                    "file old path": null,
                    "file new path": "src/test/java/org/apache/commons/io/FileUtilsDeleteDirectoryBaseTestCase.java",
                    "full name": "src.test.java.org.apache.commons.io.FileUtilsDeleteDirectoryBaseTestCase.testDeleteDirWithSymlinkFile"
                },
                {
                    "function name": "testDeleteDirWithASymlinkDir2",
                    "function params": [],
                    "file name": "FileUtilsDeleteDirectoryBaseTestCase.java",
                    "file old path": null,
                    "file new path": "src/test/java/org/apache/commons/io/FileUtilsDeleteDirectoryBaseTestCase.java",
                    "full name": "src.test.java.org.apache.commons.io.FileUtilsDeleteDirectoryBaseTestCase.testDeleteDirWithASymlinkDir2"
                },
                {
                    "function name": "testDeleteParentSymlink",
                    "function params": [],
                    "file name": "FileUtilsDeleteDirectoryBaseTestCase.java",
                    "file old path": null,
                    "file new path": "src/test/java/org/apache/commons/io/FileUtilsDeleteDirectoryBaseTestCase.java",
                    "full name": "src.test.java.org.apache.commons.io.FileUtilsDeleteDirectoryBaseTestCase.testDeleteParentSymlink"
                },
                {
                    "function name": "testDeletesNested",
                    "function params": [],
                    "file name": "FileUtilsDeleteDirectoryBaseTestCase.java",
                    "file old path": null,
                    "file new path": "src/test/java/org/apache/commons/io/FileUtilsDeleteDirectoryBaseTestCase.java",
                    "full name": "src.test.java.org.apache.commons.io.FileUtilsDeleteDirectoryBaseTestCase.testDeletesNested"
                },
                {
                    "function name": "testDeleteParentSymlink2",
                    "function params": [],
                    "file name": "FileUtilsDeleteDirectoryBaseTestCase.java",
                    "file old path": null,
                    "file new path": "src/test/java/org/apache/commons/io/FileUtilsDeleteDirectoryBaseTestCase.java",
                    "full name": "src.test.java.org.apache.commons.io.FileUtilsDeleteDirectoryBaseTestCase.testDeleteParentSymlink2"
                },
                {
                    "function name": "testDeletesRegular",
                    "function params": [],
                    "file name": "FileUtilsDeleteDirectoryBaseTestCase.java",
                    "file old path": null,
                    "file new path": "src/test/java/org/apache/commons/io/FileUtilsDeleteDirectoryBaseTestCase.java",
                    "full name": "src.test.java.org.apache.commons.io.FileUtilsDeleteDirectoryBaseTestCase.testDeletesRegular"
                },
                {
                    "function name": "testDeleteDirWithASymlinkDir",
                    "function params": [],
                    "file name": "FileUtilsDeleteDirectoryBaseTestCase.java",
                    "file old path": null,
                    "file new path": "src/test/java/org/apache/commons/io/FileUtilsDeleteDirectoryBaseTestCase.java",
                    "full name": "src.test.java.org.apache.commons.io.FileUtilsDeleteDirectoryBaseTestCase.testDeleteDirWithASymlinkDir"
                },
                {
                    "function name": "chmod",
                    "function params": [
                        "file",
                        "mode",
                        "recurse"
                    ],
                    "file name": "FileUtilsDeleteDirectoryLinuxTestCase.java",
                    "file old path": null,
                    "file new path": "src/test/java/org/apache/commons/io/FileUtilsDeleteDirectoryLinuxTestCase.java",
                    "full name": "src.test.java.org.apache.commons.io.FileUtilsDeleteDirectoryLinuxTestCase.chmod"
                },
                {
                    "function name": "testThrowsOnNullList",
                    "function params": [],
                    "file name": "FileUtilsDeleteDirectoryLinuxTestCase.java",
                    "file old path": null,
                    "file new path": "src/test/java/org/apache/commons/io/FileUtilsDeleteDirectoryLinuxTestCase.java",
                    "full name": "src.test.java.org.apache.commons.io.FileUtilsDeleteDirectoryLinuxTestCase.testThrowsOnNullList"
                },
                {
                    "function name": "setupSymlink",
                    "function params": [
                        "res",
                        "link"
                    ],
                    "file name": "FileUtilsDeleteDirectoryLinuxTestCase.java",
                    "file old path": null,
                    "file new path": "src/test/java/org/apache/commons/io/FileUtilsDeleteDirectoryLinuxTestCase.java",
                    "full name": "src.test.java.org.apache.commons.io.FileUtilsDeleteDirectoryLinuxTestCase.setupSymlink"
                },
                {
                    "function name": "testThrowsOnCannotDeleteFile",
                    "function params": [],
                    "file name": "FileUtilsDeleteDirectoryLinuxTestCase.java",
                    "file old path": null,
                    "file new path": "src/test/java/org/apache/commons/io/FileUtilsDeleteDirectoryLinuxTestCase.java",
                    "full name": "src.test.java.org.apache.commons.io.FileUtilsDeleteDirectoryLinuxTestCase.testThrowsOnCannotDeleteFile"
                },
                {
                    "function name": "setupSymlink",
                    "function params": [
                        "res",
                        "link"
                    ],
                    "file name": "FileUtilsDeleteDirectoryWinTestCase.java",
                    "file old path": null,
                    "file new path": "src/test/java/org/apache/commons/io/FileUtilsDeleteDirectoryWinTestCase.java",
                    "full name": "src.test.java.org.apache.commons.io.FileUtilsDeleteDirectoryWinTestCase.setupSymlink"
                }
            ],
            "files that changed": [
                "src/main/java/org/apache/commons/io/FileUtils.java",
                "src/main/java/org/apache/commons/io/file/PathUtils.java"
            ]
        },
        {
            "bug index": "75",
            "bug id": "IO-700",
            "hexsha": "94be75e45726aeab75681b0b8570ecc4826a2384",
            "fix_hash": "2d37ab6a0d53fce60095b352d36dddd9d26f5ab0",
            "description": "The current implementation 2.8.0 throws an Exception, if moveFiles or copyFiles (with preserveFileDate=true) cannot update the lastModifiedDate. This was not the case in 2.6.\r\n\r\n\u00a0\r\n\r\nFor FileUtils.moveFile the copyFile(File, File) method is used, which results in a copy with preserveFileDate=true. Could you provide a method overload to moveFile similiar to copyFile.\r\n\r\n\u00a0\r\n{code:java}\r\npublic static void moveFile(final File srcFile, final File destFile) throws IOException {\r\n  moveFile(srcFile, destFile, true);\r\n}\r\n\r\npublic static void moveFile(final File srcFile, final File destFile, boolean preserveFileDate) throws IOException {\r\n  ...\r\n  copyFile(srcFile, destFile, preserveFileDate);\r\n}\r\n\r\n{code}\r\n\u00a0\r\n\r\n(We have a cifs mount where the server is not allowing the update)",
            "commit number version hash": 2059,
            "commit number": 1915,
            "function that changed": [
                {
                    "function name": "moveFile",
                    "function params": [
                        "srcFile",
                        "destFile",
                        "preserveFileDate"
                    ],
                    "file name": "FileUtils.java",
                    "file old path": "src/main/java/org/apache/commons/io/FileUtils.java",
                    "file new path": "src/main/java/org/apache/commons/io/FileUtils.java",
                    "full name": "src.main.java.org.apache.commons.io.FileUtils.moveFile"
                },
                {
                    "function name": "moveFile",
                    "function params": [
                        "srcFile",
                        "destFile"
                    ],
                    "file name": "FileUtils.java",
                    "file old path": "src/main/java/org/apache/commons/io/FileUtils.java",
                    "file new path": "src/main/java/org/apache/commons/io/FileUtils.java",
                    "full name": "src.main.java.org.apache.commons.io.FileUtils.moveFile"
                },
                {
                    "function name": "testMoveFile_CopyDelete_WithoutFileDatePreservation",
                    "function params": [],
                    "file name": "FileUtilsTestCase.java",
                    "file old path": "src/test/java/org/apache/commons/io/FileUtilsTestCase.java",
                    "file new path": "src/test/java/org/apache/commons/io/FileUtilsTestCase.java",
                    "full name": "src.test.java.org.apache.commons.io.FileUtilsTestCase.testMoveFile_CopyDelete_WithoutFileDatePreservation"
                },
                {
                    "function name": "testMoveFile_CopyDelete_WithFileDatePreservation",
                    "function params": [],
                    "file name": "FileUtilsTestCase.java",
                    "file old path": "src/test/java/org/apache/commons/io/FileUtilsTestCase.java",
                    "file new path": "src/test/java/org/apache/commons/io/FileUtilsTestCase.java",
                    "full name": "src.test.java.org.apache.commons.io.FileUtilsTestCase.testMoveFile_CopyDelete_WithFileDatePreservation"
                }
            ],
            "files that changed": [
                "src/main/java/org/apache/commons/io/FileUtils.java",
                "src/test/java/org/apache/commons/io/FileUtilsTestCase.java"
            ]
        },
        {
            "bug index": "76",
            "bug id": "IO-688",
            "hexsha": "94be75e45726aeab75681b0b8570ecc4826a2384",
            "fix_hash": "1d4d1873430c3737991841f43ea065b66199b732",
            "description": "Class CopyUtils.java has a [comment|https://github.com/apache/commons-io/blob/7a26933008ecb89c3ddfdf0703b281c5293b712e/src/main/java/org/apache/commons/io/CopyUtils.java#L106] that says:\r\n\r\n@deprecated Use IOUtils. Will be removed in 2.0.\r\n\r\nIt was not removed in 2.0.\u00a0 Either it should be removed now, or \"2.0\" should be changed to a future release.\r\n\r\n\u00a0",
            "commit number version hash": 2059,
            "commit number": 1902,
            "function that changed": [],
            "files that changed": [
                "src/main/java/org/apache/commons/io/CopyUtils.java"
            ]
        },
        {
            "bug index": "77",
            "bug id": "IO-699",
            "hexsha": "cdf779422d47637ead33e094ae8f971de1c395f6",
            "fix_hash": "0cee29aa4c1818963ed1a55058219282e89d7488",
            "description": "We run into a small issue with FileUtils.copyDirectory(File srcDir, File destDir).\r\n\r\n\u00a0\r\n\r\nThe javadoc is wrong, setting preserveFileDate=true will now result in an IOException if the operation fails. Issue IO-695 already exists for that.\r\n\r\n\u00a0\r\n\r\norg.apache.commons.io.FileUtils.setLastModified(File, File) sets the lastModified of the targetFile, but the IOException logs \"failed setLastModified on *sourceFile*\".\r\n\r\nThe setter failed on targetFile - so it should log the *targetFile*?",
            "commit number version hash": 1764,
            "commit number": 1897,
            "function that changed": [
                {
                    "function name": "listFiles",
                    "function params": [
                        "directory",
                        "fileFilter"
                    ],
                    "file name": "FileUtils.java",
                    "file old path": "src/main/java/org/apache/commons/io/FileUtils.java",
                    "file new path": "src/main/java/org/apache/commons/io/FileUtils.java",
                    "full name": "src.main.java.org.apache.commons.io.FileUtils.listFiles"
                },
                {
                    "function name": "forceMkdir",
                    "function params": [
                        "directory"
                    ],
                    "file name": "FileUtils.java",
                    "file old path": "src/main/java/org/apache/commons/io/FileUtils.java",
                    "file new path": "src/main/java/org/apache/commons/io/FileUtils.java",
                    "full name": "src.main.java.org.apache.commons.io.FileUtils.forceMkdir"
                },
                {
                    "function name": "toFile",
                    "function params": [
                        "url"
                    ],
                    "file name": "FileUtils.java",
                    "file old path": "src/main/java/org/apache/commons/io/FileUtils.java",
                    "file new path": "src/main/java/org/apache/commons/io/FileUtils.java",
                    "full name": "src.main.java.org.apache.commons.io.FileUtils.toFile"
                },
                {
                    "function name": "sizeOfBig0",
                    "function params": [
                        "fileOrDir"
                    ],
                    "file name": "FileUtils.java",
                    "file old path": "src/main/java/org/apache/commons/io/FileUtils.java",
                    "file new path": "src/main/java/org/apache/commons/io/FileUtils.java",
                    "full name": "src.main.java.org.apache.commons.io.FileUtils.sizeOfBig0"
                },
                {
                    "function name": "waitFor",
                    "function params": [
                        "file",
                        "seconds"
                    ],
                    "file name": "FileUtils.java",
                    "file old path": "src/main/java/org/apache/commons/io/FileUtils.java",
                    "file new path": "src/main/java/org/apache/commons/io/FileUtils.java",
                    "full name": "src.main.java.org.apache.commons.io.FileUtils.waitFor"
                },
                {
                    "function name": "createParentDirectories",
                    "function params": [
                        "file"
                    ],
                    "file name": "FileUtils.java",
                    "file old path": "src/main/java/org/apache/commons/io/FileUtils.java",
                    "file new path": "src/main/java/org/apache/commons/io/FileUtils.java",
                    "full name": "src.main.java.org.apache.commons.io.FileUtils.createParentDirectories"
                },
                {
                    "function name": "moveDirectoryToDirectory",
                    "function params": [
                        "src",
                        "destDir",
                        "createDestDir"
                    ],
                    "file name": "FileUtils.java",
                    "file old path": "src/main/java/org/apache/commons/io/FileUtils.java",
                    "file new path": "src/main/java/org/apache/commons/io/FileUtils.java",
                    "full name": "src.main.java.org.apache.commons.io.FileUtils.moveDirectoryToDirectory"
                },
                {
                    "function name": "requireFile",
                    "function params": [
                        "file",
                        "name"
                    ],
                    "file name": "FileUtils.java",
                    "file old path": "src/main/java/org/apache/commons/io/FileUtils.java",
                    "file new path": "src/main/java/org/apache/commons/io/FileUtils.java",
                    "full name": "src.main.java.org.apache.commons.io.FileUtils.requireFile"
                },
                {
                    "function name": "forceDelete",
                    "function params": [
                        "file"
                    ],
                    "file name": "FileUtils.java",
                    "file old path": "src/main/java/org/apache/commons/io/FileUtils.java",
                    "file new path": "src/main/java/org/apache/commons/io/FileUtils.java",
                    "full name": "src.main.java.org.apache.commons.io.FileUtils.forceDelete"
                },
                {
                    "function name": "isSymlink",
                    "function params": [
                        "file"
                    ],
                    "file name": "FileUtils.java",
                    "file old path": "src/main/java/org/apache/commons/io/FileUtils.java",
                    "file new path": "src/main/java/org/apache/commons/io/FileUtils.java",
                    "full name": "src.main.java.org.apache.commons.io.FileUtils.isSymlink"
                },
                {
                    "function name": "copyFile",
                    "function params": [
                        "srcFile",
                        "destFile",
                        "preserveFileDate",
                        "copyOptions"
                    ],
                    "file name": "FileUtils.java",
                    "file old path": "src/main/java/org/apache/commons/io/FileUtils.java",
                    "file new path": "src/main/java/org/apache/commons/io/FileUtils.java",
                    "full name": "src.main.java.org.apache.commons.io.FileUtils.copyFile"
                },
                {
                    "function name": "sizeOfDirectory0",
                    "function params": [
                        "directory"
                    ],
                    "file name": "FileUtils.java",
                    "file old path": "src/main/java/org/apache/commons/io/FileUtils.java",
                    "file new path": "src/main/java/org/apache/commons/io/FileUtils.java",
                    "full name": "src.main.java.org.apache.commons.io.FileUtils.sizeOfDirectory0"
                },
                {
                    "function name": "toURLs",
                    "function params": [
                        "files"
                    ],
                    "file name": "FileUtils.java",
                    "file old path": "src/main/java/org/apache/commons/io/FileUtils.java",
                    "file new path": "src/main/java/org/apache/commons/io/FileUtils.java",
                    "full name": "src.main.java.org.apache.commons.io.FileUtils.toURLs"
                },
                {
                    "function name": "setLastModified",
                    "function params": [
                        "file",
                        "timeMillis"
                    ],
                    "file name": "FileUtils.java",
                    "file old path": "src/main/java/org/apache/commons/io/FileUtils.java",
                    "file new path": "src/main/java/org/apache/commons/io/FileUtils.java",
                    "full name": "src.main.java.org.apache.commons.io.FileUtils.setLastModified"
                },
                {
                    "function name": "touch",
                    "function params": [
                        "file"
                    ],
                    "file name": "FileUtils.java",
                    "file old path": "src/main/java/org/apache/commons/io/FileUtils.java",
                    "file new path": "src/main/java/org/apache/commons/io/FileUtils.java",
                    "full name": "src.main.java.org.apache.commons.io.FileUtils.touch"
                },
                {
                    "function name": "requireCanonicalPathsNotEquals",
                    "function params": [
                        "file1",
                        "file2"
                    ],
                    "file name": "FileUtils.java",
                    "file old path": "src/main/java/org/apache/commons/io/FileUtils.java",
                    "file new path": "src/main/java/org/apache/commons/io/FileUtils.java",
                    "full name": "src.main.java.org.apache.commons.io.FileUtils.requireCanonicalPathsNotEquals"
                },
                {
                    "function name": "requireFile",
                    "function params": [
                        "file",
                        "param"
                    ],
                    "file name": "FileUtils.java",
                    "file old path": "src/main/java/org/apache/commons/io/FileUtils.java",
                    "file new path": "src/main/java/org/apache/commons/io/FileUtils.java",
                    "full name": "src.main.java.org.apache.commons.io.FileUtils.requireFile"
                },
                {
                    "function name": "delete",
                    "function params": [
                        "file"
                    ],
                    "file name": "FileUtils.java",
                    "file old path": "src/main/java/org/apache/commons/io/FileUtils.java",
                    "file new path": "src/main/java/org/apache/commons/io/FileUtils.java",
                    "full name": "src.main.java.org.apache.commons.io.FileUtils.delete"
                },
                {
                    "function name": "mkdirs",
                    "function params": [
                        "directory"
                    ],
                    "file name": "FileUtils.java",
                    "file old path": "src/main/java/org/apache/commons/io/FileUtils.java",
                    "file new path": "src/main/java/org/apache/commons/io/FileUtils.java",
                    "full name": "src.main.java.org.apache.commons.io.FileUtils.mkdirs"
                },
                {
                    "function name": "requireExists",
                    "function params": [
                        "file",
                        "fileParamName"
                    ],
                    "file name": "FileUtils.java",
                    "file old path": "src/main/java/org/apache/commons/io/FileUtils.java",
                    "file new path": "src/main/java/org/apache/commons/io/FileUtils.java",
                    "full name": "src.main.java.org.apache.commons.io.FileUtils.requireExists"
                },
                {
                    "function name": "sizeOfAsBigInteger",
                    "function params": [
                        "file"
                    ],
                    "file name": "FileUtils.java",
                    "file old path": "src/main/java/org/apache/commons/io/FileUtils.java",
                    "file new path": "src/main/java/org/apache/commons/io/FileUtils.java",
                    "full name": "src.main.java.org.apache.commons.io.FileUtils.sizeOfAsBigInteger"
                },
                {
                    "function name": "copyDirectory",
                    "function params": [
                        "srcDir",
                        "destDir",
                        "fileFilter",
                        "preserveFileDate",
                        "copyOptions"
                    ],
                    "file name": "FileUtils.java",
                    "file old path": "src/main/java/org/apache/commons/io/FileUtils.java",
                    "file new path": "src/main/java/org/apache/commons/io/FileUtils.java",
                    "full name": "src.main.java.org.apache.commons.io.FileUtils.copyDirectory"
                },
                {
                    "function name": "openInputStream",
                    "function params": [
                        "file"
                    ],
                    "file name": "FileUtils.java",
                    "file old path": "src/main/java/org/apache/commons/io/FileUtils.java",
                    "file new path": "src/main/java/org/apache/commons/io/FileUtils.java",
                    "full name": "src.main.java.org.apache.commons.io.FileUtils.openInputStream"
                },
                {
                    "function name": "write",
                    "function params": [
                        "file",
                        "data",
                        "charset",
                        "append"
                    ],
                    "file name": "FileUtils.java",
                    "file old path": "src/main/java/org/apache/commons/io/FileUtils.java",
                    "file new path": "src/main/java/org/apache/commons/io/FileUtils.java",
                    "full name": "src.main.java.org.apache.commons.io.FileUtils.write"
                },
                {
                    "function name": "copyURLToFile",
                    "function params": [
                        "source",
                        "destination",
                        "connectionTimeoutMillis",
                        "readTimeoutMillis"
                    ],
                    "file name": "FileUtils.java",
                    "file old path": "src/main/java/org/apache/commons/io/FileUtils.java",
                    "file new path": "src/main/java/org/apache/commons/io/FileUtils.java",
                    "full name": "src.main.java.org.apache.commons.io.FileUtils.copyURLToFile"
                },
                {
                    "function name": "moveFile",
                    "function params": [
                        "srcFile",
                        "destFile"
                    ],
                    "file name": "FileUtils.java",
                    "file old path": "src/main/java/org/apache/commons/io/FileUtils.java",
                    "file new path": "src/main/java/org/apache/commons/io/FileUtils.java",
                    "full name": "src.main.java.org.apache.commons.io.FileUtils.moveFile"
                },
                {
                    "function name": "cleanDirectory",
                    "function params": [
                        "directory"
                    ],
                    "file name": "FileUtils.java",
                    "file old path": "src/main/java/org/apache/commons/io/FileUtils.java",
                    "file new path": "src/main/java/org/apache/commons/io/FileUtils.java",
                    "full name": "src.main.java.org.apache.commons.io.FileUtils.cleanDirectory"
                },
                {
                    "function name": "copyURLToFile",
                    "function params": [
                        "source",
                        "destination",
                        "connectionTimeout",
                        "readTimeout"
                    ],
                    "file name": "FileUtils.java",
                    "file old path": "src/main/java/org/apache/commons/io/FileUtils.java",
                    "file new path": "src/main/java/org/apache/commons/io/FileUtils.java",
                    "full name": "src.main.java.org.apache.commons.io.FileUtils.copyURLToFile"
                },
                {
                    "function name": "copyDirectoryToDirectory",
                    "function params": [
                        "sourceDir",
                        "destinationDir"
                    ],
                    "file name": "FileUtils.java",
                    "file old path": "src/main/java/org/apache/commons/io/FileUtils.java",
                    "file new path": "src/main/java/org/apache/commons/io/FileUtils.java",
                    "full name": "src.main.java.org.apache.commons.io.FileUtils.copyDirectoryToDirectory"
                },
                {
                    "function name": "contentEquals",
                    "function params": [
                        "file1",
                        "file2"
                    ],
                    "file name": "FileUtils.java",
                    "file old path": "src/main/java/org/apache/commons/io/FileUtils.java",
                    "file new path": "src/main/java/org/apache/commons/io/FileUtils.java",
                    "full name": "src.main.java.org.apache.commons.io.FileUtils.contentEquals"
                },
                {
                    "function name": "byteCountToDisplaySize",
                    "function params": [
                        "size"
                    ],
                    "file name": "FileUtils.java",
                    "file old path": "src/main/java/org/apache/commons/io/FileUtils.java",
                    "file new path": "src/main/java/org/apache/commons/io/FileUtils.java",
                    "full name": "src.main.java.org.apache.commons.io.FileUtils.byteCountToDisplaySize"
                },
                {
                    "function name": "sizeOfDirectoryBig0",
                    "function params": [
                        "directory"
                    ],
                    "file name": "FileUtils.java",
                    "file old path": "src/main/java/org/apache/commons/io/FileUtils.java",
                    "file new path": "src/main/java/org/apache/commons/io/FileUtils.java",
                    "full name": "src.main.java.org.apache.commons.io.FileUtils.sizeOfDirectoryBig0"
                },
                {
                    "function name": "copyToDirectory",
                    "function params": [
                        "sourceFile",
                        "destinationDir"
                    ],
                    "file name": "FileUtils.java",
                    "file old path": "src/main/java/org/apache/commons/io/FileUtils.java",
                    "file new path": "src/main/java/org/apache/commons/io/FileUtils.java",
                    "full name": "src.main.java.org.apache.commons.io.FileUtils.copyToDirectory"
                },
                {
                    "function name": "requireCanWrite",
                    "function params": [
                        "file",
                        "name"
                    ],
                    "file name": "FileUtils.java",
                    "file old path": "src/main/java/org/apache/commons/io/FileUtils.java",
                    "file new path": "src/main/java/org/apache/commons/io/FileUtils.java",
                    "full name": "src.main.java.org.apache.commons.io.FileUtils.requireCanWrite"
                },
                {
                    "function name": "sizeOfDirectory",
                    "function params": [
                        "directory"
                    ],
                    "file name": "FileUtils.java",
                    "file old path": "src/main/java/org/apache/commons/io/FileUtils.java",
                    "file new path": "src/main/java/org/apache/commons/io/FileUtils.java",
                    "full name": "src.main.java.org.apache.commons.io.FileUtils.sizeOfDirectory"
                },
                {
                    "function name": "toFiles",
                    "function params": [
                        "urls"
                    ],
                    "file name": "FileUtils.java",
                    "file old path": "src/main/java/org/apache/commons/io/FileUtils.java",
                    "file new path": "src/main/java/org/apache/commons/io/FileUtils.java",
                    "full name": "src.main.java.org.apache.commons.io.FileUtils.toFiles"
                },
                {
                    "function name": "streamFiles",
                    "function params": [
                        "directory",
                        "recursive",
                        "extensions"
                    ],
                    "file name": "FileUtils.java",
                    "file old path": "src/main/java/org/apache/commons/io/FileUtils.java",
                    "file new path": "src/main/java/org/apache/commons/io/FileUtils.java",
                    "full name": "src.main.java.org.apache.commons.io.FileUtils.streamFiles"
                },
                {
                    "function name": "setLastModified",
                    "function params": [
                        "sourceFile",
                        "targetFile"
                    ],
                    "file name": "FileUtils.java",
                    "file old path": "src/main/java/org/apache/commons/io/FileUtils.java",
                    "file new path": "src/main/java/org/apache/commons/io/FileUtils.java",
                    "full name": "src.main.java.org.apache.commons.io.FileUtils.setLastModified"
                },
                {
                    "function name": "requireDirectory",
                    "function params": [
                        "directory",
                        "param"
                    ],
                    "file name": "FileUtils.java",
                    "file old path": "src/main/java/org/apache/commons/io/FileUtils.java",
                    "file new path": "src/main/java/org/apache/commons/io/FileUtils.java",
                    "full name": "src.main.java.org.apache.commons.io.FileUtils.requireDirectory"
                },
                {
                    "function name": "doCopyFile",
                    "function params": [
                        "srcFile",
                        "destFile",
                        "preserveFileDate",
                        "copyOptions"
                    ],
                    "file name": "FileUtils.java",
                    "file old path": "src/main/java/org/apache/commons/io/FileUtils.java",
                    "file new path": "src/main/java/org/apache/commons/io/FileUtils.java",
                    "full name": "src.main.java.org.apache.commons.io.FileUtils.doCopyFile"
                },
                {
                    "function name": "sizeOf",
                    "function params": [
                        "file"
                    ],
                    "file name": "FileUtils.java",
                    "file old path": "src/main/java/org/apache/commons/io/FileUtils.java",
                    "file new path": "src/main/java/org/apache/commons/io/FileUtils.java",
                    "full name": "src.main.java.org.apache.commons.io.FileUtils.sizeOf"
                },
                {
                    "function name": "requireExistsChecked",
                    "function params": [
                        "file",
                        "fileParamName"
                    ],
                    "file name": "FileUtils.java",
                    "file old path": "src/main/java/org/apache/commons/io/FileUtils.java",
                    "file new path": "src/main/java/org/apache/commons/io/FileUtils.java",
                    "full name": "src.main.java.org.apache.commons.io.FileUtils.requireExistsChecked"
                },
                {
                    "function name": "sizeOfBig0",
                    "function params": [
                        "file"
                    ],
                    "file name": "FileUtils.java",
                    "file old path": "src/main/java/org/apache/commons/io/FileUtils.java",
                    "file new path": "src/main/java/org/apache/commons/io/FileUtils.java",
                    "full name": "src.main.java.org.apache.commons.io.FileUtils.sizeOfBig0"
                },
                {
                    "function name": "requireDirectory",
                    "function params": [
                        "directory",
                        "name"
                    ],
                    "file name": "FileUtils.java",
                    "file old path": "src/main/java/org/apache/commons/io/FileUtils.java",
                    "file new path": "src/main/java/org/apache/commons/io/FileUtils.java",
                    "full name": "src.main.java.org.apache.commons.io.FileUtils.requireDirectory"
                },
                {
                    "function name": "requireFileCopy",
                    "function params": [
                        "source",
                        "destination"
                    ],
                    "file name": "FileUtils.java",
                    "file old path": "src/main/java/org/apache/commons/io/FileUtils.java",
                    "file new path": "src/main/java/org/apache/commons/io/FileUtils.java",
                    "full name": "src.main.java.org.apache.commons.io.FileUtils.requireFileCopy"
                },
                {
                    "function name": "openOutputStream",
                    "function params": [
                        "file",
                        "append"
                    ],
                    "file name": "FileUtils.java",
                    "file old path": "src/main/java/org/apache/commons/io/FileUtils.java",
                    "file new path": "src/main/java/org/apache/commons/io/FileUtils.java",
                    "full name": "src.main.java.org.apache.commons.io.FileUtils.openOutputStream"
                },
                {
                    "function name": "cleanDirectoryOnExit",
                    "function params": [
                        "directory"
                    ],
                    "file name": "FileUtils.java",
                    "file old path": "src/main/java/org/apache/commons/io/FileUtils.java",
                    "file new path": "src/main/java/org/apache/commons/io/FileUtils.java",
                    "full name": "src.main.java.org.apache.commons.io.FileUtils.cleanDirectoryOnExit"
                },
                {
                    "function name": "sizeOfDirectoryAsBigInteger",
                    "function params": [
                        "directory"
                    ],
                    "file name": "FileUtils.java",
                    "file old path": "src/main/java/org/apache/commons/io/FileUtils.java",
                    "file new path": "src/main/java/org/apache/commons/io/FileUtils.java",
                    "full name": "src.main.java.org.apache.commons.io.FileUtils.sizeOfDirectoryAsBigInteger"
                },
                {
                    "function name": "requireDirectoryIfExists",
                    "function params": [
                        "directory",
                        "name"
                    ],
                    "file name": "FileUtils.java",
                    "file old path": "src/main/java/org/apache/commons/io/FileUtils.java",
                    "file new path": "src/main/java/org/apache/commons/io/FileUtils.java",
                    "full name": "src.main.java.org.apache.commons.io.FileUtils.requireDirectoryIfExists"
                },
                {
                    "function name": "getParentFile",
                    "function params": [
                        "file"
                    ],
                    "file name": "FileUtils.java",
                    "file old path": "src/main/java/org/apache/commons/io/FileUtils.java",
                    "file new path": "src/main/java/org/apache/commons/io/FileUtils.java",
                    "full name": "src.main.java.org.apache.commons.io.FileUtils.getParentFile"
                },
                {
                    "function name": "forceDeleteOnExit",
                    "function params": [
                        "file"
                    ],
                    "file name": "FileUtils.java",
                    "file old path": "src/main/java/org/apache/commons/io/FileUtils.java",
                    "file new path": "src/main/java/org/apache/commons/io/FileUtils.java",
                    "full name": "src.main.java.org.apache.commons.io.FileUtils.forceDeleteOnExit"
                },
                {
                    "function name": "copyFileToDirectory",
                    "function params": [
                        "sourceFile",
                        "destinationDir",
                        "preserveFileDate"
                    ],
                    "file name": "FileUtils.java",
                    "file old path": "src/main/java/org/apache/commons/io/FileUtils.java",
                    "file new path": "src/main/java/org/apache/commons/io/FileUtils.java",
                    "full name": "src.main.java.org.apache.commons.io.FileUtils.copyFileToDirectory"
                },
                {
                    "function name": "forceMkdirParent",
                    "function params": [
                        "file"
                    ],
                    "file name": "FileUtils.java",
                    "file old path": "src/main/java/org/apache/commons/io/FileUtils.java",
                    "file new path": "src/main/java/org/apache/commons/io/FileUtils.java",
                    "full name": "src.main.java.org.apache.commons.io.FileUtils.forceMkdirParent"
                },
                {
                    "function name": "toSuffixes",
                    "function params": [
                        "extensions"
                    ],
                    "file name": "FileUtils.java",
                    "file old path": "src/main/java/org/apache/commons/io/FileUtils.java",
                    "file new path": "src/main/java/org/apache/commons/io/FileUtils.java",
                    "full name": "src.main.java.org.apache.commons.io.FileUtils.toSuffixes"
                },
                {
                    "function name": "directoryContains",
                    "function params": [
                        "directory",
                        "child"
                    ],
                    "file name": "FileUtils.java",
                    "file old path": "src/main/java/org/apache/commons/io/FileUtils.java",
                    "file new path": "src/main/java/org/apache/commons/io/FileUtils.java",
                    "full name": "src.main.java.org.apache.commons.io.FileUtils.directoryContains"
                },
                {
                    "function name": "deleteDirectory",
                    "function params": [
                        "directory"
                    ],
                    "file name": "FileUtils.java",
                    "file old path": "src/main/java/org/apache/commons/io/FileUtils.java",
                    "file new path": "src/main/java/org/apache/commons/io/FileUtils.java",
                    "full name": "src.main.java.org.apache.commons.io.FileUtils.deleteDirectory"
                },
                {
                    "function name": "contentEqualsIgnoreEOL",
                    "function params": [
                        "file1",
                        "file2",
                        "charsetName"
                    ],
                    "file name": "FileUtils.java",
                    "file old path": "src/main/java/org/apache/commons/io/FileUtils.java",
                    "file new path": "src/main/java/org/apache/commons/io/FileUtils.java",
                    "full name": "src.main.java.org.apache.commons.io.FileUtils.contentEqualsIgnoreEOL"
                },
                {
                    "function name": "requireExists",
                    "function params": [
                        "file",
                        "param"
                    ],
                    "file name": "FileUtils.java",
                    "file old path": "src/main/java/org/apache/commons/io/FileUtils.java",
                    "file new path": "src/main/java/org/apache/commons/io/FileUtils.java",
                    "full name": "src.main.java.org.apache.commons.io.FileUtils.requireExists"
                },
                {
                    "function name": "requireDirectoryExists",
                    "function params": [
                        "directory",
                        "name"
                    ],
                    "file name": "FileUtils.java",
                    "file old path": "src/main/java/org/apache/commons/io/FileUtils.java",
                    "file new path": "src/main/java/org/apache/commons/io/FileUtils.java",
                    "full name": "src.main.java.org.apache.commons.io.FileUtils.requireDirectoryExists"
                },
                {
                    "function name": "requireFileIfExists",
                    "function params": [
                        "file",
                        "name"
                    ],
                    "file name": "FileUtils.java",
                    "file old path": "src/main/java/org/apache/commons/io/FileUtils.java",
                    "file new path": "src/main/java/org/apache/commons/io/FileUtils.java",
                    "full name": "src.main.java.org.apache.commons.io.FileUtils.requireFileIfExists"
                },
                {
                    "function name": "requireAbsent",
                    "function params": [
                        "file",
                        "name"
                    ],
                    "file name": "FileUtils.java",
                    "file old path": "src/main/java/org/apache/commons/io/FileUtils.java",
                    "file new path": "src/main/java/org/apache/commons/io/FileUtils.java",
                    "full name": "src.main.java.org.apache.commons.io.FileUtils.requireAbsent"
                },
                {
                    "function name": "checksum",
                    "function params": [
                        "file",
                        "checksum"
                    ],
                    "file name": "FileUtils.java",
                    "file old path": "src/main/java/org/apache/commons/io/FileUtils.java",
                    "file new path": "src/main/java/org/apache/commons/io/FileUtils.java",
                    "full name": "src.main.java.org.apache.commons.io.FileUtils.checksum"
                },
                {
                    "function name": "copyDirectory",
                    "function params": [
                        "srcDir",
                        "destDir",
                        "filter"
                    ],
                    "file name": "FileUtils.java",
                    "file old path": "src/main/java/org/apache/commons/io/FileUtils.java",
                    "file new path": "src/main/java/org/apache/commons/io/FileUtils.java",
                    "full name": "src.main.java.org.apache.commons.io.FileUtils.copyDirectory"
                },
                {
                    "function name": "sizeOf0",
                    "function params": [
                        "file"
                    ],
                    "file name": "FileUtils.java",
                    "file old path": "src/main/java/org/apache/commons/io/FileUtils.java",
                    "file new path": "src/main/java/org/apache/commons/io/FileUtils.java",
                    "full name": "src.main.java.org.apache.commons.io.FileUtils.sizeOf0"
                },
                {
                    "function name": "copyDirectory",
                    "function params": [
                        "srcDir",
                        "destDir",
                        "filter",
                        "preserveFileDate",
                        "copyOptions"
                    ],
                    "file name": "FileUtils.java",
                    "file old path": "src/main/java/org/apache/commons/io/FileUtils.java",
                    "file new path": "src/main/java/org/apache/commons/io/FileUtils.java",
                    "full name": "src.main.java.org.apache.commons.io.FileUtils.copyDirectory"
                },
                {
                    "function name": "convertFileCollectionToFileArray",
                    "function params": [
                        "files"
                    ],
                    "file name": "FileUtils.java",
                    "file old path": "src/main/java/org/apache/commons/io/FileUtils.java",
                    "file new path": "src/main/java/org/apache/commons/io/FileUtils.java",
                    "full name": "src.main.java.org.apache.commons.io.FileUtils.convertFileCollectionToFileArray"
                },
                {
                    "function name": "moveFileToDirectory",
                    "function params": [
                        "srcFile",
                        "destDir",
                        "createDestDir"
                    ],
                    "file name": "FileUtils.java",
                    "file old path": "src/main/java/org/apache/commons/io/FileUtils.java",
                    "file new path": "src/main/java/org/apache/commons/io/FileUtils.java",
                    "full name": "src.main.java.org.apache.commons.io.FileUtils.moveFileToDirectory"
                },
                {
                    "function name": "doCopyDirectory",
                    "function params": [
                        "srcDir",
                        "destDir",
                        "filter",
                        "preserveFileDate",
                        "exclusionList",
                        "copyOptions"
                    ],
                    "file name": "FileUtils.java",
                    "file old path": "src/main/java/org/apache/commons/io/FileUtils.java",
                    "file new path": "src/main/java/org/apache/commons/io/FileUtils.java",
                    "full name": "src.main.java.org.apache.commons.io.FileUtils.doCopyDirectory"
                },
                {
                    "function name": "deleteDirectoryOnExit",
                    "function params": [
                        "directory"
                    ],
                    "file name": "FileUtils.java",
                    "file old path": "src/main/java/org/apache/commons/io/FileUtils.java",
                    "file new path": "src/main/java/org/apache/commons/io/FileUtils.java",
                    "full name": "src.main.java.org.apache.commons.io.FileUtils.deleteDirectoryOnExit"
                },
                {
                    "function name": "moveDirectory",
                    "function params": [
                        "srcDir",
                        "destDir"
                    ],
                    "file name": "FileUtils.java",
                    "file old path": "src/main/java/org/apache/commons/io/FileUtils.java",
                    "file new path": "src/main/java/org/apache/commons/io/FileUtils.java",
                    "full name": "src.main.java.org.apache.commons.io.FileUtils.moveDirectory"
                },
                {
                    "function name": "doCopyDirectory",
                    "function params": [
                        "srcDir",
                        "destDir",
                        "fileFilter",
                        "preserveFileDate",
                        "exclusionList",
                        "copyOptions"
                    ],
                    "file name": "FileUtils.java",
                    "file old path": "src/main/java/org/apache/commons/io/FileUtils.java",
                    "file new path": "src/main/java/org/apache/commons/io/FileUtils.java",
                    "full name": "src.main.java.org.apache.commons.io.FileUtils.doCopyDirectory"
                },
                {
                    "function name": "copyDirectoryToDirectoryThrowsIllegalExceptionWithCorrectMessageWhenSrcDirIsNotDirectory",
                    "function params": [],
                    "file name": "FileUtilsCopyDirectoryToDirectoryTestCase.java",
                    "file old path": "src/test/java/org/apache/commons/io/FileUtilsCopyDirectoryToDirectoryTestCase.java",
                    "file new path": "src/test/java/org/apache/commons/io/FileUtilsCopyDirectoryToDirectoryTestCase.java",
                    "full name": "src.test.java.org.apache.commons.io.FileUtilsCopyDirectoryToDirectoryTestCase.copyDirectoryToDirectoryThrowsIllegalExceptionWithCorrectMessageWhenSrcDirIsNotDirectory"
                },
                {
                    "function name": "copyDirectoryToDirectoryThrowsIllegalArgumentExceptionWithCorrectMessageWhenDstDirIsNotDirectory",
                    "function params": [],
                    "file name": "FileUtilsCopyDirectoryToDirectoryTestCase.java",
                    "file old path": "src/test/java/org/apache/commons/io/FileUtilsCopyDirectoryToDirectoryTestCase.java",
                    "file new path": "src/test/java/org/apache/commons/io/FileUtilsCopyDirectoryToDirectoryTestCase.java",
                    "full name": "src.test.java.org.apache.commons.io.FileUtilsCopyDirectoryToDirectoryTestCase.copyDirectoryToDirectoryThrowsIllegalArgumentExceptionWithCorrectMessageWhenDstDirIsNotDirectory"
                },
                {
                    "function name": "testCopyFile1ToDir",
                    "function params": [],
                    "file name": "FileUtilsTestCase.java",
                    "file old path": "src/test/java/org/apache/commons/io/FileUtilsTestCase.java",
                    "file new path": "src/test/java/org/apache/commons/io/FileUtilsTestCase.java",
                    "full name": "src.test.java.org.apache.commons.io.FileUtilsTestCase.testCopyFile1ToDir"
                },
                {
                    "function name": "testMoveDirectory_Errors",
                    "function params": [],
                    "file name": "FileUtilsTestCase.java",
                    "file old path": "src/test/java/org/apache/commons/io/FileUtilsTestCase.java",
                    "file new path": "src/test/java/org/apache/commons/io/FileUtilsTestCase.java",
                    "full name": "src.test.java.org.apache.commons.io.FileUtilsTestCase.testMoveDirectory_Errors"
                },
                {
                    "function name": "testMoveFileToDirectory_Errors",
                    "function params": [],
                    "file name": "FileUtilsTestCase.java",
                    "file old path": "src/test/java/org/apache/commons/io/FileUtilsTestCase.java",
                    "file new path": "src/test/java/org/apache/commons/io/FileUtilsTestCase.java",
                    "full name": "src.test.java.org.apache.commons.io.FileUtilsTestCase.testMoveFileToDirectory_Errors"
                },
                {
                    "function name": "test_openInputStream_existsButIsDirectory",
                    "function params": [],
                    "file name": "FileUtilsTestCase.java",
                    "file old path": "src/test/java/org/apache/commons/io/FileUtilsTestCase.java",
                    "file new path": "src/test/java/org/apache/commons/io/FileUtilsTestCase.java",
                    "full name": "src.test.java.org.apache.commons.io.FileUtilsTestCase.test_openInputStream_existsButIsDirectory"
                },
                {
                    "function name": "testIsFileNewerOlder",
                    "function params": [],
                    "file name": "FileUtilsTestCase.java",
                    "file old path": "src/test/java/org/apache/commons/io/FileUtilsTestCase.java",
                    "file new path": "src/test/java/org/apache/commons/io/FileUtilsTestCase.java",
                    "full name": "src.test.java.org.apache.commons.io.FileUtilsTestCase.testIsFileNewerOlder"
                },
                {
                    "function name": "test_openOutputStream_existsButIsDirectory",
                    "function params": [],
                    "file name": "FileUtilsTestCase.java",
                    "file old path": "src/test/java/org/apache/commons/io/FileUtilsTestCase.java",
                    "file new path": "src/test/java/org/apache/commons/io/FileUtilsTestCase.java",
                    "full name": "src.test.java.org.apache.commons.io.FileUtilsTestCase.test_openOutputStream_existsButIsDirectory"
                },
                {
                    "function name": "testCopyDirectoryExceptions",
                    "function params": [],
                    "file name": "FileUtilsTestCase.java",
                    "file old path": "src/test/java/org/apache/commons/io/FileUtilsTestCase.java",
                    "file new path": "src/test/java/org/apache/commons/io/FileUtilsTestCase.java",
                    "full name": "src.test.java.org.apache.commons.io.FileUtilsTestCase.testCopyDirectoryExceptions"
                },
                {
                    "function name": "testForceMkdir",
                    "function params": [],
                    "file name": "FileUtilsTestCase.java",
                    "file old path": "src/test/java/org/apache/commons/io/FileUtilsTestCase.java",
                    "file new path": "src/test/java/org/apache/commons/io/FileUtilsTestCase.java",
                    "full name": "src.test.java.org.apache.commons.io.FileUtilsTestCase.testForceMkdir"
                },
                {
                    "function name": "testMoveFile_Errors",
                    "function params": [],
                    "file name": "FileUtilsTestCase.java",
                    "file old path": "src/test/java/org/apache/commons/io/FileUtilsTestCase.java",
                    "file new path": "src/test/java/org/apache/commons/io/FileUtilsTestCase.java",
                    "full name": "src.test.java.org.apache.commons.io.FileUtilsTestCase.testMoveFile_Errors"
                },
                {
                    "function name": "testMoveDirectoryToDirectory_Errors",
                    "function params": [],
                    "file name": "FileUtilsTestCase.java",
                    "file old path": "src/test/java/org/apache/commons/io/FileUtilsTestCase.java",
                    "file new path": "src/test/java/org/apache/commons/io/FileUtilsTestCase.java",
                    "full name": "src.test.java.org.apache.commons.io.FileUtilsTestCase.testMoveDirectoryToDirectory_Errors"
                },
                {
                    "function name": "testContentEqualsIgnoreEOL",
                    "function params": [],
                    "file name": "FileUtilsTestCase.java",
                    "file old path": "src/test/java/org/apache/commons/io/FileUtilsTestCase.java",
                    "file new path": "src/test/java/org/apache/commons/io/FileUtilsTestCase.java",
                    "full name": "src.test.java.org.apache.commons.io.FileUtilsTestCase.testContentEqualsIgnoreEOL"
                },
                {
                    "function name": "testCopyToSelf",
                    "function params": [],
                    "file name": "FileUtilsTestCase.java",
                    "file old path": "src/test/java/org/apache/commons/io/FileUtilsTestCase.java",
                    "file new path": "src/test/java/org/apache/commons/io/FileUtilsTestCase.java",
                    "full name": "src.test.java.org.apache.commons.io.FileUtilsTestCase.testCopyToSelf"
                },
                {
                    "function name": "testContentEquals",
                    "function params": [],
                    "file name": "FileUtilsTestCase.java",
                    "file old path": "src/test/java/org/apache/commons/io/FileUtilsTestCase.java",
                    "file new path": "src/test/java/org/apache/commons/io/FileUtilsTestCase.java",
                    "full name": "src.test.java.org.apache.commons.io.FileUtilsTestCase.testContentEquals"
                },
                {
                    "function name": "testMoveFile_CopyDelete_Failed",
                    "function params": [],
                    "file name": "FileUtilsTestCase.java",
                    "file old path": "src/test/java/org/apache/commons/io/FileUtilsTestCase.java",
                    "file new path": "src/test/java/org/apache/commons/io/FileUtilsTestCase.java",
                    "full name": "src.test.java.org.apache.commons.io.FileUtilsTestCase.testMoveFile_CopyDelete_Failed"
                }
            ],
            "files that changed": [
                "src/main/java/org/apache/commons/io/FileUtils.java",
                "src/test/java/org/apache/commons/io/FileUtilsCopyDirectoryToDirectoryTestCase.java",
                "src/test/java/org/apache/commons/io/FileUtilsTestCase.java"
            ]
        },
        {
            "bug index": "78",
            "bug id": "IO-174",
            "hexsha": "651332ef291809e8271cec74fdd6691cfb725f9f",
            "fix_hash": "9e8d03a2ef565d32d09c795e1e29642ba48bd1c7",
            "description": "In the Java specs for [*java.io.Reader.close()*|http://java.sun.com/j2se/1.5.0/docs/api/java/io/Reader.html#close()], it states\n{panel}\nOnce a stream has been closed, further read(), ready(), mark(), or reset() invocations will throw an IOException\n{panel}\nHowever, the *org.apache.commons.io.input.CharSequenceReader* does not do this, but instead resets the file back to the start when it is closed. This causes problems when passing this reader to some libraries (albeit admittedly poorly written ones) that rely on *read* throwing an *IOException* after the reader has been closed.",
            "commit number version hash": 499,
            "commit number": 1883,
            "function that changed": [
                {
                    "function name": "moveDirectoryToDirectory",
                    "function params": [
                        "src",
                        "destDir",
                        "createDestDir"
                    ],
                    "file name": "FileUtils.java",
                    "file old path": "src/main/java/org/apache/commons/io/FileUtils.java",
                    "file new path": "src/main/java/org/apache/commons/io/FileUtils.java",
                    "full name": "src.main.java.org.apache.commons.io.FileUtils.moveDirectoryToDirectory"
                }
            ],
            "files that changed": [
                "src/main/java/org/apache/commons/io/FileUtils.java"
            ]
        },
        {
            "bug index": "79",
            "bug id": "IO-600",
            "hexsha": "94be75e45726aeab75681b0b8570ecc4826a2384",
            "fix_hash": "558e930612120d8594fa3cdbca15788da19c184c",
            "description": "On most unix filesystems only null byte and / are reserved characters. So its perfectly valid to have a file called \"C:\".\r\n\r\nIf the getPrefixLength method is called for the path of such a file then it returns 2 whereas the expected value is 0.",
            "commit number version hash": 2059,
            "commit number": 1879,
            "function that changed": [
                {
                    "function name": "getPrefixLength",
                    "function params": [
                        "fileName"
                    ],
                    "file name": "FilenameUtils.java",
                    "file old path": "src/main/java/org/apache/commons/io/FilenameUtils.java",
                    "file new path": "src/main/java/org/apache/commons/io/FilenameUtils.java",
                    "full name": "src.main.java.org.apache.commons.io.FilenameUtils.getPrefixLength"
                },
                {
                    "function name": "testGetFullPathNoEndSeparator",
                    "function params": [],
                    "file name": "FilenameUtilsTestCase.java",
                    "file old path": "src/test/java/org/apache/commons/io/FilenameUtilsTestCase.java",
                    "file new path": "src/test/java/org/apache/commons/io/FilenameUtilsTestCase.java",
                    "full name": "src.test.java.org.apache.commons.io.FilenameUtilsTestCase.testGetFullPathNoEndSeparator"
                },
                {
                    "function name": "testGetFullPath",
                    "function params": [],
                    "file name": "FilenameUtilsTestCase.java",
                    "file old path": "src/test/java/org/apache/commons/io/FilenameUtilsTestCase.java",
                    "file new path": "src/test/java/org/apache/commons/io/FilenameUtilsTestCase.java",
                    "full name": "src.test.java.org.apache.commons.io.FilenameUtilsTestCase.testGetFullPath"
                },
                {
                    "function name": "testGetPrefixLength",
                    "function params": [],
                    "file name": "FilenameUtilsTestCase.java",
                    "file old path": "src/test/java/org/apache/commons/io/FilenameUtilsTestCase.java",
                    "file new path": "src/test/java/org/apache/commons/io/FilenameUtilsTestCase.java",
                    "full name": "src.test.java.org.apache.commons.io.FilenameUtilsTestCase.testGetPrefixLength"
                },
                {
                    "function name": "testGetPrefix",
                    "function params": [],
                    "file name": "FilenameUtilsTestCase.java",
                    "file old path": "src/test/java/org/apache/commons/io/FilenameUtilsTestCase.java",
                    "file new path": "src/test/java/org/apache/commons/io/FilenameUtilsTestCase.java",
                    "full name": "src.test.java.org.apache.commons.io.FilenameUtilsTestCase.testGetPrefix"
                }
            ],
            "files that changed": [
                "src/main/java/org/apache/commons/io/FilenameUtils.java",
                "src/test/java/org/apache/commons/io/FilenameUtilsTestCase.java"
            ]
        },
        {
            "bug index": "80",
            "bug id": "IO-694",
            "hexsha": "94be75e45726aeab75681b0b8570ecc4826a2384",
            "fix_hash": "a0dc657e9a068650a675c1b894a84022dbb8ca06",
            "description": "API documentation for FileUtils.copyDirectory() says:\r\n{quote}Note: This method tries to preserve the files' last modified date/times using File.setLastModified(long), however it is not guaranteed that those operations will succeed. If the modification operation fails, *no indication is provided*.\r\n{quote}\r\n(bold emphasis added)\r\n\r\nIn version 2.7 the \"no indication is provided\" part is true - if the last modified date/times could not changed, then the FileUtils.copyDirectory() will still succeed.\r\n\r\nIn version 2.8.0, if the last modified date/times could not changed, then the FileUtils.copyDirectory() will throw an IOException. However, the API documentation is not updated, so the documentation and the implementation are inconsistent.\r\n\r\nThe behaviour change in 2.8.0 can be traced to commit b99b3f9f484074454c6d67ec658a4e0e8555ffd2 (Throw an IOException if calling setLastModified() fails.).\r\n\r\nPlease do *one* of the following:\r\n * Update the documentation to say that an IOException will be thrown.\r\n * Revert the implementation to the previous behaviour.\r\n\r\nThanks.",
            "commit number version hash": 2059,
            "commit number": 1857,
            "function that changed": [],
            "files that changed": [
                "src/main/java/org/apache/commons/io/FileUtils.java"
            ]
        },
        {
            "bug index": "81",
            "bug id": "IO-694",
            "hexsha": "94be75e45726aeab75681b0b8570ecc4826a2384",
            "fix_hash": "6ad5a5e4ea9b1d0281bc1732c63aea076e995dac",
            "description": "API documentation for FileUtils.copyDirectory() says:\r\n{quote}Note: This method tries to preserve the files' last modified date/times using File.setLastModified(long), however it is not guaranteed that those operations will succeed. If the modification operation fails, *no indication is provided*.\r\n{quote}\r\n(bold emphasis added)\r\n\r\nIn version 2.7 the \"no indication is provided\" part is true - if the last modified date/times could not changed, then the FileUtils.copyDirectory() will still succeed.\r\n\r\nIn version 2.8.0, if the last modified date/times could not changed, then the FileUtils.copyDirectory() will throw an IOException. However, the API documentation is not updated, so the documentation and the implementation are inconsistent.\r\n\r\nThe behaviour change in 2.8.0 can be traced to commit b99b3f9f484074454c6d67ec658a4e0e8555ffd2 (Throw an IOException if calling setLastModified() fails.).\r\n\r\nPlease do *one* of the following:\r\n * Update the documentation to say that an IOException will be thrown.\r\n * Revert the implementation to the previous behaviour.\r\n\r\nThanks.",
            "commit number version hash": 2059,
            "commit number": 1856,
            "function that changed": [],
            "files that changed": [
                "src/main/java/org/apache/commons/io/FileUtils.java"
            ]
        },
        {
            "bug index": "82",
            "bug id": "IO-692",
            "hexsha": "94be75e45726aeab75681b0b8570ecc4826a2384",
            "fix_hash": "167effda26f5fabfef36a9878f0a0ce395855d10",
            "description": "*PathUtils.delete* throws an Exception when deleting a symlink to a file that doesn't exist, in our case this was when the files were deleted out of sequence.\r\n\r\nMinimal reproducing code running as a unit test (scala). This creates a symlink to a fail that does not exist at all.\r\n{code:java}\r\nval file = Files.createSymbolicLink(\r\n  Paths.get(\"target\", \"x.txt\"),\r\n  Paths.get(\"target\",  \"y.txt\").toAbsolutePath,\r\n)\r\nPathUtils.delete(file)\r\n{code}\r\nThis throws the following exception\r\n{noformat}\r\n[error]    java.nio.file.NoSuchFileException: target/x.txt (UnixException.java:86)\r\n[error] sun.nio.fs.UnixException.translateToIOException(UnixException.java:86)\r\n[error] sun.nio.fs.UnixException.rethrowAsIOException(UnixException.java:102)\r\n[error] sun.nio.fs.UnixException.rethrowAsIOException(UnixException.java:107)\r\n[error] sun.nio.fs.UnixFileAttributeViews$Basic.readAttributes(UnixFileAttributeViews.java:55)\r\n[error] sun.nio.fs.UnixFileSystemProvider.readAttributes(UnixFileSystemProvider.java:144)\r\n[error] org.apache.commons.io.file.PathUtils.deleteFile(PathUtils.java:361)\r\n[error] org.apache.commons.io.file.PathUtils.delete(PathUtils.java:304)\r\n[error] org.apache.commons.io.file.PathUtils.delete(PathUtils.java:280){noformat}\r\nThe offending code is this in\u00a0*PathUtils*\r\n{code:java}\r\npublic static PathCounters deleteFile(final Path file, final DeleteOption... options) throws IOException {\r\n    // Files.deleteIfExists() never follows links, so use LinkOption.NOFOLLOW_LINKS in other calls to Files.\r\n    if (Files.isDirectory(file, LinkOption.NOFOLLOW_LINKS)) {\r\n        throw new NoSuchFileException(file.toString());\r\n    }\r\n    final PathCounters pathCounts = Counters.longPathCounters();\r\n    final boolean exists = Files.exists(file, LinkOption.NOFOLLOW_LINKS);\r\n    final long size = exists ? Files.size(file) : 0;\r\n    if (overrideReadOnly(options) && exists) {\r\n        setReadOnly(file, false, LinkOption.NOFOLLOW_LINKS);\r\n    }\r\n    if (Files.deleteIfExists(file)) {\r\n        pathCounts.getFileCounter().increment();\r\n        pathCounts.getByteCounter().add(size);\r\n    }\r\n    return pathCounts;\r\n}\r\n{code}\r\nThis manifests because\u00a0\r\n{code:java}\r\nFiles.exists(file, LinkOption.NOFOLLOW_LINKS); // this always returns true if the symlink exists\r\n\r\nFiles.size(file) // this throws an exception because there is no file to check the size of{code}\r\nA guess at the solution would be to only check the size if the file exists and is not a symlink\r\n{code:java}\r\nfinal long size = exists && !Files.isSymbolicLink() ? Files.size(file) : 0;{code}\r\nThis was discovered when using *FileUtils.deleteDirectory*\u00a0where we have a structure like the following. We clean up these directories when the process finishes, since upgrading to 2.8.0 this fails if the parent directory is deleted before the child.\r\n{code:java}\r\n work_dir/\r\n   parent_dir/\r\n     big_file.txt\r\n   child_dir/\r\n     symlink_to_big_file.txt{code}\r\nAs a work around using\u00a0*PathUtils.deleteDirectory* seems to work regardless of the deletion order\r\n\r\n\u00a0",
            "commit number version hash": 2059,
            "commit number": 1849,
            "function that changed": [
                {
                    "function name": "deleteFile",
                    "function params": [
                        "file",
                        "linkOptions",
                        "deleteOptions"
                    ],
                    "file name": "PathUtils.java",
                    "file old path": "src/main/java/org/apache/commons/io/file/PathUtils.java",
                    "file new path": "src/main/java/org/apache/commons/io/file/PathUtils.java",
                    "full name": "src.main.java.org.apache.commons.io.file.PathUtils.deleteFile"
                },
                {
                    "function name": "testDeleteBrokenLink",
                    "function params": [],
                    "file name": "PathUtilsDeleteFileTest.java",
                    "file old path": "src/test/java/org/apache/commons/io/file/PathUtilsDeleteFileTest.java",
                    "file new path": "src/test/java/org/apache/commons/io/file/PathUtilsDeleteFileTest.java",
                    "full name": "src.test.java.org.apache.commons.io.file.PathUtilsDeleteFileTest.testDeleteBrokenLink"
                }
            ],
            "files that changed": [
                "src/main/java/org/apache/commons/io/file/PathUtils.java",
                "src/test/java/org/apache/commons/io/file/PathUtilsDeleteFileTest.java"
            ]
        },
        {
            "bug index": "83",
            "bug id": "IO-2",
            "hexsha": "742c51feeaf75542ab9db6782ad3d2ad506fb871",
            "fix_hash": "2bc7e31f1dee0cb6ff4f3c57a63ac09cd4c2d1aa",
            "description": "Hi,\n\n(sorry to assign it to the wrong component, but I cannot choose for IO)\n\nwhen I try to concat 2 paths with \"\\\" as path separator instead of \"/\", an\nexception is thrown. I'll upload a patch for this as well as a junit test.\n\ne.g.: FilenameUtils.catPath(\"C:\\\\temp\\\\\", \"test\") throws an exception ...\n\nMaarten",
            "commit number version hash": 443,
            "commit number": 1848,
            "function that changed": [
                {
                    "function name": "verifiedListFiles",
                    "function params": [
                        "directory"
                    ],
                    "file name": "FileUtils.java",
                    "file old path": "src/main/java/org/apache/commons/io/FileUtils.java",
                    "file new path": "src/main/java/org/apache/commons/io/FileUtils.java",
                    "full name": "src.main.java.org.apache.commons.io.FileUtils.verifiedListFiles"
                },
                {
                    "function name": "isFileNewer",
                    "function params": [
                        "file",
                        "reference"
                    ],
                    "file name": "FileUtils.java",
                    "file old path": "src/main/java/org/apache/commons/io/FileUtils.java",
                    "file new path": "src/main/java/org/apache/commons/io/FileUtils.java",
                    "full name": "src.main.java.org.apache.commons.io.FileUtils.isFileNewer"
                },
                {
                    "function name": "sizeOfDirectory",
                    "function params": [
                        "directory"
                    ],
                    "file name": "FileUtils.java",
                    "file old path": "src/main/java/org/apache/commons/io/FileUtils.java",
                    "file new path": "src/main/java/org/apache/commons/io/FileUtils.java",
                    "full name": "src.main.java.org.apache.commons.io.FileUtils.sizeOfDirectory"
                },
                {
                    "function name": "copyFile",
                    "function params": [
                        "srcFile",
                        "destFile",
                        "preserveFileDate",
                        "copyOptions"
                    ],
                    "file name": "FileUtils.java",
                    "file old path": "src/main/java/org/apache/commons/io/FileUtils.java",
                    "file new path": "src/main/java/org/apache/commons/io/FileUtils.java",
                    "full name": "src.main.java.org.apache.commons.io.FileUtils.copyFile"
                },
                {
                    "function name": "directoryContains",
                    "function params": [
                        "directory",
                        "child"
                    ],
                    "file name": "FileUtils.java",
                    "file old path": "src/main/java/org/apache/commons/io/FileUtils.java",
                    "file new path": "src/main/java/org/apache/commons/io/FileUtils.java",
                    "full name": "src.main.java.org.apache.commons.io.FileUtils.directoryContains"
                },
                {
                    "function name": "forceDelete",
                    "function params": [
                        "file"
                    ],
                    "file name": "FileUtils.java",
                    "file old path": "src/main/java/org/apache/commons/io/FileUtils.java",
                    "file new path": "src/main/java/org/apache/commons/io/FileUtils.java",
                    "full name": "src.main.java.org.apache.commons.io.FileUtils.forceDelete"
                },
                {
                    "function name": "requireDirectory",
                    "function params": [
                        "directory",
                        "param"
                    ],
                    "file name": "FileUtils.java",
                    "file old path": "src/main/java/org/apache/commons/io/FileUtils.java",
                    "file new path": "src/main/java/org/apache/commons/io/FileUtils.java",
                    "full name": "src.main.java.org.apache.commons.io.FileUtils.requireDirectory"
                },
                {
                    "function name": "requireExists",
                    "function params": [
                        "file",
                        "param"
                    ],
                    "file name": "FileUtils.java",
                    "file old path": "src/main/java/org/apache/commons/io/FileUtils.java",
                    "file new path": "src/main/java/org/apache/commons/io/FileUtils.java",
                    "full name": "src.main.java.org.apache.commons.io.FileUtils.requireExists"
                },
                {
                    "function name": "requireFile",
                    "function params": [
                        "file",
                        "param"
                    ],
                    "file name": "FileUtils.java",
                    "file old path": "src/main/java/org/apache/commons/io/FileUtils.java",
                    "file new path": "src/main/java/org/apache/commons/io/FileUtils.java",
                    "full name": "src.main.java.org.apache.commons.io.FileUtils.requireFile"
                },
                {
                    "function name": "sizeOf",
                    "function params": [
                        "file"
                    ],
                    "file name": "FileUtils.java",
                    "file old path": "src/main/java/org/apache/commons/io/FileUtils.java",
                    "file new path": "src/main/java/org/apache/commons/io/FileUtils.java",
                    "full name": "src.main.java.org.apache.commons.io.FileUtils.sizeOf"
                },
                {
                    "function name": "requireFileRequirements",
                    "function params": [
                        "source",
                        "destination"
                    ],
                    "file name": "FileUtils.java",
                    "file old path": "src/main/java/org/apache/commons/io/FileUtils.java",
                    "file new path": "src/main/java/org/apache/commons/io/FileUtils.java",
                    "full name": "src.main.java.org.apache.commons.io.FileUtils.requireFileRequirements"
                },
                {
                    "function name": "doCopyFile",
                    "function params": [
                        "srcFile",
                        "destFile",
                        "preserveFileDate",
                        "copyOptions"
                    ],
                    "file name": "FileUtils.java",
                    "file old path": "src/main/java/org/apache/commons/io/FileUtils.java",
                    "file new path": "src/main/java/org/apache/commons/io/FileUtils.java",
                    "full name": "src.main.java.org.apache.commons.io.FileUtils.doCopyFile"
                },
                {
                    "function name": "checksum",
                    "function params": [
                        "file",
                        "checksum"
                    ],
                    "file name": "FileUtils.java",
                    "file old path": "src/main/java/org/apache/commons/io/FileUtils.java",
                    "file new path": "src/main/java/org/apache/commons/io/FileUtils.java",
                    "full name": "src.main.java.org.apache.commons.io.FileUtils.checksum"
                },
                {
                    "function name": "isFileOlder",
                    "function params": [
                        "file",
                        "reference"
                    ],
                    "file name": "FileUtils.java",
                    "file old path": "src/main/java/org/apache/commons/io/FileUtils.java",
                    "file new path": "src/main/java/org/apache/commons/io/FileUtils.java",
                    "full name": "src.main.java.org.apache.commons.io.FileUtils.isFileOlder"
                },
                {
                    "function name": "sizeOfAsBigInteger",
                    "function params": [
                        "file"
                    ],
                    "file name": "FileUtils.java",
                    "file old path": "src/main/java/org/apache/commons/io/FileUtils.java",
                    "file new path": "src/main/java/org/apache/commons/io/FileUtils.java",
                    "full name": "src.main.java.org.apache.commons.io.FileUtils.sizeOfAsBigInteger"
                },
                {
                    "function name": "sizeOfDirectoryAsBigInteger",
                    "function params": [
                        "directory"
                    ],
                    "file name": "FileUtils.java",
                    "file old path": "src/main/java/org/apache/commons/io/FileUtils.java",
                    "file new path": "src/main/java/org/apache/commons/io/FileUtils.java",
                    "full name": "src.main.java.org.apache.commons.io.FileUtils.sizeOfDirectoryAsBigInteger"
                },
                {
                    "function name": "copyDirectory",
                    "function params": [
                        "srcDir",
                        "destDir",
                        "filter",
                        "preserveFileDate",
                        "copyOptions"
                    ],
                    "file name": "FileUtils.java",
                    "file old path": "src/main/java/org/apache/commons/io/FileUtils.java",
                    "file new path": "src/main/java/org/apache/commons/io/FileUtils.java",
                    "full name": "src.main.java.org.apache.commons.io.FileUtils.copyDirectory"
                },
                {
                    "function name": "requireEqualSizes",
                    "function params": [
                        "srcFile",
                        "destFile",
                        "srcLen",
                        "dstLen"
                    ],
                    "file name": "FileUtils.java",
                    "file old path": "src/main/java/org/apache/commons/io/FileUtils.java",
                    "file new path": "src/main/java/org/apache/commons/io/FileUtils.java",
                    "full name": "src.main.java.org.apache.commons.io.FileUtils.requireEqualSizes"
                },
                {
                    "function name": "DeletingPathVisitor",
                    "function params": [
                        "pathCounter",
                        "deleteOption",
                        "skip"
                    ],
                    "file name": "DeletingPathVisitor.java",
                    "file old path": "src/main/java/org/apache/commons/io/file/DeletingPathVisitor.java",
                    "file new path": "src/main/java/org/apache/commons/io/file/DeletingPathVisitor.java",
                    "full name": "src.main.java.org.apache.commons.io.file.DeletingPathVisitor.DeletingPathVisitor"
                },
                {
                    "function name": "DeletingPathVisitor",
                    "function params": [
                        "pathCounter",
                        "linkOptions",
                        "deleteOption",
                        "skip"
                    ],
                    "file name": "DeletingPathVisitor.java",
                    "file old path": "src/main/java/org/apache/commons/io/file/DeletingPathVisitor.java",
                    "file new path": "src/main/java/org/apache/commons/io/file/DeletingPathVisitor.java",
                    "full name": "src.main.java.org.apache.commons.io.file.DeletingPathVisitor.DeletingPathVisitor"
                },
                {
                    "function name": "delete",
                    "function params": [
                        "path",
                        "deleteOptions"
                    ],
                    "file name": "PathUtils.java",
                    "file old path": "src/main/java/org/apache/commons/io/file/PathUtils.java",
                    "file new path": "src/main/java/org/apache/commons/io/file/PathUtils.java",
                    "full name": "src.main.java.org.apache.commons.io.file.PathUtils.delete"
                },
                {
                    "function name": "overrideReadOnly",
                    "function params": [
                        "options"
                    ],
                    "file name": "PathUtils.java",
                    "file old path": "src/main/java/org/apache/commons/io/file/PathUtils.java",
                    "file new path": "src/main/java/org/apache/commons/io/file/PathUtils.java",
                    "full name": "src.main.java.org.apache.commons.io.file.PathUtils.overrideReadOnly"
                },
                {
                    "function name": "overrideReadOnly",
                    "function params": [
                        "deleteOptions"
                    ],
                    "file name": "PathUtils.java",
                    "file old path": "src/main/java/org/apache/commons/io/file/PathUtils.java",
                    "file new path": "src/main/java/org/apache/commons/io/file/PathUtils.java",
                    "full name": "src.main.java.org.apache.commons.io.file.PathUtils.overrideReadOnly"
                },
                {
                    "function name": "setReadOnly",
                    "function params": [
                        "path",
                        "readOnly",
                        "linkOptions"
                    ],
                    "file name": "PathUtils.java",
                    "file old path": "src/main/java/org/apache/commons/io/file/PathUtils.java",
                    "file new path": "src/main/java/org/apache/commons/io/file/PathUtils.java",
                    "full name": "src.main.java.org.apache.commons.io.file.PathUtils.setReadOnly"
                },
                {
                    "function name": "deleteFile",
                    "function params": [
                        "file",
                        "linkOptions",
                        "deleteOptions"
                    ],
                    "file name": "PathUtils.java",
                    "file old path": "src/main/java/org/apache/commons/io/file/PathUtils.java",
                    "file new path": "src/main/java/org/apache/commons/io/file/PathUtils.java",
                    "full name": "src.main.java.org.apache.commons.io.file.PathUtils.deleteFile"
                },
                {
                    "function name": "setReadOnly",
                    "function params": [
                        "path",
                        "readOnly",
                        "options"
                    ],
                    "file name": "PathUtils.java",
                    "file old path": "src/main/java/org/apache/commons/io/file/PathUtils.java",
                    "file new path": "src/main/java/org/apache/commons/io/file/PathUtils.java",
                    "full name": "src.main.java.org.apache.commons.io.file.PathUtils.setReadOnly"
                },
                {
                    "function name": "deleteDirectory",
                    "function params": [
                        "directory",
                        "deleteOptions"
                    ],
                    "file name": "PathUtils.java",
                    "file old path": "src/main/java/org/apache/commons/io/file/PathUtils.java",
                    "file new path": "src/main/java/org/apache/commons/io/file/PathUtils.java",
                    "full name": "src.main.java.org.apache.commons.io.file.PathUtils.deleteDirectory"
                },
                {
                    "function name": "deleteDirectory",
                    "function params": [
                        "directory",
                        "options"
                    ],
                    "file name": "PathUtils.java",
                    "file old path": "src/main/java/org/apache/commons/io/file/PathUtils.java",
                    "file new path": "src/main/java/org/apache/commons/io/file/PathUtils.java",
                    "full name": "src.main.java.org.apache.commons.io.file.PathUtils.deleteDirectory"
                },
                {
                    "function name": "deleteFile",
                    "function params": [
                        "file",
                        "options"
                    ],
                    "file name": "PathUtils.java",
                    "file old path": "src/main/java/org/apache/commons/io/file/PathUtils.java",
                    "file new path": "src/main/java/org/apache/commons/io/file/PathUtils.java",
                    "full name": "src.main.java.org.apache.commons.io.file.PathUtils.deleteFile"
                },
                {
                    "function name": "deleteFile",
                    "function params": [
                        "file",
                        "deleteOptions"
                    ],
                    "file name": "PathUtils.java",
                    "file old path": "src/main/java/org/apache/commons/io/file/PathUtils.java",
                    "file new path": "src/main/java/org/apache/commons/io/file/PathUtils.java",
                    "full name": "src.main.java.org.apache.commons.io.file.PathUtils.deleteFile"
                },
                {
                    "function name": "deleteDirectory",
                    "function params": [
                        "directory",
                        "linkOptions",
                        "deleteOptions"
                    ],
                    "file name": "PathUtils.java",
                    "file old path": "src/main/java/org/apache/commons/io/file/PathUtils.java",
                    "file new path": "src/main/java/org/apache/commons/io/file/PathUtils.java",
                    "full name": "src.main.java.org.apache.commons.io.file.PathUtils.deleteDirectory"
                },
                {
                    "function name": "delete",
                    "function params": [
                        "path",
                        "linkOptions",
                        "deleteOptions"
                    ],
                    "file name": "PathUtils.java",
                    "file old path": "src/main/java/org/apache/commons/io/file/PathUtils.java",
                    "file new path": "src/main/java/org/apache/commons/io/file/PathUtils.java",
                    "full name": "src.main.java.org.apache.commons.io.file.PathUtils.delete"
                },
                {
                    "function name": "cleanDirectory",
                    "function params": [
                        "directory",
                        "options"
                    ],
                    "file name": "PathUtils.java",
                    "file old path": "src/main/java/org/apache/commons/io/file/PathUtils.java",
                    "file new path": "src/main/java/org/apache/commons/io/file/PathUtils.java",
                    "full name": "src.main.java.org.apache.commons.io.file.PathUtils.cleanDirectory"
                },
                {
                    "function name": "delete",
                    "function params": [
                        "path",
                        "options"
                    ],
                    "file name": "PathUtils.java",
                    "file old path": "src/main/java/org/apache/commons/io/file/PathUtils.java",
                    "file new path": "src/main/java/org/apache/commons/io/file/PathUtils.java",
                    "full name": "src.main.java.org.apache.commons.io.file.PathUtils.delete"
                },
                {
                    "function name": "cleanDirectory",
                    "function params": [
                        "directory",
                        "deleteOptions"
                    ],
                    "file name": "PathUtils.java",
                    "file old path": "src/main/java/org/apache/commons/io/file/PathUtils.java",
                    "file new path": "src/main/java/org/apache/commons/io/file/PathUtils.java",
                    "full name": "src.main.java.org.apache.commons.io.file.PathUtils.cleanDirectory"
                }
            ],
            "files that changed": [
                "src/main/java/org/apache/commons/io/FileUtils.java",
                "src/main/java/org/apache/commons/io/file/CleaningPathVisitor.java",
                "src/main/java/org/apache/commons/io/file/DeletingPathVisitor.java",
                "src/main/java/org/apache/commons/io/file/PathUtils.java"
            ]
        },
        {
            "bug index": "84",
            "bug id": "IO-2",
            "hexsha": "742c51feeaf75542ab9db6782ad3d2ad506fb871",
            "fix_hash": "8ae947bcc796d73b0eab7d94f10a002f66896af3",
            "description": "Hi,\n\n(sorry to assign it to the wrong component, but I cannot choose for IO)\n\nwhen I try to concat 2 paths with \"\\\" as path separator instead of \"/\", an\nexception is thrown. I'll upload a patch for this as well as a junit test.\n\ne.g.: FilenameUtils.catPath(\"C:\\\\temp\\\\\", \"test\") throws an exception ...\n\nMaarten",
            "commit number version hash": 443,
            "commit number": 1844,
            "function that changed": [
                {
                    "function name": "forceDelete",
                    "function params": [
                        "file"
                    ],
                    "file name": "FileUtils.java",
                    "file old path": "src/main/java/org/apache/commons/io/FileUtils.java",
                    "file new path": "src/main/java/org/apache/commons/io/FileUtils.java",
                    "full name": "src.main.java.org.apache.commons.io.FileUtils.forceDelete"
                },
                {
                    "function name": "testForceDeleteReadOnlyFile",
                    "function params": [],
                    "file name": "FileUtilsTestCase.java",
                    "file old path": "src/test/java/org/apache/commons/io/FileUtilsTestCase.java",
                    "file new path": "src/test/java/org/apache/commons/io/FileUtilsTestCase.java",
                    "full name": "src.test.java.org.apache.commons.io.FileUtilsTestCase.testForceDeleteReadOnlyFile"
                }
            ],
            "files that changed": [
                "src/main/java/org/apache/commons/io/FileUtils.java",
                "src/test/java/org/apache/commons/io/FileUtilsTestCase.java"
            ]
        },
        {
            "bug index": "85",
            "bug id": "IO-597",
            "hexsha": "94be75e45726aeab75681b0b8570ecc4826a2384",
            "fix_hash": "4a514d3306b55b3667d1449ebd4cbe5f19dd7af0",
            "description": "FileUtils.iterateFiles goes out of memory when executed for a directory with large number of files because it uses the listFiles method which returns an array of java.io.File objects. The iterator itself should not be derived from a list but from a Java Stream which will have lesser memory footprint. This feature however can be used only with Java 8 or later because streams were introduced only in Java 8.",
            "commit number version hash": 2059,
            "commit number": 1823,
            "function that changed": [
                {
                    "function name": "iterateFiles",
                    "function params": [
                        "directory",
                        "extensions",
                        "recursive"
                    ],
                    "file name": "FileUtils.java",
                    "file old path": "src/main/java/org/apache/commons/io/FileUtils.java",
                    "file new path": "src/main/java/org/apache/commons/io/FileUtils.java",
                    "full name": "src.main.java.org.apache.commons.io.FileUtils.iterateFiles"
                },
                {
                    "function name": "iterateFilesAndDirs",
                    "function params": [
                        "directory",
                        "fileFilter",
                        "dirFilter"
                    ],
                    "file name": "FileUtils.java",
                    "file old path": "src/main/java/org/apache/commons/io/FileUtils.java",
                    "file new path": "src/main/java/org/apache/commons/io/FileUtils.java",
                    "full name": "src.main.java.org.apache.commons.io.FileUtils.iterateFilesAndDirs"
                },
                {
                    "function name": "listFilesAndDirs",
                    "function params": [
                        "directory",
                        "fileFilter",
                        "dirFilter"
                    ],
                    "file name": "FileUtils.java",
                    "file old path": "src/main/java/org/apache/commons/io/FileUtils.java",
                    "file new path": "src/main/java/org/apache/commons/io/FileUtils.java",
                    "full name": "src.main.java.org.apache.commons.io.FileUtils.listFilesAndDirs"
                },
                {
                    "function name": "listAccumulate",
                    "function params": [
                        "directory",
                        "fileFilter",
                        "dirFilter"
                    ],
                    "file name": "FileUtils.java",
                    "file old path": "src/main/java/org/apache/commons/io/FileUtils.java",
                    "file new path": "src/main/java/org/apache/commons/io/FileUtils.java",
                    "full name": "src.main.java.org.apache.commons.io.FileUtils.listAccumulate"
                },
                {
                    "function name": "streamFiles",
                    "function params": [
                        "directory",
                        "recursive",
                        "extensions"
                    ],
                    "file name": "FileUtils.java",
                    "file old path": "src/main/java/org/apache/commons/io/FileUtils.java",
                    "file new path": "src/main/java/org/apache/commons/io/FileUtils.java",
                    "full name": "src.main.java.org.apache.commons.io.FileUtils.streamFiles"
                },
                {
                    "function name": "toMaxDepth",
                    "function params": [
                        "recursive"
                    ],
                    "file name": "FileUtils.java",
                    "file old path": "src/main/java/org/apache/commons/io/FileUtils.java",
                    "file new path": "src/main/java/org/apache/commons/io/FileUtils.java",
                    "full name": "src.main.java.org.apache.commons.io.FileUtils.toMaxDepth"
                },
                {
                    "function name": "listFiles",
                    "function params": [
                        "directory",
                        "extensions",
                        "recursive"
                    ],
                    "file name": "FileUtils.java",
                    "file old path": "src/main/java/org/apache/commons/io/FileUtils.java",
                    "file new path": "src/main/java/org/apache/commons/io/FileUtils.java",
                    "full name": "src.main.java.org.apache.commons.io.FileUtils.listFiles"
                },
                {
                    "function name": "iterateFiles",
                    "function params": [
                        "directory",
                        "fileFilter",
                        "dirFilter"
                    ],
                    "file name": "FileUtils.java",
                    "file old path": "src/main/java/org/apache/commons/io/FileUtils.java",
                    "file new path": "src/main/java/org/apache/commons/io/FileUtils.java",
                    "full name": "src.main.java.org.apache.commons.io.FileUtils.iterateFiles"
                },
                {
                    "function name": "listFiles",
                    "function params": [
                        "directory",
                        "fileFilter",
                        "dirFilter"
                    ],
                    "file name": "FileUtils.java",
                    "file old path": "src/main/java/org/apache/commons/io/FileUtils.java",
                    "file new path": "src/main/java/org/apache/commons/io/FileUtils.java",
                    "full name": "src.main.java.org.apache.commons.io.FileUtils.listFiles"
                },
                {
                    "function name": "toList",
                    "function params": [
                        "stream"
                    ],
                    "file name": "FileUtils.java",
                    "file old path": "src/main/java/org/apache/commons/io/FileUtils.java",
                    "file new path": "src/main/java/org/apache/commons/io/FileUtils.java",
                    "full name": "src.main.java.org.apache.commons.io.FileUtils.toList"
                },
                {
                    "function name": "StreamIterator",
                    "function params": [
                        "stream"
                    ],
                    "file name": "StreamIterator.java",
                    "file old path": null,
                    "file new path": "src/main/java/org/apache/commons/io/StreamIterator.java",
                    "full name": "src.main.java.org.apache.commons.io.StreamIterator.StreamIterator"
                },
                {
                    "function name": "hasNext",
                    "function params": [],
                    "file name": "StreamIterator.java",
                    "file old path": null,
                    "file new path": "src/main/java/org/apache/commons/io/StreamIterator.java",
                    "full name": "src.main.java.org.apache.commons.io.StreamIterator.hasNext"
                },
                {
                    "function name": "iterator",
                    "function params": [
                        "stream"
                    ],
                    "file name": "StreamIterator.java",
                    "file old path": null,
                    "file new path": "src/main/java/org/apache/commons/io/StreamIterator.java",
                    "full name": "src.main.java.org.apache.commons.io.StreamIterator.iterator"
                },
                {
                    "function name": "next",
                    "function params": [],
                    "file name": "StreamIterator.java",
                    "file old path": null,
                    "file new path": "src/main/java/org/apache/commons/io/StreamIterator.java",
                    "full name": "src.main.java.org.apache.commons.io.StreamIterator.next"
                },
                {
                    "function name": "close",
                    "function params": [],
                    "file name": "StreamIterator.java",
                    "file old path": null,
                    "file new path": "src/main/java/org/apache/commons/io/StreamIterator.java",
                    "full name": "src.main.java.org.apache.commons.io.StreamIterator.close"
                },
                {
                    "function name": "withLongCounters",
                    "function params": [
                        "fileFilter",
                        "dirFilter"
                    ],
                    "file name": "AccumulatorPathVisitor.java",
                    "file old path": "src/main/java/org/apache/commons/io/file/AccumulatorPathVisitor.java",
                    "file new path": "src/main/java/org/apache/commons/io/file/AccumulatorPathVisitor.java",
                    "full name": "src.main.java.org.apache.commons.io.file.AccumulatorPathVisitor.withLongCounters"
                },
                {
                    "function name": "AccumulatorPathVisitor",
                    "function params": [
                        "pathCounter",
                        "pathFilter"
                    ],
                    "file name": "AccumulatorPathVisitor.java",
                    "file old path": "src/main/java/org/apache/commons/io/file/AccumulatorPathVisitor.java",
                    "file new path": "src/main/java/org/apache/commons/io/file/AccumulatorPathVisitor.java",
                    "full name": "src.main.java.org.apache.commons.io.file.AccumulatorPathVisitor.AccumulatorPathVisitor"
                },
                {
                    "function name": "withBigIntegerCounters",
                    "function params": [
                        "pathFilter"
                    ],
                    "file name": "AccumulatorPathVisitor.java",
                    "file old path": "src/main/java/org/apache/commons/io/file/AccumulatorPathVisitor.java",
                    "file new path": "src/main/java/org/apache/commons/io/file/AccumulatorPathVisitor.java",
                    "full name": "src.main.java.org.apache.commons.io.file.AccumulatorPathVisitor.withBigIntegerCounters"
                },
                {
                    "function name": "withBigIntegerCounters",
                    "function params": [
                        "fileFilter",
                        "dirFilter"
                    ],
                    "file name": "AccumulatorPathVisitor.java",
                    "file old path": "src/main/java/org/apache/commons/io/file/AccumulatorPathVisitor.java",
                    "file new path": "src/main/java/org/apache/commons/io/file/AccumulatorPathVisitor.java",
                    "full name": "src.main.java.org.apache.commons.io.file.AccumulatorPathVisitor.withBigIntegerCounters"
                },
                {
                    "function name": "withLongCounters",
                    "function params": [
                        "pathFilter"
                    ],
                    "file name": "AccumulatorPathVisitor.java",
                    "file old path": "src/main/java/org/apache/commons/io/file/AccumulatorPathVisitor.java",
                    "file new path": "src/main/java/org/apache/commons/io/file/AccumulatorPathVisitor.java",
                    "full name": "src.main.java.org.apache.commons.io.file.AccumulatorPathVisitor.withLongCounters"
                },
                {
                    "function name": "AccumulatorPathVisitor",
                    "function params": [
                        "pathCounter",
                        "pathFilter",
                        "dirFilter"
                    ],
                    "file name": "AccumulatorPathVisitor.java",
                    "file old path": "src/main/java/org/apache/commons/io/file/AccumulatorPathVisitor.java",
                    "file new path": "src/main/java/org/apache/commons/io/file/AccumulatorPathVisitor.java",
                    "full name": "src.main.java.org.apache.commons.io.file.AccumulatorPathVisitor.AccumulatorPathVisitor"
                },
                {
                    "function name": "CopyDirectoryVisitor",
                    "function params": [
                        "pathCounter",
                        "fileFilter",
                        "dirFilter",
                        "sourceDirectory",
                        "targetDirectory",
                        "copyOptions"
                    ],
                    "file name": "CopyDirectoryVisitor.java",
                    "file old path": "src/main/java/org/apache/commons/io/file/CopyDirectoryVisitor.java",
                    "file new path": "src/main/java/org/apache/commons/io/file/CopyDirectoryVisitor.java",
                    "full name": "src.main.java.org.apache.commons.io.file.CopyDirectoryVisitor.CopyDirectoryVisitor"
                },
                {
                    "function name": "CopyDirectoryVisitor",
                    "function params": [
                        "pathCounter",
                        "pathFilter",
                        "sourceDirectory",
                        "targetDirectory",
                        "copyOptions"
                    ],
                    "file name": "CopyDirectoryVisitor.java",
                    "file old path": "src/main/java/org/apache/commons/io/file/CopyDirectoryVisitor.java",
                    "file new path": "src/main/java/org/apache/commons/io/file/CopyDirectoryVisitor.java",
                    "full name": "src.main.java.org.apache.commons.io.file.CopyDirectoryVisitor.CopyDirectoryVisitor"
                },
                {
                    "function name": "visitFile",
                    "function params": [
                        "file",
                        "attributes"
                    ],
                    "file name": "CountingPathVisitor.java",
                    "file old path": "src/main/java/org/apache/commons/io/file/CountingPathVisitor.java",
                    "file new path": "src/main/java/org/apache/commons/io/file/CountingPathVisitor.java",
                    "full name": "src.main.java.org.apache.commons.io.file.CountingPathVisitor.visitFile"
                },
                {
                    "function name": "CountingPathVisitor",
                    "function params": [
                        "pathCounter",
                        "pathFilter"
                    ],
                    "file name": "CountingPathVisitor.java",
                    "file old path": "src/main/java/org/apache/commons/io/file/CountingPathVisitor.java",
                    "file new path": "src/main/java/org/apache/commons/io/file/CountingPathVisitor.java",
                    "full name": "src.main.java.org.apache.commons.io.file.CountingPathVisitor.CountingPathVisitor"
                },
                {
                    "function name": "CountingPathVisitor",
                    "function params": [
                        "pathCounter"
                    ],
                    "file name": "CountingPathVisitor.java",
                    "file old path": "src/main/java/org/apache/commons/io/file/CountingPathVisitor.java",
                    "file new path": "src/main/java/org/apache/commons/io/file/CountingPathVisitor.java",
                    "full name": "src.main.java.org.apache.commons.io.file.CountingPathVisitor.CountingPathVisitor"
                },
                {
                    "function name": "preVisitDirectory",
                    "function params": [
                        "dir",
                        "attributes"
                    ],
                    "file name": "CountingPathVisitor.java",
                    "file old path": "src/main/java/org/apache/commons/io/file/CountingPathVisitor.java",
                    "file new path": "src/main/java/org/apache/commons/io/file/CountingPathVisitor.java",
                    "full name": "src.main.java.org.apache.commons.io.file.CountingPathVisitor.preVisitDirectory"
                },
                {
                    "function name": "CountingPathVisitor",
                    "function params": [
                        "pathCounter",
                        "fileFilter",
                        "dirFilter"
                    ],
                    "file name": "CountingPathVisitor.java",
                    "file old path": "src/main/java/org/apache/commons/io/file/CountingPathVisitor.java",
                    "file new path": "src/main/java/org/apache/commons/io/file/CountingPathVisitor.java",
                    "full name": "src.main.java.org.apache.commons.io.file.CountingPathVisitor.CountingPathVisitor"
                },
                {
                    "function name": "newDirectoryStream",
                    "function params": [
                        "dir",
                        "pathFilter"
                    ],
                    "file name": "PathUtils.java",
                    "file old path": "src/main/java/org/apache/commons/io/file/PathUtils.java",
                    "file new path": "src/main/java/org/apache/commons/io/file/PathUtils.java",
                    "full name": "src.main.java.org.apache.commons.io.file.PathUtils.newDirectoryStream"
                },
                {
                    "function name": "walk",
                    "function params": [
                        "start",
                        "pathFilter",
                        "maxDepth",
                        "readAttributes",
                        "options"
                    ],
                    "file name": "PathUtils.java",
                    "file old path": "src/main/java/org/apache/commons/io/file/PathUtils.java",
                    "file new path": "src/main/java/org/apache/commons/io/file/PathUtils.java",
                    "full name": "src.main.java.org.apache.commons.io.file.PathUtils.walk"
                },
                {
                    "function name": "current",
                    "function params": [],
                    "file name": "PathUtils.java",
                    "file old path": "src/main/java/org/apache/commons/io/file/PathUtils.java",
                    "file new path": "src/main/java/org/apache/commons/io/file/PathUtils.java",
                    "full name": "src.main.java.org.apache.commons.io.file.PathUtils.current"
                },
                {
                    "function name": "toFileVisitResult",
                    "function params": [
                        "accept",
                        "path"
                    ],
                    "file name": "AbstractFileFilter.java",
                    "file old path": "src/main/java/org/apache/commons/io/filefilter/AbstractFileFilter.java",
                    "file new path": "src/main/java/org/apache/commons/io/filefilter/AbstractFileFilter.java",
                    "full name": "src.main.java.org.apache.commons.io.filefilter.AbstractFileFilter.toFileVisitResult"
                },
                {
                    "function name": "toFileVisitResult",
                    "function params": [
                        "accept"
                    ],
                    "file name": "AbstractFileFilter.java",
                    "file old path": "src/main/java/org/apache/commons/io/filefilter/AbstractFileFilter.java",
                    "file new path": "src/main/java/org/apache/commons/io/filefilter/AbstractFileFilter.java",
                    "full name": "src.main.java.org.apache.commons.io.filefilter.AbstractFileFilter.toFileVisitResult"
                },
                {
                    "function name": "accept",
                    "function params": [
                        "file",
                        "attributes"
                    ],
                    "file name": "AgeFileFilter.java",
                    "file old path": "src/main/java/org/apache/commons/io/filefilter/AgeFileFilter.java",
                    "file new path": "src/main/java/org/apache/commons/io/filefilter/AgeFileFilter.java",
                    "full name": "src.main.java.org.apache.commons.io.filefilter.AgeFileFilter.accept"
                },
                {
                    "function name": "accept",
                    "function params": [
                        "file",
                        "attributes"
                    ],
                    "file name": "CanExecuteFileFilter.java",
                    "file old path": "src/main/java/org/apache/commons/io/filefilter/CanExecuteFileFilter.java",
                    "file new path": "src/main/java/org/apache/commons/io/filefilter/CanExecuteFileFilter.java",
                    "full name": "src.main.java.org.apache.commons.io.filefilter.CanExecuteFileFilter.accept"
                },
                {
                    "function name": "accept",
                    "function params": [
                        "file",
                        "attributes"
                    ],
                    "file name": "CanReadFileFilter.java",
                    "file old path": "src/main/java/org/apache/commons/io/filefilter/CanReadFileFilter.java",
                    "file new path": "src/main/java/org/apache/commons/io/filefilter/CanReadFileFilter.java",
                    "full name": "src.main.java.org.apache.commons.io.filefilter.CanReadFileFilter.accept"
                },
                {
                    "function name": "accept",
                    "function params": [
                        "file",
                        "attributes"
                    ],
                    "file name": "CanWriteFileFilter.java",
                    "file old path": "src/main/java/org/apache/commons/io/filefilter/CanWriteFileFilter.java",
                    "file new path": "src/main/java/org/apache/commons/io/filefilter/CanWriteFileFilter.java",
                    "full name": "src.main.java.org.apache.commons.io.filefilter.CanWriteFileFilter.accept"
                },
                {
                    "function name": "accept",
                    "function params": [
                        "file",
                        "attributes"
                    ],
                    "file name": "DirectoryFileFilter.java",
                    "file old path": "src/main/java/org/apache/commons/io/filefilter/DirectoryFileFilter.java",
                    "file new path": "src/main/java/org/apache/commons/io/filefilter/DirectoryFileFilter.java",
                    "full name": "src.main.java.org.apache.commons.io.filefilter.DirectoryFileFilter.accept"
                },
                {
                    "function name": "accept",
                    "function params": [
                        "file",
                        "attributes"
                    ],
                    "file name": "EmptyFileFilter.java",
                    "file old path": "src/main/java/org/apache/commons/io/filefilter/EmptyFileFilter.java",
                    "file new path": "src/main/java/org/apache/commons/io/filefilter/EmptyFileFilter.java",
                    "full name": "src.main.java.org.apache.commons.io.filefilter.EmptyFileFilter.accept"
                },
                {
                    "function name": "accept",
                    "function params": [
                        "path",
                        "attributes"
                    ],
                    "file name": "FileEqualsFileFilter.java",
                    "file old path": null,
                    "file new path": "src/main/java/org/apache/commons/io/filefilter/FileEqualsFileFilter.java",
                    "full name": "src.main.java.org.apache.commons.io.filefilter.FileEqualsFileFilter.accept"
                },
                {
                    "function name": "accept",
                    "function params": [
                        "file"
                    ],
                    "file name": "FileEqualsFileFilter.java",
                    "file old path": null,
                    "file new path": "src/main/java/org/apache/commons/io/filefilter/FileEqualsFileFilter.java",
                    "full name": "src.main.java.org.apache.commons.io.filefilter.FileEqualsFileFilter.accept"
                },
                {
                    "function name": "FileEqualsFileFilter",
                    "function params": [
                        "file"
                    ],
                    "file name": "FileEqualsFileFilter.java",
                    "file old path": null,
                    "file new path": "src/main/java/org/apache/commons/io/filefilter/FileEqualsFileFilter.java",
                    "full name": "src.main.java.org.apache.commons.io.filefilter.FileEqualsFileFilter.FileEqualsFileFilter"
                },
                {
                    "function name": "accept",
                    "function params": [
                        "file",
                        "attributes"
                    ],
                    "file name": "FileFileFilter.java",
                    "file old path": "src/main/java/org/apache/commons/io/filefilter/FileFileFilter.java",
                    "file new path": "src/main/java/org/apache/commons/io/filefilter/FileFileFilter.java",
                    "full name": "src.main.java.org.apache.commons.io.filefilter.FileFileFilter.accept"
                },
                {
                    "function name": "makeFileOnly",
                    "function params": [
                        "filter"
                    ],
                    "file name": "FileFilterUtils.java",
                    "file old path": "src/main/java/org/apache/commons/io/filefilter/FileFilterUtils.java",
                    "file new path": "src/main/java/org/apache/commons/io/filefilter/FileFilterUtils.java",
                    "full name": "src.main.java.org.apache.commons.io.filefilter.FileFilterUtils.makeFileOnly"
                },
                {
                    "function name": "fileFileFilter",
                    "function params": [],
                    "file name": "FileFilterUtils.java",
                    "file old path": "src/main/java/org/apache/commons/io/filefilter/FileFilterUtils.java",
                    "file new path": "src/main/java/org/apache/commons/io/filefilter/FileFilterUtils.java",
                    "full name": "src.main.java.org.apache.commons.io.filefilter.FileFilterUtils.fileFileFilter"
                },
                {
                    "function name": "accept",
                    "function params": [
                        "file",
                        "attributes"
                    ],
                    "file name": "HiddenFileFilter.java",
                    "file old path": "src/main/java/org/apache/commons/io/filefilter/HiddenFileFilter.java",
                    "file new path": "src/main/java/org/apache/commons/io/filefilter/HiddenFileFilter.java",
                    "full name": "src.main.java.org.apache.commons.io.filefilter.HiddenFileFilter.accept"
                },
                {
                    "function name": "accept",
                    "function params": [
                        "path",
                        "attributes"
                    ],
                    "file name": "IOFileFilter.java",
                    "file old path": "src/main/java/org/apache/commons/io/filefilter/IOFileFilter.java",
                    "file new path": "src/main/java/org/apache/commons/io/filefilter/IOFileFilter.java",
                    "full name": "src.main.java.org.apache.commons.io.filefilter.IOFileFilter.accept"
                },
                {
                    "function name": "accept",
                    "function params": [
                        "file",
                        "attributes"
                    ],
                    "file name": "MagicNumberFileFilter.java",
                    "file old path": "src/main/java/org/apache/commons/io/filefilter/MagicNumberFileFilter.java",
                    "file new path": "src/main/java/org/apache/commons/io/filefilter/MagicNumberFileFilter.java",
                    "full name": "src.main.java.org.apache.commons.io.filefilter.MagicNumberFileFilter.accept"
                },
                {
                    "function name": "accept",
                    "function params": [
                        "file",
                        "attributes"
                    ],
                    "file name": "NameFileFilter.java",
                    "file old path": "src/main/java/org/apache/commons/io/filefilter/NameFileFilter.java",
                    "file new path": "src/main/java/org/apache/commons/io/filefilter/NameFileFilter.java",
                    "full name": "src.main.java.org.apache.commons.io.filefilter.NameFileFilter.accept"
                },
                {
                    "function name": "accept",
                    "function params": [
                        "file"
                    ],
                    "file name": "PathEqualsFileFilter.java",
                    "file old path": null,
                    "file new path": "src/main/java/org/apache/commons/io/filefilter/PathEqualsFileFilter.java",
                    "full name": "src.main.java.org.apache.commons.io.filefilter.PathEqualsFileFilter.accept"
                },
                {
                    "function name": "accept",
                    "function params": [
                        "path",
                        "attributes"
                    ],
                    "file name": "PathEqualsFileFilter.java",
                    "file old path": null,
                    "file new path": "src/main/java/org/apache/commons/io/filefilter/PathEqualsFileFilter.java",
                    "full name": "src.main.java.org.apache.commons.io.filefilter.PathEqualsFileFilter.accept"
                },
                {
                    "function name": "PathEqualsFileFilter",
                    "function params": [
                        "file"
                    ],
                    "file name": "PathEqualsFileFilter.java",
                    "file old path": null,
                    "file new path": "src/main/java/org/apache/commons/io/filefilter/PathEqualsFileFilter.java",
                    "full name": "src.main.java.org.apache.commons.io.filefilter.PathEqualsFileFilter.PathEqualsFileFilter"
                },
                {
                    "function name": "accept",
                    "function params": [
                        "file",
                        "attributes"
                    ],
                    "file name": "PrefixFileFilter.java",
                    "file old path": "src/main/java/org/apache/commons/io/filefilter/PrefixFileFilter.java",
                    "file new path": "src/main/java/org/apache/commons/io/filefilter/PrefixFileFilter.java",
                    "full name": "src.main.java.org.apache.commons.io.filefilter.PrefixFileFilter.accept"
                },
                {
                    "function name": "accept",
                    "function params": [
                        "path",
                        "attributes"
                    ],
                    "file name": "RegexFileFilter.java",
                    "file old path": "src/main/java/org/apache/commons/io/filefilter/RegexFileFilter.java",
                    "file new path": "src/main/java/org/apache/commons/io/filefilter/RegexFileFilter.java",
                    "full name": "src.main.java.org.apache.commons.io.filefilter.RegexFileFilter.accept"
                },
                {
                    "function name": "visitFile",
                    "function params": [
                        "file",
                        "attrs"
                    ],
                    "file name": "SizeFileFilter.java",
                    "file old path": "src/main/java/org/apache/commons/io/filefilter/SizeFileFilter.java",
                    "file new path": "src/main/java/org/apache/commons/io/filefilter/SizeFileFilter.java",
                    "full name": "src.main.java.org.apache.commons.io.filefilter.SizeFileFilter.visitFile"
                },
                {
                    "function name": "accept",
                    "function params": [
                        "file",
                        "attributes"
                    ],
                    "file name": "SizeFileFilter.java",
                    "file old path": "src/main/java/org/apache/commons/io/filefilter/SizeFileFilter.java",
                    "file new path": "src/main/java/org/apache/commons/io/filefilter/SizeFileFilter.java",
                    "full name": "src.main.java.org.apache.commons.io.filefilter.SizeFileFilter.accept"
                },
                {
                    "function name": "accept",
                    "function params": [
                        "file",
                        "attributes"
                    ],
                    "file name": "SuffixFileFilter.java",
                    "file old path": "src/main/java/org/apache/commons/io/filefilter/SuffixFileFilter.java",
                    "file new path": "src/main/java/org/apache/commons/io/filefilter/SuffixFileFilter.java",
                    "full name": "src.main.java.org.apache.commons.io.filefilter.SuffixFileFilter.accept"
                },
                {
                    "function name": "accept",
                    "function params": [
                        "file",
                        "attributes"
                    ],
                    "file name": "WildcardFileFilter.java",
                    "file old path": "src/main/java/org/apache/commons/io/filefilter/WildcardFileFilter.java",
                    "file new path": "src/main/java/org/apache/commons/io/filefilter/WildcardFileFilter.java",
                    "full name": "src.main.java.org.apache.commons.io.filefilter.WildcardFileFilter.accept"
                },
                {
                    "function name": "testDecodeUrl",
                    "function params": [],
                    "file name": "FileUtilsTestCase.java",
                    "file old path": "src/test/java/org/apache/commons/io/FileUtilsTestCase.java",
                    "file new path": "src/test/java/org/apache/commons/io/FileUtilsTestCase.java",
                    "full name": "src.test.java.org.apache.commons.io.FileUtilsTestCase.testDecodeUrl"
                },
                {
                    "function name": "testCopyToDirectoryWithIterableSourceDoesNotExist",
                    "function params": [],
                    "file name": "FileUtilsTestCase.java",
                    "file old path": "src/test/java/org/apache/commons/io/FileUtilsTestCase.java",
                    "file new path": "src/test/java/org/apache/commons/io/FileUtilsTestCase.java",
                    "full name": "src.test.java.org.apache.commons.io.FileUtilsTestCase.testCopyToDirectoryWithIterableSourceDoesNotExist"
                },
                {
                    "function name": "testDecodeUrlEncodingUtf8",
                    "function params": [],
                    "file name": "FileUtilsTestCase.java",
                    "file old path": "src/test/java/org/apache/commons/io/FileUtilsTestCase.java",
                    "file new path": "src/test/java/org/apache/commons/io/FileUtilsTestCase.java",
                    "full name": "src.test.java.org.apache.commons.io.FileUtilsTestCase.testDecodeUrlEncodingUtf8"
                },
                {
                    "function name": "testWriteLines_4arg",
                    "function params": [],
                    "file name": "FileUtilsTestCase.java",
                    "file old path": "src/test/java/org/apache/commons/io/FileUtilsTestCase.java",
                    "file new path": "src/test/java/org/apache/commons/io/FileUtilsTestCase.java",
                    "full name": "src.test.java.org.apache.commons.io.FileUtilsTestCase.testWriteLines_4arg"
                },
                {
                    "function name": "testReadFileToStringWithDefaultEncoding",
                    "function params": [],
                    "file name": "FileUtilsTestCase.java",
                    "file old path": "src/test/java/org/apache/commons/io/FileUtilsTestCase.java",
                    "file new path": "src/test/java/org/apache/commons/io/FileUtilsTestCase.java",
                    "full name": "src.test.java.org.apache.commons.io.FileUtilsTestCase.testReadFileToStringWithDefaultEncoding"
                },
                {
                    "function name": "testChecksumOnDirectory",
                    "function params": [],
                    "file name": "FileUtilsTestCase.java",
                    "file old path": "src/test/java/org/apache/commons/io/FileUtilsTestCase.java",
                    "file new path": "src/test/java/org/apache/commons/io/FileUtilsTestCase.java",
                    "full name": "src.test.java.org.apache.commons.io.FileUtilsTestCase.testChecksumOnDirectory"
                },
                {
                    "function name": "testIterateFilesAndDirs",
                    "function params": [],
                    "file name": "FileUtilsTestCase.java",
                    "file old path": "src/test/java/org/apache/commons/io/FileUtilsTestCase.java",
                    "file new path": "src/test/java/org/apache/commons/io/FileUtilsTestCase.java",
                    "full name": "src.test.java.org.apache.commons.io.FileUtilsTestCase.testIterateFilesAndDirs"
                },
                {
                    "function name": "testWriteByteArrayToFile_WithAppendOptionTrue_ShouldNotDeletePreviousFileLines",
                    "function params": [],
                    "file name": "FileUtilsTestCase.java",
                    "file old path": "src/test/java/org/apache/commons/io/FileUtilsTestCase.java",
                    "file new path": "src/test/java/org/apache/commons/io/FileUtilsTestCase.java",
                    "full name": "src.test.java.org.apache.commons.io.FileUtilsTestCase.testWriteByteArrayToFile_WithAppendOptionTrue_ShouldNotDeletePreviousFileLines"
                },
                {
                    "function name": "testMoveFile_Rename",
                    "function params": [],
                    "file name": "FileUtilsTestCase.java",
                    "file old path": "src/test/java/org/apache/commons/io/FileUtilsTestCase.java",
                    "file new path": "src/test/java/org/apache/commons/io/FileUtilsTestCase.java",
                    "full name": "src.test.java.org.apache.commons.io.FileUtilsTestCase.testMoveFile_Rename"
                },
                {
                    "function name": "testForceMkdirParent",
                    "function params": [],
                    "file name": "FileUtilsTestCase.java",
                    "file old path": "src/test/java/org/apache/commons/io/FileUtilsTestCase.java",
                    "file new path": "src/test/java/org/apache/commons/io/FileUtilsTestCase.java",
                    "full name": "src.test.java.org.apache.commons.io.FileUtilsTestCase.testForceMkdirParent"
                },
                {
                    "function name": "testCopyToSelf",
                    "function params": [],
                    "file name": "FileUtilsTestCase.java",
                    "file old path": "src/test/java/org/apache/commons/io/FileUtilsTestCase.java",
                    "file new path": "src/test/java/org/apache/commons/io/FileUtilsTestCase.java",
                    "full name": "src.test.java.org.apache.commons.io.FileUtilsTestCase.testCopyToSelf"
                },
                {
                    "function name": "testCopyFile2WithoutFileDatePreservation",
                    "function params": [],
                    "file name": "FileUtilsTestCase.java",
                    "file old path": "src/test/java/org/apache/commons/io/FileUtilsTestCase.java",
                    "file new path": "src/test/java/org/apache/commons/io/FileUtilsTestCase.java",
                    "full name": "src.test.java.org.apache.commons.io.FileUtilsTestCase.testCopyFile2WithoutFileDatePreservation"
                },
                {
                    "function name": "testWriteCharSequence2",
                    "function params": [],
                    "file name": "FileUtilsTestCase.java",
                    "file old path": "src/test/java/org/apache/commons/io/FileUtilsTestCase.java",
                    "file new path": "src/test/java/org/apache/commons/io/FileUtilsTestCase.java",
                    "full name": "src.test.java.org.apache.commons.io.FileUtilsTestCase.testWriteCharSequence2"
                },
                {
                    "function name": "consumeRemaining",
                    "function params": [
                        "iterator"
                    ],
                    "file name": "FileUtilsTestCase.java",
                    "file old path": "src/test/java/org/apache/commons/io/FileUtilsTestCase.java",
                    "file new path": "src/test/java/org/apache/commons/io/FileUtilsTestCase.java",
                    "full name": "src.test.java.org.apache.commons.io.FileUtilsTestCase.consumeRemaining"
                },
                {
                    "function name": "ListDirectoryWalker",
                    "function params": [
                        "directory",
                        "depth",
                        "results"
                    ],
                    "file name": "FileUtilsTestCase.java",
                    "file old path": "src/test/java/org/apache/commons/io/FileUtilsTestCase.java",
                    "file new path": "src/test/java/org/apache/commons/io/FileUtilsTestCase.java",
                    "full name": "src.test.java.org.apache.commons.io.FileUtilsTestCase.ListDirectoryWalker"
                },
                {
                    "function name": "testWriteLines_3arg_nullSeparator",
                    "function params": [],
                    "file name": "FileUtilsTestCase.java",
                    "file old path": "src/test/java/org/apache/commons/io/FileUtilsTestCase.java",
                    "file new path": "src/test/java/org/apache/commons/io/FileUtilsTestCase.java",
                    "full name": "src.test.java.org.apache.commons.io.FileUtilsTestCase.testWriteLines_3arg_nullSeparator"
                },
                {
                    "function name": "testWriteLines_4arg_nullSeparator",
                    "function params": [],
                    "file name": "FileUtilsTestCase.java",
                    "file old path": "src/test/java/org/apache/commons/io/FileUtilsTestCase.java",
                    "file new path": "src/test/java/org/apache/commons/io/FileUtilsTestCase.java",
                    "full name": "src.test.java.org.apache.commons.io.FileUtilsTestCase.testWriteLines_4arg_nullSeparator"
                },
                {
                    "function name": "testToFiles4",
                    "function params": [],
                    "file name": "FileUtilsTestCase.java",
                    "file old path": "src/test/java/org/apache/commons/io/FileUtilsTestCase.java",
                    "file new path": "src/test/java/org/apache/commons/io/FileUtilsTestCase.java",
                    "full name": "src.test.java.org.apache.commons.io.FileUtilsTestCase.testToFiles4"
                },
                {
                    "function name": "testToFile5",
                    "function params": [],
                    "file name": "FileUtilsTestCase.java",
                    "file old path": "src/test/java/org/apache/commons/io/FileUtilsTestCase.java",
                    "file new path": "src/test/java/org/apache/commons/io/FileUtilsTestCase.java",
                    "full name": "src.test.java.org.apache.commons.io.FileUtilsTestCase.testToFile5"
                },
                {
                    "function name": "getLastModifiedMillis",
                    "function params": [
                        "file"
                    ],
                    "file name": "FileUtilsTestCase.java",
                    "file old path": "src/test/java/org/apache/commons/io/FileUtilsTestCase.java",
                    "file new path": "src/test/java/org/apache/commons/io/FileUtilsTestCase.java",
                    "full name": "src.test.java.org.apache.commons.io.FileUtilsTestCase.getLastModifiedMillis"
                },
                {
                    "function name": "testCopyFile1ToDir",
                    "function params": [],
                    "file name": "FileUtilsTestCase.java",
                    "file old path": "src/test/java/org/apache/commons/io/FileUtilsTestCase.java",
                    "file new path": "src/test/java/org/apache/commons/io/FileUtilsTestCase.java",
                    "full name": "src.test.java.org.apache.commons.io.FileUtilsTestCase.testCopyFile1ToDir"
                },
                {
                    "function name": "testMoveDirectory_Rename",
                    "function params": [],
                    "file name": "FileUtilsTestCase.java",
                    "file old path": "src/test/java/org/apache/commons/io/FileUtilsTestCase.java",
                    "file new path": "src/test/java/org/apache/commons/io/FileUtilsTestCase.java",
                    "full name": "src.test.java.org.apache.commons.io.FileUtilsTestCase.testMoveDirectory_Rename"
                },
                {
                    "function name": "testReadFileToStringWithEncoding",
                    "function params": [],
                    "file name": "FileUtilsTestCase.java",
                    "file old path": "src/test/java/org/apache/commons/io/FileUtilsTestCase.java",
                    "file new path": "src/test/java/org/apache/commons/io/FileUtilsTestCase.java",
                    "full name": "src.test.java.org.apache.commons.io.FileUtilsTestCase.testReadFileToStringWithEncoding"
                },
                {
                    "function name": "testWriteStringToFile3",
                    "function params": [],
                    "file name": "FileUtilsTestCase.java",
                    "file old path": "src/test/java/org/apache/commons/io/FileUtilsTestCase.java",
                    "file new path": "src/test/java/org/apache/commons/io/FileUtilsTestCase.java",
                    "full name": "src.test.java.org.apache.commons.io.FileUtilsTestCase.testWriteStringToFile3"
                },
                {
                    "function name": "testWriteByteArrayToFile_WithOffsetAndLength",
                    "function params": [],
                    "file name": "FileUtilsTestCase.java",
                    "file old path": "src/test/java/org/apache/commons/io/FileUtilsTestCase.java",
                    "file new path": "src/test/java/org/apache/commons/io/FileUtilsTestCase.java",
                    "full name": "src.test.java.org.apache.commons.io.FileUtilsTestCase.testWriteByteArrayToFile_WithOffsetAndLength"
                },
                {
                    "function name": "testMoveDirectoryToDirectory_Errors",
                    "function params": [],
                    "file name": "FileUtilsTestCase.java",
                    "file old path": "src/test/java/org/apache/commons/io/FileUtilsTestCase.java",
                    "file new path": "src/test/java/org/apache/commons/io/FileUtilsTestCase.java",
                    "full name": "src.test.java.org.apache.commons.io.FileUtilsTestCase.testMoveDirectoryToDirectory_Errors"
                },
                {
                    "function name": "testCopyDirectoryToItself",
                    "function params": [],
                    "file name": "FileUtilsTestCase.java",
                    "file old path": "src/test/java/org/apache/commons/io/FileUtilsTestCase.java",
                    "file new path": "src/test/java/org/apache/commons/io/FileUtilsTestCase.java",
                    "full name": "src.test.java.org.apache.commons.io.FileUtilsTestCase.testCopyDirectoryToItself"
                },
                {
                    "function name": "testWriteLines_3argsWithAppendOptionFalse_ShouldDeletePreviousFileLines",
                    "function params": [],
                    "file name": "FileUtilsTestCase.java",
                    "file old path": "src/test/java/org/apache/commons/io/FileUtilsTestCase.java",
                    "file new path": "src/test/java/org/apache/commons/io/FileUtilsTestCase.java",
                    "full name": "src.test.java.org.apache.commons.io.FileUtilsTestCase.testWriteLines_3argsWithAppendOptionFalse_ShouldDeletePreviousFileLines"
                },
                {
                    "function name": "testWriteLines_5argsWithAppendOptionFalse_ShouldDeletePreviousFileLines",
                    "function params": [],
                    "file name": "FileUtilsTestCase.java",
                    "file old path": "src/test/java/org/apache/commons/io/FileUtilsTestCase.java",
                    "file new path": "src/test/java/org/apache/commons/io/FileUtilsTestCase.java",
                    "full name": "src.test.java.org.apache.commons.io.FileUtilsTestCase.testWriteLines_5argsWithAppendOptionFalse_ShouldDeletePreviousFileLines"
                },
                {
                    "function name": "testCopyDirectoryPreserveDates",
                    "function params": [],
                    "file name": "FileUtilsTestCase.java",
                    "file old path": "src/test/java/org/apache/commons/io/FileUtilsTestCase.java",
                    "file new path": "src/test/java/org/apache/commons/io/FileUtilsTestCase.java",
                    "full name": "src.test.java.org.apache.commons.io.FileUtilsTestCase.testCopyDirectoryPreserveDates"
                },
                {
                    "function name": "testCopyFile1",
                    "function params": [],
                    "file name": "FileUtilsTestCase.java",
                    "file old path": "src/test/java/org/apache/commons/io/FileUtilsTestCase.java",
                    "file new path": "src/test/java/org/apache/commons/io/FileUtilsTestCase.java",
                    "full name": "src.test.java.org.apache.commons.io.FileUtilsTestCase.testCopyFile1"
                },
                {
                    "function name": "testCopyToDirectoryWithIterable",
                    "function params": [],
                    "file name": "FileUtilsTestCase.java",
                    "file old path": "src/test/java/org/apache/commons/io/FileUtilsTestCase.java",
                    "file new path": "src/test/java/org/apache/commons/io/FileUtilsTestCase.java",
                    "full name": "src.test.java.org.apache.commons.io.FileUtilsTestCase.testCopyToDirectoryWithIterable"
                },
                {
                    "function name": "testCopyURLToFile",
                    "function params": [],
                    "file name": "FileUtilsTestCase.java",
                    "file old path": "src/test/java/org/apache/commons/io/FileUtilsTestCase.java",
                    "file new path": "src/test/java/org/apache/commons/io/FileUtilsTestCase.java",
                    "full name": "src.test.java.org.apache.commons.io.FileUtilsTestCase.testCopyURLToFile"
                },
                {
                    "function name": "testCopyDirectoryFiltered",
                    "function params": [],
                    "file name": "FileUtilsTestCase.java",
                    "file old path": "src/test/java/org/apache/commons/io/FileUtilsTestCase.java",
                    "file new path": "src/test/java/org/apache/commons/io/FileUtilsTestCase.java",
                    "full name": "src.test.java.org.apache.commons.io.FileUtilsTestCase.testCopyDirectoryFiltered"
                },
                {
                    "function name": "testGetTempDirectoryPath",
                    "function params": [],
                    "file name": "FileUtilsTestCase.java",
                    "file old path": "src/test/java/org/apache/commons/io/FileUtilsTestCase.java",
                    "file new path": "src/test/java/org/apache/commons/io/FileUtilsTestCase.java",
                    "full name": "src.test.java.org.apache.commons.io.FileUtilsTestCase.testGetTempDirectoryPath"
                },
                {
                    "function name": "testCopyFileToOutputStream",
                    "function params": [],
                    "file name": "FileUtilsTestCase.java",
                    "file old path": "src/test/java/org/apache/commons/io/FileUtilsTestCase.java",
                    "file new path": "src/test/java/org/apache/commons/io/FileUtilsTestCase.java",
                    "full name": "src.test.java.org.apache.commons.io.FileUtilsTestCase.testCopyFileToOutputStream"
                },
                {
                    "function name": "testGetTempDirectory",
                    "function params": [],
                    "file name": "FileUtilsTestCase.java",
                    "file old path": "src/test/java/org/apache/commons/io/FileUtilsTestCase.java",
                    "file new path": "src/test/java/org/apache/commons/io/FileUtilsTestCase.java",
                    "full name": "src.test.java.org.apache.commons.io.FileUtilsTestCase.testGetTempDirectory"
                },
                {
                    "function name": "testToFiles3",
                    "function params": [],
                    "file name": "FileUtilsTestCase.java",
                    "file old path": "src/test/java/org/apache/commons/io/FileUtilsTestCase.java",
                    "file new path": "src/test/java/org/apache/commons/io/FileUtilsTestCase.java",
                    "full name": "src.test.java.org.apache.commons.io.FileUtilsTestCase.testToFiles3"
                },
                {
                    "function name": "testMoveToDirectory_Errors",
                    "function params": [],
                    "file name": "FileUtilsTestCase.java",
                    "file old path": "src/test/java/org/apache/commons/io/FileUtilsTestCase.java",
                    "file new path": "src/test/java/org/apache/commons/io/FileUtilsTestCase.java",
                    "full name": "src.test.java.org.apache.commons.io.FileUtilsTestCase.testMoveToDirectory_Errors"
                },
                {
                    "function name": "testForceDeleteDir",
                    "function params": [],
                    "file name": "FileUtilsTestCase.java",
                    "file old path": "src/test/java/org/apache/commons/io/FileUtilsTestCase.java",
                    "file new path": "src/test/java/org/apache/commons/io/FileUtilsTestCase.java",
                    "full name": "src.test.java.org.apache.commons.io.FileUtilsTestCase.testForceDeleteDir"
                },
                {
                    "function name": "testGetFile_Parent",
                    "function params": [],
                    "file name": "FileUtilsTestCase.java",
                    "file old path": "src/test/java/org/apache/commons/io/FileUtilsTestCase.java",
                    "file new path": "src/test/java/org/apache/commons/io/FileUtilsTestCase.java",
                    "full name": "src.test.java.org.apache.commons.io.FileUtilsTestCase.testGetFile_Parent"
                },
                {
                    "function name": "testForceMkdir",
                    "function params": [],
                    "file name": "FileUtilsTestCase.java",
                    "file old path": "src/test/java/org/apache/commons/io/FileUtilsTestCase.java",
                    "file new path": "src/test/java/org/apache/commons/io/FileUtilsTestCase.java",
                    "full name": "src.test.java.org.apache.commons.io.FileUtilsTestCase.testForceMkdir"
                },
                {
                    "function name": "testWriteLines_3argsWithAppendOptionTrue_ShouldNotDeletePreviousFileLines",
                    "function params": [],
                    "file name": "FileUtilsTestCase.java",
                    "file old path": "src/test/java/org/apache/commons/io/FileUtilsTestCase.java",
                    "file new path": "src/test/java/org/apache/commons/io/FileUtilsTestCase.java",
                    "full name": "src.test.java.org.apache.commons.io.FileUtilsTestCase.testWriteLines_3argsWithAppendOptionTrue_ShouldNotDeletePreviousFileLines"
                },
                {
                    "function name": "testTouch",
                    "function params": [],
                    "file name": "FileUtilsTestCase.java",
                    "file old path": "src/test/java/org/apache/commons/io/FileUtilsTestCase.java",
                    "file new path": "src/test/java/org/apache/commons/io/FileUtilsTestCase.java",
                    "full name": "src.test.java.org.apache.commons.io.FileUtilsTestCase.testTouch"
                },
                {
                    "function name": "testCopyToDirectoryWithFile",
                    "function params": [],
                    "file name": "FileUtilsTestCase.java",
                    "file old path": "src/test/java/org/apache/commons/io/FileUtilsTestCase.java",
                    "file new path": "src/test/java/org/apache/commons/io/FileUtilsTestCase.java",
                    "full name": "src.test.java.org.apache.commons.io.FileUtilsTestCase.testCopyToDirectoryWithFile"
                },
                {
                    "function name": "testForceDeleteAFile3",
                    "function params": [],
                    "file name": "FileUtilsTestCase.java",
                    "file old path": "src/test/java/org/apache/commons/io/FileUtilsTestCase.java",
                    "file new path": "src/test/java/org/apache/commons/io/FileUtilsTestCase.java",
                    "full name": "src.test.java.org.apache.commons.io.FileUtilsTestCase.testForceDeleteAFile3"
                },
                {
                    "function name": "testFileUtils",
                    "function params": [],
                    "file name": "FileUtilsTestCase.java",
                    "file old path": "src/test/java/org/apache/commons/io/FileUtilsTestCase.java",
                    "file new path": "src/test/java/org/apache/commons/io/FileUtilsTestCase.java",
                    "full name": "src.test.java.org.apache.commons.io.FileUtilsTestCase.testFileUtils"
                },
                {
                    "function name": "openOutputStream_noParent",
                    "function params": [
                        "createFile"
                    ],
                    "file name": "FileUtilsTestCase.java",
                    "file old path": "src/test/java/org/apache/commons/io/FileUtilsTestCase.java",
                    "file new path": "src/test/java/org/apache/commons/io/FileUtilsTestCase.java",
                    "full name": "src.test.java.org.apache.commons.io.FileUtilsTestCase.openOutputStream_noParent"
                },
                {
                    "function name": "testWriteLines_5argsWithAppendOptionTrue_ShouldNotDeletePreviousFileLines",
                    "function params": [],
                    "file name": "FileUtilsTestCase.java",
                    "file old path": "src/test/java/org/apache/commons/io/FileUtilsTestCase.java",
                    "file new path": "src/test/java/org/apache/commons/io/FileUtilsTestCase.java",
                    "full name": "src.test.java.org.apache.commons.io.FileUtilsTestCase.testWriteLines_5argsWithAppendOptionTrue_ShouldNotDeletePreviousFileLines"
                },
                {
                    "function name": "testMoveFile_CopyDelete_Failed",
                    "function params": [],
                    "file name": "FileUtilsTestCase.java",
                    "file old path": "src/test/java/org/apache/commons/io/FileUtilsTestCase.java",
                    "file new path": "src/test/java/org/apache/commons/io/FileUtilsTestCase.java",
                    "full name": "src.test.java.org.apache.commons.io.FileUtilsTestCase.testMoveFile_CopyDelete_Failed"
                },
                {
                    "function name": "testDecodeUrlNullSafe",
                    "function params": [],
                    "file name": "FileUtilsTestCase.java",
                    "file old path": "src/test/java/org/apache/commons/io/FileUtilsTestCase.java",
                    "file new path": "src/test/java/org/apache/commons/io/FileUtilsTestCase.java",
                    "full name": "src.test.java.org.apache.commons.io.FileUtilsTestCase.testDecodeUrlNullSafe"
                },
                {
                    "function name": "testForceDeleteAFile2",
                    "function params": [],
                    "file name": "FileUtilsTestCase.java",
                    "file old path": "src/test/java/org/apache/commons/io/FileUtilsTestCase.java",
                    "file new path": "src/test/java/org/apache/commons/io/FileUtilsTestCase.java",
                    "full name": "src.test.java.org.apache.commons.io.FileUtilsTestCase.testForceDeleteAFile2"
                },
                {
                    "function name": "testWriteWithEncoding_WithAppendOptionFalse_ShouldDeletePreviousFileLines",
                    "function params": [],
                    "file name": "FileUtilsTestCase.java",
                    "file old path": "src/test/java/org/apache/commons/io/FileUtilsTestCase.java",
                    "file new path": "src/test/java/org/apache/commons/io/FileUtilsTestCase.java",
                    "full name": "src.test.java.org.apache.commons.io.FileUtilsTestCase.testWriteWithEncoding_WithAppendOptionFalse_ShouldDeletePreviousFileLines"
                },
                {
                    "function name": "iterateFilesAndDirs",
                    "function params": [
                        "dir",
                        "fileFilter",
                        "dirFilter",
                        "expectedFilesAndDirs"
                    ],
                    "file name": "FileUtilsTestCase.java",
                    "file old path": "src/test/java/org/apache/commons/io/FileUtilsTestCase.java",
                    "file new path": "src/test/java/org/apache/commons/io/FileUtilsTestCase.java",
                    "full name": "src.test.java.org.apache.commons.io.FileUtilsTestCase.iterateFilesAndDirs"
                },
                {
                    "function name": "test_openOutputStream_noParentNoFile",
                    "function params": [],
                    "file name": "FileUtilsTestCase.java",
                    "file old path": "src/test/java/org/apache/commons/io/FileUtilsTestCase.java",
                    "file new path": "src/test/java/org/apache/commons/io/FileUtilsTestCase.java",
                    "full name": "src.test.java.org.apache.commons.io.FileUtilsTestCase.test_openOutputStream_noParentNoFile"
                },
                {
                    "function name": "testMoveFileToDirectory_Errors",
                    "function params": [],
                    "file name": "FileUtilsTestCase.java",
                    "file old path": "src/test/java/org/apache/commons/io/FileUtilsTestCase.java",
                    "file new path": "src/test/java/org/apache/commons/io/FileUtilsTestCase.java",
                    "full name": "src.test.java.org.apache.commons.io.FileUtilsTestCase.testMoveFileToDirectory_Errors"
                },
                {
                    "function name": "testToFile1",
                    "function params": [],
                    "file name": "FileUtilsTestCase.java",
                    "file old path": "src/test/java/org/apache/commons/io/FileUtilsTestCase.java",
                    "file new path": "src/test/java/org/apache/commons/io/FileUtilsTestCase.java",
                    "full name": "src.test.java.org.apache.commons.io.FileUtilsTestCase.testToFile1"
                },
                {
                    "function name": "testToFiles3a",
                    "function params": [],
                    "file name": "FileUtilsTestCase.java",
                    "file old path": "src/test/java/org/apache/commons/io/FileUtilsTestCase.java",
                    "file new path": "src/test/java/org/apache/commons/io/FileUtilsTestCase.java",
                    "full name": "src.test.java.org.apache.commons.io.FileUtilsTestCase.testToFiles3a"
                },
                {
                    "function name": "testCopyDirectoryToDirectory_NonExistingDest",
                    "function params": [],
                    "file name": "FileUtilsTestCase.java",
                    "file old path": "src/test/java/org/apache/commons/io/FileUtilsTestCase.java",
                    "file new path": "src/test/java/org/apache/commons/io/FileUtilsTestCase.java",
                    "full name": "src.test.java.org.apache.commons.io.FileUtilsTestCase.testCopyDirectoryToDirectory_NonExistingDest"
                },
                {
                    "function name": "testCopyToDirectoryWithDirectory",
                    "function params": [],
                    "file name": "FileUtilsTestCase.java",
                    "file old path": "src/test/java/org/apache/commons/io/FileUtilsTestCase.java",
                    "file new path": "src/test/java/org/apache/commons/io/FileUtilsTestCase.java",
                    "full name": "src.test.java.org.apache.commons.io.FileUtilsTestCase.testCopyToDirectoryWithDirectory"
                },
                {
                    "function name": "ListDirectoryWalker",
                    "function params": [
                        "startDirectory"
                    ],
                    "file name": "FileUtilsTestCase.java",
                    "file old path": "src/test/java/org/apache/commons/io/FileUtilsTestCase.java",
                    "file new path": "src/test/java/org/apache/commons/io/FileUtilsTestCase.java",
                    "full name": "src.test.java.org.apache.commons.io.FileUtilsTestCase.ListDirectoryWalker"
                },
                {
                    "function name": "testSizeOfDirectoryAsBigInteger",
                    "function params": [],
                    "file name": "FileUtilsTestCase.java",
                    "file old path": "src/test/java/org/apache/commons/io/FileUtilsTestCase.java",
                    "file new path": "src/test/java/org/apache/commons/io/FileUtilsTestCase.java",
                    "full name": "src.test.java.org.apache.commons.io.FileUtilsTestCase.testSizeOfDirectoryAsBigInteger"
                },
                {
                    "function name": "testCopyToDirectoryWithFileSourceDoesNotExist",
                    "function params": [],
                    "file name": "FileUtilsTestCase.java",
                    "file old path": "src/test/java/org/apache/commons/io/FileUtilsTestCase.java",
                    "file new path": "src/test/java/org/apache/commons/io/FileUtilsTestCase.java",
                    "full name": "src.test.java.org.apache.commons.io.FileUtilsTestCase.testCopyToDirectoryWithFileSourceDoesNotExist"
                },
                {
                    "function name": "testWriteStringToFile1",
                    "function params": [],
                    "file name": "FileUtilsTestCase.java",
                    "file old path": "src/test/java/org/apache/commons/io/FileUtilsTestCase.java",
                    "file new path": "src/test/java/org/apache/commons/io/FileUtilsTestCase.java",
                    "full name": "src.test.java.org.apache.commons.io.FileUtilsTestCase.testWriteStringToFile1"
                },
                {
                    "function name": "testMoveFile_Errors",
                    "function params": [],
                    "file name": "FileUtilsTestCase.java",
                    "file old path": "src/test/java/org/apache/commons/io/FileUtilsTestCase.java",
                    "file new path": "src/test/java/org/apache/commons/io/FileUtilsTestCase.java",
                    "full name": "src.test.java.org.apache.commons.io.FileUtilsTestCase.testMoveFile_Errors"
                },
                {
                    "function name": "testDeleteQuietlyNonExistent",
                    "function params": [],
                    "file name": "FileUtilsTestCase.java",
                    "file old path": "src/test/java/org/apache/commons/io/FileUtilsTestCase.java",
                    "file new path": "src/test/java/org/apache/commons/io/FileUtilsTestCase.java",
                    "full name": "src.test.java.org.apache.commons.io.FileUtilsTestCase.testDeleteQuietlyNonExistent"
                },
                {
                    "function name": "testGetFile",
                    "function params": [],
                    "file name": "FileUtilsTestCase.java",
                    "file old path": "src/test/java/org/apache/commons/io/FileUtilsTestCase.java",
                    "file new path": "src/test/java/org/apache/commons/io/FileUtilsTestCase.java",
                    "full name": "src.test.java.org.apache.commons.io.FileUtilsTestCase.testGetFile"
                },
                {
                    "function name": "testWriteStringToFile_WithAppendOptionFalse_ShouldDeletePreviousFileLines",
                    "function params": [],
                    "file name": "FileUtilsTestCase.java",
                    "file old path": "src/test/java/org/apache/commons/io/FileUtilsTestCase.java",
                    "file new path": "src/test/java/org/apache/commons/io/FileUtilsTestCase.java",
                    "full name": "src.test.java.org.apache.commons.io.FileUtilsTestCase.testWriteStringToFile_WithAppendOptionFalse_ShouldDeletePreviousFileLines"
                },
                {
                    "function name": "testGetUserDirectoryPath",
                    "function params": [],
                    "file name": "FileUtilsTestCase.java",
                    "file old path": "src/test/java/org/apache/commons/io/FileUtilsTestCase.java",
                    "file new path": "src/test/java/org/apache/commons/io/FileUtilsTestCase.java",
                    "full name": "src.test.java.org.apache.commons.io.FileUtilsTestCase.testGetUserDirectoryPath"
                },
                {
                    "function name": "testCopyURLToFileWithTimeout",
                    "function params": [],
                    "file name": "FileUtilsTestCase.java",
                    "file old path": "src/test/java/org/apache/commons/io/FileUtilsTestCase.java",
                    "file new path": "src/test/java/org/apache/commons/io/FileUtilsTestCase.java",
                    "full name": "src.test.java.org.apache.commons.io.FileUtilsTestCase.testCopyURLToFileWithTimeout"
                },
                {
                    "function name": "testToFile4",
                    "function params": [],
                    "file name": "FileUtilsTestCase.java",
                    "file old path": "src/test/java/org/apache/commons/io/FileUtilsTestCase.java",
                    "file new path": "src/test/java/org/apache/commons/io/FileUtilsTestCase.java",
                    "full name": "src.test.java.org.apache.commons.io.FileUtilsTestCase.testToFile4"
                },
                {
                    "function name": "testWriteLines_4arg_Writer_nullData",
                    "function params": [],
                    "file name": "FileUtilsTestCase.java",
                    "file old path": "src/test/java/org/apache/commons/io/FileUtilsTestCase.java",
                    "file new path": "src/test/java/org/apache/commons/io/FileUtilsTestCase.java",
                    "full name": "src.test.java.org.apache.commons.io.FileUtilsTestCase.testWriteLines_4arg_Writer_nullData"
                },
                {
                    "function name": "testWriteByteArrayToFile_WithOffsetAndLength_WithAppendOptionTrue_ShouldNotDeletePreviousFileLines",
                    "function params": [],
                    "file name": "FileUtilsTestCase.java",
                    "file old path": "src/test/java/org/apache/commons/io/FileUtilsTestCase.java",
                    "file new path": "src/test/java/org/apache/commons/io/FileUtilsTestCase.java",
                    "full name": "src.test.java.org.apache.commons.io.FileUtilsTestCase.testWriteByteArrayToFile_WithOffsetAndLength_WithAppendOptionTrue_ShouldNotDeletePreviousFileLines"
                },
                {
                    "function name": "testCopyToDirectoryWithIterableSourceIsNull",
                    "function params": [],
                    "file name": "FileUtilsTestCase.java",
                    "file old path": "src/test/java/org/apache/commons/io/FileUtilsTestCase.java",
                    "file new path": "src/test/java/org/apache/commons/io/FileUtilsTestCase.java",
                    "full name": "src.test.java.org.apache.commons.io.FileUtilsTestCase.testCopyToDirectoryWithIterableSourceIsNull"
                },
                {
                    "function name": "testDecodeUrlLenient",
                    "function params": [],
                    "file name": "FileUtilsTestCase.java",
                    "file old path": "src/test/java/org/apache/commons/io/FileUtilsTestCase.java",
                    "file new path": "src/test/java/org/apache/commons/io/FileUtilsTestCase.java",
                    "full name": "src.test.java.org.apache.commons.io.FileUtilsTestCase.testDecodeUrlLenient"
                },
                {
                    "function name": "testGetUserDirectory",
                    "function params": [],
                    "file name": "FileUtilsTestCase.java",
                    "file old path": "src/test/java/org/apache/commons/io/FileUtilsTestCase.java",
                    "file new path": "src/test/java/org/apache/commons/io/FileUtilsTestCase.java",
                    "full name": "src.test.java.org.apache.commons.io.FileUtilsTestCase.testGetUserDirectory"
                },
                {
                    "function name": "testSizeOfAsBigInteger",
                    "function params": [],
                    "file name": "FileUtilsTestCase.java",
                    "file old path": "src/test/java/org/apache/commons/io/FileUtilsTestCase.java",
                    "file new path": "src/test/java/org/apache/commons/io/FileUtilsTestCase.java",
                    "full name": "src.test.java.org.apache.commons.io.FileUtilsTestCase.testSizeOfAsBigInteger"
                },
                {
                    "function name": "testMoveDirectory_CopyDelete",
                    "function params": [],
                    "file name": "FileUtilsTestCase.java",
                    "file old path": "src/test/java/org/apache/commons/io/FileUtilsTestCase.java",
                    "file new path": "src/test/java/org/apache/commons/io/FileUtilsTestCase.java",
                    "full name": "src.test.java.org.apache.commons.io.FileUtilsTestCase.testMoveDirectory_CopyDelete"
                },
                {
                    "function name": "testCopyDirectoryToGrandChild",
                    "function params": [],
                    "file name": "FileUtilsTestCase.java",
                    "file old path": "src/test/java/org/apache/commons/io/FileUtilsTestCase.java",
                    "file new path": "src/test/java/org/apache/commons/io/FileUtilsTestCase.java",
                    "full name": "src.test.java.org.apache.commons.io.FileUtilsTestCase.testCopyDirectoryToGrandChild"
                },
                {
                    "function name": "testMoveFileToDirectory",
                    "function params": [],
                    "file name": "FileUtilsTestCase.java",
                    "file old path": "src/test/java/org/apache/commons/io/FileUtilsTestCase.java",
                    "file new path": "src/test/java/org/apache/commons/io/FileUtilsTestCase.java",
                    "full name": "src.test.java.org.apache.commons.io.FileUtilsTestCase.testMoveFileToDirectory"
                },
                {
                    "function name": "testToFiles1",
                    "function params": [],
                    "file name": "FileUtilsTestCase.java",
                    "file old path": "src/test/java/org/apache/commons/io/FileUtilsTestCase.java",
                    "file new path": "src/test/java/org/apache/commons/io/FileUtilsTestCase.java",
                    "full name": "src.test.java.org.apache.commons.io.FileUtilsTestCase.testToFiles1"
                },
                {
                    "function name": "testToFile3",
                    "function params": [],
                    "file name": "FileUtilsTestCase.java",
                    "file old path": "src/test/java/org/apache/commons/io/FileUtilsTestCase.java",
                    "file new path": "src/test/java/org/apache/commons/io/FileUtilsTestCase.java",
                    "full name": "src.test.java.org.apache.commons.io.FileUtilsTestCase.testToFile3"
                },
                {
                    "function name": "testChecksumDouble",
                    "function params": [],
                    "file name": "FileUtilsTestCase.java",
                    "file old path": "src/test/java/org/apache/commons/io/FileUtilsTestCase.java",
                    "file new path": "src/test/java/org/apache/commons/io/FileUtilsTestCase.java",
                    "full name": "src.test.java.org.apache.commons.io.FileUtilsTestCase.testChecksumDouble"
                },
                {
                    "function name": "testIO300",
                    "function params": [],
                    "file name": "FileUtilsTestCase.java",
                    "file old path": "src/test/java/org/apache/commons/io/FileUtilsTestCase.java",
                    "file new path": "src/test/java/org/apache/commons/io/FileUtilsTestCase.java",
                    "full name": "src.test.java.org.apache.commons.io.FileUtilsTestCase.testIO300"
                },
                {
                    "function name": "testDeleteQuietlyForNull",
                    "function params": [],
                    "file name": "FileUtilsTestCase.java",
                    "file old path": "src/test/java/org/apache/commons/io/FileUtilsTestCase.java",
                    "file new path": "src/test/java/org/apache/commons/io/FileUtilsTestCase.java",
                    "full name": "src.test.java.org.apache.commons.io.FileUtilsTestCase.testDeleteQuietlyForNull"
                },
                {
                    "function name": "testToURLs1",
                    "function params": [],
                    "file name": "FileUtilsTestCase.java",
                    "file old path": "src/test/java/org/apache/commons/io/FileUtilsTestCase.java",
                    "file new path": "src/test/java/org/apache/commons/io/FileUtilsTestCase.java",
                    "full name": "src.test.java.org.apache.commons.io.FileUtilsTestCase.testToURLs1"
                },
                {
                    "function name": "testToFileUtf8",
                    "function params": [],
                    "file name": "FileUtilsTestCase.java",
                    "file old path": "src/test/java/org/apache/commons/io/FileUtilsTestCase.java",
                    "file new path": "src/test/java/org/apache/commons/io/FileUtilsTestCase.java",
                    "full name": "src.test.java.org.apache.commons.io.FileUtilsTestCase.testToFileUtf8"
                },
                {
                    "function name": "testWriteStringToFile_WithAppendOptionTrue_ShouldNotDeletePreviousFileLines",
                    "function params": [],
                    "file name": "FileUtilsTestCase.java",
                    "file old path": "src/test/java/org/apache/commons/io/FileUtilsTestCase.java",
                    "file new path": "src/test/java/org/apache/commons/io/FileUtilsTestCase.java",
                    "full name": "src.test.java.org.apache.commons.io.FileUtilsTestCase.testWriteStringToFile_WithAppendOptionTrue_ShouldNotDeletePreviousFileLines"
                },
                {
                    "function name": "testCopyToDirectoryWithFileSourceIsNull",
                    "function params": [],
                    "file name": "FileUtilsTestCase.java",
                    "file old path": "src/test/java/org/apache/commons/io/FileUtilsTestCase.java",
                    "file new path": "src/test/java/org/apache/commons/io/FileUtilsTestCase.java",
                    "full name": "src.test.java.org.apache.commons.io.FileUtilsTestCase.testCopyToDirectoryWithFileSourceIsNull"
                },
                {
                    "function name": "testIsFileNewerOlder",
                    "function params": [],
                    "file name": "FileUtilsTestCase.java",
                    "file old path": "src/test/java/org/apache/commons/io/FileUtilsTestCase.java",
                    "file new path": "src/test/java/org/apache/commons/io/FileUtilsTestCase.java",
                    "full name": "src.test.java.org.apache.commons.io.FileUtilsTestCase.testIsFileNewerOlder"
                },
                {
                    "function name": "testWriteStringToFileWithEncoding_WithAppendOptionTrue_ShouldNotDeletePreviousFileLines",
                    "function params": [],
                    "file name": "FileUtilsTestCase.java",
                    "file old path": "src/test/java/org/apache/commons/io/FileUtilsTestCase.java",
                    "file new path": "src/test/java/org/apache/commons/io/FileUtilsTestCase.java",
                    "full name": "src.test.java.org.apache.commons.io.FileUtilsTestCase.testWriteStringToFileWithEncoding_WithAppendOptionTrue_ShouldNotDeletePreviousFileLines"
                },
                {
                    "function name": "testChecksumCRC32",
                    "function params": [],
                    "file name": "FileUtilsTestCase.java",
                    "file old path": "src/test/java/org/apache/commons/io/FileUtilsTestCase.java",
                    "file new path": "src/test/java/org/apache/commons/io/FileUtilsTestCase.java",
                    "full name": "src.test.java.org.apache.commons.io.FileUtilsTestCase.testChecksumCRC32"
                },
                {
                    "function name": "testIterateFiles",
                    "function params": [],
                    "file name": "FileUtilsTestCase.java",
                    "file old path": "src/test/java/org/apache/commons/io/FileUtilsTestCase.java",
                    "file new path": "src/test/java/org/apache/commons/io/FileUtilsTestCase.java",
                    "full name": "src.test.java.org.apache.commons.io.FileUtilsTestCase.testIterateFiles"
                },
                {
                    "function name": "testCopyDirectoryToNonExistingDest",
                    "function params": [],
                    "file name": "FileUtilsTestCase.java",
                    "file old path": "src/test/java/org/apache/commons/io/FileUtilsTestCase.java",
                    "file new path": "src/test/java/org/apache/commons/io/FileUtilsTestCase.java",
                    "full name": "src.test.java.org.apache.commons.io.FileUtilsTestCase.testCopyDirectoryToNonExistingDest"
                },
                {
                    "function name": "testDeleteQuietlyDir",
                    "function params": [],
                    "file name": "FileUtilsTestCase.java",
                    "file old path": "src/test/java/org/apache/commons/io/FileUtilsTestCase.java",
                    "file new path": "src/test/java/org/apache/commons/io/FileUtilsTestCase.java",
                    "full name": "src.test.java.org.apache.commons.io.FileUtilsTestCase.testDeleteQuietlyDir"
                },
                {
                    "function name": "testIO276",
                    "function params": [],
                    "file name": "FileUtilsTestCase.java",
                    "file old path": "src/test/java/org/apache/commons/io/FileUtilsTestCase.java",
                    "file new path": "src/test/java/org/apache/commons/io/FileUtilsTestCase.java",
                    "full name": "src.test.java.org.apache.commons.io.FileUtilsTestCase.testIO276"
                },
                {
                    "function name": "ListDirectoryWalker",
                    "function params": [],
                    "file name": "FileUtilsTestCase.java",
                    "file old path": "src/test/java/org/apache/commons/io/FileUtilsTestCase.java",
                    "file new path": "src/test/java/org/apache/commons/io/FileUtilsTestCase.java",
                    "full name": "src.test.java.org.apache.commons.io.FileUtilsTestCase.ListDirectoryWalker"
                },
                {
                    "function name": "testWriteCharSequence1",
                    "function params": [],
                    "file name": "FileUtilsTestCase.java",
                    "file old path": "src/test/java/org/apache/commons/io/FileUtilsTestCase.java",
                    "file new path": "src/test/java/org/apache/commons/io/FileUtilsTestCase.java",
                    "full name": "src.test.java.org.apache.commons.io.FileUtilsTestCase.testWriteCharSequence1"
                },
                {
                    "function name": "testToFile2",
                    "function params": [],
                    "file name": "FileUtilsTestCase.java",
                    "file old path": "src/test/java/org/apache/commons/io/FileUtilsTestCase.java",
                    "file new path": "src/test/java/org/apache/commons/io/FileUtilsTestCase.java",
                    "full name": "src.test.java.org.apache.commons.io.FileUtilsTestCase.testToFile2"
                },
                {
                    "function name": "testToURLs3a",
                    "function params": [],
                    "file name": "FileUtilsTestCase.java",
                    "file old path": "src/test/java/org/apache/commons/io/FileUtilsTestCase.java",
                    "file new path": "src/test/java/org/apache/commons/io/FileUtilsTestCase.java",
                    "full name": "src.test.java.org.apache.commons.io.FileUtilsTestCase.testToURLs3a"
                },
                {
                    "function name": "createCircularSymLink",
                    "function params": [
                        "file"
                    ],
                    "file name": "FileUtilsTestCase.java",
                    "file old path": "src/test/java/org/apache/commons/io/FileUtilsTestCase.java",
                    "file new path": "src/test/java/org/apache/commons/io/FileUtilsTestCase.java",
                    "full name": "src.test.java.org.apache.commons.io.FileUtilsTestCase.createCircularSymLink"
                },
                {
                    "function name": "testCopyFile2",
                    "function params": [],
                    "file name": "FileUtilsTestCase.java",
                    "file old path": "src/test/java/org/apache/commons/io/FileUtilsTestCase.java",
                    "file new path": "src/test/java/org/apache/commons/io/FileUtilsTestCase.java",
                    "full name": "src.test.java.org.apache.commons.io.FileUtilsTestCase.testCopyFile2"
                },
                {
                    "function name": "ShorterFile",
                    "function params": [
                        "pathname"
                    ],
                    "file name": "FileUtilsTestCase.java",
                    "file old path": "src/test/java/org/apache/commons/io/FileUtilsTestCase.java",
                    "file new path": "src/test/java/org/apache/commons/io/FileUtilsTestCase.java",
                    "full name": "src.test.java.org.apache.commons.io.FileUtilsTestCase.ShorterFile"
                },
                {
                    "function name": "testMoveDirectory_Errors",
                    "function params": [],
                    "file name": "FileUtilsTestCase.java",
                    "file old path": "src/test/java/org/apache/commons/io/FileUtilsTestCase.java",
                    "file new path": "src/test/java/org/apache/commons/io/FileUtilsTestCase.java",
                    "full name": "src.test.java.org.apache.commons.io.FileUtilsTestCase.testMoveDirectory_Errors"
                },
                {
                    "function name": "testWriteLinesEncoding_WithAppendOptionTrue_ShouldNotDeletePreviousFileLines",
                    "function params": [],
                    "file name": "FileUtilsTestCase.java",
                    "file old path": "src/test/java/org/apache/commons/io/FileUtilsTestCase.java",
                    "file new path": "src/test/java/org/apache/commons/io/FileUtilsTestCase.java",
                    "full name": "src.test.java.org.apache.commons.io.FileUtilsTestCase.testWriteLinesEncoding_WithAppendOptionTrue_ShouldNotDeletePreviousFileLines"
                },
                {
                    "function name": "testCopyFile2ToDir",
                    "function params": [],
                    "file name": "FileUtilsTestCase.java",
                    "file old path": "src/test/java/org/apache/commons/io/FileUtilsTestCase.java",
                    "file new path": "src/test/java/org/apache/commons/io/FileUtilsTestCase.java",
                    "full name": "src.test.java.org.apache.commons.io.FileUtilsTestCase.testCopyFile2ToDir"
                },
                {
                    "function name": "ShorterFile",
                    "function params": [],
                    "file name": "FileUtilsTestCase.java",
                    "file old path": "src/test/java/org/apache/commons/io/FileUtilsTestCase.java",
                    "file new path": "src/test/java/org/apache/commons/io/FileUtilsTestCase.java",
                    "full name": "src.test.java.org.apache.commons.io.FileUtilsTestCase.ShorterFile"
                },
                {
                    "function name": "testChecksumOnNullFile",
                    "function params": [],
                    "file name": "FileUtilsTestCase.java",
                    "file old path": "src/test/java/org/apache/commons/io/FileUtilsTestCase.java",
                    "file new path": "src/test/java/org/apache/commons/io/FileUtilsTestCase.java",
                    "full name": "src.test.java.org.apache.commons.io.FileUtilsTestCase.testChecksumOnNullFile"
                },
                {
                    "function name": "testChecksum",
                    "function params": [],
                    "file name": "FileUtilsTestCase.java",
                    "file old path": "src/test/java/org/apache/commons/io/FileUtilsTestCase.java",
                    "file new path": "src/test/java/org/apache/commons/io/FileUtilsTestCase.java",
                    "full name": "src.test.java.org.apache.commons.io.FileUtilsTestCase.testChecksum"
                },
                {
                    "function name": "testWrite_WithAppendOptionTrue_ShouldNotDeletePreviousFileLines",
                    "function params": [],
                    "file name": "FileUtilsTestCase.java",
                    "file old path": "src/test/java/org/apache/commons/io/FileUtilsTestCase.java",
                    "file new path": "src/test/java/org/apache/commons/io/FileUtilsTestCase.java",
                    "full name": "src.test.java.org.apache.commons.io.FileUtilsTestCase.testWrite_WithAppendOptionTrue_ShouldNotDeletePreviousFileLines"
                },
                {
                    "function name": "testWriteWithEncoding_WithAppendOptionTrue_ShouldNotDeletePreviousFileLines",
                    "function params": [],
                    "file name": "FileUtilsTestCase.java",
                    "file old path": "src/test/java/org/apache/commons/io/FileUtilsTestCase.java",
                    "file new path": "src/test/java/org/apache/commons/io/FileUtilsTestCase.java",
                    "full name": "src.test.java.org.apache.commons.io.FileUtilsTestCase.testWriteWithEncoding_WithAppendOptionTrue_ShouldNotDeletePreviousFileLines"
                },
                {
                    "function name": "getName",
                    "function params": [],
                    "file name": "FileUtilsTestCase.java",
                    "file old path": "src/test/java/org/apache/commons/io/FileUtilsTestCase.java",
                    "file new path": "src/test/java/org/apache/commons/io/FileUtilsTestCase.java",
                    "full name": "src.test.java.org.apache.commons.io.FileUtilsTestCase.getName"
                },
                {
                    "function name": "testSizeOf",
                    "function params": [],
                    "file name": "FileUtilsTestCase.java",
                    "file old path": "src/test/java/org/apache/commons/io/FileUtilsTestCase.java",
                    "file new path": "src/test/java/org/apache/commons/io/FileUtilsTestCase.java",
                    "full name": "src.test.java.org.apache.commons.io.FileUtilsTestCase.testSizeOf"
                },
                {
                    "function name": "testToFiles2",
                    "function params": [],
                    "file name": "FileUtilsTestCase.java",
                    "file old path": "src/test/java/org/apache/commons/io/FileUtilsTestCase.java",
                    "file new path": "src/test/java/org/apache/commons/io/FileUtilsTestCase.java",
                    "full name": "src.test.java.org.apache.commons.io.FileUtilsTestCase.testToFiles2"
                },
                {
                    "function name": "testMoveToDirectory",
                    "function params": [],
                    "file name": "FileUtilsTestCase.java",
                    "file old path": "src/test/java/org/apache/commons/io/FileUtilsTestCase.java",
                    "file new path": "src/test/java/org/apache/commons/io/FileUtilsTestCase.java",
                    "full name": "src.test.java.org.apache.commons.io.FileUtilsTestCase.testMoveToDirectory"
                },
                {
                    "function name": "testWriteLinesEncoding_WithAppendOptionFalse_ShouldDeletePreviousFileLines",
                    "function params": [],
                    "file name": "FileUtilsTestCase.java",
                    "file old path": "src/test/java/org/apache/commons/io/FileUtilsTestCase.java",
                    "file new path": "src/test/java/org/apache/commons/io/FileUtilsTestCase.java",
                    "full name": "src.test.java.org.apache.commons.io.FileUtilsTestCase.testWriteLinesEncoding_WithAppendOptionFalse_ShouldDeletePreviousFileLines"
                },
                {
                    "function name": "testWriteLines_4argsWithAppendOptionTrue_ShouldNotDeletePreviousFileLines",
                    "function params": [],
                    "file name": "FileUtilsTestCase.java",
                    "file old path": "src/test/java/org/apache/commons/io/FileUtilsTestCase.java",
                    "file new path": "src/test/java/org/apache/commons/io/FileUtilsTestCase.java",
                    "full name": "src.test.java.org.apache.commons.io.FileUtilsTestCase.testWriteLines_4argsWithAppendOptionTrue_ShouldNotDeletePreviousFileLines"
                },
                {
                    "function name": "testCompareSizeOf",
                    "function params": [],
                    "file name": "FileUtilsTestCase.java",
                    "file old path": "src/test/java/org/apache/commons/io/FileUtilsTestCase.java",
                    "file new path": "src/test/java/org/apache/commons/io/FileUtilsTestCase.java",
                    "full name": "src.test.java.org.apache.commons.io.FileUtilsTestCase.testCompareSizeOf"
                },
                {
                    "function name": "testWriteStringToFile2",
                    "function params": [],
                    "file name": "FileUtilsTestCase.java",
                    "file old path": "src/test/java/org/apache/commons/io/FileUtilsTestCase.java",
                    "file new path": "src/test/java/org/apache/commons/io/FileUtilsTestCase.java",
                    "full name": "src.test.java.org.apache.commons.io.FileUtilsTestCase.testWriteStringToFile2"
                },
                {
                    "function name": "testDeleteQuietlyFile",
                    "function params": [],
                    "file name": "FileUtilsTestCase.java",
                    "file old path": "src/test/java/org/apache/commons/io/FileUtilsTestCase.java",
                    "file new path": "src/test/java/org/apache/commons/io/FileUtilsTestCase.java",
                    "full name": "src.test.java.org.apache.commons.io.FileUtilsTestCase.testDeleteQuietlyFile"
                },
                {
                    "function name": "testSizeOfDirectory",
                    "function params": [],
                    "file name": "FileUtilsTestCase.java",
                    "file old path": "src/test/java/org/apache/commons/io/FileUtilsTestCase.java",
                    "file new path": "src/test/java/org/apache/commons/io/FileUtilsTestCase.java",
                    "full name": "src.test.java.org.apache.commons.io.FileUtilsTestCase.testSizeOfDirectory"
                },
                {
                    "function name": "testWriteLines_4argsWithAppendOptionFalse_ShouldDeletePreviousFileLines",
                    "function params": [],
                    "file name": "FileUtilsTestCase.java",
                    "file old path": "src/test/java/org/apache/commons/io/FileUtilsTestCase.java",
                    "file new path": "src/test/java/org/apache/commons/io/FileUtilsTestCase.java",
                    "full name": "src.test.java.org.apache.commons.io.FileUtilsTestCase.testWriteLines_4argsWithAppendOptionFalse_ShouldDeletePreviousFileLines"
                },
                {
                    "function name": "testWriteByteArrayToFile_WithOffsetAndLength_WithAppendOptionTrue_ShouldDeletePreviousFileLines",
                    "function params": [],
                    "file name": "FileUtilsTestCase.java",
                    "file old path": "src/test/java/org/apache/commons/io/FileUtilsTestCase.java",
                    "file new path": "src/test/java/org/apache/commons/io/FileUtilsTestCase.java",
                    "full name": "src.test.java.org.apache.commons.io.FileUtilsTestCase.testWriteByteArrayToFile_WithOffsetAndLength_WithAppendOptionTrue_ShouldDeletePreviousFileLines"
                },
                {
                    "function name": "testMoveDirectoryToDirectory",
                    "function params": [],
                    "file name": "FileUtilsTestCase.java",
                    "file old path": "src/test/java/org/apache/commons/io/FileUtilsTestCase.java",
                    "file new path": "src/test/java/org/apache/commons/io/FileUtilsTestCase.java",
                    "full name": "src.test.java.org.apache.commons.io.FileUtilsTestCase.testMoveDirectoryToDirectory"
                },
                {
                    "function name": "testIncorrectOutputSize",
                    "function params": [],
                    "file name": "FileUtilsTestCase.java",
                    "file old path": "src/test/java/org/apache/commons/io/FileUtilsTestCase.java",
                    "file new path": "src/test/java/org/apache/commons/io/FileUtilsTestCase.java",
                    "full name": "src.test.java.org.apache.commons.io.FileUtilsTestCase.testIncorrectOutputSize"
                },
                {
                    "function name": "testCopyDirectoryToExistingDest",
                    "function params": [],
                    "file name": "FileUtilsTestCase.java",
                    "file old path": "src/test/java/org/apache/commons/io/FileUtilsTestCase.java",
                    "file new path": "src/test/java/org/apache/commons/io/FileUtilsTestCase.java",
                    "full name": "src.test.java.org.apache.commons.io.FileUtilsTestCase.testCopyDirectoryToExistingDest"
                },
                {
                    "function name": "test_openOutputStream_noParentCreateFile",
                    "function params": [],
                    "file name": "FileUtilsTestCase.java",
                    "file old path": "src/test/java/org/apache/commons/io/FileUtilsTestCase.java",
                    "file new path": "src/test/java/org/apache/commons/io/FileUtilsTestCase.java",
                    "full name": "src.test.java.org.apache.commons.io.FileUtilsTestCase.test_openOutputStream_noParentCreateFile"
                },
                {
                    "function name": "testDeleteDirectoryWithNonDirectory",
                    "function params": [],
                    "file name": "FileUtilsTestCase.java",
                    "file old path": "src/test/java/org/apache/commons/io/FileUtilsTestCase.java",
                    "file new path": "src/test/java/org/apache/commons/io/FileUtilsTestCase.java",
                    "full name": "src.test.java.org.apache.commons.io.FileUtilsTestCase.testDeleteDirectoryWithNonDirectory"
                },
                {
                    "function name": "testCopyDirectoryErrors",
                    "function params": [],
                    "file name": "FileUtilsTestCase.java",
                    "file old path": "src/test/java/org/apache/commons/io/FileUtilsTestCase.java",
                    "file new path": "src/test/java/org/apache/commons/io/FileUtilsTestCase.java",
                    "full name": "src.test.java.org.apache.commons.io.FileUtilsTestCase.testCopyDirectoryErrors"
                },
                {
                    "function name": "testChecksumOnNullChecksum",
                    "function params": [],
                    "file name": "FileUtilsTestCase.java",
                    "file old path": "src/test/java/org/apache/commons/io/FileUtilsTestCase.java",
                    "file new path": "src/test/java/org/apache/commons/io/FileUtilsTestCase.java",
                    "full name": "src.test.java.org.apache.commons.io.FileUtilsTestCase.testChecksumOnNullChecksum"
                },
                {
                    "function name": "testWriteStringToFileWithEncoding_WithAppendOptionFalse_ShouldDeletePreviousFileLines",
                    "function params": [],
                    "file name": "FileUtilsTestCase.java",
                    "file old path": "src/test/java/org/apache/commons/io/FileUtilsTestCase.java",
                    "file new path": "src/test/java/org/apache/commons/io/FileUtilsTestCase.java",
                    "full name": "src.test.java.org.apache.commons.io.FileUtilsTestCase.testWriteStringToFileWithEncoding_WithAppendOptionFalse_ShouldDeletePreviousFileLines"
                },
                {
                    "function name": "backDateFile10Minutes",
                    "function params": [
                        "testFile"
                    ],
                    "file name": "FileUtilsTestCase.java",
                    "file old path": "src/test/java/org/apache/commons/io/FileUtilsTestCase.java",
                    "file new path": "src/test/java/org/apache/commons/io/FileUtilsTestCase.java",
                    "full name": "src.test.java.org.apache.commons.io.FileUtilsTestCase.backDateFile10Minutes"
                },
                {
                    "function name": "testCopyDirectoryToChild",
                    "function params": [],
                    "file name": "FileUtilsTestCase.java",
                    "file old path": "src/test/java/org/apache/commons/io/FileUtilsTestCase.java",
                    "file new path": "src/test/java/org/apache/commons/io/FileUtilsTestCase.java",
                    "full name": "src.test.java.org.apache.commons.io.FileUtilsTestCase.testCopyDirectoryToChild"
                },
                {
                    "function name": "createFilesForTestCopyDirectory",
                    "function params": [
                        "grandParentDir",
                        "parentDir",
                        "childDir"
                    ],
                    "file name": "FileUtilsTestCase.java",
                    "file old path": "src/test/java/org/apache/commons/io/FileUtilsTestCase.java",
                    "file new path": "src/test/java/org/apache/commons/io/FileUtilsTestCase.java",
                    "full name": "src.test.java.org.apache.commons.io.FileUtilsTestCase.createFilesForTestCopyDirectory"
                },
                {
                    "function name": "testForceDeleteAFile1",
                    "function params": [],
                    "file name": "FileUtilsTestCase.java",
                    "file old path": "src/test/java/org/apache/commons/io/FileUtilsTestCase.java",
                    "file new path": "src/test/java/org/apache/commons/io/FileUtilsTestCase.java",
                    "full name": "src.test.java.org.apache.commons.io.FileUtilsTestCase.testForceDeleteAFile1"
                },
                {
                    "function name": "ListDirectoryWalker",
                    "function params": [
                        "file",
                        "depth",
                        "results"
                    ],
                    "file name": "FileUtilsTestCase.java",
                    "file old path": "src/test/java/org/apache/commons/io/FileUtilsTestCase.java",
                    "file new path": "src/test/java/org/apache/commons/io/FileUtilsTestCase.java",
                    "full name": "src.test.java.org.apache.commons.io.FileUtilsTestCase.ListDirectoryWalker"
                },
                {
                    "function name": "testListFiles",
                    "function params": [],
                    "file name": "FileUtilsTestCase.java",
                    "file old path": "src/test/java/org/apache/commons/io/FileUtilsTestCase.java",
                    "file new path": "src/test/java/org/apache/commons/io/FileUtilsTestCase.java",
                    "full name": "src.test.java.org.apache.commons.io.FileUtilsTestCase.testListFiles"
                },
                {
                    "function name": "testListFilesWithDirs",
                    "function params": [],
                    "file name": "FileUtilsTestCase.java",
                    "file old path": "src/test/java/org/apache/commons/io/FileUtilsTestCase.java",
                    "file new path": "src/test/java/org/apache/commons/io/FileUtilsTestCase.java",
                    "full name": "src.test.java.org.apache.commons.io.FileUtilsTestCase.testListFilesWithDirs"
                },
                {
                    "function name": "testMoveFile_CopyDelete",
                    "function params": [],
                    "file name": "FileUtilsTestCase.java",
                    "file old path": "src/test/java/org/apache/commons/io/FileUtilsTestCase.java",
                    "file new path": "src/test/java/org/apache/commons/io/FileUtilsTestCase.java",
                    "full name": "src.test.java.org.apache.commons.io.FileUtilsTestCase.testMoveFile_CopyDelete"
                },
                {
                    "function name": "testWriteByteArrayToFile",
                    "function params": [],
                    "file name": "FileUtilsTestCase.java",
                    "file old path": "src/test/java/org/apache/commons/io/FileUtilsTestCase.java",
                    "file new path": "src/test/java/org/apache/commons/io/FileUtilsTestCase.java",
                    "full name": "src.test.java.org.apache.commons.io.FileUtilsTestCase.testWriteByteArrayToFile"
                },
                {
                    "function name": "setLastModifiedMillis",
                    "function params": [
                        "testFile",
                        "millis"
                    ],
                    "file name": "FileUtilsTestCase.java",
                    "file old path": "src/test/java/org/apache/commons/io/FileUtilsTestCase.java",
                    "file new path": "src/test/java/org/apache/commons/io/FileUtilsTestCase.java",
                    "full name": "src.test.java.org.apache.commons.io.FileUtilsTestCase.setLastModifiedMillis"
                },
                {
                    "function name": "testFilterByNameNot",
                    "function params": [],
                    "file name": "DirectoryStreamFilterTest.java",
                    "file old path": "src/test/java/org/apache/commons/io/file/DirectoryStreamFilterTest.java",
                    "file new path": "src/test/java/org/apache/commons/io/file/DirectoryStreamFilterTest.java",
                    "full name": "src.test.java.org.apache.commons.io.file.DirectoryStreamFilterTest.testFilterByNameNot"
                },
                {
                    "function name": "testFilterByName",
                    "function params": [],
                    "file name": "DirectoryStreamFilterTest.java",
                    "file old path": "src/test/java/org/apache/commons/io/file/DirectoryStreamFilterTest.java",
                    "file new path": "src/test/java/org/apache/commons/io/file/DirectoryStreamFilterTest.java",
                    "full name": "src.test.java.org.apache.commons.io.file.DirectoryStreamFilterTest.testFilterByName"
                },
                {
                    "function name": "testNewDirectoryStream",
                    "function params": [],
                    "file name": "PathUtilsTest.java",
                    "file old path": "src/test/java/org/apache/commons/io/file/PathUtilsTest.java",
                    "file new path": "src/test/java/org/apache/commons/io/file/PathUtilsTest.java",
                    "full name": "src.test.java.org.apache.commons.io.file.PathUtilsTest.testNewDirectoryStream"
                },
                {
                    "function name": "testJavadocExampleUsingNio",
                    "function params": [],
                    "file name": "AgeFileFilterTest.java",
                    "file old path": "src/test/java/org/apache/commons/io/filefilter/AgeFileFilterTest.java",
                    "file new path": "src/test/java/org/apache/commons/io/filefilter/AgeFileFilterTest.java",
                    "full name": "src.test.java.org.apache.commons.io.filefilter.AgeFileFilterTest.testJavadocExampleUsingNio"
                },
                {
                    "function name": "testNoCounting",
                    "function params": [],
                    "file name": "AgeFileFilterTest.java",
                    "file old path": "src/test/java/org/apache/commons/io/filefilter/AgeFileFilterTest.java",
                    "file new path": "src/test/java/org/apache/commons/io/filefilter/AgeFileFilterTest.java",
                    "full name": "src.test.java.org.apache.commons.io.filefilter.AgeFileFilterTest.testNoCounting"
                },
                {
                    "function name": "testJavadocExampleUsingNio",
                    "function params": [],
                    "file name": "DirectoryFileFilterTest.java",
                    "file old path": "src/test/java/org/apache/commons/io/filefilter/DirectoryFileFilterTest.java",
                    "file new path": "src/test/java/org/apache/commons/io/filefilter/DirectoryFileFilterTest.java",
                    "full name": "src.test.java.org.apache.commons.io.filefilter.DirectoryFileFilterTest.testJavadocExampleUsingNio"
                },
                {
                    "function name": "testNameFilterNullArgument",
                    "function params": [],
                    "file name": "FileFilterTestCase.java",
                    "file old path": "src/test/java/org/apache/commons/io/filefilter/FileFilterTestCase.java",
                    "file new path": "src/test/java/org/apache/commons/io/filefilter/FileFilterTestCase.java",
                    "full name": "src.test.java.org.apache.commons.io.filefilter.FileFilterTestCase.testNameFilterNullArgument"
                },
                {
                    "function name": "testSizeFilterOnFiles",
                    "function params": [],
                    "file name": "FileFilterTestCase.java",
                    "file old path": "src/test/java/org/apache/commons/io/filefilter/FileFilterTestCase.java",
                    "file new path": "src/test/java/org/apache/commons/io/filefilter/FileFilterTestCase.java",
                    "full name": "src.test.java.org.apache.commons.io.filefilter.FileFilterTestCase.testSizeFilterOnFiles"
                },
                {
                    "function name": "testFalse",
                    "function params": [],
                    "file name": "FileFilterTestCase.java",
                    "file old path": "src/test/java/org/apache/commons/io/filefilter/FileFilterTestCase.java",
                    "file new path": "src/test/java/org/apache/commons/io/filefilter/FileFilterTestCase.java",
                    "full name": "src.test.java.org.apache.commons.io.filefilter.FileFilterTestCase.testFalse"
                },
                {
                    "function name": "testMakeCVSAware",
                    "function params": [],
                    "file name": "FileFilterTestCase.java",
                    "file old path": "src/test/java/org/apache/commons/io/filefilter/FileFilterTestCase.java",
                    "file new path": "src/test/java/org/apache/commons/io/filefilter/FileFilterTestCase.java",
                    "full name": "src.test.java.org.apache.commons.io.filefilter.FileFilterTestCase.testMakeCVSAware"
                },
                {
                    "function name": "testHidden",
                    "function params": [],
                    "file name": "FileFilterTestCase.java",
                    "file old path": "src/test/java/org/apache/commons/io/filefilter/FileFilterTestCase.java",
                    "file new path": "src/test/java/org/apache/commons/io/filefilter/FileFilterTestCase.java",
                    "full name": "src.test.java.org.apache.commons.io.filefilter.FileFilterTestCase.testHidden"
                },
                {
                    "function name": "testCanRead",
                    "function params": [],
                    "file name": "FileFilterTestCase.java",
                    "file old path": "src/test/java/org/apache/commons/io/filefilter/FileFilterTestCase.java",
                    "file new path": "src/test/java/org/apache/commons/io/filefilter/FileFilterTestCase.java",
                    "full name": "src.test.java.org.apache.commons.io.filefilter.FileFilterTestCase.testCanRead"
                },
                {
                    "function name": "testEmpty",
                    "function params": [],
                    "file name": "FileFilterTestCase.java",
                    "file old path": "src/test/java/org/apache/commons/io/filefilter/FileFilterTestCase.java",
                    "file new path": "src/test/java/org/apache/commons/io/filefilter/FileFilterTestCase.java",
                    "full name": "src.test.java.org.apache.commons.io.filefilter.FileFilterTestCase.testEmpty"
                },
                {
                    "function name": "testFileFilterUtils_or",
                    "function params": [],
                    "file name": "FileFilterTestCase.java",
                    "file old path": "src/test/java/org/apache/commons/io/filefilter/FileFilterTestCase.java",
                    "file new path": "src/test/java/org/apache/commons/io/filefilter/FileFilterTestCase.java",
                    "full name": "src.test.java.org.apache.commons.io.filefilter.FileFilterTestCase.testFileFilterUtils_or"
                },
                {
                    "function name": "testAnd2",
                    "function params": [],
                    "file name": "FileFilterTestCase.java",
                    "file old path": "src/test/java/org/apache/commons/io/filefilter/FileFilterTestCase.java",
                    "file new path": "src/test/java/org/apache/commons/io/filefilter/FileFilterTestCase.java",
                    "full name": "src.test.java.org.apache.commons.io.filefilter.FileFilterTestCase.testAnd2"
                },
                {
                    "function name": "testMakeFileOnly",
                    "function params": [],
                    "file name": "FileFilterTestCase.java",
                    "file old path": "src/test/java/org/apache/commons/io/filefilter/FileFilterTestCase.java",
                    "file new path": "src/test/java/org/apache/commons/io/filefilter/FileFilterTestCase.java",
                    "full name": "src.test.java.org.apache.commons.io.filefilter.FileFilterTestCase.testMakeFileOnly"
                },
                {
                    "function name": "testMakeSVNAware",
                    "function params": [],
                    "file name": "FileFilterTestCase.java",
                    "file old path": "src/test/java/org/apache/commons/io/filefilter/FileFilterTestCase.java",
                    "file new path": "src/test/java/org/apache/commons/io/filefilter/FileFilterTestCase.java",
                    "full name": "src.test.java.org.apache.commons.io.filefilter.FileFilterTestCase.testMakeSVNAware"
                },
                {
                    "function name": "assertFooBarFileFiltering",
                    "function params": [
                        "filter"
                    ],
                    "file name": "FileFilterTestCase.java",
                    "file old path": "src/test/java/org/apache/commons/io/filefilter/FileFilterTestCase.java",
                    "file new path": "src/test/java/org/apache/commons/io/filefilter/FileFilterTestCase.java",
                    "full name": "src.test.java.org.apache.commons.io.filefilter.FileFilterTestCase.assertFooBarFileFiltering"
                },
                {
                    "function name": "testSizeFilterOnPaths",
                    "function params": [],
                    "file name": "FileFilterTestCase.java",
                    "file old path": "src/test/java/org/apache/commons/io/filefilter/FileFilterTestCase.java",
                    "file new path": "src/test/java/org/apache/commons/io/filefilter/FileFilterTestCase.java",
                    "full name": "src.test.java.org.apache.commons.io.filefilter.FileFilterTestCase.testSizeFilterOnPaths"
                },
                {
                    "function name": "testTrue",
                    "function params": [],
                    "file name": "FileFilterTestCase.java",
                    "file old path": "src/test/java/org/apache/commons/io/filefilter/FileFilterTestCase.java",
                    "file new path": "src/test/java/org/apache/commons/io/filefilter/FileFilterTestCase.java",
                    "full name": "src.test.java.org.apache.commons.io.filefilter.FileFilterTestCase.testTrue"
                },
                {
                    "function name": "testNameFilter",
                    "function params": [],
                    "file name": "FileFilterTestCase.java",
                    "file old path": "src/test/java/org/apache/commons/io/filefilter/FileFilterTestCase.java",
                    "file new path": "src/test/java/org/apache/commons/io/filefilter/FileFilterTestCase.java",
                    "full name": "src.test.java.org.apache.commons.io.filefilter.FileFilterTestCase.testNameFilter"
                },
                {
                    "function name": "testDelegateFileFilter",
                    "function params": [],
                    "file name": "FileFilterTestCase.java",
                    "file old path": "src/test/java/org/apache/commons/io/filefilter/FileFilterTestCase.java",
                    "file new path": "src/test/java/org/apache/commons/io/filefilter/FileFilterTestCase.java",
                    "full name": "src.test.java.org.apache.commons.io.filefilter.FileFilterTestCase.testDelegateFileFilter"
                },
                {
                    "function name": "testMagicNumberFileFilterStringOffset",
                    "function params": [],
                    "file name": "FileFilterTestCase.java",
                    "file old path": "src/test/java/org/apache/commons/io/filefilter/FileFilterTestCase.java",
                    "file new path": "src/test/java/org/apache/commons/io/filefilter/FileFilterTestCase.java",
                    "full name": "src.test.java.org.apache.commons.io.filefilter.FileFilterTestCase.testMagicNumberFileFilterStringOffset"
                },
                {
                    "function name": "testMagicNumberFileFilterBytesOffset",
                    "function params": [],
                    "file name": "FileFilterTestCase.java",
                    "file old path": "src/test/java/org/apache/commons/io/filefilter/FileFilterTestCase.java",
                    "file new path": "src/test/java/org/apache/commons/io/filefilter/FileFilterTestCase.java",
                    "full name": "src.test.java.org.apache.commons.io.filefilter.FileFilterTestCase.testMagicNumberFileFilterBytesOffset"
                },
                {
                    "function name": "testNegate",
                    "function params": [],
                    "file name": "FileFilterTestCase.java",
                    "file old path": "src/test/java/org/apache/commons/io/filefilter/FileFilterTestCase.java",
                    "file new path": "src/test/java/org/apache/commons/io/filefilter/FileFilterTestCase.java",
                    "full name": "src.test.java.org.apache.commons.io.filefilter.FileFilterTestCase.testNegate"
                },
                {
                    "function name": "testSuffixCaseInsensitive",
                    "function params": [],
                    "file name": "FileFilterTestCase.java",
                    "file old path": "src/test/java/org/apache/commons/io/filefilter/FileFilterTestCase.java",
                    "file new path": "src/test/java/org/apache/commons/io/filefilter/FileFilterTestCase.java",
                    "full name": "src.test.java.org.apache.commons.io.filefilter.FileFilterTestCase.testSuffixCaseInsensitive"
                },
                {
                    "function name": "testAgeFilter",
                    "function params": [],
                    "file name": "FileFilterTestCase.java",
                    "file old path": "src/test/java/org/apache/commons/io/filefilter/FileFilterTestCase.java",
                    "file new path": "src/test/java/org/apache/commons/io/filefilter/FileFilterTestCase.java",
                    "full name": "src.test.java.org.apache.commons.io.filefilter.FileFilterTestCase.testAgeFilter"
                },
                {
                    "function name": "testAnd",
                    "function params": [],
                    "file name": "FileFilterTestCase.java",
                    "file old path": "src/test/java/org/apache/commons/io/filefilter/FileFilterTestCase.java",
                    "file new path": "src/test/java/org/apache/commons/io/filefilter/FileFilterTestCase.java",
                    "full name": "src.test.java.org.apache.commons.io.filefilter.FileFilterTestCase.testAnd"
                },
                {
                    "function name": "testWildcard",
                    "function params": [],
                    "file name": "FileFilterTestCase.java",
                    "file old path": "src/test/java/org/apache/commons/io/filefilter/FileFilterTestCase.java",
                    "file new path": "src/test/java/org/apache/commons/io/filefilter/FileFilterTestCase.java",
                    "full name": "src.test.java.org.apache.commons.io.filefilter.FileFilterTestCase.testWildcard"
                },
                {
                    "function name": "assertFiltering",
                    "function params": [
                        "filter",
                        "path",
                        "expected"
                    ],
                    "file name": "FileFilterTestCase.java",
                    "file old path": "src/test/java/org/apache/commons/io/filefilter/FileFilterTestCase.java",
                    "file new path": "src/test/java/org/apache/commons/io/filefilter/FileFilterTestCase.java",
                    "full name": "src.test.java.org.apache.commons.io.filefilter.FileFilterTestCase.assertFiltering"
                },
                {
                    "function name": "testDirectory",
                    "function params": [],
                    "file name": "FileFilterTestCase.java",
                    "file old path": "src/test/java/org/apache/commons/io/filefilter/FileFilterTestCase.java",
                    "file new path": "src/test/java/org/apache/commons/io/filefilter/FileFilterTestCase.java",
                    "full name": "src.test.java.org.apache.commons.io.filefilter.FileFilterTestCase.testDirectory"
                },
                {
                    "function name": "testAndArray",
                    "function params": [],
                    "file name": "FileFilterTestCase.java",
                    "file old path": "src/test/java/org/apache/commons/io/filefilter/FileFilterTestCase.java",
                    "file new path": "src/test/java/org/apache/commons/io/filefilter/FileFilterTestCase.java",
                    "full name": "src.test.java.org.apache.commons.io.filefilter.FileFilterTestCase.testAndArray"
                },
                {
                    "function name": "testPrefixCaseInsensitive",
                    "function params": [],
                    "file name": "FileFilterTestCase.java",
                    "file old path": "src/test/java/org/apache/commons/io/filefilter/FileFilterTestCase.java",
                    "file new path": "src/test/java/org/apache/commons/io/filefilter/FileFilterTestCase.java",
                    "full name": "src.test.java.org.apache.commons.io.filefilter.FileFilterTestCase.testPrefixCaseInsensitive"
                },
                {
                    "function name": "testFileEqualsFilter",
                    "function params": [],
                    "file name": "FileFilterTestCase.java",
                    "file old path": "src/test/java/org/apache/commons/io/filefilter/FileFilterTestCase.java",
                    "file new path": "src/test/java/org/apache/commons/io/filefilter/FileFilterTestCase.java",
                    "full name": "src.test.java.org.apache.commons.io.filefilter.FileFilterTestCase.testFileEqualsFilter"
                },
                {
                    "function name": "testFileFilterUtils_and",
                    "function params": [],
                    "file name": "FileFilterTestCase.java",
                    "file old path": "src/test/java/org/apache/commons/io/filefilter/FileFilterTestCase.java",
                    "file new path": "src/test/java/org/apache/commons/io/filefilter/FileFilterTestCase.java",
                    "full name": "src.test.java.org.apache.commons.io.filefilter.FileFilterTestCase.testFileFilterUtils_and"
                },
                {
                    "function name": "testCanWrite",
                    "function params": [],
                    "file name": "FileFilterTestCase.java",
                    "file old path": "src/test/java/org/apache/commons/io/filefilter/FileFilterTestCase.java",
                    "file new path": "src/test/java/org/apache/commons/io/filefilter/FileFilterTestCase.java",
                    "full name": "src.test.java.org.apache.commons.io.filefilter.FileFilterTestCase.testCanWrite"
                },
                {
                    "function name": "testPrefix",
                    "function params": [],
                    "file name": "FileFilterTestCase.java",
                    "file old path": "src/test/java/org/apache/commons/io/filefilter/FileFilterTestCase.java",
                    "file new path": "src/test/java/org/apache/commons/io/filefilter/FileFilterTestCase.java",
                    "full name": "src.test.java.org.apache.commons.io.filefilter.FileFilterTestCase.testPrefix"
                },
                {
                    "function name": "testMakeDirectoryOnly",
                    "function params": [],
                    "file name": "FileFilterTestCase.java",
                    "file old path": "src/test/java/org/apache/commons/io/filefilter/FileFilterTestCase.java",
                    "file new path": "src/test/java/org/apache/commons/io/filefilter/FileFilterTestCase.java",
                    "full name": "src.test.java.org.apache.commons.io.filefilter.FileFilterTestCase.testMakeDirectoryOnly"
                },
                {
                    "function name": "assertFiltering",
                    "function params": [
                        "filter",
                        "file",
                        "expected"
                    ],
                    "file name": "FileFilterTestCase.java",
                    "file old path": "src/test/java/org/apache/commons/io/filefilter/FileFilterTestCase.java",
                    "file new path": "src/test/java/org/apache/commons/io/filefilter/FileFilterTestCase.java",
                    "full name": "src.test.java.org.apache.commons.io.filefilter.FileFilterTestCase.assertFiltering"
                },
                {
                    "function name": "testDeprecatedWildcard",
                    "function params": [],
                    "file name": "FileFilterTestCase.java",
                    "file old path": "src/test/java/org/apache/commons/io/filefilter/FileFilterTestCase.java",
                    "file new path": "src/test/java/org/apache/commons/io/filefilter/FileFilterTestCase.java",
                    "full name": "src.test.java.org.apache.commons.io.filefilter.FileFilterTestCase.testDeprecatedWildcard"
                },
                {
                    "function name": "testOr",
                    "function params": [],
                    "file name": "FileFilterTestCase.java",
                    "file old path": "src/test/java/org/apache/commons/io/filefilter/FileFilterTestCase.java",
                    "file new path": "src/test/java/org/apache/commons/io/filefilter/FileFilterTestCase.java",
                    "full name": "src.test.java.org.apache.commons.io.filefilter.FileFilterTestCase.testOr"
                },
                {
                    "function name": "testFiles",
                    "function params": [],
                    "file name": "FileFilterTestCase.java",
                    "file old path": "src/test/java/org/apache/commons/io/filefilter/FileFilterTestCase.java",
                    "file new path": "src/test/java/org/apache/commons/io/filefilter/FileFilterTestCase.java",
                    "full name": "src.test.java.org.apache.commons.io.filefilter.FileFilterTestCase.testFiles"
                },
                {
                    "function name": "testSuffix",
                    "function params": [],
                    "file name": "FileFilterTestCase.java",
                    "file old path": "src/test/java/org/apache/commons/io/filefilter/FileFilterTestCase.java",
                    "file new path": "src/test/java/org/apache/commons/io/filefilter/FileFilterTestCase.java",
                    "full name": "src.test.java.org.apache.commons.io.filefilter.FileFilterTestCase.testSuffix"
                },
                {
                    "function name": "testPathEqualsFilter",
                    "function params": [],
                    "file name": "FileFilterTestCase.java",
                    "file old path": "src/test/java/org/apache/commons/io/filefilter/FileFilterTestCase.java",
                    "file new path": "src/test/java/org/apache/commons/io/filefilter/FileFilterTestCase.java",
                    "full name": "src.test.java.org.apache.commons.io.filefilter.FileFilterTestCase.testPathEqualsFilter"
                },
                {
                    "function name": "testNoCounting",
                    "function params": [],
                    "file name": "NameFileFilterTest.java",
                    "file old path": "src/test/java/org/apache/commons/io/filefilter/NameFileFilterTest.java",
                    "file new path": "src/test/java/org/apache/commons/io/filefilter/NameFileFilterTest.java",
                    "full name": "src.test.java.org.apache.commons.io.filefilter.NameFileFilterTest.testNoCounting"
                },
                {
                    "function name": "testJavadocExampleUsingNio",
                    "function params": [],
                    "file name": "NameFileFilterTest.java",
                    "file old path": "src/test/java/org/apache/commons/io/filefilter/NameFileFilterTest.java",
                    "file new path": "src/test/java/org/apache/commons/io/filefilter/NameFileFilterTest.java",
                    "full name": "src.test.java.org.apache.commons.io.filefilter.NameFileFilterTest.testJavadocExampleUsingNio"
                },
                {
                    "function name": "assertFiltering",
                    "function params": [
                        "filter",
                        "path",
                        "expected"
                    ],
                    "file name": "RegexFileFilterTestCase.java",
                    "file old path": "src/test/java/org/apache/commons/io/filefilter/RegexFileFilterTestCase.java",
                    "file new path": "src/test/java/org/apache/commons/io/filefilter/RegexFileFilterTestCase.java",
                    "full name": "src.test.java.org.apache.commons.io.filefilter.RegexFileFilterTestCase.assertFiltering"
                },
                {
                    "function name": "generateTestData",
                    "function params": [
                        "out",
                        "size"
                    ],
                    "file name": "TestUtils.java",
                    "file old path": "src/test/java/org/apache/commons/io/test/TestUtils.java",
                    "file new path": "src/test/java/org/apache/commons/io/test/TestUtils.java",
                    "full name": "src.test.java.org.apache.commons.io.test.TestUtils.generateTestData"
                },
                {
                    "function name": "generateTestData",
                    "function params": [
                        "file",
                        "size"
                    ],
                    "file name": "TestUtils.java",
                    "file old path": "src/test/java/org/apache/commons/io/test/TestUtils.java",
                    "file new path": "src/test/java/org/apache/commons/io/test/TestUtils.java",
                    "full name": "src.test.java.org.apache.commons.io.test.TestUtils.generateTestData"
                },
                {
                    "function name": "generateTestData",
                    "function params": [
                        "size"
                    ],
                    "file name": "TestUtils.java",
                    "file old path": "src/test/java/org/apache/commons/io/test/TestUtils.java",
                    "file new path": "src/test/java/org/apache/commons/io/test/TestUtils.java",
                    "full name": "src.test.java.org.apache.commons.io.test.TestUtils.generateTestData"
                }
            ],
            "files that changed": [
                "src/main/java/org/apache/commons/io/FileUtils.java",
                "src/main/java/org/apache/commons/io/file/AccumulatorPathVisitor.java",
                "src/main/java/org/apache/commons/io/file/CopyDirectoryVisitor.java",
                "src/main/java/org/apache/commons/io/file/CountingPathVisitor.java",
                "src/main/java/org/apache/commons/io/file/PathFilter.java",
                "src/main/java/org/apache/commons/io/file/PathUtils.java",
                "src/main/java/org/apache/commons/io/filefilter/AbstractFileFilter.java",
                "src/main/java/org/apache/commons/io/filefilter/AgeFileFilter.java",
                "src/main/java/org/apache/commons/io/filefilter/CanExecuteFileFilter.java",
                "src/main/java/org/apache/commons/io/filefilter/CanReadFileFilter.java",
                "src/main/java/org/apache/commons/io/filefilter/CanWriteFileFilter.java",
                "src/main/java/org/apache/commons/io/filefilter/DirectoryFileFilter.java",
                "src/main/java/org/apache/commons/io/filefilter/EmptyFileFilter.java",
                "src/main/java/org/apache/commons/io/filefilter/FileFileFilter.java",
                "src/main/java/org/apache/commons/io/filefilter/FileFilterUtils.java",
                "src/main/java/org/apache/commons/io/filefilter/HiddenFileFilter.java",
                "src/main/java/org/apache/commons/io/filefilter/IOFileFilter.java",
                "src/main/java/org/apache/commons/io/filefilter/MagicNumberFileFilter.java",
                "src/main/java/org/apache/commons/io/filefilter/NameFileFilter.java",
                "src/main/java/org/apache/commons/io/filefilter/PrefixFileFilter.java",
                "src/main/java/org/apache/commons/io/filefilter/RegexFileFilter.java",
                "src/main/java/org/apache/commons/io/filefilter/SizeFileFilter.java",
                "src/main/java/org/apache/commons/io/filefilter/SuffixFileFilter.java",
                "src/main/java/org/apache/commons/io/filefilter/WildcardFileFilter.java",
                "src/main/java/org/apache/commons/io/filefilter/WildcardFilter.java",
                "src/test/java/org/apache/commons/io/FileUtilsTestCase.java",
                "src/test/java/org/apache/commons/io/file/DirectoryStreamFilterTest.java",
                "src/test/java/org/apache/commons/io/file/PathUtilsTest.java",
                "src/test/java/org/apache/commons/io/filefilter/AgeFileFilterTest.java",
                "src/test/java/org/apache/commons/io/filefilter/DirectoryFileFilterTest.java",
                "src/test/java/org/apache/commons/io/filefilter/FileFilterTestCase.java",
                "src/test/java/org/apache/commons/io/filefilter/NameFileFilterTest.java",
                "src/test/java/org/apache/commons/io/filefilter/RegexFileFilterTestCase.java",
                "src/test/java/org/apache/commons/io/test/TestUtils.java"
            ]
        },
        {
            "bug index": "86",
            "bug id": "IO-163",
            "hexsha": "01afc9d7d01e802ee3a0d91ff47c75041cff0cfe",
            "fix_hash": "75b79c7203699abb83e5ed2ed398af65139ef064",
            "description": "The method FileUtils.toURLs() uses the following method to convert from File to URL:\n    File.toURL();\n\nThis method has scary warnings that it's a bad way to do the conversion because characters will not be escaped as required in URL strings.  In Java 1.6, this method has actually been deprecated.  All recent JDK versions recommend instead using:\n    File.toURI().toURL();\n\nas the URI code will properly perform the escaping.",
            "commit number version hash": 717,
            "commit number": 1790,
            "function that changed": [
                {
                    "function name": "copyDirectory",
                    "function params": [
                        "srcDir",
                        "destDir",
                        "filter",
                        "preserveFileDate",
                        "copyOptions"
                    ],
                    "file name": "FileUtils.java",
                    "file old path": "src/main/java/org/apache/commons/io/FileUtils.java",
                    "file new path": "src/main/java/org/apache/commons/io/FileUtils.java",
                    "full name": "src.main.java.org.apache.commons.io.FileUtils.copyDirectory"
                }
            ],
            "files that changed": [
                "src/main/java/org/apache/commons/io/FileUtils.java"
            ]
        },
        {
            "bug index": "87",
            "bug id": "IO-689",
            "hexsha": "94be75e45726aeab75681b0b8570ecc4826a2384",
            "fix_hash": "e1a5fdde3937f47a8f78d14dff4f2c91337c2ad0",
            "description": "This commit in PR #124 breaks FileUtils with new Java 8 datetime APIs:\r\nhttps://github.com/apache/commons-io/pull/124/commits/2eb549873470844c88681e92c64631f796002020\r\n\r\nBecause of this I had to put all of the methods to the list of blacklisted APIs in Apache Lucene / Solr. The reason for this change is that now all depend on local datetime, there's no way to pass an Instant with a UNIX timestamp through the API without it being corrupted due to forwards/backwards transformation.\r\n\r\nBackground: During DST changes the same local date time exists two times (in autumn, you have in most countries two time the 2:30am time, once before and once after the DST change - because time is rolled back).\r\n\r\nWith the above commit you first convert an Instant (which is by definition just a UNIX timestamp and can be converted as-is to a long) to a local Datetime and then back to an Instant. By this forward/backward transformation you get off by an hour during that one hour in autumn, when DST switches back to standard time.\r\n\r\nPlease revert this commit and release a bugfix.\r\n\r\nThere is no reason to convert an Instant to local and back, the arguments in the PR are plain wrong. Instants are timezoneless and are identical to UNIX timestamps.\r\n\r\nThis commit breaks all new methods, because at the end all new methods go through the \"Instant\" path which does the faulty transformation.",
            "commit number version hash": 2059,
            "commit number": 1766,
            "function that changed": [
                {
                    "function name": "isFileNewer",
                    "function params": [
                        "file",
                        "instant"
                    ],
                    "file name": "FileUtils.java",
                    "file old path": "src/main/java/org/apache/commons/io/FileUtils.java",
                    "file new path": "src/main/java/org/apache/commons/io/FileUtils.java",
                    "full name": "src.main.java.org.apache.commons.io.FileUtils.isFileNewer"
                },
                {
                    "function name": "isFileOlder",
                    "function params": [
                        "file",
                        "instant"
                    ],
                    "file name": "FileUtils.java",
                    "file old path": "src/main/java/org/apache/commons/io/FileUtils.java",
                    "file new path": "src/main/java/org/apache/commons/io/FileUtils.java",
                    "full name": "src.main.java.org.apache.commons.io.FileUtils.isFileOlder"
                }
            ],
            "files that changed": [
                "src/main/java/org/apache/commons/io/FileUtils.java"
            ]
        },
        {
            "bug index": "88",
            "bug id": "IO-689",
            "hexsha": "94be75e45726aeab75681b0b8570ecc4826a2384",
            "fix_hash": "8f4ccfc0819152b18490960b698ab3fc2573d824",
            "description": "This commit in PR #124 breaks FileUtils with new Java 8 datetime APIs:\r\nhttps://github.com/apache/commons-io/pull/124/commits/2eb549873470844c88681e92c64631f796002020\r\n\r\nBecause of this I had to put all of the methods to the list of blacklisted APIs in Apache Lucene / Solr. The reason for this change is that now all depend on local datetime, there's no way to pass an Instant with a UNIX timestamp through the API without it being corrupted due to forwards/backwards transformation.\r\n\r\nBackground: During DST changes the same local date time exists two times (in autumn, you have in most countries two time the 2:30am time, once before and once after the DST change - because time is rolled back).\r\n\r\nWith the above commit you first convert an Instant (which is by definition just a UNIX timestamp and can be converted as-is to a long) to a local Datetime and then back to an Instant. By this forward/backward transformation you get off by an hour during that one hour in autumn, when DST switches back to standard time.\r\n\r\nPlease revert this commit and release a bugfix.\r\n\r\nThere is no reason to convert an Instant to local and back, the arguments in the PR are plain wrong. Instants are timezoneless and are identical to UNIX timestamps.\r\n\r\nThis commit breaks all new methods, because at the end all new methods go through the \"Instant\" path which does the faulty transformation.",
            "commit number version hash": 2059,
            "commit number": 1765,
            "function that changed": [],
            "files that changed": [
                "src/main/java/org/apache/commons/io/FileUtils.java"
            ]
        },
        {
            "bug index": "89",
            "bug id": "IO-1",
            "hexsha": "742c51feeaf75542ab9db6782ad3d2ad506fb871",
            "fix_hash": "c0f4623c95d9e5290c1aa8b16d63eadda6aa7828",
            "description": "FileUtils.forceMkdir(File) calls File.mkdirs() to create the directory. The\nJavaDoc of this method does not mention that any necessary but nonexistent\nparent directories are created, too.",
            "commit number version hash": 443,
            "commit number": 1763,
            "function that changed": [
                {
                    "function name": "CleaningPathVisitor",
                    "function params": [
                        "pathCounter",
                        "skip"
                    ],
                    "file name": "CleaningPathVisitor.java",
                    "file old path": "src/main/java/org/apache/commons/io/file/CleaningPathVisitor.java",
                    "file new path": "src/main/java/org/apache/commons/io/file/CleaningPathVisitor.java",
                    "full name": "src.main.java.org.apache.commons.io.file.CleaningPathVisitor.CleaningPathVisitor"
                },
                {
                    "function name": "equals",
                    "function params": [
                        "obj"
                    ],
                    "file name": "CleaningPathVisitor.java",
                    "file old path": "src/main/java/org/apache/commons/io/file/CleaningPathVisitor.java",
                    "file new path": "src/main/java/org/apache/commons/io/file/CleaningPathVisitor.java",
                    "full name": "src.main.java.org.apache.commons.io.file.CleaningPathVisitor.equals"
                },
                {
                    "function name": "hashCode",
                    "function params": [],
                    "file name": "CleaningPathVisitor.java",
                    "file old path": "src/main/java/org/apache/commons/io/file/CleaningPathVisitor.java",
                    "file new path": "src/main/java/org/apache/commons/io/file/CleaningPathVisitor.java",
                    "full name": "src.main.java.org.apache.commons.io.file.CleaningPathVisitor.hashCode"
                },
                {
                    "function name": "equals",
                    "function params": [
                        "obj"
                    ],
                    "file name": "CopyDirectoryVisitor.java",
                    "file old path": "src/main/java/org/apache/commons/io/file/CopyDirectoryVisitor.java",
                    "file new path": "src/main/java/org/apache/commons/io/file/CopyDirectoryVisitor.java",
                    "full name": "src.main.java.org.apache.commons.io.file.CopyDirectoryVisitor.equals"
                },
                {
                    "function name": "hashCode",
                    "function params": [],
                    "file name": "CopyDirectoryVisitor.java",
                    "file old path": "src/main/java/org/apache/commons/io/file/CopyDirectoryVisitor.java",
                    "file new path": "src/main/java/org/apache/commons/io/file/CopyDirectoryVisitor.java",
                    "full name": "src.main.java.org.apache.commons.io.file.CopyDirectoryVisitor.hashCode"
                },
                {
                    "function name": "DeletingPathVisitor",
                    "function params": [
                        "pathCounter",
                        "skip"
                    ],
                    "file name": "DeletingPathVisitor.java",
                    "file old path": "src/main/java/org/apache/commons/io/file/DeletingPathVisitor.java",
                    "file new path": "src/main/java/org/apache/commons/io/file/DeletingPathVisitor.java",
                    "full name": "src.main.java.org.apache.commons.io.file.DeletingPathVisitor.DeletingPathVisitor"
                },
                {
                    "function name": "hashCode",
                    "function params": [],
                    "file name": "DeletingPathVisitor.java",
                    "file old path": "src/main/java/org/apache/commons/io/file/DeletingPathVisitor.java",
                    "file new path": "src/main/java/org/apache/commons/io/file/DeletingPathVisitor.java",
                    "full name": "src.main.java.org.apache.commons.io.file.DeletingPathVisitor.hashCode"
                },
                {
                    "function name": "equals",
                    "function params": [
                        "obj"
                    ],
                    "file name": "DeletingPathVisitor.java",
                    "file old path": "src/main/java/org/apache/commons/io/file/DeletingPathVisitor.java",
                    "file new path": "src/main/java/org/apache/commons/io/file/DeletingPathVisitor.java",
                    "full name": "src.main.java.org.apache.commons.io.file.DeletingPathVisitor.equals"
                }
            ],
            "files that changed": [
                "src/main/java/org/apache/commons/io/file/CleaningPathVisitor.java",
                "src/main/java/org/apache/commons/io/file/CopyDirectoryVisitor.java",
                "src/main/java/org/apache/commons/io/file/DeletingPathVisitor.java"
            ]
        },
        {
            "bug index": "90",
            "bug id": "IO-117",
            "hexsha": "742c51feeaf75542ab9db6782ad3d2ad506fb871",
            "fix_hash": "e26387a5322eb4f68963573ae4febd76c975def0",
            "description": "Methods about reading unsigned-integer in class EndianUtils may return a negative number, due to casting int to long.\nCalculations with operator & etc. are under integer in these methods so its results are integer,\nthen implicit casting the results to long keeps its positive/negative sign.",
            "commit number version hash": 443,
            "commit number": 1750,
            "function that changed": [
                {
                    "function name": "ReversedLinesFileReader",
                    "function params": [
                        "file",
                        "blockSize",
                        "charsetName"
                    ],
                    "file name": "ReversedLinesFileReader.java",
                    "file old path": "src/main/java/org/apache/commons/io/input/ReversedLinesFileReader.java",
                    "file new path": "src/main/java/org/apache/commons/io/input/ReversedLinesFileReader.java",
                    "full name": "src.main.java.org.apache.commons.io.input.ReversedLinesFileReader.ReversedLinesFileReader"
                },
                {
                    "function name": "ReversedLinesFileReader",
                    "function params": [
                        "file",
                        "blockSize",
                        "encoding"
                    ],
                    "file name": "ReversedLinesFileReader.java",
                    "file old path": "src/main/java/org/apache/commons/io/input/ReversedLinesFileReader.java",
                    "file new path": "src/main/java/org/apache/commons/io/input/ReversedLinesFileReader.java",
                    "full name": "src.main.java.org.apache.commons.io.input.ReversedLinesFileReader.ReversedLinesFileReader"
                },
                {
                    "function name": "ReversedLinesFileReader",
                    "function params": [
                        "file",
                        "blockSize",
                        "encoding"
                    ],
                    "file name": "ReversedLinesFileReader.java",
                    "file old path": "src/main/java/org/apache/commons/io/input/ReversedLinesFileReader.java",
                    "file new path": "src/main/java/org/apache/commons/io/input/ReversedLinesFileReader.java",
                    "full name": "src.main.java.org.apache.commons.io.input.ReversedLinesFileReader.ReversedLinesFileReader"
                },
                {
                    "function name": "FilePart",
                    "function params": [],
                    "file name": "ReversedLinesFileReader.java",
                    "file old path": "src/main/java/org/apache/commons/io/input/ReversedLinesFileReader.java",
                    "file new path": "src/main/java/org/apache/commons/io/input/ReversedLinesFileReader.java",
                    "full name": "src.main.java.org.apache.commons.io.input.ReversedLinesFileReader.FilePart"
                },
                {
                    "function name": "ReversedLinesFileReader",
                    "function params": [
                        "file",
                        "blockSize",
                        "charset"
                    ],
                    "file name": "ReversedLinesFileReader.java",
                    "file old path": "src/main/java/org/apache/commons/io/input/ReversedLinesFileReader.java",
                    "file new path": "src/main/java/org/apache/commons/io/input/ReversedLinesFileReader.java",
                    "full name": "src.main.java.org.apache.commons.io.input.ReversedLinesFileReader.ReversedLinesFileReader"
                },
                {
                    "function name": "readLine",
                    "function params": [],
                    "file name": "ReversedLinesFileReader.java",
                    "file old path": "src/main/java/org/apache/commons/io/input/ReversedLinesFileReader.java",
                    "file new path": "src/main/java/org/apache/commons/io/input/ReversedLinesFileReader.java",
                    "full name": "src.main.java.org.apache.commons.io.input.ReversedLinesFileReader.readLine"
                },
                {
                    "function name": "ReversedLinesFileReader",
                    "function params": [
                        "file",
                        "blockSize",
                        "encoding"
                    ],
                    "file name": "ReversedLinesFileReader.java",
                    "file old path": "src/main/java/org/apache/commons/io/input/ReversedLinesFileReader.java",
                    "file new path": "src/main/java/org/apache/commons/io/input/ReversedLinesFileReader.java",
                    "full name": "src.main.java.org.apache.commons.io.input.ReversedLinesFileReader.ReversedLinesFileReader"
                },
                {
                    "function name": "ReversedLinesFileReader",
                    "function params": [
                        "file",
                        "blockSize",
                        "charset"
                    ],
                    "file name": "ReversedLinesFileReader.java",
                    "file old path": "src/main/java/org/apache/commons/io/input/ReversedLinesFileReader.java",
                    "file new path": "src/main/java/org/apache/commons/io/input/ReversedLinesFileReader.java",
                    "full name": "src.main.java.org.apache.commons.io.input.ReversedLinesFileReader.ReversedLinesFileReader"
                },
                {
                    "function name": "testDataIntegrityWithBufferedReader",
                    "function params": [
                        "fileName",
                        "charsetName",
                        "blockSize",
                        "useNonDefaultFileSystem",
                        "isResource"
                    ],
                    "file name": "ReversedLinesFileReaderTestParamFile.java",
                    "file old path": "src/test/java/org/apache/commons/io/input/ReversedLinesFileReaderTestParamFile.java",
                    "file new path": "src/test/java/org/apache/commons/io/input/ReversedLinesFileReaderTestParamFile.java",
                    "full name": "src.test.java.org.apache.commons.io.input.ReversedLinesFileReaderTestParamFile.testDataIntegrityWithBufferedReader"
                },
                {
                    "function name": "testDataIntegrityWithBufferedReader",
                    "function params": [],
                    "file name": "ReversedLinesFileReaderTestParamFile.java",
                    "file old path": "src/test/java/org/apache/commons/io/input/ReversedLinesFileReaderTestParamFile.java",
                    "file new path": "src/test/java/org/apache/commons/io/input/ReversedLinesFileReaderTestParamFile.java",
                    "full name": "src.test.java.org.apache.commons.io.input.ReversedLinesFileReaderTestParamFile.testDataIntegrityWithBufferedReader"
                },
                {
                    "function name": "testDataIntegrityWithBufferedReader",
                    "function params": [
                        "fileName",
                        "encodingName",
                        "blockSize",
                        "useNonDefaultFileSystem"
                    ],
                    "file name": "ReversedLinesFileReaderTestParamFile.java",
                    "file old path": "src/test/java/org/apache/commons/io/input/ReversedLinesFileReaderTestParamFile.java",
                    "file new path": "src/test/java/org/apache/commons/io/input/ReversedLinesFileReaderTestParamFile.java",
                    "full name": "src.test.java.org.apache.commons.io.input.ReversedLinesFileReaderTestParamFile.testDataIntegrityWithBufferedReader"
                }
            ],
            "files that changed": [
                "src/main/java/org/apache/commons/io/input/ReversedLinesFileReader.java",
                "src/test/java/org/apache/commons/io/IOUtilsTestCase.java",
                "src/test/java/org/apache/commons/io/input/CharSequenceReaderTest.java",
                "src/test/java/org/apache/commons/io/input/ReversedLinesFileReaderTestParamBlockSize.java",
                "src/test/java/org/apache/commons/io/input/ReversedLinesFileReaderTestParamFile.java",
                "src/test/java/org/apache/commons/io/input/ReversedLinesFileReaderTestSimple.java",
                "src/test/java/org/apache/commons/io/input/TailerTest.java"
            ]
        },
        {
            "bug index": "91",
            "bug id": "IO-2",
            "hexsha": "742c51feeaf75542ab9db6782ad3d2ad506fb871",
            "fix_hash": "bef89cfd40e04118fbb7384dc474b73b3b0c4742",
            "description": "Hi,\n\n(sorry to assign it to the wrong component, but I cannot choose for IO)\n\nwhen I try to concat 2 paths with \"\\\" as path separator instead of \"/\", an\nexception is thrown. I'll upload a patch for this as well as a junit test.\n\ne.g.: FilenameUtils.catPath(\"C:\\\\temp\\\\\", \"test\") throws an exception ...\n\nMaarten",
            "commit number version hash": 443,
            "commit number": 1743,
            "function that changed": [],
            "files that changed": [
                "src/main/java/org/apache/commons/io/FileUtils.java"
            ]
        },
        {
            "bug index": "92",
            "bug id": "IO-684",
            "hexsha": "cdf779422d47637ead33e094ae8f971de1c395f6",
            "fix_hash": "8fe59e41e8f092b33923bcb9a281fbc228a2bf8f",
            "description": "With the changes from IO-629 I'm getting an {{AccessDeniedException}} when trying to recursively delete a directory with read-only files, e.g. a {{.git}} repository. Before this change the directory was successfully deleted. It is due to the difference between {{File.delete()}} and {{Files.delete()}} (see https://stackoverflow.com/a/12234217/3375325).\r\nI think an option should be introduced to make the previous behavior available again with an overloaded method like {{PathUtils.delete(Path path, boolean force)}}.\r\n\r\nStacktrace:\r\n{noformat}\r\njava.nio.file.AccessDeniedException: C:\\Users\\xyz\\AppData\\Local\\Temp\\.git\\objects\\pack\\pack-6576964fbde069f1787513ce358d2260530d5738.idx\r\n\tat sun.nio.fs.WindowsException.translateToIOException(WindowsException.java:83)\r\n\tat sun.nio.fs.WindowsException.rethrowAsIOException(WindowsException.java:97)\r\n\tat sun.nio.fs.WindowsException.rethrowAsIOException(WindowsException.java:102)\r\n\tat sun.nio.fs.WindowsFileSystemProvider.implDelete(WindowsFileSystemProvider.java:269)\r\n\tat sun.nio.fs.AbstractFileSystemProvider.deleteIfExists(AbstractFileSystemProvider.java:108)\r\n\tat java.nio.file.Files.deleteIfExists(Files.java:1165)\r\n\tat org.apache.commons.io.file.DeletingPathVisitor.visitFile(DeletingPathVisitor.java:99)\r\n\tat org.apache.commons.io.file.DeletingPathVisitor.visitFile(DeletingPathVisitor.java:35)\r\n\tat java.nio.file.Files.walkFileTree(Files.java:2670)\r\n\tat java.nio.file.Files.walkFileTree(Files.java:2742)\r\n\tat org.apache.commons.io.file.PathUtils.visitFileTree(PathUtils.java:535)\r\n\tat org.apache.commons.io.file.PathUtils.deleteDirectory(PathUtils.java:265)\r\n\tat org.apache.commons.io.file.PathUtils.delete(PathUtils.java:254)\r\n{noformat}\r\n",
            "commit number version hash": 1764,
            "commit number": 1720,
            "function that changed": [
                {
                    "function name": "forceDelete",
                    "function params": [
                        "file"
                    ],
                    "file name": "FileUtils.java",
                    "file old path": "src/main/java/org/apache/commons/io/FileUtils.java",
                    "file new path": "src/main/java/org/apache/commons/io/FileUtils.java",
                    "full name": "src.main.java.org.apache.commons.io.FileUtils.forceDelete"
                },
                {
                    "function name": "CleaningPathVisitor",
                    "function params": [
                        "pathCounter",
                        "deleteOption",
                        "skip"
                    ],
                    "file name": "CleaningPathVisitor.java",
                    "file old path": "src/main/java/org/apache/commons/io/file/CleaningPathVisitor.java",
                    "file new path": "src/main/java/org/apache/commons/io/file/CleaningPathVisitor.java",
                    "full name": "src.main.java.org.apache.commons.io.file.CleaningPathVisitor.CleaningPathVisitor"
                },
                {
                    "function name": "CleaningPathVisitor",
                    "function params": [
                        "pathCounter",
                        "skip"
                    ],
                    "file name": "CleaningPathVisitor.java",
                    "file old path": "src/main/java/org/apache/commons/io/file/CleaningPathVisitor.java",
                    "file new path": "src/main/java/org/apache/commons/io/file/CleaningPathVisitor.java",
                    "full name": "src.main.java.org.apache.commons.io.file.CleaningPathVisitor.CleaningPathVisitor"
                },
                {
                    "function name": "visitFile",
                    "function params": [
                        "file",
                        "attributes"
                    ],
                    "file name": "CleaningPathVisitor.java",
                    "file old path": "src/main/java/org/apache/commons/io/file/CleaningPathVisitor.java",
                    "file new path": "src/main/java/org/apache/commons/io/file/CleaningPathVisitor.java",
                    "full name": "src.main.java.org.apache.commons.io.file.CleaningPathVisitor.visitFile"
                },
                {
                    "function name": "DeletingPathVisitor",
                    "function params": [
                        "pathCounter",
                        "skip"
                    ],
                    "file name": "DeletingPathVisitor.java",
                    "file old path": "src/main/java/org/apache/commons/io/file/DeletingPathVisitor.java",
                    "file new path": "src/main/java/org/apache/commons/io/file/DeletingPathVisitor.java",
                    "full name": "src.main.java.org.apache.commons.io.file.DeletingPathVisitor.DeletingPathVisitor"
                },
                {
                    "function name": "DeletingPathVisitor",
                    "function params": [
                        "pathCounter",
                        "deleteOption",
                        "skip"
                    ],
                    "file name": "DeletingPathVisitor.java",
                    "file old path": "src/main/java/org/apache/commons/io/file/DeletingPathVisitor.java",
                    "file new path": "src/main/java/org/apache/commons/io/file/DeletingPathVisitor.java",
                    "full name": "src.main.java.org.apache.commons.io.file.DeletingPathVisitor.DeletingPathVisitor"
                },
                {
                    "function name": "visitFile",
                    "function params": [
                        "file",
                        "attrs"
                    ],
                    "file name": "DeletingPathVisitor.java",
                    "file old path": "src/main/java/org/apache/commons/io/file/DeletingPathVisitor.java",
                    "file new path": "src/main/java/org/apache/commons/io/file/DeletingPathVisitor.java",
                    "full name": "src.main.java.org.apache.commons.io.file.DeletingPathVisitor.visitFile"
                },
                {
                    "function name": "setReadOnly",
                    "function params": [
                        "path",
                        "readOnly",
                        "options"
                    ],
                    "file name": "PathUtils.java",
                    "file old path": "src/main/java/org/apache/commons/io/file/PathUtils.java",
                    "file new path": "src/main/java/org/apache/commons/io/file/PathUtils.java",
                    "full name": "src.main.java.org.apache.commons.io.file.PathUtils.setReadOnly"
                },
                {
                    "function name": "visitFileTree",
                    "function params": [
                        "visitor",
                        "start",
                        "options",
                        "maxDepth"
                    ],
                    "file name": "PathUtils.java",
                    "file old path": "src/main/java/org/apache/commons/io/file/PathUtils.java",
                    "file new path": "src/main/java/org/apache/commons/io/file/PathUtils.java",
                    "full name": "src.main.java.org.apache.commons.io.file.PathUtils.visitFileTree"
                },
                {
                    "function name": "visitFileTree",
                    "function params": [
                        "visitor",
                        "first",
                        "more"
                    ],
                    "file name": "PathUtils.java",
                    "file old path": "src/main/java/org/apache/commons/io/file/PathUtils.java",
                    "file new path": "src/main/java/org/apache/commons/io/file/PathUtils.java",
                    "full name": "src.main.java.org.apache.commons.io.file.PathUtils.visitFileTree"
                },
                {
                    "function name": "RelativeSortedPaths",
                    "function params": [
                        "dir1",
                        "dir2",
                        "maxDepth",
                        "linkOptions",
                        "fileVisitOptions"
                    ],
                    "file name": "PathUtils.java",
                    "file old path": "src/main/java/org/apache/commons/io/file/PathUtils.java",
                    "file new path": "src/main/java/org/apache/commons/io/file/PathUtils.java",
                    "full name": "src.main.java.org.apache.commons.io.file.PathUtils.RelativeSortedPaths"
                },
                {
                    "function name": "relativize",
                    "function params": [
                        "collection",
                        "parent",
                        "sort",
                        "comparator"
                    ],
                    "file name": "PathUtils.java",
                    "file old path": "src/main/java/org/apache/commons/io/file/PathUtils.java",
                    "file new path": "src/main/java/org/apache/commons/io/file/PathUtils.java",
                    "full name": "src.main.java.org.apache.commons.io.file.PathUtils.relativize"
                },
                {
                    "function name": "directoryContentEquals",
                    "function params": [
                        "path1",
                        "path2"
                    ],
                    "file name": "PathUtils.java",
                    "file old path": "src/main/java/org/apache/commons/io/file/PathUtils.java",
                    "file new path": "src/main/java/org/apache/commons/io/file/PathUtils.java",
                    "full name": "src.main.java.org.apache.commons.io.file.PathUtils.directoryContentEquals"
                },
                {
                    "function name": "cleanDirectory",
                    "function params": [
                        "directory",
                        "fileVisitOptions"
                    ],
                    "file name": "PathUtils.java",
                    "file old path": "src/main/java/org/apache/commons/io/file/PathUtils.java",
                    "file new path": "src/main/java/org/apache/commons/io/file/PathUtils.java",
                    "full name": "src.main.java.org.apache.commons.io.file.PathUtils.cleanDirectory"
                },
                {
                    "function name": "deleteDirectory",
                    "function params": [
                        "directory",
                        "fileVisitOptions"
                    ],
                    "file name": "PathUtils.java",
                    "file old path": "src/main/java/org/apache/commons/io/file/PathUtils.java",
                    "file new path": "src/main/java/org/apache/commons/io/file/PathUtils.java",
                    "full name": "src.main.java.org.apache.commons.io.file.PathUtils.deleteDirectory"
                },
                {
                    "function name": "directoryAndFileContentEquals",
                    "function params": [
                        "path1",
                        "path2"
                    ],
                    "file name": "PathUtils.java",
                    "file old path": "src/main/java/org/apache/commons/io/file/PathUtils.java",
                    "file new path": "src/main/java/org/apache/commons/io/file/PathUtils.java",
                    "full name": "src.main.java.org.apache.commons.io.file.PathUtils.directoryAndFileContentEquals"
                },
                {
                    "function name": "delete",
                    "function params": [
                        "path"
                    ],
                    "file name": "PathUtils.java",
                    "file old path": "src/main/java/org/apache/commons/io/file/PathUtils.java",
                    "file new path": "src/main/java/org/apache/commons/io/file/PathUtils.java",
                    "full name": "src.main.java.org.apache.commons.io.file.PathUtils.delete"
                },
                {
                    "function name": "visitFileTree",
                    "function params": [
                        "visitor",
                        "start",
                        "options",
                        "maxDepth"
                    ],
                    "file name": "PathUtils.java",
                    "file old path": "src/main/java/org/apache/commons/io/file/PathUtils.java",
                    "file new path": "src/main/java/org/apache/commons/io/file/PathUtils.java",
                    "full name": "src.main.java.org.apache.commons.io.file.PathUtils.visitFileTree"
                },
                {
                    "function name": "overrideReadOnly",
                    "function params": [
                        "options"
                    ],
                    "file name": "PathUtils.java",
                    "file old path": "src/main/java/org/apache/commons/io/file/PathUtils.java",
                    "file new path": "src/main/java/org/apache/commons/io/file/PathUtils.java",
                    "full name": "src.main.java.org.apache.commons.io.file.PathUtils.overrideReadOnly"
                },
                {
                    "function name": "copyFileToDirectory",
                    "function params": [
                        "sourceFile",
                        "targetDirectory",
                        "copyOptions"
                    ],
                    "file name": "PathUtils.java",
                    "file old path": "src/main/java/org/apache/commons/io/file/PathUtils.java",
                    "file new path": "src/main/java/org/apache/commons/io/file/PathUtils.java",
                    "full name": "src.main.java.org.apache.commons.io.file.PathUtils.copyFileToDirectory"
                },
                {
                    "function name": "fileContentEquals",
                    "function params": [
                        "path1",
                        "path2",
                        "linkOptions",
                        "openOptions"
                    ],
                    "file name": "PathUtils.java",
                    "file old path": "src/main/java/org/apache/commons/io/file/PathUtils.java",
                    "file new path": "src/main/java/org/apache/commons/io/file/PathUtils.java",
                    "full name": "src.main.java.org.apache.commons.io.file.PathUtils.fileContentEquals"
                },
                {
                    "function name": "directoryAndFileContentEquals",
                    "function params": [
                        "path1",
                        "path2",
                        "linkOptions",
                        "openOptions",
                        "fileVisitOption"
                    ],
                    "file name": "PathUtils.java",
                    "file old path": "src/main/java/org/apache/commons/io/file/PathUtils.java",
                    "file new path": "src/main/java/org/apache/commons/io/file/PathUtils.java",
                    "full name": "src.main.java.org.apache.commons.io.file.PathUtils.directoryAndFileContentEquals"
                },
                {
                    "function name": "copyFile",
                    "function params": [
                        "sourceFile",
                        "targetFile",
                        "copyOptions"
                    ],
                    "file name": "PathUtils.java",
                    "file old path": "src/main/java/org/apache/commons/io/file/PathUtils.java",
                    "file new path": "src/main/java/org/apache/commons/io/file/PathUtils.java",
                    "full name": "src.main.java.org.apache.commons.io.file.PathUtils.copyFile"
                },
                {
                    "function name": "deleteDirectory",
                    "function params": [
                        "directory"
                    ],
                    "file name": "PathUtils.java",
                    "file old path": "src/main/java/org/apache/commons/io/file/PathUtils.java",
                    "file new path": "src/main/java/org/apache/commons/io/file/PathUtils.java",
                    "full name": "src.main.java.org.apache.commons.io.file.PathUtils.deleteDirectory"
                },
                {
                    "function name": "deleteFile",
                    "function params": [
                        "file",
                        "options"
                    ],
                    "file name": "PathUtils.java",
                    "file old path": "src/main/java/org/apache/commons/io/file/PathUtils.java",
                    "file new path": "src/main/java/org/apache/commons/io/file/PathUtils.java",
                    "full name": "src.main.java.org.apache.commons.io.file.PathUtils.deleteFile"
                },
                {
                    "function name": "relativize",
                    "function params": [
                        "collection",
                        "parent",
                        "sort",
                        "comparator"
                    ],
                    "file name": "PathUtils.java",
                    "file old path": "src/main/java/org/apache/commons/io/file/PathUtils.java",
                    "file new path": "src/main/java/org/apache/commons/io/file/PathUtils.java",
                    "full name": "src.main.java.org.apache.commons.io.file.PathUtils.relativize"
                },
                {
                    "function name": "cleanDirectory",
                    "function params": [
                        "directory",
                        "options"
                    ],
                    "file name": "PathUtils.java",
                    "file old path": "src/main/java/org/apache/commons/io/file/PathUtils.java",
                    "file new path": "src/main/java/org/apache/commons/io/file/PathUtils.java",
                    "full name": "src.main.java.org.apache.commons.io.file.PathUtils.cleanDirectory"
                },
                {
                    "function name": "delete",
                    "function params": [
                        "path",
                        "options"
                    ],
                    "file name": "PathUtils.java",
                    "file old path": "src/main/java/org/apache/commons/io/file/PathUtils.java",
                    "file new path": "src/main/java/org/apache/commons/io/file/PathUtils.java",
                    "full name": "src.main.java.org.apache.commons.io.file.PathUtils.delete"
                },
                {
                    "function name": "directoryContentEquals",
                    "function params": [
                        "path1",
                        "path2",
                        "maxDepth",
                        "linkOptions",
                        "fileVisitOptions"
                    ],
                    "file name": "PathUtils.java",
                    "file old path": "src/main/java/org/apache/commons/io/file/PathUtils.java",
                    "file new path": "src/main/java/org/apache/commons/io/file/PathUtils.java",
                    "full name": "src.main.java.org.apache.commons.io.file.PathUtils.directoryContentEquals"
                },
                {
                    "function name": "directoryContentEquals",
                    "function params": [
                        "path1",
                        "path2",
                        "maxDepth",
                        "linkOptions",
                        "fileVisitOptions"
                    ],
                    "file name": "PathUtils.java",
                    "file old path": "src/main/java/org/apache/commons/io/file/PathUtils.java",
                    "file new path": "src/main/java/org/apache/commons/io/file/PathUtils.java",
                    "full name": "src.main.java.org.apache.commons.io.file.PathUtils.directoryContentEquals"
                },
                {
                    "function name": "accumulate",
                    "function params": [
                        "directory",
                        "maxDepth",
                        "fileVisitOptions"
                    ],
                    "file name": "PathUtils.java",
                    "file old path": "src/main/java/org/apache/commons/io/file/PathUtils.java",
                    "file new path": "src/main/java/org/apache/commons/io/file/PathUtils.java",
                    "full name": "src.main.java.org.apache.commons.io.file.PathUtils.accumulate"
                },
                {
                    "function name": "copyDirectory",
                    "function params": [
                        "sourceDirectory",
                        "targetDirectory",
                        "copyOptions"
                    ],
                    "file name": "PathUtils.java",
                    "file old path": "src/main/java/org/apache/commons/io/file/PathUtils.java",
                    "file new path": "src/main/java/org/apache/commons/io/file/PathUtils.java",
                    "full name": "src.main.java.org.apache.commons.io.file.PathUtils.copyDirectory"
                },
                {
                    "function name": "visitFileTree",
                    "function params": [
                        "visitor",
                        "uri"
                    ],
                    "file name": "PathUtils.java",
                    "file old path": "src/main/java/org/apache/commons/io/file/PathUtils.java",
                    "file new path": "src/main/java/org/apache/commons/io/file/PathUtils.java",
                    "full name": "src.main.java.org.apache.commons.io.file.PathUtils.visitFileTree"
                },
                {
                    "function name": "visitFileTree",
                    "function params": [
                        "visitor",
                        "directory"
                    ],
                    "file name": "PathUtils.java",
                    "file old path": "src/main/java/org/apache/commons/io/file/PathUtils.java",
                    "file new path": "src/main/java/org/apache/commons/io/file/PathUtils.java",
                    "full name": "src.main.java.org.apache.commons.io.file.PathUtils.visitFileTree"
                },
                {
                    "function name": "deleteDirectory",
                    "function params": [
                        "directory",
                        "options"
                    ],
                    "file name": "PathUtils.java",
                    "file old path": "src/main/java/org/apache/commons/io/file/PathUtils.java",
                    "file new path": "src/main/java/org/apache/commons/io/file/PathUtils.java",
                    "full name": "src.main.java.org.apache.commons.io.file.PathUtils.deleteDirectory"
                },
                {
                    "function name": "copyFileToDirectory",
                    "function params": [
                        "sourceFile",
                        "targetDirectory",
                        "copyOptions"
                    ],
                    "file name": "PathUtils.java",
                    "file old path": "src/main/java/org/apache/commons/io/file/PathUtils.java",
                    "file new path": "src/main/java/org/apache/commons/io/file/PathUtils.java",
                    "full name": "src.main.java.org.apache.commons.io.file.PathUtils.copyFileToDirectory"
                },
                {
                    "function name": "toFileVisitOptionSet",
                    "function params": [
                        "fileVisitOptions"
                    ],
                    "file name": "PathUtils.java",
                    "file old path": "src/main/java/org/apache/commons/io/file/PathUtils.java",
                    "file new path": "src/main/java/org/apache/commons/io/file/PathUtils.java",
                    "full name": "src.main.java.org.apache.commons.io.file.PathUtils.toFileVisitOptionSet"
                },
                {
                    "function name": "deleteFile",
                    "function params": [
                        "file"
                    ],
                    "file name": "PathUtils.java",
                    "file old path": "src/main/java/org/apache/commons/io/file/PathUtils.java",
                    "file new path": "src/main/java/org/apache/commons/io/file/PathUtils.java",
                    "full name": "src.main.java.org.apache.commons.io.file.PathUtils.deleteFile"
                },
                {
                    "function name": "cleanDirectory",
                    "function params": [
                        "directory"
                    ],
                    "file name": "PathUtils.java",
                    "file old path": "src/main/java/org/apache/commons/io/file/PathUtils.java",
                    "file new path": "src/main/java/org/apache/commons/io/file/PathUtils.java",
                    "full name": "src.main.java.org.apache.commons.io.file.PathUtils.cleanDirectory"
                },
                {
                    "function name": "overrideReadOnly",
                    "function params": [
                        "options"
                    ],
                    "file name": "StandardDeleteOption.java",
                    "file old path": null,
                    "file new path": "src/main/java/org/apache/commons/io/file/StandardDeleteOption.java",
                    "full name": "src.main.java.org.apache.commons.io.file.StandardDeleteOption.overrideReadOnly"
                },
                {
                    "function name": "testThrowsOnCannotDeleteFile",
                    "function params": [],
                    "file name": "FileUtilsCleanDirectoryTestCase.java",
                    "file old path": "src/test/java/org/apache/commons/io/FileUtilsCleanDirectoryTestCase.java",
                    "file new path": "src/test/java/org/apache/commons/io/FileUtilsCleanDirectoryTestCase.java",
                    "full name": "src.test.java.org.apache.commons.io.FileUtilsCleanDirectoryTestCase.testThrowsOnCannotDeleteFile"
                },
                {
                    "function name": "testThrowsOnNullList",
                    "function params": [],
                    "file name": "FileUtilsCleanDirectoryTestCase.java",
                    "file old path": "src/test/java/org/apache/commons/io/FileUtilsCleanDirectoryTestCase.java",
                    "file new path": "src/test/java/org/apache/commons/io/FileUtilsCleanDirectoryTestCase.java",
                    "full name": "src.test.java.org.apache.commons.io.FileUtilsCleanDirectoryTestCase.testThrowsOnNullList"
                },
                {
                    "function name": "chmod",
                    "function params": [
                        "file",
                        "mode",
                        "recurse"
                    ],
                    "file name": "FileUtilsCleanDirectoryTestCase.java",
                    "file old path": "src/test/java/org/apache/commons/io/FileUtilsCleanDirectoryTestCase.java",
                    "file new path": "src/test/java/org/apache/commons/io/FileUtilsCleanDirectoryTestCase.java",
                    "full name": "src.test.java.org.apache.commons.io.FileUtilsCleanDirectoryTestCase.chmod"
                },
                {
                    "function name": "testDeleteDirectory1FileSize0OverrideReadOnly",
                    "function params": [],
                    "file name": "PathUtilsDeleteDirectoryTest.java",
                    "file old path": "src/test/java/org/apache/commons/io/file/PathUtilsDeleteDirectoryTest.java",
                    "file new path": "src/test/java/org/apache/commons/io/file/PathUtilsDeleteDirectoryTest.java",
                    "full name": "src.test.java.org.apache.commons.io.file.PathUtilsDeleteDirectoryTest.testDeleteDirectory1FileSize0OverrideReadOnly"
                },
                {
                    "function name": "testDeleteDirectory1FileSize0NoOptions",
                    "function params": [],
                    "file name": "PathUtilsDeleteDirectoryTest.java",
                    "file old path": "src/test/java/org/apache/commons/io/file/PathUtilsDeleteDirectoryTest.java",
                    "file new path": "src/test/java/org/apache/commons/io/file/PathUtilsDeleteDirectoryTest.java",
                    "full name": "src.test.java.org.apache.commons.io.file.PathUtilsDeleteDirectoryTest.testDeleteDirectory1FileSize0NoOptions"
                },
                {
                    "function name": "testDeleteDirectory1FileSize0",
                    "function params": [
                        "options"
                    ],
                    "file name": "PathUtilsDeleteDirectoryTest.java",
                    "file old path": "src/test/java/org/apache/commons/io/file/PathUtilsDeleteDirectoryTest.java",
                    "file new path": "src/test/java/org/apache/commons/io/file/PathUtilsDeleteDirectoryTest.java",
                    "full name": "src.test.java.org.apache.commons.io.file.PathUtilsDeleteDirectoryTest.testDeleteDirectory1FileSize0"
                },
                {
                    "function name": "testDeleteReadOnlyFileDirectory1FileSize1",
                    "function params": [],
                    "file name": "PathUtilsDeleteFileTest.java",
                    "file old path": "src/test/java/org/apache/commons/io/file/PathUtilsDeleteFileTest.java",
                    "file new path": "src/test/java/org/apache/commons/io/file/PathUtilsDeleteFileTest.java",
                    "full name": "src.test.java.org.apache.commons.io.file.PathUtilsDeleteFileTest.testDeleteReadOnlyFileDirectory1FileSize1"
                },
                {
                    "function name": "testDeleteFileEmptyDirectory",
                    "function params": [],
                    "file name": "PathUtilsDeleteFileTest.java",
                    "file old path": "src/test/java/org/apache/commons/io/file/PathUtilsDeleteFileTest.java",
                    "file new path": "src/test/java/org/apache/commons/io/file/PathUtilsDeleteFileTest.java",
                    "full name": "src.test.java.org.apache.commons.io.file.PathUtilsDeleteFileTest.testDeleteFileEmptyDirectory"
                },
                {
                    "function name": "testSetReadOnlyFileDirectory1FileSize1",
                    "function params": [],
                    "file name": "PathUtilsDeleteFileTest.java",
                    "file old path": "src/test/java/org/apache/commons/io/file/PathUtilsDeleteFileTest.java",
                    "file new path": "src/test/java/org/apache/commons/io/file/PathUtilsDeleteFileTest.java",
                    "full name": "src.test.java.org.apache.commons.io.file.PathUtilsDeleteFileTest.testSetReadOnlyFileDirectory1FileSize1"
                },
                {
                    "function name": "testDeleteEmptyDirectoryForceOn",
                    "function params": [],
                    "file name": "PathUtilsDeleteTest.java",
                    "file old path": "src/test/java/org/apache/commons/io/file/PathUtilsDeleteTest.java",
                    "file new path": "src/test/java/org/apache/commons/io/file/PathUtilsDeleteTest.java",
                    "full name": "src.test.java.org.apache.commons.io.file.PathUtilsDeleteTest.testDeleteEmptyDirectoryForceOn"
                },
                {
                    "function name": "testDeleteDirectory1FileSize1ForceOn",
                    "function params": [],
                    "file name": "PathUtilsDeleteTest.java",
                    "file old path": "src/test/java/org/apache/commons/io/file/PathUtilsDeleteTest.java",
                    "file new path": "src/test/java/org/apache/commons/io/file/PathUtilsDeleteTest.java",
                    "full name": "src.test.java.org.apache.commons.io.file.PathUtilsDeleteTest.testDeleteDirectory1FileSize1ForceOn"
                },
                {
                    "function name": "testDeleteEmptyDirectoryNoOption",
                    "function params": [],
                    "file name": "PathUtilsDeleteTest.java",
                    "file old path": "src/test/java/org/apache/commons/io/file/PathUtilsDeleteTest.java",
                    "file new path": "src/test/java/org/apache/commons/io/file/PathUtilsDeleteTest.java",
                    "full name": "src.test.java.org.apache.commons.io.file.PathUtilsDeleteTest.testDeleteEmptyDirectoryNoOption"
                },
                {
                    "function name": "testDeleteDirectory1FileSize0",
                    "function params": [
                        "options"
                    ],
                    "file name": "PathUtilsDeleteTest.java",
                    "file old path": "src/test/java/org/apache/commons/io/file/PathUtilsDeleteTest.java",
                    "file new path": "src/test/java/org/apache/commons/io/file/PathUtilsDeleteTest.java",
                    "full name": "src.test.java.org.apache.commons.io.file.PathUtilsDeleteTest.testDeleteDirectory1FileSize0"
                },
                {
                    "function name": "testDeleteEmptyDirectoryOverrideReadOnly",
                    "function params": [],
                    "file name": "PathUtilsDeleteTest.java",
                    "file old path": "src/test/java/org/apache/commons/io/file/PathUtilsDeleteTest.java",
                    "file new path": "src/test/java/org/apache/commons/io/file/PathUtilsDeleteTest.java",
                    "full name": "src.test.java.org.apache.commons.io.file.PathUtilsDeleteTest.testDeleteEmptyDirectoryOverrideReadOnly"
                },
                {
                    "function name": "testDeleteDirectory1FileSize1",
                    "function params": [
                        "options"
                    ],
                    "file name": "PathUtilsDeleteTest.java",
                    "file old path": "src/test/java/org/apache/commons/io/file/PathUtilsDeleteTest.java",
                    "file new path": "src/test/java/org/apache/commons/io/file/PathUtilsDeleteTest.java",
                    "full name": "src.test.java.org.apache.commons.io.file.PathUtilsDeleteTest.testDeleteDirectory1FileSize1"
                },
                {
                    "function name": "testDeleteDirectory1FileSize1OverrideReadOnly",
                    "function params": [],
                    "file name": "PathUtilsDeleteTest.java",
                    "file old path": "src/test/java/org/apache/commons/io/file/PathUtilsDeleteTest.java",
                    "file new path": "src/test/java/org/apache/commons/io/file/PathUtilsDeleteTest.java",
                    "full name": "src.test.java.org.apache.commons.io.file.PathUtilsDeleteTest.testDeleteDirectory1FileSize1OverrideReadOnly"
                },
                {
                    "function name": "testDeleteDirectory1FileSize1ForceOff",
                    "function params": [],
                    "file name": "PathUtilsDeleteTest.java",
                    "file old path": "src/test/java/org/apache/commons/io/file/PathUtilsDeleteTest.java",
                    "file new path": "src/test/java/org/apache/commons/io/file/PathUtilsDeleteTest.java",
                    "full name": "src.test.java.org.apache.commons.io.file.PathUtilsDeleteTest.testDeleteDirectory1FileSize1ForceOff"
                },
                {
                    "function name": "testDeleteDirectory1FileSize0",
                    "function params": [],
                    "file name": "PathUtilsDeleteTest.java",
                    "file old path": "src/test/java/org/apache/commons/io/file/PathUtilsDeleteTest.java",
                    "file new path": "src/test/java/org/apache/commons/io/file/PathUtilsDeleteTest.java",
                    "full name": "src.test.java.org.apache.commons.io.file.PathUtilsDeleteTest.testDeleteDirectory1FileSize0"
                },
                {
                    "function name": "testDeleteDirectory1FileSize1",
                    "function params": [],
                    "file name": "PathUtilsDeleteTest.java",
                    "file old path": "src/test/java/org/apache/commons/io/file/PathUtilsDeleteTest.java",
                    "file new path": "src/test/java/org/apache/commons/io/file/PathUtilsDeleteTest.java",
                    "full name": "src.test.java.org.apache.commons.io.file.PathUtilsDeleteTest.testDeleteDirectory1FileSize1"
                },
                {
                    "function name": "testDeleteDirectory1FileSize0ForceOn",
                    "function params": [],
                    "file name": "PathUtilsDeleteTest.java",
                    "file old path": "src/test/java/org/apache/commons/io/file/PathUtilsDeleteTest.java",
                    "file new path": "src/test/java/org/apache/commons/io/file/PathUtilsDeleteTest.java",
                    "full name": "src.test.java.org.apache.commons.io.file.PathUtilsDeleteTest.testDeleteDirectory1FileSize0ForceOn"
                },
                {
                    "function name": "testDeleteDirectory1FileSize0NoOption",
                    "function params": [],
                    "file name": "PathUtilsDeleteTest.java",
                    "file old path": "src/test/java/org/apache/commons/io/file/PathUtilsDeleteTest.java",
                    "file new path": "src/test/java/org/apache/commons/io/file/PathUtilsDeleteTest.java",
                    "full name": "src.test.java.org.apache.commons.io.file.PathUtilsDeleteTest.testDeleteDirectory1FileSize0NoOption"
                },
                {
                    "function name": "testDeleteDirectory1FileSize0OverrideReadonly",
                    "function params": [],
                    "file name": "PathUtilsDeleteTest.java",
                    "file old path": "src/test/java/org/apache/commons/io/file/PathUtilsDeleteTest.java",
                    "file new path": "src/test/java/org/apache/commons/io/file/PathUtilsDeleteTest.java",
                    "full name": "src.test.java.org.apache.commons.io.file.PathUtilsDeleteTest.testDeleteDirectory1FileSize0OverrideReadonly"
                },
                {
                    "function name": "testDeleteDirectory1FileSize0ForceOff",
                    "function params": [],
                    "file name": "PathUtilsDeleteTest.java",
                    "file old path": "src/test/java/org/apache/commons/io/file/PathUtilsDeleteTest.java",
                    "file new path": "src/test/java/org/apache/commons/io/file/PathUtilsDeleteTest.java",
                    "full name": "src.test.java.org.apache.commons.io.file.PathUtilsDeleteTest.testDeleteDirectory1FileSize0ForceOff"
                },
                {
                    "function name": "testDeleteEmptyDirectory",
                    "function params": [
                        "options"
                    ],
                    "file name": "PathUtilsDeleteTest.java",
                    "file old path": "src/test/java/org/apache/commons/io/file/PathUtilsDeleteTest.java",
                    "file new path": "src/test/java/org/apache/commons/io/file/PathUtilsDeleteTest.java",
                    "full name": "src.test.java.org.apache.commons.io.file.PathUtilsDeleteTest.testDeleteEmptyDirectory"
                },
                {
                    "function name": "testDeleteDirectory1FileSize1NoOption",
                    "function params": [],
                    "file name": "PathUtilsDeleteTest.java",
                    "file old path": "src/test/java/org/apache/commons/io/file/PathUtilsDeleteTest.java",
                    "file new path": "src/test/java/org/apache/commons/io/file/PathUtilsDeleteTest.java",
                    "full name": "src.test.java.org.apache.commons.io.file.PathUtilsDeleteTest.testDeleteDirectory1FileSize1NoOption"
                },
                {
                    "function name": "testDeleteEmptyDirectoryForceOff",
                    "function params": [],
                    "file name": "PathUtilsDeleteTest.java",
                    "file old path": "src/test/java/org/apache/commons/io/file/PathUtilsDeleteTest.java",
                    "file new path": "src/test/java/org/apache/commons/io/file/PathUtilsDeleteTest.java",
                    "full name": "src.test.java.org.apache.commons.io.file.PathUtilsDeleteTest.testDeleteEmptyDirectoryForceOff"
                }
            ],
            "files that changed": [
                "src/main/java/org/apache/commons/io/FileUtils.java",
                "src/main/java/org/apache/commons/io/file/CleaningPathVisitor.java",
                "src/main/java/org/apache/commons/io/file/DeletingPathVisitor.java",
                "src/main/java/org/apache/commons/io/file/PathUtils.java",
                "src/test/java/org/apache/commons/io/FileUtilsCleanDirectoryTestCase.java",
                "src/test/java/org/apache/commons/io/file/PathUtilsDeleteDirectoryTest.java",
                "src/test/java/org/apache/commons/io/file/PathUtilsDeleteFileTest.java",
                "src/test/java/org/apache/commons/io/file/PathUtilsDeleteTest.java"
            ]
        },
        {
            "bug index": "93",
            "bug id": "IO-1",
            "hexsha": "742c51feeaf75542ab9db6782ad3d2ad506fb871",
            "fix_hash": "d7fa1f624ec0ba09cd3cbfba9913d51afc8f59c3",
            "description": "FileUtils.forceMkdir(File) calls File.mkdirs() to create the directory. The\nJavaDoc of this method does not mention that any necessary but nonexistent\nparent directories are created, too.",
            "commit number version hash": 443,
            "commit number": 1712,
            "function that changed": [
                {
                    "function name": "doCopyFile",
                    "function params": [
                        "srcFile",
                        "destFile",
                        "preserveFileDate",
                        "copyOptions"
                    ],
                    "file name": "FileUtils.java",
                    "file old path": "src/main/java/org/apache/commons/io/FileUtils.java",
                    "file new path": "src/main/java/org/apache/commons/io/FileUtils.java",
                    "full name": "src.main.java.org.apache.commons.io.FileUtils.doCopyFile"
                },
                {
                    "function name": "testCopyDirectoryPreserveDates",
                    "function params": [],
                    "file name": "FileUtilsTestCase.java",
                    "file old path": "src/test/java/org/apache/commons/io/FileUtilsTestCase.java",
                    "file new path": "src/test/java/org/apache/commons/io/FileUtilsTestCase.java",
                    "full name": "src.test.java.org.apache.commons.io.FileUtilsTestCase.testCopyDirectoryPreserveDates"
                },
                {
                    "function name": "testCopyFile2WithoutFileDatePreservation",
                    "function params": [],
                    "file name": "FileUtilsTestCase.java",
                    "file old path": "src/test/java/org/apache/commons/io/FileUtilsTestCase.java",
                    "file new path": "src/test/java/org/apache/commons/io/FileUtilsTestCase.java",
                    "full name": "src.test.java.org.apache.commons.io.FileUtilsTestCase.testCopyFile2WithoutFileDatePreservation"
                }
            ],
            "files that changed": [
                "src/main/java/org/apache/commons/io/FileUtils.java",
                "src/test/java/org/apache/commons/io/FileUtilsTestCase.java"
            ]
        },
        {
            "bug index": "94",
            "bug id": "IO-2",
            "hexsha": "742c51feeaf75542ab9db6782ad3d2ad506fb871",
            "fix_hash": "5cbb4c7c46be1e5b31a42745d84343e14b1f57db",
            "description": "Hi,\n\n(sorry to assign it to the wrong component, but I cannot choose for IO)\n\nwhen I try to concat 2 paths with \"\\\" as path separator instead of \"/\", an\nexception is thrown. I'll upload a patch for this as well as a junit test.\n\ne.g.: FilenameUtils.catPath(\"C:\\\\temp\\\\\", \"test\") throws an exception ...\n\nMaarten",
            "commit number version hash": 443,
            "commit number": 1674,
            "function that changed": [
                {
                    "function name": "close",
                    "function params": [
                        "closeables"
                    ],
                    "file name": "IOUtils.java",
                    "file old path": "src/main/java/org/apache/commons/io/IOUtils.java",
                    "file new path": "src/main/java/org/apache/commons/io/IOUtils.java",
                    "full name": "src.main.java.org.apache.commons.io.IOUtils.close"
                },
                {
                    "function name": "close",
                    "function params": [
                        "closeable"
                    ],
                    "file name": "IOUtils.java",
                    "file old path": "src/main/java/org/apache/commons/io/IOUtils.java",
                    "file new path": "src/main/java/org/apache/commons/io/IOUtils.java",
                    "full name": "src.main.java.org.apache.commons.io.IOUtils.close"
                },
                {
                    "function name": "testCloseConsumer",
                    "function params": [],
                    "file name": "IOUtilsTestCase.java",
                    "file old path": "src/test/java/org/apache/commons/io/IOUtilsTestCase.java",
                    "file new path": "src/test/java/org/apache/commons/io/IOUtilsTestCase.java",
                    "full name": "src.test.java.org.apache.commons.io.IOUtilsTestCase.testCloseConsumer"
                },
                {
                    "function name": "testCloseMulti",
                    "function params": [],
                    "file name": "IOUtilsTestCase.java",
                    "file old path": "src/test/java/org/apache/commons/io/IOUtilsTestCase.java",
                    "file new path": "src/test/java/org/apache/commons/io/IOUtilsTestCase.java",
                    "full name": "src.test.java.org.apache.commons.io.IOUtilsTestCase.testCloseMulti"
                }
            ],
            "files that changed": [
                "src/main/java/org/apache/commons/io/IOUtils.java",
                "src/test/java/org/apache/commons/io/IOUtilsTestCase.java"
            ]
        },
        {
            "bug index": "95",
            "bug id": "IO-672",
            "hexsha": "401d17349e7ec52d8fa866c35efd24103f332c29",
            "fix_hash": "291a35ef8be015be252664e2cbde0af741cd82f1",
            "description": "The behaviour is new in 2.7 and worked in 2.6. I tested it out, by switching the library versions.\r\n\r\nI could not exactly indicate, which call is the cause for the behaviour, but it seems it occurs when a file copy / move is done, using FileUtils.\r\n\r\nAfter copying the file, the destination file has a last modified date of 01.01.1970.\r\n\r\n\u00a0",
            "commit number version hash": 1624,
            "commit number": 1670,
            "function that changed": [
                {
                    "function name": "doCopyFile",
                    "function params": [
                        "srcFile",
                        "destFile",
                        "preserveFileDate",
                        "copyOptions"
                    ],
                    "file name": "FileUtils.java",
                    "file old path": "src/main/java/org/apache/commons/io/FileUtils.java",
                    "file new path": "src/main/java/org/apache/commons/io/FileUtils.java",
                    "full name": "src.main.java.org.apache.commons.io.FileUtils.doCopyFile"
                },
                {
                    "function name": "testCopyFile1",
                    "function params": [],
                    "file name": "FileUtilsTestCase.java",
                    "file old path": "src/test/java/org/apache/commons/io/FileUtilsTestCase.java",
                    "file new path": "src/test/java/org/apache/commons/io/FileUtilsTestCase.java",
                    "full name": "src.test.java.org.apache.commons.io.FileUtilsTestCase.testCopyFile1"
                },
                {
                    "function name": "backDateFile",
                    "function params": [
                        "testFile"
                    ],
                    "file name": "FileUtilsTestCase.java",
                    "file old path": "src/test/java/org/apache/commons/io/FileUtilsTestCase.java",
                    "file new path": "src/test/java/org/apache/commons/io/FileUtilsTestCase.java",
                    "full name": "src.test.java.org.apache.commons.io.FileUtilsTestCase.backDateFile"
                },
                {
                    "function name": "testCopyFile2WithoutFileDatePreservation",
                    "function params": [],
                    "file name": "FileUtilsTestCase.java",
                    "file old path": "src/test/java/org/apache/commons/io/FileUtilsTestCase.java",
                    "file new path": "src/test/java/org/apache/commons/io/FileUtilsTestCase.java",
                    "full name": "src.test.java.org.apache.commons.io.FileUtilsTestCase.testCopyFile2WithoutFileDatePreservation"
                },
                {
                    "function name": "testCopyFile2",
                    "function params": [],
                    "file name": "FileUtilsTestCase.java",
                    "file old path": "src/test/java/org/apache/commons/io/FileUtilsTestCase.java",
                    "file new path": "src/test/java/org/apache/commons/io/FileUtilsTestCase.java",
                    "full name": "src.test.java.org.apache.commons.io.FileUtilsTestCase.testCopyFile2"
                }
            ],
            "files that changed": [
                "src/main/java/org/apache/commons/io/FileUtils.java",
                "src/test/java/org/apache/commons/io/FileUtilsTestCase.java"
            ]
        },
        {
            "bug index": "96",
            "bug id": "IO-2",
            "hexsha": "742c51feeaf75542ab9db6782ad3d2ad506fb871",
            "fix_hash": "9741fb8508c422668e6975304e41e5a13e0e704c",
            "description": "Hi,\n\n(sorry to assign it to the wrong component, but I cannot choose for IO)\n\nwhen I try to concat 2 paths with \"\\\" as path separator instead of \"/\", an\nexception is thrown. I'll upload a patch for this as well as a junit test.\n\ne.g.: FilenameUtils.catPath(\"C:\\\\temp\\\\\", \"test\") throws an exception ...\n\nMaarten",
            "commit number version hash": 443,
            "commit number": 1667,
            "function that changed": [
                {
                    "function name": "testCloseConsumer",
                    "function params": [],
                    "file name": "IOUtilsTestCase.java",
                    "file old path": "src/test/java/org/apache/commons/io/IOUtilsTestCase.java",
                    "file new path": "src/test/java/org/apache/commons/io/IOUtilsTestCase.java",
                    "full name": "src.test.java.org.apache.commons.io.IOUtilsTestCase.testCloseConsumer"
                },
                {
                    "function name": "testClose",
                    "function params": [],
                    "file name": "IOUtilsTestCase.java",
                    "file old path": "src/test/java/org/apache/commons/io/IOUtilsTestCase.java",
                    "file new path": "src/test/java/org/apache/commons/io/IOUtilsTestCase.java",
                    "full name": "src.test.java.org.apache.commons.io.IOUtilsTestCase.testClose"
                }
            ],
            "files that changed": [
                "src/test/java/org/apache/commons/io/IOUtilsTestCase.java"
            ]
        },
        {
            "bug index": "97",
            "bug id": "IO-2",
            "hexsha": "742c51feeaf75542ab9db6782ad3d2ad506fb871",
            "fix_hash": "d4e09c7b4ba4a1433feb7e5d4895cd1071e51bb1",
            "description": "Hi,\n\n(sorry to assign it to the wrong component, but I cannot choose for IO)\n\nwhen I try to concat 2 paths with \"\\\" as path separator instead of \"/\", an\nexception is thrown. I'll upload a patch for this as well as a junit test.\n\ne.g.: FilenameUtils.catPath(\"C:\\\\temp\\\\\", \"test\") throws an exception ...\n\nMaarten",
            "commit number version hash": 443,
            "commit number": 1646,
            "function that changed": [],
            "files that changed": [
                "src/main/java/org/apache/commons/io/file/PathUtils.java",
                "src/main/java/org/apache/commons/io/input/CircularInputStream.java",
                "src/main/java/org/apache/commons/io/output/NullAppendable.java"
            ]
        },
        {
            "bug index": "98",
            "bug id": "IO-2",
            "hexsha": "742c51feeaf75542ab9db6782ad3d2ad506fb871",
            "fix_hash": "52f3de5ed66574742d4eb34ead1b330c7b10e6c1",
            "description": "Hi,\n\n(sorry to assign it to the wrong component, but I cannot choose for IO)\n\nwhen I try to concat 2 paths with \"\\\" as path separator instead of \"/\", an\nexception is thrown. I'll upload a patch for this as well as a junit test.\n\ne.g.: FilenameUtils.catPath(\"C:\\\\temp\\\\\", \"test\") throws an exception ...\n\nMaarten",
            "commit number version hash": 443,
            "commit number": 1634,
            "function that changed": [
                {
                    "function name": "cleanDirectory",
                    "function params": [
                        "directory",
                        "fileVisitOptions"
                    ],
                    "file name": "PathUtils.java",
                    "file old path": "src/main/java/org/apache/commons/io/file/PathUtils.java",
                    "file new path": "src/main/java/org/apache/commons/io/file/PathUtils.java",
                    "full name": "src.main.java.org.apache.commons.io.file.PathUtils.cleanDirectory"
                },
                {
                    "function name": "cleanDirectory",
                    "function params": [
                        "directory"
                    ],
                    "file name": "PathUtils.java",
                    "file old path": "src/main/java/org/apache/commons/io/file/PathUtils.java",
                    "file new path": "src/main/java/org/apache/commons/io/file/PathUtils.java",
                    "full name": "src.main.java.org.apache.commons.io.file.PathUtils.cleanDirectory"
                },
                {
                    "function name": "deleteDirectory",
                    "function params": [
                        "directory",
                        "fileVisitOptions"
                    ],
                    "file name": "PathUtils.java",
                    "file old path": "src/main/java/org/apache/commons/io/file/PathUtils.java",
                    "file new path": "src/main/java/org/apache/commons/io/file/PathUtils.java",
                    "full name": "src.main.java.org.apache.commons.io.file.PathUtils.deleteDirectory"
                },
                {
                    "function name": "deleteDirectory",
                    "function params": [
                        "directory"
                    ],
                    "file name": "PathUtils.java",
                    "file old path": "src/main/java/org/apache/commons/io/file/PathUtils.java",
                    "file new path": "src/main/java/org/apache/commons/io/file/PathUtils.java",
                    "full name": "src.main.java.org.apache.commons.io.file.PathUtils.deleteDirectory"
                }
            ],
            "files that changed": [
                "src/main/java/org/apache/commons/io/file/PathUtils.java"
            ]
        },
        {
            "bug index": "99",
            "bug id": "IO-1",
            "hexsha": "742c51feeaf75542ab9db6782ad3d2ad506fb871",
            "fix_hash": "0de91c048fb575b9e7906e966a4428574fd03695",
            "description": "FileUtils.forceMkdir(File) calls File.mkdirs() to create the directory. The\nJavaDoc of this method does not mention that any necessary but nonexistent\nparent directories are created, too.",
            "commit number version hash": 443,
            "commit number": 1632,
            "function that changed": [
                {
                    "function name": "read",
                    "function params": [],
                    "file name": "CircularInputStream.java",
                    "file old path": "src/main/java/org/apache/commons/io/input/CircularInputStream.java",
                    "file new path": "src/main/java/org/apache/commons/io/input/CircularInputStream.java",
                    "full name": "src.main.java.org.apache.commons.io.input.CircularInputStream.read"
                }
            ],
            "files that changed": [
                "src/main/java/org/apache/commons/io/input/CircularInputStream.java"
            ]
        },
        {
            "bug index": "100",
            "bug id": "IO-1",
            "hexsha": "742c51feeaf75542ab9db6782ad3d2ad506fb871",
            "fix_hash": "97ae01c95837f50a2e9be34c370b271c4d8fc88b",
            "description": "FileUtils.forceMkdir(File) calls File.mkdirs() to create the directory. The\nJavaDoc of this method does not mention that any necessary but nonexistent\nparent directories are created, too.",
            "commit number version hash": 443,
            "commit number": 1631,
            "function that changed": [
                {
                    "function name": "CircularInputStream",
                    "function params": [
                        "repeatContent",
                        "targetByteCount"
                    ],
                    "file name": "CircularInputStream.java",
                    "file old path": null,
                    "file new path": "src/main/java/org/apache/commons/io/input/CircularInputStream.java",
                    "full name": "src.main.java.org.apache.commons.io.input.CircularInputStream.CircularInputStream"
                },
                {
                    "function name": "read",
                    "function params": [],
                    "file name": "CircularInputStream.java",
                    "file old path": null,
                    "file new path": "src/main/java/org/apache/commons/io/input/CircularInputStream.java",
                    "full name": "src.main.java.org.apache.commons.io.input.CircularInputStream.read"
                },
                {
                    "function name": "validate",
                    "function params": [
                        "repeatContent"
                    ],
                    "file name": "CircularInputStream.java",
                    "file old path": null,
                    "file new path": "src/main/java/org/apache/commons/io/input/CircularInputStream.java",
                    "full name": "src.main.java.org.apache.commons.io.input.CircularInputStream.validate"
                },
                {
                    "function name": "InfiniteCircularInputStream",
                    "function params": [
                        "repeatContent"
                    ],
                    "file name": "InfiniteCircularInputStream.java",
                    "file old path": "src/main/java/org/apache/commons/io/input/InfiniteCircularInputStream.java",
                    "file new path": "src/main/java/org/apache/commons/io/input/InfiniteCircularInputStream.java",
                    "full name": "src.main.java.org.apache.commons.io.input.InfiniteCircularInputStream.InfiniteCircularInputStream"
                },
                {
                    "function name": "InfiniteCircularInputStream",
                    "function params": [
                        "repeatedContent"
                    ],
                    "file name": "InfiniteCircularInputStream.java",
                    "file old path": "src/main/java/org/apache/commons/io/input/InfiniteCircularInputStream.java",
                    "file new path": "src/main/java/org/apache/commons/io/input/InfiniteCircularInputStream.java",
                    "full name": "src.main.java.org.apache.commons.io.input.InfiniteCircularInputStream.InfiniteCircularInputStream"
                },
                {
                    "function name": "testCount0",
                    "function params": [],
                    "file name": "CircularInputStreamTest.java",
                    "file old path": null,
                    "file new path": "src/test/java/org/apache/commons/io/input/CircularInputStreamTest.java",
                    "full name": "src.test.java.org.apache.commons.io.input.CircularInputStreamTest.testCount0"
                },
                {
                    "function name": "testCount0InputSize0",
                    "function params": [],
                    "file name": "CircularInputStreamTest.java",
                    "file old path": null,
                    "file new path": "src/test/java/org/apache/commons/io/input/CircularInputStreamTest.java",
                    "full name": "src.test.java.org.apache.commons.io.input.CircularInputStreamTest.testCount0InputSize0"
                },
                {
                    "function name": "testNullInputSize0",
                    "function params": [],
                    "file name": "CircularInputStreamTest.java",
                    "file old path": null,
                    "file new path": "src/test/java/org/apache/commons/io/input/CircularInputStreamTest.java",
                    "full name": "src.test.java.org.apache.commons.io.input.CircularInputStreamTest.testNullInputSize0"
                },
                {
                    "function name": "testCycleBytes",
                    "function params": [],
                    "file name": "CircularInputStreamTest.java",
                    "file old path": null,
                    "file new path": "src/test/java/org/apache/commons/io/input/CircularInputStreamTest.java",
                    "full name": "src.test.java.org.apache.commons.io.input.CircularInputStreamTest.testCycleBytes"
                },
                {
                    "function name": "testCount1InputSize1",
                    "function params": [],
                    "file name": "CircularInputStreamTest.java",
                    "file old path": null,
                    "file new path": "src/test/java/org/apache/commons/io/input/CircularInputStreamTest.java",
                    "full name": "src.test.java.org.apache.commons.io.input.CircularInputStreamTest.testCount1InputSize1"
                },
                {
                    "function name": "testWholeRangeOfBytes",
                    "function params": [],
                    "file name": "CircularInputStreamTest.java",
                    "file old path": null,
                    "file new path": "src/test/java/org/apache/commons/io/input/CircularInputStreamTest.java",
                    "full name": "src.test.java.org.apache.commons.io.input.CircularInputStreamTest.testWholeRangeOfBytes"
                },
                {
                    "function name": "testContainsEofInputSize0",
                    "function params": [],
                    "file name": "CircularInputStreamTest.java",
                    "file old path": null,
                    "file new path": "src/test/java/org/apache/commons/io/input/CircularInputStreamTest.java",
                    "full name": "src.test.java.org.apache.commons.io.input.CircularInputStreamTest.testContainsEofInputSize0"
                },
                {
                    "function name": "testCount0InputSize1",
                    "function params": [],
                    "file name": "CircularInputStreamTest.java",
                    "file old path": null,
                    "file new path": "src/test/java/org/apache/commons/io/input/CircularInputStreamTest.java",
                    "full name": "src.test.java.org.apache.commons.io.input.CircularInputStreamTest.testCount0InputSize1"
                },
                {
                    "function name": "assertStreamOutput",
                    "function params": [
                        "toCycle",
                        "expected"
                    ],
                    "file name": "CircularInputStreamTest.java",
                    "file old path": null,
                    "file new path": "src/test/java/org/apache/commons/io/input/CircularInputStreamTest.java",
                    "full name": "src.test.java.org.apache.commons.io.input.CircularInputStreamTest.assertStreamOutput"
                },
                {
                    "function name": "createInputStream",
                    "function params": [
                        "repeatContent",
                        "targetByteCount"
                    ],
                    "file name": "CircularInputStreamTest.java",
                    "file old path": null,
                    "file new path": "src/test/java/org/apache/commons/io/input/CircularInputStreamTest.java",
                    "full name": "src.test.java.org.apache.commons.io.input.CircularInputStreamTest.createInputStream"
                },
                {
                    "function name": "testContainsEofInputSize0",
                    "function params": [],
                    "file name": "InfiniteCircularInputStreamTest.java",
                    "file old path": "src/test/java/org/apache/commons/io/input/InfiniteCircularInputStreamTest.java",
                    "file new path": "src/test/java/org/apache/commons/io/input/InfiniteCircularInputStreamTest.java",
                    "full name": "src.test.java.org.apache.commons.io.input.InfiniteCircularInputStreamTest.testContainsEofInputSize0"
                },
                {
                    "function name": "createInputStream",
                    "function params": [
                        "repeatContent"
                    ],
                    "file name": "InfiniteCircularInputStreamTest.java",
                    "file old path": "src/test/java/org/apache/commons/io/input/InfiniteCircularInputStreamTest.java",
                    "file new path": "src/test/java/org/apache/commons/io/input/InfiniteCircularInputStreamTest.java",
                    "full name": "src.test.java.org.apache.commons.io.input.InfiniteCircularInputStreamTest.createInputStream"
                },
                {
                    "function name": "testCycleBytes",
                    "function params": [],
                    "file name": "InfiniteCircularInputStreamTest.java",
                    "file old path": "src/test/java/org/apache/commons/io/input/InfiniteCircularInputStreamTest.java",
                    "file new path": "src/test/java/org/apache/commons/io/input/InfiniteCircularInputStreamTest.java",
                    "full name": "src.test.java.org.apache.commons.io.input.InfiniteCircularInputStreamTest.testCycleBytes"
                },
                {
                    "function name": "testCount0InputSize0",
                    "function params": [],
                    "file name": "InfiniteCircularInputStreamTest.java",
                    "file old path": "src/test/java/org/apache/commons/io/input/InfiniteCircularInputStreamTest.java",
                    "file new path": "src/test/java/org/apache/commons/io/input/InfiniteCircularInputStreamTest.java",
                    "full name": "src.test.java.org.apache.commons.io.input.InfiniteCircularInputStreamTest.testCount0InputSize0"
                },
                {
                    "function name": "testNullInputSize0",
                    "function params": [],
                    "file name": "InfiniteCircularInputStreamTest.java",
                    "file old path": "src/test/java/org/apache/commons/io/input/InfiniteCircularInputStreamTest.java",
                    "file new path": "src/test/java/org/apache/commons/io/input/InfiniteCircularInputStreamTest.java",
                    "full name": "src.test.java.org.apache.commons.io.input.InfiniteCircularInputStreamTest.testNullInputSize0"
                },
                {
                    "function name": "assertStreamOutput",
                    "function params": [
                        "toCycle",
                        "expected"
                    ],
                    "file name": "InfiniteCircularInputStreamTest.java",
                    "file old path": "src/test/java/org/apache/commons/io/input/InfiniteCircularInputStreamTest.java",
                    "file new path": "src/test/java/org/apache/commons/io/input/InfiniteCircularInputStreamTest.java",
                    "full name": "src.test.java.org.apache.commons.io.input.InfiniteCircularInputStreamTest.assertStreamOutput"
                },
                {
                    "function name": "testWholeRangeOfBytes",
                    "function params": [],
                    "file name": "InfiniteCircularInputStreamTest.java",
                    "file old path": "src/test/java/org/apache/commons/io/input/InfiniteCircularInputStreamTest.java",
                    "file new path": "src/test/java/org/apache/commons/io/input/InfiniteCircularInputStreamTest.java",
                    "full name": "src.test.java.org.apache.commons.io.input.InfiniteCircularInputStreamTest.testWholeRangeOfBytes"
                },
                {
                    "function name": "testCount1InputSize1",
                    "function params": [],
                    "file name": "InfiniteCircularInputStreamTest.java",
                    "file old path": "src/test/java/org/apache/commons/io/input/InfiniteCircularInputStreamTest.java",
                    "file new path": "src/test/java/org/apache/commons/io/input/InfiniteCircularInputStreamTest.java",
                    "full name": "src.test.java.org.apache.commons.io.input.InfiniteCircularInputStreamTest.testCount1InputSize1"
                },
                {
                    "function name": "testCount0InputSize1",
                    "function params": [],
                    "file name": "InfiniteCircularInputStreamTest.java",
                    "file old path": "src/test/java/org/apache/commons/io/input/InfiniteCircularInputStreamTest.java",
                    "file new path": "src/test/java/org/apache/commons/io/input/InfiniteCircularInputStreamTest.java",
                    "full name": "src.test.java.org.apache.commons.io.input.InfiniteCircularInputStreamTest.testCount0InputSize1"
                }
            ],
            "files that changed": [
                "src/main/java/org/apache/commons/io/input/InfiniteCircularInputStream.java",
                "src/test/java/org/apache/commons/io/input/InfiniteCircularInputStreamTest.java"
            ]
        },
        {
            "bug index": "101",
            "bug id": "IO-91",
            "hexsha": "742c51feeaf75542ab9db6782ad3d2ad506fb871",
            "fix_hash": "39e3ea7fc0bb8d28b57c0213973ef4971fdeb265",
            "description": "The method FileSystemUtils.freeSpace does not work on Sun Solaris.\n\n    [junit] Testcase: testGetFreeSpace_String took 0.216 sec\n    [junit] \tCaused an ERROR\n    [junit] Command line 'df' did not return info as expected for path '/'- response on first line was '/                  (/dev/dsk/c0t0d0s0 ):41676304 block  3133314 filer'\n    [junit] java.io.IOException: Command line 'df' did not return info as expected for path '/'- response on first line was '/                  (/dev/dsk/c0t0d0s0 ):41676304 block  3133314 filer'\n    [junit] \tat org.apache.commons.io.FileSystemUtils.freeSpaceUnix(FileSystemUtils.java:315)\n    [junit] \tat org.apache.commons.io.FileSystemUtils.freeSpaceOS(FileSystemUtils.java:179)\n    [junit] \tat org.apache.commons.io.FileSystemUtils.freeSpace(FileSystemUtils.java:126)\n    [junit] \tat org.apache.commons.io.FileSystemUtilsTestCase.testGetFreeSpace_String(FileSystemUtilsTestCase.java:90)\n\nThis is because on Solaris the df command work different if the flag -k is used or not:\n\n$ df /\n/                  (/dev/dsk/c0t1d0s0 ): 1070402 blocks   294205 files\n$ df -k /\nFilesystem            kbytes    used   avail capacity  Mounted on\n/dev/dsk/c0t1d0s0    1350955  815754  481163    63%    /\n\nI haven't found any flag that makes it output GNU format even when -k is omitted.",
            "commit number version hash": 443,
            "commit number": 1607,
            "function that changed": [
                {
                    "function name": "skip",
                    "function params": [
                        "n"
                    ],
                    "file name": "CharSequenceReader.java",
                    "file old path": "src/main/java/org/apache/commons/io/input/CharSequenceReader.java",
                    "file new path": "src/main/java/org/apache/commons/io/input/CharSequenceReader.java",
                    "full name": "src.main.java.org.apache.commons.io.input.CharSequenceReader.skip"
                },
                {
                    "function name": "end",
                    "function params": [],
                    "file name": "CharSequenceReader.java",
                    "file old path": "src/main/java/org/apache/commons/io/input/CharSequenceReader.java",
                    "file new path": "src/main/java/org/apache/commons/io/input/CharSequenceReader.java",
                    "full name": "src.main.java.org.apache.commons.io.input.CharSequenceReader.end"
                },
                {
                    "function name": "start",
                    "function params": [],
                    "file name": "CharSequenceReader.java",
                    "file old path": "src/main/java/org/apache/commons/io/input/CharSequenceReader.java",
                    "file new path": "src/main/java/org/apache/commons/io/input/CharSequenceReader.java",
                    "full name": "src.main.java.org.apache.commons.io.input.CharSequenceReader.start"
                },
                {
                    "function name": "read",
                    "function params": [],
                    "file name": "CharSequenceReader.java",
                    "file old path": "src/main/java/org/apache/commons/io/input/CharSequenceReader.java",
                    "file new path": "src/main/java/org/apache/commons/io/input/CharSequenceReader.java",
                    "full name": "src.main.java.org.apache.commons.io.input.CharSequenceReader.read"
                },
                {
                    "function name": "CharSequenceReader",
                    "function params": [
                        "charSequence"
                    ],
                    "file name": "CharSequenceReader.java",
                    "file old path": "src/main/java/org/apache/commons/io/input/CharSequenceReader.java",
                    "file new path": "src/main/java/org/apache/commons/io/input/CharSequenceReader.java",
                    "full name": "src.main.java.org.apache.commons.io.input.CharSequenceReader.CharSequenceReader"
                },
                {
                    "function name": "toString",
                    "function params": [],
                    "file name": "CharSequenceReader.java",
                    "file old path": "src/main/java/org/apache/commons/io/input/CharSequenceReader.java",
                    "file new path": "src/main/java/org/apache/commons/io/input/CharSequenceReader.java",
                    "full name": "src.main.java.org.apache.commons.io.input.CharSequenceReader.toString"
                },
                {
                    "function name": "close",
                    "function params": [],
                    "file name": "CharSequenceReader.java",
                    "file old path": "src/main/java/org/apache/commons/io/input/CharSequenceReader.java",
                    "file new path": "src/main/java/org/apache/commons/io/input/CharSequenceReader.java",
                    "full name": "src.main.java.org.apache.commons.io.input.CharSequenceReader.close"
                },
                {
                    "function name": "read",
                    "function params": [
                        "array",
                        "offset",
                        "length"
                    ],
                    "file name": "CharSequenceReader.java",
                    "file old path": "src/main/java/org/apache/commons/io/input/CharSequenceReader.java",
                    "file new path": "src/main/java/org/apache/commons/io/input/CharSequenceReader.java",
                    "full name": "src.main.java.org.apache.commons.io.input.CharSequenceReader.read"
                },
                {
                    "function name": "CharSequenceReader",
                    "function params": [
                        "charSequence",
                        "start"
                    ],
                    "file name": "CharSequenceReader.java",
                    "file old path": "src/main/java/org/apache/commons/io/input/CharSequenceReader.java",
                    "file new path": "src/main/java/org/apache/commons/io/input/CharSequenceReader.java",
                    "full name": "src.main.java.org.apache.commons.io.input.CharSequenceReader.CharSequenceReader"
                },
                {
                    "function name": "CharSequenceReader",
                    "function params": [
                        "charSequence",
                        "start",
                        "end"
                    ],
                    "file name": "CharSequenceReader.java",
                    "file old path": "src/main/java/org/apache/commons/io/input/CharSequenceReader.java",
                    "file new path": "src/main/java/org/apache/commons/io/input/CharSequenceReader.java",
                    "full name": "src.main.java.org.apache.commons.io.input.CharSequenceReader.CharSequenceReader"
                },
                {
                    "function name": "testToString",
                    "function params": [],
                    "file name": "CharSequenceReaderTest.java",
                    "file old path": "src/test/java/org/apache/commons/io/input/CharSequenceReaderTest.java",
                    "file new path": "src/test/java/org/apache/commons/io/input/CharSequenceReaderTest.java",
                    "full name": "src.test.java.org.apache.commons.io.input.CharSequenceReaderTest.testToString"
                },
                {
                    "function name": "testReadCharArrayPortion",
                    "function params": [
                        "charSequence"
                    ],
                    "file name": "CharSequenceReaderTest.java",
                    "file old path": "src/test/java/org/apache/commons/io/input/CharSequenceReaderTest.java",
                    "file new path": "src/test/java/org/apache/commons/io/input/CharSequenceReaderTest.java",
                    "full name": "src.test.java.org.apache.commons.io.input.CharSequenceReaderTest.testReadCharArrayPortion"
                },
                {
                    "function name": "testClose",
                    "function params": [],
                    "file name": "CharSequenceReaderTest.java",
                    "file old path": "src/test/java/org/apache/commons/io/input/CharSequenceReaderTest.java",
                    "file new path": "src/test/java/org/apache/commons/io/input/CharSequenceReaderTest.java",
                    "full name": "src.test.java.org.apache.commons.io.input.CharSequenceReaderTest.testClose"
                },
                {
                    "function name": "testReadCharArray",
                    "function params": [
                        "charSequence"
                    ],
                    "file name": "CharSequenceReaderTest.java",
                    "file old path": "src/test/java/org/apache/commons/io/input/CharSequenceReaderTest.java",
                    "file new path": "src/test/java/org/apache/commons/io/input/CharSequenceReaderTest.java",
                    "full name": "src.test.java.org.apache.commons.io.input.CharSequenceReaderTest.testReadCharArray"
                },
                {
                    "function name": "testSerialization",
                    "function params": [],
                    "file name": "CharSequenceReaderTest.java",
                    "file old path": "src/test/java/org/apache/commons/io/input/CharSequenceReaderTest.java",
                    "file new path": "src/test/java/org/apache/commons/io/input/CharSequenceReaderTest.java",
                    "full name": "src.test.java.org.apache.commons.io.input.CharSequenceReaderTest.testSerialization"
                },
                {
                    "function name": "testConstructor",
                    "function params": [],
                    "file name": "CharSequenceReaderTest.java",
                    "file old path": "src/test/java/org/apache/commons/io/input/CharSequenceReaderTest.java",
                    "file new path": "src/test/java/org/apache/commons/io/input/CharSequenceReaderTest.java",
                    "full name": "src.test.java.org.apache.commons.io.input.CharSequenceReaderTest.testConstructor"
                },
                {
                    "function name": "testMark",
                    "function params": [],
                    "file name": "CharSequenceReaderTest.java",
                    "file old path": "src/test/java/org/apache/commons/io/input/CharSequenceReaderTest.java",
                    "file new path": "src/test/java/org/apache/commons/io/input/CharSequenceReaderTest.java",
                    "full name": "src.test.java.org.apache.commons.io.input.CharSequenceReaderTest.testMark"
                },
                {
                    "function name": "testRead",
                    "function params": [
                        "charSequence"
                    ],
                    "file name": "CharSequenceReaderTest.java",
                    "file old path": "src/test/java/org/apache/commons/io/input/CharSequenceReaderTest.java",
                    "file new path": "src/test/java/org/apache/commons/io/input/CharSequenceReaderTest.java",
                    "full name": "src.test.java.org.apache.commons.io.input.CharSequenceReaderTest.testRead"
                },
                {
                    "function name": "testSkip",
                    "function params": [],
                    "file name": "CharSequenceReaderTest.java",
                    "file old path": "src/test/java/org/apache/commons/io/input/CharSequenceReaderTest.java",
                    "file new path": "src/test/java/org/apache/commons/io/input/CharSequenceReaderTest.java",
                    "full name": "src.test.java.org.apache.commons.io.input.CharSequenceReaderTest.testSkip"
                }
            ],
            "files that changed": [
                "src/main/java/org/apache/commons/io/input/CharSequenceReader.java",
                "src/test/java/org/apache/commons/io/input/CharSequenceReaderTest.java"
            ]
        },
        {
            "bug index": "102",
            "bug id": "IO-110",
            "hexsha": "742c51feeaf75542ab9db6782ad3d2ad506fb871",
            "fix_hash": "b739ce7ccdaac07a7aa7bd7bbecf90baf3e340d5",
            "description": "FileSystemUtils.freeSpaceKb does not work on AIX. Throws IOException . It is due to the format of 'df -k' output on AIX Operating System. \n\n$ df -k /\nFilesystem    1024-blocks      Free %Used    Iused %Iused Mounted on\n/dev/hd4           262144    168324   36%     3916    10% /\n\nNote the fourth entry is %Used. \n'df -kt' command provides the format expected by freeSpaceKb method. \n\n$ df -kt /\nFilesystem    1024-blocks      Used      Free %Used Mounted on\n/dev/hd4           262144     93820    168324   36% /\n\nSo, for AIX operating system, change it to use 'df -kt ' instead of df -k \n",
            "commit number version hash": 443,
            "commit number": 1606,
            "function that changed": [
                {
                    "function name": "identity",
                    "function params": [],
                    "file name": "IOFunction.java",
                    "file old path": null,
                    "file new path": "src/main/java/org/apache/commons/io/function/IOFunction.java",
                    "full name": "src.main.java.org.apache.commons.io.function.IOFunction.identity"
                },
                {
                    "function name": "andThen",
                    "function params": [
                        "after"
                    ],
                    "file name": "IOFunction.java",
                    "file old path": null,
                    "file new path": "src/main/java/org/apache/commons/io/function/IOFunction.java",
                    "full name": "src.main.java.org.apache.commons.io.function.IOFunction.andThen"
                },
                {
                    "function name": "compose",
                    "function params": [
                        "before"
                    ],
                    "file name": "IOFunction.java",
                    "file old path": null,
                    "file new path": "src/main/java/org/apache/commons/io/function/IOFunction.java",
                    "full name": "src.main.java.org.apache.commons.io.function.IOFunction.compose"
                },
                {
                    "function name": "andThen",
                    "function params": [
                        "after"
                    ],
                    "file name": "IOFunction.java",
                    "file old path": null,
                    "file new path": "src/main/java/org/apache/commons/io/function/IOFunction.java",
                    "full name": "src.main.java.org.apache.commons.io.function.IOFunction.andThen"
                },
                {
                    "function name": "compose",
                    "function params": [
                        "before"
                    ],
                    "file name": "IOFunction.java",
                    "file old path": null,
                    "file new path": "src/main/java/org/apache/commons/io/function/IOFunction.java",
                    "full name": "src.main.java.org.apache.commons.io.function.IOFunction.compose"
                },
                {
                    "function name": "compose",
                    "function params": [
                        "before"
                    ],
                    "file name": "IOFunction.java",
                    "file old path": null,
                    "file new path": "src/main/java/org/apache/commons/io/function/IOFunction.java",
                    "full name": "src.main.java.org.apache.commons.io.function.IOFunction.compose"
                },
                {
                    "function name": "andThen",
                    "function params": [
                        "after"
                    ],
                    "file name": "IOFunction.java",
                    "file old path": null,
                    "file new path": "src/main/java/org/apache/commons/io/function/IOFunction.java",
                    "full name": "src.main.java.org.apache.commons.io.function.IOFunction.andThen"
                },
                {
                    "function name": "compose",
                    "function params": [
                        "before"
                    ],
                    "file name": "IOFunction.java",
                    "file old path": null,
                    "file new path": "src/main/java/org/apache/commons/io/function/IOFunction.java",
                    "full name": "src.main.java.org.apache.commons.io.function.IOFunction.compose"
                },
                {
                    "function name": "andThen",
                    "function params": [
                        "after"
                    ],
                    "file name": "IOFunction.java",
                    "file old path": null,
                    "file new path": "src/main/java/org/apache/commons/io/function/IOFunction.java",
                    "full name": "src.main.java.org.apache.commons.io.function.IOFunction.andThen"
                },
                {
                    "function name": "testComposeIOFunction",
                    "function params": [],
                    "file name": "IOFunctionTest.java",
                    "file old path": null,
                    "file new path": "src/test/java/org/apache/commons/io/function/IOFunctionTest.java",
                    "full name": "src.test.java.org.apache.commons.io.function.IOFunctionTest.testComposeIOFunction"
                },
                {
                    "function name": "testApply",
                    "function params": [],
                    "file name": "IOFunctionTest.java",
                    "file old path": null,
                    "file new path": "src/test/java/org/apache/commons/io/function/IOFunctionTest.java",
                    "full name": "src.test.java.org.apache.commons.io.function.IOFunctionTest.testApply"
                },
                {
                    "function name": "testComposeFunction",
                    "function params": [],
                    "file name": "IOFunctionTest.java",
                    "file old path": null,
                    "file new path": "src/test/java/org/apache/commons/io/function/IOFunctionTest.java",
                    "full name": "src.test.java.org.apache.commons.io.function.IOFunctionTest.testComposeFunction"
                },
                {
                    "function name": "testAndThenFunction",
                    "function params": [],
                    "file name": "IOFunctionTest.java",
                    "file old path": null,
                    "file new path": "src/test/java/org/apache/commons/io/function/IOFunctionTest.java",
                    "full name": "src.test.java.org.apache.commons.io.function.IOFunctionTest.testAndThenFunction"
                },
                {
                    "function name": "testComposeSupplier",
                    "function params": [],
                    "file name": "IOFunctionTest.java",
                    "file old path": null,
                    "file new path": "src/test/java/org/apache/commons/io/function/IOFunctionTest.java",
                    "full name": "src.test.java.org.apache.commons.io.function.IOFunctionTest.testComposeSupplier"
                },
                {
                    "function name": "testApplyRaisesException",
                    "function params": [],
                    "file name": "IOFunctionTest.java",
                    "file old path": null,
                    "file new path": "src/test/java/org/apache/commons/io/function/IOFunctionTest.java",
                    "full name": "src.test.java.org.apache.commons.io.function.IOFunctionTest.testApplyRaisesException"
                },
                {
                    "function name": "testAndThenConsumer",
                    "function params": [],
                    "file name": "IOFunctionTest.java",
                    "file old path": null,
                    "file new path": "src/test/java/org/apache/commons/io/function/IOFunctionTest.java",
                    "full name": "src.test.java.org.apache.commons.io.function.IOFunctionTest.testAndThenConsumer"
                },
                {
                    "function name": "testAndThenIOConsumer",
                    "function params": [],
                    "file name": "IOFunctionTest.java",
                    "file old path": null,
                    "file new path": "src/test/java/org/apache/commons/io/function/IOFunctionTest.java",
                    "full name": "src.test.java.org.apache.commons.io.function.IOFunctionTest.testAndThenIOConsumer"
                },
                {
                    "function name": "testAndThenIOFunction",
                    "function params": [],
                    "file name": "IOFunctionTest.java",
                    "file old path": null,
                    "file new path": "src/test/java/org/apache/commons/io/function/IOFunctionTest.java",
                    "full name": "src.test.java.org.apache.commons.io.function.IOFunctionTest.testAndThenIOFunction"
                },
                {
                    "function name": "testComposeIOSupplier",
                    "function params": [],
                    "file name": "IOFunctionTest.java",
                    "file old path": null,
                    "file new path": "src/test/java/org/apache/commons/io/function/IOFunctionTest.java",
                    "full name": "src.test.java.org.apache.commons.io.function.IOFunctionTest.testComposeIOSupplier"
                },
                {
                    "function name": "testIdentity",
                    "function params": [],
                    "file name": "IOFunctionTest.java",
                    "file old path": null,
                    "file new path": "src/test/java/org/apache/commons/io/function/IOFunctionTest.java",
                    "full name": "src.test.java.org.apache.commons.io.function.IOFunctionTest.testIdentity"
                },
                {
                    "function name": "UnsynchronizedByteArrayOutputStreamFactory",
                    "function params": [],
                    "file name": "ByteArrayOutputStreamTestCase.java",
                    "file old path": "src/test/java/org/apache/commons/io/output/ByteArrayOutputStreamTestCase.java",
                    "file new path": "src/test/java/org/apache/commons/io/output/ByteArrayOutputStreamTestCase.java",
                    "full name": "src.test.java.org.apache.commons.io.output.ByteArrayOutputStreamTestCase.UnsynchronizedByteArrayOutputStreamFactory"
                },
                {
                    "function name": "ByteArrayOutputStreamFactory",
                    "function params": [],
                    "file name": "ByteArrayOutputStreamTestCase.java",
                    "file old path": "src/test/java/org/apache/commons/io/output/ByteArrayOutputStreamTestCase.java",
                    "file new path": "src/test/java/org/apache/commons/io/output/ByteArrayOutputStreamTestCase.java",
                    "full name": "src.test.java.org.apache.commons.io.output.ByteArrayOutputStreamTestCase.ByteArrayOutputStreamFactory"
                },
                {
                    "function name": "ByteArrayOutputStreamFactory",
                    "function params": [],
                    "file name": "ByteArrayOutputStreamTestCase.java",
                    "file old path": "src/test/java/org/apache/commons/io/output/ByteArrayOutputStreamTestCase.java",
                    "file new path": "src/test/java/org/apache/commons/io/output/ByteArrayOutputStreamTestCase.java",
                    "full name": "src.test.java.org.apache.commons.io.output.ByteArrayOutputStreamTestCase.ByteArrayOutputStreamFactory"
                },
                {
                    "function name": "UnsynchronizedByteArrayOutputStreamFactory",
                    "function params": [],
                    "file name": "ByteArrayOutputStreamTestCase.java",
                    "file old path": "src/test/java/org/apache/commons/io/output/ByteArrayOutputStreamTestCase.java",
                    "file new path": "src/test/java/org/apache/commons/io/output/ByteArrayOutputStreamTestCase.java",
                    "full name": "src.test.java.org.apache.commons.io.output.ByteArrayOutputStreamTestCase.UnsynchronizedByteArrayOutputStreamFactory"
                }
            ],
            "files that changed": [
                "src/test/java/org/apache/commons/io/output/ByteArrayOutputStreamTestCase.java"
            ]
        },
        {
            "bug index": "103",
            "bug id": "IO-665",
            "hexsha": "401d17349e7ec52d8fa866c35efd24103f332c29",
            "fix_hash": "2c13fc8148128d1a1f19f28b71acad262f24d4a3",
            "description": "Had to go into the debugger because when some code passed null into the org.apache.commons.io.input.XmlStreamReader constructor it threw an IOException with the message \"Stream closed\". \r\n\r\n\u00a0\r\n\r\nThis is not accurate. There was no stream. It was null. If a NullPointerException had been thrown instead, this would have been easier to debug.\r\n\r\n\u00a0\r\n\r\n\u00a0\r\n\r\n\u00a0",
            "commit number version hash": 1624,
            "commit number": 1605,
            "function that changed": [
                {
                    "function name": "XmlStreamReader",
                    "function params": [
                        "inputStream",
                        "httpContentType",
                        "lenient",
                        "defaultEncoding"
                    ],
                    "file name": "XmlStreamReader.java",
                    "file old path": "src/main/java/org/apache/commons/io/input/XmlStreamReader.java",
                    "file new path": "src/main/java/org/apache/commons/io/input/XmlStreamReader.java",
                    "full name": "src.main.java.org.apache.commons.io.input.XmlStreamReader.XmlStreamReader"
                },
                {
                    "function name": "XmlStreamReader",
                    "function params": [
                        "url"
                    ],
                    "file name": "XmlStreamReader.java",
                    "file old path": "src/main/java/org/apache/commons/io/input/XmlStreamReader.java",
                    "file new path": "src/main/java/org/apache/commons/io/input/XmlStreamReader.java",
                    "full name": "src.main.java.org.apache.commons.io.input.XmlStreamReader.XmlStreamReader"
                },
                {
                    "function name": "XmlStreamReader",
                    "function params": [
                        "inputStream",
                        "lenient",
                        "defaultEncoding"
                    ],
                    "file name": "XmlStreamReader.java",
                    "file old path": "src/main/java/org/apache/commons/io/input/XmlStreamReader.java",
                    "file new path": "src/main/java/org/apache/commons/io/input/XmlStreamReader.java",
                    "full name": "src.main.java.org.apache.commons.io.input.XmlStreamReader.XmlStreamReader"
                },
                {
                    "function name": "XmlStreamReader",
                    "function params": [
                        "file"
                    ],
                    "file name": "XmlStreamReader.java",
                    "file old path": "src/main/java/org/apache/commons/io/input/XmlStreamReader.java",
                    "file new path": "src/main/java/org/apache/commons/io/input/XmlStreamReader.java",
                    "full name": "src.main.java.org.apache.commons.io.input.XmlStreamReader.XmlStreamReader"
                },
                {
                    "function name": "XmlStreamReader",
                    "function params": [
                        "conn",
                        "defaultEncoding"
                    ],
                    "file name": "XmlStreamReader.java",
                    "file old path": "src/main/java/org/apache/commons/io/input/XmlStreamReader.java",
                    "file new path": "src/main/java/org/apache/commons/io/input/XmlStreamReader.java",
                    "full name": "src.main.java.org.apache.commons.io.input.XmlStreamReader.XmlStreamReader"
                },
                {
                    "function name": "testNullURLInput",
                    "function params": [],
                    "file name": "XmlStreamReaderTest.java",
                    "file old path": "src/test/java/org/apache/commons/io/input/XmlStreamReaderTest.java",
                    "file new path": "src/test/java/org/apache/commons/io/input/XmlStreamReaderTest.java",
                    "full name": "src.test.java.org.apache.commons.io.input.XmlStreamReaderTest.testNullURLInput"
                },
                {
                    "function name": "testNullURLConnectionInput",
                    "function params": [],
                    "file name": "XmlStreamReaderTest.java",
                    "file old path": "src/test/java/org/apache/commons/io/input/XmlStreamReaderTest.java",
                    "file new path": "src/test/java/org/apache/commons/io/input/XmlStreamReaderTest.java",
                    "full name": "src.test.java.org.apache.commons.io.input.XmlStreamReaderTest.testNullURLConnectionInput"
                },
                {
                    "function name": "testNullFileInput",
                    "function params": [],
                    "file name": "XmlStreamReaderTest.java",
                    "file old path": "src/test/java/org/apache/commons/io/input/XmlStreamReaderTest.java",
                    "file new path": "src/test/java/org/apache/commons/io/input/XmlStreamReaderTest.java",
                    "full name": "src.test.java.org.apache.commons.io.input.XmlStreamReaderTest.testNullFileInput"
                },
                {
                    "function name": "testNullInputStreamInput",
                    "function params": [],
                    "file name": "XmlStreamReaderTest.java",
                    "file old path": "src/test/java/org/apache/commons/io/input/XmlStreamReaderTest.java",
                    "file new path": "src/test/java/org/apache/commons/io/input/XmlStreamReaderTest.java",
                    "full name": "src.test.java.org.apache.commons.io.input.XmlStreamReaderTest.testNullInputStreamInput"
                }
            ],
            "files that changed": [
                "src/main/java/org/apache/commons/io/input/XmlStreamReader.java",
                "src/test/java/org/apache/commons/io/input/XmlStreamReaderTest.java"
            ]
        },
        {
            "bug index": "104",
            "bug id": "IO-109",
            "hexsha": "651332ef291809e8271cec74fdd6691cfb725f9f",
            "fix_hash": "b3960d9773d20cf5069f31de94efe480b49d255e",
            "description": "The freeSpaceUnix method does not work under HP-UX.  The df command under HP-UX is the old System V varient and the fields are not in the correct order.   This diff modifies the code to use the 'bdf' command when HP-UX is detected:\n\n--- FileSystemUtils.java        2006-03-19 12:42:48.000000000 -0800\n+++ FileSystemUtils-HP-UX-Fix.java      2007-01-11 13:05:34.844269000 -0800\n@@ -51,13 +51,15 @@\n     private static final int WINDOWS = 1;\n     /** Operating system state flag for Unix. */\n     private static final int UNIX = 2;\n+    /** Unix variant name */\n+       private static String osName = null;\n\n     /** The operating system flag. */\n     private static final int OS;\n     static {\n         int os = OTHER;\n         try {\n-            String osName = System.getProperty(\"os.name\");\n+            osName = System.getProperty(\"os.name\");\n             if (osName == null) {\n                 throw new IOException(\"os.name not found\");\n             }\n@@ -287,9 +289,18 @@\n         }\n         path = FilenameUtils.normalize(path);\n\n+               // HP-UX sucks we need to use bdf instead\n+               String dfCmd = \"df\";\n+               String dfOpts = \"-k\";\n+               if (osName.indexOf(\"hp-ux\") != -1)\n+               {\n+                       dfCmd = \"bdf\";\n+                       dfOpts = \"\";\n+               }\n+\n         // build and run the 'dir' command\n         String[] cmdAttribs =\n-            (kb ? new String[] {\"df\", \"-k\", path} : new String[] {\"df\", path});\n+            (kb ? new String[] {dfCmd, dfOpts, path} : new String[] {dfCmd, path});\n\n         // read the output from the command until we come to the second line\n         long bytes = -1;\n",
            "commit number version hash": 499,
            "commit number": 1595,
            "function that changed": [
                {
                    "function name": "UnsynchronizedByteArrayInputStream",
                    "function params": [
                        "data",
                        "offset"
                    ],
                    "file name": "UnsynchronizedByteArrayInputStream.java",
                    "file old path": null,
                    "file new path": "src/main/java/org/apache/commons/io/input/UnsynchronizedByteArrayInputStream.java",
                    "full name": "src.main.java.org.apache.commons.io.input.UnsynchronizedByteArrayInputStream.UnsynchronizedByteArrayInputStream"
                },
                {
                    "function name": "available",
                    "function params": [],
                    "file name": "UnsynchronizedByteArrayInputStream.java",
                    "file old path": null,
                    "file new path": "src/main/java/org/apache/commons/io/input/UnsynchronizedByteArrayInputStream.java",
                    "full name": "src.main.java.org.apache.commons.io.input.UnsynchronizedByteArrayInputStream.available"
                },
                {
                    "function name": "UnsynchronizedByteArrayInputStream",
                    "function params": [
                        "data"
                    ],
                    "file name": "UnsynchronizedByteArrayInputStream.java",
                    "file old path": null,
                    "file new path": "src/main/java/org/apache/commons/io/input/UnsynchronizedByteArrayInputStream.java",
                    "full name": "src.main.java.org.apache.commons.io.input.UnsynchronizedByteArrayInputStream.UnsynchronizedByteArrayInputStream"
                },
                {
                    "function name": "UnsynchronizedByteArrayInputStream",
                    "function params": [
                        "data",
                        "offset",
                        "length"
                    ],
                    "file name": "UnsynchronizedByteArrayInputStream.java",
                    "file old path": null,
                    "file new path": "src/main/java/org/apache/commons/io/input/UnsynchronizedByteArrayInputStream.java",
                    "full name": "src.main.java.org.apache.commons.io.input.UnsynchronizedByteArrayInputStream.UnsynchronizedByteArrayInputStream"
                },
                {
                    "function name": "skip",
                    "function params": [
                        "n"
                    ],
                    "file name": "UnsynchronizedByteArrayInputStream.java",
                    "file old path": null,
                    "file new path": "src/main/java/org/apache/commons/io/input/UnsynchronizedByteArrayInputStream.java",
                    "full name": "src.main.java.org.apache.commons.io.input.UnsynchronizedByteArrayInputStream.skip"
                },
                {
                    "function name": "mark",
                    "function params": [
                        "readlimit"
                    ],
                    "file name": "UnsynchronizedByteArrayInputStream.java",
                    "file old path": null,
                    "file new path": "src/main/java/org/apache/commons/io/input/UnsynchronizedByteArrayInputStream.java",
                    "full name": "src.main.java.org.apache.commons.io.input.UnsynchronizedByteArrayInputStream.mark"
                },
                {
                    "function name": "reset",
                    "function params": [],
                    "file name": "UnsynchronizedByteArrayInputStream.java",
                    "file old path": null,
                    "file new path": "src/main/java/org/apache/commons/io/input/UnsynchronizedByteArrayInputStream.java",
                    "full name": "src.main.java.org.apache.commons.io.input.UnsynchronizedByteArrayInputStream.reset"
                },
                {
                    "function name": "markSupported",
                    "function params": [],
                    "file name": "UnsynchronizedByteArrayInputStream.java",
                    "file old path": null,
                    "file new path": "src/main/java/org/apache/commons/io/input/UnsynchronizedByteArrayInputStream.java",
                    "full name": "src.main.java.org.apache.commons.io.input.UnsynchronizedByteArrayInputStream.markSupported"
                },
                {
                    "function name": "read",
                    "function params": [
                        "b"
                    ],
                    "file name": "UnsynchronizedByteArrayInputStream.java",
                    "file old path": null,
                    "file new path": "src/main/java/org/apache/commons/io/input/UnsynchronizedByteArrayInputStream.java",
                    "full name": "src.main.java.org.apache.commons.io.input.UnsynchronizedByteArrayInputStream.read"
                },
                {
                    "function name": "read",
                    "function params": [
                        "b",
                        "off",
                        "len"
                    ],
                    "file name": "UnsynchronizedByteArrayInputStream.java",
                    "file old path": null,
                    "file new path": "src/main/java/org/apache/commons/io/input/UnsynchronizedByteArrayInputStream.java",
                    "full name": "src.main.java.org.apache.commons.io.input.UnsynchronizedByteArrayInputStream.read"
                },
                {
                    "function name": "read",
                    "function params": [],
                    "file name": "UnsynchronizedByteArrayInputStream.java",
                    "file old path": null,
                    "file new path": "src/main/java/org/apache/commons/io/input/UnsynchronizedByteArrayInputStream.java",
                    "full name": "src.main.java.org.apache.commons.io.input.UnsynchronizedByteArrayInputStream.read"
                },
                {
                    "function name": "toInputStreamImpl",
                    "function params": [],
                    "file name": "AbstractByteArrayOutputStream.java",
                    "file old path": "src/main/java/org/apache/commons/io/output/AbstractByteArrayOutputStream.java",
                    "file new path": "src/main/java/org/apache/commons/io/output/AbstractByteArrayOutputStream.java",
                    "full name": "src.main.java.org.apache.commons.io.output.AbstractByteArrayOutputStream.toInputStreamImpl"
                },
                {
                    "function name": "toInputStreamImpl",
                    "function params": [
                        "isConstructor"
                    ],
                    "file name": "AbstractByteArrayOutputStream.java",
                    "file old path": "src/main/java/org/apache/commons/io/output/AbstractByteArrayOutputStream.java",
                    "file new path": "src/main/java/org/apache/commons/io/output/AbstractByteArrayOutputStream.java",
                    "full name": "src.main.java.org.apache.commons.io.output.AbstractByteArrayOutputStream.toInputStreamImpl"
                },
                {
                    "function name": "toInputStream",
                    "function params": [],
                    "file name": "ByteArrayOutputStream.java",
                    "file old path": "src/main/java/org/apache/commons/io/output/ByteArrayOutputStream.java",
                    "file new path": "src/main/java/org/apache/commons/io/output/ByteArrayOutputStream.java",
                    "full name": "src.main.java.org.apache.commons.io.output.ByteArrayOutputStream.toInputStream"
                },
                {
                    "function name": "toInputStream",
                    "function params": [],
                    "file name": "UnsynchronizedByteArrayOutputStream.java",
                    "file old path": "src/main/java/org/apache/commons/io/output/UnsynchronizedByteArrayOutputStream.java",
                    "file new path": "src/main/java/org/apache/commons/io/output/UnsynchronizedByteArrayOutputStream.java",
                    "full name": "src.main.java.org.apache.commons.io.output.UnsynchronizedByteArrayOutputStream.toInputStream"
                },
                {
                    "function name": "testInvalidReadArrayExplicitRangeOver",
                    "function params": [],
                    "file name": "UnsynchronizedByteArrayInputStreamTest.java",
                    "file old path": null,
                    "file new path": "src/test/java/org/apache/commons/io/input/UnsynchronizedByteArrayInputStreamTest.java",
                    "full name": "src.test.java.org.apache.commons.io.input.UnsynchronizedByteArrayInputStreamTest.testInvalidReadArrayExplicitRangeOver"
                },
                {
                    "function name": "testInvalidConstructor2OffsetUnder",
                    "function params": [],
                    "file name": "UnsynchronizedByteArrayInputStreamTest.java",
                    "file old path": null,
                    "file new path": "src/test/java/org/apache/commons/io/input/UnsynchronizedByteArrayInputStreamTest.java",
                    "full name": "src.test.java.org.apache.commons.io.input.UnsynchronizedByteArrayInputStreamTest.testInvalidConstructor2OffsetUnder"
                },
                {
                    "function name": "testReadArrayExplicit",
                    "function params": [],
                    "file name": "UnsynchronizedByteArrayInputStreamTest.java",
                    "file old path": null,
                    "file new path": "src/test/java/org/apache/commons/io/input/UnsynchronizedByteArrayInputStreamTest.java",
                    "full name": "src.test.java.org.apache.commons.io.input.UnsynchronizedByteArrayInputStreamTest.testReadArrayExplicit"
                },
                {
                    "function name": "testInvalidReadArrayNull",
                    "function params": [],
                    "file name": "UnsynchronizedByteArrayInputStreamTest.java",
                    "file old path": null,
                    "file new path": "src/test/java/org/apache/commons/io/input/UnsynchronizedByteArrayInputStreamTest.java",
                    "full name": "src.test.java.org.apache.commons.io.input.UnsynchronizedByteArrayInputStreamTest.testInvalidReadArrayNull"
                },
                {
                    "function name": "testConstructor1",
                    "function params": [],
                    "file name": "UnsynchronizedByteArrayInputStreamTest.java",
                    "file old path": null,
                    "file new path": "src/test/java/org/apache/commons/io/input/UnsynchronizedByteArrayInputStreamTest.java",
                    "full name": "src.test.java.org.apache.commons.io.input.UnsynchronizedByteArrayInputStreamTest.testConstructor1"
                },
                {
                    "function name": "testReadArray",
                    "function params": [],
                    "file name": "UnsynchronizedByteArrayInputStreamTest.java",
                    "file old path": null,
                    "file new path": "src/test/java/org/apache/commons/io/input/UnsynchronizedByteArrayInputStreamTest.java",
                    "full name": "src.test.java.org.apache.commons.io.input.UnsynchronizedByteArrayInputStreamTest.testReadArray"
                },
                {
                    "function name": "testConstructor3",
                    "function params": [],
                    "file name": "UnsynchronizedByteArrayInputStreamTest.java",
                    "file old path": null,
                    "file new path": "src/test/java/org/apache/commons/io/input/UnsynchronizedByteArrayInputStreamTest.java",
                    "full name": "src.test.java.org.apache.commons.io.input.UnsynchronizedByteArrayInputStreamTest.testConstructor3"
                },
                {
                    "function name": "testInvalidConstructor3LengthUnder",
                    "function params": [],
                    "file name": "UnsynchronizedByteArrayInputStreamTest.java",
                    "file old path": null,
                    "file new path": "src/test/java/org/apache/commons/io/input/UnsynchronizedByteArrayInputStreamTest.java",
                    "full name": "src.test.java.org.apache.commons.io.input.UnsynchronizedByteArrayInputStreamTest.testInvalidConstructor3LengthUnder"
                },
                {
                    "function name": "testInvalidReadArrayExplicitOffsetUnder",
                    "function params": [],
                    "file name": "UnsynchronizedByteArrayInputStreamTest.java",
                    "file old path": null,
                    "file new path": "src/test/java/org/apache/commons/io/input/UnsynchronizedByteArrayInputStreamTest.java",
                    "full name": "src.test.java.org.apache.commons.io.input.UnsynchronizedByteArrayInputStreamTest.testInvalidReadArrayExplicitOffsetUnder"
                },
                {
                    "function name": "testSkip",
                    "function params": [],
                    "file name": "UnsynchronizedByteArrayInputStreamTest.java",
                    "file old path": null,
                    "file new path": "src/test/java/org/apache/commons/io/input/UnsynchronizedByteArrayInputStreamTest.java",
                    "full name": "src.test.java.org.apache.commons.io.input.UnsynchronizedByteArrayInputStreamTest.testSkip"
                },
                {
                    "function name": "testConstructor2",
                    "function params": [],
                    "file name": "UnsynchronizedByteArrayInputStreamTest.java",
                    "file old path": null,
                    "file new path": "src/test/java/org/apache/commons/io/input/UnsynchronizedByteArrayInputStreamTest.java",
                    "full name": "src.test.java.org.apache.commons.io.input.UnsynchronizedByteArrayInputStreamTest.testConstructor2"
                },
                {
                    "function name": "testReadSingle",
                    "function params": [],
                    "file name": "UnsynchronizedByteArrayInputStreamTest.java",
                    "file old path": null,
                    "file new path": "src/test/java/org/apache/commons/io/input/UnsynchronizedByteArrayInputStreamTest.java",
                    "full name": "src.test.java.org.apache.commons.io.input.UnsynchronizedByteArrayInputStreamTest.testReadSingle"
                },
                {
                    "function name": "testInvalidConstructor3OffsetUnder",
                    "function params": [],
                    "file name": "UnsynchronizedByteArrayInputStreamTest.java",
                    "file old path": null,
                    "file new path": "src/test/java/org/apache/commons/io/input/UnsynchronizedByteArrayInputStreamTest.java",
                    "full name": "src.test.java.org.apache.commons.io.input.UnsynchronizedByteArrayInputStreamTest.testInvalidConstructor3OffsetUnder"
                },
                {
                    "function name": "testInvalidReadArrayExplicitLenUnder",
                    "function params": [],
                    "file name": "UnsynchronizedByteArrayInputStreamTest.java",
                    "file old path": null,
                    "file new path": "src/test/java/org/apache/commons/io/input/UnsynchronizedByteArrayInputStreamTest.java",
                    "full name": "src.test.java.org.apache.commons.io.input.UnsynchronizedByteArrayInputStreamTest.testInvalidReadArrayExplicitLenUnder"
                },
                {
                    "function name": "testMarkReset",
                    "function params": [],
                    "file name": "UnsynchronizedByteArrayInputStreamTest.java",
                    "file old path": null,
                    "file new path": "src/test/java/org/apache/commons/io/input/UnsynchronizedByteArrayInputStreamTest.java",
                    "full name": "src.test.java.org.apache.commons.io.input.UnsynchronizedByteArrayInputStreamTest.testMarkReset"
                },
                {
                    "function name": "testInvalidSkipNUnder",
                    "function params": [],
                    "file name": "UnsynchronizedByteArrayInputStreamTest.java",
                    "file old path": null,
                    "file new path": "src/test/java/org/apache/commons/io/input/UnsynchronizedByteArrayInputStreamTest.java",
                    "full name": "src.test.java.org.apache.commons.io.input.UnsynchronizedByteArrayInputStreamTest.testInvalidSkipNUnder"
                }
            ],
            "files that changed": [
                "src/main/java/org/apache/commons/io/output/AbstractByteArrayOutputStream.java",
                "src/main/java/org/apache/commons/io/output/ByteArrayOutputStream.java",
                "src/main/java/org/apache/commons/io/output/UnsynchronizedByteArrayOutputStream.java"
            ]
        },
        {
            "bug index": "105",
            "bug id": "IO-100",
            "hexsha": "742c51feeaf75542ab9db6782ad3d2ad506fb871",
            "fix_hash": "4d02b112100d7dfcd21b2ad6d0ed8947fd7ffe95",
            "description": "The documentation states, that FileUtils.touch implements the UNIX-touch command. However I may successfully FileUtils.touch files like /etc/passwd, which is not allowed on the shell as normal user. \n\nLooking at the implementation, you should propably raise an IOException if the returnvalue of `file.setLastModified(System.currentTimeMillis());` is `false`.",
            "commit number version hash": 443,
            "commit number": 1586,
            "function that changed": [
                {
                    "function name": "visitFile",
                    "function params": [
                        "file",
                        "attributes"
                    ],
                    "file name": "AccumulatorPathVisitor.java",
                    "file old path": null,
                    "file new path": "src/main/java/org/apache/commons/io/file/AccumulatorPathVisitor.java",
                    "full name": "src.main.java.org.apache.commons.io.file.AccumulatorPathVisitor.visitFile"
                },
                {
                    "function name": "withBigIntegerCounters",
                    "function params": [],
                    "file name": "AccumulatorPathVisitor.java",
                    "file old path": null,
                    "file new path": "src/main/java/org/apache/commons/io/file/AccumulatorPathVisitor.java",
                    "full name": "src.main.java.org.apache.commons.io.file.AccumulatorPathVisitor.withBigIntegerCounters"
                },
                {
                    "function name": "relativizeDirectories",
                    "function params": [
                        "parent",
                        "sort",
                        "comparator"
                    ],
                    "file name": "AccumulatorPathVisitor.java",
                    "file old path": null,
                    "file new path": "src/main/java/org/apache/commons/io/file/AccumulatorPathVisitor.java",
                    "full name": "src.main.java.org.apache.commons.io.file.AccumulatorPathVisitor.relativizeDirectories"
                },
                {
                    "function name": "withLongCounters",
                    "function params": [],
                    "file name": "AccumulatorPathVisitor.java",
                    "file old path": null,
                    "file new path": "src/main/java/org/apache/commons/io/file/AccumulatorPathVisitor.java",
                    "full name": "src.main.java.org.apache.commons.io.file.AccumulatorPathVisitor.withLongCounters"
                },
                {
                    "function name": "equals",
                    "function params": [
                        "obj"
                    ],
                    "file name": "AccumulatorPathVisitor.java",
                    "file old path": null,
                    "file new path": "src/main/java/org/apache/commons/io/file/AccumulatorPathVisitor.java",
                    "full name": "src.main.java.org.apache.commons.io.file.AccumulatorPathVisitor.equals"
                },
                {
                    "function name": "AccumulatorPathVisitor",
                    "function params": [
                        "pathCounter"
                    ],
                    "file name": "AccumulatorPathVisitor.java",
                    "file old path": null,
                    "file new path": "src/main/java/org/apache/commons/io/file/AccumulatorPathVisitor.java",
                    "full name": "src.main.java.org.apache.commons.io.file.AccumulatorPathVisitor.AccumulatorPathVisitor"
                },
                {
                    "function name": "hashCode",
                    "function params": [],
                    "file name": "AccumulatorPathVisitor.java",
                    "file old path": null,
                    "file new path": "src/main/java/org/apache/commons/io/file/AccumulatorPathVisitor.java",
                    "full name": "src.main.java.org.apache.commons.io.file.AccumulatorPathVisitor.hashCode"
                },
                {
                    "function name": "getFileList",
                    "function params": [],
                    "file name": "AccumulatorPathVisitor.java",
                    "file old path": null,
                    "file new path": "src/main/java/org/apache/commons/io/file/AccumulatorPathVisitor.java",
                    "full name": "src.main.java.org.apache.commons.io.file.AccumulatorPathVisitor.getFileList"
                },
                {
                    "function name": "getDirList",
                    "function params": [],
                    "file name": "AccumulatorPathVisitor.java",
                    "file old path": null,
                    "file new path": "src/main/java/org/apache/commons/io/file/AccumulatorPathVisitor.java",
                    "full name": "src.main.java.org.apache.commons.io.file.AccumulatorPathVisitor.getDirList"
                },
                {
                    "function name": "relativizeFiles",
                    "function params": [
                        "parent",
                        "sort",
                        "comparator"
                    ],
                    "file name": "AccumulatorPathVisitor.java",
                    "file old path": null,
                    "file new path": "src/main/java/org/apache/commons/io/file/AccumulatorPathVisitor.java",
                    "full name": "src.main.java.org.apache.commons.io.file.AccumulatorPathVisitor.relativizeFiles"
                },
                {
                    "function name": "fileContentEquals",
                    "function params": [
                        "path1",
                        "path2"
                    ],
                    "file name": "PathUtils.java",
                    "file old path": "src/main/java/org/apache/commons/io/file/PathUtils.java",
                    "file new path": "src/main/java/org/apache/commons/io/file/PathUtils.java",
                    "full name": "src.main.java.org.apache.commons.io.file.PathUtils.fileContentEquals"
                },
                {
                    "function name": "RelativeSortedPaths",
                    "function params": [
                        "dir1",
                        "dir2",
                        "maxDepth",
                        "linkOptions",
                        "fileVisitOptions"
                    ],
                    "file name": "PathUtils.java",
                    "file old path": "src/main/java/org/apache/commons/io/file/PathUtils.java",
                    "file new path": "src/main/java/org/apache/commons/io/file/PathUtils.java",
                    "full name": "src.main.java.org.apache.commons.io.file.PathUtils.RelativeSortedPaths"
                },
                {
                    "function name": "fileContentEquals",
                    "function params": [
                        "path1",
                        "path2",
                        "linkOptions",
                        "openOptions"
                    ],
                    "file name": "PathUtils.java",
                    "file old path": "src/main/java/org/apache/commons/io/file/PathUtils.java",
                    "file new path": "src/main/java/org/apache/commons/io/file/PathUtils.java",
                    "full name": "src.main.java.org.apache.commons.io.file.PathUtils.fileContentEquals"
                },
                {
                    "function name": "directoryContentEquals",
                    "function params": [
                        "path1",
                        "path2"
                    ],
                    "file name": "PathUtils.java",
                    "file old path": "src/main/java/org/apache/commons/io/file/PathUtils.java",
                    "file new path": "src/main/java/org/apache/commons/io/file/PathUtils.java",
                    "full name": "src.main.java.org.apache.commons.io.file.PathUtils.directoryContentEquals"
                },
                {
                    "function name": "relativize",
                    "function params": [
                        "collection",
                        "parent",
                        "sort",
                        "comparator"
                    ],
                    "file name": "PathUtils.java",
                    "file old path": "src/main/java/org/apache/commons/io/file/PathUtils.java",
                    "file new path": "src/main/java/org/apache/commons/io/file/PathUtils.java",
                    "full name": "src.main.java.org.apache.commons.io.file.PathUtils.relativize"
                },
                {
                    "function name": "accumulate",
                    "function params": [
                        "directory",
                        "maxDepth",
                        "linkOptions",
                        "fileVisitOptions"
                    ],
                    "file name": "PathUtils.java",
                    "file old path": "src/main/java/org/apache/commons/io/file/PathUtils.java",
                    "file new path": "src/main/java/org/apache/commons/io/file/PathUtils.java",
                    "full name": "src.main.java.org.apache.commons.io.file.PathUtils.accumulate"
                },
                {
                    "function name": "fileContentEquals",
                    "function params": [
                        "path1",
                        "path2",
                        "options"
                    ],
                    "file name": "PathUtils.java",
                    "file old path": "src/main/java/org/apache/commons/io/file/PathUtils.java",
                    "file new path": "src/main/java/org/apache/commons/io/file/PathUtils.java",
                    "full name": "src.main.java.org.apache.commons.io.file.PathUtils.fileContentEquals"
                },
                {
                    "function name": "copyFile",
                    "function params": [
                        "sourceFile",
                        "targetFile",
                        "copyOptions"
                    ],
                    "file name": "PathUtils.java",
                    "file old path": "src/main/java/org/apache/commons/io/file/PathUtils.java",
                    "file new path": "src/main/java/org/apache/commons/io/file/PathUtils.java",
                    "full name": "src.main.java.org.apache.commons.io.file.PathUtils.copyFile"
                },
                {
                    "function name": "toFileVisitOptionSet",
                    "function params": [
                        "fileVisitOptions"
                    ],
                    "file name": "PathUtils.java",
                    "file old path": "src/main/java/org/apache/commons/io/file/PathUtils.java",
                    "file new path": "src/main/java/org/apache/commons/io/file/PathUtils.java",
                    "full name": "src.main.java.org.apache.commons.io.file.PathUtils.toFileVisitOptionSet"
                },
                {
                    "function name": "directoryAndFileContentEquals",
                    "function params": [
                        "path1",
                        "path2"
                    ],
                    "file name": "PathUtils.java",
                    "file old path": "src/main/java/org/apache/commons/io/file/PathUtils.java",
                    "file new path": "src/main/java/org/apache/commons/io/file/PathUtils.java",
                    "full name": "src.main.java.org.apache.commons.io.file.PathUtils.directoryAndFileContentEquals"
                },
                {
                    "function name": "directoryAndFileContentEquals",
                    "function params": [
                        "path1",
                        "path2",
                        "linkOptions",
                        "openOptions",
                        "fileVisitOption"
                    ],
                    "file name": "PathUtils.java",
                    "file old path": "src/main/java/org/apache/commons/io/file/PathUtils.java",
                    "file new path": "src/main/java/org/apache/commons/io/file/PathUtils.java",
                    "full name": "src.main.java.org.apache.commons.io.file.PathUtils.directoryAndFileContentEquals"
                },
                {
                    "function name": "directoryContentEquals",
                    "function params": [
                        "path1",
                        "path2",
                        "maxDepth",
                        "linkOptions",
                        "fileVisitOptions"
                    ],
                    "file name": "PathUtils.java",
                    "file old path": "src/main/java/org/apache/commons/io/file/PathUtils.java",
                    "file new path": "src/main/java/org/apache/commons/io/file/PathUtils.java",
                    "full name": "src.main.java.org.apache.commons.io.file.PathUtils.directoryContentEquals"
                },
                {
                    "function name": "visitFileTree",
                    "function params": [
                        "visitor",
                        "start",
                        "options",
                        "maxDepth"
                    ],
                    "file name": "PathUtils.java",
                    "file old path": "src/main/java/org/apache/commons/io/file/PathUtils.java",
                    "file new path": "src/main/java/org/apache/commons/io/file/PathUtils.java",
                    "full name": "src.main.java.org.apache.commons.io.file.PathUtils.visitFileTree"
                },
                {
                    "function name": "testDirectoryAndFileContentEquals",
                    "function params": [],
                    "file name": "PathUtilsContentEqualsTest.java",
                    "file old path": "src/test/java/org/apache/commons/io/file/PathUtilsContentEqualsTest.java",
                    "file new path": "src/test/java/org/apache/commons/io/file/PathUtilsContentEqualsTest.java",
                    "full name": "src.test.java.org.apache.commons.io.file.PathUtilsContentEqualsTest.testDirectoryAndFileContentEquals"
                },
                {
                    "function name": "testDirectoryContentEquals",
                    "function params": [],
                    "file name": "PathUtilsContentEqualsTest.java",
                    "file old path": "src/test/java/org/apache/commons/io/file/PathUtilsContentEqualsTest.java",
                    "file new path": "src/test/java/org/apache/commons/io/file/PathUtilsContentEqualsTest.java",
                    "full name": "src.test.java.org.apache.commons.io.file.PathUtilsContentEqualsTest.testDirectoryContentEquals"
                }
            ],
            "files that changed": [
                "src/main/java/org/apache/commons/io/FileUtils.java",
                "src/main/java/org/apache/commons/io/file/PathUtils.java",
                "src/test/java/org/apache/commons/io/file/PathUtilsContentEqualsTest.java"
            ]
        },
        {
            "bug index": "106",
            "bug id": "IO-1",
            "hexsha": "742c51feeaf75542ab9db6782ad3d2ad506fb871",
            "fix_hash": "e46146c67026956d3f48d44be5c4df0fb78d5a42",
            "description": "FileUtils.forceMkdir(File) calls File.mkdirs() to create the directory. The\nJavaDoc of this method does not mention that any necessary but nonexistent\nparent directories are created, too.",
            "commit number version hash": 443,
            "commit number": 1581,
            "function that changed": [
                {
                    "function name": "toCharset",
                    "function params": [
                        "charset"
                    ],
                    "file name": "Charsets.java",
                    "file old path": "src/main/java/org/apache/commons/io/Charsets.java",
                    "file new path": "src/main/java/org/apache/commons/io/Charsets.java",
                    "full name": "src.main.java.org.apache.commons.io.Charsets.toCharset"
                },
                {
                    "function name": "toCharset",
                    "function params": [
                        "charsetName"
                    ],
                    "file name": "Charsets.java",
                    "file old path": "src/main/java/org/apache/commons/io/Charsets.java",
                    "file new path": "src/main/java/org/apache/commons/io/Charsets.java",
                    "full name": "src.main.java.org.apache.commons.io.Charsets.toCharset"
                },
                {
                    "function name": "writeStringToFile",
                    "function params": [
                        "file",
                        "data",
                        "encoding"
                    ],
                    "file name": "FileUtils.java",
                    "file old path": "src/main/java/org/apache/commons/io/FileUtils.java",
                    "file new path": "src/main/java/org/apache/commons/io/FileUtils.java",
                    "full name": "src.main.java.org.apache.commons.io.FileUtils.writeStringToFile"
                },
                {
                    "function name": "readLines",
                    "function params": [
                        "file",
                        "charsetName"
                    ],
                    "file name": "FileUtils.java",
                    "file old path": "src/main/java/org/apache/commons/io/FileUtils.java",
                    "file new path": "src/main/java/org/apache/commons/io/FileUtils.java",
                    "full name": "src.main.java.org.apache.commons.io.FileUtils.readLines"
                },
                {
                    "function name": "readLines",
                    "function params": [
                        "file",
                        "charset"
                    ],
                    "file name": "FileUtils.java",
                    "file old path": "src/main/java/org/apache/commons/io/FileUtils.java",
                    "file new path": "src/main/java/org/apache/commons/io/FileUtils.java",
                    "full name": "src.main.java.org.apache.commons.io.FileUtils.readLines"
                },
                {
                    "function name": "readLines",
                    "function params": [
                        "file",
                        "encoding"
                    ],
                    "file name": "FileUtils.java",
                    "file old path": "src/main/java/org/apache/commons/io/FileUtils.java",
                    "file new path": "src/main/java/org/apache/commons/io/FileUtils.java",
                    "full name": "src.main.java.org.apache.commons.io.FileUtils.readLines"
                },
                {
                    "function name": "writeStringToFile",
                    "function params": [
                        "file",
                        "data",
                        "charsetName",
                        "append"
                    ],
                    "file name": "FileUtils.java",
                    "file old path": "src/main/java/org/apache/commons/io/FileUtils.java",
                    "file new path": "src/main/java/org/apache/commons/io/FileUtils.java",
                    "full name": "src.main.java.org.apache.commons.io.FileUtils.writeStringToFile"
                },
                {
                    "function name": "write",
                    "function params": [
                        "file",
                        "data",
                        "encoding",
                        "append"
                    ],
                    "file name": "FileUtils.java",
                    "file old path": "src/main/java/org/apache/commons/io/FileUtils.java",
                    "file new path": "src/main/java/org/apache/commons/io/FileUtils.java",
                    "full name": "src.main.java.org.apache.commons.io.FileUtils.write"
                },
                {
                    "function name": "write",
                    "function params": [
                        "file",
                        "data",
                        "charset",
                        "append"
                    ],
                    "file name": "FileUtils.java",
                    "file old path": "src/main/java/org/apache/commons/io/FileUtils.java",
                    "file new path": "src/main/java/org/apache/commons/io/FileUtils.java",
                    "full name": "src.main.java.org.apache.commons.io.FileUtils.write"
                },
                {
                    "function name": "writeStringToFile",
                    "function params": [
                        "file",
                        "data",
                        "encoding"
                    ],
                    "file name": "FileUtils.java",
                    "file old path": "src/main/java/org/apache/commons/io/FileUtils.java",
                    "file new path": "src/main/java/org/apache/commons/io/FileUtils.java",
                    "full name": "src.main.java.org.apache.commons.io.FileUtils.writeStringToFile"
                },
                {
                    "function name": "write",
                    "function params": [
                        "file",
                        "data",
                        "charset"
                    ],
                    "file name": "FileUtils.java",
                    "file old path": "src/main/java/org/apache/commons/io/FileUtils.java",
                    "file new path": "src/main/java/org/apache/commons/io/FileUtils.java",
                    "full name": "src.main.java.org.apache.commons.io.FileUtils.write"
                },
                {
                    "function name": "writeLines",
                    "function params": [
                        "file",
                        "charsetName",
                        "lines",
                        "lineEnding",
                        "append"
                    ],
                    "file name": "FileUtils.java",
                    "file old path": "src/main/java/org/apache/commons/io/FileUtils.java",
                    "file new path": "src/main/java/org/apache/commons/io/FileUtils.java",
                    "full name": "src.main.java.org.apache.commons.io.FileUtils.writeLines"
                },
                {
                    "function name": "write",
                    "function params": [
                        "file",
                        "data",
                        "charsetName",
                        "append"
                    ],
                    "file name": "FileUtils.java",
                    "file old path": "src/main/java/org/apache/commons/io/FileUtils.java",
                    "file new path": "src/main/java/org/apache/commons/io/FileUtils.java",
                    "full name": "src.main.java.org.apache.commons.io.FileUtils.write"
                },
                {
                    "function name": "writeStringToFile",
                    "function params": [
                        "file",
                        "data",
                        "charset",
                        "append"
                    ],
                    "file name": "FileUtils.java",
                    "file old path": "src/main/java/org/apache/commons/io/FileUtils.java",
                    "file new path": "src/main/java/org/apache/commons/io/FileUtils.java",
                    "full name": "src.main.java.org.apache.commons.io.FileUtils.writeStringToFile"
                },
                {
                    "function name": "lineIterator",
                    "function params": [
                        "file",
                        "charsetName"
                    ],
                    "file name": "FileUtils.java",
                    "file old path": "src/main/java/org/apache/commons/io/FileUtils.java",
                    "file new path": "src/main/java/org/apache/commons/io/FileUtils.java",
                    "full name": "src.main.java.org.apache.commons.io.FileUtils.lineIterator"
                },
                {
                    "function name": "writeLines",
                    "function params": [
                        "file",
                        "encoding",
                        "lines"
                    ],
                    "file name": "FileUtils.java",
                    "file old path": "src/main/java/org/apache/commons/io/FileUtils.java",
                    "file new path": "src/main/java/org/apache/commons/io/FileUtils.java",
                    "full name": "src.main.java.org.apache.commons.io.FileUtils.writeLines"
                },
                {
                    "function name": "writeStringToFile",
                    "function params": [
                        "file",
                        "data",
                        "encoding",
                        "append"
                    ],
                    "file name": "FileUtils.java",
                    "file old path": "src/main/java/org/apache/commons/io/FileUtils.java",
                    "file new path": "src/main/java/org/apache/commons/io/FileUtils.java",
                    "full name": "src.main.java.org.apache.commons.io.FileUtils.writeStringToFile"
                },
                {
                    "function name": "writeLines",
                    "function params": [
                        "file",
                        "charsetName",
                        "lines"
                    ],
                    "file name": "FileUtils.java",
                    "file old path": "src/main/java/org/apache/commons/io/FileUtils.java",
                    "file new path": "src/main/java/org/apache/commons/io/FileUtils.java",
                    "full name": "src.main.java.org.apache.commons.io.FileUtils.writeLines"
                },
                {
                    "function name": "write",
                    "function params": [
                        "file",
                        "data",
                        "encoding"
                    ],
                    "file name": "FileUtils.java",
                    "file old path": "src/main/java/org/apache/commons/io/FileUtils.java",
                    "file new path": "src/main/java/org/apache/commons/io/FileUtils.java",
                    "full name": "src.main.java.org.apache.commons.io.FileUtils.write"
                },
                {
                    "function name": "writeLines",
                    "function params": [
                        "file",
                        "charsetName",
                        "lines",
                        "append"
                    ],
                    "file name": "FileUtils.java",
                    "file old path": "src/main/java/org/apache/commons/io/FileUtils.java",
                    "file new path": "src/main/java/org/apache/commons/io/FileUtils.java",
                    "full name": "src.main.java.org.apache.commons.io.FileUtils.writeLines"
                },
                {
                    "function name": "readFileToString",
                    "function params": [
                        "file",
                        "encoding"
                    ],
                    "file name": "FileUtils.java",
                    "file old path": "src/main/java/org/apache/commons/io/FileUtils.java",
                    "file new path": "src/main/java/org/apache/commons/io/FileUtils.java",
                    "full name": "src.main.java.org.apache.commons.io.FileUtils.readFileToString"
                },
                {
                    "function name": "writeStringToFile",
                    "function params": [
                        "file",
                        "data",
                        "charset"
                    ],
                    "file name": "FileUtils.java",
                    "file old path": "src/main/java/org/apache/commons/io/FileUtils.java",
                    "file new path": "src/main/java/org/apache/commons/io/FileUtils.java",
                    "full name": "src.main.java.org.apache.commons.io.FileUtils.writeStringToFile"
                },
                {
                    "function name": "lineIterator",
                    "function params": [
                        "file",
                        "encoding"
                    ],
                    "file name": "FileUtils.java",
                    "file old path": "src/main/java/org/apache/commons/io/FileUtils.java",
                    "file new path": "src/main/java/org/apache/commons/io/FileUtils.java",
                    "full name": "src.main.java.org.apache.commons.io.FileUtils.lineIterator"
                },
                {
                    "function name": "writeStringToFile",
                    "function params": [
                        "file",
                        "data",
                        "encoding",
                        "append"
                    ],
                    "file name": "FileUtils.java",
                    "file old path": "src/main/java/org/apache/commons/io/FileUtils.java",
                    "file new path": "src/main/java/org/apache/commons/io/FileUtils.java",
                    "full name": "src.main.java.org.apache.commons.io.FileUtils.writeStringToFile"
                },
                {
                    "function name": "write",
                    "function params": [
                        "file",
                        "data",
                        "encoding"
                    ],
                    "file name": "FileUtils.java",
                    "file old path": "src/main/java/org/apache/commons/io/FileUtils.java",
                    "file new path": "src/main/java/org/apache/commons/io/FileUtils.java",
                    "full name": "src.main.java.org.apache.commons.io.FileUtils.write"
                },
                {
                    "function name": "readFileToString",
                    "function params": [
                        "file",
                        "charsetName"
                    ],
                    "file name": "FileUtils.java",
                    "file old path": "src/main/java/org/apache/commons/io/FileUtils.java",
                    "file new path": "src/main/java/org/apache/commons/io/FileUtils.java",
                    "full name": "src.main.java.org.apache.commons.io.FileUtils.readFileToString"
                },
                {
                    "function name": "writeLines",
                    "function params": [
                        "file",
                        "charsetName",
                        "lines",
                        "lineEnding"
                    ],
                    "file name": "FileUtils.java",
                    "file old path": "src/main/java/org/apache/commons/io/FileUtils.java",
                    "file new path": "src/main/java/org/apache/commons/io/FileUtils.java",
                    "full name": "src.main.java.org.apache.commons.io.FileUtils.writeLines"
                },
                {
                    "function name": "writeLines",
                    "function params": [
                        "file",
                        "encoding",
                        "lines",
                        "lineEnding"
                    ],
                    "file name": "FileUtils.java",
                    "file old path": "src/main/java/org/apache/commons/io/FileUtils.java",
                    "file new path": "src/main/java/org/apache/commons/io/FileUtils.java",
                    "full name": "src.main.java.org.apache.commons.io.FileUtils.writeLines"
                },
                {
                    "function name": "write",
                    "function params": [
                        "file",
                        "data",
                        "encoding",
                        "append"
                    ],
                    "file name": "FileUtils.java",
                    "file old path": "src/main/java/org/apache/commons/io/FileUtils.java",
                    "file new path": "src/main/java/org/apache/commons/io/FileUtils.java",
                    "full name": "src.main.java.org.apache.commons.io.FileUtils.write"
                },
                {
                    "function name": "readLines",
                    "function params": [
                        "file",
                        "encoding"
                    ],
                    "file name": "FileUtils.java",
                    "file old path": "src/main/java/org/apache/commons/io/FileUtils.java",
                    "file new path": "src/main/java/org/apache/commons/io/FileUtils.java",
                    "full name": "src.main.java.org.apache.commons.io.FileUtils.readLines"
                },
                {
                    "function name": "readFileToString",
                    "function params": [
                        "file",
                        "charsetName"
                    ],
                    "file name": "FileUtils.java",
                    "file old path": "src/main/java/org/apache/commons/io/FileUtils.java",
                    "file new path": "src/main/java/org/apache/commons/io/FileUtils.java",
                    "full name": "src.main.java.org.apache.commons.io.FileUtils.readFileToString"
                },
                {
                    "function name": "writeLines",
                    "function params": [
                        "file",
                        "encoding",
                        "lines",
                        "append"
                    ],
                    "file name": "FileUtils.java",
                    "file old path": "src/main/java/org/apache/commons/io/FileUtils.java",
                    "file new path": "src/main/java/org/apache/commons/io/FileUtils.java",
                    "full name": "src.main.java.org.apache.commons.io.FileUtils.writeLines"
                },
                {
                    "function name": "writeStringToFile",
                    "function params": [
                        "file",
                        "data",
                        "charsetName"
                    ],
                    "file name": "FileUtils.java",
                    "file old path": "src/main/java/org/apache/commons/io/FileUtils.java",
                    "file new path": "src/main/java/org/apache/commons/io/FileUtils.java",
                    "full name": "src.main.java.org.apache.commons.io.FileUtils.writeStringToFile"
                },
                {
                    "function name": "write",
                    "function params": [
                        "file",
                        "data",
                        "charsetName"
                    ],
                    "file name": "FileUtils.java",
                    "file old path": "src/main/java/org/apache/commons/io/FileUtils.java",
                    "file new path": "src/main/java/org/apache/commons/io/FileUtils.java",
                    "full name": "src.main.java.org.apache.commons.io.FileUtils.write"
                },
                {
                    "function name": "writeLines",
                    "function params": [
                        "file",
                        "encoding",
                        "lines",
                        "lineEnding",
                        "append"
                    ],
                    "file name": "FileUtils.java",
                    "file old path": "src/main/java/org/apache/commons/io/FileUtils.java",
                    "file new path": "src/main/java/org/apache/commons/io/FileUtils.java",
                    "full name": "src.main.java.org.apache.commons.io.FileUtils.writeLines"
                },
                {
                    "function name": "readFileToString",
                    "function params": [
                        "file",
                        "encoding"
                    ],
                    "file name": "FileUtils.java",
                    "file old path": "src/main/java/org/apache/commons/io/FileUtils.java",
                    "file new path": "src/main/java/org/apache/commons/io/FileUtils.java",
                    "full name": "src.main.java.org.apache.commons.io.FileUtils.readFileToString"
                },
                {
                    "function name": "toByteArray",
                    "function params": [
                        "input",
                        "charset"
                    ],
                    "file name": "IOUtils.java",
                    "file old path": "src/main/java/org/apache/commons/io/IOUtils.java",
                    "file new path": "src/main/java/org/apache/commons/io/IOUtils.java",
                    "full name": "src.main.java.org.apache.commons.io.IOUtils.toByteArray"
                },
                {
                    "function name": "toCharArray",
                    "function params": [
                        "is",
                        "encoding"
                    ],
                    "file name": "IOUtils.java",
                    "file old path": "src/main/java/org/apache/commons/io/IOUtils.java",
                    "file new path": "src/main/java/org/apache/commons/io/IOUtils.java",
                    "full name": "src.main.java.org.apache.commons.io.IOUtils.toCharArray"
                },
                {
                    "function name": "copy",
                    "function params": [
                        "input",
                        "output",
                        "outputEncoding"
                    ],
                    "file name": "IOUtils.java",
                    "file old path": "src/main/java/org/apache/commons/io/IOUtils.java",
                    "file new path": "src/main/java/org/apache/commons/io/IOUtils.java",
                    "full name": "src.main.java.org.apache.commons.io.IOUtils.copy"
                },
                {
                    "function name": "readLines",
                    "function params": [
                        "input",
                        "encoding"
                    ],
                    "file name": "IOUtils.java",
                    "file old path": "src/main/java/org/apache/commons/io/IOUtils.java",
                    "file new path": "src/main/java/org/apache/commons/io/IOUtils.java",
                    "full name": "src.main.java.org.apache.commons.io.IOUtils.readLines"
                },
                {
                    "function name": "write",
                    "function params": [
                        "data",
                        "output",
                        "charsetName"
                    ],
                    "file name": "IOUtils.java",
                    "file old path": "src/main/java/org/apache/commons/io/IOUtils.java",
                    "file new path": "src/main/java/org/apache/commons/io/IOUtils.java",
                    "full name": "src.main.java.org.apache.commons.io.IOUtils.write"
                },
                {
                    "function name": "toInputStream",
                    "function params": [
                        "input",
                        "encoding"
                    ],
                    "file name": "IOUtils.java",
                    "file old path": "src/main/java/org/apache/commons/io/IOUtils.java",
                    "file new path": "src/main/java/org/apache/commons/io/IOUtils.java",
                    "full name": "src.main.java.org.apache.commons.io.IOUtils.toInputStream"
                },
                {
                    "function name": "write",
                    "function params": [
                        "data",
                        "output",
                        "encoding"
                    ],
                    "file name": "IOUtils.java",
                    "file old path": "src/main/java/org/apache/commons/io/IOUtils.java",
                    "file new path": "src/main/java/org/apache/commons/io/IOUtils.java",
                    "full name": "src.main.java.org.apache.commons.io.IOUtils.write"
                },
                {
                    "function name": "write",
                    "function params": [
                        "data",
                        "output",
                        "encoding"
                    ],
                    "file name": "IOUtils.java",
                    "file old path": "src/main/java/org/apache/commons/io/IOUtils.java",
                    "file new path": "src/main/java/org/apache/commons/io/IOUtils.java",
                    "full name": "src.main.java.org.apache.commons.io.IOUtils.write"
                },
                {
                    "function name": "write",
                    "function params": [
                        "data",
                        "output",
                        "charset"
                    ],
                    "file name": "IOUtils.java",
                    "file old path": "src/main/java/org/apache/commons/io/IOUtils.java",
                    "file new path": "src/main/java/org/apache/commons/io/IOUtils.java",
                    "full name": "src.main.java.org.apache.commons.io.IOUtils.write"
                },
                {
                    "function name": "toInputStream",
                    "function params": [
                        "input",
                        "encoding"
                    ],
                    "file name": "IOUtils.java",
                    "file old path": "src/main/java/org/apache/commons/io/IOUtils.java",
                    "file new path": "src/main/java/org/apache/commons/io/IOUtils.java",
                    "full name": "src.main.java.org.apache.commons.io.IOUtils.toInputStream"
                },
                {
                    "function name": "copy",
                    "function params": [
                        "input",
                        "output",
                        "outputCharset"
                    ],
                    "file name": "IOUtils.java",
                    "file old path": "src/main/java/org/apache/commons/io/IOUtils.java",
                    "file new path": "src/main/java/org/apache/commons/io/IOUtils.java",
                    "full name": "src.main.java.org.apache.commons.io.IOUtils.copy"
                },
                {
                    "function name": "toByteArray",
                    "function params": [
                        "input",
                        "charsetName"
                    ],
                    "file name": "IOUtils.java",
                    "file old path": "src/main/java/org/apache/commons/io/IOUtils.java",
                    "file new path": "src/main/java/org/apache/commons/io/IOUtils.java",
                    "full name": "src.main.java.org.apache.commons.io.IOUtils.toByteArray"
                },
                {
                    "function name": "toString",
                    "function params": [
                        "input",
                        "charsetName"
                    ],
                    "file name": "IOUtils.java",
                    "file old path": "src/main/java/org/apache/commons/io/IOUtils.java",
                    "file new path": "src/main/java/org/apache/commons/io/IOUtils.java",
                    "full name": "src.main.java.org.apache.commons.io.IOUtils.toString"
                },
                {
                    "function name": "writeLines",
                    "function params": [
                        "lines",
                        "lineEnding",
                        "output",
                        "charset"
                    ],
                    "file name": "IOUtils.java",
                    "file old path": "src/main/java/org/apache/commons/io/IOUtils.java",
                    "file new path": "src/main/java/org/apache/commons/io/IOUtils.java",
                    "full name": "src.main.java.org.apache.commons.io.IOUtils.writeLines"
                },
                {
                    "function name": "writeLines",
                    "function params": [
                        "lines",
                        "lineEnding",
                        "output",
                        "encoding"
                    ],
                    "file name": "IOUtils.java",
                    "file old path": "src/main/java/org/apache/commons/io/IOUtils.java",
                    "file new path": "src/main/java/org/apache/commons/io/IOUtils.java",
                    "full name": "src.main.java.org.apache.commons.io.IOUtils.writeLines"
                },
                {
                    "function name": "copy",
                    "function params": [
                        "input",
                        "output",
                        "inputCharset"
                    ],
                    "file name": "IOUtils.java",
                    "file old path": "src/main/java/org/apache/commons/io/IOUtils.java",
                    "file new path": "src/main/java/org/apache/commons/io/IOUtils.java",
                    "full name": "src.main.java.org.apache.commons.io.IOUtils.copy"
                },
                {
                    "function name": "toString",
                    "function params": [
                        "uri",
                        "charsetName"
                    ],
                    "file name": "IOUtils.java",
                    "file old path": "src/main/java/org/apache/commons/io/IOUtils.java",
                    "file new path": "src/main/java/org/apache/commons/io/IOUtils.java",
                    "full name": "src.main.java.org.apache.commons.io.IOUtils.toString"
                },
                {
                    "function name": "write",
                    "function params": [
                        "data",
                        "output",
                        "charset"
                    ],
                    "file name": "IOUtils.java",
                    "file old path": "src/main/java/org/apache/commons/io/IOUtils.java",
                    "file new path": "src/main/java/org/apache/commons/io/IOUtils.java",
                    "full name": "src.main.java.org.apache.commons.io.IOUtils.write"
                },
                {
                    "function name": "toString",
                    "function params": [
                        "url",
                        "encoding"
                    ],
                    "file name": "IOUtils.java",
                    "file old path": "src/main/java/org/apache/commons/io/IOUtils.java",
                    "file new path": "src/main/java/org/apache/commons/io/IOUtils.java",
                    "full name": "src.main.java.org.apache.commons.io.IOUtils.toString"
                },
                {
                    "function name": "lineIterator",
                    "function params": [
                        "input",
                        "encoding"
                    ],
                    "file name": "IOUtils.java",
                    "file old path": "src/main/java/org/apache/commons/io/IOUtils.java",
                    "file new path": "src/main/java/org/apache/commons/io/IOUtils.java",
                    "full name": "src.main.java.org.apache.commons.io.IOUtils.lineIterator"
                },
                {
                    "function name": "toCharArray",
                    "function params": [
                        "is",
                        "charsetName"
                    ],
                    "file name": "IOUtils.java",
                    "file old path": "src/main/java/org/apache/commons/io/IOUtils.java",
                    "file new path": "src/main/java/org/apache/commons/io/IOUtils.java",
                    "full name": "src.main.java.org.apache.commons.io.IOUtils.toCharArray"
                },
                {
                    "function name": "readLines",
                    "function params": [
                        "input",
                        "charset"
                    ],
                    "file name": "IOUtils.java",
                    "file old path": "src/main/java/org/apache/commons/io/IOUtils.java",
                    "file new path": "src/main/java/org/apache/commons/io/IOUtils.java",
                    "full name": "src.main.java.org.apache.commons.io.IOUtils.readLines"
                },
                {
                    "function name": "toString",
                    "function params": [
                        "input",
                        "charsetName"
                    ],
                    "file name": "IOUtils.java",
                    "file old path": "src/main/java/org/apache/commons/io/IOUtils.java",
                    "file new path": "src/main/java/org/apache/commons/io/IOUtils.java",
                    "full name": "src.main.java.org.apache.commons.io.IOUtils.toString"
                },
                {
                    "function name": "toString",
                    "function params": [
                        "input",
                        "charset"
                    ],
                    "file name": "IOUtils.java",
                    "file old path": "src/main/java/org/apache/commons/io/IOUtils.java",
                    "file new path": "src/main/java/org/apache/commons/io/IOUtils.java",
                    "full name": "src.main.java.org.apache.commons.io.IOUtils.toString"
                },
                {
                    "function name": "write",
                    "function params": [
                        "data",
                        "output",
                        "encoding"
                    ],
                    "file name": "IOUtils.java",
                    "file old path": "src/main/java/org/apache/commons/io/IOUtils.java",
                    "file new path": "src/main/java/org/apache/commons/io/IOUtils.java",
                    "full name": "src.main.java.org.apache.commons.io.IOUtils.write"
                },
                {
                    "function name": "toString",
                    "function params": [
                        "input",
                        "encoding"
                    ],
                    "file name": "IOUtils.java",
                    "file old path": "src/main/java/org/apache/commons/io/IOUtils.java",
                    "file new path": "src/main/java/org/apache/commons/io/IOUtils.java",
                    "full name": "src.main.java.org.apache.commons.io.IOUtils.toString"
                },
                {
                    "function name": "toString",
                    "function params": [
                        "uri",
                        "encoding"
                    ],
                    "file name": "IOUtils.java",
                    "file old path": "src/main/java/org/apache/commons/io/IOUtils.java",
                    "file new path": "src/main/java/org/apache/commons/io/IOUtils.java",
                    "full name": "src.main.java.org.apache.commons.io.IOUtils.toString"
                },
                {
                    "function name": "lineIterator",
                    "function params": [
                        "input",
                        "encoding"
                    ],
                    "file name": "IOUtils.java",
                    "file old path": "src/main/java/org/apache/commons/io/IOUtils.java",
                    "file new path": "src/main/java/org/apache/commons/io/IOUtils.java",
                    "full name": "src.main.java.org.apache.commons.io.IOUtils.lineIterator"
                },
                {
                    "function name": "lineIterator",
                    "function params": [
                        "input",
                        "charsetName"
                    ],
                    "file name": "IOUtils.java",
                    "file old path": "src/main/java/org/apache/commons/io/IOUtils.java",
                    "file new path": "src/main/java/org/apache/commons/io/IOUtils.java",
                    "full name": "src.main.java.org.apache.commons.io.IOUtils.lineIterator"
                },
                {
                    "function name": "toInputStream",
                    "function params": [
                        "input",
                        "charset"
                    ],
                    "file name": "IOUtils.java",
                    "file old path": "src/main/java/org/apache/commons/io/IOUtils.java",
                    "file new path": "src/main/java/org/apache/commons/io/IOUtils.java",
                    "full name": "src.main.java.org.apache.commons.io.IOUtils.toInputStream"
                },
                {
                    "function name": "copy",
                    "function params": [
                        "input",
                        "output",
                        "outputCharsetName"
                    ],
                    "file name": "IOUtils.java",
                    "file old path": "src/main/java/org/apache/commons/io/IOUtils.java",
                    "file new path": "src/main/java/org/apache/commons/io/IOUtils.java",
                    "full name": "src.main.java.org.apache.commons.io.IOUtils.copy"
                },
                {
                    "function name": "write",
                    "function params": [
                        "data",
                        "output",
                        "charset"
                    ],
                    "file name": "IOUtils.java",
                    "file old path": "src/main/java/org/apache/commons/io/IOUtils.java",
                    "file new path": "src/main/java/org/apache/commons/io/IOUtils.java",
                    "full name": "src.main.java.org.apache.commons.io.IOUtils.write"
                },
                {
                    "function name": "resourceToString",
                    "function params": [
                        "name",
                        "encoding"
                    ],
                    "file name": "IOUtils.java",
                    "file old path": "src/main/java/org/apache/commons/io/IOUtils.java",
                    "file new path": "src/main/java/org/apache/commons/io/IOUtils.java",
                    "full name": "src.main.java.org.apache.commons.io.IOUtils.resourceToString"
                },
                {
                    "function name": "write",
                    "function params": [
                        "data",
                        "output",
                        "charsetName"
                    ],
                    "file name": "IOUtils.java",
                    "file old path": "src/main/java/org/apache/commons/io/IOUtils.java",
                    "file new path": "src/main/java/org/apache/commons/io/IOUtils.java",
                    "full name": "src.main.java.org.apache.commons.io.IOUtils.write"
                },
                {
                    "function name": "toCharArray",
                    "function params": [
                        "is",
                        "charset"
                    ],
                    "file name": "IOUtils.java",
                    "file old path": "src/main/java/org/apache/commons/io/IOUtils.java",
                    "file new path": "src/main/java/org/apache/commons/io/IOUtils.java",
                    "full name": "src.main.java.org.apache.commons.io.IOUtils.toCharArray"
                },
                {
                    "function name": "readLines",
                    "function params": [
                        "input",
                        "charsetName"
                    ],
                    "file name": "IOUtils.java",
                    "file old path": "src/main/java/org/apache/commons/io/IOUtils.java",
                    "file new path": "src/main/java/org/apache/commons/io/IOUtils.java",
                    "full name": "src.main.java.org.apache.commons.io.IOUtils.readLines"
                },
                {
                    "function name": "toByteArray",
                    "function params": [
                        "input",
                        "encoding"
                    ],
                    "file name": "IOUtils.java",
                    "file old path": "src/main/java/org/apache/commons/io/IOUtils.java",
                    "file new path": "src/main/java/org/apache/commons/io/IOUtils.java",
                    "full name": "src.main.java.org.apache.commons.io.IOUtils.toByteArray"
                },
                {
                    "function name": "resourceToString",
                    "function params": [
                        "name",
                        "encoding",
                        "classLoader"
                    ],
                    "file name": "IOUtils.java",
                    "file old path": "src/main/java/org/apache/commons/io/IOUtils.java",
                    "file new path": "src/main/java/org/apache/commons/io/IOUtils.java",
                    "full name": "src.main.java.org.apache.commons.io.IOUtils.resourceToString"
                },
                {
                    "function name": "writeLines",
                    "function params": [
                        "lines",
                        "lineEnding",
                        "output",
                        "charsetName"
                    ],
                    "file name": "IOUtils.java",
                    "file old path": "src/main/java/org/apache/commons/io/IOUtils.java",
                    "file new path": "src/main/java/org/apache/commons/io/IOUtils.java",
                    "full name": "src.main.java.org.apache.commons.io.IOUtils.writeLines"
                },
                {
                    "function name": "resourceToString",
                    "function params": [
                        "name",
                        "charset",
                        "classLoader"
                    ],
                    "file name": "IOUtils.java",
                    "file old path": "src/main/java/org/apache/commons/io/IOUtils.java",
                    "file new path": "src/main/java/org/apache/commons/io/IOUtils.java",
                    "full name": "src.main.java.org.apache.commons.io.IOUtils.resourceToString"
                },
                {
                    "function name": "toInputStream",
                    "function params": [
                        "input",
                        "encoding"
                    ],
                    "file name": "IOUtils.java",
                    "file old path": "src/main/java/org/apache/commons/io/IOUtils.java",
                    "file new path": "src/main/java/org/apache/commons/io/IOUtils.java",
                    "full name": "src.main.java.org.apache.commons.io.IOUtils.toInputStream"
                },
                {
                    "function name": "toByteArray",
                    "function params": [
                        "input",
                        "encoding"
                    ],
                    "file name": "IOUtils.java",
                    "file old path": "src/main/java/org/apache/commons/io/IOUtils.java",
                    "file new path": "src/main/java/org/apache/commons/io/IOUtils.java",
                    "full name": "src.main.java.org.apache.commons.io.IOUtils.toByteArray"
                },
                {
                    "function name": "copy",
                    "function params": [
                        "input",
                        "output",
                        "inputCharsetName"
                    ],
                    "file name": "IOUtils.java",
                    "file old path": "src/main/java/org/apache/commons/io/IOUtils.java",
                    "file new path": "src/main/java/org/apache/commons/io/IOUtils.java",
                    "full name": "src.main.java.org.apache.commons.io.IOUtils.copy"
                },
                {
                    "function name": "toInputStream",
                    "function params": [
                        "input",
                        "charsetName"
                    ],
                    "file name": "IOUtils.java",
                    "file old path": "src/main/java/org/apache/commons/io/IOUtils.java",
                    "file new path": "src/main/java/org/apache/commons/io/IOUtils.java",
                    "full name": "src.main.java.org.apache.commons.io.IOUtils.toInputStream"
                },
                {
                    "function name": "write",
                    "function params": [
                        "data",
                        "output",
                        "encoding"
                    ],
                    "file name": "IOUtils.java",
                    "file old path": "src/main/java/org/apache/commons/io/IOUtils.java",
                    "file new path": "src/main/java/org/apache/commons/io/IOUtils.java",
                    "full name": "src.main.java.org.apache.commons.io.IOUtils.write"
                },
                {
                    "function name": "toCharArray",
                    "function params": [
                        "is",
                        "encoding"
                    ],
                    "file name": "IOUtils.java",
                    "file old path": "src/main/java/org/apache/commons/io/IOUtils.java",
                    "file new path": "src/main/java/org/apache/commons/io/IOUtils.java",
                    "full name": "src.main.java.org.apache.commons.io.IOUtils.toCharArray"
                },
                {
                    "function name": "copy",
                    "function params": [
                        "input",
                        "output",
                        "inputEncoding"
                    ],
                    "file name": "IOUtils.java",
                    "file old path": "src/main/java/org/apache/commons/io/IOUtils.java",
                    "file new path": "src/main/java/org/apache/commons/io/IOUtils.java",
                    "full name": "src.main.java.org.apache.commons.io.IOUtils.copy"
                },
                {
                    "function name": "toString",
                    "function params": [
                        "url",
                        "charsetName"
                    ],
                    "file name": "IOUtils.java",
                    "file old path": "src/main/java/org/apache/commons/io/IOUtils.java",
                    "file new path": "src/main/java/org/apache/commons/io/IOUtils.java",
                    "full name": "src.main.java.org.apache.commons.io.IOUtils.toString"
                },
                {
                    "function name": "write",
                    "function params": [
                        "data",
                        "output",
                        "charset"
                    ],
                    "file name": "IOUtils.java",
                    "file old path": "src/main/java/org/apache/commons/io/IOUtils.java",
                    "file new path": "src/main/java/org/apache/commons/io/IOUtils.java",
                    "full name": "src.main.java.org.apache.commons.io.IOUtils.write"
                },
                {
                    "function name": "toString",
                    "function params": [
                        "input",
                        "encoding"
                    ],
                    "file name": "IOUtils.java",
                    "file old path": "src/main/java/org/apache/commons/io/IOUtils.java",
                    "file new path": "src/main/java/org/apache/commons/io/IOUtils.java",
                    "full name": "src.main.java.org.apache.commons.io.IOUtils.toString"
                },
                {
                    "function name": "write",
                    "function params": [
                        "data",
                        "output",
                        "charsetName"
                    ],
                    "file name": "IOUtils.java",
                    "file old path": "src/main/java/org/apache/commons/io/IOUtils.java",
                    "file new path": "src/main/java/org/apache/commons/io/IOUtils.java",
                    "full name": "src.main.java.org.apache.commons.io.IOUtils.write"
                },
                {
                    "function name": "toInputStream",
                    "function params": [
                        "input",
                        "encoding"
                    ],
                    "file name": "IOUtils.java",
                    "file old path": "src/main/java/org/apache/commons/io/IOUtils.java",
                    "file new path": "src/main/java/org/apache/commons/io/IOUtils.java",
                    "full name": "src.main.java.org.apache.commons.io.IOUtils.toInputStream"
                },
                {
                    "function name": "lineIterator",
                    "function params": [
                        "input",
                        "charset"
                    ],
                    "file name": "IOUtils.java",
                    "file old path": "src/main/java/org/apache/commons/io/IOUtils.java",
                    "file new path": "src/main/java/org/apache/commons/io/IOUtils.java",
                    "full name": "src.main.java.org.apache.commons.io.IOUtils.lineIterator"
                },
                {
                    "function name": "toInputStream",
                    "function params": [
                        "input",
                        "charsetName"
                    ],
                    "file name": "IOUtils.java",
                    "file old path": "src/main/java/org/apache/commons/io/IOUtils.java",
                    "file new path": "src/main/java/org/apache/commons/io/IOUtils.java",
                    "full name": "src.main.java.org.apache.commons.io.IOUtils.toInputStream"
                },
                {
                    "function name": "toString",
                    "function params": [
                        "input",
                        "encoding"
                    ],
                    "file name": "IOUtils.java",
                    "file old path": "src/main/java/org/apache/commons/io/IOUtils.java",
                    "file new path": "src/main/java/org/apache/commons/io/IOUtils.java",
                    "full name": "src.main.java.org.apache.commons.io.IOUtils.toString"
                },
                {
                    "function name": "readLines",
                    "function params": [
                        "input",
                        "encoding"
                    ],
                    "file name": "IOUtils.java",
                    "file old path": "src/main/java/org/apache/commons/io/IOUtils.java",
                    "file new path": "src/main/java/org/apache/commons/io/IOUtils.java",
                    "full name": "src.main.java.org.apache.commons.io.IOUtils.readLines"
                },
                {
                    "function name": "write",
                    "function params": [
                        "data",
                        "output",
                        "encoding"
                    ],
                    "file name": "IOUtils.java",
                    "file old path": "src/main/java/org/apache/commons/io/IOUtils.java",
                    "file new path": "src/main/java/org/apache/commons/io/IOUtils.java",
                    "full name": "src.main.java.org.apache.commons.io.IOUtils.write"
                },
                {
                    "function name": "write",
                    "function params": [
                        "data",
                        "output",
                        "encoding"
                    ],
                    "file name": "IOUtils.java",
                    "file old path": "src/main/java/org/apache/commons/io/IOUtils.java",
                    "file new path": "src/main/java/org/apache/commons/io/IOUtils.java",
                    "full name": "src.main.java.org.apache.commons.io.IOUtils.write"
                },
                {
                    "function name": "writeLines",
                    "function params": [
                        "lines",
                        "lineEnding",
                        "output",
                        "encoding"
                    ],
                    "file name": "IOUtils.java",
                    "file old path": "src/main/java/org/apache/commons/io/IOUtils.java",
                    "file new path": "src/main/java/org/apache/commons/io/IOUtils.java",
                    "full name": "src.main.java.org.apache.commons.io.IOUtils.writeLines"
                },
                {
                    "function name": "resourceToString",
                    "function params": [
                        "name",
                        "charset"
                    ],
                    "file name": "IOUtils.java",
                    "file old path": "src/main/java/org/apache/commons/io/IOUtils.java",
                    "file new path": "src/main/java/org/apache/commons/io/IOUtils.java",
                    "full name": "src.main.java.org.apache.commons.io.IOUtils.resourceToString"
                },
                {
                    "function name": "write",
                    "function params": [
                        "data",
                        "output",
                        "encoding"
                    ],
                    "file name": "IOUtils.java",
                    "file old path": "src/main/java/org/apache/commons/io/IOUtils.java",
                    "file new path": "src/main/java/org/apache/commons/io/IOUtils.java",
                    "full name": "src.main.java.org.apache.commons.io.IOUtils.write"
                },
                {
                    "function name": "write",
                    "function params": [
                        "data",
                        "output",
                        "encoding"
                    ],
                    "file name": "IOUtils.java",
                    "file old path": "src/main/java/org/apache/commons/io/IOUtils.java",
                    "file new path": "src/main/java/org/apache/commons/io/IOUtils.java",
                    "full name": "src.main.java.org.apache.commons.io.IOUtils.write"
                },
                {
                    "function name": "write",
                    "function params": [
                        "data",
                        "output",
                        "charsetName"
                    ],
                    "file name": "IOUtils.java",
                    "file old path": "src/main/java/org/apache/commons/io/IOUtils.java",
                    "file new path": "src/main/java/org/apache/commons/io/IOUtils.java",
                    "full name": "src.main.java.org.apache.commons.io.IOUtils.write"
                },
                {
                    "function name": "copy",
                    "function params": [
                        "input",
                        "output",
                        "outputEncoding"
                    ],
                    "file name": "IOUtils.java",
                    "file old path": "src/main/java/org/apache/commons/io/IOUtils.java",
                    "file new path": "src/main/java/org/apache/commons/io/IOUtils.java",
                    "full name": "src.main.java.org.apache.commons.io.IOUtils.copy"
                },
                {
                    "function name": "write",
                    "function params": [
                        "data",
                        "output",
                        "encoding"
                    ],
                    "file name": "IOUtils.java",
                    "file old path": "src/main/java/org/apache/commons/io/IOUtils.java",
                    "file new path": "src/main/java/org/apache/commons/io/IOUtils.java",
                    "full name": "src.main.java.org.apache.commons.io.IOUtils.write"
                },
                {
                    "function name": "write",
                    "function params": [
                        "data",
                        "output",
                        "charsetName"
                    ],
                    "file name": "IOUtils.java",
                    "file old path": "src/main/java/org/apache/commons/io/IOUtils.java",
                    "file new path": "src/main/java/org/apache/commons/io/IOUtils.java",
                    "full name": "src.main.java.org.apache.commons.io.IOUtils.write"
                },
                {
                    "function name": "copy",
                    "function params": [
                        "input",
                        "output",
                        "inputEncoding"
                    ],
                    "file name": "IOUtils.java",
                    "file old path": "src/main/java/org/apache/commons/io/IOUtils.java",
                    "file new path": "src/main/java/org/apache/commons/io/IOUtils.java",
                    "full name": "src.main.java.org.apache.commons.io.IOUtils.copy"
                },
                {
                    "function name": "toInputStream",
                    "function params": [
                        "input",
                        "charset"
                    ],
                    "file name": "IOUtils.java",
                    "file old path": "src/main/java/org/apache/commons/io/IOUtils.java",
                    "file new path": "src/main/java/org/apache/commons/io/IOUtils.java",
                    "full name": "src.main.java.org.apache.commons.io.IOUtils.toInputStream"
                },
                {
                    "function name": "ReversedLinesFileReader",
                    "function params": [
                        "file",
                        "blockSize",
                        "encoding"
                    ],
                    "file name": "ReversedLinesFileReader.java",
                    "file old path": "src/main/java/org/apache/commons/io/input/ReversedLinesFileReader.java",
                    "file new path": "src/main/java/org/apache/commons/io/input/ReversedLinesFileReader.java",
                    "full name": "src.main.java.org.apache.commons.io.input.ReversedLinesFileReader.ReversedLinesFileReader"
                },
                {
                    "function name": "ReversedLinesFileReader",
                    "function params": [
                        "file",
                        "blockSize",
                        "charsetName"
                    ],
                    "file name": "ReversedLinesFileReader.java",
                    "file old path": "src/main/java/org/apache/commons/io/input/ReversedLinesFileReader.java",
                    "file new path": "src/main/java/org/apache/commons/io/input/ReversedLinesFileReader.java",
                    "full name": "src.main.java.org.apache.commons.io.input.ReversedLinesFileReader.ReversedLinesFileReader"
                },
                {
                    "function name": "FileWriterWithEncoding",
                    "function params": [
                        "fileName",
                        "encoding"
                    ],
                    "file name": "FileWriterWithEncoding.java",
                    "file old path": "src/main/java/org/apache/commons/io/output/FileWriterWithEncoding.java",
                    "file new path": "src/main/java/org/apache/commons/io/output/FileWriterWithEncoding.java",
                    "full name": "src.main.java.org.apache.commons.io.output.FileWriterWithEncoding.FileWriterWithEncoding"
                },
                {
                    "function name": "FileWriterWithEncoding",
                    "function params": [
                        "file",
                        "charsetName"
                    ],
                    "file name": "FileWriterWithEncoding.java",
                    "file old path": "src/main/java/org/apache/commons/io/output/FileWriterWithEncoding.java",
                    "file new path": "src/main/java/org/apache/commons/io/output/FileWriterWithEncoding.java",
                    "full name": "src.main.java.org.apache.commons.io.output.FileWriterWithEncoding.FileWriterWithEncoding"
                },
                {
                    "function name": "FileWriterWithEncoding",
                    "function params": [
                        "fileName",
                        "charsetEncoder",
                        "append"
                    ],
                    "file name": "FileWriterWithEncoding.java",
                    "file old path": "src/main/java/org/apache/commons/io/output/FileWriterWithEncoding.java",
                    "file new path": "src/main/java/org/apache/commons/io/output/FileWriterWithEncoding.java",
                    "full name": "src.main.java.org.apache.commons.io.output.FileWriterWithEncoding.FileWriterWithEncoding"
                },
                {
                    "function name": "FileWriterWithEncoding",
                    "function params": [
                        "fileName",
                        "charsetName",
                        "append"
                    ],
                    "file name": "FileWriterWithEncoding.java",
                    "file old path": "src/main/java/org/apache/commons/io/output/FileWriterWithEncoding.java",
                    "file new path": "src/main/java/org/apache/commons/io/output/FileWriterWithEncoding.java",
                    "full name": "src.main.java.org.apache.commons.io.output.FileWriterWithEncoding.FileWriterWithEncoding"
                },
                {
                    "function name": "FileWriterWithEncoding",
                    "function params": [
                        "file",
                        "encoding"
                    ],
                    "file name": "FileWriterWithEncoding.java",
                    "file old path": "src/main/java/org/apache/commons/io/output/FileWriterWithEncoding.java",
                    "file new path": "src/main/java/org/apache/commons/io/output/FileWriterWithEncoding.java",
                    "full name": "src.main.java.org.apache.commons.io.output.FileWriterWithEncoding.FileWriterWithEncoding"
                },
                {
                    "function name": "FileWriterWithEncoding",
                    "function params": [
                        "file",
                        "charsetName",
                        "append"
                    ],
                    "file name": "FileWriterWithEncoding.java",
                    "file old path": "src/main/java/org/apache/commons/io/output/FileWriterWithEncoding.java",
                    "file new path": "src/main/java/org/apache/commons/io/output/FileWriterWithEncoding.java",
                    "full name": "src.main.java.org.apache.commons.io.output.FileWriterWithEncoding.FileWriterWithEncoding"
                },
                {
                    "function name": "FileWriterWithEncoding",
                    "function params": [
                        "file",
                        "charset"
                    ],
                    "file name": "FileWriterWithEncoding.java",
                    "file old path": "src/main/java/org/apache/commons/io/output/FileWriterWithEncoding.java",
                    "file new path": "src/main/java/org/apache/commons/io/output/FileWriterWithEncoding.java",
                    "full name": "src.main.java.org.apache.commons.io.output.FileWriterWithEncoding.FileWriterWithEncoding"
                },
                {
                    "function name": "FileWriterWithEncoding",
                    "function params": [
                        "fileName",
                        "encoding",
                        "append"
                    ],
                    "file name": "FileWriterWithEncoding.java",
                    "file old path": "src/main/java/org/apache/commons/io/output/FileWriterWithEncoding.java",
                    "file new path": "src/main/java/org/apache/commons/io/output/FileWriterWithEncoding.java",
                    "full name": "src.main.java.org.apache.commons.io.output.FileWriterWithEncoding.FileWriterWithEncoding"
                },
                {
                    "function name": "FileWriterWithEncoding",
                    "function params": [
                        "fileName",
                        "encoding",
                        "append"
                    ],
                    "file name": "FileWriterWithEncoding.java",
                    "file old path": "src/main/java/org/apache/commons/io/output/FileWriterWithEncoding.java",
                    "file new path": "src/main/java/org/apache/commons/io/output/FileWriterWithEncoding.java",
                    "full name": "src.main.java.org.apache.commons.io.output.FileWriterWithEncoding.FileWriterWithEncoding"
                },
                {
                    "function name": "FileWriterWithEncoding",
                    "function params": [
                        "fileName",
                        "charsetName"
                    ],
                    "file name": "FileWriterWithEncoding.java",
                    "file old path": "src/main/java/org/apache/commons/io/output/FileWriterWithEncoding.java",
                    "file new path": "src/main/java/org/apache/commons/io/output/FileWriterWithEncoding.java",
                    "full name": "src.main.java.org.apache.commons.io.output.FileWriterWithEncoding.FileWriterWithEncoding"
                },
                {
                    "function name": "FileWriterWithEncoding",
                    "function params": [
                        "file",
                        "encoding",
                        "append"
                    ],
                    "file name": "FileWriterWithEncoding.java",
                    "file old path": "src/main/java/org/apache/commons/io/output/FileWriterWithEncoding.java",
                    "file new path": "src/main/java/org/apache/commons/io/output/FileWriterWithEncoding.java",
                    "full name": "src.main.java.org.apache.commons.io.output.FileWriterWithEncoding.FileWriterWithEncoding"
                },
                {
                    "function name": "FileWriterWithEncoding",
                    "function params": [
                        "file",
                        "encoding"
                    ],
                    "file name": "FileWriterWithEncoding.java",
                    "file old path": "src/main/java/org/apache/commons/io/output/FileWriterWithEncoding.java",
                    "file new path": "src/main/java/org/apache/commons/io/output/FileWriterWithEncoding.java",
                    "full name": "src.main.java.org.apache.commons.io.output.FileWriterWithEncoding.FileWriterWithEncoding"
                },
                {
                    "function name": "FileWriterWithEncoding",
                    "function params": [
                        "fileName",
                        "encoding"
                    ],
                    "file name": "FileWriterWithEncoding.java",
                    "file old path": "src/main/java/org/apache/commons/io/output/FileWriterWithEncoding.java",
                    "file new path": "src/main/java/org/apache/commons/io/output/FileWriterWithEncoding.java",
                    "full name": "src.main.java.org.apache.commons.io.output.FileWriterWithEncoding.FileWriterWithEncoding"
                },
                {
                    "function name": "FileWriterWithEncoding",
                    "function params": [
                        "file",
                        "charsetEncoder",
                        "append"
                    ],
                    "file name": "FileWriterWithEncoding.java",
                    "file old path": "src/main/java/org/apache/commons/io/output/FileWriterWithEncoding.java",
                    "file new path": "src/main/java/org/apache/commons/io/output/FileWriterWithEncoding.java",
                    "full name": "src.main.java.org.apache.commons.io.output.FileWriterWithEncoding.FileWriterWithEncoding"
                },
                {
                    "function name": "FileWriterWithEncoding",
                    "function params": [
                        "fileName",
                        "encoding",
                        "append"
                    ],
                    "file name": "FileWriterWithEncoding.java",
                    "file old path": "src/main/java/org/apache/commons/io/output/FileWriterWithEncoding.java",
                    "file new path": "src/main/java/org/apache/commons/io/output/FileWriterWithEncoding.java",
                    "full name": "src.main.java.org.apache.commons.io.output.FileWriterWithEncoding.FileWriterWithEncoding"
                },
                {
                    "function name": "FileWriterWithEncoding",
                    "function params": [
                        "fileName",
                        "charset",
                        "append"
                    ],
                    "file name": "FileWriterWithEncoding.java",
                    "file old path": "src/main/java/org/apache/commons/io/output/FileWriterWithEncoding.java",
                    "file new path": "src/main/java/org/apache/commons/io/output/FileWriterWithEncoding.java",
                    "full name": "src.main.java.org.apache.commons.io.output.FileWriterWithEncoding.FileWriterWithEncoding"
                },
                {
                    "function name": "FileWriterWithEncoding",
                    "function params": [
                        "file",
                        "encoding"
                    ],
                    "file name": "FileWriterWithEncoding.java",
                    "file old path": "src/main/java/org/apache/commons/io/output/FileWriterWithEncoding.java",
                    "file new path": "src/main/java/org/apache/commons/io/output/FileWriterWithEncoding.java",
                    "full name": "src.main.java.org.apache.commons.io.output.FileWriterWithEncoding.FileWriterWithEncoding"
                },
                {
                    "function name": "FileWriterWithEncoding",
                    "function params": [
                        "file",
                        "charsetEncoder"
                    ],
                    "file name": "FileWriterWithEncoding.java",
                    "file old path": "src/main/java/org/apache/commons/io/output/FileWriterWithEncoding.java",
                    "file new path": "src/main/java/org/apache/commons/io/output/FileWriterWithEncoding.java",
                    "full name": "src.main.java.org.apache.commons.io.output.FileWriterWithEncoding.FileWriterWithEncoding"
                },
                {
                    "function name": "FileWriterWithEncoding",
                    "function params": [
                        "fileName",
                        "charset"
                    ],
                    "file name": "FileWriterWithEncoding.java",
                    "file old path": "src/main/java/org/apache/commons/io/output/FileWriterWithEncoding.java",
                    "file new path": "src/main/java/org/apache/commons/io/output/FileWriterWithEncoding.java",
                    "full name": "src.main.java.org.apache.commons.io.output.FileWriterWithEncoding.FileWriterWithEncoding"
                },
                {
                    "function name": "FileWriterWithEncoding",
                    "function params": [
                        "file",
                        "encoding",
                        "append"
                    ],
                    "file name": "FileWriterWithEncoding.java",
                    "file old path": "src/main/java/org/apache/commons/io/output/FileWriterWithEncoding.java",
                    "file new path": "src/main/java/org/apache/commons/io/output/FileWriterWithEncoding.java",
                    "full name": "src.main.java.org.apache.commons.io.output.FileWriterWithEncoding.FileWriterWithEncoding"
                },
                {
                    "function name": "LockableFileWriter",
                    "function params": [
                        "file",
                        "encoding",
                        "append",
                        "lockDir"
                    ],
                    "file name": "LockableFileWriter.java",
                    "file old path": "src/main/java/org/apache/commons/io/output/LockableFileWriter.java",
                    "file new path": "src/main/java/org/apache/commons/io/output/LockableFileWriter.java",
                    "full name": "src.main.java.org.apache.commons.io.output.LockableFileWriter.LockableFileWriter"
                },
                {
                    "function name": "LockableFileWriter",
                    "function params": [
                        "file",
                        "charsetName",
                        "append",
                        "lockDir"
                    ],
                    "file name": "LockableFileWriter.java",
                    "file old path": "src/main/java/org/apache/commons/io/output/LockableFileWriter.java",
                    "file new path": "src/main/java/org/apache/commons/io/output/LockableFileWriter.java",
                    "full name": "src.main.java.org.apache.commons.io.output.LockableFileWriter.LockableFileWriter"
                },
                {
                    "function name": "LockableFileWriter",
                    "function params": [
                        "file",
                        "encoding",
                        "append",
                        "lockDir"
                    ],
                    "file name": "LockableFileWriter.java",
                    "file old path": "src/main/java/org/apache/commons/io/output/LockableFileWriter.java",
                    "file new path": "src/main/java/org/apache/commons/io/output/LockableFileWriter.java",
                    "full name": "src.main.java.org.apache.commons.io.output.LockableFileWriter.LockableFileWriter"
                },
                {
                    "function name": "LockableFileWriter",
                    "function params": [
                        "file",
                        "charset"
                    ],
                    "file name": "LockableFileWriter.java",
                    "file old path": "src/main/java/org/apache/commons/io/output/LockableFileWriter.java",
                    "file new path": "src/main/java/org/apache/commons/io/output/LockableFileWriter.java",
                    "full name": "src.main.java.org.apache.commons.io.output.LockableFileWriter.LockableFileWriter"
                },
                {
                    "function name": "LockableFileWriter",
                    "function params": [
                        "file",
                        "charsetName"
                    ],
                    "file name": "LockableFileWriter.java",
                    "file old path": "src/main/java/org/apache/commons/io/output/LockableFileWriter.java",
                    "file new path": "src/main/java/org/apache/commons/io/output/LockableFileWriter.java",
                    "full name": "src.main.java.org.apache.commons.io.output.LockableFileWriter.LockableFileWriter"
                },
                {
                    "function name": "LockableFileWriter",
                    "function params": [
                        "file",
                        "encoding"
                    ],
                    "file name": "LockableFileWriter.java",
                    "file old path": "src/main/java/org/apache/commons/io/output/LockableFileWriter.java",
                    "file new path": "src/main/java/org/apache/commons/io/output/LockableFileWriter.java",
                    "full name": "src.main.java.org.apache.commons.io.output.LockableFileWriter.LockableFileWriter"
                },
                {
                    "function name": "initWriter",
                    "function params": [
                        "file",
                        "encoding",
                        "append"
                    ],
                    "file name": "LockableFileWriter.java",
                    "file old path": "src/main/java/org/apache/commons/io/output/LockableFileWriter.java",
                    "file new path": "src/main/java/org/apache/commons/io/output/LockableFileWriter.java",
                    "full name": "src.main.java.org.apache.commons.io.output.LockableFileWriter.initWriter"
                },
                {
                    "function name": "LockableFileWriter",
                    "function params": [
                        "file",
                        "charset",
                        "append",
                        "lockDir"
                    ],
                    "file name": "LockableFileWriter.java",
                    "file old path": "src/main/java/org/apache/commons/io/output/LockableFileWriter.java",
                    "file new path": "src/main/java/org/apache/commons/io/output/LockableFileWriter.java",
                    "full name": "src.main.java.org.apache.commons.io.output.LockableFileWriter.LockableFileWriter"
                },
                {
                    "function name": "initWriter",
                    "function params": [
                        "file",
                        "charset",
                        "append"
                    ],
                    "file name": "LockableFileWriter.java",
                    "file old path": "src/main/java/org/apache/commons/io/output/LockableFileWriter.java",
                    "file new path": "src/main/java/org/apache/commons/io/output/LockableFileWriter.java",
                    "full name": "src.main.java.org.apache.commons.io.output.LockableFileWriter.initWriter"
                },
                {
                    "function name": "LockableFileWriter",
                    "function params": [
                        "file",
                        "encoding"
                    ],
                    "file name": "LockableFileWriter.java",
                    "file old path": "src/main/java/org/apache/commons/io/output/LockableFileWriter.java",
                    "file new path": "src/main/java/org/apache/commons/io/output/LockableFileWriter.java",
                    "full name": "src.main.java.org.apache.commons.io.output.LockableFileWriter.LockableFileWriter"
                }
            ],
            "files that changed": [
                "src/main/java/org/apache/commons/io/Charsets.java",
                "src/main/java/org/apache/commons/io/FileUtils.java",
                "src/main/java/org/apache/commons/io/IOUtils.java",
                "src/main/java/org/apache/commons/io/input/ReversedLinesFileReader.java",
                "src/main/java/org/apache/commons/io/output/FileWriterWithEncoding.java",
                "src/main/java/org/apache/commons/io/output/LockableFileWriter.java"
            ]
        },
        {
            "bug index": "107",
            "bug id": "IO-96",
            "hexsha": "742c51feeaf75542ab9db6782ad3d2ad506fb871",
            "fix_hash": "11020bc315edd3d7549482382445b8031b5743de",
            "description": "Message to mailing list from Anthony Green\nhttp://www.mail-archive.com/commons-dev@jakarta.apache.org/msg82127.html\n\n-----------------------------------------\nThis support routine from the commons-io project test code assumed that\nFileReader.read(byte[]) would always read the entire file.  There's no\nsuch guarantee, and some tests were failing on GNU Classpath based VMs\nbecause of this.\n\nThanks,\n\nAG\n\n\n\n--- src/test/org/apache/commons/io/testtools/FileBasedTestCase.java~\t2006-07-13 23:44:13.000000000 -0700\n+++ src/test/org/apache/commons/io/testtools/FileBasedTestCase.java\t2006-07-13 23:44:20.000000000 -0700\n@@ -167,18 +171,22 @@\n         throws IOException\n     {\n         Reader ir = new java.io.FileReader( file );\n-        try {\n-            char[] c1 = new char[ c0.length ];\n-            int numRead = ir.read( c1 );\n-            assertTrue( \"Different number of bytes\", numRead == c0.length );\n-            for( int i = 0;\n-                 i < numRead;\n-                 assertTrue( \"Byte \" + i + \" differs (\" + c0[ i ] + \" != \" + c1[ i ] + \")\", \n-                    c0[ i ] == c1[ i ] ), i++\n-                );\n-        } finally {\n-            ir.close();\n-        }\n+\tint count = 0, numRead = 0;\n+\tchar[] c1 = new char[ c0.length ];\n+\ttry {\n+\t  while (count < c0.length)\n+\t    {\n+\t      numRead = ir.read( c1, count, c0.length);\n+\t      for( int i = count;\n+\t\t   i < count+numRead;\n+\t\t   assertTrue( \"Byte \" + i + \" differs (\" + c0[ i ] + \" != \" + c1[ i ] + \")\", \n+\t\t\t       c0[ i ] == c1[ i ] ), i++\n+\t\t   );\n+\t      count += numRead;\n+\t    }\n+\t} finally {\n+\t  ir.close();\n+\t}\n     }\n \n     protected void checkWrite(OutputStream output) throws Exception {",
            "commit number version hash": 443,
            "commit number": 1534,
            "function that changed": [],
            "files that changed": [
                "src/main/java/org/apache/commons/io/FilenameUtils.java"
            ]
        },
        {
            "bug index": "108",
            "bug id": "IO-625",
            "hexsha": "401d17349e7ec52d8fa866c35efd24103f332c29",
            "fix_hash": "d463fa0120fc1041729b7a564b2b5f96de9d6ab6",
            "description": "When srcDir parameter to FileUtils.copyDirectoryToDirectory method is not a directory, exception message contains destDir instead of srcDir.\r\n\r\nRelated issue is, that based on Javadocs one would expect IOException instead of IllegalArgumentException. Changing type of the exception would probably break some clients. Fixing message seems reasonable.",
            "commit number version hash": 1624,
            "commit number": 1533,
            "function that changed": [
                {
                    "function name": "copyDirectoryToDirectory",
                    "function params": [
                        "srcDir",
                        "destDir"
                    ],
                    "file name": "FileUtils.java",
                    "file old path": "src/main/java/org/apache/commons/io/FileUtils.java",
                    "file new path": "src/main/java/org/apache/commons/io/FileUtils.java",
                    "full name": "src.main.java.org.apache.commons.io.FileUtils.copyDirectoryToDirectory"
                },
                {
                    "function name": "copyDirectoryToDirectoryThrowsNullPointerExceptionWithCorrectMessageWhenDstDirIsNull",
                    "function params": [],
                    "file name": "FileUtilsCopyDirectoryToDirectoryTestCase.java",
                    "file old path": null,
                    "file new path": "src/test/java/org/apache/commons/io/FileUtilsCopyDirectoryToDirectoryTestCase.java",
                    "full name": "src.test.java.org.apache.commons.io.FileUtilsCopyDirectoryToDirectoryTestCase.copyDirectoryToDirectoryThrowsNullPointerExceptionWithCorrectMessageWhenDstDirIsNull"
                },
                {
                    "function name": "copyDirectoryToDirectoryThrowsNullPointerExceptionWithCorrectMessageWhenSrcDirIsNull",
                    "function params": [],
                    "file name": "FileUtilsCopyDirectoryToDirectoryTestCase.java",
                    "file old path": null,
                    "file new path": "src/test/java/org/apache/commons/io/FileUtilsCopyDirectoryToDirectoryTestCase.java",
                    "full name": "src.test.java.org.apache.commons.io.FileUtilsCopyDirectoryToDirectoryTestCase.copyDirectoryToDirectoryThrowsNullPointerExceptionWithCorrectMessageWhenSrcDirIsNull"
                },
                {
                    "function name": "assertExceptionTypeAndMessage",
                    "function params": [
                        "srcDir",
                        "destDir",
                        "expectedExceptionType",
                        "expectedMessage"
                    ],
                    "file name": "FileUtilsCopyDirectoryToDirectoryTestCase.java",
                    "file old path": null,
                    "file new path": "src/test/java/org/apache/commons/io/FileUtilsCopyDirectoryToDirectoryTestCase.java",
                    "full name": "src.test.java.org.apache.commons.io.FileUtilsCopyDirectoryToDirectoryTestCase.assertExceptionTypeAndMessage"
                },
                {
                    "function name": "copyDirectoryToDirectoryThrowsIllegalArgumentExceptionWithCorrectMessageWhenDstDirIsNotDirectory",
                    "function params": [],
                    "file name": "FileUtilsCopyDirectoryToDirectoryTestCase.java",
                    "file old path": null,
                    "file new path": "src/test/java/org/apache/commons/io/FileUtilsCopyDirectoryToDirectoryTestCase.java",
                    "full name": "src.test.java.org.apache.commons.io.FileUtilsCopyDirectoryToDirectoryTestCase.copyDirectoryToDirectoryThrowsIllegalArgumentExceptionWithCorrectMessageWhenDstDirIsNotDirectory"
                },
                {
                    "function name": "copyDirectoryToDirectoryThrowsIllegalExceptionWithCorrectMessageWhenSrcDirIsNotDirectory",
                    "function params": [],
                    "file name": "FileUtilsCopyDirectoryToDirectoryTestCase.java",
                    "file old path": null,
                    "file new path": "src/test/java/org/apache/commons/io/FileUtilsCopyDirectoryToDirectoryTestCase.java",
                    "full name": "src.test.java.org.apache.commons.io.FileUtilsCopyDirectoryToDirectoryTestCase.copyDirectoryToDirectoryThrowsIllegalExceptionWithCorrectMessageWhenSrcDirIsNotDirectory"
                }
            ],
            "files that changed": [
                "src/main/java/org/apache/commons/io/FileUtils.java"
            ]
        },
        {
            "bug index": "109",
            "bug id": "IO-93",
            "hexsha": "742c51feeaf75542ab9db6782ad3d2ad506fb871",
            "fix_hash": "58324c1cfb9814b390a8750b0ba97dc5367817a8",
            "description": "Calling the FileSystemUtils.getFreeSpace() method multiple times (~3000) will generate an IOException with the following text: \"Too many open files\". Documentation from Sun says this problem is due to not destroying the java.lang.Process object returned from the System.exec() call.\n\nSome sample code I wrote confirms that calling destroy prevents this error from occurring.",
            "commit number version hash": 443,
            "commit number": 1532,
            "function that changed": [
                {
                    "function name": "isIPv6Address",
                    "function params": [
                        "inet6Address"
                    ],
                    "file name": "FilenameUtils.java",
                    "file old path": "src/main/java/org/apache/commons/io/FilenameUtils.java",
                    "file new path": "src/main/java/org/apache/commons/io/FilenameUtils.java",
                    "full name": "src.main.java.org.apache.commons.io.FilenameUtils.isIPv6Address"
                },
                {
                    "function name": "contentEqualsIgnoreEOL",
                    "function params": [
                        "input1",
                        "input2"
                    ],
                    "file name": "IOUtils.java",
                    "file old path": "src/main/java/org/apache/commons/io/IOUtils.java",
                    "file new path": "src/main/java/org/apache/commons/io/IOUtils.java",
                    "full name": "src.main.java.org.apache.commons.io.IOUtils.contentEqualsIgnoreEOL"
                },
                {
                    "function name": "accept",
                    "function params": [
                        "file"
                    ],
                    "file name": "AgeFileFilter.java",
                    "file old path": "src/main/java/org/apache/commons/io/filefilter/AgeFileFilter.java",
                    "file new path": "src/main/java/org/apache/commons/io/filefilter/AgeFileFilter.java",
                    "full name": "src.main.java.org.apache.commons.io.filefilter.AgeFileFilter.accept"
                },
                {
                    "function name": "accept",
                    "function params": [
                        "file"
                    ],
                    "file name": "SizeFileFilter.java",
                    "file old path": "src/main/java/org/apache/commons/io/filefilter/SizeFileFilter.java",
                    "file new path": "src/main/java/org/apache/commons/io/filefilter/SizeFileFilter.java",
                    "full name": "src.main.java.org.apache.commons.io.filefilter.SizeFileFilter.accept"
                }
            ],
            "files that changed": [
                "src/main/java/org/apache/commons/io/FilenameUtils.java",
                "src/main/java/org/apache/commons/io/IOUtils.java",
                "src/main/java/org/apache/commons/io/filefilter/AgeFileFilter.java",
                "src/main/java/org/apache/commons/io/filefilter/SizeFileFilter.java"
            ]
        },
        {
            "bug index": "110",
            "bug id": "IO-90",
            "hexsha": "742c51feeaf75542ab9db6782ad3d2ad506fb871",
            "fix_hash": "c126bdd5161a103cdd4718552d92e2b9153df70b",
            "description": "When using FileSystemUtils.freeSpaceWindows in an empty share directory, the line containing the free space does not exist which causes an infinite loop (the outerloop doesn't decrease the i index).\n\nIn fact to deal with all possible errors, I propose to test the exitCode of the dir command.\n\nHere is a proposed new code for this function :\n\n    /**\n     * Find free space on the Windows platform using the 'dir' command.\n     *\n     * @param path  the path to get free space for, including the colon\n     * @return the amount of free drive space on the drive\n     * @throws IOException if an error occurs\n     */\n    long freeSpaceWindows(String path) throws IOException {\n        path = FilenameUtils.normalize(path);\n        if (path.length() > 2 && path.charAt(1) == ':') {\n            path = path.substring(0, 2);  // seems to make it work\n        }\n\n        // build and run the 'dir' command\n        String[] cmdAttrbs = new String[] {\"cmd.exe\", \"/C\", \"dir /-c \" + path};\n\n        // read in the output of the command to an ArrayList\n        BufferedReader in = null;\n        String line = null;\n        ArrayList lines = new ArrayList();\n        int errorLevel = 0;\n        \n        try {\n            Process proc = Runtime.getRuntime().exec(cmdAttrbs);\n            in = new BufferedReader(\n                new InputStreamReader(proc.getInputStream()));\n            line = in.readLine();\n            while (line != null) {\n                line = line.toLowerCase().trim();\n                lines.add(line);\n                line = in.readLine();\n            }\n            \n            proc.waitFor();\n            errorLevel = proc.exitValue();\n           \n        } finally {\n            IOUtils.closeQuietly(in);\n        }\n\n        if (lines.size() == 0) {\n            // unknown problem, throw exception\n            throw new IOException(\n                    \"Command line 'dir /-c' did not return any info \" +\n                    \"for command '\" + cmdAttrbs[2] + \"'\");\n        }\n\n        if (errorLevel != 0) {\n            if (errorLevel == 2) {\n                // Empty directory : unable to calculate the freeSpace\n                return Integer.MAX_VALUE; // ???\n            } else {\n                // unknown problem, throw exception\n                throw new IOException(\n                        \"Command line 'dir /-c' error [\" + errorLevel +\n                        \"] for command '\" + cmdAttrbs[2] + \"'\");\n            }\n        }\n        \n        // now iterate over the lines we just read and find the LAST\n        // non-empty line (the free space bytes should be in the last element\n        // of the ArrayList anyway, but this will ensure it works even if it's\n        // not, still assuming it is on the last non-blank line)\n        long bytes = -1;\n        int i = lines.size() - 1;\n        int bytesStart = 0;\n        int bytesEnd = 0;\n        outerLoop: while (i > 0) {\n            line = (String) lines.get(i);\n            if (line.length() > 0) {\n                // found it, so now read from the end of the line to find the\n                // last numeric character on the line, then continue until we\n                // find the first non-numeric character, and everything between\n                // that and the last numeric character inclusive is our free\n                // space bytes count\n                int j = line.length() - 1;\n                innerLoop1: while (j >= 0) {\n                    char c = line.charAt(j);\n                    if (Character.isDigit(c)) {\n                      // found the last numeric character, this is the end of\n                      // the free space bytes count\n                      bytesEnd = j + 1;\n                      break innerLoop1;\n                    }\n                    j--;\n                }\n                innerLoop2: while (j >= 0) {\n                    char c = line.charAt(j);\n                    if (!Character.isDigit(c) && c != ',' && c != '.') {\n                      // found the next non-numeric character, this is the\n                      // beginning of the free space bytes count\n                      bytesStart = j + 1;\n                      break innerLoop2;\n                    }\n                    j--;\n                }\n                break outerLoop;\n            } else {\n                // If the last line is empty we are unable to parse the freeSpace\n                throw new IOException(\n                        \"Command line 'dir /-c' did not return valid info \" +\n                        \"for command '\" + cmdAttrbs[2] + \"'\");\n            }\n        }\n\n        // remove commas and dots in the bytes count\n        StringBuffer buf = new StringBuffer(line.substring(bytesStart, bytesEnd));\n        for (int k = 0; k < buf.length(); k++) {\n            if (buf.charAt(k) == ',' || buf.charAt(k) == '.') {\n                buf.deleteCharAt(k--);\n            }\n        }\n        bytes = Long.parseLong(buf.toString());\n        return bytes;\n    }\n",
            "commit number version hash": 443,
            "commit number": 1531,
            "function that changed": [
                {
                    "function name": "read",
                    "function params": [
                        "array",
                        "offset",
                        "length"
                    ],
                    "file name": "CharSequenceReader.java",
                    "file old path": "src/main/java/org/apache/commons/io/input/CharSequenceReader.java",
                    "file new path": "src/main/java/org/apache/commons/io/input/CharSequenceReader.java",
                    "full name": "src.main.java.org.apache.commons.io.input.CharSequenceReader.read"
                },
                {
                    "function name": "testReadCharArray",
                    "function params": [],
                    "file name": "CharSequenceReaderTest.java",
                    "file old path": "src/test/java/org/apache/commons/io/input/CharSequenceReaderTest.java",
                    "file new path": "src/test/java/org/apache/commons/io/input/CharSequenceReaderTest.java",
                    "full name": "src.test.java.org.apache.commons.io.input.CharSequenceReaderTest.testReadCharArray"
                },
                {
                    "function name": "testReadCharArrayPortion",
                    "function params": [
                        "charSequence"
                    ],
                    "file name": "CharSequenceReaderTest.java",
                    "file old path": "src/test/java/org/apache/commons/io/input/CharSequenceReaderTest.java",
                    "file new path": "src/test/java/org/apache/commons/io/input/CharSequenceReaderTest.java",
                    "full name": "src.test.java.org.apache.commons.io.input.CharSequenceReaderTest.testReadCharArrayPortion"
                },
                {
                    "function name": "testReadCharArray",
                    "function params": [
                        "charSequence"
                    ],
                    "file name": "CharSequenceReaderTest.java",
                    "file old path": "src/test/java/org/apache/commons/io/input/CharSequenceReaderTest.java",
                    "file new path": "src/test/java/org/apache/commons/io/input/CharSequenceReaderTest.java",
                    "full name": "src.test.java.org.apache.commons.io.input.CharSequenceReaderTest.testReadCharArray"
                },
                {
                    "function name": "testRead",
                    "function params": [],
                    "file name": "CharSequenceReaderTest.java",
                    "file old path": "src/test/java/org/apache/commons/io/input/CharSequenceReaderTest.java",
                    "file new path": "src/test/java/org/apache/commons/io/input/CharSequenceReaderTest.java",
                    "full name": "src.test.java.org.apache.commons.io.input.CharSequenceReaderTest.testRead"
                },
                {
                    "function name": "testReadCharArrayPortion",
                    "function params": [],
                    "file name": "CharSequenceReaderTest.java",
                    "file old path": "src/test/java/org/apache/commons/io/input/CharSequenceReaderTest.java",
                    "file new path": "src/test/java/org/apache/commons/io/input/CharSequenceReaderTest.java",
                    "full name": "src.test.java.org.apache.commons.io.input.CharSequenceReaderTest.testReadCharArrayPortion"
                },
                {
                    "function name": "testRead",
                    "function params": [
                        "charSequence"
                    ],
                    "file name": "CharSequenceReaderTest.java",
                    "file old path": "src/test/java/org/apache/commons/io/input/CharSequenceReaderTest.java",
                    "file new path": "src/test/java/org/apache/commons/io/input/CharSequenceReaderTest.java",
                    "full name": "src.test.java.org.apache.commons.io.input.CharSequenceReaderTest.testRead"
                }
            ],
            "files that changed": [
                "src/main/java/org/apache/commons/io/input/CharSequenceReader.java",
                "src/test/java/org/apache/commons/io/input/CharSequenceReaderTest.java"
            ]
        },
        {
            "bug index": "111",
            "bug id": "IO-83",
            "hexsha": "742c51feeaf75542ab9db6782ad3d2ad506fb871",
            "fix_hash": "d15f480dd81b373f6815340c15b7a80490e8272d",
            "description": "Reported via commons-owner@\n--------------------------------------------\n\nFrom: James Urie\nSent: Tuesday, July 11, 2006 8:51 AM\nTo: 'commons-dev-subscribe@jakarta.apache.org'\nSubject: New AIX fix?\n\n\n\nHello,\n\n\n\nI had to change the \"commons-io\" code to allow for usage on AIX 5.3.\nAttached is the file with changes.\n\nThe long and short of the change is that the \"df\" command used in the\nFile System Utils classes requires\n\nA \"P\" to be added to the switch to enable \"POSIX\" capability.\n\n\nJames Urie",
            "commit number version hash": 443,
            "commit number": 1520,
            "function that changed": [
                {
                    "function name": "close",
                    "function params": [],
                    "file name": "CloseShieldOutputStream.java",
                    "file old path": "src/main/java/org/apache/commons/io/output/CloseShieldOutputStream.java",
                    "file new path": "src/main/java/org/apache/commons/io/output/CloseShieldOutputStream.java",
                    "full name": "src.main.java.org.apache.commons.io.output.CloseShieldOutputStream.close"
                },
                {
                    "function name": "close",
                    "function params": [],
                    "file name": "CloseShieldWriter.java",
                    "file old path": null,
                    "file new path": "src/main/java/org/apache/commons/io/output/CloseShieldWriter.java",
                    "full name": "src.main.java.org.apache.commons.io.output.CloseShieldWriter.close"
                },
                {
                    "function name": "CloseShieldWriter",
                    "function params": [
                        "out"
                    ],
                    "file name": "CloseShieldWriter.java",
                    "file old path": null,
                    "file new path": "src/main/java/org/apache/commons/io/output/CloseShieldWriter.java",
                    "full name": "src.main.java.org.apache.commons.io.output.CloseShieldWriter.CloseShieldWriter"
                },
                {
                    "function name": "testClose",
                    "function params": [],
                    "file name": "CloseShieldWriterTest.java",
                    "file old path": null,
                    "file new path": "src/test/java/org/apache/commons/io/output/CloseShieldWriterTest.java",
                    "full name": "src.test.java.org.apache.commons.io.output.CloseShieldWriterTest.testClose"
                },
                {
                    "function name": "setUp",
                    "function params": [],
                    "file name": "CloseShieldWriterTest.java",
                    "file old path": null,
                    "file new path": "src/test/java/org/apache/commons/io/output/CloseShieldWriterTest.java",
                    "full name": "src.test.java.org.apache.commons.io.output.CloseShieldWriterTest.setUp"
                },
                {
                    "function name": "testWrite",
                    "function params": [],
                    "file name": "ClosedOutputStreamTest.java",
                    "file old path": "src/test/java/org/apache/commons/io/output/ClosedOutputStreamTest.java",
                    "file new path": "src/test/java/org/apache/commons/io/output/ClosedOutputStreamTest.java",
                    "full name": "src.test.java.org.apache.commons.io.output.ClosedOutputStreamTest.testWrite"
                }
            ],
            "files that changed": [
                "src/main/java/org/apache/commons/io/output/CloseShieldOutputStream.java",
                "src/test/java/org/apache/commons/io/output/ClosedOutputStreamTest.java"
            ]
        },
        {
            "bug index": "112",
            "bug id": "IO-84",
            "hexsha": "742c51feeaf75542ab9db6782ad3d2ad506fb871",
            "fix_hash": "3816c572bc1dea6d2661a4c86082a4953526c059",
            "description": "java int.MAX_VALUE is 2 GB. Classes that handle streams larger than 2 GB will behave incorrectly.\n\nFor example, see \nhttp://svn.apache.org/viewvc/jakarta/commons/proper/io/trunk/src/java/org/apache/commons/io/IOUtils.java?view=markup\nMethod: int copy(InputStream input, OutputStream output).\n\nThe correct method would be: long copy(InputStream input, OutputStream output).\n\nThis issue may affect many classes and routines.",
            "commit number version hash": 443,
            "commit number": 1500,
            "function that changed": [
                {
                    "function name": "close",
                    "function params": [],
                    "file name": "CloseShieldInputStream.java",
                    "file old path": "src/main/java/org/apache/commons/io/input/CloseShieldInputStream.java",
                    "file new path": "src/main/java/org/apache/commons/io/input/CloseShieldInputStream.java",
                    "full name": "src.main.java.org.apache.commons.io.input.CloseShieldInputStream.close"
                },
                {
                    "function name": "CloseShieldReader",
                    "function params": [
                        "in"
                    ],
                    "file name": "CloseShieldReader.java",
                    "file old path": null,
                    "file new path": "src/main/java/org/apache/commons/io/input/CloseShieldReader.java",
                    "full name": "src.main.java.org.apache.commons.io.input.CloseShieldReader.CloseShieldReader"
                },
                {
                    "function name": "close",
                    "function params": [],
                    "file name": "CloseShieldReader.java",
                    "file old path": null,
                    "file new path": "src/main/java/org/apache/commons/io/input/CloseShieldReader.java",
                    "full name": "src.main.java.org.apache.commons.io.input.CloseShieldReader.close"
                },
                {
                    "function name": "close",
                    "function params": [],
                    "file name": "ClosedReader.java",
                    "file old path": null,
                    "file new path": "src/main/java/org/apache/commons/io/input/ClosedReader.java",
                    "full name": "src.main.java.org.apache.commons.io.input.ClosedReader.close"
                },
                {
                    "function name": "read",
                    "function params": [
                        "cbuf",
                        "off",
                        "len"
                    ],
                    "file name": "ClosedReader.java",
                    "file old path": null,
                    "file new path": "src/main/java/org/apache/commons/io/input/ClosedReader.java",
                    "full name": "src.main.java.org.apache.commons.io.input.ClosedReader.read"
                },
                {
                    "function name": "setUp",
                    "function params": [],
                    "file name": "CloseShieldReaderTest.java",
                    "file old path": null,
                    "file new path": "src/test/java/org/apache/commons/io/input/CloseShieldReaderTest.java",
                    "full name": "src.test.java.org.apache.commons.io.input.CloseShieldReaderTest.setUp"
                },
                {
                    "function name": "testClose",
                    "function params": [],
                    "file name": "CloseShieldReaderTest.java",
                    "file old path": null,
                    "file new path": "src/test/java/org/apache/commons/io/input/CloseShieldReaderTest.java",
                    "full name": "src.test.java.org.apache.commons.io.input.CloseShieldReaderTest.testClose"
                },
                {
                    "function name": "testRead",
                    "function params": [],
                    "file name": "ClosedReaderTest.java",
                    "file old path": null,
                    "file new path": "src/test/java/org/apache/commons/io/input/ClosedReaderTest.java",
                    "full name": "src.test.java.org.apache.commons.io.input.ClosedReaderTest.testRead"
                }
            ],
            "files that changed": [
                "src/main/java/org/apache/commons/io/input/CloseShieldInputStream.java"
            ]
        },
        {
            "bug index": "113",
            "bug id": "IO-13",
            "hexsha": "742c51feeaf75542ab9db6782ad3d2ad506fb871",
            "fix_hash": "1de4a966ce72393f86b409725371da074697ab8a",
            "description": "If the URL passed to the FileUtils.toFile( URL ) method has been encoded, using\nthe numeric escapes ( e.g., space => %20 ) then the returned File object cannot\nbe used to access the file on disk, as the path is wrong. \n\nOne way this can occur is when the URL is returned from\nClassLoader.getResource(), and the path to the resource contains spaces. Suppose\nthe following code is run from a directory containing a space (say, /tmp/with\nspace/ or d:\\temp\\with space\\):\n\npublic static  void main( String[] args )\n    throws Exception\n{\n    System.out.println( System.getProperty( \"java.version\" ) );\n\n    URL u = file.class.getResource( \"t\" );\n    System.out.println( u.getFile() );\n\n    File f = FileUtils.toFile( u );\n    System.out.println( f );\n    System.out.println( f.canRead() );\n}\n\nLinux:\n1.4.1\n/tmp/with%20space/t\n/tmp/with%20space/t\nfalse\n\nWindows:\n1.4.1_06\n/D:/temp/with%20space/t\nD:\\temp\\with%20space\\t\nfalse\n\nTested on 1.4.1, 1.4.2 and 1.5.0.",
            "commit number version hash": 443,
            "commit number": 1493,
            "function that changed": [],
            "files that changed": [
                "src/main/java/org/apache/commons/io/FileUtils.java"
            ]
        },
        {
            "bug index": "114",
            "bug id": "IO-578",
            "hexsha": "401d17349e7ec52d8fa866c35efd24103f332c29",
            "fix_hash": "95c310904e83b70e534719249ff017cf6ac1a29e",
            "description": "It's not currently possible to use {{ReversedLinesFileReader}} with a non-default file system like Jimfs. The file would first have to be copied to the default file system. Non-default file systems can be supported by\u00a0preferring {{java.nio.file.Path}}\u00a0and {{java.nio.channels.SeekableByteChannel}}\u00a0to\u00a0{{java.io.File}}\u00a0and {{java.io.RandomAccessFile}}.",
            "commit number version hash": 1624,
            "commit number": 1480,
            "function that changed": [
                {
                    "function name": "FilePart",
                    "function params": [
                        "no",
                        "length",
                        "leftOverOfLastFilePart"
                    ],
                    "file name": "ReversedLinesFileReader.java",
                    "file old path": "src/main/java/org/apache/commons/io/input/ReversedLinesFileReader.java",
                    "file new path": "src/main/java/org/apache/commons/io/input/ReversedLinesFileReader.java",
                    "full name": "src.main.java.org.apache.commons.io.input.ReversedLinesFileReader.FilePart"
                },
                {
                    "function name": "ReversedLinesFileReader",
                    "function params": [
                        "file",
                        "blockSize",
                        "encoding"
                    ],
                    "file name": "ReversedLinesFileReader.java",
                    "file old path": "src/main/java/org/apache/commons/io/input/ReversedLinesFileReader.java",
                    "file new path": "src/main/java/org/apache/commons/io/input/ReversedLinesFileReader.java",
                    "full name": "src.main.java.org.apache.commons.io.input.ReversedLinesFileReader.ReversedLinesFileReader"
                },
                {
                    "function name": "ReversedLinesFileReader",
                    "function params": [
                        "file",
                        "blockSize",
                        "encoding"
                    ],
                    "file name": "ReversedLinesFileReader.java",
                    "file old path": "src/main/java/org/apache/commons/io/input/ReversedLinesFileReader.java",
                    "file new path": "src/main/java/org/apache/commons/io/input/ReversedLinesFileReader.java",
                    "full name": "src.main.java.org.apache.commons.io.input.ReversedLinesFileReader.ReversedLinesFileReader"
                },
                {
                    "function name": "close",
                    "function params": [],
                    "file name": "ReversedLinesFileReader.java",
                    "file old path": "src/main/java/org/apache/commons/io/input/ReversedLinesFileReader.java",
                    "file new path": "src/main/java/org/apache/commons/io/input/ReversedLinesFileReader.java",
                    "full name": "src.main.java.org.apache.commons.io.input.ReversedLinesFileReader.close"
                },
                {
                    "function name": "ReversedLinesFileReader",
                    "function params": [
                        "file",
                        "charset"
                    ],
                    "file name": "ReversedLinesFileReader.java",
                    "file old path": "src/main/java/org/apache/commons/io/input/ReversedLinesFileReader.java",
                    "file new path": "src/main/java/org/apache/commons/io/input/ReversedLinesFileReader.java",
                    "full name": "src.main.java.org.apache.commons.io.input.ReversedLinesFileReader.ReversedLinesFileReader"
                },
                {
                    "function name": "ReversedLinesFileReader",
                    "function params": [
                        "file",
                        "blockSize",
                        "encoding"
                    ],
                    "file name": "ReversedLinesFileReader.java",
                    "file old path": "src/main/java/org/apache/commons/io/input/ReversedLinesFileReader.java",
                    "file new path": "src/main/java/org/apache/commons/io/input/ReversedLinesFileReader.java",
                    "full name": "src.main.java.org.apache.commons.io.input.ReversedLinesFileReader.ReversedLinesFileReader"
                },
                {
                    "function name": "ReversedLinesFileReader",
                    "function params": [
                        "file",
                        "charset"
                    ],
                    "file name": "ReversedLinesFileReader.java",
                    "file old path": "src/main/java/org/apache/commons/io/input/ReversedLinesFileReader.java",
                    "file new path": "src/main/java/org/apache/commons/io/input/ReversedLinesFileReader.java",
                    "full name": "src.main.java.org.apache.commons.io.input.ReversedLinesFileReader.ReversedLinesFileReader"
                },
                {
                    "function name": "ReversedLinesFileReader",
                    "function params": [
                        "file",
                        "blockSize",
                        "encoding"
                    ],
                    "file name": "ReversedLinesFileReader.java",
                    "file old path": "src/main/java/org/apache/commons/io/input/ReversedLinesFileReader.java",
                    "file new path": "src/main/java/org/apache/commons/io/input/ReversedLinesFileReader.java",
                    "full name": "src.main.java.org.apache.commons.io.input.ReversedLinesFileReader.ReversedLinesFileReader"
                },
                {
                    "function name": "prepareFile",
                    "function params": [],
                    "file name": "ReversedLinesFileReaderTestParamFile.java",
                    "file old path": "src/test/java/org/apache/commons/io/input/ReversedLinesFileReaderTestParamFile.java",
                    "file new path": "src/test/java/org/apache/commons/io/input/ReversedLinesFileReaderTestParamFile.java",
                    "full name": "src.test.java.org.apache.commons.io.input.ReversedLinesFileReaderTestParamFile.prepareFile"
                },
                {
                    "function name": "ReversedLinesFileReaderTestParamFile",
                    "function params": [
                        "fileName",
                        "encoding",
                        "buffsize"
                    ],
                    "file name": "ReversedLinesFileReaderTestParamFile.java",
                    "file old path": "src/test/java/org/apache/commons/io/input/ReversedLinesFileReaderTestParamFile.java",
                    "file new path": "src/test/java/org/apache/commons/io/input/ReversedLinesFileReaderTestParamFile.java",
                    "full name": "src.test.java.org.apache.commons.io.input.ReversedLinesFileReaderTestParamFile.ReversedLinesFileReaderTestParamFile"
                },
                {
                    "function name": "testDataIntegrityWithBufferedReader",
                    "function params": [],
                    "file name": "ReversedLinesFileReaderTestParamFile.java",
                    "file old path": "src/test/java/org/apache/commons/io/input/ReversedLinesFileReaderTestParamFile.java",
                    "file new path": "src/test/java/org/apache/commons/io/input/ReversedLinesFileReaderTestParamFile.java",
                    "full name": "src.test.java.org.apache.commons.io.input.ReversedLinesFileReaderTestParamFile.testDataIntegrityWithBufferedReader"
                },
                {
                    "function name": "parameters",
                    "function params": [],
                    "file name": "ReversedLinesFileReaderTestParamFile.java",
                    "file old path": "src/test/java/org/apache/commons/io/input/ReversedLinesFileReaderTestParamFile.java",
                    "file new path": "src/test/java/org/apache/commons/io/input/ReversedLinesFileReaderTestParamFile.java",
                    "full name": "src.test.java.org.apache.commons.io.input.ReversedLinesFileReaderTestParamFile.parameters"
                },
                {
                    "function name": "ReversedLinesFileReaderTestParamFile",
                    "function params": [
                        "fileName",
                        "encoding",
                        "blockSize",
                        "useNonDefaultFileSystem"
                    ],
                    "file name": "ReversedLinesFileReaderTestParamFile.java",
                    "file old path": "src/test/java/org/apache/commons/io/input/ReversedLinesFileReaderTestParamFile.java",
                    "file new path": "src/test/java/org/apache/commons/io/input/ReversedLinesFileReaderTestParamFile.java",
                    "full name": "src.test.java.org.apache.commons.io.input.ReversedLinesFileReaderTestParamFile.ReversedLinesFileReaderTestParamFile"
                },
                {
                    "function name": "releaseResources",
                    "function params": [],
                    "file name": "ReversedLinesFileReaderTestParamFile.java",
                    "file old path": "src/test/java/org/apache/commons/io/input/ReversedLinesFileReaderTestParamFile.java",
                    "file new path": "src/test/java/org/apache/commons/io/input/ReversedLinesFileReaderTestParamFile.java",
                    "full name": "src.test.java.org.apache.commons.io.input.ReversedLinesFileReaderTestParamFile.releaseResources"
                }
            ],
            "files that changed": [
                "src/main/java/org/apache/commons/io/input/ReversedLinesFileReader.java",
                "src/test/java/org/apache/commons/io/input/ReversedLinesFileReaderTestParamFile.java"
            ]
        },
        {
            "bug index": "115",
            "bug id": "IO-5",
            "hexsha": "742c51feeaf75542ab9db6782ad3d2ad506fb871",
            "fix_hash": "30f81c47f7ea0e9f743e08e73f48c0cfcfb746ff",
            "description": null,
            "commit number version hash": 443,
            "commit number": 1465,
            "function that changed": [],
            "files that changed": [
                "src/main/java/org/apache/commons/io/DirectoryWalker.java"
            ]
        },
        {
            "bug index": "117",
            "bug id": "IO-582",
            "hexsha": "401d17349e7ec52d8fa866c35efd24103f332c29",
            "fix_hash": "7b813b674adc6c94a6c9a19524913c07b7d8bc9c",
            "description": "Hi,\r\n\r\nAccording with the documentation of `ObservableInputStream` and `ObservableInputStream.Observer`, it should be possible to use those classes as part of the `commons-io` utilities. However, `ObservableInputStream.Observer`'s methods are package private and can't be\u00a0extended outside the project's source code.\r\n\r\nMy suggestion is to make\u00a0`ObservableInputStream.Observer`'s methods protected.\r\n\r\nI'm happy to open a PR for this.\r\n\r\nThank you\r\n\r\n\u00a0",
            "commit number version hash": 1624,
            "commit number": 1452,
            "function that changed": [
                {
                    "function name": "Observer",
                    "function params": [],
                    "file name": "ObservableInputStream.java",
                    "file old path": "src/main/java/org/apache/commons/io/input/ObservableInputStream.java",
                    "file new path": "src/main/java/org/apache/commons/io/input/ObservableInputStream.java",
                    "full name": "src.main.java.org.apache.commons.io.input.ObservableInputStream.Observer"
                },
                {
                    "function name": "Observer",
                    "function params": [
                        "pByte"
                    ],
                    "file name": "ObservableInputStream.java",
                    "file old path": "src/main/java/org/apache/commons/io/input/ObservableInputStream.java",
                    "file new path": "src/main/java/org/apache/commons/io/input/ObservableInputStream.java",
                    "full name": "src.main.java.org.apache.commons.io.input.ObservableInputStream.Observer"
                },
                {
                    "function name": "Observer",
                    "function params": [],
                    "file name": "ObservableInputStream.java",
                    "file old path": "src/main/java/org/apache/commons/io/input/ObservableInputStream.java",
                    "file new path": "src/main/java/org/apache/commons/io/input/ObservableInputStream.java",
                    "full name": "src.main.java.org.apache.commons.io.input.ObservableInputStream.Observer"
                },
                {
                    "function name": "Observer",
                    "function params": [
                        "pBuffer",
                        "pOffset",
                        "pLength"
                    ],
                    "file name": "ObservableInputStream.java",
                    "file old path": "src/main/java/org/apache/commons/io/input/ObservableInputStream.java",
                    "file new path": "src/main/java/org/apache/commons/io/input/ObservableInputStream.java",
                    "full name": "src.main.java.org.apache.commons.io.input.ObservableInputStream.Observer"
                },
                {
                    "function name": "Observer",
                    "function params": [
                        "pException"
                    ],
                    "file name": "ObservableInputStream.java",
                    "file old path": "src/main/java/org/apache/commons/io/input/ObservableInputStream.java",
                    "file new path": "src/main/java/org/apache/commons/io/input/ObservableInputStream.java",
                    "full name": "src.main.java.org.apache.commons.io.input.ObservableInputStream.Observer"
                }
            ],
            "files that changed": [
                "src/main/java/org/apache/commons/io/input/MessageDigestCalculatingInputStream.java",
                "src/main/java/org/apache/commons/io/input/ObservableInputStream.java",
                "src/test/java/org/apache/commons/io/input/ObservableInputStreamTest.java"
            ]
        },
        {
            "bug index": "118",
            "bug id": "IO-554",
            "hexsha": "401d17349e7ec52d8fa866c35efd24103f332c29",
            "fix_hash": "c6b8a383de96cd0a8e94037a04510f162e4bbc68",
            "description": "In 2.6 this method is closing the input stream, while the javadoc states the opposite.\r\nThe correct behavior is to leave the stream open, as stated in the javadoc.\r\n\r\nI assigned a high priority because this incorrect behavior breaks existing code, especially when used in combination with ZipInputStream.\r\n\r\n{code:java}\r\n/**\r\n * Copies bytes from an {@link InputStream} <code>source</code> to a file\r\n * <code>destination</code>. The directories up to <code>destination</code>\r\n * will be created if they don't already exist. <code>destination</code>\r\n * will be overwritten if it already exists.\r\n * The {@code source} stream is left open, e.g. for use with {@link java.util.zip.ZipInputStream ZipInputStream}.\r\n * See {@link #copyInputStreamToFile(InputStream, File)} for a method that closes the input stream.\r\n *\r\n * @param source      the <code>InputStream</code> to copy bytes from, must not be {@code null}\r\n * @param destination the non-directory <code>File</code> to write bytes to\r\n *                    (possibly overwriting), must not be {@code null}\r\n * @throws IOException if <code>destination</code> is a directory\r\n * @throws IOException if <code>destination</code> cannot be written\r\n * @throws IOException if <code>destination</code> needs creating but can't be\r\n * @throws IOException if an IO error occurs during copying\r\n * @since 2.5\r\n */\r\npublic static void copyToFile(final InputStream source, final File destination) throws IOException {\r\n\ttry (InputStream in = source;\r\n\t\t OutputStream out = openOutputStream(destination)) {\r\n\t\tIOUtils.copy(in, out);\r\n\t}\r\n}\r\n{code}\r\n\r\ninstead it should be:\r\n\r\n{code:java}\r\npublic static void copyToFile(final InputStream source, final File destination) throws IOException {\r\n\ttry (OutputStream out = openOutputStream(destination)) {\r\n\t\tIOUtils.copy(source, out);\r\n\t}\r\n}{code}\r\n\r\n",
            "commit number version hash": 1624,
            "commit number": 1447,
            "function that changed": [
                {
                    "function name": "copyToFile",
                    "function params": [
                        "source",
                        "destination"
                    ],
                    "file name": "FileUtils.java",
                    "file old path": "src/main/java/org/apache/commons/io/FileUtils.java",
                    "file new path": "src/main/java/org/apache/commons/io/FileUtils.java",
                    "full name": "src.main.java.org.apache.commons.io.FileUtils.copyToFile"
                },
                {
                    "function name": "CheckingInputStream",
                    "function params": [],
                    "file name": "FileUtilsCopyToFileTestCase.java",
                    "file old path": null,
                    "file new path": "src/test/java/org/apache/commons/io/FileUtilsCopyToFileTestCase.java",
                    "full name": "src.test.java.org.apache.commons.io.FileUtilsCopyToFileTestCase.CheckingInputStream"
                },
                {
                    "function name": "setUp",
                    "function params": [],
                    "file name": "FileUtilsCopyToFileTestCase.java",
                    "file old path": null,
                    "file new path": "src/test/java/org/apache/commons/io/FileUtilsCopyToFileTestCase.java",
                    "full name": "src.test.java.org.apache.commons.io.FileUtilsCopyToFileTestCase.setUp"
                },
                {
                    "function name": "testCopyToFile",
                    "function params": [],
                    "file name": "FileUtilsCopyToFileTestCase.java",
                    "file old path": null,
                    "file new path": "src/test/java/org/apache/commons/io/FileUtilsCopyToFileTestCase.java",
                    "full name": "src.test.java.org.apache.commons.io.FileUtilsCopyToFileTestCase.testCopyToFile"
                },
                {
                    "function name": "CheckingInputStream",
                    "function params": [],
                    "file name": "FileUtilsCopyToFileTestCase.java",
                    "file old path": null,
                    "file new path": "src/test/java/org/apache/commons/io/FileUtilsCopyToFileTestCase.java",
                    "full name": "src.test.java.org.apache.commons.io.FileUtilsCopyToFileTestCase.CheckingInputStream"
                },
                {
                    "function name": "CheckingInputStream",
                    "function params": [
                        "data"
                    ],
                    "file name": "FileUtilsCopyToFileTestCase.java",
                    "file old path": null,
                    "file new path": "src/test/java/org/apache/commons/io/FileUtilsCopyToFileTestCase.java",
                    "full name": "src.test.java.org.apache.commons.io.FileUtilsCopyToFileTestCase.CheckingInputStream"
                },
                {
                    "function name": "getTestDirectory",
                    "function params": [],
                    "file name": "FileUtilsCopyToFileTestCase.java",
                    "file old path": null,
                    "file new path": "src/test/java/org/apache/commons/io/FileUtilsCopyToFileTestCase.java",
                    "full name": "src.test.java.org.apache.commons.io.FileUtilsCopyToFileTestCase.getTestDirectory"
                },
                {
                    "function name": "testCopyInputStreamToFile",
                    "function params": [],
                    "file name": "FileUtilsCopyToFileTestCase.java",
                    "file old path": null,
                    "file new path": "src/test/java/org/apache/commons/io/FileUtilsCopyToFileTestCase.java",
                    "full name": "src.test.java.org.apache.commons.io.FileUtilsCopyToFileTestCase.testCopyInputStreamToFile"
                }
            ],
            "files that changed": [
                "src/main/java/org/apache/commons/io/FileUtils.java"
            ]
        },
        {
            "bug index": "119",
            "bug id": "IO-559",
            "hexsha": "401d17349e7ec52d8fa866c35efd24103f332c29",
            "fix_hash": "2736b6fe0b3fa22ec8e2b4184897ecadb021fc78",
            "description": "{{FilenameUtils.normalize}} will accept broken file names as UNC path even if their hostname part doesn't match the syntax of a proper hostname. Using certain hostnames like \".\" this may lead to strange side effects.\r\n\r\nMost likely the best fix will be to make {{getPrefixLength}} verify the hostname part of a suspected UNC path and return a value of {{NOT_FOUND}} if it is not a valid hostname - much like it does for triple slashes.",
            "commit number version hash": 1624,
            "commit number": 1436,
            "function that changed": [
                {
                    "function name": "isIPv4Address",
                    "function params": [
                        "name"
                    ],
                    "file name": "FilenameUtils.java",
                    "file old path": "src/main/java/org/apache/commons/io/FilenameUtils.java",
                    "file new path": "src/main/java/org/apache/commons/io/FilenameUtils.java",
                    "full name": "src.main.java.org.apache.commons.io.FilenameUtils.isIPv4Address"
                },
                {
                    "function name": "getPrefixLength",
                    "function params": [
                        "fileName"
                    ],
                    "file name": "FilenameUtils.java",
                    "file old path": "src/main/java/org/apache/commons/io/FilenameUtils.java",
                    "file new path": "src/main/java/org/apache/commons/io/FilenameUtils.java",
                    "full name": "src.main.java.org.apache.commons.io.FilenameUtils.getPrefixLength"
                },
                {
                    "function name": "isValidHostName",
                    "function params": [
                        "name"
                    ],
                    "file name": "FilenameUtils.java",
                    "file old path": "src/main/java/org/apache/commons/io/FilenameUtils.java",
                    "file new path": "src/main/java/org/apache/commons/io/FilenameUtils.java",
                    "full name": "src.main.java.org.apache.commons.io.FilenameUtils.isValidHostName"
                },
                {
                    "function name": "isRFC3986HostName",
                    "function params": [
                        "name"
                    ],
                    "file name": "FilenameUtils.java",
                    "file old path": "src/main/java/org/apache/commons/io/FilenameUtils.java",
                    "file new path": "src/main/java/org/apache/commons/io/FilenameUtils.java",
                    "full name": "src.main.java.org.apache.commons.io.FilenameUtils.isRFC3986HostName"
                },
                {
                    "function name": "isIPv6Address",
                    "function params": [
                        "inet6Address"
                    ],
                    "file name": "FilenameUtils.java",
                    "file old path": "src/main/java/org/apache/commons/io/FilenameUtils.java",
                    "file new path": "src/main/java/org/apache/commons/io/FilenameUtils.java",
                    "full name": "src.main.java.org.apache.commons.io.FilenameUtils.isIPv6Address"
                },
                {
                    "function name": "testNormalize",
                    "function params": [],
                    "file name": "FilenameUtilsTestCase.java",
                    "file old path": "src/test/java/org/apache/commons/io/FilenameUtilsTestCase.java",
                    "file new path": "src/test/java/org/apache/commons/io/FilenameUtilsTestCase.java",
                    "full name": "src.test.java.org.apache.commons.io.FilenameUtilsTestCase.testNormalize"
                },
                {
                    "function name": "testGetPrefixLength",
                    "function params": [],
                    "file name": "FilenameUtilsTestCase.java",
                    "file old path": "src/test/java/org/apache/commons/io/FilenameUtilsTestCase.java",
                    "file new path": "src/test/java/org/apache/commons/io/FilenameUtilsTestCase.java",
                    "full name": "src.test.java.org.apache.commons.io.FilenameUtilsTestCase.testGetPrefixLength"
                }
            ],
            "files that changed": [
                "src/main/java/org/apache/commons/io/FilenameUtils.java",
                "src/test/java/org/apache/commons/io/FilenameUtilsTestCase.java"
            ]
        },
        {
            "bug index": "120",
            "bug id": "IO-535",
            "hexsha": "401d17349e7ec52d8fa866c35efd24103f332c29",
            "fix_hash": "a4705cc3c310ffb422336b319891f63eef021f1c",
            "description": "The thread in FileAlterationMonitor wasn't stopped by the `stop(int)` method, which forbid application to shutdown until all `Thread` are exited (if FileAlterationMonitor is part of a DI managed component).\n\nThis behavior conflict with the method javadoc `@param stopInterval the amount of time in milliseconds to wait for the thread to finish.`\n\nh5. Simple example to understand\n\nBad behavior\n{code:java}\n    Thread t = new Thread(() -> {\n        try {\n            Thread.sleep(500000);\n        } catch (final InterruptedException e) {\n        }\n    });\n    t.start();\n    t.join(50);\n   // Ok, we reach this point until 500000ms are elapsed, but the thread is still alive.\n   //   because Thread#join(int) does not kill the thread. And the thread remains alive.\n{code}\n\nGood behavior\n{code:java}\n    Thread t = new Thread(() -> {\n        try {\n            Thread.sleep(500000);\n        } catch (final InterruptedException e) {\n        }\n    });\n    t.start();\n    t.join(50);\n    t.interupt();\n   // Thread is exited\n{code}\n\nIn this case, we waited the given time BEFORE exiting the `Thread`, as described in the javadoc, and the `Thread` is now finished and killed.",
            "commit number version hash": 1624,
            "commit number": 1433,
            "function that changed": [
                {
                    "function name": "stop",
                    "function params": [
                        "stopInterval"
                    ],
                    "file name": "FileAlterationMonitor.java",
                    "file old path": "src/main/java/org/apache/commons/io/monitor/FileAlterationMonitor.java",
                    "file new path": "src/main/java/org/apache/commons/io/monitor/FileAlterationMonitor.java",
                    "full name": "src.main.java.org.apache.commons.io.monitor.FileAlterationMonitor.stop"
                },
                {
                    "function name": "testStopWhileWaitingForNextInterval",
                    "function params": [],
                    "file name": "FileAlterationMonitorTestCase.java",
                    "file old path": "src/test/java/org/apache/commons/io/monitor/FileAlterationMonitorTestCase.java",
                    "file new path": "src/test/java/org/apache/commons/io/monitor/FileAlterationMonitorTestCase.java",
                    "full name": "src.test.java.org.apache.commons.io.monitor.FileAlterationMonitorTestCase.testStopWhileWaitingForNextInterval"
                }
            ],
            "files that changed": [
                "src/main/java/org/apache/commons/io/monitor/FileAlterationMonitor.java",
                "src/test/java/org/apache/commons/io/monitor/FileAlterationMonitorTestCase.java"
            ]
        },
        {
            "bug index": "121",
            "bug id": "IO-8",
            "hexsha": "742c51feeaf75542ab9db6782ad3d2ad506fb871",
            "fix_hash": "a653a4487774f57a7aff2c9dc1fe40b9b221cb6b",
            "description": "The bug is described by a one-line code      \n\nFileUtils.copyFile(new File(\"c:/hello.txt\"), new File(\"c:/hello.txt\"));\n\nTry run it and check hello.txt size before and after: you will find\nthat the file has been razed to 0 bytes.\n\nIt should be illegal to copy a file with the same path as the destination,\nor better, with the same getCanonicalPath(), so I suggest the following \nenhancement:\n\n------------ in FileUtils.java -------------\n\n\n\n        //make sure we can write to destination\n        if (destination.exists() && !destination.canWrite()) {\n            String message =\n                \"Unable to open file \" + destination + \" for writing.\";\n            throw new IOException(message);\n        }\n        \n        //makes sure it is not the same file        \n        if(source.getCanonicalPath().equals(destination.getCanonicalPath())) {\n            String message =\n                \"Unable to write file \" + source + \" on itself.\";\n            throw new IOException(message);\n            \n        }\n\n-- end --\nthis code should be safe regarding path and canonical path: you\nare querying OS after existence test, and anyway you are sure\nthat there is a source file and it has a canonical path.\n(anyway getCanonicalPath throws a IOException, which is sound\nin the context)\n\nhope this may help\ndaniele rizzi (drizzi@largesys.it)",
            "commit number version hash": 443,
            "commit number": 1416,
            "function that changed": [],
            "files that changed": [
                "src/main/java/org/apache/commons/io/FilenameUtils.java"
            ]
        },
        {
            "bug index": "125",
            "bug id": "IO-557",
            "hexsha": "401d17349e7ec52d8fa866c35efd24103f332c29",
            "fix_hash": "459cebc515b11fef06464b711b3b33cbc1dd8c26",
            "description": "When the default locale is set to the Turkish language, using the XmlStreamReader constructor on an XML stream with a prolog including the ISO-8859-1 charset name in lowercase as its encoding throws a UnsupportedEncodingException (java.io.UnsupportedEncodingException: \u0130SO-8859-1).\r\nExample XML prolog : <?xml version=\"1.0\" encoding=\"iso-8859-1\"?>\r\n\r\nThis is apparently because the XmlStreamReader class uses String.toUpperCase() in its getXmlProlog() function. It should rather use toUpperCase(Locale.ROOT) or toUpperCase(Locale.US) as already done in the getContentTypeEncoding() function. Otherwise the behaviour can be different depending on the default locale, as the dotted lower case i becomes a dotted upper case i in the Turkish language, which not the case with other languages.",
            "commit number version hash": 1624,
            "commit number": 1410,
            "function that changed": [
                {
                    "function name": "testLowerCaseEncodingWithTurkishLocale_IO_557",
                    "function params": [],
                    "file name": "XmlStreamWriterTest.java",
                    "file old path": "src/test/java/org/apache/commons/io/output/XmlStreamWriterTest.java",
                    "file new path": "src/test/java/org/apache/commons/io/output/XmlStreamWriterTest.java",
                    "full name": "src.test.java.org.apache.commons.io.output.XmlStreamWriterTest.testLowerCaseEncodingWithTurkishLocale_IO_557"
                }
            ],
            "files that changed": [
                "src/test/java/org/apache/commons/io/output/XmlStreamWriterTest.java"
            ]
        },
        {
            "bug index": "126",
            "bug id": "IO-557",
            "hexsha": "401d17349e7ec52d8fa866c35efd24103f332c29",
            "fix_hash": "ed15b09985a073d0b17769bb9a28d3e41419a43b",
            "description": "When the default locale is set to the Turkish language, using the XmlStreamReader constructor on an XML stream with a prolog including the ISO-8859-1 charset name in lowercase as its encoding throws a UnsupportedEncodingException (java.io.UnsupportedEncodingException: \u0130SO-8859-1).\r\nExample XML prolog : <?xml version=\"1.0\" encoding=\"iso-8859-1\"?>\r\n\r\nThis is apparently because the XmlStreamReader class uses String.toUpperCase() in its getXmlProlog() function. It should rather use toUpperCase(Locale.ROOT) or toUpperCase(Locale.US) as already done in the getContentTypeEncoding() function. Otherwise the behaviour can be different depending on the default locale, as the dotted lower case i becomes a dotted upper case i in the Turkish language, which not the case with other languages.",
            "commit number version hash": 1624,
            "commit number": 1409,
            "function that changed": [
                {
                    "function name": "testLowerCaseEncodingWithTurkishLocale_IO_557",
                    "function params": [],
                    "file name": "XmlStreamReaderTest.java",
                    "file old path": "src/test/java/org/apache/commons/io/input/XmlStreamReaderTest.java",
                    "file new path": "src/test/java/org/apache/commons/io/input/XmlStreamReaderTest.java",
                    "full name": "src.test.java.org.apache.commons.io.input.XmlStreamReaderTest.testLowerCaseEncodingWithTurkishLocale_IO_557"
                },
                {
                    "function name": "testLowerCaseEncoding_IO_557",
                    "function params": [],
                    "file name": "XmlStreamWriterTest.java",
                    "file old path": "src/test/java/org/apache/commons/io/output/XmlStreamWriterTest.java",
                    "file new path": "src/test/java/org/apache/commons/io/output/XmlStreamWriterTest.java",
                    "full name": "src.test.java.org.apache.commons.io.output.XmlStreamWriterTest.testLowerCaseEncoding_IO_557"
                },
                {
                    "function name": "apply",
                    "function params": [
                        "stmt",
                        "description"
                    ],
                    "file name": "SystemDefaultsSwitch.java",
                    "file old path": null,
                    "file new path": "src/test/java/org/apache/commons/io/testtools/SystemDefaultsSwitch.java",
                    "full name": "src.test.java.org.apache.commons.io.testtools.SystemDefaultsSwitch.apply"
                },
                {
                    "function name": "applyLocale",
                    "function params": [
                        "defaults",
                        "stmt"
                    ],
                    "file name": "SystemDefaultsSwitch.java",
                    "file old path": null,
                    "file new path": "src/test/java/org/apache/commons/io/testtools/SystemDefaultsSwitch.java",
                    "full name": "src.test.java.org.apache.commons.io.testtools.SystemDefaultsSwitch.applyLocale"
                }
            ],
            "files that changed": [
                "src/test/java/org/apache/commons/io/input/XmlStreamReaderTest.java",
                "src/test/java/org/apache/commons/io/output/XmlStreamWriterTest.java"
            ]
        },
        {
            "bug index": "127",
            "bug id": "IO-557",
            "hexsha": "401d17349e7ec52d8fa866c35efd24103f332c29",
            "fix_hash": "d19259a7774e23ebdaac4af5ee4def8602fe2969",
            "description": "When the default locale is set to the Turkish language, using the XmlStreamReader constructor on an XML stream with a prolog including the ISO-8859-1 charset name in lowercase as its encoding throws a UnsupportedEncodingException (java.io.UnsupportedEncodingException: \u0130SO-8859-1).\r\nExample XML prolog : <?xml version=\"1.0\" encoding=\"iso-8859-1\"?>\r\n\r\nThis is apparently because the XmlStreamReader class uses String.toUpperCase() in its getXmlProlog() function. It should rather use toUpperCase(Locale.ROOT) or toUpperCase(Locale.US) as already done in the getContentTypeEncoding() function. Otherwise the behaviour can be different depending on the default locale, as the dotted lower case i becomes a dotted upper case i in the Turkish language, which not the case with other languages.",
            "commit number version hash": 1624,
            "commit number": 1408,
            "function that changed": [
                {
                    "function name": "toString",
                    "function params": [],
                    "file name": "ByteOrderMark.java",
                    "file old path": "src/main/java/org/apache/commons/io/ByteOrderMark.java",
                    "file new path": "src/main/java/org/apache/commons/io/ByteOrderMark.java",
                    "full name": "src.main.java.org.apache.commons.io.ByteOrderMark.toString"
                },
                {
                    "function name": "getXmlProlog",
                    "function params": [
                        "is",
                        "guessedEnc"
                    ],
                    "file name": "XmlStreamReader.java",
                    "file old path": "src/main/java/org/apache/commons/io/input/XmlStreamReader.java",
                    "file new path": "src/main/java/org/apache/commons/io/input/XmlStreamReader.java",
                    "full name": "src.main.java.org.apache.commons.io.input.XmlStreamReader.getXmlProlog"
                },
                {
                    "function name": "getContentTypeEncoding",
                    "function params": [
                        "httpContentType"
                    ],
                    "file name": "XmlStreamReader.java",
                    "file old path": "src/main/java/org/apache/commons/io/input/XmlStreamReader.java",
                    "file new path": "src/main/java/org/apache/commons/io/input/XmlStreamReader.java",
                    "full name": "src.main.java.org.apache.commons.io.input.XmlStreamReader.getContentTypeEncoding"
                },
                {
                    "function name": "detectEncoding",
                    "function params": [
                        "cbuf",
                        "off",
                        "len"
                    ],
                    "file name": "XmlStreamWriter.java",
                    "file old path": "src/main/java/org/apache/commons/io/output/XmlStreamWriter.java",
                    "file new path": "src/main/java/org/apache/commons/io/output/XmlStreamWriter.java",
                    "full name": "src.main.java.org.apache.commons.io.output.XmlStreamWriter.detectEncoding"
                },
                {
                    "function name": "testLowerCaseEncoding",
                    "function params": [],
                    "file name": "XmlStreamReaderTest.java",
                    "file old path": "src/test/java/org/apache/commons/io/input/XmlStreamReaderTest.java",
                    "file new path": "src/test/java/org/apache/commons/io/input/XmlStreamReaderTest.java",
                    "full name": "src.test.java.org.apache.commons.io.input.XmlStreamReaderTest.testLowerCaseEncoding"
                },
                {
                    "function name": "getContentTypeEncoding",
                    "function params": [
                        "httpContentType"
                    ],
                    "file name": "XmlStreamReader.java",
                    "file old path": "src/test/java/org/apache/commons/io/input/compatibility/XmlStreamReader.java",
                    "file new path": "src/test/java/org/apache/commons/io/input/compatibility/XmlStreamReader.java",
                    "full name": "src.test.java.org.apache.commons.io.input.compatibility.XmlStreamReader.getContentTypeEncoding"
                },
                {
                    "function name": "getXmlProlog",
                    "function params": [
                        "is",
                        "guessedEnc"
                    ],
                    "file name": "XmlStreamReader.java",
                    "file old path": "src/test/java/org/apache/commons/io/input/compatibility/XmlStreamReader.java",
                    "file new path": "src/test/java/org/apache/commons/io/input/compatibility/XmlStreamReader.java",
                    "full name": "src.test.java.org.apache.commons.io.input.compatibility.XmlStreamReader.getXmlProlog"
                },
                {
                    "function name": "checkXmlContent",
                    "function params": [
                        "xml",
                        "encoding",
                        "defaultEncoding"
                    ],
                    "file name": "XmlStreamWriterTest.java",
                    "file old path": "src/test/java/org/apache/commons/io/output/XmlStreamWriterTest.java",
                    "file new path": "src/test/java/org/apache/commons/io/output/XmlStreamWriterTest.java",
                    "full name": "src.test.java.org.apache.commons.io.output.XmlStreamWriterTest.checkXmlContent"
                },
                {
                    "function name": "testLowerCaseEncoding",
                    "function params": [],
                    "file name": "XmlStreamWriterTest.java",
                    "file old path": "src/test/java/org/apache/commons/io/output/XmlStreamWriterTest.java",
                    "file new path": "src/test/java/org/apache/commons/io/output/XmlStreamWriterTest.java",
                    "full name": "src.test.java.org.apache.commons.io.output.XmlStreamWriterTest.testLowerCaseEncoding"
                }
            ],
            "files that changed": [
                "src/main/java/org/apache/commons/io/ByteOrderMark.java",
                "src/main/java/org/apache/commons/io/input/XmlStreamReader.java",
                "src/main/java/org/apache/commons/io/output/XmlStreamWriter.java",
                "src/test/java/org/apache/commons/io/input/XmlStreamReaderTest.java",
                "src/test/java/org/apache/commons/io/input/compatibility/XmlStreamReader.java",
                "src/test/java/org/apache/commons/io/output/XmlStreamWriterTest.java"
            ]
        },
        {
            "bug index": "129",
            "bug id": "IO-8",
            "hexsha": "742c51feeaf75542ab9db6782ad3d2ad506fb871",
            "fix_hash": "c40faa90f9cc73045995133714111bb6cb344ec2",
            "description": "The bug is described by a one-line code      \n\nFileUtils.copyFile(new File(\"c:/hello.txt\"), new File(\"c:/hello.txt\"));\n\nTry run it and check hello.txt size before and after: you will find\nthat the file has been razed to 0 bytes.\n\nIt should be illegal to copy a file with the same path as the destination,\nor better, with the same getCanonicalPath(), so I suggest the following \nenhancement:\n\n------------ in FileUtils.java -------------\n\n\n\n        //make sure we can write to destination\n        if (destination.exists() && !destination.canWrite()) {\n            String message =\n                \"Unable to open file \" + destination + \" for writing.\";\n            throw new IOException(message);\n        }\n        \n        //makes sure it is not the same file        \n        if(source.getCanonicalPath().equals(destination.getCanonicalPath())) {\n            String message =\n                \"Unable to write file \" + source + \" on itself.\";\n            throw new IOException(message);\n            \n        }\n\n-- end --\nthis code should be safe regarding path and canonical path: you\nare querying OS after existence test, and anyway you are sure\nthat there is a source file and it has a canonical path.\n(anyway getCanonicalPath throws a IOException, which is sound\nin the context)\n\nhope this may help\ndaniele rizzi (drizzi@largesys.it)",
            "commit number version hash": 443,
            "commit number": 1375,
            "function that changed": [],
            "files that changed": [
                "src/main/java/org/apache/commons/io/input/BoundedReader.java",
                "src/main/java/org/apache/commons/io/input/ObservableInputStream.java"
            ]
        },
        {
            "bug index": "130",
            "bug id": "IO-547",
            "hexsha": "d8e8908db227ec91608b386a65b5f8559d92d8c9",
            "fix_hash": "5899f1eb7239ea26291b9e38490f5922b86158d8",
            "description": "In FileSystemutils.freeSpaceWindows(String path,long timeout) , path cannot be null. In this function for following assignment\n          path = FilenameUtils.normalize(path,bool), path is assigned null value when \n          (1) path argument is null.\n          (2) path argument is illegal/invalid path as per windows system.\n\n{code:java}\npublic class FileSystemutilTest {\n\tpublic static void main(String args[]){\n\t\tFileSystemUtils fsuobj = new FileSystemUtils();\n                String path = \":\\\\Users\\\\nikhil\\\\Desktop\\\\tests\";  /* Invalid path, causes Nullpointer Exception*/\n\t\ttry {\n\t\t\tlong space = fsuobj.freeSpace(path);\n\t\t} catch (IOException e) {\n\t\t\te.printStackTrace();\n\t\t}\n\t}\n}\n{code}\n\nFor above test case, as path is illegal for windows system, Nullpointer exception occurs. A check for validity of path as per windows file system, will resolve this bug.\n\n\n",
            "commit number version hash": 1389,
            "commit number": 1349,
            "function that changed": [
                {
                    "function name": "freeSpaceWindows",
                    "function params": [
                        "path",
                        "timeout"
                    ],
                    "file name": "FileSystemUtils.java",
                    "file old path": "src/main/java/org/apache/commons/io/FileSystemUtils.java",
                    "file new path": "src/main/java/org/apache/commons/io/FileSystemUtils.java",
                    "full name": "src.main.java.org.apache.commons.io.FileSystemUtils.freeSpaceWindows"
                }
            ],
            "files that changed": [
                "src/main/java/org/apache/commons/io/FileSystemUtils.java"
            ]
        },
        {
            "bug index": "131",
            "bug id": "IO-41",
            "hexsha": "742c51feeaf75542ab9db6782ad3d2ad506fb871",
            "fix_hash": "92a07f9aa109f0f55af963f86e466c80718f9466",
            "description": "jakarta-commons-io FileUtils.listFiles(File, String[], boolean) throws\nNullPointerException when the second parameter is null. But the javadoc says it\nshould list all files in such a case.\n\nHere is the patch:\n\n--- FileUtils.java.orig\t2003-12-24 12:35:06.000000000 +0200\n+++ FileUtils.java\t2003-12-24 12:28:22.000000000 +0200\n@@ -276,8 +276,13 @@\n      * @return an collection of java.io.File with the matching files\n      */\n     public static Collection listFiles(File directory, String[] extensions,\nboolean recursive) {\n-        String[] suffixes = toSuffixes(extensions);\n-        IOFileFilter filter = new SuffixFileFilter(suffixes);\n+        IOFileFilter filter;\n+        if (extensions == null) {\n+            filter = TrueFileFilter.INSTANCE;\n+        } else {\n+            String[] suffixes = toSuffixes(extensions);\n+            filter = new SuffixFileFilter(suffixes);\n+        }\n         return listFiles(directory, filter, \n             (recursive ? TrueFileFilter.INSTANCE : FalseFileFilter.INSTANCE));\n     }",
            "commit number version hash": 443,
            "commit number": 1348,
            "function that changed": [
                {
                    "function name": "testCopyLarge_SkipWithInvalidOffset",
                    "function params": [],
                    "file name": "IOUtilsTestCase.java",
                    "file old path": "src/test/java/org/apache/commons/io/IOUtilsTestCase.java",
                    "file new path": "src/test/java/org/apache/commons/io/IOUtilsTestCase.java",
                    "full name": "src.test.java.org.apache.commons.io.IOUtilsTestCase.testCopyLarge_SkipWithInvalidOffset"
                }
            ],
            "files that changed": [
                "src/test/java/org/apache/commons/io/IOUtilsTestCase.java"
            ]
        },
        {
            "bug index": "132",
            "bug id": "IO-35",
            "hexsha": "742c51feeaf75542ab9db6782ad3d2ad506fb871",
            "fix_hash": "3378280035f388157e007a06f7fcb74698b91e3e",
            "description": "Attached please find an updated version of FileSystemUtils (because of some \nissues at my current location I am unable to create a patch... don't ask!)\n\nThis addresses the two outstanding issues that would keep this from being \nincluded in the next release, namely:\n\n(1) Wouldn't work on \"alternate\" (depending on your perspective I suppose!) \nlanguage versions of Windows... I do not have anything other than an English \nversion to test this on, so it'd be great it someone else could.  It does NOT \nlook for any particular string any longer though, so I expect it to work.  \nCertainly it does on my test platforms.  The Windows implementation is fairly \ndifferent than it was because of this.\n\n(2) Using cmd.exe on *nix systems... still don't know why I wrote it like that \nin the first place, or why it worked on my test Linux instances, but in any \ncase it doesn't use it any more, it uses df directly as it should have been \nall along.\n\nI also addressed a couple of Checkstyle complaints with regard to line \nlengths.  Nothing major.",
            "commit number version hash": 443,
            "commit number": 1339,
            "function that changed": [
                {
                    "function name": "toByteArray",
                    "function params": [
                        "input",
                        "size"
                    ],
                    "file name": "IOUtils.java",
                    "file old path": "src/main/java/org/apache/commons/io/IOUtils.java",
                    "file new path": "src/main/java/org/apache/commons/io/IOUtils.java",
                    "full name": "src.main.java.org.apache.commons.io.IOUtils.toByteArray"
                },
                {
                    "function name": "testToByteArray_InputStream_SizeIllegal",
                    "function params": [],
                    "file name": "IOUtilsTestCase.java",
                    "file old path": "src/test/java/org/apache/commons/io/IOUtilsTestCase.java",
                    "file new path": "src/test/java/org/apache/commons/io/IOUtilsTestCase.java",
                    "full name": "src.test.java.org.apache.commons.io.IOUtilsTestCase.testToByteArray_InputStream_SizeIllegal"
                },
                {
                    "function name": "testToByteArray_InputStream_SizeLong",
                    "function params": [],
                    "file name": "IOUtilsTestCase.java",
                    "file old path": "src/test/java/org/apache/commons/io/IOUtilsTestCase.java",
                    "file new path": "src/test/java/org/apache/commons/io/IOUtilsTestCase.java",
                    "full name": "src.test.java.org.apache.commons.io.IOUtilsTestCase.testToByteArray_InputStream_SizeLong"
                }
            ],
            "files that changed": [
                "src/main/java/org/apache/commons/io/IOUtils.java",
                "src/test/java/org/apache/commons/io/IOUtilsTestCase.java"
            ]
        },
        {
            "bug index": "133",
            "bug id": "IO-442",
            "hexsha": "d8e8908db227ec91608b386a65b5f8559d92d8c9",
            "fix_hash": "156653ea56fe215b97a263a770ea7094ff6adb84",
            "description": "Documentation states that it returns true if the file is *after* cutoff... but the code does opposite!\n{code}\n    /**\n     * Returns a filter that returns true if the file was last modified after\n     * the specified cutoff time.\n     */\n{code}\n\nBUT..the code constructs the following:\n{code}\n    public static IOFileFilter ageFileFilter(long cutoff) {\n        return new AgeFileFilter(cutoff);\n    }\n{code}\n\nAnd the Javadoc for this AgeFileFilter says...OLDER i.e. before\n{code}\n    /**\n     * Constructs a new age file filter for files equal to or older than\n     * a certain cutoff\n     *\n     * @param cutoff  the threshold age of the files\n     */\n{code}\nWhich is it?!",
            "commit number version hash": 1389,
            "commit number": 1338,
            "function that changed": [],
            "files that changed": [
                "src/main/java/org/apache/commons/io/filefilter/FileFilterUtils.java"
            ]
        },
        {
            "bug index": "134",
            "bug id": "IO-534",
            "hexsha": "d8e8908db227ec91608b386a65b5f8559d92d8c9",
            "fix_hash": "31e141019010d27dfb3c1a1fb712433268b520f0",
            "description": "The test case FileUtilTestCase.testForceDeleteDir() has always attempted to delete the testDirectory parent.\n\nThis is wrong; it should not assume that the testDirectory has a parent that can safely be deleted.\n\nThis is why the testDirectory is currently defined as \"test/io\" when it would make more sense to use a temporary directory under target. It also explains why the \"test\" directory is left behind when tests complete.",
            "commit number version hash": 1389,
            "commit number": 1335,
            "function that changed": [
                {
                    "function name": "testForceDeleteDir",
                    "function params": [],
                    "file name": "FileUtilsTestCase.java",
                    "file old path": "src/test/java/org/apache/commons/io/FileUtilsTestCase.java",
                    "file new path": "src/test/java/org/apache/commons/io/FileUtilsTestCase.java",
                    "full name": "src.test.java.org.apache.commons.io.FileUtilsTestCase.testForceDeleteDir"
                }
            ],
            "files that changed": [
                "src/test/java/org/apache/commons/io/FileUtilsTestCase.java"
            ]
        },
        {
            "bug index": "135",
            "bug id": "IO-21",
            "hexsha": "742c51feeaf75542ab9db6782ad3d2ad506fb871",
            "fix_hash": "722a5af4f1786599f22e91a34af459883c7a6a8b",
            "description": "This is a conversion I've had to do on a number of occasions. Even though it is \nfairly simple, I think utility methods in IOUtils would be useful.",
            "commit number version hash": 443,
            "commit number": 1333,
            "function that changed": [
                {
                    "function name": "testMultiByteBreak",
                    "function params": [],
                    "file name": "TailerTest.java",
                    "file old path": "src/test/java/org/apache/commons/io/input/TailerTest.java",
                    "file new path": "src/test/java/org/apache/commons/io/input/TailerTest.java",
                    "full name": "src.test.java.org.apache.commons.io.input.TailerTest.testMultiByteBreak"
                },
                {
                    "function name": "testTailerEof",
                    "function params": [],
                    "file name": "TailerTest.java",
                    "file old path": "src/test/java/org/apache/commons/io/input/TailerTest.java",
                    "file new path": "src/test/java/org/apache/commons/io/input/TailerTest.java",
                    "full name": "src.test.java.org.apache.commons.io.input.TailerTest.testTailerEof"
                },
                {
                    "function name": "createFile",
                    "function params": [
                        "file",
                        "size"
                    ],
                    "file name": "TailerTest.java",
                    "file old path": "src/test/java/org/apache/commons/io/input/TailerTest.java",
                    "file new path": "src/test/java/org/apache/commons/io/input/TailerTest.java",
                    "full name": "src.test.java.org.apache.commons.io.input.TailerTest.createFile"
                },
                {
                    "function name": "write",
                    "function params": [
                        "file",
                        "lines"
                    ],
                    "file name": "TailerTest.java",
                    "file old path": "src/test/java/org/apache/commons/io/input/TailerTest.java",
                    "file new path": "src/test/java/org/apache/commons/io/input/TailerTest.java",
                    "full name": "src.test.java.org.apache.commons.io.input.TailerTest.write"
                },
                {
                    "function name": "writeString",
                    "function params": [
                        "file",
                        "strings"
                    ],
                    "file name": "TailerTest.java",
                    "file old path": "src/test/java/org/apache/commons/io/input/TailerTest.java",
                    "file new path": "src/test/java/org/apache/commons/io/input/TailerTest.java",
                    "full name": "src.test.java.org.apache.commons.io.input.TailerTest.writeString"
                }
            ],
            "files that changed": [
                "src/test/java/org/apache/commons/io/input/TailerTest.java"
            ]
        },
        {
            "bug index": "136",
            "bug id": "IO-528",
            "hexsha": "d8e8908db227ec91608b386a65b5f8559d92d8c9",
            "fix_hash": "45fbfb82fd1f5168a7183e78ece89da7a60e21fe",
            "description": "`Tailer.run` has a race condition that can have serious effects. \n\nThe `run()` method has two while loops. The first waits till the file exists and the second loop reads lines from the file doing some file rotation checking on the way.  If the file is deleted while the second loop is in progress then the loop goes crazy logging warnings that look like this:\n\n`\nDec 06, 2016 1:02:18 AM com.github.davidmoten.logan.LogFile$1 fileRotated\nINFO: file rotated\nDec 06, 2016 1:02:18 AM com.github.davidmoten.logan.LogFile$1 fileNotFound\nWARNING: file not found\nDec 06, 2016 1:02:18 AM com.github.davidmoten.logan.LogFile$1 fileRotated\nINFO: file rotated\nDec 06, 2016 1:02:18 AM com.github.davidmoten.logan.LogFile$1 fileNotFound\nWARNING: file not found\nDec 06, 2016 1:02:18 AM com.github.davidmoten.logan.LogFile$1 fileRotated\nINFO: file rotated\nDec 06, 2016 1:02:18 AM com.github.davidmoten.logan.LogFile$1 fileNotFound\nWARNING: file not found\nDec 06, 2016 1:02:18 AM com.github.davidmoten.logan.LogFile$1 fileRotated\nINFO: file rotated\nDec 06, 2016 1:02:18 AM com.github.davidmoten.logan.LogFile$1 fileNotFound\nWARNING: file not found\n`\n\nIn our case this had serious effects. The file being tailed was deleted by another process and all available disk space was rapidly used up by the logging. This crashed a system.\n\nThe fix is to put a sleep after the call to `fileNotFound()`.\n\nThis problem was raised in IO-398 three years ago but no change was made to the code base.\n\nPR submitted via github repo.",
            "commit number version hash": 1389,
            "commit number": 1329,
            "function that changed": [
                {
                    "function name": "run",
                    "function params": [],
                    "file name": "Tailer.java",
                    "file old path": "src/main/java/org/apache/commons/io/input/Tailer.java",
                    "file new path": "src/main/java/org/apache/commons/io/input/Tailer.java",
                    "full name": "src.main.java.org.apache.commons.io.input.Tailer.run"
                }
            ],
            "files that changed": [
                "src/main/java/org/apache/commons/io/input/Tailer.java"
            ]
        },
        {
            "bug index": "137",
            "bug id": "IO-30",
            "hexsha": "742c51feeaf75542ab9db6782ad3d2ad506fb871",
            "fix_hash": "8b9fe1b01ce21003f6a6ff8391ad2a64f4d21030",
            "description": "Using 1.0 release, downloaded from ibiblio\n\nThis test will fail for me:\n\n    public void testCommonsIOBug() throws Exception {\n        final File fileBefore = new File(\"Z:\\\\test\");\n        System.out.println(\"Before: \" + fileBefore);\n        final URL fileURL = new URL(\"file://\" + fileBefore.getAbsolutePath());\n        System.out.println(\"In URL: \" + fileURL);\n        final File fileAfter = FileUtils.toFile(fileURL);\n        System.out.println(\"After: \" + fileAfter);\n        assertEquals(fileBefore.getAbsolutePath(), fileAfter.getAbsolutePath());\n    }\n\nThe output for me is:\n\nBefore: Z:\\test\nIn URL: file://Z:/test\nAfter: \\test",
            "commit number version hash": 443,
            "commit number": 1327,
            "function that changed": [],
            "files that changed": [
                "src/main/java/org/apache/commons/io/DirectoryWalker.java",
                "src/main/java/org/apache/commons/io/FileCleaner.java",
                "src/main/java/org/apache/commons/io/FileCleaningTracker.java",
                "src/main/java/org/apache/commons/io/FileDeleteStrategy.java",
                "src/main/java/org/apache/commons/io/FileUtils.java",
                "src/main/java/org/apache/commons/io/FilenameUtils.java",
                "src/main/java/org/apache/commons/io/IOCase.java",
                "src/main/java/org/apache/commons/io/ThreadMonitor.java",
                "src/main/java/org/apache/commons/io/comparator/ReverseComparator.java",
                "src/main/java/org/apache/commons/io/comparator/SizeFileComparator.java",
                "src/main/java/org/apache/commons/io/filefilter/AbstractFileFilter.java",
                "src/main/java/org/apache/commons/io/filefilter/AgeFileFilter.java",
                "src/main/java/org/apache/commons/io/filefilter/AndFileFilter.java",
                "src/main/java/org/apache/commons/io/filefilter/CanReadFileFilter.java",
                "src/main/java/org/apache/commons/io/filefilter/CanWriteFileFilter.java",
                "src/main/java/org/apache/commons/io/filefilter/DelegateFileFilter.java",
                "src/main/java/org/apache/commons/io/filefilter/DirectoryFileFilter.java",
                "src/main/java/org/apache/commons/io/filefilter/EmptyFileFilter.java",
                "src/main/java/org/apache/commons/io/filefilter/FalseFileFilter.java",
                "src/main/java/org/apache/commons/io/filefilter/FileFileFilter.java",
                "src/main/java/org/apache/commons/io/filefilter/FileFilterUtils.java",
                "src/main/java/org/apache/commons/io/filefilter/HiddenFileFilter.java",
                "src/main/java/org/apache/commons/io/filefilter/NameFileFilter.java",
                "src/main/java/org/apache/commons/io/filefilter/NotFileFilter.java",
                "src/main/java/org/apache/commons/io/filefilter/OrFileFilter.java",
                "src/main/java/org/apache/commons/io/filefilter/PrefixFileFilter.java",
                "src/main/java/org/apache/commons/io/filefilter/SizeFileFilter.java",
                "src/main/java/org/apache/commons/io/filefilter/SuffixFileFilter.java",
                "src/main/java/org/apache/commons/io/filefilter/WildcardFilter.java",
                "src/main/java/org/apache/commons/io/input/BOMInputStream.java",
                "src/main/java/org/apache/commons/io/input/BoundedInputStream.java",
                "src/main/java/org/apache/commons/io/input/BoundedReader.java",
                "src/main/java/org/apache/commons/io/input/CharSequenceReader.java",
                "src/main/java/org/apache/commons/io/input/ObservableInputStream.java",
                "src/main/java/org/apache/commons/io/input/Tailer.java",
                "src/main/java/org/apache/commons/io/input/XmlStreamReader.java",
                "src/main/java/org/apache/commons/io/monitor/FileAlterationMonitor.java",
                "src/main/java/org/apache/commons/io/monitor/FileAlterationObserver.java",
                "src/main/java/org/apache/commons/io/output/ByteArrayOutputStream.java",
                "src/main/java/org/apache/commons/io/output/DeferredFileOutputStream.java",
                "src/main/java/org/apache/commons/io/output/ThresholdingOutputStream.java",
                "src/main/java/org/apache/commons/io/output/XmlStreamWriter.java",
                "src/test/java/org/apache/commons/io/ByteOrderMarkTestCase.java",
                "src/test/java/org/apache/commons/io/FileUtilsFileNewerTestCase.java",
                "src/test/java/org/apache/commons/io/input/compatibility/XmlStreamReader.java",
                "src/test/java/org/apache/commons/io/monitor/AbstractMonitorTestCase.java",
                "src/test/java/org/apache/commons/io/output/DeferredFileOutputStreamTest.java",
                "src/test/java/org/apache/commons/io/testtools/TestUtils.java"
            ]
        },
        {
            "bug index": "138",
            "bug id": "IO-28",
            "hexsha": "742c51feeaf75542ab9db6782ad3d2ad506fb871",
            "fix_hash": "e95134229b9066aa2f1d312a53f5a670d271dbfa",
            "description": "patch to follow",
            "commit number version hash": 443,
            "commit number": 1324,
            "function that changed": [
                {
                    "function name": "createLineBasedFile",
                    "function params": [
                        "file",
                        "data"
                    ],
                    "file name": "TestUtils.java",
                    "file old path": "src/test/java/org/apache/commons/io/testtools/TestUtils.java",
                    "file new path": "src/test/java/org/apache/commons/io/testtools/TestUtils.java",
                    "full name": "src.test.java.org.apache.commons.io.testtools.TestUtils.createLineBasedFile"
                }
            ],
            "files that changed": [
                "src/test/java/org/apache/commons/io/testtools/TestUtils.java"
            ]
        },
        {
            "bug index": "140",
            "bug id": "IO-483",
            "hexsha": "364c2bf7f42e7679d910548d931be24332eaf6ad",
            "fix_hash": "a7bd568249f9ec20b69b2a700da6a0648e93a842",
            "description": "A simple\n\n{code:java}\nint prefixLength = FilenameUtils.getPrefixLength(\"/:foo/bar\");\n{code}\n\nreturn {{-1}}, but {{0}} was expected. The path is absolutely valid for unix systems.",
            "commit number version hash": 990,
            "commit number": 1313,
            "function that changed": [
                {
                    "function name": "getPrefixLength",
                    "function params": [
                        "filename"
                    ],
                    "file name": "FilenameUtils.java",
                    "file old path": "src/main/java/org/apache/commons/io/FilenameUtils.java",
                    "file new path": "src/main/java/org/apache/commons/io/FilenameUtils.java",
                    "full name": "src.main.java.org.apache.commons.io.FilenameUtils.getPrefixLength"
                },
                {
                    "function name": "testGetPrefixLength",
                    "function params": [],
                    "file name": "FilenameUtilsTestCase.java",
                    "file old path": "src/test/java/org/apache/commons/io/FilenameUtilsTestCase.java",
                    "file new path": "src/test/java/org/apache/commons/io/FilenameUtilsTestCase.java",
                    "full name": "src.test.java.org.apache.commons.io.FilenameUtilsTestCase.testGetPrefixLength"
                }
            ],
            "files that changed": [
                "src/main/java/org/apache/commons/io/FilenameUtils.java",
                "src/test/java/org/apache/commons/io/FilenameUtilsTestCase.java"
            ]
        },
        {
            "bug index": "141",
            "bug id": "IO-512",
            "hexsha": "d8e8908db227ec91608b386a65b5f8559d92d8c9",
            "fix_hash": "65e1c9c38becbee2f84d822cd65fd7dbce42b903",
            "description": "I upgraded from commons-io-2.0.1.jar to v2.5 (and fileupload to v1.32)\n\nand now I get\n\njava.io.FileNotFoundException: /usr/share/tomcat/temp/dfifp/upload_4d9f8898_1a83_4092_9070_ddf9c15de6d1_00000027.tmp (No such file or directory)\n\tat java.io.FileOutputStream.open(Native Method)\n\tat java.io.FileOutputStream.<init>(FileOutputStream.java:213)\n\tat java.io.FileOutputStream.<init>(FileOutputStream.java:162)\n\tat org.apache.commons.io.output.DeferredFileOutputStream.thresholdReached(DeferredFileOutputStream.java:179)\n\nIn thresholdReached(), the prefix is null, so no temp file is created.\nIn the subsequent new FileOutputStream(outputFile), the exception is thrown.\n\nSuggested fix:\nbefore new FileOutputStream(outputFile) , add\n\nFileUtils.forceMkdirParent(outputFile);\n\nSimilar issues reported by others:\n- IO-497\n- https://java.net/jira/browse/GLASSFISH-20581\n- https://jira.sakaiproject.org/si/jira.issueviews:issue-html/SAM-1537/SAM-1537.html\n",
            "commit number version hash": 1389,
            "commit number": 1310,
            "function that changed": [
                {
                    "function name": "thresholdReached",
                    "function params": [],
                    "file name": "DeferredFileOutputStream.java",
                    "file old path": "src/main/java/org/apache/commons/io/output/DeferredFileOutputStream.java",
                    "file new path": "src/main/java/org/apache/commons/io/output/DeferredFileOutputStream.java",
                    "full name": "src.main.java.org.apache.commons.io.output.DeferredFileOutputStream.thresholdReached"
                }
            ],
            "files that changed": [
                "src/main/java/org/apache/commons/io/output/DeferredFileOutputStream.java"
            ]
        },
        {
            "bug index": "142",
            "bug id": "IO-511",
            "hexsha": "d8e8908db227ec91608b386a65b5f8559d92d8c9",
            "fix_hash": "5e3359388b0732fd1b3d055036187525eea76521",
            "description": "After a few unit tests, \"test/io\" folder is not deleted. It's a bad practice in software engineering, because disk shouldn't polluted.",
            "commit number version hash": 1389,
            "commit number": 1304,
            "function that changed": [
                {
                    "function name": "tearDown",
                    "function params": [],
                    "file name": "FileDeleteStrategyTestCase.java",
                    "file old path": "src/test/java/org/apache/commons/io/FileDeleteStrategyTestCase.java",
                    "file new path": "src/test/java/org/apache/commons/io/FileDeleteStrategyTestCase.java",
                    "full name": "src.test.java.org.apache.commons.io.FileDeleteStrategyTestCase.tearDown"
                },
                {
                    "function name": "tearDown",
                    "function params": [],
                    "file name": "FileUtilsCleanDirectoryTestCase.java",
                    "file old path": "src/test/java/org/apache/commons/io/FileUtilsCleanDirectoryTestCase.java",
                    "file new path": "src/test/java/org/apache/commons/io/FileUtilsCleanDirectoryTestCase.java",
                    "full name": "src.test.java.org.apache.commons.io.FileUtilsCleanDirectoryTestCase.tearDown"
                },
                {
                    "function name": "tearDown",
                    "function params": [],
                    "file name": "FileUtilsFileNewerTestCase.java",
                    "file old path": "src/test/java/org/apache/commons/io/FileUtilsFileNewerTestCase.java",
                    "file new path": "src/test/java/org/apache/commons/io/FileUtilsFileNewerTestCase.java",
                    "full name": "src.test.java.org.apache.commons.io.FileUtilsFileNewerTestCase.tearDown"
                },
                {
                    "function name": "tearDown",
                    "function params": [],
                    "file name": "FileUtilsListFilesTestCase.java",
                    "file old path": "src/test/java/org/apache/commons/io/FileUtilsListFilesTestCase.java",
                    "file new path": "src/test/java/org/apache/commons/io/FileUtilsListFilesTestCase.java",
                    "full name": "src.test.java.org.apache.commons.io.FileUtilsListFilesTestCase.tearDown"
                },
                {
                    "function name": "tearDown",
                    "function params": [],
                    "file name": "LockableFileWriterTest.java",
                    "file old path": "src/test/java/org/apache/commons/io/output/LockableFileWriterTest.java",
                    "file new path": "src/test/java/org/apache/commons/io/output/LockableFileWriterTest.java",
                    "full name": "src.test.java.org.apache.commons.io.output.LockableFileWriterTest.tearDown"
                }
            ],
            "files that changed": [
                "src/test/java/org/apache/commons/io/FileDeleteStrategyTestCase.java",
                "src/test/java/org/apache/commons/io/FileUtilsCleanDirectoryTestCase.java",
                "src/test/java/org/apache/commons/io/FileUtilsFileNewerTestCase.java",
                "src/test/java/org/apache/commons/io/FileUtilsListFilesTestCase.java",
                "src/test/java/org/apache/commons/io/output/LockableFileWriterTest.java"
            ]
        },
        {
            "bug index": "143",
            "bug id": "IO-502",
            "hexsha": "d8e8908db227ec91608b386a65b5f8559d92d8c9",
            "fix_hash": "6aa7ba1d927cc57769d4ed589326053849b235ea",
            "description": "When copying files or directories, exceptions thrown on closing streams are suppressed incorrectly and need to be propagated to the caller.",
            "commit number version hash": 1389,
            "commit number": 1290,
            "function that changed": [
                {
                    "function name": "if",
                    "function params": [
                        "contains"
                    ],
                    "file name": "FileSystemUtils.java",
                    "file old path": "src/main/java/org/apache/commons/io/FileSystemUtils.java",
                    "file new path": "src/main/java/org/apache/commons/io/FileSystemUtils.java",
                    "full name": "src.main.java.org.apache.commons.io.FileSystemUtils.if"
                }
            ],
            "files that changed": [
                "src/main/java/org/apache/commons/io/FileSystemUtils.java"
            ]
        },
        {
            "bug index": "144",
            "bug id": "IO-502",
            "hexsha": "d8e8908db227ec91608b386a65b5f8559d92d8c9",
            "fix_hash": "6c3a1bb78c3e92fded50c1c1e9f4c3e2e6e9dd4c",
            "description": "When copying files or directories, exceptions thrown on closing streams are suppressed incorrectly and need to be propagated to the caller.",
            "commit number version hash": 1389,
            "commit number": 1289,
            "function that changed": [
                {
                    "function name": "doCopyFile",
                    "function params": [
                        "srcFile",
                        "destFile",
                        "preserveFileDate"
                    ],
                    "file name": "FileUtils.java",
                    "file old path": "src/main/java/org/apache/commons/io/FileUtils.java",
                    "file new path": "src/main/java/org/apache/commons/io/FileUtils.java",
                    "full name": "src.main.java.org.apache.commons.io.FileUtils.doCopyFile"
                }
            ],
            "files that changed": [
                "src/main/java/org/apache/commons/io/FileUtils.java"
            ]
        },
        {
            "bug index": "145",
            "bug id": "IO-502",
            "hexsha": "d8e8908db227ec91608b386a65b5f8559d92d8c9",
            "fix_hash": "d9406824aeba0e977c0692971a6dbb2e62823886",
            "description": "When copying files or directories, exceptions thrown on closing streams are suppressed incorrectly and need to be propagated to the caller.",
            "commit number version hash": 1389,
            "commit number": 1288,
            "function that changed": [
                {
                    "function name": "performCommand",
                    "function params": [
                        "cmdAttribs",
                        "max",
                        "timeout"
                    ],
                    "file name": "FileSystemUtils.java",
                    "file old path": "src/main/java/org/apache/commons/io/FileSystemUtils.java",
                    "file new path": "src/main/java/org/apache/commons/io/FileSystemUtils.java",
                    "full name": "src.main.java.org.apache.commons.io.FileSystemUtils.performCommand"
                }
            ],
            "files that changed": [
                "src/main/java/org/apache/commons/io/FileSystemUtils.java"
            ]
        },
        {
            "bug index": "146",
            "bug id": "IO-494",
            "hexsha": "d9406824aeba0e977c0692971a6dbb2e62823886",
            "fix_hash": "2e72f7494ae59cb11b11a43f87839315390beaf4",
            "description": "In the api docs of class org.apache.commons.io.DirectoryWalker<T>, topic of 3.1 External / Multi-threaded.Method handleIsCancelled in demo code returns boolean but with a void return type.",
            "commit number version hash": 1288,
            "commit number": 1277,
            "function that changed": [],
            "files that changed": [
                "src/main/java/org/apache/commons/io/DirectoryWalker.java"
            ]
        },
        {
            "bug index": "147",
            "bug id": "IO-492",
            "hexsha": "d9406824aeba0e977c0692971a6dbb2e62823886",
            "fix_hash": "54eeaee27c4d73a5b3b6ee84e53ee9046919a18b",
            "description": "See here: https://github.com/apache/commons-io/blob/trunk/src/main/java/org/apache/commons/io/IOUtils.java#L101",
            "commit number version hash": 1288,
            "commit number": 1274,
            "function that changed": [],
            "files that changed": [
                "src/main/java/org/apache/commons/io/IOUtils.java"
            ]
        },
        {
            "bug index": "148",
            "bug id": "IO-16",
            "hexsha": "742c51feeaf75542ab9db6782ad3d2ad506fb871",
            "fix_hash": "e23402c1dc133842c1acef0a2d7cd1f386647de7",
            "description": "Env: Java 1.4.2, commons-io-1.0.jar, Win XP\n\nThe AbstractFileFilter's FilenameFilter's accept(File, String) method \nimplementation constructs the fileName/File (it passes to accept(File)) \nwrongly - please see below. This causes the DirectoryFileFilter (in example, I \ndid not have time to check out the other AbstractFileFilter implementations) \nfailure since it's FileFilter implementation receives the incorrect \nfilename/File. \n\nNote I stumbled into this in Win Env. and really don't know how it works in \nother platforms.\n\nv1.0 code:\n    public boolean accept(File dir, String name) {\n        String filename = dir.getName() + File.separator + name;\n        return accept(new File(filename));\n    }\n\ncorrect code should be:\n    public boolean accept(File dir, String name) {\n        String filename = dir.getPath() + File.separator + name;\n        return accept(new File(filename));\n    }",
            "commit number version hash": 443,
            "commit number": 1267,
            "function that changed": [
                {
                    "function name": "checkIbmJdkWithBrokenUTF16",
                    "function params": [
                        "charset"
                    ],
                    "file name": "WriterOutputStream.java",
                    "file old path": "src/main/java/org/apache/commons/io/output/WriterOutputStream.java",
                    "file new path": "src/main/java/org/apache/commons/io/output/WriterOutputStream.java",
                    "full name": "src.main.java.org.apache.commons.io.output.WriterOutputStream.checkIbmJdkWithBrokenUTF16"
                },
                {
                    "function name": "WriterOutputStream",
                    "function params": [
                        "writer",
                        "decoder",
                        "bufferSize",
                        "writeImmediately"
                    ],
                    "file name": "WriterOutputStream.java",
                    "file old path": "src/main/java/org/apache/commons/io/output/WriterOutputStream.java",
                    "file new path": "src/main/java/org/apache/commons/io/output/WriterOutputStream.java",
                    "full name": "src.main.java.org.apache.commons.io.output.WriterOutputStream.WriterOutputStream"
                },
                {
                    "function name": "testUTF16WithBufferedWrite",
                    "function params": [],
                    "file name": "WriterOutputStreamTest.java",
                    "file old path": "src/test/java/org/apache/commons/io/output/WriterOutputStreamTest.java",
                    "file new path": "src/test/java/org/apache/commons/io/output/WriterOutputStreamTest.java",
                    "full name": "src.test.java.org.apache.commons.io.output.WriterOutputStreamTest.testUTF16WithBufferedWrite"
                },
                {
                    "function name": "testUTF16WithSingleByteWrite",
                    "function params": [],
                    "file name": "WriterOutputStreamTest.java",
                    "file old path": "src/test/java/org/apache/commons/io/output/WriterOutputStreamTest.java",
                    "file new path": "src/test/java/org/apache/commons/io/output/WriterOutputStreamTest.java",
                    "full name": "src.test.java.org.apache.commons.io.output.WriterOutputStreamTest.testUTF16WithSingleByteWrite"
                }
            ],
            "files that changed": [
                "src/main/java/org/apache/commons/io/output/WriterOutputStream.java",
                "src/test/java/org/apache/commons/io/output/WriterOutputStreamTest.java"
            ]
        },
        {
            "bug index": "149",
            "bug id": "IO-484",
            "hexsha": "d9406824aeba0e977c0692971a6dbb2e62823886",
            "fix_hash": "5d072ef89fbc2532f621a5a0b4d6791cb926a997",
            "description": "embedding nulls in filenames exposes injection vectors if the application passes unsanitized data to some functions in FileNameUtils",
            "commit number version hash": 1288,
            "commit number": 1247,
            "function that changed": [
                {
                    "function name": "getName",
                    "function params": [
                        "filename"
                    ],
                    "file name": "FilenameUtils.java",
                    "file old path": "src/main/java/org/apache/commons/io/FilenameUtils.java",
                    "file new path": "src/main/java/org/apache/commons/io/FilenameUtils.java",
                    "full name": "src.main.java.org.apache.commons.io.FilenameUtils.getName"
                },
                {
                    "function name": "removeExtension",
                    "function params": [
                        "filename"
                    ],
                    "file name": "FilenameUtils.java",
                    "file old path": "src/main/java/org/apache/commons/io/FilenameUtils.java",
                    "file new path": "src/main/java/org/apache/commons/io/FilenameUtils.java",
                    "full name": "src.main.java.org.apache.commons.io.FilenameUtils.removeExtension"
                },
                {
                    "function name": "doGetPath",
                    "function params": [
                        "filename",
                        "separatorAdd"
                    ],
                    "file name": "FilenameUtils.java",
                    "file old path": "src/main/java/org/apache/commons/io/FilenameUtils.java",
                    "file new path": "src/main/java/org/apache/commons/io/FilenameUtils.java",
                    "full name": "src.main.java.org.apache.commons.io.FilenameUtils.doGetPath"
                },
                {
                    "function name": "doNormalize",
                    "function params": [
                        "filename",
                        "separator",
                        "keepSeparator"
                    ],
                    "file name": "FilenameUtils.java",
                    "file old path": "src/main/java/org/apache/commons/io/FilenameUtils.java",
                    "file new path": "src/main/java/org/apache/commons/io/FilenameUtils.java",
                    "full name": "src.main.java.org.apache.commons.io.FilenameUtils.doNormalize"
                },
                {
                    "function name": "getPrefix",
                    "function params": [
                        "filename"
                    ],
                    "file name": "FilenameUtils.java",
                    "file old path": "src/main/java/org/apache/commons/io/FilenameUtils.java",
                    "file new path": "src/main/java/org/apache/commons/io/FilenameUtils.java",
                    "full name": "src.main.java.org.apache.commons.io.FilenameUtils.getPrefix"
                },
                {
                    "function name": "testGetPath",
                    "function params": [],
                    "file name": "FilenameUtilsTestCase.java",
                    "file old path": "src/test/java/org/apache/commons/io/FilenameUtilsTestCase.java",
                    "file new path": "src/test/java/org/apache/commons/io/FilenameUtilsTestCase.java",
                    "full name": "src.test.java.org.apache.commons.io.FilenameUtilsTestCase.testGetPath"
                },
                {
                    "function name": "testNormalize",
                    "function params": [],
                    "file name": "FilenameUtilsTestCase.java",
                    "file old path": "src/test/java/org/apache/commons/io/FilenameUtilsTestCase.java",
                    "file new path": "src/test/java/org/apache/commons/io/FilenameUtilsTestCase.java",
                    "full name": "src.test.java.org.apache.commons.io.FilenameUtilsTestCase.testNormalize"
                },
                {
                    "function name": "testGetPath_with_nullbyte",
                    "function params": [],
                    "file name": "FilenameUtilsTestCase.java",
                    "file old path": "src/test/java/org/apache/commons/io/FilenameUtilsTestCase.java",
                    "file new path": "src/test/java/org/apache/commons/io/FilenameUtilsTestCase.java",
                    "full name": "src.test.java.org.apache.commons.io.FilenameUtilsTestCase.testGetPath_with_nullbyte"
                },
                {
                    "function name": "testInjectionFailure",
                    "function params": [],
                    "file name": "FilenameUtilsTestCase.java",
                    "file old path": "src/test/java/org/apache/commons/io/FilenameUtilsTestCase.java",
                    "file new path": "src/test/java/org/apache/commons/io/FilenameUtilsTestCase.java",
                    "full name": "src.test.java.org.apache.commons.io.FilenameUtilsTestCase.testInjectionFailure"
                },
                {
                    "function name": "testGetBaseName_with_nullByte",
                    "function params": [],
                    "file name": "FilenameUtilsTestCase.java",
                    "file old path": "src/test/java/org/apache/commons/io/FilenameUtilsTestCase.java",
                    "file new path": "src/test/java/org/apache/commons/io/FilenameUtilsTestCase.java",
                    "full name": "src.test.java.org.apache.commons.io.FilenameUtilsTestCase.testGetBaseName_with_nullByte"
                },
                {
                    "function name": "testGetPathNoEndSeparator",
                    "function params": [],
                    "file name": "FilenameUtilsTestCase.java",
                    "file old path": "src/test/java/org/apache/commons/io/FilenameUtilsTestCase.java",
                    "file new path": "src/test/java/org/apache/commons/io/FilenameUtilsTestCase.java",
                    "full name": "src.test.java.org.apache.commons.io.FilenameUtilsTestCase.testGetPathNoEndSeparator"
                },
                {
                    "function name": "testGetPrefix",
                    "function params": [],
                    "file name": "FilenameUtilsTestCase.java",
                    "file old path": "src/test/java/org/apache/commons/io/FilenameUtilsTestCase.java",
                    "file new path": "src/test/java/org/apache/commons/io/FilenameUtilsTestCase.java",
                    "full name": "src.test.java.org.apache.commons.io.FilenameUtilsTestCase.testGetPrefix"
                },
                {
                    "function name": "testGetBaseName",
                    "function params": [],
                    "file name": "FilenameUtilsTestCase.java",
                    "file old path": "src/test/java/org/apache/commons/io/FilenameUtilsTestCase.java",
                    "file new path": "src/test/java/org/apache/commons/io/FilenameUtilsTestCase.java",
                    "full name": "src.test.java.org.apache.commons.io.FilenameUtilsTestCase.testGetBaseName"
                },
                {
                    "function name": "testNormalize_with_nullbytes",
                    "function params": [],
                    "file name": "FilenameUtilsTestCase.java",
                    "file old path": "src/test/java/org/apache/commons/io/FilenameUtilsTestCase.java",
                    "file new path": "src/test/java/org/apache/commons/io/FilenameUtilsTestCase.java",
                    "full name": "src.test.java.org.apache.commons.io.FilenameUtilsTestCase.testNormalize_with_nullbytes"
                },
                {
                    "function name": "testGetPrefix_with_nullbyte",
                    "function params": [],
                    "file name": "FilenameUtilsTestCase.java",
                    "file old path": "src/test/java/org/apache/commons/io/FilenameUtilsTestCase.java",
                    "file new path": "src/test/java/org/apache/commons/io/FilenameUtilsTestCase.java",
                    "full name": "src.test.java.org.apache.commons.io.FilenameUtilsTestCase.testGetPrefix_with_nullbyte"
                },
                {
                    "function name": "testGetName",
                    "function params": [],
                    "file name": "FilenameUtilsTestCase.java",
                    "file old path": "src/test/java/org/apache/commons/io/FilenameUtilsTestCase.java",
                    "file new path": "src/test/java/org/apache/commons/io/FilenameUtilsTestCase.java",
                    "full name": "src.test.java.org.apache.commons.io.FilenameUtilsTestCase.testGetName"
                },
                {
                    "function name": "testGetPathNoEndSeparator_with_null_byte",
                    "function params": [],
                    "file name": "FilenameUtilsTestCase.java",
                    "file old path": "src/test/java/org/apache/commons/io/FilenameUtilsTestCase.java",
                    "file new path": "src/test/java/org/apache/commons/io/FilenameUtilsTestCase.java",
                    "full name": "src.test.java.org.apache.commons.io.FilenameUtilsTestCase.testGetPathNoEndSeparator_with_null_byte"
                }
            ],
            "files that changed": [
                "src/main/java/org/apache/commons/io/FilenameUtils.java",
                "src/test/java/org/apache/commons/io/FilenameUtilsTestCase.java"
            ]
        },
        {
            "bug index": "150",
            "bug id": "IO-484",
            "hexsha": "d9406824aeba0e977c0692971a6dbb2e62823886",
            "fix_hash": "76e45d6a50da6228c44b04a565dca96432c4b197",
            "description": "embedding nulls in filenames exposes injection vectors if the application passes unsanitized data to some functions in FileNameUtils",
            "commit number version hash": 1288,
            "commit number": 1245,
            "function that changed": [
                {
                    "function name": "doGetPath",
                    "function params": [
                        "filename",
                        "separatorAdd"
                    ],
                    "file name": "FilenameUtils.java",
                    "file old path": "src/main/java/org/apache/commons/io/FilenameUtils.java",
                    "file new path": "src/main/java/org/apache/commons/io/FilenameUtils.java",
                    "full name": "src.main.java.org.apache.commons.io.FilenameUtils.doGetPath"
                },
                {
                    "function name": "getPrefix",
                    "function params": [
                        "filename"
                    ],
                    "file name": "FilenameUtils.java",
                    "file old path": "src/main/java/org/apache/commons/io/FilenameUtils.java",
                    "file new path": "src/main/java/org/apache/commons/io/FilenameUtils.java",
                    "full name": "src.main.java.org.apache.commons.io.FilenameUtils.getPrefix"
                },
                {
                    "function name": "testGetPath",
                    "function params": [],
                    "file name": "FilenameUtilsTestCase.java",
                    "file old path": "src/test/java/org/apache/commons/io/FilenameUtilsTestCase.java",
                    "file new path": "src/test/java/org/apache/commons/io/FilenameUtilsTestCase.java",
                    "full name": "src.test.java.org.apache.commons.io.FilenameUtilsTestCase.testGetPath"
                },
                {
                    "function name": "testGetPrefix",
                    "function params": [],
                    "file name": "FilenameUtilsTestCase.java",
                    "file old path": "src/test/java/org/apache/commons/io/FilenameUtilsTestCase.java",
                    "file new path": "src/test/java/org/apache/commons/io/FilenameUtilsTestCase.java",
                    "full name": "src.test.java.org.apache.commons.io.FilenameUtilsTestCase.testGetPrefix"
                },
                {
                    "function name": "testGetPathNoEndSeparator",
                    "function params": [],
                    "file name": "FilenameUtilsTestCase.java",
                    "file old path": "src/test/java/org/apache/commons/io/FilenameUtilsTestCase.java",
                    "file new path": "src/test/java/org/apache/commons/io/FilenameUtilsTestCase.java",
                    "full name": "src.test.java.org.apache.commons.io.FilenameUtilsTestCase.testGetPathNoEndSeparator"
                }
            ],
            "files that changed": [
                "src/main/java/org/apache/commons/io/FilenameUtils.java",
                "src/test/java/org/apache/commons/io/FilenameUtilsTestCase.java"
            ]
        },
        {
            "bug index": "151",
            "bug id": "IO-484",
            "hexsha": "d9406824aeba0e977c0692971a6dbb2e62823886",
            "fix_hash": "afe78a030b57e3f74825e134d6615ef4878778cc",
            "description": "embedding nulls in filenames exposes injection vectors if the application passes unsanitized data to some functions in FileNameUtils",
            "commit number version hash": 1288,
            "commit number": 1244,
            "function that changed": [
                {
                    "function name": "getName",
                    "function params": [
                        "filename"
                    ],
                    "file name": "FilenameUtils.java",
                    "file old path": "src/main/java/org/apache/commons/io/FilenameUtils.java",
                    "file new path": "src/main/java/org/apache/commons/io/FilenameUtils.java",
                    "full name": "src.main.java.org.apache.commons.io.FilenameUtils.getName"
                },
                {
                    "function name": "isExtension",
                    "function params": [
                        "filename",
                        "extensions"
                    ],
                    "file name": "FilenameUtils.java",
                    "file old path": "src/main/java/org/apache/commons/io/FilenameUtils.java",
                    "file new path": "src/main/java/org/apache/commons/io/FilenameUtils.java",
                    "full name": "src.main.java.org.apache.commons.io.FilenameUtils.isExtension"
                },
                {
                    "function name": "isExtension",
                    "function params": [
                        "filename",
                        "extensions"
                    ],
                    "file name": "FilenameUtils.java",
                    "file old path": "src/main/java/org/apache/commons/io/FilenameUtils.java",
                    "file new path": "src/main/java/org/apache/commons/io/FilenameUtils.java",
                    "full name": "src.main.java.org.apache.commons.io.FilenameUtils.isExtension"
                },
                {
                    "function name": "removeExtension",
                    "function params": [
                        "filename"
                    ],
                    "file name": "FilenameUtils.java",
                    "file old path": "src/main/java/org/apache/commons/io/FilenameUtils.java",
                    "file new path": "src/main/java/org/apache/commons/io/FilenameUtils.java",
                    "full name": "src.main.java.org.apache.commons.io.FilenameUtils.removeExtension"
                },
                {
                    "function name": "isExtension",
                    "function params": [
                        "filename",
                        "extension"
                    ],
                    "file name": "FilenameUtils.java",
                    "file old path": "src/main/java/org/apache/commons/io/FilenameUtils.java",
                    "file new path": "src/main/java/org/apache/commons/io/FilenameUtils.java",
                    "full name": "src.main.java.org.apache.commons.io.FilenameUtils.isExtension"
                },
                {
                    "function name": "filterNullBytes",
                    "function params": [
                        "path"
                    ],
                    "file name": "FilenameUtils.java",
                    "file old path": "src/main/java/org/apache/commons/io/FilenameUtils.java",
                    "file new path": "src/main/java/org/apache/commons/io/FilenameUtils.java",
                    "full name": "src.main.java.org.apache.commons.io.FilenameUtils.filterNullBytes"
                },
                {
                    "function name": "failIfNullBytePresent",
                    "function params": [
                        "path"
                    ],
                    "file name": "FilenameUtils.java",
                    "file old path": "src/main/java/org/apache/commons/io/FilenameUtils.java",
                    "file new path": "src/main/java/org/apache/commons/io/FilenameUtils.java",
                    "full name": "src.main.java.org.apache.commons.io.FilenameUtils.failIfNullBytePresent"
                },
                {
                    "function name": "doNormalize",
                    "function params": [
                        "filename",
                        "separator",
                        "keepSeparator"
                    ],
                    "file name": "FilenameUtils.java",
                    "file old path": "src/main/java/org/apache/commons/io/FilenameUtils.java",
                    "file new path": "src/main/java/org/apache/commons/io/FilenameUtils.java",
                    "full name": "src.main.java.org.apache.commons.io.FilenameUtils.doNormalize"
                },
                {
                    "function name": "testGetBaseName",
                    "function params": [],
                    "file name": "FilenameUtilsTestCase.java",
                    "file old path": "src/test/java/org/apache/commons/io/FilenameUtilsTestCase.java",
                    "file new path": "src/test/java/org/apache/commons/io/FilenameUtilsTestCase.java",
                    "full name": "src.test.java.org.apache.commons.io.FilenameUtilsTestCase.testGetBaseName"
                },
                {
                    "function name": "testNormalize",
                    "function params": [],
                    "file name": "FilenameUtilsTestCase.java",
                    "file old path": "src/test/java/org/apache/commons/io/FilenameUtilsTestCase.java",
                    "file new path": "src/test/java/org/apache/commons/io/FilenameUtilsTestCase.java",
                    "full name": "src.test.java.org.apache.commons.io.FilenameUtilsTestCase.testNormalize"
                },
                {
                    "function name": "testGetName",
                    "function params": [],
                    "file name": "FilenameUtilsTestCase.java",
                    "file old path": "src/test/java/org/apache/commons/io/FilenameUtilsTestCase.java",
                    "file new path": "src/test/java/org/apache/commons/io/FilenameUtilsTestCase.java",
                    "full name": "src.test.java.org.apache.commons.io.FilenameUtilsTestCase.testGetName"
                },
                {
                    "function name": "testIsExtension_injection",
                    "function params": [],
                    "file name": "FilenameUtilsTestCase.java",
                    "file old path": "src/test/java/org/apache/commons/io/FilenameUtilsTestCase.java",
                    "file new path": "src/test/java/org/apache/commons/io/FilenameUtilsTestCase.java",
                    "full name": "src.test.java.org.apache.commons.io.FilenameUtilsTestCase.testIsExtension_injection"
                }
            ],
            "files that changed": [
                "src/main/java/org/apache/commons/io/FilenameUtils.java",
                "src/test/java/org/apache/commons/io/FilenameUtilsTestCase.java"
            ]
        },
        {
            "bug index": "152",
            "bug id": "IO-481",
            "hexsha": "d9406824aeba0e977c0692971a6dbb2e62823886",
            "fix_hash": "8700816250e849d9f8d0fc402b090aec6ba7ab60",
            "description": "The timing algorithm is basically broken, since Thread.sleep is imprecise. There is also a counter error in the looping code. \n\nThe following testcase will never run in less than 4 seconds on my machine\n\n  public void testRealWallTime() {\n        long start = System.currentTimeMillis();\n        FileUtils.waitFor(new File(\"\"), 2);\n        System.out.println(\"elapsed = \" + (System.currentTimeMillis() - start));\n    }",
            "commit number version hash": 1288,
            "commit number": 1235,
            "function that changed": [
                {
                    "function name": "waitFor",
                    "function params": [
                        "file",
                        "seconds"
                    ],
                    "file name": "FileUtils.java",
                    "file old path": "src/main/java/org/apache/commons/io/FileUtils.java",
                    "file new path": "src/main/java/org/apache/commons/io/FileUtils.java",
                    "full name": "src.main.java.org.apache.commons.io.FileUtils.waitFor"
                }
            ],
            "files that changed": [
                "src/main/java/org/apache/commons/io/FileUtils.java"
            ]
        },
        {
            "bug index": "153",
            "bug id": "IO-428",
            "hexsha": "d9406824aeba0e977c0692971a6dbb2e62823886",
            "fix_hash": "539869352a5f4183028a3e6b33b4e002c5053ba4",
            "description": "If the {{skip}} method of {{BOMInputStream}} is used on a stream without a BOM, {{skip}} returns the wrong number of bytes (n - max(BOM-length)). This can lead to problems if the return value is evaluated for example from guava {{ByteStreams.skipFully}}.\n\n{code:title=BomTest.java}\npublic class BomTest {\n\n\tprivate static InputStream createInputStream(boolean addBOM) {\n\t\tByteBuffer bb = ByteBuffer.allocate(64);\n\t\tif (addBOM) {\n\t\t\t// UTF-8 BOM\n\t\t\tbb.put(new byte[] { (byte) 0xEF, (byte) 0xBB, (byte) 0xBF });\n\t\t}\n\t\tbb.put((byte) 0x31);\n\t\tbb.put((byte) 0x32);\n\t\tbb.put((byte) 0x33);\n\t\treturn new ByteArrayInputStream(bb.array());\n\t}\n\t\n\tpublic static void main(String[] args) throws IOException {\n\t\tBOMInputStream is1 = new BOMInputStream(createInputStream(true));\n\t\tassertEquals(2, is1.skip(2));\n\t\tassertEquals((byte) 0x33, is1.read());\n\t\t\n\t\tBOMInputStream is2 = new BOMInputStream(createInputStream(false));\n\t\tassertEquals(2, is2.skip(2)); // fails here - skip returns 0\n\t\tassertEquals((byte) 0x33, is2.read());\n\t}\n\t\n}\n{code}\n\nI catched this bug in 2.0.1, but as far as I can see on the source 2.5 is still affected.\n\nI suggest the following change to the {{skip}} method:\n{code:title=BOMInputStream.java}\n    public long skip(long n) throws IOException {\n    \tint skipped = 0;\n        while ((n > skipped) && (readFirstBytes() >= 0)) {\n            skipped++;\n        }\n        return in.skip(n - skipped) + skipped;\n    }\n{code}",
            "commit number version hash": 1288,
            "commit number": 1226,
            "function that changed": [
                {
                    "function name": "skip",
                    "function params": [
                        "n"
                    ],
                    "file name": "BOMInputStream.java",
                    "file old path": "src/main/java/org/apache/commons/io/input/BOMInputStream.java",
                    "file new path": "src/main/java/org/apache/commons/io/input/BOMInputStream.java",
                    "full name": "src.main.java.org.apache.commons.io.input.BOMInputStream.skip"
                },
                {
                    "function name": "lengthWithNoBOM",
                    "function params": [],
                    "file name": "BOMInputStreamTest.java",
                    "file old path": "src/test/java/org/apache/commons/io/input/BOMInputStreamTest.java",
                    "file new path": "src/test/java/org/apache/commons/io/input/BOMInputStreamTest.java",
                    "full name": "src.test.java.org.apache.commons.io.input.BOMInputStreamTest.lengthWithNoBOM"
                },
                {
                    "function name": "createInputStream",
                    "function params": [
                        "addBOM"
                    ],
                    "file name": "BOMInputStreamTest.java",
                    "file old path": "src/test/java/org/apache/commons/io/input/BOMInputStreamTest.java",
                    "file new path": "src/test/java/org/apache/commons/io/input/BOMInputStreamTest.java",
                    "full name": "src.test.java.org.apache.commons.io.input.BOMInputStreamTest.createInputStream"
                }
            ],
            "files that changed": [
                "src/main/java/org/apache/commons/io/input/BOMInputStream.java",
                "src/test/java/org/apache/commons/io/input/BOMInputStreamTest.java"
            ]
        },
        {
            "bug index": "154",
            "bug id": "IO-466",
            "hexsha": "364c2bf7f42e7679d910548d931be24332eaf6ad",
            "fix_hash": "67325cf97946f053da51dd358a9ffca0a9676c03",
            "description": "Consider the following:\n{code:java}\nFile fooDir = new File(\"/temp/foo\");\nFile fooFile = new File(\"/temp/foo.txt\");\nFileUtils.directoryContains(fooDir, fooFile); // returns true, should return false\n{code}\n\nfooFile is a sibling of fooDir.  fooDir does not contain fooFile.\n\nThis is due to the way FilenameUtils.directoryContains is implemented in that this method uses a simple 'startsWith' comparison.  A related bug is filed for the FilenameUtils method that I believe should be fixed as well.",
            "commit number version hash": 990,
            "commit number": 1218,
            "function that changed": [
                {
                    "function name": "testIO466",
                    "function params": [],
                    "file name": "FileUtilsDirectoryContainsTestCase.java",
                    "file old path": "src/test/java/org/apache/commons/io/FileUtilsDirectoryContainsTestCase.java",
                    "file new path": "src/test/java/org/apache/commons/io/FileUtilsDirectoryContainsTestCase.java",
                    "full name": "src.test.java.org.apache.commons.io.FileUtilsDirectoryContainsTestCase.testIO466"
                }
            ],
            "files that changed": [
                "src/test/java/org/apache/commons/io/FileUtilsDirectoryContainsTestCase.java"
            ]
        },
        {
            "bug index": "157",
            "bug id": "IO-8",
            "hexsha": "742c51feeaf75542ab9db6782ad3d2ad506fb871",
            "fix_hash": "a4594450b64b104553edb9f8c8c3f3f82b0cfb07",
            "description": "The bug is described by a one-line code      \n\nFileUtils.copyFile(new File(\"c:/hello.txt\"), new File(\"c:/hello.txt\"));\n\nTry run it and check hello.txt size before and after: you will find\nthat the file has been razed to 0 bytes.\n\nIt should be illegal to copy a file with the same path as the destination,\nor better, with the same getCanonicalPath(), so I suggest the following \nenhancement:\n\n------------ in FileUtils.java -------------\n\n\n\n        //make sure we can write to destination\n        if (destination.exists() && !destination.canWrite()) {\n            String message =\n                \"Unable to open file \" + destination + \" for writing.\";\n            throw new IOException(message);\n        }\n        \n        //makes sure it is not the same file        \n        if(source.getCanonicalPath().equals(destination.getCanonicalPath())) {\n            String message =\n                \"Unable to write file \" + source + \" on itself.\";\n            throw new IOException(message);\n            \n        }\n\n-- end --\nthis code should be safe regarding path and canonical path: you\nare querying OS after existence test, and anyway you are sure\nthat there is a source file and it has a canonical path.\n(anyway getCanonicalPath throws a IOException, which is sound\nin the context)\n\nhope this may help\ndaniele rizzi (drizzi@largesys.it)",
            "commit number version hash": 443,
            "commit number": 1203,
            "function that changed": [],
            "files that changed": [
                "src/main/java/org/apache/commons/io/output/CloseShieldOutputStream.java"
            ]
        },
        {
            "bug index": "158",
            "bug id": "IO-8",
            "hexsha": "742c51feeaf75542ab9db6782ad3d2ad506fb871",
            "fix_hash": "11580a9ab6fd81cf832f52e2713fc0273dd70a13",
            "description": "The bug is described by a one-line code      \n\nFileUtils.copyFile(new File(\"c:/hello.txt\"), new File(\"c:/hello.txt\"));\n\nTry run it and check hello.txt size before and after: you will find\nthat the file has been razed to 0 bytes.\n\nIt should be illegal to copy a file with the same path as the destination,\nor better, with the same getCanonicalPath(), so I suggest the following \nenhancement:\n\n------------ in FileUtils.java -------------\n\n\n\n        //make sure we can write to destination\n        if (destination.exists() && !destination.canWrite()) {\n            String message =\n                \"Unable to open file \" + destination + \" for writing.\";\n            throw new IOException(message);\n        }\n        \n        //makes sure it is not the same file        \n        if(source.getCanonicalPath().equals(destination.getCanonicalPath())) {\n            String message =\n                \"Unable to write file \" + source + \" on itself.\";\n            throw new IOException(message);\n            \n        }\n\n-- end --\nthis code should be safe regarding path and canonical path: you\nare querying OS after existence test, and anyway you are sure\nthat there is a source file and it has a canonical path.\n(anyway getCanonicalPath throws a IOException, which is sound\nin the context)\n\nhope this may help\ndaniele rizzi (drizzi@largesys.it)",
            "commit number version hash": 443,
            "commit number": 1202,
            "function that changed": [],
            "files that changed": [
                "src/main/java/org/apache/commons/io/output/NullOutputStream.java"
            ]
        },
        {
            "bug index": "159",
            "bug id": "IO-462",
            "hexsha": "d9406824aeba0e977c0692971a6dbb2e62823886",
            "fix_hash": "27c4c88da63eeedf546d6a4df5f8cddd43069537",
            "description": "The class IOExceptionWithCause is no longer needed in Java 6, because IOException now includes a constructor that takes a Throwable.\n\nThe class should be deprecated and internal usage can revert to using IOException directly.",
            "commit number version hash": 1288,
            "commit number": 1194,
            "function that changed": [
                {
                    "function name": "IOExceptionWithCause",
                    "function params": [
                        "cause"
                    ],
                    "file name": "IOExceptionWithCause.java",
                    "file old path": "src/main/java/org/apache/commons/io/IOExceptionWithCause.java",
                    "file new path": "src/main/java/org/apache/commons/io/IOExceptionWithCause.java",
                    "full name": "src.main.java.org.apache.commons.io.IOExceptionWithCause.IOExceptionWithCause"
                },
                {
                    "function name": "IOExceptionWithCause",
                    "function params": [
                        "message",
                        "cause"
                    ],
                    "file name": "IOExceptionWithCause.java",
                    "file old path": "src/main/java/org/apache/commons/io/IOExceptionWithCause.java",
                    "file new path": "src/main/java/org/apache/commons/io/IOExceptionWithCause.java",
                    "full name": "src.main.java.org.apache.commons.io.IOExceptionWithCause.IOExceptionWithCause"
                }
            ],
            "files that changed": [
                "src/main/java/org/apache/commons/io/IOExceptionWithCause.java"
            ]
        },
        {
            "bug index": "160",
            "bug id": "IO-453",
            "hexsha": "d9406824aeba0e977c0692971a6dbb2e62823886",
            "fix_hash": "baba8cc875f5b197c08123b2d9add4cec3772300",
            "description": "FileUtils.readFileToString has changed it's behavior to make a call from {{IOUtils.toByteArray(in)}} to {{IOUtils.toByteArray(in, file.length())}} in {{FileUtils.readFileToString}}. This is a regression because if the file.length = 0, then it will return 0. According to the javadocs for [File#length|http://docs.oracle.com/javase/6/docs/api/java/io/File.html#length()], it is possible to return 0 if it is a System dependent entities, so even though the File.length might return 0, the stream is still open and  \n\nSteps to reproduce (Ubuntu):\n1. Execute {{nohup sleep 10000 &}} in a terminal, and get the process id of the sleep command ({{ps -ef | grep sleep}}).\n2. Call {{FileUtils.readFileToString(new File(\"/proc/$PID/environ\"));}} where $PID is the process ID from step 1.\n\nYou will notice that in 2.0.1 it returns several elements, however in 2.1 it will return nothing.\n\nSee [~ndeloof]'s comment in https://github.com/apache/commons-io/commit/53a40a6d9dcaaa616b404255406edc30fe2d524c.",
            "commit number version hash": 1288,
            "commit number": 1179,
            "function that changed": [
                {
                    "function name": "readFileToByteArray",
                    "function params": [
                        "file"
                    ],
                    "file name": "FileUtils.java",
                    "file old path": "src/main/java/org/apache/commons/io/FileUtils.java",
                    "file new path": "src/main/java/org/apache/commons/io/FileUtils.java",
                    "full name": "src.main.java.org.apache.commons.io.FileUtils.readFileToByteArray"
                }
            ],
            "files that changed": [
                "src/main/java/org/apache/commons/io/FileUtils.java"
            ]
        },
        {
            "bug index": "161",
            "bug id": "IO-436",
            "hexsha": "d9406824aeba0e977c0692971a6dbb2e62823886",
            "fix_hash": "c4a7e644a5fc43210fa0a563e9087347e3eef67d",
            "description": "The method FilenameUtils.indexOfExtension contains this JavaDoc comment:\n\n  \\* @param filename  the filename to find the last path separator in, null returns -1\n  \\* @return the index of the last separator character, or -1 if there\n  \\* is no such character\n\nThis comment was obviously copied from the FilenameUtils.indexOfLastSeparator method, where it makes perfect sense.\n\nThe JavaDoc comment for FilenameUtils.indexOfExtension should rather read e.g. as follows:\n\n  \\* @param filename  the filename to find the last extension separator in, null returns -1\n  \\* @return the index of the last extension separator character, or -1 if there\n  \\* is no such character",
            "commit number version hash": 1288,
            "commit number": 1162,
            "function that changed": [],
            "files that changed": [
                "src/main/java/org/apache/commons/io/FilenameUtils.java"
            ]
        },
        {
            "bug index": "162",
            "bug id": "IO-424",
            "hexsha": "d9406824aeba0e977c0692971a6dbb2e62823886",
            "fix_hash": "279f0c652ae48942b37dc87529ee2a40a68a4cc9",
            "description": null,
            "commit number version hash": 1288,
            "commit number": 1159,
            "function that changed": [],
            "files that changed": [
                "src/main/java/org/apache/commons/io/FileCleaner.java",
                "src/main/java/org/apache/commons/io/FileCleaningTracker.java"
            ]
        },
        {
            "bug index": "163",
            "bug id": "IO-424",
            "hexsha": "d9406824aeba0e977c0692971a6dbb2e62823886",
            "fix_hash": "4da8e8ad1d29f542306e3766511fe0c6e1e3eacb",
            "description": null,
            "commit number version hash": 1288,
            "commit number": 1156,
            "function that changed": [],
            "files that changed": [
                "src/main/java/org/apache/commons/io/input/Tailer.java"
            ]
        },
        {
            "bug index": "164",
            "bug id": "IO-424",
            "hexsha": "d9406824aeba0e977c0692971a6dbb2e62823886",
            "fix_hash": "bf545e4dd3a0414879b5707c8750613c24db8730",
            "description": null,
            "commit number version hash": 1288,
            "commit number": 1155,
            "function that changed": [],
            "files that changed": [
                "src/main/java/org/apache/commons/io/Charsets.java",
                "src/main/java/org/apache/commons/io/CopyUtils.java",
                "src/main/java/org/apache/commons/io/FileDeleteStrategy.java",
                "src/main/java/org/apache/commons/io/FileUtils.java",
                "src/main/java/org/apache/commons/io/FilenameUtils.java",
                "src/main/java/org/apache/commons/io/IOUtils.java",
                "src/main/java/org/apache/commons/io/ThreadMonitor.java",
                "src/main/java/org/apache/commons/io/filefilter/MagicNumberFileFilter.java",
                "src/main/java/org/apache/commons/io/filefilter/RegexFileFilter.java",
                "src/main/java/org/apache/commons/io/filefilter/WildcardFileFilter.java",
                "src/main/java/org/apache/commons/io/filefilter/WildcardFilter.java",
                "src/main/java/org/apache/commons/io/input/NullInputStream.java",
                "src/main/java/org/apache/commons/io/input/NullReader.java",
                "src/main/java/org/apache/commons/io/input/Tailer.java"
            ]
        },
        {
            "bug index": "165",
            "bug id": "IO-395",
            "hexsha": "d9406824aeba0e977c0692971a6dbb2e62823886",
            "fix_hash": "9e151155a15598494079b08e0385aebbd050b999",
            "description": "Would be great if there was an environmental variable that could be set that would set the size of the IO Utils toBufferedInputStream/Writer for all invocations.",
            "commit number version hash": 1288,
            "commit number": 1151,
            "function that changed": [
                {
                    "function name": "buffer",
                    "function params": [
                        "outputStream",
                        "size"
                    ],
                    "file name": "IOUtils.java",
                    "file old path": "src/main/java/org/apache/commons/io/IOUtils.java",
                    "file new path": "src/main/java/org/apache/commons/io/IOUtils.java",
                    "full name": "src.main.java.org.apache.commons.io.IOUtils.buffer"
                },
                {
                    "function name": "buffer",
                    "function params": [
                        "writer",
                        "size"
                    ],
                    "file name": "IOUtils.java",
                    "file old path": "src/main/java/org/apache/commons/io/IOUtils.java",
                    "file new path": "src/main/java/org/apache/commons/io/IOUtils.java",
                    "full name": "src.main.java.org.apache.commons.io.IOUtils.buffer"
                },
                {
                    "function name": "buffer",
                    "function params": [
                        "reader",
                        "size"
                    ],
                    "file name": "IOUtils.java",
                    "file old path": "src/main/java/org/apache/commons/io/IOUtils.java",
                    "file new path": "src/main/java/org/apache/commons/io/IOUtils.java",
                    "full name": "src.main.java.org.apache.commons.io.IOUtils.buffer"
                },
                {
                    "function name": "toBufferedInputStream",
                    "function params": [
                        "input",
                        "size"
                    ],
                    "file name": "IOUtils.java",
                    "file old path": "src/main/java/org/apache/commons/io/IOUtils.java",
                    "file new path": "src/main/java/org/apache/commons/io/IOUtils.java",
                    "full name": "src.main.java.org.apache.commons.io.IOUtils.toBufferedInputStream"
                },
                {
                    "function name": "buffer",
                    "function params": [
                        "inputStream",
                        "size"
                    ],
                    "file name": "IOUtils.java",
                    "file old path": "src/main/java/org/apache/commons/io/IOUtils.java",
                    "file new path": "src/main/java/org/apache/commons/io/IOUtils.java",
                    "full name": "src.main.java.org.apache.commons.io.IOUtils.buffer"
                },
                {
                    "function name": "toBufferedReader",
                    "function params": [
                        "reader",
                        "size"
                    ],
                    "file name": "IOUtils.java",
                    "file old path": "src/main/java/org/apache/commons/io/IOUtils.java",
                    "file new path": "src/main/java/org/apache/commons/io/IOUtils.java",
                    "full name": "src.main.java.org.apache.commons.io.IOUtils.toBufferedReader"
                },
                {
                    "function name": "toBufferedInputStream",
                    "function params": [
                        "input",
                        "size"
                    ],
                    "file name": "ByteArrayOutputStream.java",
                    "file old path": "src/main/java/org/apache/commons/io/output/ByteArrayOutputStream.java",
                    "file new path": "src/main/java/org/apache/commons/io/output/ByteArrayOutputStream.java",
                    "full name": "src.main.java.org.apache.commons.io.output.ByteArrayOutputStream.toBufferedInputStream"
                },
                {
                    "function name": "toBufferedInputStream",
                    "function params": [
                        "input"
                    ],
                    "file name": "ByteArrayOutputStream.java",
                    "file old path": "src/main/java/org/apache/commons/io/output/ByteArrayOutputStream.java",
                    "file new path": "src/main/java/org/apache/commons/io/output/ByteArrayOutputStream.java",
                    "full name": "src.main.java.org.apache.commons.io.output.ByteArrayOutputStream.toBufferedInputStream"
                },
                {
                    "function name": "testAsBufferedInputStreamWithBufferSize",
                    "function params": [],
                    "file name": "IOUtilsTestCase.java",
                    "file old path": "src/test/java/org/apache/commons/io/IOUtilsTestCase.java",
                    "file new path": "src/test/java/org/apache/commons/io/IOUtilsTestCase.java",
                    "full name": "src.test.java.org.apache.commons.io.IOUtilsTestCase.testAsBufferedInputStreamWithBufferSize"
                },
                {
                    "function name": "testAsBufferedOutputStreamWithBufferSize",
                    "function params": [],
                    "file name": "IOUtilsTestCase.java",
                    "file old path": "src/test/java/org/apache/commons/io/IOUtilsTestCase.java",
                    "file new path": "src/test/java/org/apache/commons/io/IOUtilsTestCase.java",
                    "full name": "src.test.java.org.apache.commons.io.IOUtilsTestCase.testAsBufferedOutputStreamWithBufferSize"
                },
                {
                    "function name": "testAsBufferedWriterWithBufferSize",
                    "function params": [],
                    "file name": "IOUtilsTestCase.java",
                    "file old path": "src/test/java/org/apache/commons/io/IOUtilsTestCase.java",
                    "file new path": "src/test/java/org/apache/commons/io/IOUtilsTestCase.java",
                    "full name": "src.test.java.org.apache.commons.io.IOUtilsTestCase.testAsBufferedWriterWithBufferSize"
                },
                {
                    "function name": "testAsBufferedReaderWithBufferSize",
                    "function params": [],
                    "file name": "IOUtilsTestCase.java",
                    "file old path": "src/test/java/org/apache/commons/io/IOUtilsTestCase.java",
                    "file new path": "src/test/java/org/apache/commons/io/IOUtilsTestCase.java",
                    "full name": "src.test.java.org.apache.commons.io.IOUtilsTestCase.testAsBufferedReaderWithBufferSize"
                },
                {
                    "function name": "testToBufferedInputStreamWithBufferSize_InputStream",
                    "function params": [],
                    "file name": "IOUtilsTestCase.java",
                    "file old path": "src/test/java/org/apache/commons/io/IOUtilsTestCase.java",
                    "file new path": "src/test/java/org/apache/commons/io/IOUtilsTestCase.java",
                    "full name": "src.test.java.org.apache.commons.io.IOUtilsTestCase.testToBufferedInputStreamWithBufferSize_InputStream"
                }
            ],
            "files that changed": [
                "src/main/java/org/apache/commons/io/IOUtils.java",
                "src/main/java/org/apache/commons/io/output/ByteArrayOutputStream.java",
                "src/test/java/org/apache/commons/io/IOUtilsTestCase.java"
            ]
        },
        {
            "bug index": "166",
            "bug id": "IO-389",
            "hexsha": "d9406824aeba0e977c0692971a6dbb2e62823886",
            "fix_hash": "70e051946c4f3700cce3a0e1906a5371e24f7d84",
            "description": "FileUtils.sizeOfDirectory has a small concurrency issue. Between the call to File.listFiles and the call to FileUtils.sizeOf, a file may be deleted. This can cause FileUtils.sizeOf to throw an IllegalArgumentException, indicating that the file does not exist.",
            "commit number version hash": 1288,
            "commit number": 1146,
            "function that changed": [
                {
                    "function name": "sizeOfDirectory",
                    "function params": [
                        "directory"
                    ],
                    "file name": "FileUtils.java",
                    "file old path": "src/main/java/org/apache/commons/io/FileUtils.java",
                    "file new path": "src/main/java/org/apache/commons/io/FileUtils.java",
                    "full name": "src.main.java.org.apache.commons.io.FileUtils.sizeOfDirectory"
                },
                {
                    "function name": "sizeOf",
                    "function params": [
                        "file"
                    ],
                    "file name": "FileUtils.java",
                    "file old path": "src/main/java/org/apache/commons/io/FileUtils.java",
                    "file new path": "src/main/java/org/apache/commons/io/FileUtils.java",
                    "full name": "src.main.java.org.apache.commons.io.FileUtils.sizeOf"
                },
                {
                    "function name": "sizeOf0",
                    "function params": [
                        "file"
                    ],
                    "file name": "FileUtils.java",
                    "file old path": "src/main/java/org/apache/commons/io/FileUtils.java",
                    "file new path": "src/main/java/org/apache/commons/io/FileUtils.java",
                    "full name": "src.main.java.org.apache.commons.io.FileUtils.sizeOf0"
                },
                {
                    "function name": "sizeOfDirectory0",
                    "function params": [
                        "directory"
                    ],
                    "file name": "FileUtils.java",
                    "file old path": "src/main/java/org/apache/commons/io/FileUtils.java",
                    "file new path": "src/main/java/org/apache/commons/io/FileUtils.java",
                    "full name": "src.main.java.org.apache.commons.io.FileUtils.sizeOfDirectory0"
                }
            ],
            "files that changed": [
                "src/main/java/org/apache/commons/io/FileUtils.java"
            ]
        },
        {
            "bug index": "167",
            "bug id": "IO-390",
            "hexsha": "d9406824aeba0e977c0692971a6dbb2e62823886",
            "fix_hash": "7ae7af989df7c0754f92b54c5f6470bf2d234c9c",
            "description": "FileUtils.sizeOfDirectoryAsBigInteger can overflow.\n\nThis is because it calls FileUtils.sizeOf(file) which calls sizeOfDirectory() for processing subdirectories.\n\nAs it stands, the method only works properly at the top level.\n\nA possible solution would be to create private \"Big\" versions of the called methods; these would not need all the checks so should be faster.",
            "commit number version hash": 1288,
            "commit number": 1145,
            "function that changed": [
                {
                    "function name": "sizeOfDirectoryAsBigInteger",
                    "function params": [
                        "directory"
                    ],
                    "file name": "FileUtils.java",
                    "file old path": "src/main/java/org/apache/commons/io/FileUtils.java",
                    "file new path": "src/main/java/org/apache/commons/io/FileUtils.java",
                    "full name": "src.main.java.org.apache.commons.io.FileUtils.sizeOfDirectoryAsBigInteger"
                },
                {
                    "function name": "sizeOfDirectoryBig0",
                    "function params": [
                        "directory"
                    ],
                    "file name": "FileUtils.java",
                    "file old path": "src/main/java/org/apache/commons/io/FileUtils.java",
                    "file new path": "src/main/java/org/apache/commons/io/FileUtils.java",
                    "full name": "src.main.java.org.apache.commons.io.FileUtils.sizeOfDirectoryBig0"
                },
                {
                    "function name": "sizeOBig0",
                    "function params": [
                        "fileOrDir"
                    ],
                    "file name": "FileUtils.java",
                    "file old path": "src/main/java/org/apache/commons/io/FileUtils.java",
                    "file new path": "src/main/java/org/apache/commons/io/FileUtils.java",
                    "full name": "src.main.java.org.apache.commons.io.FileUtils.sizeOBig0"
                },
                {
                    "function name": "sizeOfAsBigInteger",
                    "function params": [
                        "file"
                    ],
                    "file name": "FileUtils.java",
                    "file old path": "src/main/java/org/apache/commons/io/FileUtils.java",
                    "file new path": "src/main/java/org/apache/commons/io/FileUtils.java",
                    "full name": "src.main.java.org.apache.commons.io.FileUtils.sizeOfAsBigInteger"
                },
                {
                    "function name": "testCompareSizeOf",
                    "function params": [],
                    "file name": "FileUtilsTestCase.java",
                    "file old path": "src/test/java/org/apache/commons/io/FileUtilsTestCase.java",
                    "file new path": "src/test/java/org/apache/commons/io/FileUtilsTestCase.java",
                    "full name": "src.test.java.org.apache.commons.io.FileUtilsTestCase.testCompareSizeOf"
                }
            ],
            "files that changed": [
                "src/main/java/org/apache/commons/io/FileUtils.java",
                "src/test/java/org/apache/commons/io/FileUtilsTestCase.java"
            ]
        },
        {
            "bug index": "168",
            "bug id": "IO-383",
            "hexsha": "d9406824aeba0e977c0692971a6dbb2e62823886",
            "fix_hash": "7f15b0e5cdb5c92eab77b33da0eaae6e546910f7",
            "description": "FileUtils.doCopyFile saves the input file size before starting the copy.\n\nThe copy is considered complete when the original file size is reached.\n\nThe method then checks the new input file size against the destination size.\nThis will fail if the file has changed in size since the copy started.\n\nThis behaviour should be documented; also it would help if the two sizes were shown in the exception message.",
            "commit number version hash": 1288,
            "commit number": 1139,
            "function that changed": [
                {
                    "function name": "doCopyFile",
                    "function params": [
                        "srcFile",
                        "destFile",
                        "preserveFileDate"
                    ],
                    "file name": "FileUtils.java",
                    "file old path": "src/main/java/org/apache/commons/io/FileUtils.java",
                    "file new path": "src/main/java/org/apache/commons/io/FileUtils.java",
                    "full name": "src.main.java.org.apache.commons.io.FileUtils.doCopyFile"
                }
            ],
            "files that changed": [
                "src/main/java/org/apache/commons/io/FileUtils.java"
            ]
        },
        {
            "bug index": "169",
            "bug id": "IO-354",
            "hexsha": "d9406824aeba0e977c0692971a6dbb2e62823886",
            "fix_hash": "6d8ef99f2ed43b9f71005561af57e50c3b24f7d0",
            "description": "I just realized there is a defect in the source code of \"org.apache.commons.io.input.Tailer.java\". Basically, the current implementation does not work for multi-byte encoded files. See the following snippet,\n\n448    private long readLines(RandomAccessFile reader) throws IOException {\n449        StringBuilder sb = new StringBuilder();\n450\n451        long pos = reader.getFilePointer();\n452        long rePos = pos; // position to re-read\n453\n454        int num;\n455        boolean seenCR = false;\n456        while (run && ((num = reader.read(inbuf)) != -1)) {\n457            for (int i = 0; i < num; i++) {\n458                byte ch = inbuf[i];\n459                switch (ch) {\n460                case '\\n':\n461                    seenCR = false; // swallow CR before LF\n462                    listener.handle(sb.toString());\n463                    sb.setLength(0);\n464                    rePos = pos + i + 1;\n465                    break;\n466                case '\\r':\n467                    if (seenCR) {\n468                        sb.append('\\r');\n469                    }\n470                    seenCR = true;\n471                    break;\n472                default:\n473                    if (seenCR) {\n474                        seenCR = false; // swallow final CR\n475                        listener.handle(sb.toString());\n476                        sb.setLength(0);\n477                        rePos = pos + i + 1;\n478                    }\n479                    sb.append((char) ch); // add character, not its ascii value\n480                }\n481            }\n482\n483            pos = reader.getFilePointer();\n484        }\n485\n486        reader.seek(rePos); // Ensure we can re-read if necessary\n487        return rePos;\n488    }\n\nAt line 479, the conversion of byte to char type breaks the encoding.",
            "commit number version hash": 1288,
            "commit number": 1130,
            "function that changed": [
                {
                    "function name": "create",
                    "function params": [
                        "file",
                        "charset",
                        "listener",
                        "delayMillis",
                        "end",
                        "reOpen",
                        "bufSize"
                    ],
                    "file name": "Tailer.java",
                    "file old path": "src/main/java/org/apache/commons/io/input/Tailer.java",
                    "file new path": "src/main/java/org/apache/commons/io/input/Tailer.java",
                    "full name": "src.main.java.org.apache.commons.io.input.Tailer.create"
                },
                {
                    "function name": "readLines",
                    "function params": [
                        "reader"
                    ],
                    "file name": "Tailer.java",
                    "file old path": "src/main/java/org/apache/commons/io/input/Tailer.java",
                    "file new path": "src/main/java/org/apache/commons/io/input/Tailer.java",
                    "full name": "src.main.java.org.apache.commons.io.input.Tailer.readLines"
                },
                {
                    "function name": "create",
                    "function params": [
                        "file",
                        "listener",
                        "delayMillis",
                        "end",
                        "reOpen",
                        "bufSize"
                    ],
                    "file name": "Tailer.java",
                    "file old path": "src/main/java/org/apache/commons/io/input/Tailer.java",
                    "file new path": "src/main/java/org/apache/commons/io/input/Tailer.java",
                    "full name": "src.main.java.org.apache.commons.io.input.Tailer.create"
                },
                {
                    "function name": "Tailer",
                    "function params": [
                        "file",
                        "listener",
                        "delayMillis",
                        "end",
                        "reOpen",
                        "bufSize"
                    ],
                    "file name": "Tailer.java",
                    "file old path": "src/main/java/org/apache/commons/io/input/Tailer.java",
                    "file new path": "src/main/java/org/apache/commons/io/input/Tailer.java",
                    "full name": "src.main.java.org.apache.commons.io.input.Tailer.Tailer"
                },
                {
                    "function name": "Tailer",
                    "function params": [
                        "file",
                        "cset",
                        "listener",
                        "delayMillis",
                        "end",
                        "reOpen",
                        "bufSize"
                    ],
                    "file name": "Tailer.java",
                    "file old path": "src/main/java/org/apache/commons/io/input/Tailer.java",
                    "file new path": "src/main/java/org/apache/commons/io/input/Tailer.java",
                    "full name": "src.main.java.org.apache.commons.io.input.Tailer.Tailer"
                },
                {
                    "function name": "testMultiByteBreak",
                    "function params": [],
                    "file name": "TailerTest.java",
                    "file old path": "src/test/java/org/apache/commons/io/input/TailerTest.java",
                    "file new path": "src/test/java/org/apache/commons/io/input/TailerTest.java",
                    "full name": "src.test.java.org.apache.commons.io.input.TailerTest.testMultiByteBreak"
                }
            ],
            "files that changed": [
                "src/main/java/org/apache/commons/io/input/Tailer.java",
                "src/test/java/org/apache/commons/io/input/TailerTest.java"
            ]
        },
        {
            "bug index": "170",
            "bug id": "IO-8",
            "hexsha": "742c51feeaf75542ab9db6782ad3d2ad506fb871",
            "fix_hash": "9a3040cefb70a20e34b05a675d8a485fc2534dfe",
            "description": "The bug is described by a one-line code      \n\nFileUtils.copyFile(new File(\"c:/hello.txt\"), new File(\"c:/hello.txt\"));\n\nTry run it and check hello.txt size before and after: you will find\nthat the file has been razed to 0 bytes.\n\nIt should be illegal to copy a file with the same path as the destination,\nor better, with the same getCanonicalPath(), so I suggest the following \nenhancement:\n\n------------ in FileUtils.java -------------\n\n\n\n        //make sure we can write to destination\n        if (destination.exists() && !destination.canWrite()) {\n            String message =\n                \"Unable to open file \" + destination + \" for writing.\";\n            throw new IOException(message);\n        }\n        \n        //makes sure it is not the same file        \n        if(source.getCanonicalPath().equals(destination.getCanonicalPath())) {\n            String message =\n                \"Unable to write file \" + source + \" on itself.\";\n            throw new IOException(message);\n            \n        }\n\n-- end --\nthis code should be safe regarding path and canonical path: you\nare querying OS after existence test, and anyway you are sure\nthat there is a source file and it has a canonical path.\n(anyway getCanonicalPath throws a IOException, which is sound\nin the context)\n\nhope this may help\ndaniele rizzi (drizzi@largesys.it)",
            "commit number version hash": 443,
            "commit number": 1129,
            "function that changed": [
                {
                    "function name": "testMultiByteBreak",
                    "function params": [],
                    "file name": "TailerTest.java",
                    "file old path": "src/test/java/org/apache/commons/io/input/TailerTest.java",
                    "file new path": "src/test/java/org/apache/commons/io/input/TailerTest.java",
                    "full name": "src.test.java.org.apache.commons.io.input.TailerTest.testMultiByteBreak"
                }
            ],
            "files that changed": [
                "src/test/java/org/apache/commons/io/input/TailerTest.java"
            ]
        },
        {
            "bug index": "172",
            "bug id": "IO-356",
            "hexsha": "d9406824aeba0e977c0692971a6dbb2e62823886",
            "fix_hash": "cbc5a146154ada255d491d6509497d0d57bad336",
            "description": "The size effect happens when buffer size of input stream is not dividable by requested data size. The bug is hidden in {{CharSequenceInputStream#reset()}} method which should also call (I think) {{bbuf.limit(0)}} otherwise next call to {{CharSequenceInputStream#read()}} will return the remaining tail which {{bbuf}} has accumulated.\n\nIn the attached test case the test fails, if {{dataSize = 13}} (not dividable by 10) and runs OK if {{dataSize = 20}} (dividable by 10).",
            "commit number version hash": 1288,
            "commit number": 1116,
            "function that changed": [
                {
                    "function name": "reset",
                    "function params": [],
                    "file name": "CharSequenceInputStream.java",
                    "file old path": "src/main/java/org/apache/commons/io/input/CharSequenceInputStream.java",
                    "file new path": "src/main/java/org/apache/commons/io/input/CharSequenceInputStream.java",
                    "full name": "src.main.java.org.apache.commons.io.input.CharSequenceInputStream.reset"
                },
                {
                    "function name": "skip",
                    "function params": [
                        "n"
                    ],
                    "file name": "CharSequenceInputStream.java",
                    "file old path": "src/main/java/org/apache/commons/io/input/CharSequenceInputStream.java",
                    "file new path": "src/main/java/org/apache/commons/io/input/CharSequenceInputStream.java",
                    "full name": "src.main.java.org.apache.commons.io.input.CharSequenceInputStream.skip"
                },
                {
                    "function name": "mark",
                    "function params": [
                        "readlimit"
                    ],
                    "file name": "CharSequenceInputStream.java",
                    "file old path": "src/main/java/org/apache/commons/io/input/CharSequenceInputStream.java",
                    "file new path": "src/main/java/org/apache/commons/io/input/CharSequenceInputStream.java",
                    "full name": "src.main.java.org.apache.commons.io.input.CharSequenceInputStream.mark"
                },
                {
                    "function name": "CharSequenceInputStream",
                    "function params": [
                        "cs",
                        "charset",
                        "bufferSize"
                    ],
                    "file name": "CharSequenceInputStream.java",
                    "file old path": "src/main/java/org/apache/commons/io/input/CharSequenceInputStream.java",
                    "file new path": "src/main/java/org/apache/commons/io/input/CharSequenceInputStream.java",
                    "full name": "src.main.java.org.apache.commons.io.input.CharSequenceInputStream.CharSequenceInputStream"
                },
                {
                    "function name": "testBufferedRead_AvailableCharset",
                    "function params": [],
                    "file name": "CharSequenceInputStreamTest.java",
                    "file old path": "src/test/java/org/apache/commons/io/input/CharSequenceInputStreamTest.java",
                    "file new path": "src/test/java/org/apache/commons/io/input/CharSequenceInputStreamTest.java",
                    "full name": "src.test.java.org.apache.commons.io.input.CharSequenceInputStreamTest.testBufferedRead_AvailableCharset"
                }
            ],
            "files that changed": [
                "src/main/java/org/apache/commons/io/input/CharSequenceInputStream.java",
                "src/test/java/org/apache/commons/io/input/CharSequenceInputStreamTest.java"
            ]
        },
        {
            "bug index": "173",
            "bug id": "IO-379",
            "hexsha": "d9406824aeba0e977c0692971a6dbb2e62823886",
            "fix_hash": "a1f4d43253ac11abe8cf3ed53876dabc885d7b30",
            "description": "There are currently no tests for the available() method.\n\nTme method should return an estimate of the number of items remaining, so it should be possible to read - or skip - that many items without reaching EOF.\n\nAt present, the code measures the number of CharBuf entries remaining; I think that is wrong - it should be the number of bytes left in the byte stream.",
            "commit number version hash": 1288,
            "commit number": 1113,
            "function that changed": [
                {
                    "function name": "available",
                    "function params": [],
                    "file name": "CharSequenceInputStream.java",
                    "file old path": "src/main/java/org/apache/commons/io/input/CharSequenceInputStream.java",
                    "file new path": "src/main/java/org/apache/commons/io/input/CharSequenceInputStream.java",
                    "full name": "src.main.java.org.apache.commons.io.input.CharSequenceInputStream.available"
                },
                {
                    "function name": "testAvailableSkip",
                    "function params": [],
                    "file name": "CharSequenceInputStreamTest.java",
                    "file old path": "src/test/java/org/apache/commons/io/input/CharSequenceInputStreamTest.java",
                    "file new path": "src/test/java/org/apache/commons/io/input/CharSequenceInputStreamTest.java",
                    "full name": "src.test.java.org.apache.commons.io.input.CharSequenceInputStreamTest.testAvailableSkip"
                },
                {
                    "function name": "checkAvail",
                    "function params": [],
                    "file name": "CharSequenceInputStreamTest.java",
                    "file old path": "src/test/java/org/apache/commons/io/input/CharSequenceInputStreamTest.java",
                    "file new path": "src/test/java/org/apache/commons/io/input/CharSequenceInputStreamTest.java",
                    "full name": "src.test.java.org.apache.commons.io.input.CharSequenceInputStreamTest.checkAvail"
                },
                {
                    "function name": "testAvailableRead",
                    "function params": [],
                    "file name": "CharSequenceInputStreamTest.java",
                    "file old path": "src/test/java/org/apache/commons/io/input/CharSequenceInputStreamTest.java",
                    "file new path": "src/test/java/org/apache/commons/io/input/CharSequenceInputStreamTest.java",
                    "full name": "src.test.java.org.apache.commons.io.input.CharSequenceInputStreamTest.testAvailableRead"
                },
                {
                    "function name": "testAvailable",
                    "function params": [],
                    "file name": "CharSequenceInputStreamTest.java",
                    "file old path": "src/test/java/org/apache/commons/io/input/CharSequenceInputStreamTest.java",
                    "file new path": "src/test/java/org/apache/commons/io/input/CharSequenceInputStreamTest.java",
                    "full name": "src.test.java.org.apache.commons.io.input.CharSequenceInputStreamTest.testAvailable"
                }
            ],
            "files that changed": [
                "src/main/java/org/apache/commons/io/input/CharSequenceInputStream.java",
                "src/test/java/org/apache/commons/io/input/CharSequenceInputStreamTest.java"
            ]
        },
        {
            "bug index": "174",
            "bug id": "IO-299",
            "hexsha": "d9406824aeba0e977c0692971a6dbb2e62823886",
            "fix_hash": "b2dbfb9bbec197bf57cca03f47253d9551769bf8",
            "description": "Situation:\nFilenameUtils.getPrefixLength is used in FilenameUtils.doNormalize.\nFilenameUtils.normalize(\"////I don't want to become null!\") returns null.\n\nProblem:\nExpected was: \"I don't want to become null!\"\nThe method FilenameUtils.getPrefixLength returns -1 for the mentioned string.\nThe root problem is found in following lines of code:\n{code:title=FilenameUtils.getPrefixLength}\n...\n                int posUnix = filename.indexOf(UNIX_SEPARATOR, 2);\n                int posWin = filename.indexOf(WINDOWS_SEPARATOR, 2);\n                if ((posUnix == -1 && posWin == -1) || posUnix == 2 || posWin == 2) {\n                    return -1;\n                }\n...\n{code}\n\nSolution:\nAll leading slashes should be ignored at all, but considering the rest of the string.",
            "commit number version hash": 1288,
            "commit number": 1112,
            "function that changed": [
                {
                    "function name": "testGetPrefixLength",
                    "function params": [],
                    "file name": "FilenameUtilsTestCase.java",
                    "file old path": "src/test/java/org/apache/commons/io/FilenameUtilsTestCase.java",
                    "file new path": "src/test/java/org/apache/commons/io/FilenameUtilsTestCase.java",
                    "full name": "src.test.java.org.apache.commons.io.FilenameUtilsTestCase.testGetPrefixLength"
                }
            ],
            "files that changed": [
                "src/main/java/org/apache/commons/io/FilenameUtils.java",
                "src/test/java/org/apache/commons/io/FilenameUtilsTestCase.java"
            ]
        },
        {
            "bug index": "175",
            "bug id": "IO-328",
            "hexsha": "d9406824aeba0e977c0692971a6dbb2e62823886",
            "fix_hash": "e84d32281523bba86c06b457a78cf092902ab2b4",
            "description": "listFilesAndDirs seems to always include the \"directory\" passed as input in it's resulting Collection.  This is unexpected given the docs for the method...\n\nbq. Finds files within a given directory (and optionally its subdirectories). All files found are filtered by an IOFileFilter. \n\n* the \"given directory\" is not a subdirectory of itself\n* it is not subjected to the IOFileFilter dirFilter, it is always added.",
            "commit number version hash": 1288,
            "commit number": 1110,
            "function that changed": [],
            "files that changed": [
                "src/main/java/org/apache/commons/io/FileUtils.java"
            ]
        },
        {
            "bug index": "176",
            "bug id": "IO-356",
            "hexsha": "d9406824aeba0e977c0692971a6dbb2e62823886",
            "fix_hash": "750d338864a92521f4daec993af7ef0aba9d609b",
            "description": "The size effect happens when buffer size of input stream is not dividable by requested data size. The bug is hidden in {{CharSequenceInputStream#reset()}} method which should also call (I think) {{bbuf.limit(0)}} otherwise next call to {{CharSequenceInputStream#read()}} will return the remaining tail which {{bbuf}} has accumulated.\n\nIn the attached test case the test fails, if {{dataSize = 13}} (not dividable by 10) and runs OK if {{dataSize = 20}} (dividable by 10).",
            "commit number version hash": 1288,
            "commit number": 1102,
            "function that changed": [
                {
                    "function name": "reset",
                    "function params": [],
                    "file name": "CharSequenceInputStream.java",
                    "file old path": "src/main/java/org/apache/commons/io/input/CharSequenceInputStream.java",
                    "file new path": "src/main/java/org/apache/commons/io/input/CharSequenceInputStream.java",
                    "full name": "src.main.java.org.apache.commons.io.input.CharSequenceInputStream.reset"
                }
            ],
            "files that changed": [
                "src/main/java/org/apache/commons/io/input/CharSequenceInputStream.java"
            ]
        },
        {
            "bug index": "177",
            "bug id": "IO-356",
            "hexsha": "d9406824aeba0e977c0692971a6dbb2e62823886",
            "fix_hash": "a39385a500fc0e8993d967a8025b931d3337ea04",
            "description": "The size effect happens when buffer size of input stream is not dividable by requested data size. The bug is hidden in {{CharSequenceInputStream#reset()}} method which should also call (I think) {{bbuf.limit(0)}} otherwise next call to {{CharSequenceInputStream#read()}} will return the remaining tail which {{bbuf}} has accumulated.\n\nIn the attached test case the test fails, if {{dataSize = 13}} (not dividable by 10) and runs OK if {{dataSize = 20}} (dividable by 10).",
            "commit number version hash": 1288,
            "commit number": 1101,
            "function that changed": [
                {
                    "function name": "fillBuffer",
                    "function params": [],
                    "file name": "CharSequenceInputStream.java",
                    "file old path": "src/main/java/org/apache/commons/io/input/CharSequenceInputStream.java",
                    "file new path": "src/main/java/org/apache/commons/io/input/CharSequenceInputStream.java",
                    "full name": "src.main.java.org.apache.commons.io.input.CharSequenceInputStream.fillBuffer"
                },
                {
                    "function name": "CharSequenceInputStream",
                    "function params": [
                        "cs",
                        "charset",
                        "bufferSize"
                    ],
                    "file name": "CharSequenceInputStream.java",
                    "file old path": "src/main/java/org/apache/commons/io/input/CharSequenceInputStream.java",
                    "file new path": "src/main/java/org/apache/commons/io/input/CharSequenceInputStream.java",
                    "full name": "src.main.java.org.apache.commons.io.input.CharSequenceInputStream.CharSequenceInputStream"
                },
                {
                    "function name": "testIO_356_Loop",
                    "function params": [],
                    "file name": "CharSequenceInputStreamTest.java",
                    "file old path": "src/test/java/org/apache/commons/io/input/CharSequenceInputStreamTest.java",
                    "file new path": "src/test/java/org/apache/commons/io/input/CharSequenceInputStreamTest.java",
                    "full name": "src.test.java.org.apache.commons.io.input.CharSequenceInputStreamTest.testIO_356_Loop"
                },
                {
                    "function name": "testIO_356_Loop_UTF16",
                    "function params": [],
                    "file name": "CharSequenceInputStreamTest.java",
                    "file old path": "src/test/java/org/apache/commons/io/input/CharSequenceInputStreamTest.java",
                    "file new path": "src/test/java/org/apache/commons/io/input/CharSequenceInputStreamTest.java",
                    "full name": "src.test.java.org.apache.commons.io.input.CharSequenceInputStreamTest.testIO_356_Loop_UTF16"
                },
                {
                    "function name": "testIO_356_Loop_UTF8",
                    "function params": [],
                    "file name": "CharSequenceInputStreamTest.java",
                    "file old path": "src/test/java/org/apache/commons/io/input/CharSequenceInputStreamTest.java",
                    "file new path": "src/test/java/org/apache/commons/io/input/CharSequenceInputStreamTest.java",
                    "full name": "src.test.java.org.apache.commons.io.input.CharSequenceInputStreamTest.testIO_356_Loop_UTF8"
                },
                {
                    "function name": "testIO_356_Loop",
                    "function params": [],
                    "file name": "CharSequenceInputStreamTest.java",
                    "file old path": "src/test/java/org/apache/commons/io/input/CharSequenceInputStreamTest.java",
                    "file new path": "src/test/java/org/apache/commons/io/input/CharSequenceInputStreamTest.java",
                    "full name": "src.test.java.org.apache.commons.io.input.CharSequenceInputStreamTest.testIO_356_Loop"
                }
            ],
            "files that changed": [
                "src/main/java/org/apache/commons/io/input/CharSequenceInputStream.java",
                "src/test/java/org/apache/commons/io/input/CharSequenceInputStreamTest.java"
            ]
        },
        {
            "bug index": "178",
            "bug id": "IO-343",
            "hexsha": "d9406824aeba0e977c0692971a6dbb2e62823886",
            "fix_hash": "7233bf46d9008b026e822053d793d38c0f6d92c4",
            "description": "Package org.apache.commons.io.comparator has a lot of inconsistent JavaDocs. \nFor example this class org.apache.commons.io.comparator.NameFileComparator\nhttp://svn.apache.org/viewvc/commons/proper/io/trunk/src/main/java/org/apache/commons/io/comparator/NameFileComparator.java?view=markup\nhas JavaDocs\n List&lt;File&gt; list = ...\n NameFileComparator.NAME_COMPARATOR.sort(list); ....\n\n File[] array = ...\n NameFileComparator.NAME_INSENSITIVE_REVERSE.sort(array);\n\nbut this will not work because all static members of NameFileComparator declared as Comparator<File> for example \n public static final Comparator<File> NAME_REVERSE = new ReverseComparator(NAME_COMPARATOR);\npublic static final Comparator<File> NAME_INSENSITIVE_REVERSE = new ReverseComparator(NAME_INSENSITIVE_COMPARATOR);\n\nand Comparator class doesn't have the sort() method.\n",
            "commit number version hash": 1288,
            "commit number": 1089,
            "function that changed": [],
            "files that changed": [
                "src/main/java/org/apache/commons/io/comparator/CompositeFileComparator.java",
                "src/main/java/org/apache/commons/io/comparator/DefaultFileComparator.java",
                "src/main/java/org/apache/commons/io/comparator/DirectoryFileComparator.java",
                "src/main/java/org/apache/commons/io/comparator/ExtensionFileComparator.java",
                "src/main/java/org/apache/commons/io/comparator/LastModifiedFileComparator.java",
                "src/main/java/org/apache/commons/io/comparator/NameFileComparator.java",
                "src/main/java/org/apache/commons/io/comparator/PathFileComparator.java",
                "src/main/java/org/apache/commons/io/comparator/SizeFileComparator.java"
            ]
        },
        {
            "bug index": "179",
            "bug id": "IO-343",
            "hexsha": "d9406824aeba0e977c0692971a6dbb2e62823886",
            "fix_hash": "db23207891d4c88a828cacff06f799c39dd29c2c",
            "description": "Package org.apache.commons.io.comparator has a lot of inconsistent JavaDocs. \nFor example this class org.apache.commons.io.comparator.NameFileComparator\nhttp://svn.apache.org/viewvc/commons/proper/io/trunk/src/main/java/org/apache/commons/io/comparator/NameFileComparator.java?view=markup\nhas JavaDocs\n List&lt;File&gt; list = ...\n NameFileComparator.NAME_COMPARATOR.sort(list); ....\n\n File[] array = ...\n NameFileComparator.NAME_INSENSITIVE_REVERSE.sort(array);\n\nbut this will not work because all static members of NameFileComparator declared as Comparator<File> for example \n public static final Comparator<File> NAME_REVERSE = new ReverseComparator(NAME_COMPARATOR);\npublic static final Comparator<File> NAME_INSENSITIVE_REVERSE = new ReverseComparator(NAME_INSENSITIVE_COMPARATOR);\n\nand Comparator class doesn't have the sort() method.\n",
            "commit number version hash": 1288,
            "commit number": 1088,
            "function that changed": [
                {
                    "function name": "setUp",
                    "function params": [],
                    "file name": "ComparatorAbstractTestCase.java",
                    "file old path": "src/test/java/org/apache/commons/io/comparator/ComparatorAbstractTestCase.java",
                    "file new path": "src/test/java/org/apache/commons/io/comparator/ComparatorAbstractTestCase.java",
                    "full name": "src.test.java.org.apache.commons.io.comparator.ComparatorAbstractTestCase.setUp"
                },
                {
                    "function name": "setUp",
                    "function params": [],
                    "file name": "CompositeFileComparatorTest.java",
                    "file old path": "src/test/java/org/apache/commons/io/comparator/CompositeFileComparatorTest.java",
                    "file new path": "src/test/java/org/apache/commons/io/comparator/CompositeFileComparatorTest.java",
                    "full name": "src.test.java.org.apache.commons.io.comparator.CompositeFileComparatorTest.setUp"
                },
                {
                    "function name": "setUp",
                    "function params": [],
                    "file name": "DefaultFileComparatorTest.java",
                    "file old path": "src/test/java/org/apache/commons/io/comparator/DefaultFileComparatorTest.java",
                    "file new path": "src/test/java/org/apache/commons/io/comparator/DefaultFileComparatorTest.java",
                    "full name": "src.test.java.org.apache.commons.io.comparator.DefaultFileComparatorTest.setUp"
                },
                {
                    "function name": "setUp",
                    "function params": [],
                    "file name": "DirectoryFileComparatorTest.java",
                    "file old path": "src/test/java/org/apache/commons/io/comparator/DirectoryFileComparatorTest.java",
                    "file new path": "src/test/java/org/apache/commons/io/comparator/DirectoryFileComparatorTest.java",
                    "full name": "src.test.java.org.apache.commons.io.comparator.DirectoryFileComparatorTest.setUp"
                },
                {
                    "function name": "setUp",
                    "function params": [],
                    "file name": "ExtensionFileComparatorTest.java",
                    "file old path": "src/test/java/org/apache/commons/io/comparator/ExtensionFileComparatorTest.java",
                    "file new path": "src/test/java/org/apache/commons/io/comparator/ExtensionFileComparatorTest.java",
                    "full name": "src.test.java.org.apache.commons.io.comparator.ExtensionFileComparatorTest.setUp"
                },
                {
                    "function name": "setUp",
                    "function params": [],
                    "file name": "LastModifiedFileComparatorTest.java",
                    "file old path": "src/test/java/org/apache/commons/io/comparator/LastModifiedFileComparatorTest.java",
                    "file new path": "src/test/java/org/apache/commons/io/comparator/LastModifiedFileComparatorTest.java",
                    "full name": "src.test.java.org.apache.commons.io.comparator.LastModifiedFileComparatorTest.setUp"
                },
                {
                    "function name": "setUp",
                    "function params": [],
                    "file name": "NameFileComparatorTest.java",
                    "file old path": "src/test/java/org/apache/commons/io/comparator/NameFileComparatorTest.java",
                    "file new path": "src/test/java/org/apache/commons/io/comparator/NameFileComparatorTest.java",
                    "full name": "src.test.java.org.apache.commons.io.comparator.NameFileComparatorTest.setUp"
                },
                {
                    "function name": "setUp",
                    "function params": [],
                    "file name": "PathFileComparatorTest.java",
                    "file old path": "src/test/java/org/apache/commons/io/comparator/PathFileComparatorTest.java",
                    "file new path": "src/test/java/org/apache/commons/io/comparator/PathFileComparatorTest.java",
                    "full name": "src.test.java.org.apache.commons.io.comparator.PathFileComparatorTest.setUp"
                },
                {
                    "function name": "setUp",
                    "function params": [],
                    "file name": "SizeFileComparatorTest.java",
                    "file old path": "src/test/java/org/apache/commons/io/comparator/SizeFileComparatorTest.java",
                    "file new path": "src/test/java/org/apache/commons/io/comparator/SizeFileComparatorTest.java",
                    "full name": "src.test.java.org.apache.commons.io.comparator.SizeFileComparatorTest.setUp"
                }
            ],
            "files that changed": [
                "src/main/java/org/apache/commons/io/comparator/DefaultFileComparator.java",
                "src/main/java/org/apache/commons/io/comparator/DirectoryFileComparator.java",
                "src/main/java/org/apache/commons/io/comparator/ExtensionFileComparator.java",
                "src/main/java/org/apache/commons/io/comparator/LastModifiedFileComparator.java",
                "src/main/java/org/apache/commons/io/comparator/NameFileComparator.java",
                "src/main/java/org/apache/commons/io/comparator/PathFileComparator.java",
                "src/main/java/org/apache/commons/io/comparator/SizeFileComparator.java",
                "src/test/java/org/apache/commons/io/comparator/ComparatorAbstractTestCase.java",
                "src/test/java/org/apache/commons/io/comparator/CompositeFileComparatorTest.java",
                "src/test/java/org/apache/commons/io/comparator/DefaultFileComparatorTest.java",
                "src/test/java/org/apache/commons/io/comparator/DirectoryFileComparatorTest.java",
                "src/test/java/org/apache/commons/io/comparator/ExtensionFileComparatorTest.java",
                "src/test/java/org/apache/commons/io/comparator/LastModifiedFileComparatorTest.java",
                "src/test/java/org/apache/commons/io/comparator/NameFileComparatorTest.java",
                "src/test/java/org/apache/commons/io/comparator/PathFileComparatorTest.java",
                "src/test/java/org/apache/commons/io/comparator/SizeFileComparatorTest.java"
            ]
        },
        {
            "bug index": "180",
            "bug id": "IO-368",
            "hexsha": "d9406824aeba0e977c0692971a6dbb2e62823886",
            "fix_hash": "f9e08f8eed413e17c5d7655c686e7f4019779950",
            "description": "Any class with a simple primitive (such as long, or int) cannot be deserialized.  For example, the following code:\n\n{code:java}\n    ObjectInputStream ois = null;\n    try {\n      ois = new ClassLoaderObjectInputStream(getClass().getClassLoader(), new ByteArrayInputStream(bytes));\n      return (T) ois.readObject();\n    } catch (ClassNotFoundException e) {\n      LOGGER.error(\"Deserialization failed for {}\", objectClass, e);\n    } catch (IOException e) {\n      LOGGER.error(\"Deserialization failed for {}\", objectClass, e);\n    } finally {\n      if (ois != null) {\n        try {\n          ois.close();\n        } catch (IOException ignored) {\n        }\n      }\n    }\n{code}\n\nWill fail if bytes represents a byte[] of the serialized version of the following class:\n\n{code:java}\npublic class Foo {\n\n  private static final long serialVersionUID = 1L;\n\n  private long thisFieldWillCauseCLOISToFail;\n\n  // class logic, ctors, etc...\n\n}\n{code}\n\nWith the following stacktrace:\n\n{noformat}\nCaused by: java.lang.ClassNotFoundException: long\n        at java.net.URLClassLoader$1.run(URLClassLoader.java:202)\n        at java.security.AccessController.doPrivileged(Native Method)\n        at java.net.URLClassLoader.findClass(URLClassLoader.java:190)\n        at java.lang.ClassLoader.loadClass(ClassLoader.java:306)\n        at java.lang.ClassLoader.loadClass(ClassLoader.java:247)\n        at java.lang.Class.forName0(Native Method)\n        at java.lang.Class.forName(Class.java:247)\n        at org.apache.commons.io.input.ClassLoaderObjectInputStream.resolveClass(ClassLoaderObjectInputStream.java:68)\n        at java.io.ObjectInputStream.readNonProxyDesc(ObjectInputStream.java:1574)\n        at java.io.ObjectInputStream.readClassDesc(ObjectInputStream.java:1495)\n        at java.io.ObjectInputStream.readClass(ObjectInputStream.java:1461)\n        at java.io.ObjectInputStream.readObject0(ObjectInputStream.java:1311)\n        at java.io.ObjectInputStream.defaultReadFields(ObjectInputStream.java:1946)\n        at java.io.ObjectInputStream.readSerialData(ObjectInputStream.java:1870)\n        at java.io.ObjectInputStream.readOrdinaryObject(ObjectInputStream.java:1752)\n        at java.io.ObjectInputStream.readObject0(ObjectInputStream.java:1328)\n        at java.io.ObjectInputStream.defaultReadFields(ObjectInputStream.java:1946)\n        at java.io.ObjectInputStream.readSerialData(ObjectInputStream.java:1870)\n        at java.io.ObjectInputStream.readOrdinaryObject(ObjectInputStream.java:1752)\n        at java.io.ObjectInputStream.readObject0(ObjectInputStream.java:1328)\n        at java.io.ObjectInputStream.defaultReadFields(ObjectInputStream.java:1946)\n        at java.io.ObjectInputStream.readSerialData(ObjectInputStream.java:1870)\n        at java.io.ObjectInputStream.readOrdinaryObject(ObjectInputStream.java:1752)\n        at java.io.ObjectInputStream.readObject0(ObjectInputStream.java:1328)\n        at java.io.ObjectInputStream.defaultReadFields(ObjectInputStream.java:1946)\n        at java.io.ObjectInputStream.readSerialData(ObjectInputStream.java:1870)\n        at java.io.ObjectInputStream.readOrdinaryObject(ObjectInputStream.java:1752)\n        at java.io.ObjectInputStream.readObject0(ObjectInputStream.java:1328)\n        at java.io.ObjectInputStream.readObject(ObjectInputStream.java:350)\n        at java.util.ArrayList.readObject(ArrayList.java:593)\n        at sun.reflect.GeneratedMethodAccessor4.invoke(Unknown Source)\n        at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25)\n        at java.lang.reflect.Method.invoke(Method.java:597)\n        at java.io.ObjectStreamClass.invokeReadObject(ObjectStreamClass.java:974)\n        at java.io.ObjectInputStream.readSerialData(ObjectInputStream.java:1848)\n        at java.io.ObjectInputStream.readOrdinaryObject(ObjectInputStream.java:1752)\n        at java.io.ObjectInputStream.readObject0(ObjectInputStream.java:1328)\n        at java.io.ObjectInputStream.defaultReadFields(ObjectInputStream.java:1946)\n...\n{noformat}\n\nOf some relevance may be:\nhttp://issues.liferay.com/browse/LPS-30742\nhttps://groups.google.com/forum/?hl=en&fromgroups=#!topic/akka-user/3PC4L48qyqs",
            "commit number version hash": 1288,
            "commit number": 1084,
            "function that changed": [
                {
                    "function name": "resolveClass",
                    "function params": [
                        "objectStreamClass"
                    ],
                    "file name": "ClassLoaderObjectInputStream.java",
                    "file old path": "src/main/java/org/apache/commons/io/input/ClassLoaderObjectInputStream.java",
                    "file new path": "src/main/java/org/apache/commons/io/input/ClassLoaderObjectInputStream.java",
                    "full name": "src.main.java.org.apache.commons.io.input.ClassLoaderObjectInputStream.resolveClass"
                }
            ],
            "files that changed": [
                "src/main/java/org/apache/commons/io/input/ClassLoaderObjectInputStream.java"
            ]
        },
        {
            "bug index": "181",
            "bug id": "IO-1",
            "hexsha": "742c51feeaf75542ab9db6782ad3d2ad506fb871",
            "fix_hash": "f89670bd02bc20cb858ac6b05d6fe6332245e47d",
            "description": "FileUtils.forceMkdir(File) calls File.mkdirs() to create the directory. The\nJavaDoc of this method does not mention that any necessary but nonexistent\nparent directories are created, too.",
            "commit number version hash": 443,
            "commit number": 1073,
            "function that changed": [],
            "files that changed": [
                "src/main/java/org/apache/commons/io/FileUtils.java"
            ]
        },
        {
            "bug index": "182",
            "bug id": "IO-354",
            "hexsha": "d9406824aeba0e977c0692971a6dbb2e62823886",
            "fix_hash": "8d52f694da0484cb2783a8b35dad845322af0c07",
            "description": "I just realized there is a defect in the source code of \"org.apache.commons.io.input.Tailer.java\". Basically, the current implementation does not work for multi-byte encoded files. See the following snippet,\n\n448    private long readLines(RandomAccessFile reader) throws IOException {\n449        StringBuilder sb = new StringBuilder();\n450\n451        long pos = reader.getFilePointer();\n452        long rePos = pos; // position to re-read\n453\n454        int num;\n455        boolean seenCR = false;\n456        while (run && ((num = reader.read(inbuf)) != -1)) {\n457            for (int i = 0; i < num; i++) {\n458                byte ch = inbuf[i];\n459                switch (ch) {\n460                case '\\n':\n461                    seenCR = false; // swallow CR before LF\n462                    listener.handle(sb.toString());\n463                    sb.setLength(0);\n464                    rePos = pos + i + 1;\n465                    break;\n466                case '\\r':\n467                    if (seenCR) {\n468                        sb.append('\\r');\n469                    }\n470                    seenCR = true;\n471                    break;\n472                default:\n473                    if (seenCR) {\n474                        seenCR = false; // swallow final CR\n475                        listener.handle(sb.toString());\n476                        sb.setLength(0);\n477                        rePos = pos + i + 1;\n478                    }\n479                    sb.append((char) ch); // add character, not its ascii value\n480                }\n481            }\n482\n483            pos = reader.getFilePointer();\n484        }\n485\n486        reader.seek(rePos); // Ensure we can re-read if necessary\n487        return rePos;\n488    }\n\nAt line 479, the conversion of byte to char type breaks the encoding.",
            "commit number version hash": 1288,
            "commit number": 1072,
            "function that changed": [
                {
                    "function name": "readLines",
                    "function params": [
                        "reader"
                    ],
                    "file name": "Tailer.java",
                    "file old path": "src/main/java/org/apache/commons/io/input/Tailer.java",
                    "file new path": "src/main/java/org/apache/commons/io/input/Tailer.java",
                    "full name": "src.main.java.org.apache.commons.io.input.Tailer.readLines"
                },
                {
                    "function name": "testMultiByteBreak",
                    "function params": [],
                    "file name": "TailerTest.java",
                    "file old path": "src/test/java/org/apache/commons/io/input/TailerTest.java",
                    "file new path": "src/test/java/org/apache/commons/io/input/TailerTest.java",
                    "full name": "src.test.java.org.apache.commons.io.input.TailerTest.testMultiByteBreak"
                }
            ],
            "files that changed": [
                "src/main/java/org/apache/commons/io/input/Tailer.java",
                "src/test/java/org/apache/commons/io/input/TailerTest.java"
            ]
        },
        {
            "bug index": "183",
            "bug id": "IO-372",
            "hexsha": "d9406824aeba0e977c0692971a6dbb2e62823886",
            "fix_hash": "02c9bc67445bb77814ff7aae7872c24f1ab5b072",
            "description": "I am seeing the following error message when trying to move a directory:\n\n\"Cannot move directory: /path/to/directory to a subdirectory of itself: /path/to/directory_renamed\"\n\nThis statement is iincorrect the destination path is not a sub directory of the source path.\n\nLooking at the source l.2752 the destination directory is being compared to the source directory without using a File.separator\n\nHere's a patch for the current trunk.\n\n{noformat}\nIndex: src/main/java/org/apache/commons/io/FileUtils.java\n===================================================================\n--- src/main/java/org/apache/commons/io/FileUtils.java\t(revision 1453996)\n+++ src/main/java/org/apache/commons/io/FileUtils.java\t(working copy)\n@@ -2803,7 +2803,7 @@\n         }\n         final boolean rename = srcDir.renameTo(destDir);\n         if (!rename) {\n-            if (destDir.getCanonicalPath().startsWith(srcDir.getCanonicalPath())) {\n+            if (destDir.getCanonicalPath().startsWith(srcDir.getCanonicalPath() + File.separator)) {\n                 throw new IOException(\"Cannot move directory: \"+srcDir+\" to a subdirectory of itself: \"+destDir);\n             }\n             copyDirectory( srcDir, destDir );\n  {noformat}",
            "commit number version hash": 1288,
            "commit number": 1069,
            "function that changed": [
                {
                    "function name": "moveDirectory",
                    "function params": [
                        "srcDir",
                        "destDir"
                    ],
                    "file name": "FileUtils.java",
                    "file old path": "src/main/java/org/apache/commons/io/FileUtils.java",
                    "file new path": "src/main/java/org/apache/commons/io/FileUtils.java",
                    "full name": "src.main.java.org.apache.commons.io.FileUtils.moveDirectory"
                }
            ],
            "files that changed": [
                "src/main/java/org/apache/commons/io/FileUtils.java"
            ]
        },
        {
            "bug index": "184",
            "bug id": "IO-323",
            "hexsha": "d9406824aeba0e977c0692971a6dbb2e62823886",
            "fix_hash": "6f9e2bbbe326f4860d75b3bea19d6cbbda13365c",
            "description": "FileUtils.sizeOf[Directory] adds longs. What should happen when an overflow happens?",
            "commit number version hash": 1288,
            "commit number": 1067,
            "function that changed": [],
            "files that changed": [
                "src/main/java/org/apache/commons/io/FileUtils.java"
            ]
        },
        {
            "bug index": "185",
            "bug id": "IO-372",
            "hexsha": "d9406824aeba0e977c0692971a6dbb2e62823886",
            "fix_hash": "30a51de13c6f80dbf9e64574f4ee89f5e05a7a36",
            "description": "I am seeing the following error message when trying to move a directory:\n\n\"Cannot move directory: /path/to/directory to a subdirectory of itself: /path/to/directory_renamed\"\n\nThis statement is iincorrect the destination path is not a sub directory of the source path.\n\nLooking at the source l.2752 the destination directory is being compared to the source directory without using a File.separator\n\nHere's a patch for the current trunk.\n\n{noformat}\nIndex: src/main/java/org/apache/commons/io/FileUtils.java\n===================================================================\n--- src/main/java/org/apache/commons/io/FileUtils.java\t(revision 1453996)\n+++ src/main/java/org/apache/commons/io/FileUtils.java\t(working copy)\n@@ -2803,7 +2803,7 @@\n         }\n         final boolean rename = srcDir.renameTo(destDir);\n         if (!rename) {\n-            if (destDir.getCanonicalPath().startsWith(srcDir.getCanonicalPath())) {\n+            if (destDir.getCanonicalPath().startsWith(srcDir.getCanonicalPath() + File.separator)) {\n                 throw new IOException(\"Cannot move directory: \"+srcDir+\" to a subdirectory of itself: \"+destDir);\n             }\n             copyDirectory( srcDir, destDir );\n  {noformat}",
            "commit number version hash": 1288,
            "commit number": 1065,
            "function that changed": [
                {
                    "function name": "moveDirectory",
                    "function params": [
                        "srcDir",
                        "destDir"
                    ],
                    "file name": "FileUtils.java",
                    "file old path": "src/main/java/org/apache/commons/io/FileUtils.java",
                    "file new path": "src/main/java/org/apache/commons/io/FileUtils.java",
                    "full name": "src.main.java.org.apache.commons.io.FileUtils.moveDirectory"
                }
            ],
            "files that changed": [
                "src/main/java/org/apache/commons/io/FileUtils.java"
            ]
        },
        {
            "bug index": "186",
            "bug id": "IO-374",
            "hexsha": "d9406824aeba0e977c0692971a6dbb2e62823886",
            "fix_hash": "8d0d2d84e983f3263b9a5bd7f373ac375ef80613",
            "description": "WildcardFileFilter ctors should not use null to mean IOCase.SENSITIVE when delegating to other ctors.\n\nJust because null happens to mean case-sensitive, does not mean that internal calls to ctors should use that feature. It makes the code harder to read.",
            "commit number version hash": 1288,
            "commit number": 1062,
            "function that changed": [
                {
                    "function name": "WildcardFileFilter",
                    "function params": [
                        "wildcards"
                    ],
                    "file name": "WildcardFileFilter.java",
                    "file old path": "src/main/java/org/apache/commons/io/filefilter/WildcardFileFilter.java",
                    "file new path": "src/main/java/org/apache/commons/io/filefilter/WildcardFileFilter.java",
                    "full name": "src.main.java.org.apache.commons.io.filefilter.WildcardFileFilter.WildcardFileFilter"
                },
                {
                    "function name": "WildcardFileFilter",
                    "function params": [
                        "wildcards"
                    ],
                    "file name": "WildcardFileFilter.java",
                    "file old path": "src/main/java/org/apache/commons/io/filefilter/WildcardFileFilter.java",
                    "file new path": "src/main/java/org/apache/commons/io/filefilter/WildcardFileFilter.java",
                    "full name": "src.main.java.org.apache.commons.io.filefilter.WildcardFileFilter.WildcardFileFilter"
                },
                {
                    "function name": "WildcardFileFilter",
                    "function params": [
                        "wildcard"
                    ],
                    "file name": "WildcardFileFilter.java",
                    "file old path": "src/main/java/org/apache/commons/io/filefilter/WildcardFileFilter.java",
                    "file new path": "src/main/java/org/apache/commons/io/filefilter/WildcardFileFilter.java",
                    "full name": "src.main.java.org.apache.commons.io.filefilter.WildcardFileFilter.WildcardFileFilter"
                }
            ],
            "files that changed": [
                "src/main/java/org/apache/commons/io/filefilter/WildcardFileFilter.java"
            ]
        },
        {
            "bug index": "187",
            "bug id": "IO-3",
            "hexsha": "742c51feeaf75542ab9db6782ad3d2ad506fb871",
            "fix_hash": "248e53e1f02ca2b1f83cc6f8dd7306f1091a5b2e",
            "description": "File copying using FileUtils.copyFile() does not preserve the last modified \ndate in the copy. I'm not sure about other OS's, but preservation of the last \nmodified date occurs when copying from Windows Explorer or the command window \nin a Windows environment. To add this feature to the class, just add the \nfollowing line at the end of FileUtils.copyFile():\n      destination.setLastModified(source.lastModified());\nTo unit test this change, add the following to the end of \nFileUtilsTestCase.testCopyFile1() and/or testCopyFile2():\n        assertTrue(\"Check last modified date preserved\", testFile1.lastModified\n() == destination.lastModified());",
            "commit number version hash": 443,
            "commit number": 1045,
            "function that changed": [],
            "files that changed": [
                "src/test/java/org/apache/commons/io/CharsetsTestCase.java",
                "src/test/java/org/apache/commons/io/DirectoryWalkerTestCase.java",
                "src/test/java/org/apache/commons/io/DirectoryWalkerTestCaseJava4.java",
                "src/test/java/org/apache/commons/io/FileSystemUtilsTestCase.java"
            ]
        },
        {
            "bug index": "188",
            "bug id": "IO-362",
            "hexsha": "d9406824aeba0e977c0692971a6dbb2e62823886",
            "fix_hash": "0cee0fe1d42f73933d8fdfedfe91bff8013f0bb3",
            "description": "The fix should be relatively simple, just add an identity check to the beginning of the method:\n\nif(is1 == is2) {\n  return true;\n}\n\nThe methods affected are:\n\n- org.apache.commons.io.IOUtils.contentEquals(InputStream, InputStream)\n- org.apache.commons.io.IOUtils.contentEquals(Reader, Reader)\n- org.apache.commons.io.IOUtils.contentEqualsIgnoreEOL(Reader, Reader)\n",
            "commit number version hash": 1288,
            "commit number": 1044,
            "function that changed": [
                {
                    "function name": "contentEquals",
                    "function params": [
                        "input1",
                        "input2"
                    ],
                    "file name": "IOUtils.java",
                    "file old path": "src/main/java/org/apache/commons/io/IOUtils.java",
                    "file new path": "src/main/java/org/apache/commons/io/IOUtils.java",
                    "full name": "src.main.java.org.apache.commons.io.IOUtils.contentEquals"
                },
                {
                    "function name": "contentEquals",
                    "function params": [
                        "input1",
                        "input2"
                    ],
                    "file name": "IOUtils.java",
                    "file old path": "src/main/java/org/apache/commons/io/IOUtils.java",
                    "file new path": "src/main/java/org/apache/commons/io/IOUtils.java",
                    "full name": "src.main.java.org.apache.commons.io.IOUtils.contentEquals"
                },
                {
                    "function name": "contentEqualsIgnoreEOL",
                    "function params": [
                        "input1",
                        "input2"
                    ],
                    "file name": "IOUtils.java",
                    "file old path": "src/main/java/org/apache/commons/io/IOUtils.java",
                    "file new path": "src/main/java/org/apache/commons/io/IOUtils.java",
                    "full name": "src.main.java.org.apache.commons.io.IOUtils.contentEqualsIgnoreEOL"
                },
                {
                    "function name": "testContentEqualsIgnoreEOL",
                    "function params": [],
                    "file name": "IOUtilsTestCase.java",
                    "file old path": "src/test/java/org/apache/commons/io/IOUtilsTestCase.java",
                    "file new path": "src/test/java/org/apache/commons/io/IOUtilsTestCase.java",
                    "full name": "src.test.java.org.apache.commons.io.IOUtilsTestCase.testContentEqualsIgnoreEOL"
                },
                {
                    "function name": "testContentEquals_InputStream_InputStream",
                    "function params": [],
                    "file name": "IOUtilsTestCase.java",
                    "file old path": "src/test/java/org/apache/commons/io/IOUtilsTestCase.java",
                    "file new path": "src/test/java/org/apache/commons/io/IOUtilsTestCase.java",
                    "full name": "src.test.java.org.apache.commons.io.IOUtilsTestCase.testContentEquals_InputStream_InputStream"
                },
                {
                    "function name": "testContentEquals_Reader_Reader",
                    "function params": [],
                    "file name": "IOUtilsTestCase.java",
                    "file old path": "src/test/java/org/apache/commons/io/IOUtilsTestCase.java",
                    "file new path": "src/test/java/org/apache/commons/io/IOUtilsTestCase.java",
                    "full name": "src.test.java.org.apache.commons.io.IOUtilsTestCase.testContentEquals_Reader_Reader"
                }
            ],
            "files that changed": [
                "src/main/java/org/apache/commons/io/IOUtils.java",
                "src/test/java/org/apache/commons/io/IOUtilsTestCase.java"
            ]
        },
        {
            "bug index": "189",
            "bug id": "IO-361",
            "hexsha": "d9406824aeba0e977c0692971a6dbb2e62823886",
            "fix_hash": "587571dde227323b50a1c43dddfeda38f18c3adf",
            "description": "Add API FileUtils.forceMkdirsParent():\n\n{code:java}\n    /**\n     * Makes any necessary but nonexistent parent directories for a given File. If the parent directory cannot be\n     * created then an IOException is thrown.\n     * \n     * @param file\n     *            file with parent to create, must not be {@code null}\n     * @throws NullPointerException\n     *             if the file is {@code null}\n     * @throws IOException\n     *             if the parent directory cannot be created\n     * @since 2.5\n     */\n    public static void forceMkdirParent(final File file) throws IOException \n{code}",
            "commit number version hash": 1288,
            "commit number": 1043,
            "function that changed": [
                {
                    "function name": "forceMkdirParent",
                    "function params": [
                        "file"
                    ],
                    "file name": "FileUtils.java",
                    "file old path": "src/main/java/org/apache/commons/io/FileUtils.java",
                    "file new path": "src/main/java/org/apache/commons/io/FileUtils.java",
                    "full name": "src.main.java.org.apache.commons.io.FileUtils.forceMkdirParent"
                },
                {
                    "function name": "testForceMkdirParent",
                    "function params": [],
                    "file name": "FileUtilsTestCase.java",
                    "file old path": "src/test/java/org/apache/commons/io/FileUtilsTestCase.java",
                    "file new path": "src/test/java/org/apache/commons/io/FileUtilsTestCase.java",
                    "full name": "src.test.java.org.apache.commons.io.FileUtilsTestCase.testForceMkdirParent"
                }
            ],
            "files that changed": [
                "src/main/java/org/apache/commons/io/FileUtils.java",
                "src/test/java/org/apache/commons/io/FileUtilsTestCase.java"
            ]
        },
        {
            "bug index": "190",
            "bug id": "IO-356",
            "hexsha": "d9406824aeba0e977c0692971a6dbb2e62823886",
            "fix_hash": "88776758f4df1ab57d342594fef650da022461bd",
            "description": "The size effect happens when buffer size of input stream is not dividable by requested data size. The bug is hidden in {{CharSequenceInputStream#reset()}} method which should also call (I think) {{bbuf.limit(0)}} otherwise next call to {{CharSequenceInputStream#read()}} will return the remaining tail which {{bbuf}} has accumulated.\n\nIn the attached test case the test fails, if {{dataSize = 13}} (not dividable by 10) and runs OK if {{dataSize = 20}} (dividable by 10).",
            "commit number version hash": 1288,
            "commit number": 1039,
            "function that changed": [
                {
                    "function name": "testIO_356_Loop_UTF8",
                    "function params": [],
                    "file name": "CharSequenceInputStreamTest.java",
                    "file old path": "src/test/java/org/apache/commons/io/input/CharSequenceInputStreamTest.java",
                    "file new path": "src/test/java/org/apache/commons/io/input/CharSequenceInputStreamTest.java",
                    "full name": "src.test.java.org.apache.commons.io.input.CharSequenceInputStreamTest.testIO_356_Loop_UTF8"
                },
                {
                    "function name": "testIO_356_B10_D10_S1_UTF8",
                    "function params": [],
                    "file name": "CharSequenceInputStreamTest.java",
                    "file old path": "src/test/java/org/apache/commons/io/input/CharSequenceInputStreamTest.java",
                    "file new path": "src/test/java/org/apache/commons/io/input/CharSequenceInputStreamTest.java",
                    "full name": "src.test.java.org.apache.commons.io.input.CharSequenceInputStreamTest.testIO_356_B10_D10_S1_UTF8"
                },
                {
                    "function name": "testCharsetMismatchInfiniteLoop_RequiredCharsets",
                    "function params": [],
                    "file name": "CharSequenceInputStreamTest.java",
                    "file old path": "src/test/java/org/apache/commons/io/input/CharSequenceInputStreamTest.java",
                    "file new path": "src/test/java/org/apache/commons/io/input/CharSequenceInputStreamTest.java",
                    "full name": "src.test.java.org.apache.commons.io.input.CharSequenceInputStreamTest.testCharsetMismatchInfiniteLoop_RequiredCharsets"
                },
                {
                    "function name": "testIO_356_B10_D13_S1_UTF8",
                    "function params": [],
                    "file name": "CharSequenceInputStreamTest.java",
                    "file old path": "src/test/java/org/apache/commons/io/input/CharSequenceInputStreamTest.java",
                    "file new path": "src/test/java/org/apache/commons/io/input/CharSequenceInputStreamTest.java",
                    "full name": "src.test.java.org.apache.commons.io.input.CharSequenceInputStreamTest.testIO_356_B10_D13_S1_UTF8"
                },
                {
                    "function name": "testIO_356_B10_D10_S0_UTF16",
                    "function params": [],
                    "file name": "CharSequenceInputStreamTest.java",
                    "file old path": "src/test/java/org/apache/commons/io/input/CharSequenceInputStreamTest.java",
                    "file new path": "src/test/java/org/apache/commons/io/input/CharSequenceInputStreamTest.java",
                    "full name": "src.test.java.org.apache.commons.io.input.CharSequenceInputStreamTest.testIO_356_B10_D10_S0_UTF16"
                },
                {
                    "function name": "testIO_356_Loop_UTF16",
                    "function params": [],
                    "file name": "CharSequenceInputStreamTest.java",
                    "file old path": "src/test/java/org/apache/commons/io/input/CharSequenceInputStreamTest.java",
                    "file new path": "src/test/java/org/apache/commons/io/input/CharSequenceInputStreamTest.java",
                    "full name": "src.test.java.org.apache.commons.io.input.CharSequenceInputStreamTest.testIO_356_Loop_UTF16"
                },
                {
                    "function name": "testIO_356",
                    "function params": [],
                    "file name": "CharSequenceInputStreamTest.java",
                    "file old path": "src/test/java/org/apache/commons/io/input/CharSequenceInputStreamTest.java",
                    "file new path": "src/test/java/org/apache/commons/io/input/CharSequenceInputStreamTest.java",
                    "full name": "src.test.java.org.apache.commons.io.input.CharSequenceInputStreamTest.testIO_356"
                },
                {
                    "function name": "testIO_356",
                    "function params": [],
                    "file name": "CharSequenceInputStreamTest.java",
                    "file old path": "src/test/java/org/apache/commons/io/input/CharSequenceInputStreamTest.java",
                    "file new path": "src/test/java/org/apache/commons/io/input/CharSequenceInputStreamTest.java",
                    "full name": "src.test.java.org.apache.commons.io.input.CharSequenceInputStreamTest.testIO_356"
                },
                {
                    "function name": "testIO_356_Loop",
                    "function params": [],
                    "file name": "CharSequenceInputStreamTest.java",
                    "file old path": "src/test/java/org/apache/commons/io/input/CharSequenceInputStreamTest.java",
                    "file new path": "src/test/java/org/apache/commons/io/input/CharSequenceInputStreamTest.java",
                    "full name": "src.test.java.org.apache.commons.io.input.CharSequenceInputStreamTest.testIO_356_Loop"
                },
                {
                    "function name": "testIO_356_B10_D13_S0_UTF8",
                    "function params": [],
                    "file name": "CharSequenceInputStreamTest.java",
                    "file old path": "src/test/java/org/apache/commons/io/input/CharSequenceInputStreamTest.java",
                    "file new path": "src/test/java/org/apache/commons/io/input/CharSequenceInputStreamTest.java",
                    "full name": "src.test.java.org.apache.commons.io.input.CharSequenceInputStreamTest.testIO_356_B10_D13_S0_UTF8"
                },
                {
                    "function name": "testIO_356",
                    "function params": [],
                    "file name": "CharSequenceInputStreamTest.java",
                    "file old path": "src/test/java/org/apache/commons/io/input/CharSequenceInputStreamTest.java",
                    "file new path": "src/test/java/org/apache/commons/io/input/CharSequenceInputStreamTest.java",
                    "full name": "src.test.java.org.apache.commons.io.input.CharSequenceInputStreamTest.testIO_356"
                },
                {
                    "function name": "testIO_356_B10_D10_S2_UTF8",
                    "function params": [],
                    "file name": "CharSequenceInputStreamTest.java",
                    "file old path": "src/test/java/org/apache/commons/io/input/CharSequenceInputStreamTest.java",
                    "file new path": "src/test/java/org/apache/commons/io/input/CharSequenceInputStreamTest.java",
                    "full name": "src.test.java.org.apache.commons.io.input.CharSequenceInputStreamTest.testIO_356_B10_D10_S2_UTF8"
                },
                {
                    "function name": "testIO_356_B10_D10_S0_UTF8",
                    "function params": [],
                    "file name": "CharSequenceInputStreamTest.java",
                    "file old path": "src/test/java/org/apache/commons/io/input/CharSequenceInputStreamTest.java",
                    "file new path": "src/test/java/org/apache/commons/io/input/CharSequenceInputStreamTest.java",
                    "full name": "src.test.java.org.apache.commons.io.input.CharSequenceInputStreamTest.testIO_356_B10_D10_S0_UTF8"
                },
                {
                    "function name": "testIO_356_B10_D20_S0_UTF8",
                    "function params": [],
                    "file name": "CharSequenceInputStreamTest.java",
                    "file old path": "src/test/java/org/apache/commons/io/input/CharSequenceInputStreamTest.java",
                    "file new path": "src/test/java/org/apache/commons/io/input/CharSequenceInputStreamTest.java",
                    "full name": "src.test.java.org.apache.commons.io.input.CharSequenceInputStreamTest.testIO_356_B10_D20_S0_UTF8"
                }
            ],
            "files that changed": [
                "src/test/java/org/apache/commons/io/input/CharSequenceInputStreamTest.java"
            ]
        },
        {
            "bug index": "191",
            "bug id": "IO-356",
            "hexsha": "d9406824aeba0e977c0692971a6dbb2e62823886",
            "fix_hash": "3ebe52e2a37ff49ffa2811533023dab3d3fbba69",
            "description": "The size effect happens when buffer size of input stream is not dividable by requested data size. The bug is hidden in {{CharSequenceInputStream#reset()}} method which should also call (I think) {{bbuf.limit(0)}} otherwise next call to {{CharSequenceInputStream#read()}} will return the remaining tail which {{bbuf}} has accumulated.\n\nIn the attached test case the test fails, if {{dataSize = 13}} (not dividable by 10) and runs OK if {{dataSize = 20}} (dividable by 10).",
            "commit number version hash": 1288,
            "commit number": 1013,
            "function that changed": [
                {
                    "function name": "testIO_356",
                    "function params": [],
                    "file name": "CharSequenceInputStreamTest.java",
                    "file old path": "src/test/java/org/apache/commons/io/input/CharSequenceInputStreamTest.java",
                    "file new path": "src/test/java/org/apache/commons/io/input/CharSequenceInputStreamTest.java",
                    "full name": "src.test.java.org.apache.commons.io.input.CharSequenceInputStreamTest.testIO_356"
                }
            ],
            "files that changed": [
                "src/test/java/org/apache/commons/io/input/CharSequenceInputStreamTest.java"
            ]
        },
        {
            "bug index": "192",
            "bug id": "IO-356",
            "hexsha": "d9406824aeba0e977c0692971a6dbb2e62823886",
            "fix_hash": "4740a19f6c6b3c2a96d08879abe6773885086758",
            "description": "The size effect happens when buffer size of input stream is not dividable by requested data size. The bug is hidden in {{CharSequenceInputStream#reset()}} method which should also call (I think) {{bbuf.limit(0)}} otherwise next call to {{CharSequenceInputStream#read()}} will return the remaining tail which {{bbuf}} has accumulated.\n\nIn the attached test case the test fails, if {{dataSize = 13}} (not dividable by 10) and runs OK if {{dataSize = 20}} (dividable by 10).",
            "commit number version hash": 1288,
            "commit number": 1012,
            "function that changed": [
                {
                    "function name": "testIO_356",
                    "function params": [],
                    "file name": "CharSequenceInputStreamTest.java",
                    "file old path": "src/test/java/org/apache/commons/io/input/CharSequenceInputStreamTest.java",
                    "file new path": "src/test/java/org/apache/commons/io/input/CharSequenceInputStreamTest.java",
                    "full name": "src.test.java.org.apache.commons.io.input.CharSequenceInputStreamTest.testIO_356"
                },
                {
                    "function name": "testIO_356",
                    "function params": [],
                    "file name": "CharSequenceInputStreamTest.java",
                    "file old path": "src/test/java/org/apache/commons/io/input/CharSequenceInputStreamTest.java",
                    "file new path": "src/test/java/org/apache/commons/io/input/CharSequenceInputStreamTest.java",
                    "full name": "src.test.java.org.apache.commons.io.input.CharSequenceInputStreamTest.testIO_356"
                }
            ],
            "files that changed": [
                "src/test/java/org/apache/commons/io/input/CharSequenceInputStreamTest.java"
            ]
        },
        {
            "bug index": "193",
            "bug id": "IO-355",
            "hexsha": "d9406824aeba0e977c0692971a6dbb2e62823886",
            "fix_hash": "6bca441fd2acc7ee8f548009e6dbaa977f03b681",
            "description": "IOUtils.skip(InputStream, long) and IOUtils.skip(Reader, long) have the worst possible performance as they always use read() on the input instead of using skip(). In many cases, using skip() from a subclass of InputStream is much faster than read(), as the skip() can be implemented via a disk seek.\n\nThe IOUtils.skip() methods are also used in the copyLarge() methods that involve a skip.\n\nCase in point: I have observed this performance degradation with Java 7 on Windows 7. A series of consecutive copyLarge() invocations on a large file on disk that involved skips changed my performance from 30 secs as my baseline to 10 minutes after starting to use IOUtils.copyLarge().",
            "commit number version hash": 1288,
            "commit number": 1010,
            "function that changed": [],
            "files that changed": [
                "src/main/java/org/apache/commons/io/IOUtils.java"
            ]
        },
        {
            "bug index": "194",
            "bug id": "IO-355",
            "hexsha": "d9406824aeba0e977c0692971a6dbb2e62823886",
            "fix_hash": "2a07afd1124bc9f3274acaf6ea66548e5e60558b",
            "description": "IOUtils.skip(InputStream, long) and IOUtils.skip(Reader, long) have the worst possible performance as they always use read() on the input instead of using skip(). In many cases, using skip() from a subclass of InputStream is much faster than read(), as the skip() can be implemented via a disk seek.\n\nThe IOUtils.skip() methods are also used in the copyLarge() methods that involve a skip.\n\nCase in point: I have observed this performance degradation with Java 7 on Windows 7. A series of consecutive copyLarge() invocations on a large file on disk that involved skips changed my performance from 30 secs as my baseline to 10 minutes after starting to use IOUtils.copyLarge().",
            "commit number version hash": 1288,
            "commit number": 1009,
            "function that changed": [
                {
                    "function name": "skip",
                    "function params": [
                        "input",
                        "toSkip"
                    ],
                    "file name": "IOUtils.java",
                    "file old path": "src/main/java/org/apache/commons/io/IOUtils.java",
                    "file new path": "src/main/java/org/apache/commons/io/IOUtils.java",
                    "full name": "src.main.java.org.apache.commons.io.IOUtils.skip"
                },
                {
                    "function name": "skip",
                    "function params": [
                        "input",
                        "toSkip"
                    ],
                    "file name": "IOUtils.java",
                    "file old path": "src/main/java/org/apache/commons/io/IOUtils.java",
                    "file new path": "src/main/java/org/apache/commons/io/IOUtils.java",
                    "full name": "src.main.java.org.apache.commons.io.IOUtils.skip"
                }
            ],
            "files that changed": [
                "src/main/java/org/apache/commons/io/IOUtils.java"
            ]
        },
        {
            "bug index": "195",
            "bug id": "IO-2",
            "hexsha": "742c51feeaf75542ab9db6782ad3d2ad506fb871",
            "fix_hash": "965f66687351e0abd445925d0497f96e5656ff13",
            "description": "Hi,\n\n(sorry to assign it to the wrong component, but I cannot choose for IO)\n\nwhen I try to concat 2 paths with \"\\\" as path separator instead of \"/\", an\nexception is thrown. I'll upload a patch for this as well as a junit test.\n\ne.g.: FilenameUtils.catPath(\"C:\\\\temp\\\\\", \"test\") throws an exception ...\n\nMaarten",
            "commit number version hash": 443,
            "commit number": 1007,
            "function that changed": [],
            "files that changed": [
                "src/main/java/org/apache/commons/io/FileUtils.java"
            ]
        },
        {
            "bug index": "196",
            "bug id": "IO-343",
            "hexsha": "d9406824aeba0e977c0692971a6dbb2e62823886",
            "fix_hash": "8575fc5a20851896abb48f51bde5f2a0308b7a4c",
            "description": "Package org.apache.commons.io.comparator has a lot of inconsistent JavaDocs. \nFor example this class org.apache.commons.io.comparator.NameFileComparator\nhttp://svn.apache.org/viewvc/commons/proper/io/trunk/src/main/java/org/apache/commons/io/comparator/NameFileComparator.java?view=markup\nhas JavaDocs\n List&lt;File&gt; list = ...\n NameFileComparator.NAME_COMPARATOR.sort(list); ....\n\n File[] array = ...\n NameFileComparator.NAME_INSENSITIVE_REVERSE.sort(array);\n\nbut this will not work because all static members of NameFileComparator declared as Comparator<File> for example \n public static final Comparator<File> NAME_REVERSE = new ReverseComparator(NAME_COMPARATOR);\npublic static final Comparator<File> NAME_INSENSITIVE_REVERSE = new ReverseComparator(NAME_INSENSITIVE_COMPARATOR);\n\nand Comparator class doesn't have the sort() method.\n",
            "commit number version hash": 1288,
            "commit number": 1002,
            "function that changed": [
                {
                    "function name": "setUp",
                    "function params": [],
                    "file name": "ComparatorAbstractTestCase.java",
                    "file old path": "src/test/java/org/apache/commons/io/comparator/ComparatorAbstractTestCase.java",
                    "file new path": "src/test/java/org/apache/commons/io/comparator/ComparatorAbstractTestCase.java",
                    "full name": "src.test.java.org.apache.commons.io.comparator.ComparatorAbstractTestCase.setUp"
                },
                {
                    "function name": "setUp",
                    "function params": [],
                    "file name": "DefaultFileComparatorTest.java",
                    "file old path": "src/test/java/org/apache/commons/io/comparator/DefaultFileComparatorTest.java",
                    "file new path": "src/test/java/org/apache/commons/io/comparator/DefaultFileComparatorTest.java",
                    "full name": "src.test.java.org.apache.commons.io.comparator.DefaultFileComparatorTest.setUp"
                },
                {
                    "function name": "setUp",
                    "function params": [],
                    "file name": "DirectoryFileComparatorTest.java",
                    "file old path": "src/test/java/org/apache/commons/io/comparator/DirectoryFileComparatorTest.java",
                    "file new path": "src/test/java/org/apache/commons/io/comparator/DirectoryFileComparatorTest.java",
                    "full name": "src.test.java.org.apache.commons.io.comparator.DirectoryFileComparatorTest.setUp"
                },
                {
                    "function name": "setUp",
                    "function params": [],
                    "file name": "ExtensionFileComparatorTest.java",
                    "file old path": "src/test/java/org/apache/commons/io/comparator/ExtensionFileComparatorTest.java",
                    "file new path": "src/test/java/org/apache/commons/io/comparator/ExtensionFileComparatorTest.java",
                    "full name": "src.test.java.org.apache.commons.io.comparator.ExtensionFileComparatorTest.setUp"
                },
                {
                    "function name": "setUp",
                    "function params": [],
                    "file name": "LastModifiedFileComparatorTest.java",
                    "file old path": "src/test/java/org/apache/commons/io/comparator/LastModifiedFileComparatorTest.java",
                    "file new path": "src/test/java/org/apache/commons/io/comparator/LastModifiedFileComparatorTest.java",
                    "full name": "src.test.java.org.apache.commons.io.comparator.LastModifiedFileComparatorTest.setUp"
                },
                {
                    "function name": "setUp",
                    "function params": [],
                    "file name": "NameFileComparatorTest.java",
                    "file old path": "src/test/java/org/apache/commons/io/comparator/NameFileComparatorTest.java",
                    "file new path": "src/test/java/org/apache/commons/io/comparator/NameFileComparatorTest.java",
                    "full name": "src.test.java.org.apache.commons.io.comparator.NameFileComparatorTest.setUp"
                },
                {
                    "function name": "setUp",
                    "function params": [],
                    "file name": "PathFileComparatorTest.java",
                    "file old path": "src/test/java/org/apache/commons/io/comparator/PathFileComparatorTest.java",
                    "file new path": "src/test/java/org/apache/commons/io/comparator/PathFileComparatorTest.java",
                    "full name": "src.test.java.org.apache.commons.io.comparator.PathFileComparatorTest.setUp"
                },
                {
                    "function name": "setUp",
                    "function params": [],
                    "file name": "SizeFileComparatorTest.java",
                    "file old path": "src/test/java/org/apache/commons/io/comparator/SizeFileComparatorTest.java",
                    "file new path": "src/test/java/org/apache/commons/io/comparator/SizeFileComparatorTest.java",
                    "full name": "src.test.java.org.apache.commons.io.comparator.SizeFileComparatorTest.setUp"
                }
            ],
            "files that changed": [
                "src/main/java/org/apache/commons/io/comparator/DefaultFileComparator.java",
                "src/main/java/org/apache/commons/io/comparator/DirectoryFileComparator.java",
                "src/main/java/org/apache/commons/io/comparator/ExtensionFileComparator.java",
                "src/main/java/org/apache/commons/io/comparator/LastModifiedFileComparator.java",
                "src/main/java/org/apache/commons/io/comparator/NameFileComparator.java",
                "src/main/java/org/apache/commons/io/comparator/PathFileComparator.java",
                "src/main/java/org/apache/commons/io/comparator/SizeFileComparator.java",
                "src/test/java/org/apache/commons/io/comparator/ComparatorAbstractTestCase.java",
                "src/test/java/org/apache/commons/io/comparator/DefaultFileComparatorTest.java",
                "src/test/java/org/apache/commons/io/comparator/DirectoryFileComparatorTest.java",
                "src/test/java/org/apache/commons/io/comparator/ExtensionFileComparatorTest.java",
                "src/test/java/org/apache/commons/io/comparator/LastModifiedFileComparatorTest.java",
                "src/test/java/org/apache/commons/io/comparator/NameFileComparatorTest.java",
                "src/test/java/org/apache/commons/io/comparator/PathFileComparatorTest.java",
                "src/test/java/org/apache/commons/io/comparator/SizeFileComparatorTest.java"
            ]
        },
        {
            "bug index": "197",
            "bug id": "IO-1",
            "hexsha": "742c51feeaf75542ab9db6782ad3d2ad506fb871",
            "fix_hash": "8e0d0702ed72e97e3367cd1fc02ca34f563f28d5",
            "description": "FileUtils.forceMkdir(File) calls File.mkdirs() to create the directory. The\nJavaDoc of this method does not mention that any necessary but nonexistent\nparent directories are created, too.",
            "commit number version hash": 443,
            "commit number": 1000,
            "function that changed": [
                {
                    "function name": "testReadXmlWithBOMUcs2",
                    "function params": [],
                    "file name": "BOMInputStreamTest.java",
                    "file old path": "src/test/java/org/apache/commons/io/input/BOMInputStreamTest.java",
                    "file new path": "src/test/java/org/apache/commons/io/input/BOMInputStreamTest.java",
                    "full name": "src.test.java.org.apache.commons.io.input.BOMInputStreamTest.testReadXmlWithBOMUcs2"
                },
                {
                    "function name": "testReadXmlWithBOMUcs4",
                    "function params": [],
                    "file name": "BOMInputStreamTest.java",
                    "file old path": "src/test/java/org/apache/commons/io/input/BOMInputStreamTest.java",
                    "file new path": "src/test/java/org/apache/commons/io/input/BOMInputStreamTest.java",
                    "full name": "src.test.java.org.apache.commons.io.input.BOMInputStreamTest.testReadXmlWithBOMUcs4"
                }
            ],
            "files that changed": [
                "src/test/java/org/apache/commons/io/input/BOMInputStreamTest.java"
            ]
        },
        {
            "bug index": "198",
            "bug id": "IO-32",
            "hexsha": "742c51feeaf75542ab9db6782ad3d2ad506fb871",
            "fix_hash": "9445933a5ab9e9c7430e22770bae4f4fb47bc3ff",
            "description": "Hi,\n\n \n\nTwo of the tasks listed in the IO to-do list are adding the ability to\niterate over the lines in a file and the files in a directory.  This\npatch implements those things as methods on FileUtils and provides test\ncases for the new methods.\n\n \n\n  Jim Harrington\n\n*** patch follows ***\nIndex: src/java/org/apache/commons/io/FileUtils.java\n\n===================================================================\n\n--- src/java/org/apache/commons/io/FileUtils.java\t(revision 359064)\n\n+++ src/java/org/apache/commons/io/FileUtils.java\t(working copy)\n\n@@ -28,6 +28,7 @@\n\n import java.util.Collection;\n import java.util.Date;\n import java.util.List;\n+import java.util.Iterator;\n \n import org.apache.commons.io.filefilter.DirectoryFileFilter;\n import org.apache.commons.io.filefilter.FalseFileFilter;\n@@ -226,7 +227,29 @@\n\n         return files;\n     }\n \n+    /**\n+     * <p>Allows iteration over the files in given directory (and optionally\n+     * its subdirectories). All files found are filtered by an IOFileFilter.\n+     *\n+     * See:\n+     * @see #listFiles(File, IOFileFilter, IOFileFilter)\n+     * for more information.\n+     * </p>\n+     * @param directory the directory to search in\n+     * @param fileFilter filter to apply when finding files.\n+     * @param dirFilter optional filter to apply when finding subdirectories.\n+     * If this parameter is null, subdirectories will not be included in the\n+     * search. Use TrueFileFilter.INSTANCE to match all directories.\n+     * @return an iterator of java.io.File for the matching files\n+     * @see org.apache.commons.io.filefilter.FileFilterUtils\n+     * @see org.apache.commons.io.filefilter.NameFileFilter\n+     */\n+    public static Iterator iterateFiles(File directory, IOFileFilter \nfileFilter,\n+                                        IOFileFilter dirFilter) {\n+        return (listFiles( directory, fileFilter, dirFilter)).iterator();\n+    }\n \n+\n     /**\n      * Converts an array of file extensions to suffixes for use\n      * with IOFileFilters.\n@@ -264,7 +287,21 @@\n\n             (recursive ? TrueFileFilter.INSTANCE : FalseFileFilter.INSTANCE));\n     }\n \n+    /**\n+     * Allows iteration over the files in a given directory (and optionally\n+     * its subdirectories) which match an array of extensions.\n+     * @param directory the directory to search in\n+     * @param extensions an array of extensions, ex. {\"java\",\"xml\"}. If this\n+     * parameter is null, all files are returned.\n+     * @param recursive If true all subdirectories are searched, too.\n+     * @return an iterator of java.io.File with the matching files\n+     */\n+    public static Iterator iterateFiles(\n+                                        File directory, String[] extensions, \nboolean recursive) {\n+        return (listFiles(directory, extensions, recursive)).iterator();\n+    }\n \n+\n     /**\n      * <p>Compare the contents of two files to determine if they are equal or\n      * not.</p>\n@@ -841,6 +878,29 @@\n\n     //-----------------------------------------------------------------------\n     /**\n      * <p>\n+     * Reads the contents of a file line by line and returns an iterator over\n+     * those lines.\n+     *\n+     * <p>\n+     * There is no iterateLines method without encoding parameter because\n+     * the default encoding can differ between platforms and therefore results\n+     * in inconsistent results.\n+     * </p>\n+     *\n+     * @param file  the file to read\n+     * @param encoding  the encoding to use, null means platform default\n+     * @return an iterator over the lines in the file\n+     * @throws IOException in case of an I/O error\n+     * @throws UnsupportedEncodingException if the encoding is not supported \nby the VM\n+     * @since Commons IO 1.2\n+     */\n+    public static final Iterator iterateLines(File file, String encoding) \nthrows IOException {\n+        return (readLines(file, encoding)).iterator();\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    /**\n+     * <p>\n      * Writes a String to a file creating the file if it does not exist.\n      * </p>\n      * <p>\nIndex: src/test/org/apache/commons/io/FileUtilsTestCase.java\n\n===================================================================\n\n--- src/test/org/apache/commons/io/FileUtilsTestCase.java\t(revision \n359064)\n\n+++ src/test/org/apache/commons/io/FileUtilsTestCase.java\t(working copy)\n\n@@ -24,12 +24,17 @@\n\n import java.util.Arrays;\n import java.util.GregorianCalendar;\n import java.util.List;\n+import java.util.Collection;\n+import java.util.Iterator;\n+import java.util.Map;\n+import java.util.HashMap;\n \n import junit.framework.Test;\n import junit.framework.TestSuite;\n import junit.textui.TestRunner;\n \n import org.apache.commons.io.testtools.FileBasedTestCase;\n+import org.apache.commons.io.filefilter.WildcardFilter;\n \n /**\n  * This is used to test FileUtils for correctness.\n@@ -659,6 +664,81 @@\n\n         assertEquals(\"FileUtils.touch() changed lastModified to less than \nnow+3s\", true, file.lastModified() <= (now + 3000));\n     }\n \n+    public void testListFiles() throws Exception {\n+        File srcDir = getTestDirectory();\n+        File subDir = new File(srcDir, \"list_test\" );\n+        subDir.mkdir();\n+\n+        String[] fileNames = \n{ \"a.txt\", \"b.txt\", \"c.txt\", \"d.txt\", \"e.txt\", \"f.txt\" };\n+        int[] fileSizes = { 123, 234, 345, 456, 678, 789 };\n+\n+        for(int i = 0; i < fileNames.length; ++i) {\n+            File theFile = new File(subDir, fileNames[i]);\n+            createFile(theFile, fileSizes[i]);\n+        }\n+\n+        Collection files = FileUtils.listFiles(subDir,\n+                                               new WildcardFilter(\"*.*\"),\n+                                               new WildcardFilter(\"*\"));\n+\n+        int count = files.size();\n+        Object[] fileObjs = files.toArray();\n+\n+        assertEquals(files.size(), fileNames.length);\n+\n+        Map foundFileNames = new HashMap();\n+\n+        for(int i = 0; i < count; ++i) {\n+            boolean found = false;\n+            for(int j = 0; (( !found ) && (j < fileNames.length)); ++j) {\n+                if ( fileNames[j].equals(((File) fileObjs[i]).getName())) {\n+                    foundFileNames.put(fileNames[j], fileNames[j]);\n+                    found = true;\n+                }\n+            }\n+        }\n+\n+        assertEquals(foundFileNames.size(), fileNames.length);\n+\n+        subDir.delete();\n+    }\n+\n+    public void testIterateFiles() throws Exception {\n+        File srcDir = getTestDirectory();\n+        File subDir = new File(srcDir, \"list_test\" );\n+        subDir.mkdir();\n+\n+        String[] fileNames = \n{ \"a.txt\", \"b.txt\", \"c.txt\", \"d.txt\", \"e.txt\", \"f.txt\" };\n+        int[] fileSizes = { 123, 234, 345, 456, 678, 789 };\n+\n+        for(int i = 0; i < fileNames.length; ++i) {\n+            File theFile = new File(subDir, fileNames[i]);\n+            createFile(theFile, fileSizes[i]);\n+        }\n+\n+        Iterator files = FileUtils.iterateFiles(subDir,\n+                                                new WildcardFilter(\"*.*\"),\n+                                                new WildcardFilter(\"*\"));\n+\n+        Map foundFileNames = new HashMap();\n+\n+        while(files.hasNext()) {\n+            boolean found = false;\n+            String fileName = ((File) files.next()).getName();\n+\n+            for(int j = 0; (( !found ) && (j < fileNames.length)); ++j) {\n+                if ( fileNames[j].equals(fileName)) {\n+                    foundFileNames.put(fileNames[j], fileNames[j]);\n+                    found = true;\n+                }\n+            }\n+        }\n+\n+        assertEquals(foundFileNames.size(), fileNames.length);\n+\n+        subDir.delete();\n+    }\n+\n     public void testReadFileToString() throws Exception {\n         File file = new File(getTestDirectory(), \"read.obj\");\n         FileOutputStream out = new FileOutputStream(file);\n@@ -698,6 +778,25 @@\n\n         }\n     }\n \n+    public void testIterateLines() throws Exception {\n+        File file = newFile(\"lines.txt\");\n+        try {\n+            String[] data = new String[] {\"hello\", \"/u1234\", \"\", \"this \nis\", \"some text\"};\n+            createLineBasedFile(file, data);\n+\n+            Iterator lines = FileUtils.iterateLines(file, \"UTF-8\");\n+            int counter = 0;\n+\n+            while( lines.hasNext() ) {\n+                String line = (String) lines.next();\n+                assertEquals(data[counter], line);\n+                ++counter;\n+            }\n+        } finally {\n+            deleteFile(file);\n+        }\n+    }\n+\n     public void testWriteStringToFile1() throws Exception {\n         File file = new File(getTestDirectory(), \"write.txt\");\n         FileUtils.writeStringToFile(file, \"Hello /u1234\", \"UTF8\");",
            "commit number version hash": 443,
            "commit number": 996,
            "function that changed": [
                {
                    "function name": "testReadXmlWithoutBOMUtf32Be",
                    "function params": [],
                    "file name": "BOMInputStreamTest.java",
                    "file old path": "src/test/java/org/apache/commons/io/input/BOMInputStreamTest.java",
                    "file new path": "src/test/java/org/apache/commons/io/input/BOMInputStreamTest.java",
                    "full name": "src.test.java.org.apache.commons.io.input.BOMInputStreamTest.testReadXmlWithoutBOMUtf32Be"
                },
                {
                    "function name": "testReadXmlWithoutBOMUtf32Le",
                    "function params": [],
                    "file name": "BOMInputStreamTest.java",
                    "file old path": "src/test/java/org/apache/commons/io/input/BOMInputStreamTest.java",
                    "file new path": "src/test/java/org/apache/commons/io/input/BOMInputStreamTest.java",
                    "full name": "src.test.java.org.apache.commons.io.input.BOMInputStreamTest.testReadXmlWithoutBOMUtf32Le"
                }
            ],
            "files that changed": [
                "src/test/java/org/apache/commons/io/input/BOMInputStreamTest.java"
            ]
        },
        {
            "bug index": "199",
            "bug id": "IO-32",
            "hexsha": "742c51feeaf75542ab9db6782ad3d2ad506fb871",
            "fix_hash": "1d4a1324efbb812ef246f5f84375d635b8b3e6e1",
            "description": "Hi,\n\n \n\nTwo of the tasks listed in the IO to-do list are adding the ability to\niterate over the lines in a file and the files in a directory.  This\npatch implements those things as methods on FileUtils and provides test\ncases for the new methods.\n\n \n\n  Jim Harrington\n\n*** patch follows ***\nIndex: src/java/org/apache/commons/io/FileUtils.java\n\n===================================================================\n\n--- src/java/org/apache/commons/io/FileUtils.java\t(revision 359064)\n\n+++ src/java/org/apache/commons/io/FileUtils.java\t(working copy)\n\n@@ -28,6 +28,7 @@\n\n import java.util.Collection;\n import java.util.Date;\n import java.util.List;\n+import java.util.Iterator;\n \n import org.apache.commons.io.filefilter.DirectoryFileFilter;\n import org.apache.commons.io.filefilter.FalseFileFilter;\n@@ -226,7 +227,29 @@\n\n         return files;\n     }\n \n+    /**\n+     * <p>Allows iteration over the files in given directory (and optionally\n+     * its subdirectories). All files found are filtered by an IOFileFilter.\n+     *\n+     * See:\n+     * @see #listFiles(File, IOFileFilter, IOFileFilter)\n+     * for more information.\n+     * </p>\n+     * @param directory the directory to search in\n+     * @param fileFilter filter to apply when finding files.\n+     * @param dirFilter optional filter to apply when finding subdirectories.\n+     * If this parameter is null, subdirectories will not be included in the\n+     * search. Use TrueFileFilter.INSTANCE to match all directories.\n+     * @return an iterator of java.io.File for the matching files\n+     * @see org.apache.commons.io.filefilter.FileFilterUtils\n+     * @see org.apache.commons.io.filefilter.NameFileFilter\n+     */\n+    public static Iterator iterateFiles(File directory, IOFileFilter \nfileFilter,\n+                                        IOFileFilter dirFilter) {\n+        return (listFiles( directory, fileFilter, dirFilter)).iterator();\n+    }\n \n+\n     /**\n      * Converts an array of file extensions to suffixes for use\n      * with IOFileFilters.\n@@ -264,7 +287,21 @@\n\n             (recursive ? TrueFileFilter.INSTANCE : FalseFileFilter.INSTANCE));\n     }\n \n+    /**\n+     * Allows iteration over the files in a given directory (and optionally\n+     * its subdirectories) which match an array of extensions.\n+     * @param directory the directory to search in\n+     * @param extensions an array of extensions, ex. {\"java\",\"xml\"}. If this\n+     * parameter is null, all files are returned.\n+     * @param recursive If true all subdirectories are searched, too.\n+     * @return an iterator of java.io.File with the matching files\n+     */\n+    public static Iterator iterateFiles(\n+                                        File directory, String[] extensions, \nboolean recursive) {\n+        return (listFiles(directory, extensions, recursive)).iterator();\n+    }\n \n+\n     /**\n      * <p>Compare the contents of two files to determine if they are equal or\n      * not.</p>\n@@ -841,6 +878,29 @@\n\n     //-----------------------------------------------------------------------\n     /**\n      * <p>\n+     * Reads the contents of a file line by line and returns an iterator over\n+     * those lines.\n+     *\n+     * <p>\n+     * There is no iterateLines method without encoding parameter because\n+     * the default encoding can differ between platforms and therefore results\n+     * in inconsistent results.\n+     * </p>\n+     *\n+     * @param file  the file to read\n+     * @param encoding  the encoding to use, null means platform default\n+     * @return an iterator over the lines in the file\n+     * @throws IOException in case of an I/O error\n+     * @throws UnsupportedEncodingException if the encoding is not supported \nby the VM\n+     * @since Commons IO 1.2\n+     */\n+    public static final Iterator iterateLines(File file, String encoding) \nthrows IOException {\n+        return (readLines(file, encoding)).iterator();\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    /**\n+     * <p>\n      * Writes a String to a file creating the file if it does not exist.\n      * </p>\n      * <p>\nIndex: src/test/org/apache/commons/io/FileUtilsTestCase.java\n\n===================================================================\n\n--- src/test/org/apache/commons/io/FileUtilsTestCase.java\t(revision \n359064)\n\n+++ src/test/org/apache/commons/io/FileUtilsTestCase.java\t(working copy)\n\n@@ -24,12 +24,17 @@\n\n import java.util.Arrays;\n import java.util.GregorianCalendar;\n import java.util.List;\n+import java.util.Collection;\n+import java.util.Iterator;\n+import java.util.Map;\n+import java.util.HashMap;\n \n import junit.framework.Test;\n import junit.framework.TestSuite;\n import junit.textui.TestRunner;\n \n import org.apache.commons.io.testtools.FileBasedTestCase;\n+import org.apache.commons.io.filefilter.WildcardFilter;\n \n /**\n  * This is used to test FileUtils for correctness.\n@@ -659,6 +664,81 @@\n\n         assertEquals(\"FileUtils.touch() changed lastModified to less than \nnow+3s\", true, file.lastModified() <= (now + 3000));\n     }\n \n+    public void testListFiles() throws Exception {\n+        File srcDir = getTestDirectory();\n+        File subDir = new File(srcDir, \"list_test\" );\n+        subDir.mkdir();\n+\n+        String[] fileNames = \n{ \"a.txt\", \"b.txt\", \"c.txt\", \"d.txt\", \"e.txt\", \"f.txt\" };\n+        int[] fileSizes = { 123, 234, 345, 456, 678, 789 };\n+\n+        for(int i = 0; i < fileNames.length; ++i) {\n+            File theFile = new File(subDir, fileNames[i]);\n+            createFile(theFile, fileSizes[i]);\n+        }\n+\n+        Collection files = FileUtils.listFiles(subDir,\n+                                               new WildcardFilter(\"*.*\"),\n+                                               new WildcardFilter(\"*\"));\n+\n+        int count = files.size();\n+        Object[] fileObjs = files.toArray();\n+\n+        assertEquals(files.size(), fileNames.length);\n+\n+        Map foundFileNames = new HashMap();\n+\n+        for(int i = 0; i < count; ++i) {\n+            boolean found = false;\n+            for(int j = 0; (( !found ) && (j < fileNames.length)); ++j) {\n+                if ( fileNames[j].equals(((File) fileObjs[i]).getName())) {\n+                    foundFileNames.put(fileNames[j], fileNames[j]);\n+                    found = true;\n+                }\n+            }\n+        }\n+\n+        assertEquals(foundFileNames.size(), fileNames.length);\n+\n+        subDir.delete();\n+    }\n+\n+    public void testIterateFiles() throws Exception {\n+        File srcDir = getTestDirectory();\n+        File subDir = new File(srcDir, \"list_test\" );\n+        subDir.mkdir();\n+\n+        String[] fileNames = \n{ \"a.txt\", \"b.txt\", \"c.txt\", \"d.txt\", \"e.txt\", \"f.txt\" };\n+        int[] fileSizes = { 123, 234, 345, 456, 678, 789 };\n+\n+        for(int i = 0; i < fileNames.length; ++i) {\n+            File theFile = new File(subDir, fileNames[i]);\n+            createFile(theFile, fileSizes[i]);\n+        }\n+\n+        Iterator files = FileUtils.iterateFiles(subDir,\n+                                                new WildcardFilter(\"*.*\"),\n+                                                new WildcardFilter(\"*\"));\n+\n+        Map foundFileNames = new HashMap();\n+\n+        while(files.hasNext()) {\n+            boolean found = false;\n+            String fileName = ((File) files.next()).getName();\n+\n+            for(int j = 0; (( !found ) && (j < fileNames.length)); ++j) {\n+                if ( fileNames[j].equals(fileName)) {\n+                    foundFileNames.put(fileNames[j], fileNames[j]);\n+                    found = true;\n+                }\n+            }\n+        }\n+\n+        assertEquals(foundFileNames.size(), fileNames.length);\n+\n+        subDir.delete();\n+    }\n+\n     public void testReadFileToString() throws Exception {\n         File file = new File(getTestDirectory(), \"read.obj\");\n         FileOutputStream out = new FileOutputStream(file);\n@@ -698,6 +778,25 @@\n\n         }\n     }\n \n+    public void testIterateLines() throws Exception {\n+        File file = newFile(\"lines.txt\");\n+        try {\n+            String[] data = new String[] {\"hello\", \"/u1234\", \"\", \"this \nis\", \"some text\"};\n+            createLineBasedFile(file, data);\n+\n+            Iterator lines = FileUtils.iterateLines(file, \"UTF-8\");\n+            int counter = 0;\n+\n+            while( lines.hasNext() ) {\n+                String line = (String) lines.next();\n+                assertEquals(data[counter], line);\n+                ++counter;\n+            }\n+        } finally {\n+            deleteFile(file);\n+        }\n+    }\n+\n     public void testWriteStringToFile1() throws Exception {\n         File file = new File(getTestDirectory(), \"write.txt\");\n         FileUtils.writeStringToFile(file, \"Hello /u1234\", \"UTF8\");",
            "commit number version hash": 443,
            "commit number": 994,
            "function that changed": [
                {
                    "function name": "testReadXmlWithBOMUtf32Be",
                    "function params": [],
                    "file name": "BOMInputStreamTest.java",
                    "file old path": "src/test/java/org/apache/commons/io/input/BOMInputStreamTest.java",
                    "file new path": "src/test/java/org/apache/commons/io/input/BOMInputStreamTest.java",
                    "full name": "src.test.java.org.apache.commons.io.input.BOMInputStreamTest.testReadXmlWithBOMUtf32Be"
                },
                {
                    "function name": "testReadXmlWithBOMUtf16Be",
                    "function params": [],
                    "file name": "BOMInputStreamTest.java",
                    "file old path": "src/test/java/org/apache/commons/io/input/BOMInputStreamTest.java",
                    "file new path": "src/test/java/org/apache/commons/io/input/BOMInputStreamTest.java",
                    "full name": "src.test.java.org.apache.commons.io.input.BOMInputStreamTest.testReadXmlWithBOMUtf16Be"
                },
                {
                    "function name": "testReadXmlWithBOMUtf16Le",
                    "function params": [],
                    "file name": "BOMInputStreamTest.java",
                    "file old path": "src/test/java/org/apache/commons/io/input/BOMInputStreamTest.java",
                    "file new path": "src/test/java/org/apache/commons/io/input/BOMInputStreamTest.java",
                    "full name": "src.test.java.org.apache.commons.io.input.BOMInputStreamTest.testReadXmlWithBOMUtf16Le"
                },
                {
                    "function name": "parseXml",
                    "function params": [
                        "in"
                    ],
                    "file name": "BOMInputStreamTest.java",
                    "file old path": "src/test/java/org/apache/commons/io/input/BOMInputStreamTest.java",
                    "file new path": "src/test/java/org/apache/commons/io/input/BOMInputStreamTest.java",
                    "full name": "src.test.java.org.apache.commons.io.input.BOMInputStreamTest.parseXml"
                },
                {
                    "function name": "testReadXmlWithBOMUtf8",
                    "function params": [],
                    "file name": "BOMInputStreamTest.java",
                    "file old path": "src/test/java/org/apache/commons/io/input/BOMInputStreamTest.java",
                    "file new path": "src/test/java/org/apache/commons/io/input/BOMInputStreamTest.java",
                    "full name": "src.test.java.org.apache.commons.io.input.BOMInputStreamTest.testReadXmlWithBOMUtf8"
                },
                {
                    "function name": "testReadXmlWithBOMUtf32Le",
                    "function params": [],
                    "file name": "BOMInputStreamTest.java",
                    "file old path": "src/test/java/org/apache/commons/io/input/BOMInputStreamTest.java",
                    "file new path": "src/test/java/org/apache/commons/io/input/BOMInputStreamTest.java",
                    "full name": "src.test.java.org.apache.commons.io.input.BOMInputStreamTest.testReadXmlWithBOMUtf32Le"
                }
            ],
            "files that changed": [
                "src/test/java/org/apache/commons/io/input/BOMInputStreamTest.java"
            ]
        },
        {
            "bug index": "200",
            "bug id": "IO-4",
            "hexsha": "742c51feeaf75542ab9db6782ad3d2ad506fb871",
            "fix_hash": "6a811a9712db7698503c6e5cbab4d007e581d2e3",
            "description": "It is better not to allocate a new buffer when writing the memory buffer to file.\n\nrecommend using writeTo() insteand of toByteArray()\nat DeferredFileOutputStream.java:120\n------------\nprotected void thresholdReached() throws IOException\n{\n    FileOutputStream fos = new FileOutputStream(outputFile);\n    memoryOutputStream.writeTo(fos);\n    diskOutputStream = fos;\n    currentOutputStream = fos;\n    memoryOutputStream = null;\n}\n----------------------",
            "commit number version hash": 443,
            "commit number": 993,
            "function that changed": [
                {
                    "function name": "testReadXmlWithBOMUtf16Be",
                    "function params": [],
                    "file name": "BOMInputStreamTest.java",
                    "file old path": "src/test/java/org/apache/commons/io/input/BOMInputStreamTest.java",
                    "file new path": "src/test/java/org/apache/commons/io/input/BOMInputStreamTest.java",
                    "full name": "src.test.java.org.apache.commons.io.input.BOMInputStreamTest.testReadXmlWithBOMUtf16Be"
                },
                {
                    "function name": "testReadXmlWithBOMUtf8",
                    "function params": [],
                    "file name": "BOMInputStreamTest.java",
                    "file old path": "src/test/java/org/apache/commons/io/input/BOMInputStreamTest.java",
                    "file new path": "src/test/java/org/apache/commons/io/input/BOMInputStreamTest.java",
                    "full name": "src.test.java.org.apache.commons.io.input.BOMInputStreamTest.testReadXmlWithBOMUtf8"
                },
                {
                    "function name": "testReadXmlWithBOMUtf16Le",
                    "function params": [],
                    "file name": "BOMInputStreamTest.java",
                    "file old path": "src/test/java/org/apache/commons/io/input/BOMInputStreamTest.java",
                    "file new path": "src/test/java/org/apache/commons/io/input/BOMInputStreamTest.java",
                    "full name": "src.test.java.org.apache.commons.io.input.BOMInputStreamTest.testReadXmlWithBOMUtf16Le"
                },
                {
                    "function name": "testReadXmlWithBOMUtf32Le",
                    "function params": [],
                    "file name": "BOMInputStreamTest.java",
                    "file old path": "src/test/java/org/apache/commons/io/input/BOMInputStreamTest.java",
                    "file new path": "src/test/java/org/apache/commons/io/input/BOMInputStreamTest.java",
                    "full name": "src.test.java.org.apache.commons.io.input.BOMInputStreamTest.testReadXmlWithBOMUtf32Le"
                },
                {
                    "function name": "testReadXmlWithBOMUtf32Be",
                    "function params": [],
                    "file name": "BOMInputStreamTest.java",
                    "file old path": "src/test/java/org/apache/commons/io/input/BOMInputStreamTest.java",
                    "file new path": "src/test/java/org/apache/commons/io/input/BOMInputStreamTest.java",
                    "full name": "src.test.java.org.apache.commons.io.input.BOMInputStreamTest.testReadXmlWithBOMUtf32Be"
                }
            ],
            "files that changed": [
                "src/test/java/org/apache/commons/io/input/BOMInputStreamTest.java"
            ]
        },
        {
            "bug index": "201",
            "bug id": "IO-4",
            "hexsha": "742c51feeaf75542ab9db6782ad3d2ad506fb871",
            "fix_hash": "d9268becee9bf53705e74839d9e1eb5f7e11c99a",
            "description": "It is better not to allocate a new buffer when writing the memory buffer to file.\n\nrecommend using writeTo() insteand of toByteArray()\nat DeferredFileOutputStream.java:120\n------------\nprotected void thresholdReached() throws IOException\n{\n    FileOutputStream fos = new FileOutputStream(outputFile);\n    memoryOutputStream.writeTo(fos);\n    diskOutputStream = fos;\n    currentOutputStream = fos;\n    memoryOutputStream = null;\n}\n----------------------",
            "commit number version hash": 443,
            "commit number": 992,
            "function that changed": [
                {
                    "function name": "testReadWithBOMUtf8",
                    "function params": [],
                    "file name": "BOMInputStreamTest.java",
                    "file old path": "src/test/java/org/apache/commons/io/input/BOMInputStreamTest.java",
                    "file new path": "src/test/java/org/apache/commons/io/input/BOMInputStreamTest.java",
                    "full name": "src.test.java.org.apache.commons.io.input.BOMInputStreamTest.testReadWithBOMUtf8"
                },
                {
                    "function name": "createUtf32LeDataStream",
                    "function params": [
                        "baseData",
                        "addBOM"
                    ],
                    "file name": "BOMInputStreamTest.java",
                    "file old path": "src/test/java/org/apache/commons/io/input/BOMInputStreamTest.java",
                    "file new path": "src/test/java/org/apache/commons/io/input/BOMInputStreamTest.java",
                    "full name": "src.test.java.org.apache.commons.io.input.BOMInputStreamTest.createUtf32LeDataStream"
                },
                {
                    "function name": "testReadWithBOMUtf32Be",
                    "function params": [],
                    "file name": "BOMInputStreamTest.java",
                    "file old path": "src/test/java/org/apache/commons/io/input/BOMInputStreamTest.java",
                    "file new path": "src/test/java/org/apache/commons/io/input/BOMInputStreamTest.java",
                    "full name": "src.test.java.org.apache.commons.io.input.BOMInputStreamTest.testReadWithBOMUtf32Be"
                },
                {
                    "function name": "createUtf32BeDataStream",
                    "function params": [
                        "baseData",
                        "addBOM"
                    ],
                    "file name": "BOMInputStreamTest.java",
                    "file old path": "src/test/java/org/apache/commons/io/input/BOMInputStreamTest.java",
                    "file new path": "src/test/java/org/apache/commons/io/input/BOMInputStreamTest.java",
                    "full name": "src.test.java.org.apache.commons.io.input.BOMInputStreamTest.createUtf32BeDataStream"
                },
                {
                    "function name": "testReadWithBOMUtf32Le",
                    "function params": [],
                    "file name": "BOMInputStreamTest.java",
                    "file old path": "src/test/java/org/apache/commons/io/input/BOMInputStreamTest.java",
                    "file new path": "src/test/java/org/apache/commons/io/input/BOMInputStreamTest.java",
                    "full name": "src.test.java.org.apache.commons.io.input.BOMInputStreamTest.testReadWithBOMUtf32Le"
                }
            ],
            "files that changed": [
                "src/test/java/org/apache/commons/io/input/BOMInputStreamTest.java"
            ]
        },
        {
            "bug index": "202",
            "bug id": "IO-32",
            "hexsha": "742c51feeaf75542ab9db6782ad3d2ad506fb871",
            "fix_hash": "364c2bf7f42e7679d910548d931be24332eaf6ad",
            "description": "Hi,\n\n \n\nTwo of the tasks listed in the IO to-do list are adding the ability to\niterate over the lines in a file and the files in a directory.  This\npatch implements those things as methods on FileUtils and provides test\ncases for the new methods.\n\n \n\n  Jim Harrington\n\n*** patch follows ***\nIndex: src/java/org/apache/commons/io/FileUtils.java\n\n===================================================================\n\n--- src/java/org/apache/commons/io/FileUtils.java\t(revision 359064)\n\n+++ src/java/org/apache/commons/io/FileUtils.java\t(working copy)\n\n@@ -28,6 +28,7 @@\n\n import java.util.Collection;\n import java.util.Date;\n import java.util.List;\n+import java.util.Iterator;\n \n import org.apache.commons.io.filefilter.DirectoryFileFilter;\n import org.apache.commons.io.filefilter.FalseFileFilter;\n@@ -226,7 +227,29 @@\n\n         return files;\n     }\n \n+    /**\n+     * <p>Allows iteration over the files in given directory (and optionally\n+     * its subdirectories). All files found are filtered by an IOFileFilter.\n+     *\n+     * See:\n+     * @see #listFiles(File, IOFileFilter, IOFileFilter)\n+     * for more information.\n+     * </p>\n+     * @param directory the directory to search in\n+     * @param fileFilter filter to apply when finding files.\n+     * @param dirFilter optional filter to apply when finding subdirectories.\n+     * If this parameter is null, subdirectories will not be included in the\n+     * search. Use TrueFileFilter.INSTANCE to match all directories.\n+     * @return an iterator of java.io.File for the matching files\n+     * @see org.apache.commons.io.filefilter.FileFilterUtils\n+     * @see org.apache.commons.io.filefilter.NameFileFilter\n+     */\n+    public static Iterator iterateFiles(File directory, IOFileFilter \nfileFilter,\n+                                        IOFileFilter dirFilter) {\n+        return (listFiles( directory, fileFilter, dirFilter)).iterator();\n+    }\n \n+\n     /**\n      * Converts an array of file extensions to suffixes for use\n      * with IOFileFilters.\n@@ -264,7 +287,21 @@\n\n             (recursive ? TrueFileFilter.INSTANCE : FalseFileFilter.INSTANCE));\n     }\n \n+    /**\n+     * Allows iteration over the files in a given directory (and optionally\n+     * its subdirectories) which match an array of extensions.\n+     * @param directory the directory to search in\n+     * @param extensions an array of extensions, ex. {\"java\",\"xml\"}. If this\n+     * parameter is null, all files are returned.\n+     * @param recursive If true all subdirectories are searched, too.\n+     * @return an iterator of java.io.File with the matching files\n+     */\n+    public static Iterator iterateFiles(\n+                                        File directory, String[] extensions, \nboolean recursive) {\n+        return (listFiles(directory, extensions, recursive)).iterator();\n+    }\n \n+\n     /**\n      * <p>Compare the contents of two files to determine if they are equal or\n      * not.</p>\n@@ -841,6 +878,29 @@\n\n     //-----------------------------------------------------------------------\n     /**\n      * <p>\n+     * Reads the contents of a file line by line and returns an iterator over\n+     * those lines.\n+     *\n+     * <p>\n+     * There is no iterateLines method without encoding parameter because\n+     * the default encoding can differ between platforms and therefore results\n+     * in inconsistent results.\n+     * </p>\n+     *\n+     * @param file  the file to read\n+     * @param encoding  the encoding to use, null means platform default\n+     * @return an iterator over the lines in the file\n+     * @throws IOException in case of an I/O error\n+     * @throws UnsupportedEncodingException if the encoding is not supported \nby the VM\n+     * @since Commons IO 1.2\n+     */\n+    public static final Iterator iterateLines(File file, String encoding) \nthrows IOException {\n+        return (readLines(file, encoding)).iterator();\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    /**\n+     * <p>\n      * Writes a String to a file creating the file if it does not exist.\n      * </p>\n      * <p>\nIndex: src/test/org/apache/commons/io/FileUtilsTestCase.java\n\n===================================================================\n\n--- src/test/org/apache/commons/io/FileUtilsTestCase.java\t(revision \n359064)\n\n+++ src/test/org/apache/commons/io/FileUtilsTestCase.java\t(working copy)\n\n@@ -24,12 +24,17 @@\n\n import java.util.Arrays;\n import java.util.GregorianCalendar;\n import java.util.List;\n+import java.util.Collection;\n+import java.util.Iterator;\n+import java.util.Map;\n+import java.util.HashMap;\n \n import junit.framework.Test;\n import junit.framework.TestSuite;\n import junit.textui.TestRunner;\n \n import org.apache.commons.io.testtools.FileBasedTestCase;\n+import org.apache.commons.io.filefilter.WildcardFilter;\n \n /**\n  * This is used to test FileUtils for correctness.\n@@ -659,6 +664,81 @@\n\n         assertEquals(\"FileUtils.touch() changed lastModified to less than \nnow+3s\", true, file.lastModified() <= (now + 3000));\n     }\n \n+    public void testListFiles() throws Exception {\n+        File srcDir = getTestDirectory();\n+        File subDir = new File(srcDir, \"list_test\" );\n+        subDir.mkdir();\n+\n+        String[] fileNames = \n{ \"a.txt\", \"b.txt\", \"c.txt\", \"d.txt\", \"e.txt\", \"f.txt\" };\n+        int[] fileSizes = { 123, 234, 345, 456, 678, 789 };\n+\n+        for(int i = 0; i < fileNames.length; ++i) {\n+            File theFile = new File(subDir, fileNames[i]);\n+            createFile(theFile, fileSizes[i]);\n+        }\n+\n+        Collection files = FileUtils.listFiles(subDir,\n+                                               new WildcardFilter(\"*.*\"),\n+                                               new WildcardFilter(\"*\"));\n+\n+        int count = files.size();\n+        Object[] fileObjs = files.toArray();\n+\n+        assertEquals(files.size(), fileNames.length);\n+\n+        Map foundFileNames = new HashMap();\n+\n+        for(int i = 0; i < count; ++i) {\n+            boolean found = false;\n+            for(int j = 0; (( !found ) && (j < fileNames.length)); ++j) {\n+                if ( fileNames[j].equals(((File) fileObjs[i]).getName())) {\n+                    foundFileNames.put(fileNames[j], fileNames[j]);\n+                    found = true;\n+                }\n+            }\n+        }\n+\n+        assertEquals(foundFileNames.size(), fileNames.length);\n+\n+        subDir.delete();\n+    }\n+\n+    public void testIterateFiles() throws Exception {\n+        File srcDir = getTestDirectory();\n+        File subDir = new File(srcDir, \"list_test\" );\n+        subDir.mkdir();\n+\n+        String[] fileNames = \n{ \"a.txt\", \"b.txt\", \"c.txt\", \"d.txt\", \"e.txt\", \"f.txt\" };\n+        int[] fileSizes = { 123, 234, 345, 456, 678, 789 };\n+\n+        for(int i = 0; i < fileNames.length; ++i) {\n+            File theFile = new File(subDir, fileNames[i]);\n+            createFile(theFile, fileSizes[i]);\n+        }\n+\n+        Iterator files = FileUtils.iterateFiles(subDir,\n+                                                new WildcardFilter(\"*.*\"),\n+                                                new WildcardFilter(\"*\"));\n+\n+        Map foundFileNames = new HashMap();\n+\n+        while(files.hasNext()) {\n+            boolean found = false;\n+            String fileName = ((File) files.next()).getName();\n+\n+            for(int j = 0; (( !found ) && (j < fileNames.length)); ++j) {\n+                if ( fileNames[j].equals(fileName)) {\n+                    foundFileNames.put(fileNames[j], fileNames[j]);\n+                    found = true;\n+                }\n+            }\n+        }\n+\n+        assertEquals(foundFileNames.size(), fileNames.length);\n+\n+        subDir.delete();\n+    }\n+\n     public void testReadFileToString() throws Exception {\n         File file = new File(getTestDirectory(), \"read.obj\");\n         FileOutputStream out = new FileOutputStream(file);\n@@ -698,6 +778,25 @@\n\n         }\n     }\n \n+    public void testIterateLines() throws Exception {\n+        File file = newFile(\"lines.txt\");\n+        try {\n+            String[] data = new String[] {\"hello\", \"/u1234\", \"\", \"this \nis\", \"some text\"};\n+            createLineBasedFile(file, data);\n+\n+            Iterator lines = FileUtils.iterateLines(file, \"UTF-8\");\n+            int counter = 0;\n+\n+            while( lines.hasNext() ) {\n+                String line = (String) lines.next();\n+                assertEquals(data[counter], line);\n+                ++counter;\n+            }\n+        } finally {\n+            deleteFile(file);\n+        }\n+    }\n+\n     public void testWriteStringToFile1() throws Exception {\n         File file = new File(getTestDirectory(), \"write.txt\");\n         FileUtils.writeStringToFile(file, \"Hello /u1234\", \"UTF8\");",
            "commit number version hash": 443,
            "commit number": 990,
            "function that changed": [
                {
                    "function name": "testReadWithBOMUtf8Bytes",
                    "function params": [],
                    "file name": "BOMInputStreamTest.java",
                    "file old path": "src/test/java/org/apache/commons/io/input/BOMInputStreamTest.java",
                    "file new path": "src/test/java/org/apache/commons/io/input/BOMInputStreamTest.java",
                    "full name": "src.test.java.org.apache.commons.io.input.BOMInputStreamTest.testReadWithBOMUtf8Bytes"
                },
                {
                    "function name": "createUtf16BeDataStream",
                    "function params": [
                        "baseData",
                        "addBOM"
                    ],
                    "file name": "BOMInputStreamTest.java",
                    "file old path": "src/test/java/org/apache/commons/io/input/BOMInputStreamTest.java",
                    "file new path": "src/test/java/org/apache/commons/io/input/BOMInputStreamTest.java",
                    "full name": "src.test.java.org.apache.commons.io.input.BOMInputStreamTest.createUtf16BeDataStream"
                },
                {
                    "function name": "testReadWithMultipleBOM",
                    "function params": [],
                    "file name": "BOMInputStreamTest.java",
                    "file old path": "src/test/java/org/apache/commons/io/input/BOMInputStreamTest.java",
                    "file new path": "src/test/java/org/apache/commons/io/input/BOMInputStreamTest.java",
                    "full name": "src.test.java.org.apache.commons.io.input.BOMInputStreamTest.testReadWithMultipleBOM"
                },
                {
                    "function name": "testSupportCode",
                    "function params": [],
                    "file name": "BOMInputStreamTest.java",
                    "file old path": "src/test/java/org/apache/commons/io/input/BOMInputStreamTest.java",
                    "file new path": "src/test/java/org/apache/commons/io/input/BOMInputStreamTest.java",
                    "full name": "src.test.java.org.apache.commons.io.input.BOMInputStreamTest.testSupportCode"
                },
                {
                    "function name": "testReadSmall",
                    "function params": [],
                    "file name": "BOMInputStreamTest.java",
                    "file old path": "src/test/java/org/apache/commons/io/input/BOMInputStreamTest.java",
                    "file new path": "src/test/java/org/apache/commons/io/input/BOMInputStreamTest.java",
                    "full name": "src.test.java.org.apache.commons.io.input.BOMInputStreamTest.testReadSmall"
                },
                {
                    "function name": "testAvailableWithBOM",
                    "function params": [],
                    "file name": "BOMInputStreamTest.java",
                    "file old path": "src/test/java/org/apache/commons/io/input/BOMInputStreamTest.java",
                    "file new path": "src/test/java/org/apache/commons/io/input/BOMInputStreamTest.java",
                    "full name": "src.test.java.org.apache.commons.io.input.BOMInputStreamTest.testAvailableWithBOM"
                },
                {
                    "function name": "testSkipWithoutBOM",
                    "function params": [],
                    "file name": "BOMInputStreamTest.java",
                    "file old path": "src/test/java/org/apache/commons/io/input/BOMInputStreamTest.java",
                    "file new path": "src/test/java/org/apache/commons/io/input/BOMInputStreamTest.java",
                    "full name": "src.test.java.org.apache.commons.io.input.BOMInputStreamTest.testSkipWithoutBOM"
                },
                {
                    "function name": "testMarkResetAfterReadWithoutBOM",
                    "function params": [],
                    "file name": "BOMInputStreamTest.java",
                    "file old path": "src/test/java/org/apache/commons/io/input/BOMInputStreamTest.java",
                    "file new path": "src/test/java/org/apache/commons/io/input/BOMInputStreamTest.java",
                    "full name": "src.test.java.org.apache.commons.io.input.BOMInputStreamTest.testMarkResetAfterReadWithoutBOM"
                },
                {
                    "function name": "testEmptyBufferWithoutBOM",
                    "function params": [],
                    "file name": "BOMInputStreamTest.java",
                    "file old path": "src/test/java/org/apache/commons/io/input/BOMInputStreamTest.java",
                    "file new path": "src/test/java/org/apache/commons/io/input/BOMInputStreamTest.java",
                    "full name": "src.test.java.org.apache.commons.io.input.BOMInputStreamTest.testEmptyBufferWithoutBOM"
                },
                {
                    "function name": "testEmptyBufferWithBOM",
                    "function params": [],
                    "file name": "BOMInputStreamTest.java",
                    "file old path": "src/test/java/org/apache/commons/io/input/BOMInputStreamTest.java",
                    "file new path": "src/test/java/org/apache/commons/io/input/BOMInputStreamTest.java",
                    "full name": "src.test.java.org.apache.commons.io.input.BOMInputStreamTest.testEmptyBufferWithBOM"
                },
                {
                    "function name": "testMarkResetAfterReadWithBOM",
                    "function params": [],
                    "file name": "BOMInputStreamTest.java",
                    "file old path": "src/test/java/org/apache/commons/io/input/BOMInputStreamTest.java",
                    "file new path": "src/test/java/org/apache/commons/io/input/BOMInputStreamTest.java",
                    "full name": "src.test.java.org.apache.commons.io.input.BOMInputStreamTest.testMarkResetAfterReadWithBOM"
                },
                {
                    "function name": "testNoBoms",
                    "function params": [],
                    "file name": "BOMInputStreamTest.java",
                    "file old path": "src/test/java/org/apache/commons/io/input/BOMInputStreamTest.java",
                    "file new path": "src/test/java/org/apache/commons/io/input/BOMInputStreamTest.java",
                    "full name": "src.test.java.org.apache.commons.io.input.BOMInputStreamTest.testNoBoms"
                },
                {
                    "function name": "testSmallBufferWithoutBOM",
                    "function params": [],
                    "file name": "BOMInputStreamTest.java",
                    "file old path": "src/test/java/org/apache/commons/io/input/BOMInputStreamTest.java",
                    "file new path": "src/test/java/org/apache/commons/io/input/BOMInputStreamTest.java",
                    "full name": "src.test.java.org.apache.commons.io.input.BOMInputStreamTest.testSmallBufferWithoutBOM"
                },
                {
                    "function name": "testLeadingNonBOMBufferedRead",
                    "function params": [],
                    "file name": "BOMInputStreamTest.java",
                    "file old path": "src/test/java/org/apache/commons/io/input/BOMInputStreamTest.java",
                    "file new path": "src/test/java/org/apache/commons/io/input/BOMInputStreamTest.java",
                    "full name": "src.test.java.org.apache.commons.io.input.BOMInputStreamTest.testLeadingNonBOMBufferedRead"
                },
                {
                    "function name": "testReadEmpty",
                    "function params": [],
                    "file name": "BOMInputStreamTest.java",
                    "file old path": "src/test/java/org/apache/commons/io/input/BOMInputStreamTest.java",
                    "file new path": "src/test/java/org/apache/commons/io/input/BOMInputStreamTest.java",
                    "full name": "src.test.java.org.apache.commons.io.input.BOMInputStreamTest.testReadEmpty"
                },
                {
                    "function name": "testGetBOMFirstThenRead",
                    "function params": [],
                    "file name": "BOMInputStreamTest.java",
                    "file old path": "src/test/java/org/apache/commons/io/input/BOMInputStreamTest.java",
                    "file new path": "src/test/java/org/apache/commons/io/input/BOMInputStreamTest.java",
                    "full name": "src.test.java.org.apache.commons.io.input.BOMInputStreamTest.testGetBOMFirstThenRead"
                },
                {
                    "function name": "testReadWithoutBOM",
                    "function params": [],
                    "file name": "BOMInputStreamTest.java",
                    "file old path": "src/test/java/org/apache/commons/io/input/BOMInputStreamTest.java",
                    "file new path": "src/test/java/org/apache/commons/io/input/BOMInputStreamTest.java",
                    "full name": "src.test.java.org.apache.commons.io.input.BOMInputStreamTest.testReadWithoutBOM"
                },
                {
                    "function name": "createUtf8DataStream",
                    "function params": [
                        "baseData",
                        "addBOM"
                    ],
                    "file name": "BOMInputStreamTest.java",
                    "file old path": "src/test/java/org/apache/commons/io/input/BOMInputStreamTest.java",
                    "file new path": "src/test/java/org/apache/commons/io/input/BOMInputStreamTest.java",
                    "full name": "src.test.java.org.apache.commons.io.input.BOMInputStreamTest.createUtf8DataStream"
                },
                {
                    "function name": "testLeadingNonBOMSingleRead",
                    "function params": [],
                    "file name": "BOMInputStreamTest.java",
                    "file old path": "src/test/java/org/apache/commons/io/input/BOMInputStreamTest.java",
                    "file new path": "src/test/java/org/apache/commons/io/input/BOMInputStreamTest.java",
                    "full name": "src.test.java.org.apache.commons.io.input.BOMInputStreamTest.testLeadingNonBOMSingleRead"
                },
                {
                    "function name": "testLargeBufferWithoutBOM",
                    "function params": [],
                    "file name": "BOMInputStreamTest.java",
                    "file old path": "src/test/java/org/apache/commons/io/input/BOMInputStreamTest.java",
                    "file new path": "src/test/java/org/apache/commons/io/input/BOMInputStreamTest.java",
                    "full name": "src.test.java.org.apache.commons.io.input.BOMInputStreamTest.testLargeBufferWithoutBOM"
                },
                {
                    "function name": "testReadWithBOMInclude",
                    "function params": [],
                    "file name": "BOMInputStreamTest.java",
                    "file old path": "src/test/java/org/apache/commons/io/input/BOMInputStreamTest.java",
                    "file new path": "src/test/java/org/apache/commons/io/input/BOMInputStreamTest.java",
                    "full name": "src.test.java.org.apache.commons.io.input.BOMInputStreamTest.testReadWithBOMInclude"
                },
                {
                    "function name": "testReadWithBOMUtf16Be",
                    "function params": [],
                    "file name": "BOMInputStreamTest.java",
                    "file old path": "src/test/java/org/apache/commons/io/input/BOMInputStreamTest.java",
                    "file new path": "src/test/java/org/apache/commons/io/input/BOMInputStreamTest.java",
                    "full name": "src.test.java.org.apache.commons.io.input.BOMInputStreamTest.testReadWithBOMUtf16Be"
                },
                {
                    "function name": "testSkipWithBOM",
                    "function params": [],
                    "file name": "BOMInputStreamTest.java",
                    "file old path": "src/test/java/org/apache/commons/io/input/BOMInputStreamTest.java",
                    "file new path": "src/test/java/org/apache/commons/io/input/BOMInputStreamTest.java",
                    "full name": "src.test.java.org.apache.commons.io.input.BOMInputStreamTest.testSkipWithBOM"
                },
                {
                    "function name": "testMarkResetBeforeReadWithoutBOM",
                    "function params": [],
                    "file name": "BOMInputStreamTest.java",
                    "file old path": "src/test/java/org/apache/commons/io/input/BOMInputStreamTest.java",
                    "file new path": "src/test/java/org/apache/commons/io/input/BOMInputStreamTest.java",
                    "full name": "src.test.java.org.apache.commons.io.input.BOMInputStreamTest.testMarkResetBeforeReadWithoutBOM"
                },
                {
                    "function name": "testAvailableWithoutBOM",
                    "function params": [],
                    "file name": "BOMInputStreamTest.java",
                    "file old path": "src/test/java/org/apache/commons/io/input/BOMInputStreamTest.java",
                    "file new path": "src/test/java/org/apache/commons/io/input/BOMInputStreamTest.java",
                    "full name": "src.test.java.org.apache.commons.io.input.BOMInputStreamTest.testAvailableWithoutBOM"
                },
                {
                    "function name": "createUtf16LeDataStream",
                    "function params": [
                        "baseData",
                        "addBOM"
                    ],
                    "file name": "BOMInputStreamTest.java",
                    "file old path": "src/test/java/org/apache/commons/io/input/BOMInputStreamTest.java",
                    "file new path": "src/test/java/org/apache/commons/io/input/BOMInputStreamTest.java",
                    "full name": "src.test.java.org.apache.commons.io.input.BOMInputStreamTest.createUtf16LeDataStream"
                },
                {
                    "function name": "testGetBOMFirstThenReadInclude",
                    "function params": [],
                    "file name": "BOMInputStreamTest.java",
                    "file old path": "src/test/java/org/apache/commons/io/input/BOMInputStreamTest.java",
                    "file new path": "src/test/java/org/apache/commons/io/input/BOMInputStreamTest.java",
                    "full name": "src.test.java.org.apache.commons.io.input.BOMInputStreamTest.testGetBOMFirstThenReadInclude"
                },
                {
                    "function name": "testSmallBufferWithBOM",
                    "function params": [],
                    "file name": "BOMInputStreamTest.java",
                    "file old path": "src/test/java/org/apache/commons/io/input/BOMInputStreamTest.java",
                    "file new path": "src/test/java/org/apache/commons/io/input/BOMInputStreamTest.java",
                    "full name": "src.test.java.org.apache.commons.io.input.BOMInputStreamTest.testSmallBufferWithBOM"
                },
                {
                    "function name": "testLargeBufferWithBOM",
                    "function params": [],
                    "file name": "BOMInputStreamTest.java",
                    "file old path": "src/test/java/org/apache/commons/io/input/BOMInputStreamTest.java",
                    "file new path": "src/test/java/org/apache/commons/io/input/BOMInputStreamTest.java",
                    "full name": "src.test.java.org.apache.commons.io.input.BOMInputStreamTest.testLargeBufferWithBOM"
                },
                {
                    "function name": "testReadWithBOMUtf16Le",
                    "function params": [],
                    "file name": "BOMInputStreamTest.java",
                    "file old path": "src/test/java/org/apache/commons/io/input/BOMInputStreamTest.java",
                    "file new path": "src/test/java/org/apache/commons/io/input/BOMInputStreamTest.java",
                    "full name": "src.test.java.org.apache.commons.io.input.BOMInputStreamTest.testReadWithBOMUtf16Le"
                },
                {
                    "function name": "testReadWithBOMUtf8String",
                    "function params": [],
                    "file name": "BOMInputStreamTest.java",
                    "file old path": "src/test/java/org/apache/commons/io/input/BOMInputStreamTest.java",
                    "file new path": "src/test/java/org/apache/commons/io/input/BOMInputStreamTest.java",
                    "full name": "src.test.java.org.apache.commons.io.input.BOMInputStreamTest.testReadWithBOMUtf8String"
                },
                {
                    "function name": "testMarkResetBeforeReadWithBOM",
                    "function params": [],
                    "file name": "BOMInputStreamTest.java",
                    "file old path": "src/test/java/org/apache/commons/io/input/BOMInputStreamTest.java",
                    "file new path": "src/test/java/org/apache/commons/io/input/BOMInputStreamTest.java",
                    "full name": "src.test.java.org.apache.commons.io.input.BOMInputStreamTest.testMarkResetBeforeReadWithBOM"
                }
            ],
            "files that changed": [
                "src/test/java/org/apache/commons/io/input/BOMInputStreamTest.java"
            ]
        },
        {
            "bug index": "203",
            "bug id": "IO-336",
            "hexsha": "364c2bf7f42e7679d910548d931be24332eaf6ad",
            "fix_hash": "06763772ac6b9e4a8efa692933d3a1512d9cb6b7",
            "description": "In FileUtils, a yottabyte is currently defined as follows:\n\npublic static final BigInteger ONE_YB = ONE_ZB.multiply(BigInteger.valueOf(ONE_EB));\n\nI believe this should be:\n\npublic static final BigInteger ONE_YB = ONE_ZB.multiply(BigInteger.valueOf(ONE_KB));",
            "commit number version hash": 990,
            "commit number": 989,
            "function that changed": [],
            "files that changed": [
                "src/main/java/org/apache/commons/io/FileUtils.java"
            ]
        },
        {
            "bug index": "204",
            "bug id": "IO-269",
            "hexsha": "364c2bf7f42e7679d910548d931be24332eaf6ad",
            "fix_hash": "c395904915ca330d8944d74f9502c0f4bcf65907",
            "description": "The Tailer code works on Windows, except that it locks the file against deletion or rename.\n\nThe test code fails to detect this, because it fails to check if the file deletion succeeds.\n\nThis seems to be a Windows OS issue.\n\nA possible solution might be to keep closing and re-opening the file.\n",
            "commit number version hash": 990,
            "commit number": 985,
            "function that changed": [
                {
                    "function name": "create",
                    "function params": [
                        "file",
                        "listener",
                        "delayMillis",
                        "end",
                        "reOpen"
                    ],
                    "file name": "Tailer.java",
                    "file old path": "src/main/java/org/apache/commons/io/input/Tailer.java",
                    "file new path": "src/main/java/org/apache/commons/io/input/Tailer.java",
                    "full name": "src.main.java.org.apache.commons.io.input.Tailer.create"
                },
                {
                    "function name": "Tailer",
                    "function params": [
                        "file",
                        "listener",
                        "delayMillis",
                        "end",
                        "bufSize"
                    ],
                    "file name": "Tailer.java",
                    "file old path": "src/main/java/org/apache/commons/io/input/Tailer.java",
                    "file new path": "src/main/java/org/apache/commons/io/input/Tailer.java",
                    "full name": "src.main.java.org.apache.commons.io.input.Tailer.Tailer"
                },
                {
                    "function name": "Tailer",
                    "function params": [
                        "file",
                        "listener",
                        "delayMillis",
                        "end",
                        "reOpen"
                    ],
                    "file name": "Tailer.java",
                    "file old path": "src/main/java/org/apache/commons/io/input/Tailer.java",
                    "file new path": "src/main/java/org/apache/commons/io/input/Tailer.java",
                    "full name": "src.main.java.org.apache.commons.io.input.Tailer.Tailer"
                },
                {
                    "function name": "create",
                    "function params": [
                        "file",
                        "listener",
                        "delayMillis",
                        "end",
                        "reOpen",
                        "bufSize"
                    ],
                    "file name": "Tailer.java",
                    "file old path": "src/main/java/org/apache/commons/io/input/Tailer.java",
                    "file new path": "src/main/java/org/apache/commons/io/input/Tailer.java",
                    "full name": "src.main.java.org.apache.commons.io.input.Tailer.create"
                },
                {
                    "function name": "run",
                    "function params": [],
                    "file name": "Tailer.java",
                    "file old path": "src/main/java/org/apache/commons/io/input/Tailer.java",
                    "file new path": "src/main/java/org/apache/commons/io/input/Tailer.java",
                    "full name": "src.main.java.org.apache.commons.io.input.Tailer.run"
                },
                {
                    "function name": "Tailer",
                    "function params": [
                        "file",
                        "listener",
                        "delayMillis",
                        "end",
                        "reOpen",
                        "bufSize"
                    ],
                    "file name": "Tailer.java",
                    "file old path": "src/main/java/org/apache/commons/io/input/Tailer.java",
                    "file new path": "src/main/java/org/apache/commons/io/input/Tailer.java",
                    "full name": "src.main.java.org.apache.commons.io.input.Tailer.Tailer"
                },
                {
                    "function name": "testTailer",
                    "function params": [],
                    "file name": "TailerTest.java",
                    "file old path": "src/test/java/org/apache/commons/io/input/TailerTest.java",
                    "file new path": "src/test/java/org/apache/commons/io/input/TailerTest.java",
                    "full name": "src.test.java.org.apache.commons.io.input.TailerTest.testTailer"
                }
            ],
            "files that changed": [
                "src/main/java/org/apache/commons/io/input/Tailer.java",
                "src/test/java/org/apache/commons/io/input/TailerTest.java"
            ]
        },
        {
            "bug index": "206",
            "bug id": "IO-335",
            "hexsha": "364c2bf7f42e7679d910548d931be24332eaf6ad",
            "fix_hash": "41dfac731ef973b03f70d8f9c01afc67bc5f311d",
            "description": "The readLines method checks for CR. If found, it is not stored immediately, but a flag is set.\n\nIf the next char is an LF, the buffer is passed to the listener without the CR.\nAs soon as the next non-LF (and non-CR) character is received, the saved CR is written to the buffer.\n\nThe net result is that CR before LF migrates to the start of the next non-empty line, and repeated CRs are collapsed. This is clearly wrong.\n\nThe original code (before IO-274) used RandomAccessFile#readLine() which returns on CR, LF or CRLF.\n\nIt looks as though the intention was to retain this behaviour whilst not blocking.",
            "commit number version hash": 990,
            "commit number": 982,
            "function that changed": [
                {
                    "function name": "readLines",
                    "function params": [
                        "reader"
                    ],
                    "file name": "Tailer.java",
                    "file old path": "src/main/java/org/apache/commons/io/input/Tailer.java",
                    "file new path": "src/main/java/org/apache/commons/io/input/Tailer.java",
                    "full name": "src.main.java.org.apache.commons.io.input.Tailer.readLines"
                },
                {
                    "function name": "testIO335",
                    "function params": [],
                    "file name": "TailerTest.java",
                    "file old path": "src/test/java/org/apache/commons/io/input/TailerTest.java",
                    "file new path": "src/test/java/org/apache/commons/io/input/TailerTest.java",
                    "full name": "src.test.java.org.apache.commons.io.input.TailerTest.testIO335"
                }
            ],
            "files that changed": [
                "src/main/java/org/apache/commons/io/input/Tailer.java",
                "src/test/java/org/apache/commons/io/input/TailerTest.java"
            ]
        },
        {
            "bug index": "207",
            "bug id": "IO-334",
            "hexsha": "364c2bf7f42e7679d910548d931be24332eaf6ad",
            "fix_hash": "5e62d0ee12f21aa65f97f8d5b7f5bdeb938ef93f",
            "description": "The toFiles method treats null input the same as an empty array, however the toURLs method throws NPE for null input.\n\nThis is inconsistent.\n\nThe Javadoc for toURLs does not specify the behaviour for null input.\n\nEither the method should be fixed to treat null as an empty array, or the NPE should be documented.",
            "commit number version hash": 990,
            "commit number": 981,
            "function that changed": [],
            "files that changed": [
                "src/main/java/org/apache/commons/io/FileUtils.java"
            ]
        },
        {
            "bug index": "208",
            "bug id": "IO-329",
            "hexsha": "364c2bf7f42e7679d910548d931be24332eaf6ad",
            "fix_hash": "bcba0cd22998d550aabf806d2ad58407d9b91759",
            "description": "FileUtils.writeLines looks like next:\n\n out = openOutputStream(file, append);\n IOUtils.writeLines(lines, lineEnding, out, encoding);\n\nopenOutputStream opens plain FileOutputStream without any buffering and IOUtils.writeLines does not add abyt buffering. This means each line require 2 write syscalls (one for the line and one for line separator). This makes call very slow, especially for short lines",
            "commit number version hash": 990,
            "commit number": 969,
            "function that changed": [
                {
                    "function name": "writeLines",
                    "function params": [
                        "file",
                        "encoding",
                        "lines",
                        "lineEnding",
                        "append"
                    ],
                    "file name": "FileUtils.java",
                    "file old path": "src/main/java/org/apache/commons/io/FileUtils.java",
                    "file new path": "src/main/java/org/apache/commons/io/FileUtils.java",
                    "full name": "src.main.java.org.apache.commons.io.FileUtils.writeLines"
                }
            ],
            "files that changed": [
                "src/main/java/org/apache/commons/io/FileUtils.java"
            ]
        },
        {
            "bug index": "209",
            "bug id": "IO-329",
            "hexsha": "364c2bf7f42e7679d910548d931be24332eaf6ad",
            "fix_hash": "67bcaa51f426a4f8b508d867d3f17ab5f0dafcae",
            "description": "FileUtils.writeLines looks like next:\n\n out = openOutputStream(file, append);\n IOUtils.writeLines(lines, lineEnding, out, encoding);\n\nopenOutputStream opens plain FileOutputStream without any buffering and IOUtils.writeLines does not add abyt buffering. This means each line require 2 write syscalls (one for the line and one for line separator). This makes call very slow, especially for short lines",
            "commit number version hash": 990,
            "commit number": 968,
            "function that changed": [
                {
                    "function name": "writeLines",
                    "function params": [
                        "file",
                        "encoding",
                        "lines",
                        "lineEnding",
                        "append"
                    ],
                    "file name": "FileUtils.java",
                    "file old path": "src/main/java/org/apache/commons/io/FileUtils.java",
                    "file new path": "src/main/java/org/apache/commons/io/FileUtils.java",
                    "full name": "src.main.java.org.apache.commons.io.FileUtils.writeLines"
                }
            ],
            "files that changed": [
                "src/main/java/org/apache/commons/io/FileUtils.java"
            ]
        },
        {
            "bug index": "210",
            "bug id": "IO-319",
            "hexsha": "364c2bf7f42e7679d910548d931be24332eaf6ad",
            "fix_hash": "26dba5e845451a1b9c420b929157bc2faf2c2b16",
            "description": "First of all Thanks tons Apache Commons folks for all the amazing work! :) My first JIRA. Yayyy. I contributed B-)\n\nA symbolic link may create a cycle and so sizeOfDirectory crashes with an IllegalArgumentException. e.g. \n{noformat}\n$ tree test\ntest\n\u251c\u2500\u2500 file\n\u2514\u2500\u2500 ravi\n    \u251c\u2500\u2500 cycle -> ../../test\n    \u2514\u2500\u2500 file\n{noformat}\n\ncauses FileUtils.sizeOfDirectory to crash like so\n\n{noformat}\njava TestJAVA\nException in thread \"main\" java.lang.IllegalArgumentException: <somepath>/test/ravi/cycle/ravi/cycle/ravi/cycle/ravi/cycle/ravi/cycle/ravi/cycle/ravi/cycle/ravi/cycle/ravi/cycle/ravi/cycle/ravi/cycle/ravi/cycle/ravi/cycle/ravi/cycle/ravi/cycle/ravi/cycle/ravi/cycle/ravi/cycle/ravi/cycle/ravi/cycle/ravi/cycle/ravi/cycle/ravi/cycle/ravi/cycle/ravi/cycle/ravi/cycle/ravi/cycle/ravi/cycle/ravi/cycle/ravi/cycle/ravi/cycle/ravi/cycle/ravi/cycle/ravi/cycle/ravi/cycle/ravi/cycle/ravi/cycle/ravi/cycle/ravi/cycle/ravi/cycle/ravi/cycle does not exist\n        at org.apache.commons.io.FileUtils.sizeOf(FileUtils.java:2053)\n        at org.apache.commons.io.FileUtils.sizeOfDirectory(FileUtils.java:2089)\n        at org.apache.commons.io.FileUtils.sizeOf(FileUtils.java:2057)\n        at org.apache.commons.io.FileUtils.sizeOfDirectory(FileUtils.java:2089)\n        at org.apache.commons.io.FileUtils.sizeOf(FileUtils.java:2057)\n        at org.apache.commons.io.FileUtils.sizeOfDirectory(FileUtils.java:2089)\n        at org.apache.commons.io.FileUtils.sizeOf(FileUtils.java:2057)\n        at org.apache.commons.io.FileUtils.sizeOfDirectory(FileUtils.java:2089)\n{noformat}\n\nWe faced the same issue in Hadoop :(. Checkout https://issues.apache.org/jira/browse/HADOOP-6963 for our solution",
            "commit number version hash": 990,
            "commit number": 965,
            "function that changed": [
                {
                    "function name": "sizeOfDirectory",
                    "function params": [
                        "directory"
                    ],
                    "file name": "FileUtils.java",
                    "file old path": "src/main/java/org/apache/commons/io/FileUtils.java",
                    "file new path": "src/main/java/org/apache/commons/io/FileUtils.java",
                    "full name": "src.main.java.org.apache.commons.io.FileUtils.sizeOfDirectory"
                }
            ],
            "files that changed": [
                "src/main/java/org/apache/commons/io/FileUtils.java"
            ]
        },
        {
            "bug index": "211",
            "bug id": "IO-319",
            "hexsha": "364c2bf7f42e7679d910548d931be24332eaf6ad",
            "fix_hash": "04824b0a805fdd9d899f6dbc98c06a111f39a11c",
            "description": "First of all Thanks tons Apache Commons folks for all the amazing work! :) My first JIRA. Yayyy. I contributed B-)\n\nA symbolic link may create a cycle and so sizeOfDirectory crashes with an IllegalArgumentException. e.g. \n{noformat}\n$ tree test\ntest\n\u251c\u2500\u2500 file\n\u2514\u2500\u2500 ravi\n    \u251c\u2500\u2500 cycle -> ../../test\n    \u2514\u2500\u2500 file\n{noformat}\n\ncauses FileUtils.sizeOfDirectory to crash like so\n\n{noformat}\njava TestJAVA\nException in thread \"main\" java.lang.IllegalArgumentException: <somepath>/test/ravi/cycle/ravi/cycle/ravi/cycle/ravi/cycle/ravi/cycle/ravi/cycle/ravi/cycle/ravi/cycle/ravi/cycle/ravi/cycle/ravi/cycle/ravi/cycle/ravi/cycle/ravi/cycle/ravi/cycle/ravi/cycle/ravi/cycle/ravi/cycle/ravi/cycle/ravi/cycle/ravi/cycle/ravi/cycle/ravi/cycle/ravi/cycle/ravi/cycle/ravi/cycle/ravi/cycle/ravi/cycle/ravi/cycle/ravi/cycle/ravi/cycle/ravi/cycle/ravi/cycle/ravi/cycle/ravi/cycle/ravi/cycle/ravi/cycle/ravi/cycle/ravi/cycle/ravi/cycle/ravi/cycle does not exist\n        at org.apache.commons.io.FileUtils.sizeOf(FileUtils.java:2053)\n        at org.apache.commons.io.FileUtils.sizeOfDirectory(FileUtils.java:2089)\n        at org.apache.commons.io.FileUtils.sizeOf(FileUtils.java:2057)\n        at org.apache.commons.io.FileUtils.sizeOfDirectory(FileUtils.java:2089)\n        at org.apache.commons.io.FileUtils.sizeOf(FileUtils.java:2057)\n        at org.apache.commons.io.FileUtils.sizeOfDirectory(FileUtils.java:2089)\n        at org.apache.commons.io.FileUtils.sizeOf(FileUtils.java:2057)\n        at org.apache.commons.io.FileUtils.sizeOfDirectory(FileUtils.java:2089)\n{noformat}\n\nWe faced the same issue in Hadoop :(. Checkout https://issues.apache.org/jira/browse/HADOOP-6963 for our solution",
            "commit number version hash": 990,
            "commit number": 963,
            "function that changed": [
                {
                    "function name": "sizeOfDirectory",
                    "function params": [
                        "directory"
                    ],
                    "file name": "FileUtils.java",
                    "file old path": "src/main/java/org/apache/commons/io/FileUtils.java",
                    "file new path": "src/main/java/org/apache/commons/io/FileUtils.java",
                    "full name": "src.main.java.org.apache.commons.io.FileUtils.sizeOfDirectory"
                }
            ],
            "files that changed": [
                "src/main/java/org/apache/commons/io/FileUtils.java"
            ]
        },
        {
            "bug index": "212",
            "bug id": "IO-319",
            "hexsha": "364c2bf7f42e7679d910548d931be24332eaf6ad",
            "fix_hash": "0458e66da1408078ea123c2764e86ea4e2074f73",
            "description": "First of all Thanks tons Apache Commons folks for all the amazing work! :) My first JIRA. Yayyy. I contributed B-)\n\nA symbolic link may create a cycle and so sizeOfDirectory crashes with an IllegalArgumentException. e.g. \n{noformat}\n$ tree test\ntest\n\u251c\u2500\u2500 file\n\u2514\u2500\u2500 ravi\n    \u251c\u2500\u2500 cycle -> ../../test\n    \u2514\u2500\u2500 file\n{noformat}\n\ncauses FileUtils.sizeOfDirectory to crash like so\n\n{noformat}\njava TestJAVA\nException in thread \"main\" java.lang.IllegalArgumentException: <somepath>/test/ravi/cycle/ravi/cycle/ravi/cycle/ravi/cycle/ravi/cycle/ravi/cycle/ravi/cycle/ravi/cycle/ravi/cycle/ravi/cycle/ravi/cycle/ravi/cycle/ravi/cycle/ravi/cycle/ravi/cycle/ravi/cycle/ravi/cycle/ravi/cycle/ravi/cycle/ravi/cycle/ravi/cycle/ravi/cycle/ravi/cycle/ravi/cycle/ravi/cycle/ravi/cycle/ravi/cycle/ravi/cycle/ravi/cycle/ravi/cycle/ravi/cycle/ravi/cycle/ravi/cycle/ravi/cycle/ravi/cycle/ravi/cycle/ravi/cycle/ravi/cycle/ravi/cycle/ravi/cycle/ravi/cycle does not exist\n        at org.apache.commons.io.FileUtils.sizeOf(FileUtils.java:2053)\n        at org.apache.commons.io.FileUtils.sizeOfDirectory(FileUtils.java:2089)\n        at org.apache.commons.io.FileUtils.sizeOf(FileUtils.java:2057)\n        at org.apache.commons.io.FileUtils.sizeOfDirectory(FileUtils.java:2089)\n        at org.apache.commons.io.FileUtils.sizeOf(FileUtils.java:2057)\n        at org.apache.commons.io.FileUtils.sizeOfDirectory(FileUtils.java:2089)\n        at org.apache.commons.io.FileUtils.sizeOf(FileUtils.java:2057)\n        at org.apache.commons.io.FileUtils.sizeOfDirectory(FileUtils.java:2089)\n{noformat}\n\nWe faced the same issue in Hadoop :(. Checkout https://issues.apache.org/jira/browse/HADOOP-6963 for our solution",
            "commit number version hash": 990,
            "commit number": 962,
            "function that changed": [
                {
                    "function name": "sizeOfDirectory",
                    "function params": [
                        "directory"
                    ],
                    "file name": "FileUtils.java",
                    "file old path": "src/main/java/org/apache/commons/io/FileUtils.java",
                    "file new path": "src/main/java/org/apache/commons/io/FileUtils.java",
                    "full name": "src.main.java.org.apache.commons.io.FileUtils.sizeOfDirectory"
                }
            ],
            "files that changed": [
                "src/main/java/org/apache/commons/io/FileUtils.java"
            ]
        },
        {
            "bug index": "213",
            "bug id": "IO-2",
            "hexsha": "742c51feeaf75542ab9db6782ad3d2ad506fb871",
            "fix_hash": "dd7d8085b2e0889064f5fea9a3e1cf09e59fcd84",
            "description": "Hi,\n\n(sorry to assign it to the wrong component, but I cannot choose for IO)\n\nwhen I try to concat 2 paths with \"\\\" as path separator instead of \"/\", an\nexception is thrown. I'll upload a patch for this as well as a junit test.\n\ne.g.: FilenameUtils.catPath(\"C:\\\\temp\\\\\", \"test\") throws an exception ...\n\nMaarten",
            "commit number version hash": 443,
            "commit number": 956,
            "function that changed": [],
            "files that changed": [
                "src/main/java/org/apache/commons/io/IOUtils.java"
            ]
        },
        {
            "bug index": "214",
            "bug id": "IO-319",
            "hexsha": "364c2bf7f42e7679d910548d931be24332eaf6ad",
            "fix_hash": "c9bceeb3b4674be6097ca707de6e448efcc88c98",
            "description": "First of all Thanks tons Apache Commons folks for all the amazing work! :) My first JIRA. Yayyy. I contributed B-)\n\nA symbolic link may create a cycle and so sizeOfDirectory crashes with an IllegalArgumentException. e.g. \n{noformat}\n$ tree test\ntest\n\u251c\u2500\u2500 file\n\u2514\u2500\u2500 ravi\n    \u251c\u2500\u2500 cycle -> ../../test\n    \u2514\u2500\u2500 file\n{noformat}\n\ncauses FileUtils.sizeOfDirectory to crash like so\n\n{noformat}\njava TestJAVA\nException in thread \"main\" java.lang.IllegalArgumentException: <somepath>/test/ravi/cycle/ravi/cycle/ravi/cycle/ravi/cycle/ravi/cycle/ravi/cycle/ravi/cycle/ravi/cycle/ravi/cycle/ravi/cycle/ravi/cycle/ravi/cycle/ravi/cycle/ravi/cycle/ravi/cycle/ravi/cycle/ravi/cycle/ravi/cycle/ravi/cycle/ravi/cycle/ravi/cycle/ravi/cycle/ravi/cycle/ravi/cycle/ravi/cycle/ravi/cycle/ravi/cycle/ravi/cycle/ravi/cycle/ravi/cycle/ravi/cycle/ravi/cycle/ravi/cycle/ravi/cycle/ravi/cycle/ravi/cycle/ravi/cycle/ravi/cycle/ravi/cycle/ravi/cycle/ravi/cycle does not exist\n        at org.apache.commons.io.FileUtils.sizeOf(FileUtils.java:2053)\n        at org.apache.commons.io.FileUtils.sizeOfDirectory(FileUtils.java:2089)\n        at org.apache.commons.io.FileUtils.sizeOf(FileUtils.java:2057)\n        at org.apache.commons.io.FileUtils.sizeOfDirectory(FileUtils.java:2089)\n        at org.apache.commons.io.FileUtils.sizeOf(FileUtils.java:2057)\n        at org.apache.commons.io.FileUtils.sizeOfDirectory(FileUtils.java:2089)\n        at org.apache.commons.io.FileUtils.sizeOf(FileUtils.java:2057)\n        at org.apache.commons.io.FileUtils.sizeOfDirectory(FileUtils.java:2089)\n{noformat}\n\nWe faced the same issue in Hadoop :(. Checkout https://issues.apache.org/jira/browse/HADOOP-6963 for our solution",
            "commit number version hash": 990,
            "commit number": 955,
            "function that changed": [
                {
                    "function name": "sizeOfDirectory",
                    "function params": [
                        "directory"
                    ],
                    "file name": "FileUtils.java",
                    "file old path": "src/main/java/org/apache/commons/io/FileUtils.java",
                    "file new path": "src/main/java/org/apache/commons/io/FileUtils.java",
                    "full name": "src.main.java.org.apache.commons.io.FileUtils.sizeOfDirectory"
                },
                {
                    "function name": "testSizeOfDirectory",
                    "function params": [],
                    "file name": "FileUtilsTestCase.java",
                    "file old path": "src/test/java/org/apache/commons/io/FileUtilsTestCase.java",
                    "file new path": "src/test/java/org/apache/commons/io/FileUtilsTestCase.java",
                    "full name": "src.test.java.org.apache.commons.io.FileUtilsTestCase.testSizeOfDirectory"
                }
            ],
            "files that changed": [
                "src/main/java/org/apache/commons/io/FileUtils.java",
                "src/test/java/org/apache/commons/io/FileUtilsTestCase.java"
            ]
        },
        {
            "bug index": "215",
            "bug id": "IO-321",
            "hexsha": "364c2bf7f42e7679d910548d931be24332eaf6ad",
            "fix_hash": "b9261d8a0448c5212ca3c855403da30d16e6b277",
            "description": "ByteOrderMark UTF_32LE is incorrect.\n\nIs should be {{FF FE 00 00}} not {{FE FF 00 00}}",
            "commit number version hash": 990,
            "commit number": 952,
            "function that changed": [],
            "files that changed": [
                "src/main/java/org/apache/commons/io/ByteOrderMark.java"
            ]
        },
        {
            "bug index": "216",
            "bug id": "IO-4",
            "hexsha": "742c51feeaf75542ab9db6782ad3d2ad506fb871",
            "fix_hash": "2cdbaada49cdce94ca84d125fd32be7784dbf5d8",
            "description": "It is better not to allocate a new buffer when writing the memory buffer to file.\n\nrecommend using writeTo() insteand of toByteArray()\nat DeferredFileOutputStream.java:120\n------------\nprotected void thresholdReached() throws IOException\n{\n    FileOutputStream fos = new FileOutputStream(outputFile);\n    memoryOutputStream.writeTo(fos);\n    diskOutputStream = fos;\n    currentOutputStream = fos;\n    memoryOutputStream = null;\n}\n----------------------",
            "commit number version hash": 443,
            "commit number": 945,
            "function that changed": [],
            "files that changed": [
                "src/test/java/org/apache/commons/io/DemuxTestCase.java",
                "src/test/java/org/apache/commons/io/DirectoryWalkerTestCase.java"
            ]
        },
        {
            "bug index": "217",
            "bug id": "IO-2",
            "hexsha": "742c51feeaf75542ab9db6782ad3d2ad506fb871",
            "fix_hash": "1833fb0792fa0dd3e4a3a0d1b5eec39db5da7848",
            "description": "Hi,\n\n(sorry to assign it to the wrong component, but I cannot choose for IO)\n\nwhen I try to concat 2 paths with \"\\\" as path separator instead of \"/\", an\nexception is thrown. I'll upload a patch for this as well as a junit test.\n\ne.g.: FilenameUtils.catPath(\"C:\\\\temp\\\\\", \"test\") throws an exception ...\n\nMaarten",
            "commit number version hash": 443,
            "commit number": 922,
            "function that changed": [],
            "files that changed": [
                "src/main/java/org/apache/commons/io/ByteOrderMark.java"
            ]
        },
        {
            "bug index": "218",
            "bug id": "IO-311",
            "hexsha": "364c2bf7f42e7679d910548d931be24332eaf6ad",
            "fix_hash": "f584ed909815d3020e718c8dd9c1f335c7a1543d",
            "description": "IOUtils.read(InputStream input, byte[] buffer, int offset, int length) and\nread(Reader input, char[] buffer, int offset, int length) don't take the \noffset parameter into account...\n",
            "commit number version hash": 990,
            "commit number": 916,
            "function that changed": [
                {
                    "function name": "read",
                    "function params": [
                        "input",
                        "buffer",
                        "offset",
                        "length"
                    ],
                    "file name": "IOUtils.java",
                    "file old path": "src/main/java/org/apache/commons/io/IOUtils.java",
                    "file new path": "src/main/java/org/apache/commons/io/IOUtils.java",
                    "full name": "src.main.java.org.apache.commons.io.IOUtils.read"
                },
                {
                    "function name": "read",
                    "function params": [
                        "input",
                        "buffer",
                        "offset",
                        "length"
                    ],
                    "file name": "IOUtils.java",
                    "file old path": "src/main/java/org/apache/commons/io/IOUtils.java",
                    "file new path": "src/main/java/org/apache/commons/io/IOUtils.java",
                    "full name": "src.main.java.org.apache.commons.io.IOUtils.read"
                },
                {
                    "function name": "testReadReaderWithOffset",
                    "function params": [],
                    "file name": "IOUtilsTestCase.java",
                    "file old path": "src/test/java/org/apache/commons/io/IOUtilsTestCase.java",
                    "file new path": "src/test/java/org/apache/commons/io/IOUtilsTestCase.java",
                    "full name": "src.test.java.org.apache.commons.io.IOUtilsTestCase.testReadReaderWithOffset"
                },
                {
                    "function name": "testReadStreamWithOffset",
                    "function params": [],
                    "file name": "IOUtilsTestCase.java",
                    "file old path": "src/test/java/org/apache/commons/io/IOUtilsTestCase.java",
                    "file new path": "src/test/java/org/apache/commons/io/IOUtilsTestCase.java",
                    "full name": "src.test.java.org.apache.commons.io.IOUtilsTestCase.testReadStreamWithOffset"
                }
            ],
            "files that changed": [
                "src/main/java/org/apache/commons/io/IOUtils.java",
                "src/test/java/org/apache/commons/io/IOUtilsTestCase.java"
            ]
        },
        {
            "bug index": "219",
            "bug id": "IO-312",
            "hexsha": "364c2bf7f42e7679d910548d931be24332eaf6ad",
            "fix_hash": "5c8a6f44016a12aee9e485d94fc295fcd27375a6",
            "description": null,
            "commit number version hash": 990,
            "commit number": 912,
            "function that changed": [
                {
                    "function name": "CharSequenceInputStream",
                    "function params": [
                        "s",
                        "charset",
                        "bufferSize"
                    ],
                    "file name": "CharSequenceInputStream.java",
                    "file old path": "src/main/java/org/apache/commons/io/input/CharSequenceInputStream.java",
                    "file new path": "src/main/java/org/apache/commons/io/input/CharSequenceInputStream.java",
                    "full name": "src.main.java.org.apache.commons.io.input.CharSequenceInputStream.CharSequenceInputStream"
                },
                {
                    "function name": "mark",
                    "function params": [
                        "readlimit"
                    ],
                    "file name": "CharSequenceInputStream.java",
                    "file old path": "src/main/java/org/apache/commons/io/input/CharSequenceInputStream.java",
                    "file new path": "src/main/java/org/apache/commons/io/input/CharSequenceInputStream.java",
                    "full name": "src.main.java.org.apache.commons.io.input.CharSequenceInputStream.mark"
                },
                {
                    "function name": "reset",
                    "function params": [],
                    "file name": "CharSequenceInputStream.java",
                    "file old path": "src/main/java/org/apache/commons/io/input/CharSequenceInputStream.java",
                    "file new path": "src/main/java/org/apache/commons/io/input/CharSequenceInputStream.java",
                    "full name": "src.main.java.org.apache.commons.io.input.CharSequenceInputStream.reset"
                },
                {
                    "function name": "mark",
                    "function params": [
                        "readlimit"
                    ],
                    "file name": "CharSequenceInputStream.java",
                    "file old path": "src/main/java/org/apache/commons/io/input/CharSequenceInputStream.java",
                    "file new path": "src/main/java/org/apache/commons/io/input/CharSequenceInputStream.java",
                    "full name": "src.main.java.org.apache.commons.io.input.CharSequenceInputStream.mark"
                }
            ],
            "files that changed": [
                "src/main/java/org/apache/commons/io/input/CharSequenceInputStream.java"
            ]
        },
        {
            "bug index": "220",
            "bug id": "IO-1",
            "hexsha": "742c51feeaf75542ab9db6782ad3d2ad506fb871",
            "fix_hash": "1daa7cb1c8d2abe9caaa4c6f568e00217ce18da5",
            "description": "FileUtils.forceMkdir(File) calls File.mkdirs() to create the directory. The\nJavaDoc of this method does not mention that any necessary but nonexistent\nparent directories are created, too.",
            "commit number version hash": 443,
            "commit number": 910,
            "function that changed": [
                {
                    "function name": "copyLarge",
                    "function params": [
                        "input",
                        "output",
                        "offset",
                        "length"
                    ],
                    "file name": "IOUtils.java",
                    "file old path": "src/main/java/org/apache/commons/io/IOUtils.java",
                    "file new path": "src/main/java/org/apache/commons/io/IOUtils.java",
                    "full name": "src.main.java.org.apache.commons.io.IOUtils.copyLarge"
                },
                {
                    "function name": "copyLarge",
                    "function params": [
                        "input",
                        "output",
                        "offset",
                        "length"
                    ],
                    "file name": "IOUtils.java",
                    "file old path": "src/main/java/org/apache/commons/io/IOUtils.java",
                    "file new path": "src/main/java/org/apache/commons/io/IOUtils.java",
                    "full name": "src.main.java.org.apache.commons.io.IOUtils.copyLarge"
                },
                {
                    "function name": "contentEquals",
                    "function params": [
                        "input1",
                        "input2"
                    ],
                    "file name": "IOUtils.java",
                    "file old path": "src/main/java/org/apache/commons/io/IOUtils.java",
                    "file new path": "src/main/java/org/apache/commons/io/IOUtils.java",
                    "full name": "src.main.java.org.apache.commons.io.IOUtils.contentEquals"
                },
                {
                    "function name": "read",
                    "function params": [
                        "input",
                        "buffer",
                        "offset",
                        "length"
                    ],
                    "file name": "IOUtils.java",
                    "file old path": "src/main/java/org/apache/commons/io/IOUtils.java",
                    "file new path": "src/main/java/org/apache/commons/io/IOUtils.java",
                    "full name": "src.main.java.org.apache.commons.io.IOUtils.read"
                },
                {
                    "function name": "copyLarge",
                    "function params": [
                        "input",
                        "output"
                    ],
                    "file name": "IOUtils.java",
                    "file old path": "src/main/java/org/apache/commons/io/IOUtils.java",
                    "file new path": "src/main/java/org/apache/commons/io/IOUtils.java",
                    "full name": "src.main.java.org.apache.commons.io.IOUtils.copyLarge"
                },
                {
                    "function name": "read",
                    "function params": [
                        "input",
                        "buffer",
                        "offset",
                        "length"
                    ],
                    "file name": "IOUtils.java",
                    "file old path": "src/main/java/org/apache/commons/io/IOUtils.java",
                    "file new path": "src/main/java/org/apache/commons/io/IOUtils.java",
                    "full name": "src.main.java.org.apache.commons.io.IOUtils.read"
                },
                {
                    "function name": "contentEquals",
                    "function params": [
                        "input1",
                        "input2"
                    ],
                    "file name": "IOUtils.java",
                    "file old path": "src/main/java/org/apache/commons/io/IOUtils.java",
                    "file new path": "src/main/java/org/apache/commons/io/IOUtils.java",
                    "full name": "src.main.java.org.apache.commons.io.IOUtils.contentEquals"
                },
                {
                    "function name": "toByteArray",
                    "function params": [
                        "input",
                        "size"
                    ],
                    "file name": "IOUtils.java",
                    "file old path": "src/main/java/org/apache/commons/io/IOUtils.java",
                    "file new path": "src/main/java/org/apache/commons/io/IOUtils.java",
                    "full name": "src.main.java.org.apache.commons.io.IOUtils.toByteArray"
                },
                {
                    "function name": "copyLarge",
                    "function params": [
                        "input",
                        "output"
                    ],
                    "file name": "IOUtils.java",
                    "file old path": "src/main/java/org/apache/commons/io/IOUtils.java",
                    "file new path": "src/main/java/org/apache/commons/io/IOUtils.java",
                    "full name": "src.main.java.org.apache.commons.io.IOUtils.copyLarge"
                }
            ],
            "files that changed": [
                "src/main/java/org/apache/commons/io/IOUtils.java"
            ]
        },
        {
            "bug index": "221",
            "bug id": "IO-2",
            "hexsha": "742c51feeaf75542ab9db6782ad3d2ad506fb871",
            "fix_hash": "2413cf3c607371a7b7aa9d37a9e5d916814a4799",
            "description": "Hi,\n\n(sorry to assign it to the wrong component, but I cannot choose for IO)\n\nwhen I try to concat 2 paths with \"\\\" as path separator instead of \"/\", an\nexception is thrown. I'll upload a patch for this as well as a junit test.\n\ne.g.: FilenameUtils.catPath(\"C:\\\\temp\\\\\", \"test\") throws an exception ...\n\nMaarten",
            "commit number version hash": 443,
            "commit number": 908,
            "function that changed": [],
            "files that changed": [
                "src/main/java/org/apache/commons/io/FileUtils.java",
                "src/main/java/org/apache/commons/io/IOUtils.java",
                "src/main/java/org/apache/commons/io/input/CharSequenceInputStream.java"
            ]
        },
        {
            "bug index": "222",
            "bug id": "IO-1",
            "hexsha": "742c51feeaf75542ab9db6782ad3d2ad506fb871",
            "fix_hash": "e3646441205b9271fe2bad0e93088304a8db5a44",
            "description": "FileUtils.forceMkdir(File) calls File.mkdirs() to create the directory. The\nJavaDoc of this method does not mention that any necessary but nonexistent\nparent directories are created, too.",
            "commit number version hash": 443,
            "commit number": 905,
            "function that changed": [],
            "files that changed": [
                "src/main/java/org/apache/commons/io/FileSystemUtils.java",
                "src/main/java/org/apache/commons/io/FileUtils.java",
                "src/main/java/org/apache/commons/io/FilenameUtils.java",
                "src/main/java/org/apache/commons/io/IOUtils.java",
                "src/main/java/org/apache/commons/io/filefilter/AndFileFilter.java",
                "src/main/java/org/apache/commons/io/filefilter/ConditionalFileFilter.java",
                "src/main/java/org/apache/commons/io/filefilter/FileFilterUtils.java",
                "src/main/java/org/apache/commons/io/filefilter/OrFileFilter.java",
                "src/main/java/org/apache/commons/io/filefilter/WildcardFilter.java",
                "src/main/java/org/apache/commons/io/input/ClassLoaderObjectInputStream.java"
            ]
        },
        {
            "bug index": "223",
            "bug id": "IO-300",
            "hexsha": "364c2bf7f42e7679d910548d931be24332eaf6ad",
            "fix_hash": "d58ac89621aae78f7afcf3720f6b2ec1396beef1",
            "description": "Since moveDirectoryToDirectory performs a copy then delete, if you specify a target directory that is a subdirectory of the source, everything under the source directory is deleted.\n\nSteps to recreate:\n        File dest = new File(\"/tmp/dir1/dir2\");\n        File src  = new File(\"/tmp/dir1/\");\n\n        dest.mkdirs();\n\n        System.out.println(src.exists());\n\n        FileUtils.moveDirectoryToDirectory(src, dest, false);\n\n        System.out.println(src.exists());\n\nOutput:\n true\n false\n\nIf you try the same thing with a move command on Linux, you receive: \"mv: cannot move `dir1/' to a subdirectory of itself, `dir1/dir2/dir1'\"\n\nMaybe throw an exception if dest.getCanonicalPath().startsWith(src.getCanonicalPath())",
            "commit number version hash": 990,
            "commit number": 893,
            "function that changed": [
                {
                    "function name": "moveDirectory",
                    "function params": [
                        "srcDir",
                        "destDir"
                    ],
                    "file name": "FileUtils.java",
                    "file old path": "src/main/java/org/apache/commons/io/FileUtils.java",
                    "file new path": "src/main/java/org/apache/commons/io/FileUtils.java",
                    "full name": "src.main.java.org.apache.commons.io.FileUtils.moveDirectory"
                },
                {
                    "function name": "testIO300",
                    "function params": [],
                    "file name": "FileUtilsTestCase.java",
                    "file old path": "src/test/java/org/apache/commons/io/FileUtilsTestCase.java",
                    "file new path": "src/test/java/org/apache/commons/io/FileUtilsTestCase.java",
                    "full name": "src.test.java.org.apache.commons.io.FileUtilsTestCase.testIO300"
                }
            ],
            "files that changed": [
                "src/main/java/org/apache/commons/io/FileUtils.java",
                "src/test/java/org/apache/commons/io/FileUtilsTestCase.java"
            ]
        },
        {
            "bug index": "224",
            "bug id": "IO-307",
            "hexsha": "364c2bf7f42e7679d910548d931be24332eaf6ad",
            "fix_hash": "55c1430fc712e4b64fd4ba08660c0c8b4931486b",
            "description": "If the buffer is null, the method should throw NPE immediately (rather than letting it occur later)\n\nIf the offset or length are < 0 or would overflow the buffer, then throw IndexOutOfBoundsException with details of the values.",
            "commit number version hash": 990,
            "commit number": 892,
            "function that changed": [
                {
                    "function name": "read",
                    "function params": [
                        "b",
                        "off",
                        "len"
                    ],
                    "file name": "ReaderInputStream.java",
                    "file old path": "src/main/java/org/apache/commons/io/input/ReaderInputStream.java",
                    "file new path": "src/main/java/org/apache/commons/io/input/ReaderInputStream.java",
                    "full name": "src.main.java.org.apache.commons.io.input.ReaderInputStream.read"
                }
            ],
            "files that changed": [
                "src/main/java/org/apache/commons/io/input/ReaderInputStream.java"
            ]
        },
        {
            "bug index": "225",
            "bug id": "IO-2",
            "hexsha": "742c51feeaf75542ab9db6782ad3d2ad506fb871",
            "fix_hash": "33368e1a9d1fa6f960490ceace5c90d9dda80924",
            "description": "Hi,\n\n(sorry to assign it to the wrong component, but I cannot choose for IO)\n\nwhen I try to concat 2 paths with \"\\\" as path separator instead of \"/\", an\nexception is thrown. I'll upload a patch for this as well as a junit test.\n\ne.g.: FilenameUtils.catPath(\"C:\\\\temp\\\\\", \"test\") throws an exception ...\n\nMaarten",
            "commit number version hash": 443,
            "commit number": 889,
            "function that changed": [],
            "files that changed": [
                "src/main/java/org/apache/commons/io/FileUtils.java",
                "src/main/java/org/apache/commons/io/IOUtils.java"
            ]
        },
        {
            "bug index": "226",
            "bug id": "IO-306",
            "hexsha": "364c2bf7f42e7679d910548d931be24332eaf6ad",
            "fix_hash": "c4251acef1beb1f164413b94ba526f399b8838d6",
            "description": "The method read(byte[] b, int off, int len) should always return 0 if the requested length == 0, even if the stream is empty or at EOF, as that is how the overridden java.io.InputStream method is documented to behave.",
            "commit number version hash": 990,
            "commit number": 887,
            "function that changed": [
                {
                    "function name": "read",
                    "function params": [
                        "b",
                        "off",
                        "len"
                    ],
                    "file name": "ReaderInputStream.java",
                    "file old path": "src/main/java/org/apache/commons/io/input/ReaderInputStream.java",
                    "file new path": "src/main/java/org/apache/commons/io/input/ReaderInputStream.java",
                    "full name": "src.main.java.org.apache.commons.io.input.ReaderInputStream.read"
                },
                {
                    "function name": "testReadZeroEmptyString",
                    "function params": [],
                    "file name": "ReaderInputStreamTest.java",
                    "file old path": "src/test/java/org/apache/commons/io/input/ReaderInputStreamTest.java",
                    "file new path": "src/test/java/org/apache/commons/io/input/ReaderInputStreamTest.java",
                    "full name": "src.test.java.org.apache.commons.io.input.ReaderInputStreamTest.testReadZeroEmptyString"
                },
                {
                    "function name": "testReadZero",
                    "function params": [],
                    "file name": "ReaderInputStreamTest.java",
                    "file old path": "src/test/java/org/apache/commons/io/input/ReaderInputStreamTest.java",
                    "file new path": "src/test/java/org/apache/commons/io/input/ReaderInputStreamTest.java",
                    "full name": "src.test.java.org.apache.commons.io.input.ReaderInputStreamTest.testReadZero"
                }
            ],
            "files that changed": [
                "src/main/java/org/apache/commons/io/input/ReaderInputStream.java",
                "src/test/java/org/apache/commons/io/input/ReaderInputStreamTest.java"
            ]
        },
        {
            "bug index": "227",
            "bug id": "IO-2",
            "hexsha": "742c51feeaf75542ab9db6782ad3d2ad506fb871",
            "fix_hash": "e3daec3bb2ff25c8eb5be128f102d7acccea2cfc",
            "description": "Hi,\n\n(sorry to assign it to the wrong component, but I cannot choose for IO)\n\nwhen I try to concat 2 paths with \"\\\" as path separator instead of \"/\", an\nexception is thrown. I'll upload a patch for this as well as a junit test.\n\ne.g.: FilenameUtils.catPath(\"C:\\\\temp\\\\\", \"test\") throws an exception ...\n\nMaarten",
            "commit number version hash": 443,
            "commit number": 875,
            "function that changed": [
                {
                    "function name": "setupEfectiveFileFilter",
                    "function params": [
                        "fileFilter"
                    ],
                    "file name": "FileUtils.java",
                    "file old path": "src/main/java/org/apache/commons/io/FileUtils.java",
                    "file new path": "src/main/java/org/apache/commons/io/FileUtils.java",
                    "full name": "src.main.java.org.apache.commons.io.FileUtils.setupEfectiveFileFilter"
                },
                {
                    "function name": "validateListFilesParameters",
                    "function params": [
                        "directory",
                        "fileFilter"
                    ],
                    "file name": "FileUtils.java",
                    "file old path": "src/main/java/org/apache/commons/io/FileUtils.java",
                    "file new path": "src/main/java/org/apache/commons/io/FileUtils.java",
                    "full name": "src.main.java.org.apache.commons.io.FileUtils.validateListFilesParameters"
                }
            ],
            "files that changed": [
                "src/main/java/org/apache/commons/io/FileUtils.java"
            ]
        },
        {
            "bug index": "228",
            "bug id": "IO-276",
            "hexsha": "364c2bf7f42e7679d910548d931be24332eaf6ad",
            "fix_hash": "4cef5296135cf1a056f44158b00977239e4fc3ae",
            "description": "I called this method, but the target directory was not deleted.\n\n\nThe source of this method is as follows.\n----------\n    private static void deleteDirectoryOnExit(File directory) throws IOException {\n        if (!directory.exists()) {\n            return;\n        }\n\n        cleanDirectoryOnExit(directory);\n        directory.deleteOnExit();\n    }\n----------\nIn other words, this method calls \"java.io.File#deleteOnExit\" in order of \"grandchildren -> children -> parent\" for files of the target directory hierarchy.\n\n\nThere is following mention in javadoc of \"java.io.File#deleteOnExit\".\n----------\nFiles (or directories) are deleted in the reverse order that they are registered.\n----------\n\n\nTherefore, I think the calling order of \"java.io.File#deleteOnExit\" should be reverse.\n\n\nHow will be it?",
            "commit number version hash": 990,
            "commit number": 868,
            "function that changed": [
                {
                    "function name": "deleteDirectoryOnExit",
                    "function params": [
                        "directory"
                    ],
                    "file name": "FileUtils.java",
                    "file old path": "src/main/java/org/apache/commons/io/FileUtils.java",
                    "file new path": "src/main/java/org/apache/commons/io/FileUtils.java",
                    "full name": "src.main.java.org.apache.commons.io.FileUtils.deleteDirectoryOnExit"
                },
                {
                    "function name": "testIO276",
                    "function params": [],
                    "file name": "FileUtilsTestCase.java",
                    "file old path": "src/test/java/org/apache/commons/io/FileUtilsTestCase.java",
                    "file new path": "src/test/java/org/apache/commons/io/FileUtilsTestCase.java",
                    "full name": "src.test.java.org.apache.commons.io.FileUtilsTestCase.testIO276"
                }
            ],
            "files that changed": [
                "src/main/java/org/apache/commons/io/FileUtils.java",
                "src/test/java/org/apache/commons/io/FileUtilsTestCase.java"
            ]
        },
        {
            "bug index": "229",
            "bug id": "IO-273",
            "hexsha": "364c2bf7f42e7679d910548d931be24332eaf6ad",
            "fix_hash": "b1dede03147ca84376b4c3a26010229b2b20c105",
            "description": "BoundedInputStream.read() treats max differently from BoundedInputStream.read(byte[]...)\n\nread() checks for pos == max, whereas read(byte[]...) checks for pos >= max.\n\nThe latter check is safer (works even if pos overshoots max).",
            "commit number version hash": 990,
            "commit number": 867,
            "function that changed": [
                {
                    "function name": "read",
                    "function params": [],
                    "file name": "BoundedInputStream.java",
                    "file old path": "src/main/java/org/apache/commons/io/input/BoundedInputStream.java",
                    "file new path": "src/main/java/org/apache/commons/io/input/BoundedInputStream.java",
                    "full name": "src.main.java.org.apache.commons.io.input.BoundedInputStream.read"
                }
            ],
            "files that changed": [
                "src/main/java/org/apache/commons/io/input/BoundedInputStream.java"
            ]
        },
        {
            "bug index": "230",
            "bug id": "IO-298",
            "hexsha": "364c2bf7f42e7679d910548d931be24332eaf6ad",
            "fix_hash": "05f4b42cc0b32a5273fd518c8efe7fb041e9baf6",
            "description": null,
            "commit number version hash": 990,
            "commit number": 863,
            "function that changed": [
                {
                    "function name": "writeByteArrayToFile",
                    "function params": [
                        "file",
                        "data",
                        "append"
                    ],
                    "file name": "FileUtils.java",
                    "file old path": "src/main/java/org/apache/commons/io/FileUtils.java",
                    "file new path": "src/main/java/org/apache/commons/io/FileUtils.java",
                    "full name": "src.main.java.org.apache.commons.io.FileUtils.writeByteArrayToFile"
                },
                {
                    "function name": "writeLines",
                    "function params": [
                        "file",
                        "encoding",
                        "lines",
                        "lineEnding",
                        "append"
                    ],
                    "file name": "FileUtils.java",
                    "file old path": "src/main/java/org/apache/commons/io/FileUtils.java",
                    "file new path": "src/main/java/org/apache/commons/io/FileUtils.java",
                    "full name": "src.main.java.org.apache.commons.io.FileUtils.writeLines"
                },
                {
                    "function name": "writeStringToFile",
                    "function params": [
                        "file",
                        "data",
                        "encoding",
                        "append"
                    ],
                    "file name": "FileUtils.java",
                    "file old path": "src/main/java/org/apache/commons/io/FileUtils.java",
                    "file new path": "src/main/java/org/apache/commons/io/FileUtils.java",
                    "full name": "src.main.java.org.apache.commons.io.FileUtils.writeStringToFile"
                },
                {
                    "function name": "copyInputStreamToFile",
                    "function params": [
                        "source",
                        "destination"
                    ],
                    "file name": "FileUtils.java",
                    "file old path": "src/main/java/org/apache/commons/io/FileUtils.java",
                    "file new path": "src/main/java/org/apache/commons/io/FileUtils.java",
                    "full name": "src.main.java.org.apache.commons.io.FileUtils.copyInputStreamToFile"
                }
            ],
            "files that changed": [
                "src/main/java/org/apache/commons/io/FileUtils.java"
            ]
        },
        {
            "bug index": "231",
            "bug id": "IO-304",
            "hexsha": "364c2bf7f42e7679d910548d931be24332eaf6ad",
            "fix_hash": "025f2766f7c3db20e508f07bd0f17c4cb0702bdf",
            "description": "Here is the second contructor of Tailer class:\n{code:}\n    public Tailer(File file, TailerListener listener, long delay) {\n        this(file, listener, 1000, false);\n    }\n{code}",
            "commit number version hash": 990,
            "commit number": 862,
            "function that changed": [
                {
                    "function name": "Tailer",
                    "function params": [
                        "file",
                        "listener",
                        "delay"
                    ],
                    "file name": "Tailer.java",
                    "file old path": "src/main/java/org/apache/commons/io/input/Tailer.java",
                    "file new path": "src/main/java/org/apache/commons/io/input/Tailer.java",
                    "full name": "src.main.java.org.apache.commons.io.input.Tailer.Tailer"
                }
            ],
            "files that changed": [
                "src/main/java/org/apache/commons/io/input/Tailer.java"
            ]
        },
        {
            "bug index": "232",
            "bug id": "IO-302",
            "hexsha": "364c2bf7f42e7679d910548d931be24332eaf6ad",
            "fix_hash": "47e16e5bcff38e7cde014b3c78f3f0b4be69739f",
            "description": "Resetting the BOMInputStream doesn't reset the _fbLength_ member variable. This causes _fbLength_ to grow bigger than the _firstBytes_ array (when the file doesn't contain a BOM), which leads to an ArrayIndexOutOfBoundsException in the _readFirstBytes_ method.\n\nThe attached test case reveals the problem.",
            "commit number version hash": 990,
            "commit number": 861,
            "function that changed": [
                {
                    "function name": "testReadTwiceWithBOM",
                    "function params": [],
                    "file name": "BOMInputStreamTest.java",
                    "file old path": "src/test/java/org/apache/commons/io/input/BOMInputStreamTest.java",
                    "file new path": "src/test/java/org/apache/commons/io/input/BOMInputStreamTest.java",
                    "full name": "src.test.java.org.apache.commons.io.input.BOMInputStreamTest.testReadTwiceWithBOM"
                },
                {
                    "function name": "testReadTwiceWithoutBOM",
                    "function params": [],
                    "file name": "BOMInputStreamTest.java",
                    "file old path": "src/test/java/org/apache/commons/io/input/BOMInputStreamTest.java",
                    "file new path": "src/test/java/org/apache/commons/io/input/BOMInputStreamTest.java",
                    "full name": "src.test.java.org.apache.commons.io.input.BOMInputStreamTest.testReadTwiceWithoutBOM"
                },
                {
                    "function name": "readBOMInputStreamTwice",
                    "function params": [
                        "resource"
                    ],
                    "file name": "BOMInputStreamTest.java",
                    "file old path": "src/test/java/org/apache/commons/io/input/BOMInputStreamTest.java",
                    "file new path": "src/test/java/org/apache/commons/io/input/BOMInputStreamTest.java",
                    "full name": "src.test.java.org.apache.commons.io.input.BOMInputStreamTest.readBOMInputStreamTwice"
                }
            ],
            "files that changed": [
                "src/test/java/org/apache/commons/io/input/BOMInputStreamTest.java"
            ]
        },
        {
            "bug index": "233",
            "bug id": "IO-302",
            "hexsha": "364c2bf7f42e7679d910548d931be24332eaf6ad",
            "fix_hash": "3f8cc6d5f6565608b0146f87137ed34316bc4eb3",
            "description": "Resetting the BOMInputStream doesn't reset the _fbLength_ member variable. This causes _fbLength_ to grow bigger than the _firstBytes_ array (when the file doesn't contain a BOM), which leads to an ArrayIndexOutOfBoundsException in the _readFirstBytes_ method.\n\nThe attached test case reveals the problem.",
            "commit number version hash": 990,
            "commit number": 860,
            "function that changed": [
                {
                    "function name": "getBOM",
                    "function params": [],
                    "file name": "BOMInputStream.java",
                    "file old path": "src/main/java/org/apache/commons/io/input/BOMInputStream.java",
                    "file new path": "src/main/java/org/apache/commons/io/input/BOMInputStream.java",
                    "full name": "src.main.java.org.apache.commons.io.input.BOMInputStream.getBOM"
                },
                {
                    "function name": "testReadTwiceWithoutBOM",
                    "function params": [],
                    "file name": "BOMInputStreamTest.java",
                    "file old path": "src/test/java/org/apache/commons/io/input/BOMInputStreamTest.java",
                    "file new path": "src/test/java/org/apache/commons/io/input/BOMInputStreamTest.java",
                    "full name": "src.test.java.org.apache.commons.io.input.BOMInputStreamTest.testReadTwiceWithoutBOM"
                },
                {
                    "function name": "readFile",
                    "function params": [
                        "bomInputStream"
                    ],
                    "file name": "BOMInputStreamTest.java",
                    "file old path": "src/test/java/org/apache/commons/io/input/BOMInputStreamTest.java",
                    "file new path": "src/test/java/org/apache/commons/io/input/BOMInputStreamTest.java",
                    "full name": "src.test.java.org.apache.commons.io.input.BOMInputStreamTest.readFile"
                }
            ],
            "files that changed": [
                "src/main/java/org/apache/commons/io/input/BOMInputStream.java",
                "src/test/java/org/apache/commons/io/input/BOMInputStreamTest.java"
            ]
        },
        {
            "bug index": "234",
            "bug id": "IO-303",
            "hexsha": "364c2bf7f42e7679d910548d931be24332eaf6ad",
            "fix_hash": "56c87a17189ea320ff5799f7d10789ca8d9ce958",
            "description": "TeeOutputStream.close() looks like this:\n{code:title=TeeOutputStream.java|borderStyle=solid}\n    /**\n     * Closes both streams. \n     * @throws IOException if an I/O error occurs\n     */\n    @Override\n    public void close() throws IOException {\n        super.close();\n        this.branch.close();\n    }\n{code} \n\nIt is obvious that {{this.branch.close()}} is not executed when {{super.close()}} raises an exception. {{super.close()}} may in fact raise an IOException since {{ProxyOutputStream.handleIOException(IOException)}} is not overridden.",
            "commit number version hash": 990,
            "commit number": 858,
            "function that changed": [
                {
                    "function name": "close",
                    "function params": [],
                    "file name": "TeeOutputStream.java",
                    "file old path": "src/main/java/org/apache/commons/io/output/TeeOutputStream.java",
                    "file new path": "src/main/java/org/apache/commons/io/output/TeeOutputStream.java",
                    "full name": "src.main.java.org.apache.commons.io.output.TeeOutputStream.close"
                }
            ],
            "files that changed": [
                "src/main/java/org/apache/commons/io/output/TeeOutputStream.java"
            ]
        },
        {
            "bug index": "235",
            "bug id": "IO-303",
            "hexsha": "364c2bf7f42e7679d910548d931be24332eaf6ad",
            "fix_hash": "aad6359c39d59176c51e0d4e5ee31def1bc10077",
            "description": "TeeOutputStream.close() looks like this:\n{code:title=TeeOutputStream.java|borderStyle=solid}\n    /**\n     * Closes both streams. \n     * @throws IOException if an I/O error occurs\n     */\n    @Override\n    public void close() throws IOException {\n        super.close();\n        this.branch.close();\n    }\n{code} \n\nIt is obvious that {{this.branch.close()}} is not executed when {{super.close()}} raises an exception. {{super.close()}} may in fact raise an IOException since {{ProxyOutputStream.handleIOException(IOException)}} is not overridden.",
            "commit number version hash": 990,
            "commit number": 857,
            "function that changed": [
                {
                    "function name": "TeeOutputStream",
                    "function params": [
                        "out",
                        "branch"
                    ],
                    "file name": "TeeOutputStream.java",
                    "file old path": "src/main/java/org/apache/commons/io/output/TeeOutputStream.java",
                    "file new path": "src/main/java/org/apache/commons/io/output/TeeOutputStream.java",
                    "full name": "src.main.java.org.apache.commons.io.output.TeeOutputStream.TeeOutputStream"
                },
                {
                    "function name": "close",
                    "function params": [],
                    "file name": "TeeOutputStream.java",
                    "file old path": "src/main/java/org/apache/commons/io/output/TeeOutputStream.java",
                    "file new path": "src/main/java/org/apache/commons/io/output/TeeOutputStream.java",
                    "full name": "src.main.java.org.apache.commons.io.output.TeeOutputStream.close"
                },
                {
                    "function name": "ExceptionOnCloseByteArrayOutputStream",
                    "function params": [],
                    "file name": "TeeOutputStreamTest.java",
                    "file old path": "src/test/java/org/apache/commons/io/output/TeeOutputStreamTest.java",
                    "file new path": "src/test/java/org/apache/commons/io/output/TeeOutputStreamTest.java",
                    "full name": "src.test.java.org.apache.commons.io.output.TeeOutputStreamTest.ExceptionOnCloseByteArrayOutputStream"
                },
                {
                    "function name": "testCloseBranchIOException",
                    "function params": [],
                    "file name": "TeeOutputStreamTest.java",
                    "file old path": "src/test/java/org/apache/commons/io/output/TeeOutputStreamTest.java",
                    "file new path": "src/test/java/org/apache/commons/io/output/TeeOutputStreamTest.java",
                    "full name": "src.test.java.org.apache.commons.io.output.TeeOutputStreamTest.testCloseBranchIOException"
                },
                {
                    "function name": "RecordCloseByteArrayOutputStream",
                    "function params": [],
                    "file name": "TeeOutputStreamTest.java",
                    "file old path": "src/test/java/org/apache/commons/io/output/TeeOutputStreamTest.java",
                    "file new path": "src/test/java/org/apache/commons/io/output/TeeOutputStreamTest.java",
                    "full name": "src.test.java.org.apache.commons.io.output.TeeOutputStreamTest.RecordCloseByteArrayOutputStream"
                },
                {
                    "function name": "testTee",
                    "function params": [],
                    "file name": "TeeOutputStreamTest.java",
                    "file old path": "src/test/java/org/apache/commons/io/output/TeeOutputStreamTest.java",
                    "file new path": "src/test/java/org/apache/commons/io/output/TeeOutputStreamTest.java",
                    "full name": "src.test.java.org.apache.commons.io.output.TeeOutputStreamTest.testTee"
                },
                {
                    "function name": "testCloseMainIOException",
                    "function params": [],
                    "file name": "TeeOutputStreamTest.java",
                    "file old path": "src/test/java/org/apache/commons/io/output/TeeOutputStreamTest.java",
                    "file new path": "src/test/java/org/apache/commons/io/output/TeeOutputStreamTest.java",
                    "full name": "src.test.java.org.apache.commons.io.output.TeeOutputStreamTest.testCloseMainIOException"
                },
                {
                    "function name": "assertByteArrayEquals",
                    "function params": [
                        "msg",
                        "array1",
                        "array2"
                    ],
                    "file name": "TeeOutputStreamTest.java",
                    "file old path": "src/test/java/org/apache/commons/io/output/TeeOutputStreamTest.java",
                    "file new path": "src/test/java/org/apache/commons/io/output/TeeOutputStreamTest.java",
                    "full name": "src.test.java.org.apache.commons.io.output.TeeOutputStreamTest.assertByteArrayEquals"
                }
            ],
            "files that changed": [
                "src/main/java/org/apache/commons/io/output/TeeOutputStream.java",
                "src/test/java/org/apache/commons/io/output/TeeOutputStreamTest.java"
            ]
        },
        {
            "bug index": "236",
            "bug id": "IO-2",
            "hexsha": "742c51feeaf75542ab9db6782ad3d2ad506fb871",
            "fix_hash": "f0fdfa63b9e1e479a990f2d50b8878512ae6a980",
            "description": "Hi,\n\n(sorry to assign it to the wrong component, but I cannot choose for IO)\n\nwhen I try to concat 2 paths with \"\\\" as path separator instead of \"/\", an\nexception is thrown. I'll upload a patch for this as well as a junit test.\n\ne.g.: FilenameUtils.catPath(\"C:\\\\temp\\\\\", \"test\") throws an exception ...\n\nMaarten",
            "commit number version hash": 443,
            "commit number": 853,
            "function that changed": [],
            "files that changed": [
                "src/main/java/org/apache/commons/io/input/ReversedLinesFileReader.java"
            ]
        },
        {
            "bug index": "237",
            "bug id": "IO-5",
            "hexsha": "742c51feeaf75542ab9db6782ad3d2ad506fb871",
            "fix_hash": "2533e48bad897c52e0431fa63b9610d596611eea",
            "description": null,
            "commit number version hash": 443,
            "commit number": 834,
            "function that changed": [
                {
                    "function name": "WriterThread",
                    "function params": [],
                    "file name": "DemuxTestCase.java",
                    "file old path": "src/test/java/org/apache/commons/io/DemuxTestCase.java",
                    "file new path": "src/test/java/org/apache/commons/io/DemuxTestCase.java",
                    "full name": "src.test.java.org.apache.commons.io.DemuxTestCase.WriterThread"
                },
                {
                    "function name": "directoriesOnly",
                    "function params": [
                        "results"
                    ],
                    "file name": "DirectoryWalkerTestCase.java",
                    "file old path": "src/test/java/org/apache/commons/io/DirectoryWalkerTestCase.java",
                    "file new path": "src/test/java/org/apache/commons/io/DirectoryWalkerTestCase.java",
                    "full name": "src.test.java.org.apache.commons.io.DirectoryWalkerTestCase.directoriesOnly"
                },
                {
                    "function name": "filesOnly",
                    "function params": [
                        "results"
                    ],
                    "file name": "DirectoryWalkerTestCase.java",
                    "file old path": "src/test/java/org/apache/commons/io/DirectoryWalkerTestCase.java",
                    "file new path": "src/test/java/org/apache/commons/io/DirectoryWalkerTestCase.java",
                    "full name": "src.test.java.org.apache.commons.io.DirectoryWalkerTestCase.filesOnly"
                },
                {
                    "function name": "testSymmetryOfLong",
                    "function params": [],
                    "file name": "EndianUtilsTest.java",
                    "file old path": "src/test/java/org/apache/commons/io/EndianUtilsTest.java",
                    "file new path": "src/test/java/org/apache/commons/io/EndianUtilsTest.java",
                    "full name": "src.test.java.org.apache.commons.io.EndianUtilsTest.testSymmetryOfLong"
                },
                {
                    "function name": "testLocaleIndependence",
                    "function params": [],
                    "file name": "FilenameUtilsWildcardTestCase.java",
                    "file old path": "src/test/java/org/apache/commons/io/FilenameUtilsWildcardTestCase.java",
                    "file new path": "src/test/java/org/apache/commons/io/FilenameUtilsWildcardTestCase.java",
                    "full name": "src.test.java.org.apache.commons.io.FilenameUtilsWildcardTestCase.testLocaleIndependence"
                },
                {
                    "function name": "testAdd",
                    "function params": [],
                    "file name": "ConditionalFileFilterAbstractTestCase.java",
                    "file old path": "src/test/java/org/apache/commons/io/filefilter/ConditionalFileFilterAbstractTestCase.java",
                    "file new path": "src/test/java/org/apache/commons/io/filefilter/ConditionalFileFilterAbstractTestCase.java",
                    "full name": "src.test.java.org.apache.commons.io.filefilter.ConditionalFileFilterAbstractTestCase.testAdd"
                },
                {
                    "function name": "resetTrueFilters",
                    "function params": [
                        "filters"
                    ],
                    "file name": "IOFileFilterAbstractTestCase.java",
                    "file old path": "src/test/java/org/apache/commons/io/filefilter/IOFileFilterAbstractTestCase.java",
                    "file new path": "src/test/java/org/apache/commons/io/filefilter/IOFileFilterAbstractTestCase.java",
                    "full name": "src.test.java.org.apache.commons.io.filefilter.IOFileFilterAbstractTestCase.resetTrueFilters"
                },
                {
                    "function name": "resetFalseFilters",
                    "function params": [
                        "filters"
                    ],
                    "file name": "IOFileFilterAbstractTestCase.java",
                    "file old path": "src/test/java/org/apache/commons/io/filefilter/IOFileFilterAbstractTestCase.java",
                    "file new path": "src/test/java/org/apache/commons/io/filefilter/IOFileFilterAbstractTestCase.java",
                    "full name": "src.test.java.org.apache.commons.io.filefilter.IOFileFilterAbstractTestCase.resetFalseFilters"
                },
                {
                    "function name": "testRead",
                    "function params": [],
                    "file name": "AutoCloseInputStreamTest.java",
                    "file old path": "src/test/java/org/apache/commons/io/input/AutoCloseInputStreamTest.java",
                    "file new path": "src/test/java/org/apache/commons/io/input/AutoCloseInputStreamTest.java",
                    "full name": "src.test.java.org.apache.commons.io.input.AutoCloseInputStreamTest.testRead"
                },
                {
                    "function name": "testWithSingleByteRead",
                    "function params": [],
                    "file name": "ReaderInputStreamTest.java",
                    "file old path": "src/test/java/org/apache/commons/io/input/ReaderInputStreamTest.java",
                    "file new path": "src/test/java/org/apache/commons/io/input/ReaderInputStreamTest.java",
                    "full name": "src.test.java.org.apache.commons.io.input.ReaderInputStreamTest.testWithSingleByteRead"
                },
                {
                    "function name": "getXmlStream",
                    "function params": [
                        "bomType",
                        "xmlType",
                        "streamEnc",
                        "prologEnc"
                    ],
                    "file name": "XmlStreamReaderTest.java",
                    "file old path": "src/test/java/org/apache/commons/io/input/XmlStreamReaderTest.java",
                    "file new path": "src/test/java/org/apache/commons/io/input/XmlStreamReaderTest.java",
                    "full name": "src.test.java.org.apache.commons.io.input.XmlStreamReaderTest.getXmlStream"
                },
                {
                    "function name": "writeData",
                    "function params": [],
                    "file name": "ByteArrayOutputStreamTestCase.java",
                    "file old path": "src/test/java/org/apache/commons/io/output/ByteArrayOutputStreamTestCase.java",
                    "file new path": "src/test/java/org/apache/commons/io/output/ByteArrayOutputStreamTestCase.java",
                    "full name": "src.test.java.org.apache.commons.io.output.ByteArrayOutputStreamTestCase.writeData"
                },
                {
                    "function name": "testWithSingleByteWrite",
                    "function params": [],
                    "file name": "WriterOutputStreamTest.java",
                    "file old path": "src/test/java/org/apache/commons/io/output/WriterOutputStreamTest.java",
                    "file new path": "src/test/java/org/apache/commons/io/output/WriterOutputStreamTest.java",
                    "full name": "src.test.java.org.apache.commons.io.output.WriterOutputStreamTest.testWithSingleByteWrite"
                },
                {
                    "function name": "createLineBasedFile",
                    "function params": [
                        "file",
                        "data"
                    ],
                    "file name": "FileBasedTestCase.java",
                    "file old path": "src/test/java/org/apache/commons/io/testtools/FileBasedTestCase.java",
                    "file new path": "src/test/java/org/apache/commons/io/testtools/FileBasedTestCase.java",
                    "full name": "src.test.java.org.apache.commons.io.testtools.FileBasedTestCase.createLineBasedFile"
                }
            ],
            "files that changed": [
                "src/test/java/org/apache/commons/io/DemuxTestCase.java",
                "src/test/java/org/apache/commons/io/DirectoryWalkerTestCase.java",
                "src/test/java/org/apache/commons/io/EndianUtilsTest.java",
                "src/test/java/org/apache/commons/io/FilenameUtilsWildcardTestCase.java",
                "src/test/java/org/apache/commons/io/filefilter/ConditionalFileFilterAbstractTestCase.java",
                "src/test/java/org/apache/commons/io/filefilter/IOFileFilterAbstractTestCase.java",
                "src/test/java/org/apache/commons/io/input/AutoCloseInputStreamTest.java",
                "src/test/java/org/apache/commons/io/input/ReaderInputStreamTest.java",
                "src/test/java/org/apache/commons/io/input/XmlStreamReaderTest.java",
                "src/test/java/org/apache/commons/io/output/ByteArrayOutputStreamTestCase.java",
                "src/test/java/org/apache/commons/io/output/WriterOutputStreamTest.java",
                "src/test/java/org/apache/commons/io/testtools/FileBasedTestCase.java"
            ]
        },
        {
            "bug index": "238",
            "bug id": "IO-277",
            "hexsha": "63a1efef1d71667220a506b3f7a79e8642c5c712",
            "fix_hash": "2e11ed7e7e2d3532b51ae22421d2f78017f5b50f",
            "description": "The ReaderInputStream.read(byte[] b, int off, int len) method enters an infinite loop when its CharsetEncoder encounters an unmappable character in the input buffer.\n\nWhen its CharsetEncoder encounters an unmappable character, the value of CoderResult lastCoderResult.isUnmappable() == true, and Reader.read() is not invoked on the underlying Reader ever again.\n\nAttaching source file that reproduces this behavior.\n\n\n\nOne fix to consider is to call CharsetEncoder.onUnmappableCharacter(CodingErrorAction) in the ReaderInputStream constructor with a value other than the default CodingErrorAction.REPORT. e.g.:\n\npublic ReaderInputStream(Reader reader, Charset charset, int bufferSize) {\n            this.reader = reader;\n            encoder = charset.newEncoder();\n            encoder.onUnmappableCharacter(CodingErrorAction.REPLACE);\n...\n\nBy replacing the unmappable character with encoder's default replacement character, this effectively prevents the infinite loop from occurring. I'm not sure if that's the ideal behavior, but it seems fairly consistent with what org.apache.commons.io.output.WriterOutputStream does.\n",
            "commit number version hash": 839,
            "commit number": 828,
            "function that changed": [
                {
                    "function name": "ReaderInputStream",
                    "function params": [
                        "reader",
                        "encoder"
                    ],
                    "file name": "ReaderInputStream.java",
                    "file old path": "src/main/java/org/apache/commons/io/input/ReaderInputStream.java",
                    "file new path": "src/main/java/org/apache/commons/io/input/ReaderInputStream.java",
                    "full name": "src.main.java.org.apache.commons.io.input.ReaderInputStream.ReaderInputStream"
                },
                {
                    "function name": "ReaderInputStream",
                    "function params": [
                        "reader",
                        "charset",
                        "bufferSize"
                    ],
                    "file name": "ReaderInputStream.java",
                    "file old path": "src/main/java/org/apache/commons/io/input/ReaderInputStream.java",
                    "file new path": "src/main/java/org/apache/commons/io/input/ReaderInputStream.java",
                    "full name": "src.main.java.org.apache.commons.io.input.ReaderInputStream.ReaderInputStream"
                },
                {
                    "function name": "ReaderInputStream",
                    "function params": [
                        "reader",
                        "encoder",
                        "bufferSize"
                    ],
                    "file name": "ReaderInputStream.java",
                    "file old path": "src/main/java/org/apache/commons/io/input/ReaderInputStream.java",
                    "file new path": "src/main/java/org/apache/commons/io/input/ReaderInputStream.java",
                    "full name": "src.main.java.org.apache.commons.io.input.ReaderInputStream.ReaderInputStream"
                },
                {
                    "function name": "WriterOutputStream",
                    "function params": [
                        "writer",
                        "decoder",
                        "bufferSize",
                        "writeImmediately"
                    ],
                    "file name": "WriterOutputStream.java",
                    "file old path": "src/main/java/org/apache/commons/io/output/WriterOutputStream.java",
                    "file new path": "src/main/java/org/apache/commons/io/output/WriterOutputStream.java",
                    "full name": "src.main.java.org.apache.commons.io.output.WriterOutputStream.WriterOutputStream"
                },
                {
                    "function name": "WriterOutputStream",
                    "function params": [
                        "writer",
                        "decoder"
                    ],
                    "file name": "WriterOutputStream.java",
                    "file old path": "src/main/java/org/apache/commons/io/output/WriterOutputStream.java",
                    "file new path": "src/main/java/org/apache/commons/io/output/WriterOutputStream.java",
                    "full name": "src.main.java.org.apache.commons.io.output.WriterOutputStream.WriterOutputStream"
                },
                {
                    "function name": "WriterOutputStream",
                    "function params": [
                        "writer",
                        "charset",
                        "bufferSize",
                        "writeImmediately"
                    ],
                    "file name": "WriterOutputStream.java",
                    "file old path": "src/main/java/org/apache/commons/io/output/WriterOutputStream.java",
                    "file new path": "src/main/java/org/apache/commons/io/output/WriterOutputStream.java",
                    "full name": "src.main.java.org.apache.commons.io.output.WriterOutputStream.WriterOutputStream"
                }
            ],
            "files that changed": [
                "src/main/java/org/apache/commons/io/input/ReaderInputStream.java",
                "src/main/java/org/apache/commons/io/output/WriterOutputStream.java",
                "src/test/java/org/apache/commons/io/input/ReaderInputStreamTest.java"
            ]
        },
        {
            "bug index": "239",
            "bug id": "IO-280",
            "hexsha": "63a1efef1d71667220a506b3f7a79e8642c5c712",
            "fix_hash": "e9814310ee45df69b8ec51581c811e2d584f172e",
            "description": "FileUtils.openOutputStream() has the following code:\n\n{code}\nFile parent = file.getParentFile();\nif (parent != null && parent.exists() == false) {\n    if (parent.mkdirs() == false) {\n        throw new IOException(\"File '\" + file + \"' could not be created\");\n    }\n}\n{code}\n\nNow mkdirs() returns true only if the method actually created the directories; it's theoretically possible for the directory to be created in the window between the exists() and mkdirs() invocations. [Indeed the class actually checks for this in the forceMkdir() method]\n\nIt would be safer to use:\n\n{code}\nFile parent = file.getParentFile();\nif (parent != null && !parent.mkdirs() && !parent.isDirectory()) {\n    throw new IOException(\"Directory '\" + parent + \"' could not be created\"); // note changed text\n}\n{code}\n\nSimilarly elsewhere in the class where mkdirs() is used.",
            "commit number version hash": 839,
            "commit number": 826,
            "function that changed": [
                {
                    "function name": "doCopyDirectory",
                    "function params": [
                        "srcDir",
                        "destDir",
                        "filter",
                        "preserveFileDate",
                        "exclusionList"
                    ],
                    "file name": "FileUtils.java",
                    "file old path": "src/main/java/org/apache/commons/io/FileUtils.java",
                    "file new path": "src/main/java/org/apache/commons/io/FileUtils.java",
                    "full name": "src.main.java.org.apache.commons.io.FileUtils.doCopyDirectory"
                },
                {
                    "function name": "openOutputStream",
                    "function params": [
                        "file",
                        "append"
                    ],
                    "file name": "FileUtils.java",
                    "file old path": "src/main/java/org/apache/commons/io/FileUtils.java",
                    "file new path": "src/main/java/org/apache/commons/io/FileUtils.java",
                    "full name": "src.main.java.org.apache.commons.io.FileUtils.openOutputStream"
                },
                {
                    "function name": "copyFile",
                    "function params": [
                        "srcFile",
                        "destFile",
                        "preserveFileDate"
                    ],
                    "file name": "FileUtils.java",
                    "file old path": "src/main/java/org/apache/commons/io/FileUtils.java",
                    "file new path": "src/main/java/org/apache/commons/io/FileUtils.java",
                    "full name": "src.main.java.org.apache.commons.io.FileUtils.copyFile"
                }
            ],
            "files that changed": [
                "src/main/java/org/apache/commons/io/FileUtils.java"
            ]
        },
        {
            "bug index": "240",
            "bug id": "IO-277",
            "hexsha": "63a1efef1d71667220a506b3f7a79e8642c5c712",
            "fix_hash": "027c13d4d6a214b310271eb4db88496f84b207c3",
            "description": "The ReaderInputStream.read(byte[] b, int off, int len) method enters an infinite loop when its CharsetEncoder encounters an unmappable character in the input buffer.\n\nWhen its CharsetEncoder encounters an unmappable character, the value of CoderResult lastCoderResult.isUnmappable() == true, and Reader.read() is not invoked on the underlying Reader ever again.\n\nAttaching source file that reproduces this behavior.\n\n\n\nOne fix to consider is to call CharsetEncoder.onUnmappableCharacter(CodingErrorAction) in the ReaderInputStream constructor with a value other than the default CodingErrorAction.REPORT. e.g.:\n\npublic ReaderInputStream(Reader reader, Charset charset, int bufferSize) {\n            this.reader = reader;\n            encoder = charset.newEncoder();\n            encoder.onUnmappableCharacter(CodingErrorAction.REPLACE);\n...\n\nBy replacing the unmappable character with encoder's default replacement character, this effectively prevents the infinite loop from occurring. I'm not sure if that's the ideal behavior, but it seems fairly consistent with what org.apache.commons.io.output.WriterOutputStream does.\n",
            "commit number version hash": 839,
            "commit number": 822,
            "function that changed": [],
            "files that changed": [
                "src/test/java/org/apache/commons/io/input/XmlStreamReaderTest.java"
            ]
        },
        {
            "bug index": "241",
            "bug id": "IO-277",
            "hexsha": "63a1efef1d71667220a506b3f7a79e8642c5c712",
            "fix_hash": "2ed769a7ef84a50d6f01894b0291639a0b2e294c",
            "description": "The ReaderInputStream.read(byte[] b, int off, int len) method enters an infinite loop when its CharsetEncoder encounters an unmappable character in the input buffer.\n\nWhen its CharsetEncoder encounters an unmappable character, the value of CoderResult lastCoderResult.isUnmappable() == true, and Reader.read() is not invoked on the underlying Reader ever again.\n\nAttaching source file that reproduces this behavior.\n\n\n\nOne fix to consider is to call CharsetEncoder.onUnmappableCharacter(CodingErrorAction) in the ReaderInputStream constructor with a value other than the default CodingErrorAction.REPORT. e.g.:\n\npublic ReaderInputStream(Reader reader, Charset charset, int bufferSize) {\n            this.reader = reader;\n            encoder = charset.newEncoder();\n            encoder.onUnmappableCharacter(CodingErrorAction.REPLACE);\n...\n\nBy replacing the unmappable character with encoder's default replacement character, this effectively prevents the infinite loop from occurring. I'm not sure if that's the ideal behavior, but it seems fairly consistent with what org.apache.commons.io.output.WriterOutputStream does.\n",
            "commit number version hash": 839,
            "commit number": 821,
            "function that changed": [
                {
                    "function name": "testCharsetMismatchInfiniteLoop",
                    "function params": [],
                    "file name": "ReaderInputStreamTest.java",
                    "file old path": "src/test/java/org/apache/commons/io/input/ReaderInputStreamTest.java",
                    "file new path": "src/test/java/org/apache/commons/io/input/ReaderInputStreamTest.java",
                    "full name": "src.test.java.org.apache.commons.io.input.ReaderInputStreamTest.testCharsetMismatchInfiniteLoop"
                }
            ],
            "files that changed": [
                "src/test/java/org/apache/commons/io/input/ReaderInputStreamTest.java"
            ]
        },
        {
            "bug index": "242",
            "bug id": "IO-274",
            "hexsha": "63a1efef1d71667220a506b3f7a79e8642c5c712",
            "fix_hash": "02dc8c7e77db316553699f0e371f3e7803d3efbd",
            "description": "As reported here: http://mail-archives.apache.org/mod_mbox/commons-user/201105.mbox/%3cBANLkTim6hA-xGjn8cA6FfcPkVa6ax6KGag@mail.gmail.com%3e",
            "commit number version hash": 839,
            "commit number": 820,
            "function that changed": [
                {
                    "function name": "readLines",
                    "function params": [
                        "reader"
                    ],
                    "file name": "Tailer.java",
                    "file old path": "src/main/java/org/apache/commons/io/input/Tailer.java",
                    "file new path": "src/main/java/org/apache/commons/io/input/Tailer.java",
                    "full name": "src.main.java.org.apache.commons.io.input.Tailer.readLines"
                },
                {
                    "function name": "readLine",
                    "function params": [
                        "reader"
                    ],
                    "file name": "Tailer.java",
                    "file old path": "src/main/java/org/apache/commons/io/input/Tailer.java",
                    "file new path": "src/main/java/org/apache/commons/io/input/Tailer.java",
                    "full name": "src.main.java.org.apache.commons.io.input.Tailer.readLine"
                },
                {
                    "function name": "testTailerEof",
                    "function params": [],
                    "file name": "TailerTest.java",
                    "file old path": "src/test/java/org/apache/commons/io/input/TailerTest.java",
                    "file new path": "src/test/java/org/apache/commons/io/input/TailerTest.java",
                    "full name": "src.test.java.org.apache.commons.io.input.TailerTest.testTailerEof"
                }
            ],
            "files that changed": [
                "src/main/java/org/apache/commons/io/input/Tailer.java",
                "src/test/java/org/apache/commons/io/input/TailerTest.java"
            ]
        },
        {
            "bug index": "243",
            "bug id": "IO-274",
            "hexsha": "63a1efef1d71667220a506b3f7a79e8642c5c712",
            "fix_hash": "328b693dce1d280ca149f7efa67c24c2d31f6f71",
            "description": "As reported here: http://mail-archives.apache.org/mod_mbox/commons-user/201105.mbox/%3cBANLkTim6hA-xGjn8cA6FfcPkVa6ax6KGag@mail.gmail.com%3e",
            "commit number version hash": 839,
            "commit number": 819,
            "function that changed": [
                {
                    "function name": "writeString",
                    "function params": [
                        "file",
                        "string"
                    ],
                    "file name": "TailerTest.java",
                    "file old path": "src/test/java/org/apache/commons/io/input/TailerTest.java",
                    "file new path": "src/test/java/org/apache/commons/io/input/TailerTest.java",
                    "full name": "src.test.java.org.apache.commons.io.input.TailerTest.writeString"
                },
                {
                    "function name": "FIXME_testTailerEof",
                    "function params": [],
                    "file name": "TailerTest.java",
                    "file old path": "src/test/java/org/apache/commons/io/input/TailerTest.java",
                    "file new path": "src/test/java/org/apache/commons/io/input/TailerTest.java",
                    "full name": "src.test.java.org.apache.commons.io.input.TailerTest.FIXME_testTailerEof"
                },
                {
                    "function name": "tearDown",
                    "function params": [],
                    "file name": "TailerTest.java",
                    "file old path": "src/test/java/org/apache/commons/io/input/TailerTest.java",
                    "file new path": "src/test/java/org/apache/commons/io/input/TailerTest.java",
                    "full name": "src.test.java.org.apache.commons.io.input.TailerTest.tearDown"
                }
            ],
            "files that changed": [
                "src/test/java/org/apache/commons/io/input/TailerTest.java"
            ]
        },
        {
            "bug index": "244",
            "bug id": "IO-266",
            "hexsha": "63a1efef1d71667220a506b3f7a79e8642c5c712",
            "fix_hash": "0e035427fb7efb8892e15594810687a3d327a651",
            "description": "java.io.IOException: Insufficient system resources exist to complete the requested service\n\tat sun.nio.ch.FileDispatcher.pwrite0(Native Method)\n\tat sun.nio.ch.FileDispatcher.pwrite(Unknown Source)\n\tat sun.nio.ch.IOUtil.writeFromNativeBuffer(Unknown Source)\n\tat sun.nio.ch.IOUtil.write(Unknown Source)\n\tat sun.nio.ch.FileChannelImpl.write(Unknown Source)\n\tat sun.nio.ch.FileChannelImpl.transferFromFileChannel(Unknown Source)\n\tat sun.nio.ch.FileChannelImpl.transferFrom(Unknown Source)\n\tat org.apache.commons.io.FileUtils.doCopyFile(FileUtils.java:813)\n\tat org.apache.commons.io.FileUtils.copyFile(FileUtils.java:783)\n\tat org.test.igor.TestFileUtils.main(TestFileUtils.java:55)\n\nNOTE: the issue is cased by the function doCopyFile(File srcFile, File destFile, boolean preserveFileDate) using hardcoded data chunks of FIFTY_MB in the transferFrom() call.\nReducing this chunk from 50M to 31M solves the issue for my situation (32M still fails).\n\nHere is a test program to reproduce the issue:\n\npackage org.test.igor;\n\nimport java.io.File;\nimport java.io.FileInputStream;\nimport java.io.FileOutputStream;\nimport java.io.IOException;\nimport java.nio.channels.FileChannel;\n\nimport org.apache.commons.io.FileUtils;\nimport org.apache.commons.io.IOUtils;\n\npublic class TestFileUtils {\n\n    public static void main(String[] args){\n        \n        \n        File src = new File(\"D:\\\\2011.1-dev\\\\test\\\\test\");\n        File dest = new File(\"\\\\\\\\ismerek1\\\\Shared\");\n        \n        String filename = \"jdk-6u19-windows-x64.exe\";\n        \n        File file = new File(src, filename);\n        File toFile = new File(dest, filename);\n        \n        try {\n            FileUtils.copyFile(file, toFile, true);\n            System.out.println(\"Successful copy\");\n        }\n        catch (IOException e1) {\n            e1.printStackTrace();\n        }\n    }\n}\n\n\n\n\n\n\n",
            "commit number version hash": 839,
            "commit number": 817,
            "function that changed": [
                {
                    "function name": "doCopyFile",
                    "function params": [
                        "srcFile",
                        "destFile",
                        "preserveFileDate"
                    ],
                    "file name": "FileUtils.java",
                    "file old path": "src/main/java/org/apache/commons/io/FileUtils.java",
                    "file new path": "src/main/java/org/apache/commons/io/FileUtils.java",
                    "full name": "src.main.java.org.apache.commons.io.FileUtils.doCopyFile"
                }
            ],
            "files that changed": [
                "src/main/java/org/apache/commons/io/FileUtils.java"
            ]
        },
        {
            "bug index": "245",
            "bug id": "IO-263",
            "hexsha": "63a1efef1d71667220a506b3f7a79e8642c5c712",
            "fix_hash": "cea203aefcd63400f4ab8239a6def11d592922de",
            "description": "Doing a FileSystemUtils.freeSpaceKb(\"D:/\") where the drive (in this example d:\\) is an empty drive (A drive with no non-hidden files on it yet) results in an exception being thrown.\n\n     \"Command line returned OS error code '1' for command [cmd.exe, /C, dir /-c \"D:\\\"]\n\nPerhaps it could do a \"dir /a /-c\" to work in more cases? (Since hidden file \"System Volume Information\" will usually be available)",
            "commit number version hash": 839,
            "commit number": 810,
            "function that changed": [
                {
                    "function name": "freeSpaceWindows",
                    "function params": [
                        "path",
                        "timeout"
                    ],
                    "file name": "FileSystemUtils.java",
                    "file old path": "src/main/java/org/apache/commons/io/FileSystemUtils.java",
                    "file new path": "src/main/java/org/apache/commons/io/FileSystemUtils.java",
                    "full name": "src.main.java.org.apache.commons.io.FileSystemUtils.freeSpaceWindows"
                },
                {
                    "function name": "testGetFreeSpaceWindows_String_quoted",
                    "function params": [],
                    "file name": "FileSystemUtilsTestCase.java",
                    "file old path": "src/test/java/org/apache/commons/io/FileSystemUtilsTestCase.java",
                    "file new path": "src/test/java/org/apache/commons/io/FileSystemUtilsTestCase.java",
                    "full name": "src.test.java.org.apache.commons.io.FileSystemUtilsTestCase.testGetFreeSpaceWindows_String_quoted"
                },
                {
                    "function name": "testGetFreeSpaceWindows_String_EmptyPath",
                    "function params": [],
                    "file name": "FileSystemUtilsTestCase.java",
                    "file old path": "src/test/java/org/apache/commons/io/FileSystemUtilsTestCase.java",
                    "file new path": "src/test/java/org/apache/commons/io/FileSystemUtilsTestCase.java",
                    "full name": "src.test.java.org.apache.commons.io.FileSystemUtilsTestCase.testGetFreeSpaceWindows_String_EmptyPath"
                },
                {
                    "function name": "testGetFreeSpaceWindows_String_NormalResponse",
                    "function params": [],
                    "file name": "FileSystemUtilsTestCase.java",
                    "file old path": "src/test/java/org/apache/commons/io/FileSystemUtilsTestCase.java",
                    "file new path": "src/test/java/org/apache/commons/io/FileSystemUtilsTestCase.java",
                    "full name": "src.test.java.org.apache.commons.io.FileSystemUtilsTestCase.testGetFreeSpaceWindows_String_NormalResponse"
                },
                {
                    "function name": "testGetFreeSpaceWindows_String_StripDrive",
                    "function params": [],
                    "file name": "FileSystemUtilsTestCase.java",
                    "file old path": "src/test/java/org/apache/commons/io/FileSystemUtilsTestCase.java",
                    "file new path": "src/test/java/org/apache/commons/io/FileSystemUtilsTestCase.java",
                    "full name": "src.test.java.org.apache.commons.io.FileSystemUtilsTestCase.testGetFreeSpaceWindows_String_StripDrive"
                }
            ],
            "files that changed": [
                "src/main/java/org/apache/commons/io/FileSystemUtils.java",
                "src/test/java/org/apache/commons/io/FileSystemUtilsTestCase.java"
            ]
        },
        {
            "bug index": "246",
            "bug id": "IO-269",
            "hexsha": "364c2bf7f42e7679d910548d931be24332eaf6ad",
            "fix_hash": "3e8f98cced56c53c41a0bd1dcb2418bb2a440444",
            "description": "The Tailer code works on Windows, except that it locks the file against deletion or rename.\n\nThe test code fails to detect this, because it fails to check if the file deletion succeeds.\n\nThis seems to be a Windows OS issue.\n\nA possible solution might be to keep closing and re-opening the file.\n",
            "commit number version hash": 990,
            "commit number": 809,
            "function that changed": [
                {
                    "function name": "testTailer",
                    "function params": [],
                    "file name": "TailerTest.java",
                    "file old path": "src/test/java/org/apache/commons/io/input/TailerTest.java",
                    "file new path": "src/test/java/org/apache/commons/io/input/TailerTest.java",
                    "full name": "src.test.java.org.apache.commons.io.input.TailerTest.testTailer"
                }
            ],
            "files that changed": [
                "src/test/java/org/apache/commons/io/input/TailerTest.java"
            ]
        },
        {
            "bug index": "247",
            "bug id": "IO-260",
            "hexsha": "63a1efef1d71667220a506b3f7a79e8642c5c712",
            "fix_hash": "8ff60c3e444c84396c54eb5621c829067954f66d",
            "description": "ObjectInputSteam has 2 methods that need to be overloaded for proper behavior in this case.\n\nresolveClass is ok, but resolveProxyClass doesn't attempt to look in the passed class loader to resolve the interfaces.",
            "commit number version hash": 839,
            "commit number": 794,
            "function that changed": [
                {
                    "function name": "resolveProxyClass",
                    "function params": [
                        "interfaces"
                    ],
                    "file name": "ClassLoaderObjectInputStream.java",
                    "file old path": "src/main/java/org/apache/commons/io/input/ClassLoaderObjectInputStream.java",
                    "file new path": "src/main/java/org/apache/commons/io/input/ClassLoaderObjectInputStream.java",
                    "full name": "src.main.java.org.apache.commons.io.input.ClassLoaderObjectInputStream.resolveProxyClass"
                },
                {
                    "function name": "testResolveProxyClass",
                    "function params": [],
                    "file name": "ClassLoaderObjectInputStreamTest.java",
                    "file old path": "src/test/java/org/apache/commons/io/input/ClassLoaderObjectInputStreamTest.java",
                    "file new path": "src/test/java/org/apache/commons/io/input/ClassLoaderObjectInputStreamTest.java",
                    "full name": "src.test.java.org.apache.commons.io.input.ClassLoaderObjectInputStreamTest.testResolveProxyClass"
                }
            ],
            "files that changed": [
                "src/main/java/org/apache/commons/io/input/ClassLoaderObjectInputStream.java",
                "src/test/java/org/apache/commons/io/input/ClassLoaderObjectInputStreamTest.java"
            ]
        },
        {
            "bug index": "248",
            "bug id": "IO-264",
            "hexsha": "63a1efef1d71667220a506b3f7a79e8642c5c712",
            "fix_hash": "476ccd8898ca8c491047a993e2310fe94affe086",
            "description": "FileUtils.moveFile() JavaDoc does specify the behaviour of the method in a case when the destFile exists. It would be helpful to know from the JavaDoc that in such case an exception is thrown as it's not immediately obvious.",
            "commit number version hash": 839,
            "commit number": 793,
            "function that changed": [],
            "files that changed": [
                "src/main/java/org/apache/commons/io/FileUtils.java"
            ]
        },
        {
            "bug index": "249",
            "bug id": "IO-258",
            "hexsha": "c7a7418920656c7fc1e42cdd4fb8760ccb1ce5f7",
            "fix_hash": "97191772383bc267d16497c884a1c8b90033911b",
            "description": "XmlStreamReader reads the underlying InputStream to try and detect the encoding. However once that process is done the bytes read from the stream should still be available to be read - this was accidentally broken in r1004882 by creating the underlying reader with the original InputStream, rather than the wrapped streams used to detect encoding.",
            "commit number version hash": 792,
            "commit number": 791,
            "function that changed": [
                {
                    "function name": "doRawStream",
                    "function params": [
                        "bom",
                        "pis",
                        "lenient"
                    ],
                    "file name": "XmlStreamReader.java",
                    "file old path": "src/main/java/org/apache/commons/io/input/XmlStreamReader.java",
                    "file new path": "src/main/java/org/apache/commons/io/input/XmlStreamReader.java",
                    "full name": "src.main.java.org.apache.commons.io.input.XmlStreamReader.doRawStream"
                },
                {
                    "function name": "doHttpStream",
                    "function params": [
                        "bom",
                        "pis",
                        "httpContentType",
                        "lenient"
                    ],
                    "file name": "XmlStreamReader.java",
                    "file old path": "src/main/java/org/apache/commons/io/input/XmlStreamReader.java",
                    "file new path": "src/main/java/org/apache/commons/io/input/XmlStreamReader.java",
                    "full name": "src.main.java.org.apache.commons.io.input.XmlStreamReader.doHttpStream"
                },
                {
                    "function name": "doRawStream",
                    "function params": [
                        "is",
                        "lenient"
                    ],
                    "file name": "XmlStreamReader.java",
                    "file old path": "src/main/java/org/apache/commons/io/input/XmlStreamReader.java",
                    "file new path": "src/main/java/org/apache/commons/io/input/XmlStreamReader.java",
                    "full name": "src.main.java.org.apache.commons.io.input.XmlStreamReader.doRawStream"
                },
                {
                    "function name": "doLenientDetection",
                    "function params": [
                        "httpContentType",
                        "ex"
                    ],
                    "file name": "XmlStreamReader.java",
                    "file old path": "src/main/java/org/apache/commons/io/input/XmlStreamReader.java",
                    "file new path": "src/main/java/org/apache/commons/io/input/XmlStreamReader.java",
                    "full name": "src.main.java.org.apache.commons.io.input.XmlStreamReader.doLenientDetection"
                },
                {
                    "function name": "XmlStreamReader",
                    "function params": [
                        "is",
                        "httpContentType",
                        "lenient",
                        "defaultEncoding"
                    ],
                    "file name": "XmlStreamReader.java",
                    "file old path": "src/main/java/org/apache/commons/io/input/XmlStreamReader.java",
                    "file new path": "src/main/java/org/apache/commons/io/input/XmlStreamReader.java",
                    "full name": "src.main.java.org.apache.commons.io.input.XmlStreamReader.XmlStreamReader"
                },
                {
                    "function name": "XmlStreamReader",
                    "function params": [
                        "conn",
                        "defaultEncoding"
                    ],
                    "file name": "XmlStreamReader.java",
                    "file old path": "src/main/java/org/apache/commons/io/input/XmlStreamReader.java",
                    "file new path": "src/main/java/org/apache/commons/io/input/XmlStreamReader.java",
                    "full name": "src.main.java.org.apache.commons.io.input.XmlStreamReader.XmlStreamReader"
                },
                {
                    "function name": "doHttpStream",
                    "function params": [
                        "is",
                        "httpContentType",
                        "lenient"
                    ],
                    "file name": "XmlStreamReader.java",
                    "file old path": "src/main/java/org/apache/commons/io/input/XmlStreamReader.java",
                    "file new path": "src/main/java/org/apache/commons/io/input/XmlStreamReader.java",
                    "full name": "src.main.java.org.apache.commons.io.input.XmlStreamReader.doHttpStream"
                },
                {
                    "function name": "XmlStreamReader",
                    "function params": [
                        "is",
                        "lenient",
                        "defaultEncoding"
                    ],
                    "file name": "XmlStreamReader.java",
                    "file old path": "src/main/java/org/apache/commons/io/input/XmlStreamReader.java",
                    "file new path": "src/main/java/org/apache/commons/io/input/XmlStreamReader.java",
                    "full name": "src.main.java.org.apache.commons.io.input.XmlStreamReader.XmlStreamReader"
                },
                {
                    "function name": "doLenientDetection",
                    "function params": [
                        "httpContentType",
                        "is",
                        "ex"
                    ],
                    "file name": "XmlStreamReader.java",
                    "file old path": "src/main/java/org/apache/commons/io/input/XmlStreamReader.java",
                    "file new path": "src/main/java/org/apache/commons/io/input/XmlStreamReader.java",
                    "full name": "src.main.java.org.apache.commons.io.input.XmlStreamReader.doLenientDetection"
                },
                {
                    "function name": "getXmlStream",
                    "function params": [
                        "bomType",
                        "xmlType",
                        "streamEnc",
                        "prologEnc"
                    ],
                    "file name": "XmlStreamReaderTest.java",
                    "file old path": "src/test/java/org/apache/commons/io/input/XmlStreamReaderTest.java",
                    "file new path": "src/test/java/org/apache/commons/io/input/XmlStreamReaderTest.java",
                    "full name": "src.test.java.org.apache.commons.io.input.XmlStreamReaderTest.getXmlStream"
                },
                {
                    "function name": "getXML",
                    "function params": [
                        "bomType",
                        "xmlType",
                        "streamEnc",
                        "prologEnc"
                    ],
                    "file name": "XmlStreamReaderTest.java",
                    "file old path": "src/test/java/org/apache/commons/io/input/XmlStreamReaderTest.java",
                    "file new path": "src/test/java/org/apache/commons/io/input/XmlStreamReaderTest.java",
                    "full name": "src.test.java.org.apache.commons.io.input.XmlStreamReaderTest.getXML"
                },
                {
                    "function name": "testRawContent",
                    "function params": [],
                    "file name": "XmlStreamReaderTest.java",
                    "file old path": "src/test/java/org/apache/commons/io/input/XmlStreamReaderTest.java",
                    "file new path": "src/test/java/org/apache/commons/io/input/XmlStreamReaderTest.java",
                    "full name": "src.test.java.org.apache.commons.io.input.XmlStreamReaderTest.testRawContent"
                },
                {
                    "function name": "testHttpContent",
                    "function params": [],
                    "file name": "XmlStreamReaderTest.java",
                    "file old path": "src/test/java/org/apache/commons/io/input/XmlStreamReaderTest.java",
                    "file new path": "src/test/java/org/apache/commons/io/input/XmlStreamReaderTest.java",
                    "full name": "src.test.java.org.apache.commons.io.input.XmlStreamReaderTest.testHttpContent"
                }
            ],
            "files that changed": [
                "src/main/java/org/apache/commons/io/input/XmlStreamReader.java",
                "src/test/java/org/apache/commons/io/input/XmlStreamReaderTest.java"
            ]
        },
        {
            "bug index": "250",
            "bug id": "IO-257",
            "hexsha": "c7a7418920656c7fc1e42cdd4fb8760ccb1ce5f7",
            "fix_hash": "dccf793eb78ddc93de1f745f39fb58251fc81ad0",
            "description": "BOMInputStream.read(byte[]) returns 0 when it should return -1.\n\nThis is not a valid action (unless buf.length == 0) and can cause problems, e.g. \"java.io.IOException: Underlying input stream returned zero bytes - at sun.nio.cs.StreamDecoder.readBytes(StreamDecoder.java:268)\"\n\nFrom java.io.InputStream.read(byte[]) JavaDocs: \"If the length of b is zero, then no bytes are read and 0 is returned; otherwise, there is an attempt to read at least one byte. If no byte is available because the stream is at the end of the file, the value -1 is returned; otherwise, at least one byte is read and stored into b.\"\n\nSuggested fix, change line 287 of BOMInputStream.java from\n        return (secondCount < 0) ? firstCount : firstCount + secondCount;\ninto\n        return (secondCount < 0) ? (firstCount > 0 ? firstCount : -1) : firstCount + secondCount;\n",
            "commit number version hash": 792,
            "commit number": 787,
            "function that changed": [
                {
                    "function name": "read",
                    "function params": [
                        "buf",
                        "off",
                        "len"
                    ],
                    "file name": "BOMInputStream.java",
                    "file old path": "src/main/java/org/apache/commons/io/input/BOMInputStream.java",
                    "file new path": "src/main/java/org/apache/commons/io/input/BOMInputStream.java",
                    "full name": "src.main.java.org.apache.commons.io.input.BOMInputStream.read"
                },
                {
                    "function name": "testEmptyBufferWithBOM",
                    "function params": [],
                    "file name": "BOMInputStreamTest.java",
                    "file old path": "src/test/java/org/apache/commons/io/input/BOMInputStreamTest.java",
                    "file new path": "src/test/java/org/apache/commons/io/input/BOMInputStreamTest.java",
                    "full name": "src.test.java.org.apache.commons.io.input.BOMInputStreamTest.testEmptyBufferWithBOM"
                },
                {
                    "function name": "testEmptyBufferWithoutBOM",
                    "function params": [],
                    "file name": "BOMInputStreamTest.java",
                    "file old path": "src/test/java/org/apache/commons/io/input/BOMInputStreamTest.java",
                    "file new path": "src/test/java/org/apache/commons/io/input/BOMInputStreamTest.java",
                    "full name": "src.test.java.org.apache.commons.io.input.BOMInputStreamTest.testEmptyBufferWithoutBOM"
                }
            ],
            "files that changed": [
                "src/main/java/org/apache/commons/io/input/BOMInputStream.java",
                "src/test/java/org/apache/commons/io/input/BOMInputStreamTest.java"
            ]
        },
        {
            "bug index": "251",
            "bug id": "IO-6",
            "hexsha": "742c51feeaf75542ab9db6782ad3d2ad506fb871",
            "fix_hash": "5abb5e227907a855e34fd22719836871d370956f",
            "description": "I am running a batch application that moves around some files. \nFileUtils.listFiles(new File(\"c:\\\\\"), new PrefixFileFilter(filePrefix), new \nNotFileFilter(new NameFileFilter(\"some\"))) works just great. But the more I \nstarted load testing application I came across this strange problem. I am \nmoving around 22000 files. And While its moving around the file on some file \nits changing file date. I am using FileUtils.copyFileToDirectory(file, todir);",
            "commit number version hash": 443,
            "commit number": 784,
            "function that changed": [
                {
                    "function name": "testDifferentEncoding",
                    "function params": [],
                    "file name": "FileWriterWithEncodingTest.java",
                    "file old path": "src/test/java/org/apache/commons/io/output/FileWriterWithEncodingTest.java",
                    "file new path": "src/test/java/org/apache/commons/io/output/FileWriterWithEncodingTest.java",
                    "full name": "src.test.java.org.apache.commons.io.output.FileWriterWithEncodingTest.testDifferentEncoding"
                }
            ],
            "files that changed": [
                "src/test/java/org/apache/commons/io/output/FileWriterWithEncodingTest.java"
            ]
        },
        {
            "bug index": "252",
            "bug id": "IO-253",
            "hexsha": "d9406824aeba0e977c0692971a6dbb2e62823886",
            "fix_hash": "99c5008d71b61f84a114038b064d58c837ee7ed6",
            "description": "J\u00f6rg Schaible reports the following test failures in RC5 of Commons IO 2.0\n\n    * http://markmail.org/message/eoo5bk6n3pfsvfwk\n\n\"IBM JDK 1.5 does not like the OOME handling in the FileCleanerTestCase and FileCleanerTrackingTestCase, while IBM JDK 1.6 has problems with the WriterOutputStream handling UTF16.\"",
            "commit number version hash": 1288,
            "commit number": 783,
            "function that changed": [
                {
                    "function name": "testUTF16WithBufferedWrite",
                    "function params": [],
                    "file name": "WriterOutputStreamTest.java",
                    "file old path": "src/test/java/org/apache/commons/io/output/WriterOutputStreamTest.java",
                    "file new path": "src/test/java/org/apache/commons/io/output/WriterOutputStreamTest.java",
                    "full name": "src.test.java.org.apache.commons.io.output.WriterOutputStreamTest.testUTF16WithBufferedWrite"
                },
                {
                    "function name": "testUTF16LEWithBufferedWrite",
                    "function params": [],
                    "file name": "WriterOutputStreamTest.java",
                    "file old path": "src/test/java/org/apache/commons/io/output/WriterOutputStreamTest.java",
                    "file new path": "src/test/java/org/apache/commons/io/output/WriterOutputStreamTest.java",
                    "full name": "src.test.java.org.apache.commons.io.output.WriterOutputStreamTest.testUTF16LEWithBufferedWrite"
                },
                {
                    "function name": "testUTF16BEWithBufferedWrite",
                    "function params": [],
                    "file name": "WriterOutputStreamTest.java",
                    "file old path": "src/test/java/org/apache/commons/io/output/WriterOutputStreamTest.java",
                    "file new path": "src/test/java/org/apache/commons/io/output/WriterOutputStreamTest.java",
                    "full name": "src.test.java.org.apache.commons.io.output.WriterOutputStreamTest.testUTF16BEWithBufferedWrite"
                }
            ],
            "files that changed": [
                "src/test/java/org/apache/commons/io/output/WriterOutputStreamTest.java"
            ]
        },
        {
            "bug index": "253",
            "bug id": "IO-253",
            "hexsha": "d9406824aeba0e977c0692971a6dbb2e62823886",
            "fix_hash": "ab3f42c7e5d084d0b7a05c747678bebbc2de676d",
            "description": "J\u00f6rg Schaible reports the following test failures in RC5 of Commons IO 2.0\n\n    * http://markmail.org/message/eoo5bk6n3pfsvfwk\n\n\"IBM JDK 1.5 does not like the OOME handling in the FileCleanerTestCase and FileCleanerTrackingTestCase, while IBM JDK 1.6 has problems with the WriterOutputStream handling UTF16.\"",
            "commit number version hash": 1288,
            "commit number": 782,
            "function that changed": [
                {
                    "function name": "testUTF16LEWithSingleByteWrite",
                    "function params": [],
                    "file name": "WriterOutputStreamTest.java",
                    "file old path": "src/test/java/org/apache/commons/io/output/WriterOutputStreamTest.java",
                    "file new path": "src/test/java/org/apache/commons/io/output/WriterOutputStreamTest.java",
                    "full name": "src.test.java.org.apache.commons.io.output.WriterOutputStreamTest.testUTF16LEWithSingleByteWrite"
                },
                {
                    "function name": "testUTF16BEWithSingleByteWrite",
                    "function params": [],
                    "file name": "WriterOutputStreamTest.java",
                    "file old path": "src/test/java/org/apache/commons/io/output/WriterOutputStreamTest.java",
                    "file new path": "src/test/java/org/apache/commons/io/output/WriterOutputStreamTest.java",
                    "full name": "src.test.java.org.apache.commons.io.output.WriterOutputStreamTest.testUTF16BEWithSingleByteWrite"
                },
                {
                    "function name": "testLargeUTF16LEWithBufferedWrite",
                    "function params": [],
                    "file name": "WriterOutputStreamTest.java",
                    "file old path": "src/test/java/org/apache/commons/io/output/WriterOutputStreamTest.java",
                    "file new path": "src/test/java/org/apache/commons/io/output/WriterOutputStreamTest.java",
                    "full name": "src.test.java.org.apache.commons.io.output.WriterOutputStreamTest.testLargeUTF16LEWithBufferedWrite"
                },
                {
                    "function name": "testLargeUTF16BEWithBufferedWrite",
                    "function params": [],
                    "file name": "WriterOutputStreamTest.java",
                    "file old path": "src/test/java/org/apache/commons/io/output/WriterOutputStreamTest.java",
                    "file new path": "src/test/java/org/apache/commons/io/output/WriterOutputStreamTest.java",
                    "full name": "src.test.java.org.apache.commons.io.output.WriterOutputStreamTest.testLargeUTF16BEWithBufferedWrite"
                },
                {
                    "function name": "testLargeUTF16WithBufferedWrite",
                    "function params": [],
                    "file name": "WriterOutputStreamTest.java",
                    "file old path": "src/test/java/org/apache/commons/io/output/WriterOutputStreamTest.java",
                    "file new path": "src/test/java/org/apache/commons/io/output/WriterOutputStreamTest.java",
                    "full name": "src.test.java.org.apache.commons.io.output.WriterOutputStreamTest.testLargeUTF16WithBufferedWrite"
                }
            ],
            "files that changed": [
                "src/test/java/org/apache/commons/io/output/WriterOutputStreamTest.java"
            ]
        },
        {
            "bug index": "254",
            "bug id": "IO-252",
            "hexsha": "651332ef291809e8271cec74fdd6691cfb725f9f",
            "fix_hash": "e07acbbff9fa0706298401441a123a01da112cc7",
            "description": "Certain strings can cause the org.apache.commons.io.FileUtils.toFile(URL url) method to call Integer.parseInt with an invalid argument and thus throw a NumberFormatException:\n\nException in thread \"main\" java.lang.NumberFormatException: For input string: \"%2\"\n\tat java.lang.NumberFormatException.forInputString(NumberFormatException.java:48)\n\tat java.lang.Integer.parseInt(Integer.java:449)\n\tat org.apache.commons.io.FileUtils.toFile(FileUtils.java:476)\n\nOne example of such a string: \"both%20are%20100%20%25%20true\"\n",
            "commit number version hash": 499,
            "commit number": 771,
            "function that changed": [
                {
                    "function name": "testToFile5",
                    "function params": [],
                    "file name": "FileUtilsTestCase.java",
                    "file old path": "src/test/java/org/apache/commons/io/FileUtilsTestCase.java",
                    "file new path": "src/test/java/org/apache/commons/io/FileUtilsTestCase.java",
                    "full name": "src.test.java.org.apache.commons.io.FileUtilsTestCase.testToFile5"
                }
            ],
            "files that changed": [
                "src/test/java/org/apache/commons/io/FileUtilsTestCase.java"
            ]
        },
        {
            "bug index": "255",
            "bug id": "IO-5",
            "hexsha": "742c51feeaf75542ab9db6782ad3d2ad506fb871",
            "fix_hash": "9ec6f62abcf0283ec4d64c85f35e25c7252c0e23",
            "description": null,
            "commit number version hash": 443,
            "commit number": 770,
            "function that changed": [
                {
                    "function name": "hasNext",
                    "function params": [],
                    "file name": "LineIterator.java",
                    "file old path": "src/main/java/org/apache/commons/io/LineIterator.java",
                    "file new path": "src/main/java/org/apache/commons/io/LineIterator.java",
                    "full name": "src.main.java.org.apache.commons.io.LineIterator.hasNext"
                }
            ],
            "files that changed": [
                "src/main/java/org/apache/commons/io/LineIterator.java"
            ]
        },
        {
            "bug index": "256",
            "bug id": "IO-161",
            "hexsha": "01afc9d7d01e802ee3a0d91ff47c75041cff0cfe",
            "fix_hash": "53615435dbb357c140a5eb6a15f7a1c10a434458",
            "description": "The following code in FileCleaningTrackerTestCase never exits, hanging the whole compilation/testing process:\n\n    private void waitUntilTrackCount() {\n        while (theInstance.getTrackCount() != 0) {\n            int total = 0;\n            while (theInstance.getTrackCount() != 0) {\n                byte[] b = new byte[1024 * 1024];\n                b[0] = (byte) System.currentTimeMillis();\n                total = total + b[0];\n                System.gc();\n            }\n        }\n    }\n\nIt is clear that in theory this code might loop forever, as the allocation of the byte arrays might never unleash a garbage collection complete enough to deallocate all marker objects, so to bring the track count to zero. Believe me, it's not only theory :).",
            "commit number version hash": 717,
            "commit number": 759,
            "function that changed": [
                {
                    "function name": "waitUntilTrackCount",
                    "function params": [],
                    "file name": "FileCleaningTrackerTestCase.java",
                    "file old path": "src/test/java/org/apache/commons/io/FileCleaningTrackerTestCase.java",
                    "file new path": "src/test/java/org/apache/commons/io/FileCleaningTrackerTestCase.java",
                    "full name": "src.test.java.org.apache.commons.io.FileCleaningTrackerTestCase.waitUntilTrackCount"
                }
            ],
            "files that changed": [
                "src/test/java/org/apache/commons/io/FileCleaningTrackerTestCase.java"
            ]
        },
        {
            "bug index": "257",
            "bug id": "IO-161",
            "hexsha": "01afc9d7d01e802ee3a0d91ff47c75041cff0cfe",
            "fix_hash": "c681da4a8412669e8ce1d8793b8b1443df1d4d61",
            "description": "The following code in FileCleaningTrackerTestCase never exits, hanging the whole compilation/testing process:\n\n    private void waitUntilTrackCount() {\n        while (theInstance.getTrackCount() != 0) {\n            int total = 0;\n            while (theInstance.getTrackCount() != 0) {\n                byte[] b = new byte[1024 * 1024];\n                b[0] = (byte) System.currentTimeMillis();\n                total = total + b[0];\n                System.gc();\n            }\n        }\n    }\n\nIt is clear that in theory this code might loop forever, as the allocation of the byte arrays might never unleash a garbage collection complete enough to deallocate all marker objects, so to bring the track count to zero. Believe me, it's not only theory :).",
            "commit number version hash": 717,
            "commit number": 758,
            "function that changed": [
                {
                    "function name": "testFileCleanerDirectory_ForceStrategy",
                    "function params": [],
                    "file name": "FileCleaningTrackerTestCase.java",
                    "file old path": "src/test/java/org/apache/commons/io/FileCleaningTrackerTestCase.java",
                    "file new path": "src/test/java/org/apache/commons/io/FileCleaningTrackerTestCase.java",
                    "full name": "src.test.java.org.apache.commons.io.FileCleaningTrackerTestCase.testFileCleanerDirectory_ForceStrategy"
                },
                {
                    "function name": "pauseForDeleteToComplete",
                    "function params": [
                        "file"
                    ],
                    "file name": "FileCleaningTrackerTestCase.java",
                    "file old path": "src/test/java/org/apache/commons/io/FileCleaningTrackerTestCase.java",
                    "file new path": "src/test/java/org/apache/commons/io/FileCleaningTrackerTestCase.java",
                    "full name": "src.test.java.org.apache.commons.io.FileCleaningTrackerTestCase.pauseForDeleteToComplete"
                }
            ],
            "files that changed": [
                "src/test/java/org/apache/commons/io/FileCleaningTrackerTestCase.java"
            ]
        },
        {
            "bug index": "258",
            "bug id": "IO-196",
            "hexsha": "01afc9d7d01e802ee3a0d91ff47c75041cff0cfe",
            "fix_hash": "624ad8570111e173dcad14505f3539741394c506",
            "description": "The FilesystemObserverTestCase method testFileCreate() fails occasionally in the Continuum build at http://vmbuild.apache.org/continuum/projectView.action?projectId=155. The failure, when it happens, is:\n\nFilesystemObserverTestCase\n  testFileCreate :\n junit.framework.AssertionFailedError\n junit.framework.AssertionFailedError: E[0 0 0 1 0 0]: No. of directories changed expected:<1> but was:<0>\n       at junit.framework.Assert.fail(Assert.java:47)\n       at junit.framework.Assert.failNotEquals(Assert.java:282)\n       at junit.framework.Assert.assertEquals(Assert.java:64)\n       at junit.framework.Assert.assertEquals(Assert.java:201)\n       at org.apache.commons.io.monitor.FilesystemObserverTestCase.checkCollectionSizes(FilesystemObserverTestCase.java:424)\n       at org.apache.commons.io.monitor.FilesystemObserverTestCase.testFileCreate(FilesystemObserverTestCase.java:203)\n\n",
            "commit number version hash": 717,
            "commit number": 755,
            "function that changed": [
                {
                    "function name": "touch",
                    "function params": [
                        "file"
                    ],
                    "file name": "AbstractMonitorTestCase.java",
                    "file old path": "src/test/java/org/apache/commons/io/monitor/AbstractMonitorTestCase.java",
                    "file new path": "src/test/java/org/apache/commons/io/monitor/AbstractMonitorTestCase.java",
                    "full name": "src.test.java.org.apache.commons.io.monitor.AbstractMonitorTestCase.touch"
                },
                {
                    "function name": "checkFile",
                    "function params": [
                        "label",
                        "file",
                        "files"
                    ],
                    "file name": "FileSystemMonitorTestCase.java",
                    "file old path": "src/test/java/org/apache/commons/io/monitor/FileSystemMonitorTestCase.java",
                    "file new path": "src/test/java/org/apache/commons/io/monitor/FileSystemMonitorTestCase.java",
                    "full name": "src.test.java.org.apache.commons.io.monitor.FileSystemMonitorTestCase.checkFile"
                }
            ],
            "files that changed": [
                "src/test/java/org/apache/commons/io/monitor/AbstractMonitorTestCase.java",
                "src/test/java/org/apache/commons/io/monitor/FileSystemMonitorTestCase.java"
            ]
        },
        {
            "bug index": "259",
            "bug id": "IO-196",
            "hexsha": "01afc9d7d01e802ee3a0d91ff47c75041cff0cfe",
            "fix_hash": "25362de1c6f5f8680707826067414d29604b9add",
            "description": "The FilesystemObserverTestCase method testFileCreate() fails occasionally in the Continuum build at http://vmbuild.apache.org/continuum/projectView.action?projectId=155. The failure, when it happens, is:\n\nFilesystemObserverTestCase\n  testFileCreate :\n junit.framework.AssertionFailedError\n junit.framework.AssertionFailedError: E[0 0 0 1 0 0]: No. of directories changed expected:<1> but was:<0>\n       at junit.framework.Assert.fail(Assert.java:47)\n       at junit.framework.Assert.failNotEquals(Assert.java:282)\n       at junit.framework.Assert.assertEquals(Assert.java:64)\n       at junit.framework.Assert.assertEquals(Assert.java:201)\n       at org.apache.commons.io.monitor.FilesystemObserverTestCase.checkCollectionSizes(FilesystemObserverTestCase.java:424)\n       at org.apache.commons.io.monitor.FilesystemObserverTestCase.testFileCreate(FilesystemObserverTestCase.java:203)\n\n",
            "commit number version hash": 717,
            "commit number": 752,
            "function that changed": [
                {
                    "function name": "touch",
                    "function params": [
                        "file"
                    ],
                    "file name": "FileSystemMonitorTestCase.java",
                    "file old path": "src/test/java/org/apache/commons/io/monitor/FileSystemMonitorTestCase.java",
                    "file new path": "src/test/java/org/apache/commons/io/monitor/FileSystemMonitorTestCase.java",
                    "full name": "src.test.java.org.apache.commons.io.monitor.FileSystemMonitorTestCase.touch"
                }
            ],
            "files that changed": [
                "src/test/java/org/apache/commons/io/monitor/FileSystemMonitorTestCase.java"
            ]
        },
        {
            "bug index": "260",
            "bug id": "IO-196",
            "hexsha": "01afc9d7d01e802ee3a0d91ff47c75041cff0cfe",
            "fix_hash": "f11021dca612e6bc4e9963248c0927225299a857",
            "description": "The FilesystemObserverTestCase method testFileCreate() fails occasionally in the Continuum build at http://vmbuild.apache.org/continuum/projectView.action?projectId=155. The failure, when it happens, is:\n\nFilesystemObserverTestCase\n  testFileCreate :\n junit.framework.AssertionFailedError\n junit.framework.AssertionFailedError: E[0 0 0 1 0 0]: No. of directories changed expected:<1> but was:<0>\n       at junit.framework.Assert.fail(Assert.java:47)\n       at junit.framework.Assert.failNotEquals(Assert.java:282)\n       at junit.framework.Assert.assertEquals(Assert.java:64)\n       at junit.framework.Assert.assertEquals(Assert.java:201)\n       at org.apache.commons.io.monitor.FilesystemObserverTestCase.checkCollectionSizes(FilesystemObserverTestCase.java:424)\n       at org.apache.commons.io.monitor.FilesystemObserverTestCase.testFileCreate(FilesystemObserverTestCase.java:203)\n\n",
            "commit number version hash": 717,
            "commit number": 745,
            "function that changed": [
                {
                    "function name": "hasChanged",
                    "function params": [
                        "file"
                    ],
                    "file name": "FilesystemEntry.java",
                    "file old path": "src/main/java/org/apache/commons/io/monitor/FilesystemEntry.java",
                    "file new path": "src/main/java/org/apache/commons/io/monitor/FilesystemEntry.java",
                    "full name": "src.main.java.org.apache.commons.io.monitor.FilesystemEntry.hasChanged"
                },
                {
                    "function name": "hasChanged",
                    "function params": [],
                    "file name": "FilesystemEntry.java",
                    "file old path": "src/main/java/org/apache/commons/io/monitor/FilesystemEntry.java",
                    "file new path": "src/main/java/org/apache/commons/io/monitor/FilesystemEntry.java",
                    "full name": "src.main.java.org.apache.commons.io.monitor.FilesystemEntry.hasChanged"
                },
                {
                    "function name": "refresh",
                    "function params": [
                        "file"
                    ],
                    "file name": "FilesystemEntry.java",
                    "file old path": "src/main/java/org/apache/commons/io/monitor/FilesystemEntry.java",
                    "file new path": "src/main/java/org/apache/commons/io/monitor/FilesystemEntry.java",
                    "full name": "src.main.java.org.apache.commons.io.monitor.FilesystemEntry.refresh"
                },
                {
                    "function name": "refresh",
                    "function params": [],
                    "file name": "FilesystemEntry.java",
                    "file old path": "src/main/java/org/apache/commons/io/monitor/FilesystemEntry.java",
                    "file new path": "src/main/java/org/apache/commons/io/monitor/FilesystemEntry.java",
                    "full name": "src.main.java.org.apache.commons.io.monitor.FilesystemEntry.refresh"
                },
                {
                    "function name": "createFileEntry",
                    "function params": [
                        "parent",
                        "file"
                    ],
                    "file name": "FilesystemObserver.java",
                    "file old path": "src/main/java/org/apache/commons/io/monitor/FilesystemObserver.java",
                    "file new path": "src/main/java/org/apache/commons/io/monitor/FilesystemObserver.java",
                    "full name": "src.main.java.org.apache.commons.io.monitor.FilesystemObserver.createFileEntry"
                },
                {
                    "function name": "doMatch",
                    "function params": [
                        "entry",
                        "file"
                    ],
                    "file name": "FilesystemObserver.java",
                    "file old path": "src/main/java/org/apache/commons/io/monitor/FilesystemObserver.java",
                    "file new path": "src/main/java/org/apache/commons/io/monitor/FilesystemObserver.java",
                    "full name": "src.main.java.org.apache.commons.io.monitor.FilesystemObserver.doMatch"
                },
                {
                    "function name": "initialize",
                    "function params": [],
                    "file name": "FilesystemObserver.java",
                    "file old path": "src/main/java/org/apache/commons/io/monitor/FilesystemObserver.java",
                    "file new path": "src/main/java/org/apache/commons/io/monitor/FilesystemObserver.java",
                    "full name": "src.main.java.org.apache.commons.io.monitor.FilesystemObserver.initialize"
                },
                {
                    "function name": "testFileDelete",
                    "function params": [],
                    "file name": "FilesystemObserverTestCase.java",
                    "file old path": "src/test/java/org/apache/commons/io/monitor/FilesystemObserverTestCase.java",
                    "file new path": "src/test/java/org/apache/commons/io/monitor/FilesystemObserverTestCase.java",
                    "full name": "src.test.java.org.apache.commons.io.monitor.FilesystemObserverTestCase.testFileDelete"
                },
                {
                    "function name": "testFileCreate",
                    "function params": [],
                    "file name": "FilesystemObserverTestCase.java",
                    "file old path": "src/test/java/org/apache/commons/io/monitor/FilesystemObserverTestCase.java",
                    "file new path": "src/test/java/org/apache/commons/io/monitor/FilesystemObserverTestCase.java",
                    "full name": "src.test.java.org.apache.commons.io.monitor.FilesystemObserverTestCase.testFileCreate"
                },
                {
                    "function name": "checkCollectionsEmpty",
                    "function params": [
                        "label"
                    ],
                    "file name": "FilesystemObserverTestCase.java",
                    "file old path": "src/test/java/org/apache/commons/io/monitor/FilesystemObserverTestCase.java",
                    "file new path": "src/test/java/org/apache/commons/io/monitor/FilesystemObserverTestCase.java",
                    "full name": "src.test.java.org.apache.commons.io.monitor.FilesystemObserverTestCase.checkCollectionsEmpty"
                },
                {
                    "function name": "testFileUpdate",
                    "function params": [],
                    "file name": "FilesystemObserverTestCase.java",
                    "file old path": "src/test/java/org/apache/commons/io/monitor/FilesystemObserverTestCase.java",
                    "file new path": "src/test/java/org/apache/commons/io/monitor/FilesystemObserverTestCase.java",
                    "full name": "src.test.java.org.apache.commons.io.monitor.FilesystemObserverTestCase.testFileUpdate"
                },
                {
                    "function name": "checkCollectionSizes",
                    "function params": [
                        "label",
                        "dirCreate",
                        "dirChange",
                        "dirDelete",
                        "fileCreate",
                        "fileChange",
                        "fileDelete"
                    ],
                    "file name": "FilesystemObserverTestCase.java",
                    "file old path": "src/test/java/org/apache/commons/io/monitor/FilesystemObserverTestCase.java",
                    "file new path": "src/test/java/org/apache/commons/io/monitor/FilesystemObserverTestCase.java",
                    "full name": "src.test.java.org.apache.commons.io.monitor.FilesystemObserverTestCase.checkCollectionSizes"
                },
                {
                    "function name": "testObserveSingleFile",
                    "function params": [],
                    "file name": "FilesystemObserverTestCase.java",
                    "file old path": "src/test/java/org/apache/commons/io/monitor/FilesystemObserverTestCase.java",
                    "file new path": "src/test/java/org/apache/commons/io/monitor/FilesystemObserverTestCase.java",
                    "full name": "src.test.java.org.apache.commons.io.monitor.FilesystemObserverTestCase.testObserveSingleFile"
                },
                {
                    "function name": "testDirectory",
                    "function params": [],
                    "file name": "FilesystemObserverTestCase.java",
                    "file old path": "src/test/java/org/apache/commons/io/monitor/FilesystemObserverTestCase.java",
                    "file new path": "src/test/java/org/apache/commons/io/monitor/FilesystemObserverTestCase.java",
                    "full name": "src.test.java.org.apache.commons.io.monitor.FilesystemObserverTestCase.testDirectory"
                }
            ],
            "files that changed": [
                "src/main/java/org/apache/commons/io/monitor/FilesystemEntry.java",
                "src/main/java/org/apache/commons/io/monitor/FilesystemObserver.java",
                "src/test/java/org/apache/commons/io/monitor/FilesystemObserverTestCase.java"
            ]
        },
        {
            "bug index": "261",
            "bug id": "IO-161",
            "hexsha": "01afc9d7d01e802ee3a0d91ff47c75041cff0cfe",
            "fix_hash": "3f124c68426718bd5870a85930fd075c151ccb33",
            "description": "The following code in FileCleaningTrackerTestCase never exits, hanging the whole compilation/testing process:\n\n    private void waitUntilTrackCount() {\n        while (theInstance.getTrackCount() != 0) {\n            int total = 0;\n            while (theInstance.getTrackCount() != 0) {\n                byte[] b = new byte[1024 * 1024];\n                b[0] = (byte) System.currentTimeMillis();\n                total = total + b[0];\n                System.gc();\n            }\n        }\n    }\n\nIt is clear that in theory this code might loop forever, as the allocation of the byte arrays might never unleash a garbage collection complete enough to deallocate all marker objects, so to bring the track count to zero. Believe me, it's not only theory :).",
            "commit number version hash": 717,
            "commit number": 744,
            "function that changed": [
                {
                    "function name": "Reaper",
                    "function params": [],
                    "file name": "FileCleaningTracker.java",
                    "file old path": "src/main/java/org/apache/commons/io/FileCleaningTracker.java",
                    "file new path": "src/main/java/org/apache/commons/io/FileCleaningTracker.java",
                    "full name": "src.main.java.org.apache.commons.io.FileCleaningTracker.Reaper"
                },
                {
                    "function name": "waitUntilTrackCount",
                    "function params": [],
                    "file name": "FileCleaningTrackerTestCase.java",
                    "file old path": "src/test/java/org/apache/commons/io/FileCleaningTrackerTestCase.java",
                    "file new path": "src/test/java/org/apache/commons/io/FileCleaningTrackerTestCase.java",
                    "full name": "src.test.java.org.apache.commons.io.FileCleaningTrackerTestCase.waitUntilTrackCount"
                }
            ],
            "files that changed": [
                "src/main/java/org/apache/commons/io/FileCleaningTracker.java",
                "src/test/java/org/apache/commons/io/FileCleaningTrackerTestCase.java"
            ]
        },
        {
            "bug index": "262",
            "bug id": "IO-16",
            "hexsha": "742c51feeaf75542ab9db6782ad3d2ad506fb871",
            "fix_hash": "4b7b166727ea45b2c6edaf77bdc056d3da6350a2",
            "description": "Env: Java 1.4.2, commons-io-1.0.jar, Win XP\n\nThe AbstractFileFilter's FilenameFilter's accept(File, String) method \nimplementation constructs the fileName/File (it passes to accept(File)) \nwrongly - please see below. This causes the DirectoryFileFilter (in example, I \ndid not have time to check out the other AbstractFileFilter implementations) \nfailure since it's FileFilter implementation receives the incorrect \nfilename/File. \n\nNote I stumbled into this in Win Env. and really don't know how it works in \nother platforms.\n\nv1.0 code:\n    public boolean accept(File dir, String name) {\n        String filename = dir.getName() + File.separator + name;\n        return accept(new File(filename));\n    }\n\ncorrect code should be:\n    public boolean accept(File dir, String name) {\n        String filename = dir.getPath() + File.separator + name;\n        return accept(new File(filename));\n    }",
            "commit number version hash": 443,
            "commit number": 738,
            "function that changed": [
                {
                    "function name": "_testHttpValid",
                    "function params": [
                        "cT",
                        "bomEnc",
                        "streamEnc",
                        "prologEnc"
                    ],
                    "file name": "XmlStreamReaderTest.java",
                    "file old path": "src/test/java/org/apache/commons/io/input/XmlStreamReaderTest.java",
                    "file new path": "src/test/java/org/apache/commons/io/input/XmlStreamReaderTest.java",
                    "full name": "src.test.java.org.apache.commons.io.input.XmlStreamReaderTest._testHttpValid"
                },
                {
                    "function name": "testHttp",
                    "function params": [],
                    "file name": "XmlStreamReaderTest.java",
                    "file old path": "src/test/java/org/apache/commons/io/input/XmlStreamReaderTest.java",
                    "file new path": "src/test/java/org/apache/commons/io/input/XmlStreamReaderTest.java",
                    "full name": "src.test.java.org.apache.commons.io.input.XmlStreamReaderTest.testHttp"
                },
                {
                    "function name": "_testAlternateDefaultEncoding",
                    "function params": [
                        "cT",
                        "bomEnc",
                        "streamEnc",
                        "prologEnc",
                        "alternateEnc"
                    ],
                    "file name": "XmlStreamReaderTest.java",
                    "file old path": "src/test/java/org/apache/commons/io/input/XmlStreamReaderTest.java",
                    "file new path": "src/test/java/org/apache/commons/io/input/XmlStreamReaderTest.java",
                    "full name": "src.test.java.org.apache.commons.io.input.XmlStreamReaderTest._testAlternateDefaultEncoding"
                }
            ],
            "files that changed": [
                "src/test/java/org/apache/commons/io/input/XmlStreamReaderTest.java"
            ]
        },
        {
            "bug index": "263",
            "bug id": "IO-201",
            "hexsha": "01afc9d7d01e802ee3a0d91ff47c75041cff0cfe",
            "fix_hash": "94d8c10b757a5f85012916255bb43d49f854a3c8",
            "description": "CountingInputStream is only partially synchronized.\n\nThe count is not synchronized when it is updated in read operations, so is not guaranteed to be published correctly\n\nThe synchronization could be removed without loss of functionality.\n\nNot sure it makes sense to share a stream between threads anyway, as the underlying stream is unlikely to be thread-safe.\n\nIf only one thread reads the stream, then the count field could be made volatile.\nThis would allow other threads to read the count safely.\n",
            "commit number version hash": 717,
            "commit number": 705,
            "function that changed": [
                {
                    "function name": "getCount",
                    "function params": [],
                    "file name": "CountingInputStream.java",
                    "file old path": "src/java/org/apache/commons/io/input/CountingInputStream.java",
                    "file new path": "src/java/org/apache/commons/io/input/CountingInputStream.java",
                    "full name": "src.java.org.apache.commons.io.input.CountingInputStream.getCount"
                },
                {
                    "function name": "skip",
                    "function params": [
                        "length"
                    ],
                    "file name": "CountingInputStream.java",
                    "file old path": "src/java/org/apache/commons/io/input/CountingInputStream.java",
                    "file new path": "src/java/org/apache/commons/io/input/CountingInputStream.java",
                    "full name": "src.java.org.apache.commons.io.input.CountingInputStream.skip"
                },
                {
                    "function name": "resetCount",
                    "function params": [],
                    "file name": "CountingInputStream.java",
                    "file old path": "src/java/org/apache/commons/io/input/CountingInputStream.java",
                    "file new path": "src/java/org/apache/commons/io/input/CountingInputStream.java",
                    "full name": "src.java.org.apache.commons.io.input.CountingInputStream.resetCount"
                },
                {
                    "function name": "afterRead",
                    "function params": [
                        "n"
                    ],
                    "file name": "CountingInputStream.java",
                    "file old path": "src/java/org/apache/commons/io/input/CountingInputStream.java",
                    "file new path": "src/java/org/apache/commons/io/input/CountingInputStream.java",
                    "full name": "src.java.org.apache.commons.io.input.CountingInputStream.afterRead"
                },
                {
                    "function name": "beforeWrite",
                    "function params": [
                        "n"
                    ],
                    "file name": "CountingOutputStream.java",
                    "file old path": "src/java/org/apache/commons/io/output/CountingOutputStream.java",
                    "file new path": "src/java/org/apache/commons/io/output/CountingOutputStream.java",
                    "full name": "src.java.org.apache.commons.io.output.CountingOutputStream.beforeWrite"
                },
                {
                    "function name": "getCount",
                    "function params": [],
                    "file name": "CountingOutputStream.java",
                    "file old path": "src/java/org/apache/commons/io/output/CountingOutputStream.java",
                    "file new path": "src/java/org/apache/commons/io/output/CountingOutputStream.java",
                    "full name": "src.java.org.apache.commons.io.output.CountingOutputStream.getCount"
                },
                {
                    "function name": "resetCount",
                    "function params": [],
                    "file name": "CountingOutputStream.java",
                    "file old path": "src/java/org/apache/commons/io/output/CountingOutputStream.java",
                    "file new path": "src/java/org/apache/commons/io/output/CountingOutputStream.java",
                    "full name": "src.java.org.apache.commons.io.output.CountingOutputStream.resetCount"
                }
            ],
            "files that changed": [
                "src/java/org/apache/commons/io/input/CountingInputStream.java",
                "src/java/org/apache/commons/io/output/CountingOutputStream.java"
            ]
        },
        {
            "bug index": "264",
            "bug id": "IO-2",
            "hexsha": "742c51feeaf75542ab9db6782ad3d2ad506fb871",
            "fix_hash": "7fd0d3d22f83789ad0203394158320bd8ff4066e",
            "description": "Hi,\n\n(sorry to assign it to the wrong component, but I cannot choose for IO)\n\nwhen I try to concat 2 paths with \"\\\" as path separator instead of \"/\", an\nexception is thrown. I'll upload a patch for this as well as a junit test.\n\ne.g.: FilenameUtils.catPath(\"C:\\\\temp\\\\\", \"test\") throws an exception ...\n\nMaarten",
            "commit number version hash": 443,
            "commit number": 700,
            "function that changed": [],
            "files that changed": [
                "src/java/org/apache/commons/io/IOUtils.java"
            ]
        },
        {
            "bug index": "265",
            "bug id": "IO-2",
            "hexsha": "742c51feeaf75542ab9db6782ad3d2ad506fb871",
            "fix_hash": "724d798408a98141d537976a6c924ed8f5501fce",
            "description": "Hi,\n\n(sorry to assign it to the wrong component, but I cannot choose for IO)\n\nwhen I try to concat 2 paths with \"\\\" as path separator instead of \"/\", an\nexception is thrown. I'll upload a patch for this as well as a junit test.\n\ne.g.: FilenameUtils.catPath(\"C:\\\\temp\\\\\", \"test\") throws an exception ...\n\nMaarten",
            "commit number version hash": 443,
            "commit number": 690,
            "function that changed": [],
            "files that changed": [
                "src/java/org/apache/commons/io/DirectoryWalker.java",
                "src/java/org/apache/commons/io/FileSystemUtils.java",
                "src/java/org/apache/commons/io/FileUtils.java",
                "src/java/org/apache/commons/io/FilenameUtils.java",
                "src/java/org/apache/commons/io/IOCase.java",
                "src/java/org/apache/commons/io/IOUtils.java",
                "src/java/org/apache/commons/io/comparator/AbstractFileComparator.java",
                "src/java/org/apache/commons/io/filefilter/FileFilterUtils.java",
                "src/java/org/apache/commons/io/filefilter/MagicNumberFileFilter.java",
                "src/java/org/apache/commons/io/input/AutoCloseInputStream.java",
                "src/java/org/apache/commons/io/input/CountingInputStream.java",
                "src/java/org/apache/commons/io/input/ProxyReader.java",
                "src/java/org/apache/commons/io/monitor/FilesystemEntry.java",
                "src/java/org/apache/commons/io/output/ByteArrayOutputStream.java",
                "src/java/org/apache/commons/io/output/CountingOutputStream.java",
                "src/java/org/apache/commons/io/output/NullWriter.java",
                "src/java/org/apache/commons/io/output/ProxyWriter.java",
                "src/java/org/apache/commons/io/output/StringBuilderWriter.java"
            ]
        },
        {
            "bug index": "266",
            "bug id": "IO-161",
            "hexsha": "01afc9d7d01e802ee3a0d91ff47c75041cff0cfe",
            "fix_hash": "cc70c4c1647072de7b97af67b6e8351c2d360624",
            "description": "The following code in FileCleaningTrackerTestCase never exits, hanging the whole compilation/testing process:\n\n    private void waitUntilTrackCount() {\n        while (theInstance.getTrackCount() != 0) {\n            int total = 0;\n            while (theInstance.getTrackCount() != 0) {\n                byte[] b = new byte[1024 * 1024];\n                b[0] = (byte) System.currentTimeMillis();\n                total = total + b[0];\n                System.gc();\n            }\n        }\n    }\n\nIt is clear that in theory this code might loop forever, as the allocation of the byte arrays might never unleash a garbage collection complete enough to deallocate all marker objects, so to bring the track count to zero. Believe me, it's not only theory :).",
            "commit number version hash": 717,
            "commit number": 676,
            "function that changed": [
                {
                    "function name": "waitUntilTrackCount",
                    "function params": [],
                    "file name": "FileCleaningTrackerTestCase.java",
                    "file old path": "src/test/org/apache/commons/io/FileCleaningTrackerTestCase.java",
                    "file new path": "src/test/org/apache/commons/io/FileCleaningTrackerTestCase.java",
                    "full name": "src.test.org.apache.commons.io.FileCleaningTrackerTestCase.waitUntilTrackCount"
                }
            ],
            "files that changed": [
                "src/test/org/apache/commons/io/FileCleaningTrackerTestCase.java"
            ]
        },
        {
            "bug index": "267",
            "bug id": "IO-209",
            "hexsha": "01afc9d7d01e802ee3a0d91ff47c75041cff0cfe",
            "fix_hash": "a360f974003c5c60c16d019e873314c09d965107",
            "description": "FileSystemUtils.freeSpaceKb fails to return correct result for a NTFS mount point or junction.\n\nSuppose I have a NTFS partition mounted at C:\\Data\\partition1.\n\nNow assume that the free space on Partition mounted as C: is 1GB and that mounted on \"C:\\Data\\partition1\" is 2GB. A call to FileSystemUtils.freeSpaceKb(\"C:\\Data\\partition1\") will return the free space on C: and not on \"C:\\Data\\partition1\".\n\nThis is because while running the \"dir /-c\" with the given path, the code just retains first 2 chars i.e. for any path under \"C:\\blah\\de\\blah\", \"dir /-c\" will be called with \"C:\" which will return incorrect result.",
            "commit number version hash": 717,
            "commit number": 674,
            "function that changed": [
                {
                    "function name": "freeSpaceWindows",
                    "function params": [
                        "path",
                        "timeout"
                    ],
                    "file name": "FileSystemUtils.java",
                    "file old path": "src/java/org/apache/commons/io/FileSystemUtils.java",
                    "file new path": "src/java/org/apache/commons/io/FileSystemUtils.java",
                    "full name": "src.java.org.apache.commons.io.FileSystemUtils.freeSpaceWindows"
                }
            ],
            "files that changed": [
                "src/java/org/apache/commons/io/FileSystemUtils.java"
            ]
        },
        {
            "bug index": "268",
            "bug id": "IO-196",
            "hexsha": "01afc9d7d01e802ee3a0d91ff47c75041cff0cfe",
            "fix_hash": "f34187ec9f43d416d4059bb3414476f960be87f2",
            "description": "The FilesystemObserverTestCase method testFileCreate() fails occasionally in the Continuum build at http://vmbuild.apache.org/continuum/projectView.action?projectId=155. The failure, when it happens, is:\n\nFilesystemObserverTestCase\n  testFileCreate :\n junit.framework.AssertionFailedError\n junit.framework.AssertionFailedError: E[0 0 0 1 0 0]: No. of directories changed expected:<1> but was:<0>\n       at junit.framework.Assert.fail(Assert.java:47)\n       at junit.framework.Assert.failNotEquals(Assert.java:282)\n       at junit.framework.Assert.assertEquals(Assert.java:64)\n       at junit.framework.Assert.assertEquals(Assert.java:201)\n       at org.apache.commons.io.monitor.FilesystemObserverTestCase.checkCollectionSizes(FilesystemObserverTestCase.java:424)\n       at org.apache.commons.io.monitor.FilesystemObserverTestCase.testFileCreate(FilesystemObserverTestCase.java:203)\n\n",
            "commit number version hash": 717,
            "commit number": 672,
            "function that changed": [
                {
                    "function name": "testObserveSingleFile",
                    "function params": [],
                    "file name": "FilesystemObserverTestCase.java",
                    "file old path": "src/test/org/apache/commons/io/monitor/FilesystemObserverTestCase.java",
                    "file new path": "src/test/org/apache/commons/io/monitor/FilesystemObserverTestCase.java",
                    "full name": "src.test.org.apache.commons.io.monitor.FilesystemObserverTestCase.testObserveSingleFile"
                },
                {
                    "function name": "setUp",
                    "function params": [],
                    "file name": "FilesystemObserverTestCase.java",
                    "file old path": "src/test/org/apache/commons/io/monitor/FilesystemObserverTestCase.java",
                    "file new path": "src/test/org/apache/commons/io/monitor/FilesystemObserverTestCase.java",
                    "full name": "src.test.org.apache.commons.io.monitor.FilesystemObserverTestCase.setUp"
                },
                {
                    "function name": "testDirectory",
                    "function params": [],
                    "file name": "FilesystemObserverTestCase.java",
                    "file old path": "src/test/org/apache/commons/io/monitor/FilesystemObserverTestCase.java",
                    "file new path": "src/test/org/apache/commons/io/monitor/FilesystemObserverTestCase.java",
                    "full name": "src.test.org.apache.commons.io.monitor.FilesystemObserverTestCase.testDirectory"
                },
                {
                    "function name": "checkFileCounts",
                    "function params": [
                        "label",
                        "fileCreate",
                        "fileChange",
                        "fileDelete"
                    ],
                    "file name": "FilesystemObserverTestCase.java",
                    "file old path": "src/test/org/apache/commons/io/monitor/FilesystemObserverTestCase.java",
                    "file new path": "src/test/org/apache/commons/io/monitor/FilesystemObserverTestCase.java",
                    "full name": "src.test.org.apache.commons.io.monitor.FilesystemObserverTestCase.checkFileCounts"
                },
                {
                    "function name": "testFileDelete",
                    "function params": [],
                    "file name": "FilesystemObserverTestCase.java",
                    "file old path": "src/test/org/apache/commons/io/monitor/FilesystemObserverTestCase.java",
                    "file new path": "src/test/org/apache/commons/io/monitor/FilesystemObserverTestCase.java",
                    "full name": "src.test.org.apache.commons.io.monitor.FilesystemObserverTestCase.testFileDelete"
                },
                {
                    "function name": "testFileCreate",
                    "function params": [],
                    "file name": "FilesystemObserverTestCase.java",
                    "file old path": "src/test/org/apache/commons/io/monitor/FilesystemObserverTestCase.java",
                    "file new path": "src/test/org/apache/commons/io/monitor/FilesystemObserverTestCase.java",
                    "full name": "src.test.org.apache.commons.io.monitor.FilesystemObserverTestCase.testFileCreate"
                },
                {
                    "function name": "checkCollectionsEmpty",
                    "function params": [
                        "label"
                    ],
                    "file name": "FilesystemObserverTestCase.java",
                    "file old path": "src/test/org/apache/commons/io/monitor/FilesystemObserverTestCase.java",
                    "file new path": "src/test/org/apache/commons/io/monitor/FilesystemObserverTestCase.java",
                    "full name": "src.test.org.apache.commons.io.monitor.FilesystemObserverTestCase.checkCollectionsEmpty"
                },
                {
                    "function name": "checkDirectoryCounts",
                    "function params": [
                        "label",
                        "dirCreate",
                        "dirChange",
                        "dirDelete"
                    ],
                    "file name": "FilesystemObserverTestCase.java",
                    "file old path": "src/test/org/apache/commons/io/monitor/FilesystemObserverTestCase.java",
                    "file new path": "src/test/org/apache/commons/io/monitor/FilesystemObserverTestCase.java",
                    "full name": "src.test.org.apache.commons.io.monitor.FilesystemObserverTestCase.checkDirectoryCounts"
                },
                {
                    "function name": "testFileUpdate",
                    "function params": [],
                    "file name": "FilesystemObserverTestCase.java",
                    "file old path": "src/test/org/apache/commons/io/monitor/FilesystemObserverTestCase.java",
                    "file new path": "src/test/org/apache/commons/io/monitor/FilesystemObserverTestCase.java",
                    "full name": "src.test.org.apache.commons.io.monitor.FilesystemObserverTestCase.testFileUpdate"
                }
            ],
            "files that changed": [
                "src/test/org/apache/commons/io/monitor/FilesystemObserverTestCase.java"
            ]
        },
        {
            "bug index": "269",
            "bug id": "IO-209",
            "hexsha": "01afc9d7d01e802ee3a0d91ff47c75041cff0cfe",
            "fix_hash": "a8d59e345210ca6fd3fc426ab7fb7b3c2563cb04",
            "description": "FileSystemUtils.freeSpaceKb fails to return correct result for a NTFS mount point or junction.\n\nSuppose I have a NTFS partition mounted at C:\\Data\\partition1.\n\nNow assume that the free space on Partition mounted as C: is 1GB and that mounted on \"C:\\Data\\partition1\" is 2GB. A call to FileSystemUtils.freeSpaceKb(\"C:\\Data\\partition1\") will return the free space on C: and not on \"C:\\Data\\partition1\".\n\nThis is because while running the \"dir /-c\" with the given path, the code just retains first 2 chars i.e. for any path under \"C:\\blah\\de\\blah\", \"dir /-c\" will be called with \"C:\" which will return incorrect result.",
            "commit number version hash": 717,
            "commit number": 668,
            "function that changed": [
                {
                    "function name": "freeSpaceWindows",
                    "function params": [
                        "path",
                        "timeout"
                    ],
                    "file name": "FileSystemUtils.java",
                    "file old path": "src/java/org/apache/commons/io/FileSystemUtils.java",
                    "file new path": "src/java/org/apache/commons/io/FileSystemUtils.java",
                    "full name": "src.java.org.apache.commons.io.FileSystemUtils.freeSpaceWindows"
                },
                {
                    "function name": "testGetFreeSpaceWindows_String_NormalResponse",
                    "function params": [],
                    "file name": "FileSystemUtilsTestCase.java",
                    "file old path": "src/test/org/apache/commons/io/FileSystemUtilsTestCase.java",
                    "file new path": "src/test/org/apache/commons/io/FileSystemUtilsTestCase.java",
                    "full name": "src.test.org.apache.commons.io.FileSystemUtilsTestCase.testGetFreeSpaceWindows_String_NormalResponse"
                },
                {
                    "function name": "testGetFreeSpaceWindows_String_StripDrive",
                    "function params": [],
                    "file name": "FileSystemUtilsTestCase.java",
                    "file old path": "src/test/org/apache/commons/io/FileSystemUtilsTestCase.java",
                    "file new path": "src/test/org/apache/commons/io/FileSystemUtilsTestCase.java",
                    "full name": "src.test.org.apache.commons.io.FileSystemUtilsTestCase.testGetFreeSpaceWindows_String_StripDrive"
                },
                {
                    "function name": "testGetFreeSpaceWindows_String_quoted",
                    "function params": [],
                    "file name": "FileSystemUtilsTestCase.java",
                    "file old path": "src/test/org/apache/commons/io/FileSystemUtilsTestCase.java",
                    "file new path": "src/test/org/apache/commons/io/FileSystemUtilsTestCase.java",
                    "full name": "src.test.org.apache.commons.io.FileSystemUtilsTestCase.testGetFreeSpaceWindows_String_quoted"
                }
            ],
            "files that changed": [
                "src/java/org/apache/commons/io/FileSystemUtils.java",
                "src/test/org/apache/commons/io/FileSystemUtilsTestCase.java"
            ]
        },
        {
            "bug index": "270",
            "bug id": "IO-248",
            "hexsha": "01afc9d7d01e802ee3a0d91ff47c75041cff0cfe",
            "fix_hash": "9e612272b0f2ae0f3fb0e2163fdcc918bc6731a4",
            "description": "the getFullPathNoEndSeparator method in FilenameUtils.java (Revision 736890) \nif filename=\"/\" return \"/\" <<==right\nif filename=\"/abc\" return empty <<==bug\nif filename=\"/abc/xyz\" return \"/abc\" <<==right \n\n\n{code}\n885 \tint index = indexOfLastSeparator(filename);\n886 \tif (index < 0) {\n887 \t\treturn filename.substring(0, prefix);\n888 \t}\n889 \tint end = index + (includeSeparator ? 1 : 0);\n================\n                if(end==0) return \"/\";\n>>>>>>>>>>>>>>>>\n890 \treturn filename.substring(0, end);\n{code}",
            "commit number version hash": 717,
            "commit number": 666,
            "function that changed": [
                {
                    "function name": "doGetFullPath",
                    "function params": [
                        "filename",
                        "includeSeparator"
                    ],
                    "file name": "FilenameUtils.java",
                    "file old path": "src/java/org/apache/commons/io/FilenameUtils.java",
                    "file new path": "src/java/org/apache/commons/io/FilenameUtils.java",
                    "full name": "src.java.org.apache.commons.io.FilenameUtils.doGetFullPath"
                },
                {
                    "function name": "testGetFullPathNoEndSeparator_IO_248",
                    "function params": [],
                    "file name": "FilenameUtilsTestCase.java",
                    "file old path": "src/test/org/apache/commons/io/FilenameUtilsTestCase.java",
                    "file new path": "src/test/org/apache/commons/io/FilenameUtilsTestCase.java",
                    "full name": "src.test.org.apache.commons.io.FilenameUtilsTestCase.testGetFullPathNoEndSeparator_IO_248"
                }
            ],
            "files that changed": [
                "src/java/org/apache/commons/io/FilenameUtils.java",
                "src/test/org/apache/commons/io/FilenameUtilsTestCase.java"
            ]
        },
        {
            "bug index": "271",
            "bug id": "IO-190",
            "hexsha": "01afc9d7d01e802ee3a0d91ff47c75041cff0cfe",
            "fix_hash": "e295faec880b136d5c19d4164c17d768d7037af7",
            "description": "When using FileUtils.copyDirectory to copy directories with subdirectories, the source will overwrite all files that exist in the destination directory, but not the subdirectories themselves. The files inside the subdirectories will be overwritten. The only difference that I've noticed thus far is that this preserves the old file dates of the subdirectories rather than using the dates from the source or the current date, if preserveFileDate is set to 'false.'",
            "commit number version hash": 717,
            "commit number": 662,
            "function that changed": [
                {
                    "function name": "doCopyDirectory",
                    "function params": [
                        "srcDir",
                        "destDir",
                        "filter",
                        "preserveFileDate",
                        "exclusionList"
                    ],
                    "file name": "FileUtils.java",
                    "file old path": "src/java/org/apache/commons/io/FileUtils.java",
                    "file new path": "src/java/org/apache/commons/io/FileUtils.java",
                    "full name": "src.java.org.apache.commons.io.FileUtils.doCopyDirectory"
                },
                {
                    "function name": "testCopyDirectoryPreserveDates",
                    "function params": [],
                    "file name": "FileUtilsTestCase.java",
                    "file old path": "src/test/org/apache/commons/io/FileUtilsTestCase.java",
                    "file new path": "src/test/org/apache/commons/io/FileUtilsTestCase.java",
                    "full name": "src.test.org.apache.commons.io.FileUtilsTestCase.testCopyDirectoryPreserveDates"
                }
            ],
            "files that changed": [
                "src/java/org/apache/commons/io/FileUtils.java",
                "src/test/org/apache/commons/io/FileUtilsTestCase.java"
            ]
        },
        {
            "bug index": "272",
            "bug id": "IO-185",
            "hexsha": "01afc9d7d01e802ee3a0d91ff47c75041cff0cfe",
            "fix_hash": "a8e9eef627d00022fe6a6bbda64a9478c6b89dab",
            "description": "Hi,\n\nin my Application I have the problem that FileSystemUtils.freeSpaceWindows works properly for hours and then the function call blocks and does not return anymore. Any Ideas? Thanks.\n\nThe stacktrace:\n-------------\n\"Thread-16\" daemon prio=5 tid=33 RUNNABLE\n    java.io.FileInputStream.readBytes(Native Method)\n    java.io.FileInputStream.read(Unknown Source)\n    java.io.BufferedInputStream.read1(Unknown Source)\n    java.io.BufferedInputStream.read(Unknown Source)\n    sun.nio.cs.StreamDecoder.readBytes(Unknown Source)\n    sun.nio.cs.StreamDecoder.implRead(Unknown Source)\n    sun.nio.cs.StreamDecoder.read(Unknown Source)\n    java.io.InputStreamReader.read(Unknown Source)\n    java.io.BufferedReader.fill(Unknown Source)\n    java.io.BufferedReader.readLine(Unknown Source)\n    java.io.BufferedReader.readLine(Unknown Source)\n    org.apache.commons.io.FileSystemUtils.performCommand(FileSystemUtils.java:413)\n    org.apache.commons.io.FileSystemUtils.freeSpaceWindows(FileSystemUtils.java:225)\n    org.apache.commons.io.FileSystemUtils.freeSpaceOS(FileSystemUtils.java:194)\n    org.apache.commons.io.FileSystemUtils.freeSpaceKb(FileSystemUtils.java:166)\n-------------\n\nRegards,\nMartin",
            "commit number version hash": 717,
            "commit number": 661,
            "function that changed": [
                {
                    "function name": "testGetFreeSpaceUnix_String_EmptyResponse",
                    "function params": [],
                    "file name": "FileSystemUtilsTestCase.java",
                    "file old path": "src/test/org/apache/commons/io/FileSystemUtilsTestCase.java",
                    "file new path": "src/test/org/apache/commons/io/FileSystemUtilsTestCase.java",
                    "full name": "src.test.org.apache.commons.io.FileSystemUtilsTestCase.testGetFreeSpaceUnix_String_EmptyResponse"
                },
                {
                    "function name": "testGetFreeSpaceWindows_String_EmptyResponse",
                    "function params": [],
                    "file name": "FileSystemUtilsTestCase.java",
                    "file old path": "src/test/org/apache/commons/io/FileSystemUtilsTestCase.java",
                    "file new path": "src/test/org/apache/commons/io/FileSystemUtilsTestCase.java",
                    "full name": "src.test.org.apache.commons.io.FileSystemUtilsTestCase.testGetFreeSpaceWindows_String_EmptyResponse"
                },
                {
                    "function name": "testGetFreeSpaceOS_String_Other",
                    "function params": [],
                    "file name": "FileSystemUtilsTestCase.java",
                    "file old path": "src/test/org/apache/commons/io/FileSystemUtilsTestCase.java",
                    "file new path": "src/test/org/apache/commons/io/FileSystemUtilsTestCase.java",
                    "full name": "src.test.org.apache.commons.io.FileSystemUtilsTestCase.testGetFreeSpaceOS_String_Other"
                },
                {
                    "function name": "testGetFreeSpaceUnix_String_LongResponseKb",
                    "function params": [],
                    "file name": "FileSystemUtilsTestCase.java",
                    "file old path": "src/test/org/apache/commons/io/FileSystemUtilsTestCase.java",
                    "file new path": "src/test/org/apache/commons/io/FileSystemUtilsTestCase.java",
                    "full name": "src.test.org.apache.commons.io.FileSystemUtilsTestCase.testGetFreeSpaceUnix_String_LongResponseKb"
                },
                {
                    "function name": "testGetFreeSpaceWindows_String_EmptyMultiLineResponse",
                    "function params": [],
                    "file name": "FileSystemUtilsTestCase.java",
                    "file old path": "src/test/org/apache/commons/io/FileSystemUtilsTestCase.java",
                    "file new path": "src/test/org/apache/commons/io/FileSystemUtilsTestCase.java",
                    "full name": "src.test.org.apache.commons.io.FileSystemUtilsTestCase.testGetFreeSpaceWindows_String_EmptyMultiLineResponse"
                },
                {
                    "function name": "testGetFreeSpaceUnix_String_NormalResponseFreeBSD",
                    "function params": [],
                    "file name": "FileSystemUtilsTestCase.java",
                    "file old path": "src/test/org/apache/commons/io/FileSystemUtilsTestCase.java",
                    "file new path": "src/test/org/apache/commons/io/FileSystemUtilsTestCase.java",
                    "full name": "src.test.org.apache.commons.io.FileSystemUtilsTestCase.testGetFreeSpaceUnix_String_NormalResponseFreeBSD"
                },
                {
                    "function name": "testGetFreeSpaceUnix_String_NormalResponseKbSolaris",
                    "function params": [],
                    "file name": "FileSystemUtilsTestCase.java",
                    "file old path": "src/test/org/apache/commons/io/FileSystemUtilsTestCase.java",
                    "file new path": "src/test/org/apache/commons/io/FileSystemUtilsTestCase.java",
                    "full name": "src.test.org.apache.commons.io.FileSystemUtilsTestCase.testGetFreeSpaceUnix_String_NormalResponseKbSolaris"
                },
                {
                    "function name": "testGetFreeSpaceOS_String_Windows",
                    "function params": [],
                    "file name": "FileSystemUtilsTestCase.java",
                    "file old path": "src/test/org/apache/commons/io/FileSystemUtilsTestCase.java",
                    "file new path": "src/test/org/apache/commons/io/FileSystemUtilsTestCase.java",
                    "full name": "src.test.org.apache.commons.io.FileSystemUtilsTestCase.testGetFreeSpaceOS_String_Windows"
                },
                {
                    "function name": "testGetFreeSpaceWindows_String_ParseCommaFormatBytes",
                    "function params": [],
                    "file name": "FileSystemUtilsTestCase.java",
                    "file old path": "src/test/org/apache/commons/io/FileSystemUtilsTestCase.java",
                    "file new path": "src/test/org/apache/commons/io/FileSystemUtilsTestCase.java",
                    "full name": "src.test.org.apache.commons.io.FileSystemUtilsTestCase.testGetFreeSpaceWindows_String_ParseCommaFormatBytes"
                },
                {
                    "function name": "testGetFreeSpaceOS_String_Unix",
                    "function params": [],
                    "file name": "FileSystemUtilsTestCase.java",
                    "file old path": "src/test/org/apache/commons/io/FileSystemUtilsTestCase.java",
                    "file new path": "src/test/org/apache/commons/io/FileSystemUtilsTestCase.java",
                    "full name": "src.test.org.apache.commons.io.FileSystemUtilsTestCase.testGetFreeSpaceOS_String_Unix"
                },
                {
                    "function name": "testGetFreeSpaceOS_String_InitError",
                    "function params": [],
                    "file name": "FileSystemUtilsTestCase.java",
                    "file old path": "src/test/org/apache/commons/io/FileSystemUtilsTestCase.java",
                    "file new path": "src/test/org/apache/commons/io/FileSystemUtilsTestCase.java",
                    "full name": "src.test.org.apache.commons.io.FileSystemUtilsTestCase.testGetFreeSpaceOS_String_InitError"
                },
                {
                    "function name": "testGetFreeSpaceWindows_String_NormalResponse",
                    "function params": [],
                    "file name": "FileSystemUtilsTestCase.java",
                    "file old path": "src/test/org/apache/commons/io/FileSystemUtilsTestCase.java",
                    "file new path": "src/test/org/apache/commons/io/FileSystemUtilsTestCase.java",
                    "full name": "src.test.org.apache.commons.io.FileSystemUtilsTestCase.testGetFreeSpaceWindows_String_NormalResponse"
                },
                {
                    "function name": "testGetFreeSpaceWindows_String_EmptyPath",
                    "function params": [],
                    "file name": "FileSystemUtilsTestCase.java",
                    "file old path": "src/test/org/apache/commons/io/FileSystemUtilsTestCase.java",
                    "file new path": "src/test/org/apache/commons/io/FileSystemUtilsTestCase.java",
                    "full name": "src.test.org.apache.commons.io.FileSystemUtilsTestCase.testGetFreeSpaceWindows_String_EmptyPath"
                },
                {
                    "function name": "testGetFreeSpaceUnix_String_InvalidResponse1",
                    "function params": [],
                    "file name": "FileSystemUtilsTestCase.java",
                    "file old path": "src/test/org/apache/commons/io/FileSystemUtilsTestCase.java",
                    "file new path": "src/test/org/apache/commons/io/FileSystemUtilsTestCase.java",
                    "full name": "src.test.org.apache.commons.io.FileSystemUtilsTestCase.testGetFreeSpaceUnix_String_InvalidResponse1"
                },
                {
                    "function name": "testGetFreeSpaceOS_String_NullPath",
                    "function params": [],
                    "file name": "FileSystemUtilsTestCase.java",
                    "file old path": "src/test/org/apache/commons/io/FileSystemUtilsTestCase.java",
                    "file new path": "src/test/org/apache/commons/io/FileSystemUtilsTestCase.java",
                    "full name": "src.test.org.apache.commons.io.FileSystemUtilsTestCase.testGetFreeSpaceOS_String_NullPath"
                },
                {
                    "function name": "testGetFreeSpaceUnix_String_InvalidResponse3",
                    "function params": [],
                    "file name": "FileSystemUtilsTestCase.java",
                    "file old path": "src/test/org/apache/commons/io/FileSystemUtilsTestCase.java",
                    "file new path": "src/test/org/apache/commons/io/FileSystemUtilsTestCase.java",
                    "full name": "src.test.org.apache.commons.io.FileSystemUtilsTestCase.testGetFreeSpaceUnix_String_InvalidResponse3"
                },
                {
                    "function name": "testGetFreeSpaceUnix_String_NormalResponseKbFreeBSD",
                    "function params": [],
                    "file name": "FileSystemUtilsTestCase.java",
                    "file old path": "src/test/org/apache/commons/io/FileSystemUtilsTestCase.java",
                    "file new path": "src/test/org/apache/commons/io/FileSystemUtilsTestCase.java",
                    "full name": "src.test.org.apache.commons.io.FileSystemUtilsTestCase.testGetFreeSpaceUnix_String_NormalResponseKbFreeBSD"
                },
                {
                    "function name": "testGetFreeSpaceUnix_String_NormalResponseLinux",
                    "function params": [],
                    "file name": "FileSystemUtilsTestCase.java",
                    "file old path": "src/test/org/apache/commons/io/FileSystemUtilsTestCase.java",
                    "file new path": "src/test/org/apache/commons/io/FileSystemUtilsTestCase.java",
                    "full name": "src.test.org.apache.commons.io.FileSystemUtilsTestCase.testGetFreeSpaceUnix_String_NormalResponseLinux"
                },
                {
                    "function name": "testGetFreeSpaceUnix_String_NormalResponseKbLinux",
                    "function params": [],
                    "file name": "FileSystemUtilsTestCase.java",
                    "file old path": "src/test/org/apache/commons/io/FileSystemUtilsTestCase.java",
                    "file new path": "src/test/org/apache/commons/io/FileSystemUtilsTestCase.java",
                    "full name": "src.test.org.apache.commons.io.FileSystemUtilsTestCase.testGetFreeSpaceUnix_String_NormalResponseKbLinux"
                },
                {
                    "function name": "testGetFreeSpaceUnix_String_InvalidResponse4",
                    "function params": [],
                    "file name": "FileSystemUtilsTestCase.java",
                    "file old path": "src/test/org/apache/commons/io/FileSystemUtilsTestCase.java",
                    "file new path": "src/test/org/apache/commons/io/FileSystemUtilsTestCase.java",
                    "full name": "src.test.org.apache.commons.io.FileSystemUtilsTestCase.testGetFreeSpaceUnix_String_InvalidResponse4"
                },
                {
                    "function name": "testGetFreeSpaceUnix_String_InvalidResponse2",
                    "function params": [],
                    "file name": "FileSystemUtilsTestCase.java",
                    "file old path": "src/test/org/apache/commons/io/FileSystemUtilsTestCase.java",
                    "file new path": "src/test/org/apache/commons/io/FileSystemUtilsTestCase.java",
                    "full name": "src.test.org.apache.commons.io.FileSystemUtilsTestCase.testGetFreeSpaceUnix_String_InvalidResponse2"
                },
                {
                    "function name": "testGetFreeSpaceUnix_String_EmptyPath",
                    "function params": [],
                    "file name": "FileSystemUtilsTestCase.java",
                    "file old path": "src/test/org/apache/commons/io/FileSystemUtilsTestCase.java",
                    "file new path": "src/test/org/apache/commons/io/FileSystemUtilsTestCase.java",
                    "full name": "src.test.org.apache.commons.io.FileSystemUtilsTestCase.testGetFreeSpaceUnix_String_EmptyPath"
                },
                {
                    "function name": "testGetFreeSpaceUnix_String_LongResponse",
                    "function params": [],
                    "file name": "FileSystemUtilsTestCase.java",
                    "file old path": "src/test/org/apache/commons/io/FileSystemUtilsTestCase.java",
                    "file new path": "src/test/org/apache/commons/io/FileSystemUtilsTestCase.java",
                    "full name": "src.test.org.apache.commons.io.FileSystemUtilsTestCase.testGetFreeSpaceUnix_String_LongResponse"
                },
                {
                    "function name": "testGetFreeSpaceWindows_String_NoSuchDirectoryResponse",
                    "function params": [],
                    "file name": "FileSystemUtilsTestCase.java",
                    "file old path": "src/test/org/apache/commons/io/FileSystemUtilsTestCase.java",
                    "file new path": "src/test/org/apache/commons/io/FileSystemUtilsTestCase.java",
                    "full name": "src.test.org.apache.commons.io.FileSystemUtilsTestCase.testGetFreeSpaceWindows_String_NoSuchDirectoryResponse"
                },
                {
                    "function name": "testGetFreeSpaceWindows_String_StripDrive",
                    "function params": [],
                    "file name": "FileSystemUtilsTestCase.java",
                    "file old path": "src/test/org/apache/commons/io/FileSystemUtilsTestCase.java",
                    "file new path": "src/test/org/apache/commons/io/FileSystemUtilsTestCase.java",
                    "full name": "src.test.org.apache.commons.io.FileSystemUtilsTestCase.testGetFreeSpaceWindows_String_StripDrive"
                },
                {
                    "function name": "testGetFreeSpaceWindows_String_InvalidTextResponse",
                    "function params": [],
                    "file name": "FileSystemUtilsTestCase.java",
                    "file old path": "src/test/org/apache/commons/io/FileSystemUtilsTestCase.java",
                    "file new path": "src/test/org/apache/commons/io/FileSystemUtilsTestCase.java",
                    "full name": "src.test.org.apache.commons.io.FileSystemUtilsTestCase.testGetFreeSpaceWindows_String_InvalidTextResponse"
                }
            ],
            "files that changed": [
                "src/test/org/apache/commons/io/FileSystemUtilsTestCase.java"
            ]
        },
        {
            "bug index": "273",
            "bug id": "IO-214",
            "hexsha": "01afc9d7d01e802ee3a0d91ff47c75041cff0cfe",
            "fix_hash": "55a86c21c2960a53118edfb23d1654fbfcf6b994",
            "description": "The field ByteArrayOutputStream.count is always accessed in a synchronised block, apart from when the user calls toBufferedInputStream().\n\nThis seems wrong.\n\nSimilarly for the count field in CountingOutputStream.beforeWrite(int n)",
            "commit number version hash": 717,
            "commit number": 660,
            "function that changed": [
                {
                    "function name": "ByteArrayOutputStream",
                    "function params": [
                        "size"
                    ],
                    "file name": "ByteArrayOutputStream.java",
                    "file old path": "src/java/org/apache/commons/io/output/ByteArrayOutputStream.java",
                    "file new path": "src/java/org/apache/commons/io/output/ByteArrayOutputStream.java",
                    "full name": "src.java.org.apache.commons.io.output.ByteArrayOutputStream.ByteArrayOutputStream"
                }
            ],
            "files that changed": [
                "src/java/org/apache/commons/io/output/ByteArrayOutputStream.java"
            ]
        },
        {
            "bug index": "274",
            "bug id": "IO-185",
            "hexsha": "01afc9d7d01e802ee3a0d91ff47c75041cff0cfe",
            "fix_hash": "ab42367cc639fa3b18786d13afdc17a3394f229f",
            "description": "Hi,\n\nin my Application I have the problem that FileSystemUtils.freeSpaceWindows works properly for hours and then the function call blocks and does not return anymore. Any Ideas? Thanks.\n\nThe stacktrace:\n-------------\n\"Thread-16\" daemon prio=5 tid=33 RUNNABLE\n    java.io.FileInputStream.readBytes(Native Method)\n    java.io.FileInputStream.read(Unknown Source)\n    java.io.BufferedInputStream.read1(Unknown Source)\n    java.io.BufferedInputStream.read(Unknown Source)\n    sun.nio.cs.StreamDecoder.readBytes(Unknown Source)\n    sun.nio.cs.StreamDecoder.implRead(Unknown Source)\n    sun.nio.cs.StreamDecoder.read(Unknown Source)\n    java.io.InputStreamReader.read(Unknown Source)\n    java.io.BufferedReader.fill(Unknown Source)\n    java.io.BufferedReader.readLine(Unknown Source)\n    java.io.BufferedReader.readLine(Unknown Source)\n    org.apache.commons.io.FileSystemUtils.performCommand(FileSystemUtils.java:413)\n    org.apache.commons.io.FileSystemUtils.freeSpaceWindows(FileSystemUtils.java:225)\n    org.apache.commons.io.FileSystemUtils.freeSpaceOS(FileSystemUtils.java:194)\n    org.apache.commons.io.FileSystemUtils.freeSpaceKb(FileSystemUtils.java:166)\n-------------\n\nRegards,\nMartin",
            "commit number version hash": 717,
            "commit number": 658,
            "function that changed": [
                {
                    "function name": "freeSpaceUnix",
                    "function params": [
                        "path",
                        "kb",
                        "posix",
                        "timeout"
                    ],
                    "file name": "FileSystemUtils.java",
                    "file old path": "src/java/org/apache/commons/io/FileSystemUtils.java",
                    "file new path": "src/java/org/apache/commons/io/FileSystemUtils.java",
                    "full name": "src.java.org.apache.commons.io.FileSystemUtils.freeSpaceUnix"
                },
                {
                    "function name": "freeSpaceOS",
                    "function params": [
                        "path",
                        "os",
                        "kb",
                        "timeout"
                    ],
                    "file name": "FileSystemUtils.java",
                    "file old path": "src/java/org/apache/commons/io/FileSystemUtils.java",
                    "file new path": "src/java/org/apache/commons/io/FileSystemUtils.java",
                    "full name": "src.java.org.apache.commons.io.FileSystemUtils.freeSpaceOS"
                },
                {
                    "function name": "freeSpaceWindows",
                    "function params": [
                        "path",
                        "timeout"
                    ],
                    "file name": "FileSystemUtils.java",
                    "file old path": "src/java/org/apache/commons/io/FileSystemUtils.java",
                    "file new path": "src/java/org/apache/commons/io/FileSystemUtils.java",
                    "full name": "src.java.org.apache.commons.io.FileSystemUtils.freeSpaceWindows"
                },
                {
                    "function name": "performCommand",
                    "function params": [
                        "cmdAttribs",
                        "max",
                        "timeout"
                    ],
                    "file name": "FileSystemUtils.java",
                    "file old path": "src/java/org/apache/commons/io/FileSystemUtils.java",
                    "file new path": "src/java/org/apache/commons/io/FileSystemUtils.java",
                    "full name": "src.java.org.apache.commons.io.FileSystemUtils.performCommand"
                },
                {
                    "function name": "freeSpaceKb",
                    "function params": [
                        "path"
                    ],
                    "file name": "FileSystemUtils.java",
                    "file old path": "src/java/org/apache/commons/io/FileSystemUtils.java",
                    "file new path": "src/java/org/apache/commons/io/FileSystemUtils.java",
                    "full name": "src.java.org.apache.commons.io.FileSystemUtils.freeSpaceKb"
                },
                {
                    "function name": "freeSpaceWindows",
                    "function params": [
                        "path"
                    ],
                    "file name": "FileSystemUtils.java",
                    "file old path": "src/java/org/apache/commons/io/FileSystemUtils.java",
                    "file new path": "src/java/org/apache/commons/io/FileSystemUtils.java",
                    "full name": "src.java.org.apache.commons.io.FileSystemUtils.freeSpaceWindows"
                },
                {
                    "function name": "freeSpaceKb",
                    "function params": [],
                    "file name": "FileSystemUtils.java",
                    "file old path": "src/java/org/apache/commons/io/FileSystemUtils.java",
                    "file new path": "src/java/org/apache/commons/io/FileSystemUtils.java",
                    "full name": "src.java.org.apache.commons.io.FileSystemUtils.freeSpaceKb"
                },
                {
                    "function name": "freeSpaceUnix",
                    "function params": [
                        "path",
                        "kb",
                        "posix"
                    ],
                    "file name": "FileSystemUtils.java",
                    "file old path": "src/java/org/apache/commons/io/FileSystemUtils.java",
                    "file new path": "src/java/org/apache/commons/io/FileSystemUtils.java",
                    "full name": "src.java.org.apache.commons.io.FileSystemUtils.freeSpaceUnix"
                },
                {
                    "function name": "freeSpaceKb",
                    "function params": [
                        "timeout"
                    ],
                    "file name": "FileSystemUtils.java",
                    "file old path": "src/java/org/apache/commons/io/FileSystemUtils.java",
                    "file new path": "src/java/org/apache/commons/io/FileSystemUtils.java",
                    "full name": "src.java.org.apache.commons.io.FileSystemUtils.freeSpaceKb"
                },
                {
                    "function name": "freeSpace",
                    "function params": [
                        "path"
                    ],
                    "file name": "FileSystemUtils.java",
                    "file old path": "src/java/org/apache/commons/io/FileSystemUtils.java",
                    "file new path": "src/java/org/apache/commons/io/FileSystemUtils.java",
                    "full name": "src.java.org.apache.commons.io.FileSystemUtils.freeSpace"
                },
                {
                    "function name": "freeSpaceOS",
                    "function params": [
                        "path",
                        "os",
                        "kb"
                    ],
                    "file name": "FileSystemUtils.java",
                    "file old path": "src/java/org/apache/commons/io/FileSystemUtils.java",
                    "file new path": "src/java/org/apache/commons/io/FileSystemUtils.java",
                    "full name": "src.java.org.apache.commons.io.FileSystemUtils.freeSpaceOS"
                },
                {
                    "function name": "performCommand",
                    "function params": [
                        "cmdAttribs",
                        "max"
                    ],
                    "file name": "FileSystemUtils.java",
                    "file old path": "src/java/org/apache/commons/io/FileSystemUtils.java",
                    "file new path": "src/java/org/apache/commons/io/FileSystemUtils.java",
                    "full name": "src.java.org.apache.commons.io.FileSystemUtils.performCommand"
                },
                {
                    "function name": "freeSpaceKb",
                    "function params": [
                        "path",
                        "timeout"
                    ],
                    "file name": "FileSystemUtils.java",
                    "file old path": "src/java/org/apache/commons/io/FileSystemUtils.java",
                    "file new path": "src/java/org/apache/commons/io/FileSystemUtils.java",
                    "full name": "src.java.org.apache.commons.io.FileSystemUtils.freeSpaceKb"
                },
                {
                    "function name": "run",
                    "function params": [],
                    "file name": "ThreadMonitor.java",
                    "file old path": null,
                    "file new path": "src/java/org/apache/commons/io/ThreadMonitor.java",
                    "full name": "src.java.org.apache.commons.io.ThreadMonitor.run"
                },
                {
                    "function name": "start",
                    "function params": [
                        "timeout"
                    ],
                    "file name": "ThreadMonitor.java",
                    "file old path": null,
                    "file new path": "src/java/org/apache/commons/io/ThreadMonitor.java",
                    "full name": "src.java.org.apache.commons.io.ThreadMonitor.start"
                },
                {
                    "function name": "start",
                    "function params": [
                        "thread",
                        "timeout"
                    ],
                    "file name": "ThreadMonitor.java",
                    "file old path": null,
                    "file new path": "src/java/org/apache/commons/io/ThreadMonitor.java",
                    "full name": "src.java.org.apache.commons.io.ThreadMonitor.start"
                },
                {
                    "function name": "stop",
                    "function params": [
                        "thread"
                    ],
                    "file name": "ThreadMonitor.java",
                    "file old path": null,
                    "file new path": "src/java/org/apache/commons/io/ThreadMonitor.java",
                    "full name": "src.java.org.apache.commons.io.ThreadMonitor.stop"
                },
                {
                    "function name": "ThreadMonitor",
                    "function params": [
                        "thread",
                        "timeout"
                    ],
                    "file name": "ThreadMonitor.java",
                    "file old path": null,
                    "file new path": "src/java/org/apache/commons/io/ThreadMonitor.java",
                    "full name": "src.java.org.apache.commons.io.ThreadMonitor.ThreadMonitor"
                },
                {
                    "function name": "testTimeout",
                    "function params": [],
                    "file name": "ThreadMonitorTestCase.java",
                    "file old path": null,
                    "file new path": "src/test/org/apache/commons/io/ThreadMonitorTestCase.java",
                    "full name": "src.test.org.apache.commons.io.ThreadMonitorTestCase.testTimeout"
                },
                {
                    "function name": "testCompletedWithoutTimeout",
                    "function params": [],
                    "file name": "ThreadMonitorTestCase.java",
                    "file old path": null,
                    "file new path": "src/test/org/apache/commons/io/ThreadMonitorTestCase.java",
                    "full name": "src.test.org.apache.commons.io.ThreadMonitorTestCase.testCompletedWithoutTimeout"
                },
                {
                    "function name": "ThreadMonitorTestCase",
                    "function params": [
                        "name"
                    ],
                    "file name": "ThreadMonitorTestCase.java",
                    "file old path": null,
                    "file new path": "src/test/org/apache/commons/io/ThreadMonitorTestCase.java",
                    "full name": "src.test.org.apache.commons.io.ThreadMonitorTestCase.ThreadMonitorTestCase"
                },
                {
                    "function name": "testNoTimeout",
                    "function params": [],
                    "file name": "ThreadMonitorTestCase.java",
                    "file old path": null,
                    "file new path": "src/test/org/apache/commons/io/ThreadMonitorTestCase.java",
                    "full name": "src.test.org.apache.commons.io.ThreadMonitorTestCase.testNoTimeout"
                }
            ],
            "files that changed": [
                "src/java/org/apache/commons/io/FileSystemUtils.java"
            ]
        },
        {
            "bug index": "275",
            "bug id": "IO-246",
            "hexsha": "01afc9d7d01e802ee3a0d91ff47c75041cff0cfe",
            "fix_hash": "d062bd01f7e9e9194ae0fd9dc01683e7c934c315",
            "description": "This wildcard pattern \"*?\" does not match correctly. The command:\n\nSystem.out.println(FilenameUtils.wildcardMatch(\"aaa\", \"*?\"));\n\nprints out \"false\", even though it matches. The wildcard mask is a bit unusal, but not incorrect. It should match any input with at least one character.",
            "commit number version hash": 717,
            "commit number": 657,
            "function that changed": [
                {
                    "function name": "wildcardMatch",
                    "function params": [
                        "filename",
                        "wildcardMatcher",
                        "caseSensitivity"
                    ],
                    "file name": "FilenameUtils.java",
                    "file old path": "src/java/org/apache/commons/io/FilenameUtils.java",
                    "file new path": "src/java/org/apache/commons/io/FilenameUtils.java",
                    "full name": "src.java.org.apache.commons.io.FilenameUtils.wildcardMatch"
                },
                {
                    "function name": "test_IO_246",
                    "function params": [],
                    "file name": "FilenameUtilsWildcardTestCase.java",
                    "file old path": "src/test/org/apache/commons/io/FilenameUtilsWildcardTestCase.java",
                    "file new path": "src/test/org/apache/commons/io/FilenameUtilsWildcardTestCase.java",
                    "full name": "src.test.org.apache.commons.io.FilenameUtilsWildcardTestCase.test_IO_246"
                }
            ],
            "files that changed": [
                "src/java/org/apache/commons/io/FilenameUtils.java",
                "src/test/org/apache/commons/io/FilenameUtilsWildcardTestCase.java"
            ]
        },
        {
            "bug index": "276",
            "bug id": "IO-166",
            "hexsha": "01afc9d7d01e802ee3a0d91ff47c75041cff0cfe",
            "fix_hash": "ed01f165f9bbb7ccbd48dde7dd3106eb044dd859",
            "description": "The sequence \"%2520\" should decode to \"%20\".",
            "commit number version hash": 717,
            "commit number": 656,
            "function that changed": [
                {
                    "function name": "toFile",
                    "function params": [
                        "url"
                    ],
                    "file name": "FileUtils.java",
                    "file old path": "src/java/org/apache/commons/io/FileUtils.java",
                    "file new path": "src/java/org/apache/commons/io/FileUtils.java",
                    "full name": "src.java.org.apache.commons.io.FileUtils.toFile"
                },
                {
                    "function name": "decodeUrl",
                    "function params": [
                        "url"
                    ],
                    "file name": "FileUtils.java",
                    "file old path": "src/java/org/apache/commons/io/FileUtils.java",
                    "file new path": "src/java/org/apache/commons/io/FileUtils.java",
                    "full name": "src.java.org.apache.commons.io.FileUtils.decodeUrl"
                },
                {
                    "function name": "testDecodeUrlEncodingUtf8",
                    "function params": [],
                    "file name": "FileUtilsTestCase.java",
                    "file old path": "src/test/org/apache/commons/io/FileUtilsTestCase.java",
                    "file new path": "src/test/org/apache/commons/io/FileUtilsTestCase.java",
                    "full name": "src.test.org.apache.commons.io.FileUtilsTestCase.testDecodeUrlEncodingUtf8"
                },
                {
                    "function name": "testDecodeUrl",
                    "function params": [],
                    "file name": "FileUtilsTestCase.java",
                    "file old path": "src/test/org/apache/commons/io/FileUtilsTestCase.java",
                    "file new path": "src/test/org/apache/commons/io/FileUtilsTestCase.java",
                    "full name": "src.test.org.apache.commons.io.FileUtilsTestCase.testDecodeUrl"
                },
                {
                    "function name": "testDecodeUrlNullSafe",
                    "function params": [],
                    "file name": "FileUtilsTestCase.java",
                    "file old path": "src/test/org/apache/commons/io/FileUtilsTestCase.java",
                    "file new path": "src/test/org/apache/commons/io/FileUtilsTestCase.java",
                    "full name": "src.test.org.apache.commons.io.FileUtilsTestCase.testDecodeUrlNullSafe"
                },
                {
                    "function name": "testToFile4",
                    "function params": [],
                    "file name": "FileUtilsTestCase.java",
                    "file old path": "src/test/org/apache/commons/io/FileUtilsTestCase.java",
                    "file new path": "src/test/org/apache/commons/io/FileUtilsTestCase.java",
                    "full name": "src.test.org.apache.commons.io.FileUtilsTestCase.testToFile4"
                },
                {
                    "function name": "testToFileUtf8",
                    "function params": [],
                    "file name": "FileUtilsTestCase.java",
                    "file old path": "src/test/org/apache/commons/io/FileUtilsTestCase.java",
                    "file new path": "src/test/org/apache/commons/io/FileUtilsTestCase.java",
                    "full name": "src.test.org.apache.commons.io.FileUtilsTestCase.testToFileUtf8"
                },
                {
                    "function name": "testToFile2",
                    "function params": [],
                    "file name": "FileUtilsTestCase.java",
                    "file old path": "src/test/org/apache/commons/io/FileUtilsTestCase.java",
                    "file new path": "src/test/org/apache/commons/io/FileUtilsTestCase.java",
                    "full name": "src.test.org.apache.commons.io.FileUtilsTestCase.testToFile2"
                },
                {
                    "function name": "testDecodeUrlLenient",
                    "function params": [],
                    "file name": "FileUtilsTestCase.java",
                    "file old path": "src/test/org/apache/commons/io/FileUtilsTestCase.java",
                    "file new path": "src/test/org/apache/commons/io/FileUtilsTestCase.java",
                    "full name": "src.test.org.apache.commons.io.FileUtilsTestCase.testDecodeUrlLenient"
                }
            ],
            "files that changed": [
                "src/java/org/apache/commons/io/FileUtils.java",
                "src/test/org/apache/commons/io/FileUtilsTestCase.java"
            ]
        },
        {
            "bug index": "277",
            "bug id": "IO-217",
            "hexsha": "01afc9d7d01e802ee3a0d91ff47c75041cff0cfe",
            "fix_hash": "4286199ac5ad636d11f4428d1827b78d94217e06",
            "description": "When using FileUtils.copyDirectoryToDirectory, infinite loops has occurred.\n\n-- detail --\nsrc directory :  D:\\a\ndest directory : D:\\a\ncall : FileUtils.copyDirectoryToDirectory(new File(\"D:\\a\"), new File(\"D:\\a\"));\nexpected result : directory D:\\a\\a will be created\nactual result      : D:\\a\\a\\a\\a.......   was created\n\ni guess FileUtils.copyDirectoryToDirectory causes of this result.\n(\"destDir.mkdir()\" is done before \"srcDir.listFiles()\")\n\nam i calling wrong method?\n\nthank you.",
            "commit number version hash": 717,
            "commit number": 649,
            "function that changed": [
                {
                    "function name": "doCopyDirectory",
                    "function params": [
                        "srcDir",
                        "destDir",
                        "filter",
                        "preserveFileDate",
                        "exclusionList"
                    ],
                    "file name": "FileUtils.java",
                    "file old path": "src/java/org/apache/commons/io/FileUtils.java",
                    "file new path": "src/java/org/apache/commons/io/FileUtils.java",
                    "full name": "src.java.org.apache.commons.io.FileUtils.doCopyDirectory"
                },
                {
                    "function name": "testCopyDirectoryToItself",
                    "function params": [],
                    "file name": "FileUtilsTestCase.java",
                    "file old path": "src/test/org/apache/commons/io/FileUtilsTestCase.java",
                    "file new path": "src/test/org/apache/commons/io/FileUtilsTestCase.java",
                    "full name": "src.test.org.apache.commons.io.FileUtilsTestCase.testCopyDirectoryToItself"
                }
            ],
            "files that changed": [
                "src/java/org/apache/commons/io/FileUtils.java",
                "src/test/org/apache/commons/io/FileUtilsTestCase.java"
            ]
        },
        {
            "bug index": "278",
            "bug id": "IO-168",
            "hexsha": "01afc9d7d01e802ee3a0d91ff47c75041cff0cfe",
            "fix_hash": "4353d481a16f046a19be7995e99bbc6edc18ddad",
            "description": "If 'dlink' is a symbolic link to a directory 'dir', and FileUtils.forceDelete is called on dlink, then here is what happens:\n\n1) the contents of 'dir' are emptied (the link is followed).\n2) 'dir' continues to exist (but is empty).\n3) 'dlink' is removed.\n\nThe correct behavior is to simply remove 'dlink' without following it and thus without altering the contents of 'dir' (or 'dir' itself).",
            "commit number version hash": 717,
            "commit number": 648,
            "function that changed": [
                {
                    "function name": "isSymlink",
                    "function params": [
                        "file"
                    ],
                    "file name": "FileUtils.java",
                    "file old path": "src/java/org/apache/commons/io/FileUtils.java",
                    "file new path": "src/java/org/apache/commons/io/FileUtils.java",
                    "full name": "src.java.org.apache.commons.io.FileUtils.isSymlink"
                }
            ],
            "files that changed": [
                "src/java/org/apache/commons/io/FileUtils.java"
            ]
        },
        {
            "bug index": "279",
            "bug id": "IO-216",
            "hexsha": "01afc9d7d01e802ee3a0d91ff47c75041cff0cfe",
            "fix_hash": "27738832b3163724842379503ae3016e51131998",
            "description": "LockableFileWriter fails to report lock file deletion failure - it calls lockFile.delete() several times but fails to check the return code.\n\nN.B. IIRC, file.delete() returns false if there was no file to delete, so any fix needs to take this into account.",
            "commit number version hash": 717,
            "commit number": 645,
            "function that changed": [],
            "files that changed": [
                "src/java/org/apache/commons/io/output/LockableFileWriter.java"
            ]
        },
        {
            "bug index": "280",
            "bug id": "IO-216",
            "hexsha": "01afc9d7d01e802ee3a0d91ff47c75041cff0cfe",
            "fix_hash": "3ca6e3770eb1192d3471bbf5ca49db9f61557d72",
            "description": "LockableFileWriter fails to report lock file deletion failure - it calls lockFile.delete() several times but fails to check the return code.\n\nN.B. IIRC, file.delete() returns false if there was no file to delete, so any fix needs to take this into account.",
            "commit number version hash": 717,
            "commit number": 643,
            "function that changed": [
                {
                    "function name": "initWriter",
                    "function params": [
                        "file",
                        "encoding",
                        "append"
                    ],
                    "file name": "LockableFileWriter.java",
                    "file old path": "src/java/org/apache/commons/io/output/LockableFileWriter.java",
                    "file new path": "src/java/org/apache/commons/io/output/LockableFileWriter.java",
                    "full name": "src.java.org.apache.commons.io.output.LockableFileWriter.initWriter"
                }
            ],
            "files that changed": [
                "src/java/org/apache/commons/io/output/LockableFileWriter.java"
            ]
        },
        {
            "bug index": "281",
            "bug id": "IO-215",
            "hexsha": "01afc9d7d01e802ee3a0d91ff47c75041cff0cfe",
            "fix_hash": "2969197cc539b484d048a9c24ea65ece7f271d27",
            "description": "FileUtils.doCopyDirectory(..) and .FileUtils.doCopyFile(..) both call the setLastModified() method, but fail to check if it succeeded or not.\n\nSurely if the caller has asked for the date to be preserved, failure to do so should be reported somehow?",
            "commit number version hash": 717,
            "commit number": 642,
            "function that changed": [],
            "files that changed": [
                "src/java/org/apache/commons/io/FileUtils.java"
            ]
        },
        {
            "bug index": "282",
            "bug id": "IO-215",
            "hexsha": "01afc9d7d01e802ee3a0d91ff47c75041cff0cfe",
            "fix_hash": "f6273c54219710924c1db46fae16824bf99053d7",
            "description": "FileUtils.doCopyDirectory(..) and .FileUtils.doCopyFile(..) both call the setLastModified() method, but fail to check if it succeeded or not.\n\nSurely if the caller has asked for the date to be preserved, failure to do so should be reported somehow?",
            "commit number version hash": 717,
            "commit number": 641,
            "function that changed": [],
            "files that changed": [
                "src/java/org/apache/commons/io/FileUtils.java"
            ]
        },
        {
            "bug index": "283",
            "bug id": "IO-243",
            "hexsha": "01afc9d7d01e802ee3a0d91ff47c75041cff0cfe",
            "fix_hash": "86e4b30ba700cb8bcf4d7488e0d60e07a75d6315",
            "description": "The method readBoolean in SwappedDataInputStream returns true when the byte is zero, false otherwise. In accordance with the contract in java.io.DataInput, true should indicate a non-zero byte. SwappedDataInputStream is for reading Little Endian formats, it should not change the boolean value of individual bytes.",
            "commit number version hash": 717,
            "commit number": 640,
            "function that changed": [
                {
                    "function name": "readBoolean",
                    "function params": [],
                    "file name": "SwappedDataInputStream.java",
                    "file old path": "src/java/org/apache/commons/io/input/SwappedDataInputStream.java",
                    "file new path": "src/java/org/apache/commons/io/input/SwappedDataInputStream.java",
                    "full name": "src.java.org.apache.commons.io.input.SwappedDataInputStream.readBoolean"
                },
                {
                    "function name": "testReadBoolean",
                    "function params": [],
                    "file name": "SwappedDataInputStreamTest.java",
                    "file old path": "src/test/org/apache/commons/io/input/SwappedDataInputStreamTest.java",
                    "file new path": "src/test/org/apache/commons/io/input/SwappedDataInputStreamTest.java",
                    "full name": "src.test.org.apache.commons.io.input.SwappedDataInputStreamTest.testReadBoolean"
                }
            ],
            "files that changed": [
                "src/java/org/apache/commons/io/input/SwappedDataInputStream.java",
                "src/test/org/apache/commons/io/input/SwappedDataInputStreamTest.java"
            ]
        },
        {
            "bug index": "284",
            "bug id": "IO-235",
            "hexsha": "01afc9d7d01e802ee3a0d91ff47c75041cff0cfe",
            "fix_hash": "bf0850a0e2dff6acf0041de4fde2828082c9195c",
            "description": "testCopy_byteArrayToWriter() has the following code:\n\n{code}\nByteArrayOutputStream baout = new ByteArrayOutputStream();\nOutputStream out = new YellOnFlushAndCloseOutputStream(baout, false, true); // out is not used\nWriter writer = new java.io.OutputStreamWriter(baout, \"US-ASCII\"); // uses baout - should it use out instead\n{code}\n\nIt looks like the Writer should be created from out rather than baout - otherwise why create out?\n\nSimilarly for\n\ntestCopy_inputStreamToWriter()\ntestCopy_readerToWriter()\ntestCopy_stringToWriter()\n\nThe tests still pass if the Writer is changed to use out.\n\nThoughts?",
            "commit number version hash": 717,
            "commit number": 635,
            "function that changed": [
                {
                    "function name": "testCopy_inputStreamToWriter_Encoding_nullIn",
                    "function params": [],
                    "file name": "IOUtilsCopyTestCase.java",
                    "file old path": "src/test/org/apache/commons/io/IOUtilsCopyTestCase.java",
                    "file new path": "src/test/org/apache/commons/io/IOUtilsCopyTestCase.java",
                    "full name": "src.test.org.apache.commons.io.IOUtilsCopyTestCase.testCopy_inputStreamToWriter_Encoding_nullIn"
                },
                {
                    "function name": "testCopy_inputStreamToWriter_nullIn",
                    "function params": [],
                    "file name": "IOUtilsCopyTestCase.java",
                    "file old path": "src/test/org/apache/commons/io/IOUtilsCopyTestCase.java",
                    "file new path": "src/test/org/apache/commons/io/IOUtilsCopyTestCase.java",
                    "full name": "src.test.org.apache.commons.io.IOUtilsCopyTestCase.testCopy_inputStreamToWriter_nullIn"
                },
                {
                    "function name": "testCopy_readerToWriter_nullIn",
                    "function params": [],
                    "file name": "IOUtilsCopyTestCase.java",
                    "file old path": "src/test/org/apache/commons/io/IOUtilsCopyTestCase.java",
                    "file new path": "src/test/org/apache/commons/io/IOUtilsCopyTestCase.java",
                    "full name": "src.test.org.apache.commons.io.IOUtilsCopyTestCase.testCopy_readerToWriter_nullIn"
                }
            ],
            "files that changed": [
                "src/test/org/apache/commons/io/IOUtilsCopyTestCase.java"
            ]
        },
        {
            "bug index": "285",
            "bug id": "IO-240",
            "hexsha": "01afc9d7d01e802ee3a0d91ff47c75041cff0cfe",
            "fix_hash": "4dcf99ae012fe5d15656967832dc0fb0bec35b10",
            "description": "FileFilterUtils lazily creates the static fields cvsFilter and svnFilter; however access to the fields is not synchronized and the fields are not volatile.\n\nOne thread can create the filter, but the updated value won't necessarily be seen by any/all other threads.\n\nThis means that the fields can be created multiple times.\n\nPossible solutions: make the fields volatile, or use the singleton IODH idiom. The latter uses a bit more code, but is probably marginally cheaper if the field is used a lot.",
            "commit number version hash": 717,
            "commit number": 632,
            "function that changed": [
                {
                    "function name": "makeCVSAware",
                    "function params": [
                        "filter"
                    ],
                    "file name": "FileFilterUtils.java",
                    "file old path": "src/java/org/apache/commons/io/filefilter/FileFilterUtils.java",
                    "file new path": "src/java/org/apache/commons/io/filefilter/FileFilterUtils.java",
                    "full name": "src.java.org.apache.commons.io.filefilter.FileFilterUtils.makeCVSAware"
                },
                {
                    "function name": "makeSVNAware",
                    "function params": [
                        "filter"
                    ],
                    "file name": "FileFilterUtils.java",
                    "file old path": "src/java/org/apache/commons/io/filefilter/FileFilterUtils.java",
                    "file new path": "src/java/org/apache/commons/io/filefilter/FileFilterUtils.java",
                    "full name": "src.java.org.apache.commons.io.filefilter.FileFilterUtils.makeSVNAware"
                }
            ],
            "files that changed": [
                "src/java/org/apache/commons/io/filefilter/FileFilterUtils.java"
            ]
        },
        {
            "bug index": "286",
            "bug id": "IO-235",
            "hexsha": "01afc9d7d01e802ee3a0d91ff47c75041cff0cfe",
            "fix_hash": "9f4951abf0154d24cea4ab14e6df3afeced8b1e1",
            "description": "testCopy_byteArrayToWriter() has the following code:\n\n{code}\nByteArrayOutputStream baout = new ByteArrayOutputStream();\nOutputStream out = new YellOnFlushAndCloseOutputStream(baout, false, true); // out is not used\nWriter writer = new java.io.OutputStreamWriter(baout, \"US-ASCII\"); // uses baout - should it use out instead\n{code}\n\nIt looks like the Writer should be created from out rather than baout - otherwise why create out?\n\nSimilarly for\n\ntestCopy_inputStreamToWriter()\ntestCopy_readerToWriter()\ntestCopy_stringToWriter()\n\nThe tests still pass if the Writer is changed to use out.\n\nThoughts?",
            "commit number version hash": 717,
            "commit number": 629,
            "function that changed": [
                {
                    "function name": "testCopy_readerToWriter",
                    "function params": [],
                    "file name": "CopyUtilsTest.java",
                    "file old path": "src/test/org/apache/commons/io/CopyUtilsTest.java",
                    "file new path": "src/test/org/apache/commons/io/CopyUtilsTest.java",
                    "full name": "src.test.org.apache.commons.io.CopyUtilsTest.testCopy_readerToWriter"
                },
                {
                    "function name": "testCopy_stringToWriter",
                    "function params": [],
                    "file name": "CopyUtilsTest.java",
                    "file old path": "src/test/org/apache/commons/io/CopyUtilsTest.java",
                    "file new path": "src/test/org/apache/commons/io/CopyUtilsTest.java",
                    "full name": "src.test.org.apache.commons.io.CopyUtilsTest.testCopy_stringToWriter"
                },
                {
                    "function name": "testCopy_inputStreamToWriter",
                    "function params": [],
                    "file name": "CopyUtilsTest.java",
                    "file old path": "src/test/org/apache/commons/io/CopyUtilsTest.java",
                    "file new path": "src/test/org/apache/commons/io/CopyUtilsTest.java",
                    "full name": "src.test.org.apache.commons.io.CopyUtilsTest.testCopy_inputStreamToWriter"
                },
                {
                    "function name": "testCopy_byteArrayToWriter",
                    "function params": [],
                    "file name": "CopyUtilsTest.java",
                    "file old path": "src/test/org/apache/commons/io/CopyUtilsTest.java",
                    "file new path": "src/test/org/apache/commons/io/CopyUtilsTest.java",
                    "full name": "src.test.org.apache.commons.io.CopyUtilsTest.testCopy_byteArrayToWriter"
                }
            ],
            "files that changed": [
                "src/test/org/apache/commons/io/CopyUtilsTest.java"
            ]
        },
        {
            "bug index": "287",
            "bug id": "IO-220",
            "hexsha": "01afc9d7d01e802ee3a0d91ff47c75041cff0cfe",
            "fix_hash": "bf30068bae7f930170030e705a5bdb4f4abce384",
            "description": "When subjected to heavy load, the performance of org.apache.commons.io.FileCleaningTracker degrades and becomes a bottleneck to the system.  In our case, we had over 2 millions entries on the \"trackers\" Vector.  Under these conditions, the call to trackers.remove(tracker) on line 214 becomes very inefficient as it causes the Vector to shift and reindex the remaining data.  In addition, calls to trackers.add are forced to wait on the inefficient remove operation.  With the application idle, it took several hours for the File Reaper thread to finish processing the entries on the trackers Vector.\n\nThe solution for use was to implement trackers as a HashSet instead of a Vector.  Thus line 52 was changed from:\n    final Collection /* Tracker */ trackers = new Vector();  // synchronized\nto\n    final Collection /* Tracker */ trackers = Collections.synchronizedSet(new HashSet());  // synchronized\nImports were also change appropriately.",
            "commit number version hash": 717,
            "commit number": 628,
            "function that changed": [],
            "files that changed": [
                "src/java/org/apache/commons/io/FileCleaningTracker.java"
            ]
        },
        {
            "bug index": "288",
            "bug id": "IO-187",
            "hexsha": "01afc9d7d01e802ee3a0d91ff47c75041cff0cfe",
            "fix_hash": "d577693e0a85d59d7d0ac9458bf84eb1678efde1",
            "description": "Calling FileSystemUtils.freeSpaceKb with \".\", \"./\", \"../\", \"../foo\" etc. will result in an empty string being passed to df.\nfreeSpaceKb calls FileNameUtils.normalize on the path which destroys relative paths.\n\nI don't see any need to normalize the path so the fix is simply to remove that call.",
            "commit number version hash": 717,
            "commit number": 607,
            "function that changed": [
                {
                    "function name": "freeSpaceUnix",
                    "function params": [
                        "path",
                        "kb",
                        "posix"
                    ],
                    "file name": "FileSystemUtils.java",
                    "file old path": "src/java/org/apache/commons/io/FileSystemUtils.java",
                    "file new path": "src/java/org/apache/commons/io/FileSystemUtils.java",
                    "full name": "src.java.org.apache.commons.io.FileSystemUtils.freeSpaceUnix"
                }
            ],
            "files that changed": [
                "src/java/org/apache/commons/io/FileSystemUtils.java"
            ]
        },
        {
            "bug index": "289",
            "bug id": "IO-205",
            "hexsha": "01afc9d7d01e802ee3a0d91ff47c75041cff0cfe",
            "fix_hash": "65ba81b2035fa7d22d67b652a435b57f53eb4b6a",
            "description": "The Javadoc for FileUtils.forceMkdir doesn't say what is supposed to happen if a directory already exists with the same path.\n\nIt does (misleadingly) say that if a file already exists, it fails.  I interpreted this to mean that a directory would also fail, as it said *file* and not *normal file*.  However in reality, if the directory already exists, the method passes.\n\nFor clarity it should say that it succeeds if the directory already exists, and should probably also explicitly say \"normal file\" instead of just \"file\", as all directories are files.\n\nAlso, internally, I notice it is checking for File.isFile() whereas our existing method for implementing the same thing is checking !File.isDirectory().  On some filesystems, a file can be both a directory and a normal file, and in this situation I would expect the method to pass, whereas with Commons' implementation it would fail.  Maybe this is a trip-up because Sun themselves documented \"normal file\" as meaning \"something which is not a directory\", which is going to break the moment someone runs something on a more exotic filesystem. :-(\n\n",
            "commit number version hash": 717,
            "commit number": 601,
            "function that changed": [
                {
                    "function name": "forceMkdir",
                    "function params": [
                        "directory"
                    ],
                    "file name": "FileUtils.java",
                    "file old path": "src/java/org/apache/commons/io/FileUtils.java",
                    "file new path": "src/java/org/apache/commons/io/FileUtils.java",
                    "full name": "src.java.org.apache.commons.io.FileUtils.forceMkdir"
                }
            ],
            "files that changed": [
                "src/java/org/apache/commons/io/FileUtils.java"
            ]
        },
        {
            "bug index": "290",
            "bug id": "IO-207",
            "hexsha": "01afc9d7d01e802ee3a0d91ff47c75041cff0cfe",
            "fix_hash": "5526f2ed85647269b94d91353d72469822925b4e",
            "description": "If two processes or threads call forceMkdir() with the same directory there is a chance that one will throw an IOException even though a directory was correctly created (by the other process or thread). ",
            "commit number version hash": 717,
            "commit number": 600,
            "function that changed": [
                {
                    "function name": "forceMkdir",
                    "function params": [
                        "directory"
                    ],
                    "file name": "FileUtils.java",
                    "file old path": "src/java/org/apache/commons/io/FileUtils.java",
                    "file new path": "src/java/org/apache/commons/io/FileUtils.java",
                    "full name": "src.java.org.apache.commons.io.FileUtils.forceMkdir"
                }
            ],
            "files that changed": [
                "src/java/org/apache/commons/io/FileUtils.java"
            ]
        },
        {
            "bug index": "291",
            "bug id": "IO-231",
            "hexsha": "01afc9d7d01e802ee3a0d91ff47c75041cff0cfe",
            "fix_hash": "d7b629b0288bfeaf7d9fbe93d608ebe8ffe6ee0b",
            "description": "{code}\nif (!reference.exists()) {\n    throw new IllegalArgumentException(\"The reference file '\" + file + \"' doesn't exist\");\n}\n{code}\nIf second argument file does not exist isFileNewer method generates exception with message about first argument file does not exist.",
            "commit number version hash": 717,
            "commit number": 596,
            "function that changed": [
                {
                    "function name": "isFileOlder",
                    "function params": [
                        "file",
                        "reference"
                    ],
                    "file name": "FileUtils.java",
                    "file old path": "src/java/org/apache/commons/io/FileUtils.java",
                    "file new path": "src/java/org/apache/commons/io/FileUtils.java",
                    "full name": "src.java.org.apache.commons.io.FileUtils.isFileOlder"
                },
                {
                    "function name": "isFileNewer",
                    "function params": [
                        "file",
                        "reference"
                    ],
                    "file name": "FileUtils.java",
                    "file old path": "src/java/org/apache/commons/io/FileUtils.java",
                    "file new path": "src/java/org/apache/commons/io/FileUtils.java",
                    "full name": "src.java.org.apache.commons.io.FileUtils.isFileNewer"
                },
                {
                    "function name": "testIsFileNewerOlder",
                    "function params": [],
                    "file name": "FileUtilsTestCase.java",
                    "file old path": "src/test/org/apache/commons/io/FileUtilsTestCase.java",
                    "file new path": "src/test/org/apache/commons/io/FileUtilsTestCase.java",
                    "full name": "src.test.org.apache.commons.io.FileUtilsTestCase.testIsFileNewerOlder"
                }
            ],
            "files that changed": [
                "src/java/org/apache/commons/io/FileUtils.java",
                "src/test/org/apache/commons/io/FileUtilsTestCase.java"
            ]
        },
        {
            "bug index": "292",
            "bug id": "IO-223",
            "hexsha": "01afc9d7d01e802ee3a0d91ff47c75041cff0cfe",
            "fix_hash": "b5787a6d57af928d86a348907173f6907c76f104",
            "description": "The javadoc for IOUtils.copy says:\n\"Large streams (over 2GB) will return a bytes copied value of -1 after the copy has completed since the correct number of bytes cannot be returned as an int.\"\nbut then it says:\n\"Throws:\nArithmeticException - if the byte count is too large\"\nThis is an inconsistency since -1 is always returned if the byte count is too large. ArithmeticException is never actually thrown.\n\nSee IO-84 for discussion on solving the \"too large byte count\" problem.",
            "commit number version hash": 717,
            "commit number": 580,
            "function that changed": [],
            "files that changed": [
                "src/java/org/apache/commons/io/IOUtils.java"
            ]
        },
        {
            "bug index": "293",
            "bug id": "IO-212",
            "hexsha": "01afc9d7d01e802ee3a0d91ff47c75041cff0cfe",
            "fix_hash": "d0ccc55dacccf84bf81845366a947a707381939e",
            "description": "The ProxyInputStream.skip() method documents the return value as \"the number of bytes to skipped or -1 if the end of stream\" when the underlying InputStream.skip() method returns \"the actual number of bytes skipped\", i.e. never -1.",
            "commit number version hash": 717,
            "commit number": 571,
            "function that changed": [],
            "files that changed": [
                "src/java/org/apache/commons/io/input/ProxyInputStream.java"
            ]
        },
        {
            "bug index": "294",
            "bug id": "IO-206",
            "hexsha": "01afc9d7d01e802ee3a0d91ff47c75041cff0cfe",
            "fix_hash": "16f2923131b65748c5b6cf5a560f712383b003de",
            "description": "ProxyInputStream has a the following method signatures:\n- public int read(byte[] bts, int st, int end)\n- public void mark(int idx)\n\nBut they should be:\n- public int read(byte[] bts, int off, int length)\n- public void mark(int readlimit)\n\nEspecially the \"end\" parameter could be misinterpreted.\n",
            "commit number version hash": 717,
            "commit number": 568,
            "function that changed": [
                {
                    "function name": "mark",
                    "function params": [
                        "idx"
                    ],
                    "file name": "ProxyInputStream.java",
                    "file old path": "src/java/org/apache/commons/io/input/ProxyInputStream.java",
                    "file new path": "src/java/org/apache/commons/io/input/ProxyInputStream.java",
                    "full name": "src.java.org.apache.commons.io.input.ProxyInputStream.mark"
                },
                {
                    "function name": "mark",
                    "function params": [
                        "readlimit"
                    ],
                    "file name": "ProxyInputStream.java",
                    "file old path": "src/java/org/apache/commons/io/input/ProxyInputStream.java",
                    "file new path": "src/java/org/apache/commons/io/input/ProxyInputStream.java",
                    "full name": "src.java.org.apache.commons.io.input.ProxyInputStream.mark"
                },
                {
                    "function name": "read",
                    "function params": [
                        "bts",
                        "st",
                        "end"
                    ],
                    "file name": "ProxyInputStream.java",
                    "file old path": "src/java/org/apache/commons/io/input/ProxyInputStream.java",
                    "file new path": "src/java/org/apache/commons/io/input/ProxyInputStream.java",
                    "full name": "src.java.org.apache.commons.io.input.ProxyInputStream.read"
                },
                {
                    "function name": "read",
                    "function params": [
                        "bts",
                        "off",
                        "len"
                    ],
                    "file name": "ProxyInputStream.java",
                    "file old path": "src/java/org/apache/commons/io/input/ProxyInputStream.java",
                    "file new path": "src/java/org/apache/commons/io/input/ProxyInputStream.java",
                    "full name": "src.java.org.apache.commons.io.input.ProxyInputStream.read"
                }
            ],
            "files that changed": [
                "src/java/org/apache/commons/io/input/ProxyInputStream.java"
            ]
        },
        {
            "bug index": "295",
            "bug id": "IO-202",
            "hexsha": "01afc9d7d01e802ee3a0d91ff47c75041cff0cfe",
            "fix_hash": "fe4ff5cb6f913bc48cca642f3236bbf0aa578c97",
            "description": "The documentation for NotFileFilter (http://commons.apache.org/io/api-release/index.html) incorrectly states that it, \"Checks to see if both filters are true.\"  It looks to be the result of a hasty copy-and-paste from an old version of AndFileFilter (http://svn.apache.org/viewvc/commons/proper/io/trunk/src/java/org/apache/commons/io/filefilter/AndFileFilter.java?revision=140357&view=markup).  It should say something like, \"Returns the logical NOT of the underlying filter's return value for the same arguments.\"\n\nPatch is attached.",
            "commit number version hash": 717,
            "commit number": 567,
            "function that changed": [],
            "files that changed": [
                "src/java/org/apache/commons/io/filefilter/NotFileFilter.java"
            ]
        },
        {
            "bug index": "296",
            "bug id": "IO-175",
            "hexsha": "01afc9d7d01e802ee3a0d91ff47c75041cff0cfe",
            "fix_hash": "63213c888b3a47036105bfa9caddf63f73cd695d",
            "description": "I've noticed the code in http://svn.apache.org/repos/asf/commons/proper/io/trunk/src/java/org/apache/commons/io/FileUtils.java for doCopyFile() contains:\n\noutput.transferFrom(input, 0, input.size());\n\nI know from experience (I had code that did this previously) this will not work on large files, at least under Windows.  By default, the transferFrom() method will try to create a single memory map equal to the size of the input.  If you are running a 32-bit process, and are trying to copy a file gigabytes in size, this will fail as you won't have enough virtual address space to create the memory map.  We had to use transferFrom() in smaller chunk sizes to work around this.\n\nAlso I believe in the code of this method, the file input streams need to be closed explicitly, since closing the channel objects that are derived from them will not close any resources held by the file input stream objects themselves.\n",
            "commit number version hash": 717,
            "commit number": 551,
            "function that changed": [
                {
                    "function name": "doCopyFile",
                    "function params": [
                        "srcFile",
                        "destFile",
                        "preserveFileDate"
                    ],
                    "file name": "FileUtils.java",
                    "file old path": "src/java/org/apache/commons/io/FileUtils.java",
                    "file new path": "src/java/org/apache/commons/io/FileUtils.java",
                    "full name": "src.java.org.apache.commons.io.FileUtils.doCopyFile"
                },
                {
                    "function name": "IGNOREtestCopyFileLarge",
                    "function params": [],
                    "file name": "FileUtilsTestCase.java",
                    "file old path": "src/test/org/apache/commons/io/FileUtilsTestCase.java",
                    "file new path": "src/test/org/apache/commons/io/FileUtilsTestCase.java",
                    "full name": "src.test.org.apache.commons.io.FileUtilsTestCase.IGNOREtestCopyFileLarge"
                }
            ],
            "files that changed": [
                "src/java/org/apache/commons/io/FileUtils.java",
                "src/test/org/apache/commons/io/FileUtilsTestCase.java"
            ]
        },
        {
            "bug index": "297",
            "bug id": "IO-161",
            "hexsha": "01afc9d7d01e802ee3a0d91ff47c75041cff0cfe",
            "fix_hash": "328a7efc17e8c77853fea42a84808dd1d26c8d5a",
            "description": "The following code in FileCleaningTrackerTestCase never exits, hanging the whole compilation/testing process:\n\n    private void waitUntilTrackCount() {\n        while (theInstance.getTrackCount() != 0) {\n            int total = 0;\n            while (theInstance.getTrackCount() != 0) {\n                byte[] b = new byte[1024 * 1024];\n                b[0] = (byte) System.currentTimeMillis();\n                total = total + b[0];\n                System.gc();\n            }\n        }\n    }\n\nIt is clear that in theory this code might loop forever, as the allocation of the byte arrays might never unleash a garbage collection complete enough to deallocate all marker objects, so to bring the track count to zero. Believe me, it's not only theory :).",
            "commit number version hash": 717,
            "commit number": 548,
            "function that changed": [
                {
                    "function name": "waitUntilTrackCount",
                    "function params": [],
                    "file name": "FileCleaningTrackerTestCase.java",
                    "file old path": "src/test/org/apache/commons/io/FileCleaningTrackerTestCase.java",
                    "file new path": "src/test/org/apache/commons/io/FileCleaningTrackerTestCase.java",
                    "full name": "src.test.org.apache.commons.io.FileCleaningTrackerTestCase.waitUntilTrackCount"
                }
            ],
            "files that changed": [
                "src/test/org/apache/commons/io/FileCleaningTrackerTestCase.java"
            ]
        },
        {
            "bug index": "298",
            "bug id": "IO-179",
            "hexsha": "01afc9d7d01e802ee3a0d91ff47c75041cff0cfe",
            "fix_hash": "d55dd62cc0b07e1124369d74dd0095cc2b491dfe",
            "description": "public void testFilenameUtils() {\n String path = \"/foo.xml\";\n org.apache.commons.io.FilenameUtils.getPathNoEndSeparator(path);\n }\n\n\nLeads to:\n\njava.lang.StringIndexOutOfBoundsException: String index out of range: -1\n\tat java.lang.String.substring(String.java:1768)\n\tat org.apache.commons.io.FilenameUtils.doGetPath(FilenameUtils.java:705)\n\tat org.apache.commons.io.FilenameUtils.getPathNoEndSeparator(FilenameUtils.java:683)\n\n\n  ",
            "commit number version hash": 717,
            "commit number": 539,
            "function that changed": [
                {
                    "function name": "doGetPath",
                    "function params": [
                        "filename",
                        "separatorAdd"
                    ],
                    "file name": "FilenameUtils.java",
                    "file old path": "src/java/org/apache/commons/io/FilenameUtils.java",
                    "file new path": "src/java/org/apache/commons/io/FilenameUtils.java",
                    "full name": "src.java.org.apache.commons.io.FilenameUtils.doGetPath"
                },
                {
                    "function name": "testGetPathNoEndSeparator",
                    "function params": [],
                    "file name": "FilenameUtilsTestCase.java",
                    "file old path": "src/test/org/apache/commons/io/FilenameUtilsTestCase.java",
                    "file new path": "src/test/org/apache/commons/io/FilenameUtilsTestCase.java",
                    "full name": "src.test.org.apache.commons.io.FilenameUtilsTestCase.testGetPathNoEndSeparator"
                },
                {
                    "function name": "testGetPath",
                    "function params": [],
                    "file name": "FilenameUtilsTestCase.java",
                    "file old path": "src/test/org/apache/commons/io/FilenameUtilsTestCase.java",
                    "file new path": "src/test/org/apache/commons/io/FilenameUtilsTestCase.java",
                    "full name": "src.test.org.apache.commons.io.FilenameUtilsTestCase.testGetPath"
                }
            ],
            "files that changed": [
                "src/java/org/apache/commons/io/FilenameUtils.java",
                "src/test/org/apache/commons/io/FilenameUtilsTestCase.java"
            ]
        },
        {
            "bug index": "299",
            "bug id": "IO-180",
            "hexsha": "01afc9d7d01e802ee3a0d91ff47c75041cff0cfe",
            "fix_hash": "0b86b74abdfdc8165eec057be2c579be40aea038",
            "description": "In the Javadoc for rg.apache.commons.io.LineIterator (in Commons IO 1.4),\nthis code snippet is incorrect:  the last instance of \"iterator\" should be\n\"it\".\n\n  LineIterator it = FileUtils.lineIterator(file, \"UTF-8\");\n   try {\n     while (it.hasNext()) {\n       String line = it.nextLine();\n       /// do something with line\n     }\n   } finally {\n     LineIterator.closeQuietly(iterator);\n   }\n",
            "commit number version hash": 717,
            "commit number": 538,
            "function that changed": [],
            "files that changed": [
                "src/java/org/apache/commons/io/LineIterator.java"
            ]
        },
        {
            "bug index": "300",
            "bug id": "IO-168",
            "hexsha": "01afc9d7d01e802ee3a0d91ff47c75041cff0cfe",
            "fix_hash": "f28c4933e6c92fed61431c7a4024b26c4f06a5e9",
            "description": "If 'dlink' is a symbolic link to a directory 'dir', and FileUtils.forceDelete is called on dlink, then here is what happens:\n\n1) the contents of 'dir' are emptied (the link is followed).\n2) 'dir' continues to exist (but is empty).\n3) 'dlink' is removed.\n\nThe correct behavior is to simply remove 'dlink' without following it and thus without altering the contents of 'dir' (or 'dir' itself).",
            "commit number version hash": 717,
            "commit number": 536,
            "function that changed": [
                {
                    "function name": "deleteDirectoryOnExit",
                    "function params": [
                        "directory"
                    ],
                    "file name": "FileUtils.java",
                    "file old path": "src/java/org/apache/commons/io/FileUtils.java",
                    "file new path": "src/java/org/apache/commons/io/FileUtils.java",
                    "full name": "src.java.org.apache.commons.io.FileUtils.deleteDirectoryOnExit"
                }
            ],
            "files that changed": [
                "src/java/org/apache/commons/io/FileUtils.java"
            ]
        },
        {
            "bug index": "301",
            "bug id": "IO-168",
            "hexsha": "01afc9d7d01e802ee3a0d91ff47c75041cff0cfe",
            "fix_hash": "7bfef476d8a9e08223ec4bff31054ff23655da4c",
            "description": "If 'dlink' is a symbolic link to a directory 'dir', and FileUtils.forceDelete is called on dlink, then here is what happens:\n\n1) the contents of 'dir' are emptied (the link is followed).\n2) 'dir' continues to exist (but is empty).\n3) 'dlink' is removed.\n\nThe correct behavior is to simply remove 'dlink' without following it and thus without altering the contents of 'dir' (or 'dir' itself).",
            "commit number version hash": 717,
            "commit number": 535,
            "function that changed": [
                {
                    "function name": "isSymlink",
                    "function params": [
                        "file"
                    ],
                    "file name": "FileUtils.java",
                    "file old path": "src/java/org/apache/commons/io/FileUtils.java",
                    "file new path": "src/java/org/apache/commons/io/FileUtils.java",
                    "full name": "src.java.org.apache.commons.io.FileUtils.isSymlink"
                },
                {
                    "function name": "deleteDirectory",
                    "function params": [
                        "directory"
                    ],
                    "file name": "FileUtils.java",
                    "file old path": "src/java/org/apache/commons/io/FileUtils.java",
                    "file new path": "src/java/org/apache/commons/io/FileUtils.java",
                    "full name": "src.java.org.apache.commons.io.FileUtils.deleteDirectory"
                },
                {
                    "function name": "tearDown",
                    "function params": [],
                    "file name": "FileUtilsCleanSymlinksTestCase.java",
                    "file old path": null,
                    "file new path": "src/test/org/apache/commons/io/FileUtilsCleanSymlinksTestCase.java",
                    "full name": "src.test.org.apache.commons.io.FileUtilsCleanSymlinksTestCase.tearDown"
                },
                {
                    "function name": "main",
                    "function params": [
                        "args"
                    ],
                    "file name": "FileUtilsCleanSymlinksTestCase.java",
                    "file old path": null,
                    "file new path": "src/test/org/apache/commons/io/FileUtilsCleanSymlinksTestCase.java",
                    "full name": "src.test.org.apache.commons.io.FileUtilsCleanSymlinksTestCase.main"
                },
                {
                    "function name": "FileUtilsCleanSymlinksTestCase",
                    "function params": [
                        "name"
                    ],
                    "file name": "FileUtilsCleanSymlinksTestCase.java",
                    "file old path": null,
                    "file new path": "src/test/org/apache/commons/io/FileUtilsCleanSymlinksTestCase.java",
                    "full name": "src.test.org.apache.commons.io.FileUtilsCleanSymlinksTestCase.FileUtilsCleanSymlinksTestCase"
                },
                {
                    "function name": "testCorrectlyIdentifySymlinkWithParentSymLink",
                    "function params": [],
                    "file name": "FileUtilsCleanSymlinksTestCase.java",
                    "file old path": null,
                    "file new path": "src/test/org/apache/commons/io/FileUtilsCleanSymlinksTestCase.java",
                    "full name": "src.test.org.apache.commons.io.FileUtilsCleanSymlinksTestCase.testCorrectlyIdentifySymlinkWithParentSymLink"
                },
                {
                    "function name": "testCleanDirWithASymlinkDir",
                    "function params": [],
                    "file name": "FileUtilsCleanSymlinksTestCase.java",
                    "file old path": null,
                    "file new path": "src/test/org/apache/commons/io/FileUtilsCleanSymlinksTestCase.java",
                    "full name": "src.test.org.apache.commons.io.FileUtilsCleanSymlinksTestCase.testCleanDirWithASymlinkDir"
                },
                {
                    "function name": "testCleanDirWithSymlinkFile",
                    "function params": [],
                    "file name": "FileUtilsCleanSymlinksTestCase.java",
                    "file old path": null,
                    "file new path": "src/test/org/apache/commons/io/FileUtilsCleanSymlinksTestCase.java",
                    "full name": "src.test.org.apache.commons.io.FileUtilsCleanSymlinksTestCase.testCleanDirWithSymlinkFile"
                },
                {
                    "function name": "setUp",
                    "function params": [],
                    "file name": "FileUtilsCleanSymlinksTestCase.java",
                    "file old path": null,
                    "file new path": "src/test/org/apache/commons/io/FileUtilsCleanSymlinksTestCase.java",
                    "full name": "src.test.org.apache.commons.io.FileUtilsCleanSymlinksTestCase.setUp"
                },
                {
                    "function name": "setupSymlink",
                    "function params": [
                        "res",
                        "link"
                    ],
                    "file name": "FileUtilsCleanSymlinksTestCase.java",
                    "file old path": null,
                    "file new path": "src/test/org/apache/commons/io/FileUtilsCleanSymlinksTestCase.java",
                    "full name": "src.test.org.apache.commons.io.FileUtilsCleanSymlinksTestCase.setupSymlink"
                },
                {
                    "function name": "testStillClearsIfGivenDirectoryIsASymlink",
                    "function params": [],
                    "file name": "FileUtilsCleanSymlinksTestCase.java",
                    "file old path": null,
                    "file new path": "src/test/org/apache/commons/io/FileUtilsCleanSymlinksTestCase.java",
                    "full name": "src.test.org.apache.commons.io.FileUtilsCleanSymlinksTestCase.testStillClearsIfGivenDirectoryIsASymlink"
                },
                {
                    "function name": "testIdentifiesSymlinkDir",
                    "function params": [],
                    "file name": "FileUtilsCleanSymlinksTestCase.java",
                    "file old path": null,
                    "file new path": "src/test/org/apache/commons/io/FileUtilsCleanSymlinksTestCase.java",
                    "full name": "src.test.org.apache.commons.io.FileUtilsCleanSymlinksTestCase.testIdentifiesSymlinkDir"
                },
                {
                    "function name": "testIdentifiesSymlinkFile",
                    "function params": [],
                    "file name": "FileUtilsCleanSymlinksTestCase.java",
                    "file old path": null,
                    "file new path": "src/test/org/apache/commons/io/FileUtilsCleanSymlinksTestCase.java",
                    "full name": "src.test.org.apache.commons.io.FileUtilsCleanSymlinksTestCase.testIdentifiesSymlinkFile"
                },
                {
                    "function name": "suite",
                    "function params": [],
                    "file name": "FileUtilsCleanSymlinksTestCase.java",
                    "file old path": null,
                    "file new path": "src/test/org/apache/commons/io/FileUtilsCleanSymlinksTestCase.java",
                    "full name": "src.test.org.apache.commons.io.FileUtilsCleanSymlinksTestCase.suite"
                },
                {
                    "function name": "testCleanDirWithParentSymlinks",
                    "function params": [],
                    "file name": "FileUtilsCleanSymlinksTestCase.java",
                    "file old path": null,
                    "file new path": "src/test/org/apache/commons/io/FileUtilsCleanSymlinksTestCase.java",
                    "full name": "src.test.org.apache.commons.io.FileUtilsCleanSymlinksTestCase.testCleanDirWithParentSymlinks"
                }
            ],
            "files that changed": [
                "src/java/org/apache/commons/io/FileUtils.java"
            ]
        },
        {
            "bug index": "302",
            "bug id": "IO-167",
            "hexsha": "01afc9d7d01e802ee3a0d91ff47c75041cff0cfe",
            "fix_hash": "5c13fa7579650c2cbcab61c6b18e509951f640aa",
            "description": "Case-insensitive operations are currently platform-dependent, please see [Common Bug #3|http://www.nabble.com/Re%3A-Common-Bugs-p14931921s177.html] for details.",
            "commit number version hash": 717,
            "commit number": 534,
            "function that changed": [
                {
                    "function name": "wildcardMatch",
                    "function params": [
                        "filename",
                        "wildcardMatcher",
                        "caseSensitivity"
                    ],
                    "file name": "FilenameUtils.java",
                    "file old path": "src/java/org/apache/commons/io/FilenameUtils.java",
                    "file new path": "src/java/org/apache/commons/io/FilenameUtils.java",
                    "full name": "src.java.org.apache.commons.io.FilenameUtils.wildcardMatch"
                },
                {
                    "function name": "checkIndexOf",
                    "function params": [
                        "str",
                        "strStartIndex",
                        "search"
                    ],
                    "file name": "IOCase.java",
                    "file old path": "src/java/org/apache/commons/io/IOCase.java",
                    "file new path": "src/java/org/apache/commons/io/IOCase.java",
                    "full name": "src.java.org.apache.commons.io.IOCase.checkIndexOf"
                },
                {
                    "function name": "checkRegionMatches",
                    "function params": [
                        "str",
                        "strStartIndex",
                        "search"
                    ],
                    "file name": "IOCase.java",
                    "file old path": "src/java/org/apache/commons/io/IOCase.java",
                    "file new path": "src/java/org/apache/commons/io/IOCase.java",
                    "full name": "src.java.org.apache.commons.io.IOCase.checkRegionMatches"
                },
                {
                    "function name": "testLocaleIndependence",
                    "function params": [],
                    "file name": "FilenameUtilsWildcardTestCase.java",
                    "file old path": "src/test/org/apache/commons/io/FilenameUtilsWildcardTestCase.java",
                    "file new path": "src/test/org/apache/commons/io/FilenameUtilsWildcardTestCase.java",
                    "full name": "src.test.org.apache.commons.io.FilenameUtilsWildcardTestCase.testLocaleIndependence"
                },
                {
                    "function name": "test_checkIndexOf_case",
                    "function params": [],
                    "file name": "IOCaseTestCase.java",
                    "file old path": "src/test/org/apache/commons/io/IOCaseTestCase.java",
                    "file new path": "src/test/org/apache/commons/io/IOCaseTestCase.java",
                    "full name": "src.test.org.apache.commons.io.IOCaseTestCase.test_checkIndexOf_case"
                },
                {
                    "function name": "test_checkIndexOf_functionality",
                    "function params": [],
                    "file name": "IOCaseTestCase.java",
                    "file old path": "src/test/org/apache/commons/io/IOCaseTestCase.java",
                    "file new path": "src/test/org/apache/commons/io/IOCaseTestCase.java",
                    "full name": "src.test.org.apache.commons.io.IOCaseTestCase.test_checkIndexOf_functionality"
                }
            ],
            "files that changed": [
                "src/java/org/apache/commons/io/FilenameUtils.java",
                "src/java/org/apache/commons/io/IOCase.java",
                "src/test/org/apache/commons/io/FilenameUtilsWildcardTestCase.java",
                "src/test/org/apache/commons/io/IOCaseTestCase.java"
            ]
        },
        {
            "bug index": "303",
            "bug id": "IO-167",
            "hexsha": "01afc9d7d01e802ee3a0d91ff47c75041cff0cfe",
            "fix_hash": "ce90015bdc3614f88fbe55a697731a2f5b052ca3",
            "description": "Case-insensitive operations are currently platform-dependent, please see [Common Bug #3|http://www.nabble.com/Re%3A-Common-Bugs-p14931921s177.html] for details.",
            "commit number version hash": 717,
            "commit number": 532,
            "function that changed": [
                {
                    "function name": "performCommand",
                    "function params": [
                        "cmdAttribs",
                        "max"
                    ],
                    "file name": "FileSystemUtils.java",
                    "file old path": "src/java/org/apache/commons/io/FileSystemUtils.java",
                    "file new path": "src/java/org/apache/commons/io/FileSystemUtils.java",
                    "full name": "src.java.org.apache.commons.io.FileSystemUtils.performCommand"
                },
                {
                    "function name": "testGetFreeSpace_String",
                    "function params": [],
                    "file name": "FileSystemUtilsTestCase.java",
                    "file old path": "src/test/org/apache/commons/io/FileSystemUtilsTestCase.java",
                    "file new path": "src/test/org/apache/commons/io/FileSystemUtilsTestCase.java",
                    "full name": "src.test.org.apache.commons.io.FileSystemUtilsTestCase.testGetFreeSpace_String"
                }
            ],
            "files that changed": [
                "src/java/org/apache/commons/io/FileSystemUtils.java",
                "src/test/org/apache/commons/io/FileSystemUtilsTestCase.java"
            ]
        },
        {
            "bug index": "304",
            "bug id": "IO-163",
            "hexsha": "01afc9d7d01e802ee3a0d91ff47c75041cff0cfe",
            "fix_hash": "e87486f1a35090a754fdf95f3cd1178bcfd7e2ba",
            "description": "The method FileUtils.toURLs() uses the following method to convert from File to URL:\n    File.toURL();\n\nThis method has scary warnings that it's a bad way to do the conversion because characters will not be escaped as required in URL strings.  In Java 1.6, this method has actually been deprecated.  All recent JDK versions recommend instead using:\n    File.toURI().toURL();\n\nas the URI code will properly perform the escaping.",
            "commit number version hash": 717,
            "commit number": 524,
            "function that changed": [
                {
                    "function name": "toURLs",
                    "function params": [
                        "files"
                    ],
                    "file name": "FileUtils.java",
                    "file old path": "src/java/org/apache/commons/io/FileUtils.java",
                    "file new path": "src/java/org/apache/commons/io/FileUtils.java",
                    "full name": "src.java.org.apache.commons.io.FileUtils.toURLs"
                },
                {
                    "function name": "testToURLs1",
                    "function params": [],
                    "file name": "FileUtilsTestCase.java",
                    "file old path": "src/test/org/apache/commons/io/FileUtilsTestCase.java",
                    "file new path": "src/test/org/apache/commons/io/FileUtilsTestCase.java",
                    "full name": "src.test.org.apache.commons.io.FileUtilsTestCase.testToURLs1"
                }
            ],
            "files that changed": [
                "src/java/org/apache/commons/io/FileUtils.java",
                "src/test/org/apache/commons/io/FileUtilsTestCase.java"
            ]
        },
        {
            "bug index": "305",
            "bug id": "IO-160",
            "hexsha": "01afc9d7d01e802ee3a0d91ff47c75041cff0cfe",
            "fix_hash": "c3b706ab8852c57446064031067dcbb92380502d",
            "description": "FileSystemUtils.freeSpace fails its tests on Solaris.  The following patch fixes it, and with it all tests pass on:\nRedHat (FC7, EL3, EL4, CentOS4, CentOS5) and Solaris (8, 9-sparc, 9-i386, 10-sparc, 10-i386).\n\nThe fix is to force the use of /usr/xpg4/bin/df on Solaris, which is the posix version.  This then means that the output-parsing works as expected.\n\n\nIndex: src/java/org/apache/commons/io/FileSystemUtils.java\n===================================================================\nRCS file: /cvsroot/upstream/jpackage/jakarta-commons-io/src/java/org/apache/commons/io/FileSystemUtils.java,v\nretrieving revision 1.1.1.1\nretrieving revision 1.1.1.1.2.3\ndiff -u -r1.1.1.1 -r1.1.1.1.2.3\n--- src/java/org/apache/commons/io/FileSystemUtils.java 2 Mar 2007 06:31:03 -0000       1.1.1.1\n+++ src/java/org/apache/commons/io/FileSystemUtils.java 28 Mar 2008 11:56:06 -0000      1.1.1.1.2.3\n@@ -64,6 +64,10 @@\n \n     /** The operating system flag. */\n     private static final int OS;\n+\n+    /** The path to df */\n+    private static String dfPath = \"df\";\n+\n     static {\n         int os = OTHER;\n         try {\n@@ -76,9 +80,6 @@\n             if (osName.indexOf(\"windows\") != -1) {\n                 os = WINDOWS;\n             } else if (osName.indexOf(\"linux\") != -1 ||\n-                osName.indexOf(\"sun os\") != -1 ||\n-                osName.indexOf(\"sunos\") != -1 ||\n-                osName.indexOf(\"solaris\") != -1 ||\n                 osName.indexOf(\"mpe/ix\") != -1 ||\n                 osName.indexOf(\"freebsd\") != -1 ||\n                 osName.indexOf(\"irix\") != -1 ||\n@@ -86,6 +87,11 @@\n                 osName.indexOf(\"unix\") != -1 ||\n                 osName.indexOf(\"mac os x\") != -1) {\n                 os = UNIX;\n+            } else if (osName.indexOf(\"sun os\") != -1 ||\n+                osName.indexOf(\"sunos\") != -1 ||\n+                osName.indexOf(\"solaris\") != -1) {\n+                os = POSIX_UNIX;\n+                dfPath = \"/usr/xpg4/bin/df\";\n             } else if (osName.indexOf(\"hp-ux\") != -1 ||\n                 osName.indexOf(\"aix\") != -1) {\n                 os = POSIX_UNIX;\n@@ -116,7 +122,7 @@\n      * of {@link #freeSpaceKb(String)} which returns a result in kilobytes.\n      * <p>\n      * Note that some OS's are NOT currently supported, including OS/390,\n-     * OpenVMS and and SunOS 5. (SunOS is supported by <code>freeSpaceKb</code>.)\n+     * OpenVMS. \n      * <pre>\n      * FileSystemUtils.freeSpace(\"C:\");       // Windows\n      * FileSystemUtils.freeSpace(\"/volume\");  // *nix\n@@ -317,14 +323,14 @@\n             flags += \"P\";\n         }\n         String[] cmdAttribs = \n-            (flags.length() > 1 ? new String[] {\"df\", flags, path} : new String[] {\"df\", path});\n+            (flags.length() > 1 ? new String[] {dfPath, flags, path} : new String[] {dfPath, path});\n         \n         // perform the command, asking for up to 3 lines (header, interesting, overflow)\n         List lines = performCommand(cmdAttribs, 3);\n         if (lines.size() < 2) {\n             // unknown problem, throw exception\n             throw new IOException(\n-                    \"Command line 'df' did not return info as expected \" +\n+                    \"Command line '\" + dfPath + \"' did not return info as expected \" +\n                     \"for path '\" + path + \"'- response was \" + lines);\n         }\n         String line2 = (String) lines.get(1); // the line we're interested in\n@@ -338,7 +344,7 @@\n                 tok = new StringTokenizer(line3, \" \");\n             } else {\n                 throw new IOException(\n-                        \"Command line 'df' did not return data as expected \" +\n+                        \"Command line '\" + dfPath + \"' did not return data as expected \" +\n                         \"for path '\" + path + \"'- check path is valid\");\n             }\n         } else {\n@@ -364,14 +370,14 @@\n             long bytes = Long.parseLong(freeSpace);\n             if (bytes < 0) {\n                 throw new IOException(\n-                        \"Command line 'df' did not find free space in response \" +\n+                        \"Command line '\" + dfPath + \"' did not find free space in response \" +\n                         \"for path '\" + path + \"'- check path is valid\");\n             }\n             return bytes;\n             \n         } catch (NumberFormatException ex) {\n             throw new IOException(\n-                    \"Command line 'df' did not return numeric data as expected \" +\n+                    \"Command line '\" + dfPath + \"' did not return numeric data as expected \" +\n                     \"for path '\" + path + \"'- check path is valid\");\n         }\n     }\nIndex: src/test/org/apache/commons/io/FileSystemUtilsTestCase.java\n===================================================================\nRCS file: /cvsroot/upstream/jpackage/jakarta-commons-io/src/test/org/apache/commons/io/FileSystemUtilsTestCase.java,v\nretrieving revision 1.1.1.1\nretrieving revision 1.1.1.1.2.6\ndiff -u -r1.1.1.1 -r1.1.1.1.2.6\n--- src/test/org/apache/commons/io/FileSystemUtilsTestCase.java 2 Mar 2007 06:30:58 -0000       1.1.1.1\n+++ src/test/org/apache/commons/io/FileSystemUtilsTestCase.java 28 Mar 2008 15:26:43 -0000      1.1.1.1.2.6\n@@ -68,8 +68,13 @@\n             // have to figure out unix block size\n             String[] cmd = null;\n             String osName = System.getProperty(\"os.name\");\n+            osName = osName.toLowerCase();\n+\n             if (osName.indexOf(\"hp-ux\") >= 0 || osName.indexOf(\"aix\") >= 0) {\n                 cmd = new String[] {\"df\", \"-P\", \"/\"};\n+            } else if (osName.indexOf(\"sunos\") >= 0 || osName.indexOf(\"sun os\") >= 0\n+                       || osName.indexOf(\"solaris\") >= 0) {\n+                cmd = new String[] {\"/usr/xpg4/bin/df\", \"-P\", \"/\"};\n             } else {\n                 cmd = new String[] {\"df\", \"/\"};\n             }\n",
            "commit number version hash": 717,
            "commit number": 523,
            "function that changed": [
                {
                    "function name": "freeSpaceUnix",
                    "function params": [
                        "path",
                        "kb",
                        "posix"
                    ],
                    "file name": "FileSystemUtils.java",
                    "file old path": "src/java/org/apache/commons/io/FileSystemUtils.java",
                    "file new path": "src/java/org/apache/commons/io/FileSystemUtils.java",
                    "full name": "src.java.org.apache.commons.io.FileSystemUtils.freeSpaceUnix"
                },
                {
                    "function name": "parseBytes",
                    "function params": [
                        "freeSpace",
                        "path"
                    ],
                    "file name": "FileSystemUtils.java",
                    "file old path": "src/java/org/apache/commons/io/FileSystemUtils.java",
                    "file new path": "src/java/org/apache/commons/io/FileSystemUtils.java",
                    "full name": "src.java.org.apache.commons.io.FileSystemUtils.parseBytes"
                }
            ],
            "files that changed": [
                "src/java/org/apache/commons/io/FileSystemUtils.java"
            ]
        },
        {
            "bug index": "306",
            "bug id": "IO-160",
            "hexsha": "01afc9d7d01e802ee3a0d91ff47c75041cff0cfe",
            "fix_hash": "6512f64a02c7d7c6b7c247a0f538e135132c9aae",
            "description": "FileSystemUtils.freeSpace fails its tests on Solaris.  The following patch fixes it, and with it all tests pass on:\nRedHat (FC7, EL3, EL4, CentOS4, CentOS5) and Solaris (8, 9-sparc, 9-i386, 10-sparc, 10-i386).\n\nThe fix is to force the use of /usr/xpg4/bin/df on Solaris, which is the posix version.  This then means that the output-parsing works as expected.\n\n\nIndex: src/java/org/apache/commons/io/FileSystemUtils.java\n===================================================================\nRCS file: /cvsroot/upstream/jpackage/jakarta-commons-io/src/java/org/apache/commons/io/FileSystemUtils.java,v\nretrieving revision 1.1.1.1\nretrieving revision 1.1.1.1.2.3\ndiff -u -r1.1.1.1 -r1.1.1.1.2.3\n--- src/java/org/apache/commons/io/FileSystemUtils.java 2 Mar 2007 06:31:03 -0000       1.1.1.1\n+++ src/java/org/apache/commons/io/FileSystemUtils.java 28 Mar 2008 11:56:06 -0000      1.1.1.1.2.3\n@@ -64,6 +64,10 @@\n \n     /** The operating system flag. */\n     private static final int OS;\n+\n+    /** The path to df */\n+    private static String dfPath = \"df\";\n+\n     static {\n         int os = OTHER;\n         try {\n@@ -76,9 +80,6 @@\n             if (osName.indexOf(\"windows\") != -1) {\n                 os = WINDOWS;\n             } else if (osName.indexOf(\"linux\") != -1 ||\n-                osName.indexOf(\"sun os\") != -1 ||\n-                osName.indexOf(\"sunos\") != -1 ||\n-                osName.indexOf(\"solaris\") != -1 ||\n                 osName.indexOf(\"mpe/ix\") != -1 ||\n                 osName.indexOf(\"freebsd\") != -1 ||\n                 osName.indexOf(\"irix\") != -1 ||\n@@ -86,6 +87,11 @@\n                 osName.indexOf(\"unix\") != -1 ||\n                 osName.indexOf(\"mac os x\") != -1) {\n                 os = UNIX;\n+            } else if (osName.indexOf(\"sun os\") != -1 ||\n+                osName.indexOf(\"sunos\") != -1 ||\n+                osName.indexOf(\"solaris\") != -1) {\n+                os = POSIX_UNIX;\n+                dfPath = \"/usr/xpg4/bin/df\";\n             } else if (osName.indexOf(\"hp-ux\") != -1 ||\n                 osName.indexOf(\"aix\") != -1) {\n                 os = POSIX_UNIX;\n@@ -116,7 +122,7 @@\n      * of {@link #freeSpaceKb(String)} which returns a result in kilobytes.\n      * <p>\n      * Note that some OS's are NOT currently supported, including OS/390,\n-     * OpenVMS and and SunOS 5. (SunOS is supported by <code>freeSpaceKb</code>.)\n+     * OpenVMS. \n      * <pre>\n      * FileSystemUtils.freeSpace(\"C:\");       // Windows\n      * FileSystemUtils.freeSpace(\"/volume\");  // *nix\n@@ -317,14 +323,14 @@\n             flags += \"P\";\n         }\n         String[] cmdAttribs = \n-            (flags.length() > 1 ? new String[] {\"df\", flags, path} : new String[] {\"df\", path});\n+            (flags.length() > 1 ? new String[] {dfPath, flags, path} : new String[] {dfPath, path});\n         \n         // perform the command, asking for up to 3 lines (header, interesting, overflow)\n         List lines = performCommand(cmdAttribs, 3);\n         if (lines.size() < 2) {\n             // unknown problem, throw exception\n             throw new IOException(\n-                    \"Command line 'df' did not return info as expected \" +\n+                    \"Command line '\" + dfPath + \"' did not return info as expected \" +\n                     \"for path '\" + path + \"'- response was \" + lines);\n         }\n         String line2 = (String) lines.get(1); // the line we're interested in\n@@ -338,7 +344,7 @@\n                 tok = new StringTokenizer(line3, \" \");\n             } else {\n                 throw new IOException(\n-                        \"Command line 'df' did not return data as expected \" +\n+                        \"Command line '\" + dfPath + \"' did not return data as expected \" +\n                         \"for path '\" + path + \"'- check path is valid\");\n             }\n         } else {\n@@ -364,14 +370,14 @@\n             long bytes = Long.parseLong(freeSpace);\n             if (bytes < 0) {\n                 throw new IOException(\n-                        \"Command line 'df' did not find free space in response \" +\n+                        \"Command line '\" + dfPath + \"' did not find free space in response \" +\n                         \"for path '\" + path + \"'- check path is valid\");\n             }\n             return bytes;\n             \n         } catch (NumberFormatException ex) {\n             throw new IOException(\n-                    \"Command line 'df' did not return numeric data as expected \" +\n+                    \"Command line '\" + dfPath + \"' did not return numeric data as expected \" +\n                     \"for path '\" + path + \"'- check path is valid\");\n         }\n     }\nIndex: src/test/org/apache/commons/io/FileSystemUtilsTestCase.java\n===================================================================\nRCS file: /cvsroot/upstream/jpackage/jakarta-commons-io/src/test/org/apache/commons/io/FileSystemUtilsTestCase.java,v\nretrieving revision 1.1.1.1\nretrieving revision 1.1.1.1.2.6\ndiff -u -r1.1.1.1 -r1.1.1.1.2.6\n--- src/test/org/apache/commons/io/FileSystemUtilsTestCase.java 2 Mar 2007 06:30:58 -0000       1.1.1.1\n+++ src/test/org/apache/commons/io/FileSystemUtilsTestCase.java 28 Mar 2008 15:26:43 -0000      1.1.1.1.2.6\n@@ -68,8 +68,13 @@\n             // have to figure out unix block size\n             String[] cmd = null;\n             String osName = System.getProperty(\"os.name\");\n+            osName = osName.toLowerCase();\n+\n             if (osName.indexOf(\"hp-ux\") >= 0 || osName.indexOf(\"aix\") >= 0) {\n                 cmd = new String[] {\"df\", \"-P\", \"/\"};\n+            } else if (osName.indexOf(\"sunos\") >= 0 || osName.indexOf(\"sun os\") >= 0\n+                       || osName.indexOf(\"solaris\") >= 0) {\n+                cmd = new String[] {\"/usr/xpg4/bin/df\", \"-P\", \"/\"};\n             } else {\n                 cmd = new String[] {\"df\", \"/\"};\n             }\n",
            "commit number version hash": 717,
            "commit number": 522,
            "function that changed": [
                {
                    "function name": "if",
                    "function params": [
                        "1"
                    ],
                    "file name": "FileSystemUtils.java",
                    "file old path": "src/java/org/apache/commons/io/FileSystemUtils.java",
                    "file new path": "src/java/org/apache/commons/io/FileSystemUtils.java",
                    "full name": "src.java.org.apache.commons.io.FileSystemUtils.if"
                },
                {
                    "function name": "if",
                    "function params": [
                        "1"
                    ],
                    "file name": "FileSystemUtils.java",
                    "file old path": "src/java/org/apache/commons/io/FileSystemUtils.java",
                    "file new path": "src/java/org/apache/commons/io/FileSystemUtils.java",
                    "full name": "src.java.org.apache.commons.io.FileSystemUtils.if"
                },
                {
                    "function name": "freeSpaceUnix",
                    "function params": [
                        "path",
                        "kb",
                        "posix"
                    ],
                    "file name": "FileSystemUtils.java",
                    "file old path": "src/java/org/apache/commons/io/FileSystemUtils.java",
                    "file new path": "src/java/org/apache/commons/io/FileSystemUtils.java",
                    "full name": "src.java.org.apache.commons.io.FileSystemUtils.freeSpaceUnix"
                },
                {
                    "function name": "if",
                    "function params": [
                        "1"
                    ],
                    "file name": "FileSystemUtils.java",
                    "file old path": "src/java/org/apache/commons/io/FileSystemUtils.java",
                    "file new path": "src/java/org/apache/commons/io/FileSystemUtils.java",
                    "full name": "src.java.org.apache.commons.io.FileSystemUtils.if"
                },
                {
                    "function name": "parseBytes",
                    "function params": [
                        "freeSpace",
                        "path"
                    ],
                    "file name": "FileSystemUtils.java",
                    "file old path": "src/java/org/apache/commons/io/FileSystemUtils.java",
                    "file new path": "src/java/org/apache/commons/io/FileSystemUtils.java",
                    "full name": "src.java.org.apache.commons.io.FileSystemUtils.parseBytes"
                },
                {
                    "function name": "testGetFreeSpace_String",
                    "function params": [],
                    "file name": "FileSystemUtilsTestCase.java",
                    "file old path": "src/test/org/apache/commons/io/FileSystemUtilsTestCase.java",
                    "file new path": "src/test/org/apache/commons/io/FileSystemUtilsTestCase.java",
                    "full name": "src.test.org.apache.commons.io.FileSystemUtilsTestCase.testGetFreeSpace_String"
                }
            ],
            "files that changed": [
                "src/java/org/apache/commons/io/FileSystemUtils.java",
                "src/test/org/apache/commons/io/FileSystemUtilsTestCase.java"
            ]
        },
        {
            "bug index": "307",
            "bug id": "IO-1",
            "hexsha": "742c51feeaf75542ab9db6782ad3d2ad506fb871",
            "fix_hash": "a7628b03ac47459a47f2c340bb474afe50ea0a31",
            "description": "FileUtils.forceMkdir(File) calls File.mkdirs() to create the directory. The\nJavaDoc of this method does not mention that any necessary but nonexistent\nparent directories are created, too.",
            "commit number version hash": 443,
            "commit number": 500,
            "function that changed": [
                {
                    "function name": "suite",
                    "function params": [],
                    "file name": "PackageTestSuite.java",
                    "file old path": "src/test/org/apache/commons/io/PackageTestSuite.java",
                    "file new path": "src/test/org/apache/commons/io/PackageTestSuite.java",
                    "full name": "src.test.org.apache.commons.io.PackageTestSuite.suite"
                },
                {
                    "function name": "suite",
                    "function params": [],
                    "file name": "PackageTestSuite.java",
                    "file old path": "src/test/org/apache/commons/io/filefilter/PackageTestSuite.java",
                    "file new path": "src/test/org/apache/commons/io/filefilter/PackageTestSuite.java",
                    "full name": "src.test.org.apache.commons.io.filefilter.PackageTestSuite.suite"
                },
                {
                    "function name": "suite",
                    "function params": [],
                    "file name": "PackageTestSuite.java",
                    "file old path": "src/test/org/apache/commons/io/input/PackageTestSuite.java",
                    "file new path": "src/test/org/apache/commons/io/input/PackageTestSuite.java",
                    "full name": "src.test.org.apache.commons.io.input.PackageTestSuite.suite"
                },
                {
                    "function name": "suite",
                    "function params": [],
                    "file name": "PackageTestSuite.java",
                    "file old path": "src/test/org/apache/commons/io/output/PackageTestSuite.java",
                    "file new path": "src/test/org/apache/commons/io/output/PackageTestSuite.java",
                    "full name": "src.test.org.apache.commons.io.output.PackageTestSuite.suite"
                }
            ],
            "files that changed": [
                "src/test/org/apache/commons/io/PackageTestSuite.java",
                "src/test/org/apache/commons/io/filefilter/PackageTestSuite.java",
                "src/test/org/apache/commons/io/input/PackageTestSuite.java",
                "src/test/org/apache/commons/io/output/PackageTestSuite.java"
            ]
        },
        {
            "bug index": "308",
            "bug id": "IO-4",
            "hexsha": "742c51feeaf75542ab9db6782ad3d2ad506fb871",
            "fix_hash": "fe6ec030da1ab53b5e5dc481572c9f072be3b965",
            "description": "It is better not to allocate a new buffer when writing the memory buffer to file.\n\nrecommend using writeTo() insteand of toByteArray()\nat DeferredFileOutputStream.java:120\n------------\nprotected void thresholdReached() throws IOException\n{\n    FileOutputStream fos = new FileOutputStream(outputFile);\n    memoryOutputStream.writeTo(fos);\n    diskOutputStream = fos;\n    currentOutputStream = fos;\n    memoryOutputStream = null;\n}\n----------------------",
            "commit number version hash": 443,
            "commit number": 490,
            "function that changed": [],
            "files that changed": [
                "src/java/org/apache/commons/io/input/AutoCloseInputStream.java",
                "src/java/org/apache/commons/io/input/ProxyInputStream.java",
                "src/java/org/apache/commons/io/input/ProxyReader.java",
                "src/java/org/apache/commons/io/input/SwappedDataInputStream.java",
                "src/java/org/apache/commons/io/output/ByteArrayOutputStream.java",
                "src/java/org/apache/commons/io/output/FileWriterWithEncoding.java",
                "src/java/org/apache/commons/io/output/LockableFileWriter.java",
                "src/java/org/apache/commons/io/output/NullOutputStream.java",
                "src/java/org/apache/commons/io/output/NullWriter.java",
                "src/java/org/apache/commons/io/output/ProxyOutputStream.java",
                "src/java/org/apache/commons/io/output/ProxyWriter.java",
                "src/java/org/apache/commons/io/output/TeeOutputStream.java"
            ]
        },
        {
            "bug index": "309",
            "bug id": "IO-1",
            "hexsha": "742c51feeaf75542ab9db6782ad3d2ad506fb871",
            "fix_hash": "e1dc23052f4005c59cec7fe5cee31daa19d00a7d",
            "description": "FileUtils.forceMkdir(File) calls File.mkdirs() to create the directory. The\nJavaDoc of this method does not mention that any necessary but nonexistent\nparent directories are created, too.",
            "commit number version hash": 443,
            "commit number": 478,
            "function that changed": [
                {
                    "function name": "CharSequenceReader",
                    "function params": [
                        "charSequence"
                    ],
                    "file name": "CharSequenceReader.java",
                    "file old path": "src/java/org/apache/commons/io/input/CharSequenceReader.java",
                    "file new path": "src/java/org/apache/commons/io/input/CharSequenceReader.java",
                    "full name": "src.java.org.apache.commons.io.input.CharSequenceReader.CharSequenceReader"
                }
            ],
            "files that changed": [
                "src/java/org/apache/commons/io/input/CharSequenceReader.java"
            ]
        },
        {
            "bug index": "310",
            "bug id": "IO-141",
            "hexsha": "651332ef291809e8271cec74fdd6691cfb725f9f",
            "fix_hash": "2f8d0922c8c7d1be2c12fba6264f08acdbae47d1",
            "description": "When you attempt to copy a directory and the destination directory is inside the source directory an inifinite loop occurs in the copyDirectory causing Commons-IO to create a folder w/o stopping until its reaches OS limitation.\n\nThis code will recreate the bug:\n\nFileUtils.copyDirectory(new File(\"C:\\\\temp\\\\test-io\\\\a\\\\.\"), new File(\"C:\\\\temp\\\\test-io\\\\a\\\\.\" + File.separator + new Date().getTime()));\n\nMake sure C:\\temp\\test-io\\a exists",
            "commit number version hash": 499,
            "commit number": 474,
            "function that changed": [
                {
                    "function name": "doCopyDirectory",
                    "function params": [
                        "srcDir",
                        "destDir",
                        "preserveFileDate"
                    ],
                    "file name": "FileUtils.java",
                    "file old path": "src/java/org/apache/commons/io/FileUtils.java",
                    "file new path": "src/java/org/apache/commons/io/FileUtils.java",
                    "full name": "src.java.org.apache.commons.io.FileUtils.doCopyDirectory"
                },
                {
                    "function name": "copyDirectory",
                    "function params": [
                        "srcDir",
                        "destDir",
                        "preserveFileDate"
                    ],
                    "file name": "FileUtils.java",
                    "file old path": "src/java/org/apache/commons/io/FileUtils.java",
                    "file new path": "src/java/org/apache/commons/io/FileUtils.java",
                    "full name": "src.java.org.apache.commons.io.FileUtils.copyDirectory"
                },
                {
                    "function name": "doCopyDirectory",
                    "function params": [
                        "srcDir",
                        "destDir",
                        "preserveFileDate",
                        "exclusionList"
                    ],
                    "file name": "FileUtils.java",
                    "file old path": "src/java/org/apache/commons/io/FileUtils.java",
                    "file new path": "src/java/org/apache/commons/io/FileUtils.java",
                    "full name": "src.java.org.apache.commons.io.FileUtils.doCopyDirectory"
                },
                {
                    "function name": "ListDirectoryWalker",
                    "function params": [
                        "startDirectory"
                    ],
                    "file name": "FileUtilsTestCase.java",
                    "file old path": "src/test/org/apache/commons/io/FileUtilsTestCase.java",
                    "file new path": "src/test/org/apache/commons/io/FileUtilsTestCase.java",
                    "full name": "src.test.org.apache.commons.io.FileUtilsTestCase.ListDirectoryWalker"
                },
                {
                    "function name": "ListDirectoryWalker",
                    "function params": [
                        "directory",
                        "depth",
                        "results"
                    ],
                    "file name": "FileUtilsTestCase.java",
                    "file old path": "src/test/org/apache/commons/io/FileUtilsTestCase.java",
                    "file new path": "src/test/org/apache/commons/io/FileUtilsTestCase.java",
                    "full name": "src.test.org.apache.commons.io.FileUtilsTestCase.ListDirectoryWalker"
                },
                {
                    "function name": "ListDirectoryWalker",
                    "function params": [],
                    "file name": "FileUtilsTestCase.java",
                    "file old path": "src/test/org/apache/commons/io/FileUtilsTestCase.java",
                    "file new path": "src/test/org/apache/commons/io/FileUtilsTestCase.java",
                    "full name": "src.test.org.apache.commons.io.FileUtilsTestCase.ListDirectoryWalker"
                },
                {
                    "function name": "ListDirectoryWalker",
                    "function params": [
                        "file",
                        "depth",
                        "results"
                    ],
                    "file name": "FileUtilsTestCase.java",
                    "file old path": "src/test/org/apache/commons/io/FileUtilsTestCase.java",
                    "file new path": "src/test/org/apache/commons/io/FileUtilsTestCase.java",
                    "full name": "src.test.org.apache.commons.io.FileUtilsTestCase.ListDirectoryWalker"
                },
                {
                    "function name": "createFilesForTestCopyDirectory",
                    "function params": [
                        "grandParentDir",
                        "parentDir",
                        "childDir"
                    ],
                    "file name": "FileUtilsTestCase.java",
                    "file old path": "src/test/org/apache/commons/io/FileUtilsTestCase.java",
                    "file new path": "src/test/org/apache/commons/io/FileUtilsTestCase.java",
                    "full name": "src.test.org.apache.commons.io.FileUtilsTestCase.createFilesForTestCopyDirectory"
                },
                {
                    "function name": "testCopyDirectoryToGrandChild",
                    "function params": [],
                    "file name": "FileUtilsTestCase.java",
                    "file old path": "src/test/org/apache/commons/io/FileUtilsTestCase.java",
                    "file new path": "src/test/org/apache/commons/io/FileUtilsTestCase.java",
                    "full name": "src.test.org.apache.commons.io.FileUtilsTestCase.testCopyDirectoryToGrandChild"
                },
                {
                    "function name": "testCopyDirectoryToChild",
                    "function params": [],
                    "file name": "FileUtilsTestCase.java",
                    "file old path": "src/test/org/apache/commons/io/FileUtilsTestCase.java",
                    "file new path": "src/test/org/apache/commons/io/FileUtilsTestCase.java",
                    "full name": "src.test.org.apache.commons.io.FileUtilsTestCase.testCopyDirectoryToChild"
                }
            ],
            "files that changed": [
                "src/java/org/apache/commons/io/FileUtils.java",
                "src/test/org/apache/commons/io/FileUtilsTestCase.java"
            ]
        },
        {
            "bug index": "311",
            "bug id": "IO-147",
            "hexsha": "651332ef291809e8271cec74fdd6691cfb725f9f",
            "fix_hash": "50f9c9370c1286039fb6750e08e0fcbc20c6adc0",
            "description": "If there is an orphaned softlink a -> b, but b does not exists anymore than the softlink will not be removed. This happens when you call FileUtils.deleteDirectory() and when the linked target b is deleted earlier than the link.\n\nThis is caused by the \"ugly\" file.exists() call in forceDelete()\n\nif (!file.exists()) {\n         throw new FileNotFoundException(\"File does not exist: \" + file);\n}\n\nif this check is not done, everything works as expected. I think this test is not neccessery, cause file.delete will test this better.\n\nPlease discuss and change this.\n\nthanx\n\nStefan ",
            "commit number version hash": 499,
            "commit number": 472,
            "function that changed": [
                {
                    "function name": "forceDelete",
                    "function params": [
                        "file"
                    ],
                    "file name": "FileUtils.java",
                    "file old path": "src/java/org/apache/commons/io/FileUtils.java",
                    "file new path": "src/java/org/apache/commons/io/FileUtils.java",
                    "full name": "src.java.org.apache.commons.io.FileUtils.forceDelete"
                },
                {
                    "function name": "testForceDeleteAFile3",
                    "function params": [],
                    "file name": "FileUtilsTestCase.java",
                    "file old path": "src/test/org/apache/commons/io/FileUtilsTestCase.java",
                    "file new path": "src/test/org/apache/commons/io/FileUtilsTestCase.java",
                    "full name": "src.test.org.apache.commons.io.FileUtilsTestCase.testForceDeleteAFile3"
                }
            ],
            "files that changed": [
                "src/java/org/apache/commons/io/FileUtils.java",
                "src/test/org/apache/commons/io/FileUtilsTestCase.java"
            ]
        },
        {
            "bug index": "312",
            "bug id": "IO-136",
            "hexsha": "651332ef291809e8271cec74fdd6691cfb725f9f",
            "fix_hash": "4576857e33fc0aa9682ba77a6e464213ec15b829",
            "description": "HexDump has two private static dump() method's that alter static instances of StringBuffer:\n\ndump(long) modifies static StringBuffer variable _lbuffer returning _lbuffer \ndump(char) modifies static StringBuffer variable _cbuffer returning _cbuffer\n\nBoth these methods are called by the public static dump(byte[], long, OutputStream, int) method. Multiple threads calling the public dump method at the same time could cause these StringBuffer to contain mixed up data and result in a bug.",
            "commit number version hash": 499,
            "commit number": 462,
            "function that changed": [
                {
                    "function name": "dump",
                    "function params": [
                        "data",
                        "offset",
                        "stream",
                        "index"
                    ],
                    "file name": "HexDump.java",
                    "file old path": "src/java/org/apache/commons/io/HexDump.java",
                    "file new path": "src/java/org/apache/commons/io/HexDump.java",
                    "full name": "src.java.org.apache.commons.io.HexDump.dump"
                },
                {
                    "function name": "dump",
                    "function params": [
                        "value"
                    ],
                    "file name": "HexDump.java",
                    "file old path": "src/java/org/apache/commons/io/HexDump.java",
                    "file new path": "src/java/org/apache/commons/io/HexDump.java",
                    "full name": "src.java.org.apache.commons.io.HexDump.dump"
                },
                {
                    "function name": "dump",
                    "function params": [
                        "_lbuffer",
                        "value"
                    ],
                    "file name": "HexDump.java",
                    "file old path": "src/java/org/apache/commons/io/HexDump.java",
                    "file new path": "src/java/org/apache/commons/io/HexDump.java",
                    "full name": "src.java.org.apache.commons.io.HexDump.dump"
                },
                {
                    "function name": "dump",
                    "function params": [
                        "_cbuffer",
                        "value"
                    ],
                    "file name": "HexDump.java",
                    "file old path": "src/java/org/apache/commons/io/HexDump.java",
                    "file new path": "src/java/org/apache/commons/io/HexDump.java",
                    "full name": "src.java.org.apache.commons.io.HexDump.dump"
                },
                {
                    "function name": "dump",
                    "function params": [
                        "value"
                    ],
                    "file name": "HexDump.java",
                    "file old path": "src/java/org/apache/commons/io/HexDump.java",
                    "file new path": "src/java/org/apache/commons/io/HexDump.java",
                    "full name": "src.java.org.apache.commons.io.HexDump.dump"
                }
            ],
            "files that changed": [
                "src/java/org/apache/commons/io/HexDump.java"
            ]
        },
        {
            "bug index": "315",
            "bug id": "IO-1",
            "hexsha": "742c51feeaf75542ab9db6782ad3d2ad506fb871",
            "fix_hash": "186225b7d611ab2252024d4a38d8fb1091b7ebab",
            "description": "FileUtils.forceMkdir(File) calls File.mkdirs() to create the directory. The\nJavaDoc of this method does not mention that any necessary but nonexistent\nparent directories are created, too.",
            "commit number version hash": 443,
            "commit number": 441,
            "function that changed": [],
            "files that changed": [
                "src/java/org/apache/commons/io/FileCleaningTracker.java"
            ]
        },
        {
            "bug index": "316",
            "bug id": "IO-117",
            "hexsha": "742c51feeaf75542ab9db6782ad3d2ad506fb871",
            "fix_hash": "6bc05de06fffc5a2f2a67e4e8526bc6d7d0939b4",
            "description": "Methods about reading unsigned-integer in class EndianUtils may return a negative number, due to casting int to long.\nCalculations with operator & etc. are under integer in these methods so its results are integer,\nthen implicit casting the results to long keeps its positive/negative sign.",
            "commit number version hash": 443,
            "commit number": 438,
            "function that changed": [
                {
                    "function name": "readSwappedUnsignedInteger",
                    "function params": [
                        "input"
                    ],
                    "file name": "EndianUtils.java",
                    "file old path": "src/java/org/apache/commons/io/EndianUtils.java",
                    "file new path": "src/java/org/apache/commons/io/EndianUtils.java",
                    "full name": "src.java.org.apache.commons.io.EndianUtils.readSwappedUnsignedInteger"
                },
                {
                    "function name": "readSwappedUnsignedInteger",
                    "function params": [
                        "data",
                        "offset"
                    ],
                    "file name": "EndianUtils.java",
                    "file old path": "src/java/org/apache/commons/io/EndianUtils.java",
                    "file new path": "src/java/org/apache/commons/io/EndianUtils.java",
                    "full name": "src.java.org.apache.commons.io.EndianUtils.readSwappedUnsignedInteger"
                },
                {
                    "function name": "testUnsignedOverrun",
                    "function params": [],
                    "file name": "EndianUtilsTest.java",
                    "file old path": "src/test/org/apache/commons/io/EndianUtilsTest.java",
                    "file new path": "src/test/org/apache/commons/io/EndianUtilsTest.java",
                    "full name": "src.test.org.apache.commons.io.EndianUtilsTest.testUnsignedOverrun"
                }
            ],
            "files that changed": [
                "src/java/org/apache/commons/io/EndianUtils.java",
                "src/test/org/apache/commons/io/EndianUtilsTest.java"
            ]
        },
        {
            "bug index": "317",
            "bug id": "IO-1",
            "hexsha": "742c51feeaf75542ab9db6782ad3d2ad506fb871",
            "fix_hash": "aa1ba1e649a6b9afa5393b0a1599db0fe1df3a57",
            "description": "FileUtils.forceMkdir(File) calls File.mkdirs() to create the directory. The\nJavaDoc of this method does not mention that any necessary but nonexistent\nparent directories are created, too.",
            "commit number version hash": 443,
            "commit number": 434,
            "function that changed": [],
            "files that changed": [
                "src/java/org/apache/commons/io/FileUtils.java"
            ]
        },
        {
            "bug index": "318",
            "bug id": "IO-113",
            "hexsha": "742c51feeaf75542ab9db6782ad3d2ad506fb871",
            "fix_hash": "82912208ea8e27cbb8265e1622e74ee3f655c918",
            "description": "FileUtils.readFileToString isn't static.  It should be; since the constructor for FileUtils says \"Instances should NOT be constructed in standard programming\", this makes readFileToString unusable.  Right now I'm using FileUtils.readBytesToByteArray(file).toString().",
            "commit number version hash": 443,
            "commit number": 433,
            "function that changed": [
                {
                    "function name": "readFileToString",
                    "function params": [
                        "file"
                    ],
                    "file name": "FileUtils.java",
                    "file old path": "src/java/org/apache/commons/io/FileUtils.java",
                    "file new path": "src/java/org/apache/commons/io/FileUtils.java",
                    "full name": "src.java.org.apache.commons.io.FileUtils.readFileToString"
                }
            ],
            "files that changed": [
                "src/java/org/apache/commons/io/FileUtils.java"
            ]
        },
        {
            "bug index": "319",
            "bug id": "IO-112",
            "hexsha": "742c51feeaf75542ab9db6782ad3d2ad506fb871",
            "fix_hash": "403949d8075f3aca227825b69de2de21342071e9",
            "description": "-----Original Message-----\nFrom: deng xinzi [mailto:xinzi6388@gmail.com] \nSent: Sunday, February 04, 2007 6:19 AM\nTo: commons-dev@jakarta.apache.org\nSubject: [bug]commons-io 1.3 FileUtils.openOutputStream(File file) NullPointException\n\nFileUtils.openOutputStream(File file)\nWhen the file = new File( \"abc.txt\" );\nThere will be a NullPointerException throw.\nCause\nfile = new File(\"abc.txt\")\nfile.getParentFile() returns null.\n\nSo I suggest adding the null check code like this.\n\n            File parent = file.getParentFile();\n            if( parent != null ) {   // ADD THIS!!!\n              if (parent.exists() == false) {\n                if (parent.mkdirs() == false) {\n                    throw new IOException(\"File '\" + file + \"' could not be\ncreated\");\n                }\n              }\n            }\n\n\n                                       Xinzi ...\n",
            "commit number version hash": 443,
            "commit number": 432,
            "function that changed": [
                {
                    "function name": "openOutputStream",
                    "function params": [
                        "file"
                    ],
                    "file name": "FileUtils.java",
                    "file old path": "src/java/org/apache/commons/io/FileUtils.java",
                    "file new path": "src/java/org/apache/commons/io/FileUtils.java",
                    "full name": "src.java.org.apache.commons.io.FileUtils.openOutputStream"
                },
                {
                    "function name": "test_openOutputStream_noParentNoFile",
                    "function params": [],
                    "file name": "FileUtilsTestCase.java",
                    "file old path": "src/test/org/apache/commons/io/FileUtilsTestCase.java",
                    "file new path": "src/test/org/apache/commons/io/FileUtilsTestCase.java",
                    "full name": "src.test.org.apache.commons.io.FileUtilsTestCase.test_openOutputStream_noParentNoFile"
                },
                {
                    "function name": "test_openOutputStream_noParentCreateFile",
                    "function params": [],
                    "file name": "FileUtilsTestCase.java",
                    "file old path": "src/test/org/apache/commons/io/FileUtilsTestCase.java",
                    "file new path": "src/test/org/apache/commons/io/FileUtilsTestCase.java",
                    "full name": "src.test.org.apache.commons.io.FileUtilsTestCase.test_openOutputStream_noParentCreateFile"
                },
                {
                    "function name": "openOutputStream_noParent",
                    "function params": [
                        "createFile"
                    ],
                    "file name": "FileUtilsTestCase.java",
                    "file old path": "src/test/org/apache/commons/io/FileUtilsTestCase.java",
                    "file new path": "src/test/org/apache/commons/io/FileUtilsTestCase.java",
                    "full name": "src.test.org.apache.commons.io.FileUtilsTestCase.openOutputStream_noParent"
                },
                {
                    "function name": "createLineBasedFile",
                    "function params": [
                        "file",
                        "data"
                    ],
                    "file name": "FileBasedTestCase.java",
                    "file old path": "src/test/org/apache/commons/io/testtools/FileBasedTestCase.java",
                    "file new path": "src/test/org/apache/commons/io/testtools/FileBasedTestCase.java",
                    "full name": "src.test.org.apache.commons.io.testtools.FileBasedTestCase.createLineBasedFile"
                }
            ],
            "files that changed": [
                "src/java/org/apache/commons/io/FileUtils.java",
                "src/test/org/apache/commons/io/FileUtilsTestCase.java",
                "src/test/org/apache/commons/io/testtools/FileBasedTestCase.java"
            ]
        },
        {
            "bug index": "320",
            "bug id": "IO-6",
            "hexsha": "742c51feeaf75542ab9db6782ad3d2ad506fb871",
            "fix_hash": "3e300278eca4c60bc35f9784e20e1bdb0bc8f0e7",
            "description": "I am running a batch application that moves around some files. \nFileUtils.listFiles(new File(\"c:\\\\\"), new PrefixFileFilter(filePrefix), new \nNotFileFilter(new NameFileFilter(\"some\"))) works just great. But the more I \nstarted load testing application I came across this strange problem. I am \nmoving around 22000 files. And While its moving around the file on some file \nits changing file date. I am using FileUtils.copyFileToDirectory(file, todir);",
            "commit number version hash": 443,
            "commit number": 425,
            "function that changed": [
                {
                    "function name": "readLines",
                    "function params": [
                        "file"
                    ],
                    "file name": "FileUtils.java",
                    "file old path": "src/java/org/apache/commons/io/FileUtils.java",
                    "file new path": "src/java/org/apache/commons/io/FileUtils.java",
                    "full name": "src.java.org.apache.commons.io.FileUtils.readLines"
                },
                {
                    "function name": "writeLines",
                    "function params": [
                        "file",
                        "lines"
                    ],
                    "file name": "FileUtils.java",
                    "file old path": "src/java/org/apache/commons/io/FileUtils.java",
                    "file new path": "src/java/org/apache/commons/io/FileUtils.java",
                    "full name": "src.java.org.apache.commons.io.FileUtils.writeLines"
                },
                {
                    "function name": "lineIterator",
                    "function params": [
                        "file"
                    ],
                    "file name": "FileUtils.java",
                    "file old path": "src/java/org/apache/commons/io/FileUtils.java",
                    "file new path": "src/java/org/apache/commons/io/FileUtils.java",
                    "full name": "src.java.org.apache.commons.io.FileUtils.lineIterator"
                },
                {
                    "function name": "readFileToString",
                    "function params": [
                        "f"
                    ],
                    "file name": "FileUtils.java",
                    "file old path": "src/java/org/apache/commons/io/FileUtils.java",
                    "file new path": "src/java/org/apache/commons/io/FileUtils.java",
                    "full name": "src.java.org.apache.commons.io.FileUtils.readFileToString"
                },
                {
                    "function name": "writeLines",
                    "function params": [
                        "file",
                        "lines",
                        "lineEnding"
                    ],
                    "file name": "FileUtils.java",
                    "file old path": "src/java/org/apache/commons/io/FileUtils.java",
                    "file new path": "src/java/org/apache/commons/io/FileUtils.java",
                    "full name": "src.java.org.apache.commons.io.FileUtils.writeLines"
                },
                {
                    "function name": "writeStringToFile",
                    "function params": [
                        "file",
                        "data"
                    ],
                    "file name": "FileUtils.java",
                    "file old path": "src/java/org/apache/commons/io/FileUtils.java",
                    "file new path": "src/java/org/apache/commons/io/FileUtils.java",
                    "full name": "src.java.org.apache.commons.io.FileUtils.writeStringToFile"
                }
            ],
            "files that changed": [
                "src/java/org/apache/commons/io/FileUtils.java"
            ]
        },
        {
            "bug index": "321",
            "bug id": "IO-101",
            "hexsha": "742c51feeaf75542ab9db6782ad3d2ad506fb871",
            "fix_hash": "d577e3d97166c4ffa12d67c33532a76cec9aa5d0",
            "description": "Code:\n\npublic static void main(String[] args) {\n\n\t\tdouble[] tests = new double[] {34.345, -345.5645, 545.12, 10.043, 7.123456789123};\n\t\tfor (int i = 0; i< tests.length ;i++) {\n\t\t\tbyte[] buffer = new byte[8];\t\t\t\n\t\t\tEndianUtils.writeSwappedDouble(buffer, 0, tests[i]);\n\t\t\tdouble val = EndianUtils.readSwappedDouble(buffer, 0);\n\t\t\tSystem.out.println(val);\t\n\t\t}\n\t\t \n}\n\nResult:\n34.344969482421874\n-345.5645\n545.11951171875\n10.043\n7.123456789123\n\nNote:\nIn my opinion the values shouldn't be changed at all.",
            "commit number version hash": 443,
            "commit number": 412,
            "function that changed": [
                {
                    "function name": "readSwappedLong",
                    "function params": [
                        "data",
                        "offset"
                    ],
                    "file name": "EndianUtils.java",
                    "file old path": "src/java/org/apache/commons/io/EndianUtils.java",
                    "file new path": "src/java/org/apache/commons/io/EndianUtils.java",
                    "full name": "src.java.org.apache.commons.io.EndianUtils.readSwappedLong"
                }
            ],
            "files that changed": [
                "src/java/org/apache/commons/io/EndianUtils.java"
            ]
        },
        {
            "bug index": "322",
            "bug id": "IO-2",
            "hexsha": "742c51feeaf75542ab9db6782ad3d2ad506fb871",
            "fix_hash": "808b5eb9c2139b828e513efd0fa4c86f6ae1666f",
            "description": "Hi,\n\n(sorry to assign it to the wrong component, but I cannot choose for IO)\n\nwhen I try to concat 2 paths with \"\\\" as path separator instead of \"/\", an\nexception is thrown. I'll upload a patch for this as well as a junit test.\n\ne.g.: FilenameUtils.catPath(\"C:\\\\temp\\\\\", \"test\") throws an exception ...\n\nMaarten",
            "commit number version hash": 443,
            "commit number": 410,
            "function that changed": [],
            "files that changed": [
                "src/java/org/apache/commons/io/IOCase.java"
            ]
        },
        {
            "bug index": "323",
            "bug id": "IO-5",
            "hexsha": "742c51feeaf75542ab9db6782ad3d2ad506fb871",
            "fix_hash": "a6ddf9c05634fb7dc93ebf4b424a74033c978abb",
            "description": null,
            "commit number version hash": 443,
            "commit number": 409,
            "function that changed": [
                {
                    "function name": "testMakeSVNAware",
                    "function params": [],
                    "file name": "FileFilterTestCase.java",
                    "file old path": "src/test/org/apache/commons/io/filefilter/FileFilterTestCase.java",
                    "file new path": "src/test/org/apache/commons/io/filefilter/FileFilterTestCase.java",
                    "full name": "src.test.org.apache.commons.io.filefilter.FileFilterTestCase.testMakeSVNAware"
                },
                {
                    "function name": "testHidden",
                    "function params": [],
                    "file name": "FileFilterTestCase.java",
                    "file old path": "src/test/org/apache/commons/io/filefilter/FileFilterTestCase.java",
                    "file new path": "src/test/org/apache/commons/io/filefilter/FileFilterTestCase.java",
                    "full name": "src.test.org.apache.commons.io.filefilter.FileFilterTestCase.testHidden"
                }
            ],
            "files that changed": [
                "src/test/org/apache/commons/io/filefilter/FileFilterTestCase.java"
            ]
        },
        {
            "bug index": "324",
            "bug id": "IO-101",
            "hexsha": "742c51feeaf75542ab9db6782ad3d2ad506fb871",
            "fix_hash": "740afb04f70a27cee28eb8ade5d1b819be71c502",
            "description": "Code:\n\npublic static void main(String[] args) {\n\n\t\tdouble[] tests = new double[] {34.345, -345.5645, 545.12, 10.043, 7.123456789123};\n\t\tfor (int i = 0; i< tests.length ;i++) {\n\t\t\tbyte[] buffer = new byte[8];\t\t\t\n\t\t\tEndianUtils.writeSwappedDouble(buffer, 0, tests[i]);\n\t\t\tdouble val = EndianUtils.readSwappedDouble(buffer, 0);\n\t\t\tSystem.out.println(val);\t\n\t\t}\n\t\t \n}\n\nResult:\n34.344969482421874\n-345.5645\n545.11951171875\n10.043\n7.123456789123\n\nNote:\nIn my opinion the values shouldn't be changed at all.",
            "commit number version hash": 443,
            "commit number": 408,
            "function that changed": [
                {
                    "function name": "readSwappedLong",
                    "function params": [
                        "data",
                        "offset"
                    ],
                    "file name": "EndianUtils.java",
                    "file old path": "src/java/org/apache/commons/io/EndianUtils.java",
                    "file new path": "src/java/org/apache/commons/io/EndianUtils.java",
                    "full name": "src.java.org.apache.commons.io.EndianUtils.readSwappedLong"
                },
                {
                    "function name": "testSymmetryOfLong",
                    "function params": [],
                    "file name": "EndianUtilsTest.java",
                    "file old path": "src/test/org/apache/commons/io/EndianUtilsTest.java",
                    "file new path": "src/test/org/apache/commons/io/EndianUtilsTest.java",
                    "full name": "src.test.org.apache.commons.io.EndianUtilsTest.testSymmetryOfLong"
                }
            ],
            "files that changed": [
                "src/java/org/apache/commons/io/EndianUtils.java",
                "src/test/org/apache/commons/io/EndianUtilsTest.java"
            ]
        },
        {
            "bug index": "325",
            "bug id": "IO-102",
            "hexsha": "742c51feeaf75542ab9db6782ad3d2ad506fb871",
            "fix_hash": "a354d0a5ebbb00a9758f93e72d51078177576918",
            "description": "In:\n\n        byte[] bytes = new byte[8];\n        input.read( bytes );\n        return readSwappedLong( bytes, 0 );\n\nThere is no check on the int return value from input.read, so it's possible that 8 bytes won't be read.",
            "commit number version hash": 443,
            "commit number": 407,
            "function that changed": [
                {
                    "function name": "readSwappedLong",
                    "function params": [
                        "input"
                    ],
                    "file name": "EndianUtils.java",
                    "file old path": "src/java/org/apache/commons/io/EndianUtils.java",
                    "file new path": "src/java/org/apache/commons/io/EndianUtils.java",
                    "full name": "src.java.org.apache.commons.io.EndianUtils.readSwappedLong"
                }
            ],
            "files that changed": [
                "src/java/org/apache/commons/io/EndianUtils.java"
            ]
        },
        {
            "bug index": "326",
            "bug id": "IO-99",
            "hexsha": "742c51feeaf75542ab9db6782ad3d2ad506fb871",
            "fix_hash": "9c18390762527fe8d1bf7af8ded586566cdbb59c",
            "description": "FileCleaner opens a thread and no solution is given to the user to end it. So when an application is undeployed\nin an Application Server, a thread is still alive. The WebApp can't be undeployed and this results in a classloader\nleak that will cause an OutOfMemoryError.\n\nI think the API should be extended so that a user can end the thread. A better way would be to provide a class that\ncleans everything for commons IO.",
            "commit number version hash": 443,
            "commit number": 402,
            "function that changed": [
                {
                    "function name": "track",
                    "function params": [
                        "file",
                        "marker",
                        "deleteStrategy"
                    ],
                    "file name": "FileCleaner.java",
                    "file old path": "src/java/org/apache/commons/io/FileCleaner.java",
                    "file new path": "src/java/org/apache/commons/io/FileCleaner.java",
                    "full name": "src.java.org.apache.commons.io.FileCleaner.track"
                },
                {
                    "function name": "addTracker",
                    "function params": [
                        "path",
                        "marker",
                        "deleteStrategy"
                    ],
                    "file name": "FileCleaner.java",
                    "file old path": "src/java/org/apache/commons/io/FileCleaner.java",
                    "file new path": "src/java/org/apache/commons/io/FileCleaner.java",
                    "full name": "src.java.org.apache.commons.io.FileCleaner.addTracker"
                },
                {
                    "function name": "exitWhenFinished",
                    "function params": [],
                    "file name": "FileCleaner.java",
                    "file old path": "src/java/org/apache/commons/io/FileCleaner.java",
                    "file new path": "src/java/org/apache/commons/io/FileCleaner.java",
                    "full name": "src.java.org.apache.commons.io.FileCleaner.exitWhenFinished"
                },
                {
                    "function name": "Reaper",
                    "function params": [],
                    "file name": "FileCleaner.java",
                    "file old path": "src/java/org/apache/commons/io/FileCleaner.java",
                    "file new path": "src/java/org/apache/commons/io/FileCleaner.java",
                    "full name": "src.java.org.apache.commons.io.FileCleaner.Reaper"
                },
                {
                    "function name": "track",
                    "function params": [
                        "path",
                        "marker",
                        "deleteStrategy"
                    ],
                    "file name": "FileCleaner.java",
                    "file old path": "src/java/org/apache/commons/io/FileCleaner.java",
                    "file new path": "src/java/org/apache/commons/io/FileCleaner.java",
                    "full name": "src.java.org.apache.commons.io.FileCleaner.track"
                },
                {
                    "function name": "Reaper",
                    "function params": [],
                    "file name": "FileCleaner.java",
                    "file old path": "src/java/org/apache/commons/io/FileCleaner.java",
                    "file new path": "src/java/org/apache/commons/io/FileCleaner.java",
                    "full name": "src.java.org.apache.commons.io.FileCleaner.Reaper"
                },
                {
                    "function name": "testFileCleanerExitWhenFinished2",
                    "function params": [],
                    "file name": "FileCleanerTestCase.java",
                    "file old path": "src/test/org/apache/commons/io/FileCleanerTestCase.java",
                    "file new path": "src/test/org/apache/commons/io/FileCleanerTestCase.java",
                    "full name": "src.test.org.apache.commons.io.FileCleanerTestCase.testFileCleanerExitWhenFinished2"
                },
                {
                    "function name": "tearDown",
                    "function params": [],
                    "file name": "FileCleanerTestCase.java",
                    "file old path": "src/test/org/apache/commons/io/FileCleanerTestCase.java",
                    "file new path": "src/test/org/apache/commons/io/FileCleanerTestCase.java",
                    "full name": "src.test.org.apache.commons.io.FileCleanerTestCase.tearDown"
                },
                {
                    "function name": "testFileCleanerExitWhenFinishedFirst",
                    "function params": [],
                    "file name": "FileCleanerTestCase.java",
                    "file old path": "src/test/org/apache/commons/io/FileCleanerTestCase.java",
                    "file new path": "src/test/org/apache/commons/io/FileCleanerTestCase.java",
                    "full name": "src.test.org.apache.commons.io.FileCleanerTestCase.testFileCleanerExitWhenFinishedFirst"
                },
                {
                    "function name": "testFileCleanerExitWhenFinished1",
                    "function params": [],
                    "file name": "FileCleanerTestCase.java",
                    "file old path": "src/test/org/apache/commons/io/FileCleanerTestCase.java",
                    "file new path": "src/test/org/apache/commons/io/FileCleanerTestCase.java",
                    "full name": "src.test.org.apache.commons.io.FileCleanerTestCase.testFileCleanerExitWhenFinished1"
                },
                {
                    "function name": "testFileCleanerExitWhenFinished_NoTrackAfter",
                    "function params": [],
                    "file name": "FileCleanerTestCase.java",
                    "file old path": "src/test/org/apache/commons/io/FileCleanerTestCase.java",
                    "file new path": "src/test/org/apache/commons/io/FileCleanerTestCase.java",
                    "full name": "src.test.org.apache.commons.io.FileCleanerTestCase.testFileCleanerExitWhenFinished_NoTrackAfter"
                }
            ],
            "files that changed": [
                "src/java/org/apache/commons/io/FileCleaner.java",
                "src/test/org/apache/commons/io/FileCleanerTestCase.java"
            ]
        },
        {
            "bug index": "327",
            "bug id": "IO-100",
            "hexsha": "742c51feeaf75542ab9db6782ad3d2ad506fb871",
            "fix_hash": "f732c9a50cbaf0675e8b1846c8d3480c06f297a2",
            "description": "The documentation states, that FileUtils.touch implements the UNIX-touch command. However I may successfully FileUtils.touch files like /etc/passwd, which is not allowed on the shell as normal user. \n\nLooking at the implementation, you should propably raise an IOException if the returnvalue of `file.setLastModified(System.currentTimeMillis());` is `false`.",
            "commit number version hash": 443,
            "commit number": 401,
            "function that changed": [
                {
                    "function name": "touch",
                    "function params": [
                        "file"
                    ],
                    "file name": "FileUtils.java",
                    "file old path": "src/java/org/apache/commons/io/FileUtils.java",
                    "file new path": "src/java/org/apache/commons/io/FileUtils.java",
                    "full name": "src.java.org.apache.commons.io.FileUtils.touch"
                }
            ],
            "files that changed": [
                "src/java/org/apache/commons/io/FileUtils.java"
            ]
        },
        {
            "bug index": "328",
            "bug id": "IO-100",
            "hexsha": "742c51feeaf75542ab9db6782ad3d2ad506fb871",
            "fix_hash": "bf78bafa9586d847996d6d8e426d765026641645",
            "description": "The documentation states, that FileUtils.touch implements the UNIX-touch command. However I may successfully FileUtils.touch files like /etc/passwd, which is not allowed on the shell as normal user. \n\nLooking at the implementation, you should propably raise an IOException if the returnvalue of `file.setLastModified(System.currentTimeMillis());` is `false`.",
            "commit number version hash": 443,
            "commit number": 400,
            "function that changed": [
                {
                    "function name": "touch",
                    "function params": [
                        "file"
                    ],
                    "file name": "FileUtils.java",
                    "file old path": "src/java/org/apache/commons/io/FileUtils.java",
                    "file new path": "src/java/org/apache/commons/io/FileUtils.java",
                    "full name": "src.java.org.apache.commons.io.FileUtils.touch"
                }
            ],
            "files that changed": [
                "src/java/org/apache/commons/io/FileUtils.java"
            ]
        },
        {
            "bug index": "329",
            "bug id": "IO-84",
            "hexsha": "742c51feeaf75542ab9db6782ad3d2ad506fb871",
            "fix_hash": "1d0c2d0ba1ddc78070e415d05b2bd26cb288cecb",
            "description": "java int.MAX_VALUE is 2 GB. Classes that handle streams larger than 2 GB will behave incorrectly.\n\nFor example, see \nhttp://svn.apache.org/viewvc/jakarta/commons/proper/io/trunk/src/java/org/apache/commons/io/IOUtils.java?view=markup\nMethod: int copy(InputStream input, OutputStream output).\n\nThe correct method would be: long copy(InputStream input, OutputStream output).\n\nThis issue may affect many classes and routines.",
            "commit number version hash": 443,
            "commit number": 399,
            "function that changed": [
                {
                    "function name": "copy",
                    "function params": [
                        "input",
                        "output"
                    ],
                    "file name": "IOUtils.java",
                    "file old path": "src/java/org/apache/commons/io/IOUtils.java",
                    "file new path": "src/java/org/apache/commons/io/IOUtils.java",
                    "full name": "src.java.org.apache.commons.io.IOUtils.copy"
                },
                {
                    "function name": "copy",
                    "function params": [
                        "input",
                        "output"
                    ],
                    "file name": "IOUtils.java",
                    "file old path": "src/java/org/apache/commons/io/IOUtils.java",
                    "file new path": "src/java/org/apache/commons/io/IOUtils.java",
                    "full name": "src.java.org.apache.commons.io.IOUtils.copy"
                },
                {
                    "function name": "testCopy_inputStreamToOutputStream_IO84",
                    "function params": [],
                    "file name": "IOUtilsCopyTestCase.java",
                    "file old path": "src/test/org/apache/commons/io/IOUtilsCopyTestCase.java",
                    "file new path": "src/test/org/apache/commons/io/IOUtilsCopyTestCase.java",
                    "full name": "src.test.org.apache.commons.io.IOUtilsCopyTestCase.testCopy_inputStreamToOutputStream_IO84"
                },
                {
                    "function name": "testCopy_readerToWriter_IO84",
                    "function params": [],
                    "file name": "IOUtilsCopyTestCase.java",
                    "file old path": "src/test/org/apache/commons/io/IOUtilsCopyTestCase.java",
                    "file new path": "src/test/org/apache/commons/io/IOUtilsCopyTestCase.java",
                    "full name": "src.test.org.apache.commons.io.IOUtilsCopyTestCase.testCopy_readerToWriter_IO84"
                }
            ],
            "files that changed": [
                "src/java/org/apache/commons/io/IOUtils.java",
                "src/test/org/apache/commons/io/IOUtilsCopyTestCase.java"
            ]
        },
        {
            "bug index": "330",
            "bug id": "IO-89",
            "hexsha": "742c51feeaf75542ab9db6782ad3d2ad506fb871",
            "fix_hash": "5284ceacdf2b198f17788c967a8f6862a5c1b325",
            "description": "Theres an inconsistency (bug?) in the implementation of SizeFileFilter and AgeFileFilter.\n\nIn SizeFileFilter, using an \"acceptLarger\" parameter of true actually accepts files with a size equal to and larger, whereas\nspecifying an \"acceptLarger\" parameter of false only accepts smaller files.\n\nThe same is true for AgeFileFilter, using an \"acceptOlder\" parameter of true actually accepts files either the same age or older, whereas\nspecifying an \"acceptOlder\" parameter of false only accepts newer files.\n\n\nA big benefit of resolving these inconsistencies would mean that creating filters for any condition (i.e. <, >, <=, >= or =) becomes\nalot easier. For example if the AgeFileFilter did only do either newer or older, then creating a filters for \"the same age or older\"\nor \"the same age or younger\" could be done in the following way:\n\n    IOFileFilter equalOlder   = new NotFileFilter(new AgeFileFilter(cutoff, false));\n    IOFileFilter equalYounger = new NotFileFilter(new AgeFileFilter(cutoff, true));\n\n\nFor SizeFileFilter I propose changing the logic to the following:\n\n    if (acceptLarger) {\n        return file.length() >= size;\n    } else {\n        return file.length() <= size;\n    }\n\n(This would mean that \"new SizeFileFilter(cutoff)\" would operate the same way)\n\nI have added isOlderFile() methods to FileUtils and propose that AgeFileFilter is changed to the following:\n\n    if (acceptOlder) {\n        return FileUtils.isFileOlder(file, cutoff);\n    } else {\n        return FileUtils.isFileNewer(file, cutoff);\n    }\n",
            "commit number version hash": 443,
            "commit number": 390,
            "function that changed": [],
            "files that changed": [
                "src/java/org/apache/commons/io/filefilter/AgeFileFilter.java",
                "src/java/org/apache/commons/io/filefilter/SizeFileFilter.java"
            ]
        },
        {
            "bug index": "331",
            "bug id": "IO-84",
            "hexsha": "742c51feeaf75542ab9db6782ad3d2ad506fb871",
            "fix_hash": "a9d448fbed45bed36941cb06dce0fc6139c1e525",
            "description": "java int.MAX_VALUE is 2 GB. Classes that handle streams larger than 2 GB will behave incorrectly.\n\nFor example, see \nhttp://svn.apache.org/viewvc/jakarta/commons/proper/io/trunk/src/java/org/apache/commons/io/IOUtils.java?view=markup\nMethod: int copy(InputStream input, OutputStream output).\n\nThe correct method would be: long copy(InputStream input, OutputStream output).\n\nThis issue may affect many classes and routines.",
            "commit number version hash": 443,
            "commit number": 388,
            "function that changed": [
                {
                    "function name": "testCopy_inputStreamToOutputStream_IO84",
                    "function params": [],
                    "file name": "IOUtilsCopyTestCase.java",
                    "file old path": "src/test/org/apache/commons/io/IOUtilsCopyTestCase.java",
                    "file new path": "src/test/org/apache/commons/io/IOUtilsCopyTestCase.java",
                    "full name": "src.test.org.apache.commons.io.IOUtilsCopyTestCase.testCopy_inputStreamToOutputStream_IO84"
                },
                {
                    "function name": "testCopy_readerToWriter_IO84",
                    "function params": [],
                    "file name": "IOUtilsCopyTestCase.java",
                    "file old path": "src/test/org/apache/commons/io/IOUtilsCopyTestCase.java",
                    "file new path": "src/test/org/apache/commons/io/IOUtilsCopyTestCase.java",
                    "full name": "src.test.org.apache.commons.io.IOUtilsCopyTestCase.testCopy_readerToWriter_IO84"
                },
                {
                    "function name": "testLargeFiles_IO84",
                    "function params": [],
                    "file name": "CountingInputStreamTest.java",
                    "file old path": "src/test/org/apache/commons/io/input/CountingInputStreamTest.java",
                    "file new path": "src/test/org/apache/commons/io/input/CountingInputStreamTest.java",
                    "full name": "src.test.org.apache.commons.io.input.CountingInputStreamTest.testLargeFiles_IO84"
                },
                {
                    "function name": "testLargeFiles_IO84",
                    "function params": [],
                    "file name": "CountingOutputStreamTest.java",
                    "file old path": "src/test/org/apache/commons/io/output/CountingOutputStreamTest.java",
                    "file new path": "src/test/org/apache/commons/io/output/CountingOutputStreamTest.java",
                    "full name": "src.test.org.apache.commons.io.output.CountingOutputStreamTest.testLargeFiles_IO84"
                }
            ],
            "files that changed": [
                "src/test/org/apache/commons/io/IOUtilsCopyTestCase.java",
                "src/test/org/apache/commons/io/input/CountingInputStreamTest.java",
                "src/test/org/apache/commons/io/output/CountingOutputStreamTest.java"
            ]
        },
        {
            "bug index": "332",
            "bug id": "IO-82",
            "hexsha": "742c51feeaf75542ab9db6782ad3d2ad506fb871",
            "fix_hash": "7df4f8c850e512ec7de15ecbf5df78d7f9d44449",
            "description": "    [junit] Running org.apache.commons.io.FileCleanerTestCase\n    [junit] Tests run: 1, Failures: 0, Errors: 0, Time elapsed: 116.485 sec\n\nOn 1.4.2 on the same machine/checkout, it takes only 1.x seconds.",
            "commit number version hash": 443,
            "commit number": 385,
            "function that changed": [
                {
                    "function name": "testFileCleanerDirectory",
                    "function params": [],
                    "file name": "FileCleanerTestCase.java",
                    "file old path": "src/test/org/apache/commons/io/FileCleanerTestCase.java",
                    "file new path": "src/test/org/apache/commons/io/FileCleanerTestCase.java",
                    "full name": "src.test.org.apache.commons.io.FileCleanerTestCase.testFileCleanerDirectory"
                },
                {
                    "function name": "testFileCleanerFile",
                    "function params": [],
                    "file name": "FileCleanerTestCase.java",
                    "file old path": "src/test/org/apache/commons/io/FileCleanerTestCase.java",
                    "file new path": "src/test/org/apache/commons/io/FileCleanerTestCase.java",
                    "full name": "src.test.org.apache.commons.io.FileCleanerTestCase.testFileCleanerFile"
                },
                {
                    "function name": "testFileCleanerDirectory_ForceStrategy",
                    "function params": [],
                    "file name": "FileCleanerTestCase.java",
                    "file old path": "src/test/org/apache/commons/io/FileCleanerTestCase.java",
                    "file new path": "src/test/org/apache/commons/io/FileCleanerTestCase.java",
                    "full name": "src.test.org.apache.commons.io.FileCleanerTestCase.testFileCleanerDirectory_ForceStrategy"
                },
                {
                    "function name": "testFileCleanerDirectory_NullStrategy",
                    "function params": [],
                    "file name": "FileCleanerTestCase.java",
                    "file old path": "src/test/org/apache/commons/io/FileCleanerTestCase.java",
                    "file new path": "src/test/org/apache/commons/io/FileCleanerTestCase.java",
                    "full name": "src.test.org.apache.commons.io.FileCleanerTestCase.testFileCleanerDirectory_NullStrategy"
                },
                {
                    "function name": "waitUntilTrackCount",
                    "function params": [],
                    "file name": "FileCleanerTestCase.java",
                    "file old path": "src/test/org/apache/commons/io/FileCleanerTestCase.java",
                    "file new path": "src/test/org/apache/commons/io/FileCleanerTestCase.java",
                    "full name": "src.test.org.apache.commons.io.FileCleanerTestCase.waitUntilTrackCount"
                }
            ],
            "files that changed": [
                "src/test/org/apache/commons/io/FileCleanerTestCase.java"
            ]
        },
        {
            "bug index": "333",
            "bug id": "IO-84",
            "hexsha": "742c51feeaf75542ab9db6782ad3d2ad506fb871",
            "fix_hash": "4147a50bae4e937d0bd41c397b13009b56a8cf2a",
            "description": "java int.MAX_VALUE is 2 GB. Classes that handle streams larger than 2 GB will behave incorrectly.\n\nFor example, see \nhttp://svn.apache.org/viewvc/jakarta/commons/proper/io/trunk/src/java/org/apache/commons/io/IOUtils.java?view=markup\nMethod: int copy(InputStream input, OutputStream output).\n\nThe correct method would be: long copy(InputStream input, OutputStream output).\n\nThis issue may affect many classes and routines.",
            "commit number version hash": 443,
            "commit number": 384,
            "function that changed": [
                {
                    "function name": "copyLarge",
                    "function params": [
                        "input",
                        "output"
                    ],
                    "file name": "IOUtils.java",
                    "file old path": "src/java/org/apache/commons/io/IOUtils.java",
                    "file new path": "src/java/org/apache/commons/io/IOUtils.java",
                    "full name": "src.java.org.apache.commons.io.IOUtils.copyLarge"
                },
                {
                    "function name": "copy",
                    "function params": [
                        "input",
                        "output"
                    ],
                    "file name": "IOUtils.java",
                    "file old path": "src/java/org/apache/commons/io/IOUtils.java",
                    "file new path": "src/java/org/apache/commons/io/IOUtils.java",
                    "full name": "src.java.org.apache.commons.io.IOUtils.copy"
                },
                {
                    "function name": "copy",
                    "function params": [
                        "input",
                        "output"
                    ],
                    "file name": "IOUtils.java",
                    "file old path": "src/java/org/apache/commons/io/IOUtils.java",
                    "file new path": "src/java/org/apache/commons/io/IOUtils.java",
                    "full name": "src.java.org.apache.commons.io.IOUtils.copy"
                },
                {
                    "function name": "copyLarge",
                    "function params": [
                        "input",
                        "output"
                    ],
                    "file name": "IOUtils.java",
                    "file old path": "src/java/org/apache/commons/io/IOUtils.java",
                    "file new path": "src/java/org/apache/commons/io/IOUtils.java",
                    "full name": "src.java.org.apache.commons.io.IOUtils.copyLarge"
                }
            ],
            "files that changed": [
                "src/java/org/apache/commons/io/IOUtils.java"
            ]
        },
        {
            "bug index": "334",
            "bug id": "IO-96",
            "hexsha": "742c51feeaf75542ab9db6782ad3d2ad506fb871",
            "fix_hash": "45a0b1fdfa0dec0ba60dc941e768a4898b8f070a",
            "description": "Message to mailing list from Anthony Green\nhttp://www.mail-archive.com/commons-dev@jakarta.apache.org/msg82127.html\n\n-----------------------------------------\nThis support routine from the commons-io project test code assumed that\nFileReader.read(byte[]) would always read the entire file.  There's no\nsuch guarantee, and some tests were failing on GNU Classpath based VMs\nbecause of this.\n\nThanks,\n\nAG\n\n\n\n--- src/test/org/apache/commons/io/testtools/FileBasedTestCase.java~\t2006-07-13 23:44:13.000000000 -0700\n+++ src/test/org/apache/commons/io/testtools/FileBasedTestCase.java\t2006-07-13 23:44:20.000000000 -0700\n@@ -167,18 +171,22 @@\n         throws IOException\n     {\n         Reader ir = new java.io.FileReader( file );\n-        try {\n-            char[] c1 = new char[ c0.length ];\n-            int numRead = ir.read( c1 );\n-            assertTrue( \"Different number of bytes\", numRead == c0.length );\n-            for( int i = 0;\n-                 i < numRead;\n-                 assertTrue( \"Byte \" + i + \" differs (\" + c0[ i ] + \" != \" + c1[ i ] + \")\", \n-                    c0[ i ] == c1[ i ] ), i++\n-                );\n-        } finally {\n-            ir.close();\n-        }\n+\tint count = 0, numRead = 0;\n+\tchar[] c1 = new char[ c0.length ];\n+\ttry {\n+\t  while (count < c0.length)\n+\t    {\n+\t      numRead = ir.read( c1, count, c0.length);\n+\t      for( int i = count;\n+\t\t   i < count+numRead;\n+\t\t   assertTrue( \"Byte \" + i + \" differs (\" + c0[ i ] + \" != \" + c1[ i ] + \")\", \n+\t\t\t       c0[ i ] == c1[ i ] ), i++\n+\t\t   );\n+\t      count += numRead;\n+\t    }\n+\t} finally {\n+\t  ir.close();\n+\t}\n     }\n \n     protected void checkWrite(OutputStream output) throws Exception {",
            "commit number version hash": 443,
            "commit number": 382,
            "function that changed": [
                {
                    "function name": "assertEqualContent",
                    "function params": [
                        "b0",
                        "file"
                    ],
                    "file name": "FileBasedTestCase.java",
                    "file old path": "src/test/org/apache/commons/io/testtools/FileBasedTestCase.java",
                    "file new path": "src/test/org/apache/commons/io/testtools/FileBasedTestCase.java",
                    "full name": "src.test.org.apache.commons.io.testtools.FileBasedTestCase.assertEqualContent"
                },
                {
                    "function name": "assertEqualContent",
                    "function params": [
                        "c0",
                        "file"
                    ],
                    "file name": "FileBasedTestCase.java",
                    "file old path": "src/test/org/apache/commons/io/testtools/FileBasedTestCase.java",
                    "file new path": "src/test/org/apache/commons/io/testtools/FileBasedTestCase.java",
                    "full name": "src.test.org.apache.commons.io.testtools.FileBasedTestCase.assertEqualContent"
                }
            ],
            "files that changed": [
                "src/test/org/apache/commons/io/testtools/FileBasedTestCase.java"
            ]
        },
        {
            "bug index": "335",
            "bug id": "IO-84",
            "hexsha": "742c51feeaf75542ab9db6782ad3d2ad506fb871",
            "fix_hash": "e03d721bb4dfd2e4ba7719f76ce17e860890dd2e",
            "description": "java int.MAX_VALUE is 2 GB. Classes that handle streams larger than 2 GB will behave incorrectly.\n\nFor example, see \nhttp://svn.apache.org/viewvc/jakarta/commons/proper/io/trunk/src/java/org/apache/commons/io/IOUtils.java?view=markup\nMethod: int copy(InputStream input, OutputStream output).\n\nThe correct method would be: long copy(InputStream input, OutputStream output).\n\nThis issue may affect many classes and routines.",
            "commit number version hash": 443,
            "commit number": 378,
            "function that changed": [
                {
                    "function name": "resetCount",
                    "function params": [],
                    "file name": "CountingInputStream.java",
                    "file old path": "src/java/org/apache/commons/io/input/CountingInputStream.java",
                    "file new path": "src/java/org/apache/commons/io/input/CountingInputStream.java",
                    "full name": "src.java.org.apache.commons.io.input.CountingInputStream.resetCount"
                },
                {
                    "function name": "getCount",
                    "function params": [],
                    "file name": "CountingInputStream.java",
                    "file old path": "src/java/org/apache/commons/io/input/CountingInputStream.java",
                    "file new path": "src/java/org/apache/commons/io/input/CountingInputStream.java",
                    "full name": "src.java.org.apache.commons.io.input.CountingInputStream.getCount"
                },
                {
                    "function name": "getByteCount",
                    "function params": [],
                    "file name": "CountingInputStream.java",
                    "file old path": "src/java/org/apache/commons/io/input/CountingInputStream.java",
                    "file new path": "src/java/org/apache/commons/io/input/CountingInputStream.java",
                    "full name": "src.java.org.apache.commons.io.input.CountingInputStream.getByteCount"
                },
                {
                    "function name": "getByteCount",
                    "function params": [],
                    "file name": "CountingOutputStream.java",
                    "file old path": "src/java/org/apache/commons/io/output/CountingOutputStream.java",
                    "file new path": "src/java/org/apache/commons/io/output/CountingOutputStream.java",
                    "full name": "src.java.org.apache.commons.io.output.CountingOutputStream.getByteCount"
                },
                {
                    "function name": "resetCount",
                    "function params": [],
                    "file name": "CountingOutputStream.java",
                    "file old path": "src/java/org/apache/commons/io/output/CountingOutputStream.java",
                    "file new path": "src/java/org/apache/commons/io/output/CountingOutputStream.java",
                    "full name": "src.java.org.apache.commons.io.output.CountingOutputStream.resetCount"
                },
                {
                    "function name": "getCount",
                    "function params": [],
                    "file name": "CountingOutputStream.java",
                    "file old path": "src/java/org/apache/commons/io/output/CountingOutputStream.java",
                    "file new path": "src/java/org/apache/commons/io/output/CountingOutputStream.java",
                    "full name": "src.java.org.apache.commons.io.output.CountingOutputStream.getCount"
                }
            ],
            "files that changed": [
                "src/java/org/apache/commons/io/input/CountingInputStream.java",
                "src/java/org/apache/commons/io/output/CountingOutputStream.java"
            ]
        },
        {
            "bug index": "336",
            "bug id": "IO-84",
            "hexsha": "742c51feeaf75542ab9db6782ad3d2ad506fb871",
            "fix_hash": "1cd7e93ab1fbd610a3b552d8295d8e565adeecb2",
            "description": "java int.MAX_VALUE is 2 GB. Classes that handle streams larger than 2 GB will behave incorrectly.\n\nFor example, see \nhttp://svn.apache.org/viewvc/jakarta/commons/proper/io/trunk/src/java/org/apache/commons/io/IOUtils.java?view=markup\nMethod: int copy(InputStream input, OutputStream output).\n\nThe correct method would be: long copy(InputStream input, OutputStream output).\n\nThis issue may affect many classes and routines.",
            "commit number version hash": 443,
            "commit number": 369,
            "function that changed": [
                {
                    "function name": "resetCount",
                    "function params": [],
                    "file name": "CountingInputStream.java",
                    "file old path": "src/java/org/apache/commons/io/input/CountingInputStream.java",
                    "file new path": "src/java/org/apache/commons/io/input/CountingInputStream.java",
                    "full name": "src.java.org.apache.commons.io.input.CountingInputStream.resetCount"
                },
                {
                    "function name": "getCount",
                    "function params": [],
                    "file name": "CountingInputStream.java",
                    "file old path": "src/java/org/apache/commons/io/input/CountingInputStream.java",
                    "file new path": "src/java/org/apache/commons/io/input/CountingInputStream.java",
                    "full name": "src.java.org.apache.commons.io.input.CountingInputStream.getCount"
                },
                {
                    "function name": "resetByteCount",
                    "function params": [],
                    "file name": "CountingInputStream.java",
                    "file old path": "src/java/org/apache/commons/io/input/CountingInputStream.java",
                    "file new path": "src/java/org/apache/commons/io/input/CountingInputStream.java",
                    "full name": "src.java.org.apache.commons.io.input.CountingInputStream.resetByteCount"
                },
                {
                    "function name": "getByteCount",
                    "function params": [],
                    "file name": "CountingInputStream.java",
                    "file old path": "src/java/org/apache/commons/io/input/CountingInputStream.java",
                    "file new path": "src/java/org/apache/commons/io/input/CountingInputStream.java",
                    "full name": "src.java.org.apache.commons.io.input.CountingInputStream.getByteCount"
                },
                {
                    "function name": "getCount",
                    "function params": [],
                    "file name": "CountingOutputStream.java",
                    "file old path": "src/java/org/apache/commons/io/output/CountingOutputStream.java",
                    "file new path": "src/java/org/apache/commons/io/output/CountingOutputStream.java",
                    "full name": "src.java.org.apache.commons.io.output.CountingOutputStream.getCount"
                },
                {
                    "function name": "resetCount",
                    "function params": [],
                    "file name": "CountingOutputStream.java",
                    "file old path": "src/java/org/apache/commons/io/output/CountingOutputStream.java",
                    "file new path": "src/java/org/apache/commons/io/output/CountingOutputStream.java",
                    "full name": "src.java.org.apache.commons.io.output.CountingOutputStream.resetCount"
                },
                {
                    "function name": "resetByteCount",
                    "function params": [],
                    "file name": "CountingOutputStream.java",
                    "file old path": "src/java/org/apache/commons/io/output/CountingOutputStream.java",
                    "file new path": "src/java/org/apache/commons/io/output/CountingOutputStream.java",
                    "full name": "src.java.org.apache.commons.io.output.CountingOutputStream.resetByteCount"
                },
                {
                    "function name": "getByteCount",
                    "function params": [],
                    "file name": "CountingOutputStream.java",
                    "file old path": "src/java/org/apache/commons/io/output/CountingOutputStream.java",
                    "file new path": "src/java/org/apache/commons/io/output/CountingOutputStream.java",
                    "full name": "src.java.org.apache.commons.io.output.CountingOutputStream.getByteCount"
                }
            ],
            "files that changed": [
                "src/java/org/apache/commons/io/input/CountingInputStream.java",
                "src/java/org/apache/commons/io/output/CountingOutputStream.java"
            ]
        },
        {
            "bug index": "337",
            "bug id": "IO-84",
            "hexsha": "742c51feeaf75542ab9db6782ad3d2ad506fb871",
            "fix_hash": "83af1cb1fe4a4a8f6af79fe8c44258d95e061e31",
            "description": "java int.MAX_VALUE is 2 GB. Classes that handle streams larger than 2 GB will behave incorrectly.\n\nFor example, see \nhttp://svn.apache.org/viewvc/jakarta/commons/proper/io/trunk/src/java/org/apache/commons/io/IOUtils.java?view=markup\nMethod: int copy(InputStream input, OutputStream output).\n\nThe correct method would be: long copy(InputStream input, OutputStream output).\n\nThis issue may affect many classes and routines.",
            "commit number version hash": 443,
            "commit number": 362,
            "function that changed": [],
            "files that changed": [
                "src/java/org/apache/commons/io/IOUtils.java"
            ]
        },
        {
            "bug index": "338",
            "bug id": "IO-93",
            "hexsha": "742c51feeaf75542ab9db6782ad3d2ad506fb871",
            "fix_hash": "b4b470096a39bfa51d33782f442505383ecc5e79",
            "description": "Calling the FileSystemUtils.getFreeSpace() method multiple times (~3000) will generate an IOException with the following text: \"Too many open files\". Documentation from Sun says this problem is due to not destroying the java.lang.Process object returned from the System.exec() call.\n\nSome sample code I wrote confirms that calling destroy prevents this error from occurring.",
            "commit number version hash": 443,
            "commit number": 361,
            "function that changed": [
                {
                    "function name": "performCommand",
                    "function params": [
                        "cmdAttribs",
                        "max"
                    ],
                    "file name": "FileSystemUtils.java",
                    "file old path": "src/java/org/apache/commons/io/FileSystemUtils.java",
                    "file new path": "src/java/org/apache/commons/io/FileSystemUtils.java",
                    "full name": "src.java.org.apache.commons.io.FileSystemUtils.performCommand"
                },
                {
                    "function name": "MockFileSystemUtils",
                    "function params": [
                        "params"
                    ],
                    "file name": "FileSystemUtilsTestCase.java",
                    "file old path": "src/test/org/apache/commons/io/FileSystemUtilsTestCase.java",
                    "file new path": "src/test/org/apache/commons/io/FileSystemUtilsTestCase.java",
                    "full name": "src.test.org.apache.commons.io.FileSystemUtilsTestCase.MockFileSystemUtils"
                },
                {
                    "function name": "MockFileSystemUtils",
                    "function params": [
                        "exitCode",
                        "lines",
                        "cmd"
                    ],
                    "file name": "FileSystemUtilsTestCase.java",
                    "file old path": "src/test/org/apache/commons/io/FileSystemUtilsTestCase.java",
                    "file new path": "src/test/org/apache/commons/io/FileSystemUtilsTestCase.java",
                    "full name": "src.test.org.apache.commons.io.FileSystemUtilsTestCase.MockFileSystemUtils"
                }
            ],
            "files that changed": [
                "src/java/org/apache/commons/io/FileSystemUtils.java",
                "src/test/org/apache/commons/io/FileSystemUtilsTestCase.java"
            ]
        },
        {
            "bug index": "339",
            "bug id": "IO-91",
            "hexsha": "742c51feeaf75542ab9db6782ad3d2ad506fb871",
            "fix_hash": "01caaa9ac072f932a83ff894e63dade9df97c465",
            "description": "The method FileSystemUtils.freeSpace does not work on Sun Solaris.\n\n    [junit] Testcase: testGetFreeSpace_String took 0.216 sec\n    [junit] \tCaused an ERROR\n    [junit] Command line 'df' did not return info as expected for path '/'- response on first line was '/                  (/dev/dsk/c0t0d0s0 ):41676304 block  3133314 filer'\n    [junit] java.io.IOException: Command line 'df' did not return info as expected for path '/'- response on first line was '/                  (/dev/dsk/c0t0d0s0 ):41676304 block  3133314 filer'\n    [junit] \tat org.apache.commons.io.FileSystemUtils.freeSpaceUnix(FileSystemUtils.java:315)\n    [junit] \tat org.apache.commons.io.FileSystemUtils.freeSpaceOS(FileSystemUtils.java:179)\n    [junit] \tat org.apache.commons.io.FileSystemUtils.freeSpace(FileSystemUtils.java:126)\n    [junit] \tat org.apache.commons.io.FileSystemUtilsTestCase.testGetFreeSpace_String(FileSystemUtilsTestCase.java:90)\n\nThis is because on Solaris the df command work different if the flag -k is used or not:\n\n$ df /\n/                  (/dev/dsk/c0t1d0s0 ): 1070402 blocks   294205 files\n$ df -k /\nFilesystem            kbytes    used   avail capacity  Mounted on\n/dev/dsk/c0t1d0s0    1350955  815754  481163    63%    /\n\nI haven't found any flag that makes it output GNU format even when -k is omitted.",
            "commit number version hash": 443,
            "commit number": 355,
            "function that changed": [
                {
                    "function name": "testGetFreeSpaceUnix_String_NormalResponseKbFreeBSD",
                    "function params": [],
                    "file name": "FileSystemUtilsTestCase.java",
                    "file old path": "src/test/org/apache/commons/io/FileSystemUtilsTestCase.java",
                    "file new path": "src/test/org/apache/commons/io/FileSystemUtilsTestCase.java",
                    "full name": "src.test.org.apache.commons.io.FileSystemUtilsTestCase.testGetFreeSpaceUnix_String_NormalResponseKbFreeBSD"
                },
                {
                    "function name": "testGetFreeSpaceUnix_String_NormalResponseLinux",
                    "function params": [],
                    "file name": "FileSystemUtilsTestCase.java",
                    "file old path": "src/test/org/apache/commons/io/FileSystemUtilsTestCase.java",
                    "file new path": "src/test/org/apache/commons/io/FileSystemUtilsTestCase.java",
                    "full name": "src.test.org.apache.commons.io.FileSystemUtilsTestCase.testGetFreeSpaceUnix_String_NormalResponseLinux"
                },
                {
                    "function name": "testGetFreeSpaceUnix_String_NormalResponseKbLinux",
                    "function params": [],
                    "file name": "FileSystemUtilsTestCase.java",
                    "file old path": "src/test/org/apache/commons/io/FileSystemUtilsTestCase.java",
                    "file new path": "src/test/org/apache/commons/io/FileSystemUtilsTestCase.java",
                    "full name": "src.test.org.apache.commons.io.FileSystemUtilsTestCase.testGetFreeSpaceUnix_String_NormalResponseKbLinux"
                },
                {
                    "function name": "testGetFreeSpaceUnix_String_NormalResponseFreeBSD",
                    "function params": [],
                    "file name": "FileSystemUtilsTestCase.java",
                    "file old path": "src/test/org/apache/commons/io/FileSystemUtilsTestCase.java",
                    "file new path": "src/test/org/apache/commons/io/FileSystemUtilsTestCase.java",
                    "full name": "src.test.org.apache.commons.io.FileSystemUtilsTestCase.testGetFreeSpaceUnix_String_NormalResponseFreeBSD"
                },
                {
                    "function name": "testGetFreeSpaceUnix_String_NormalResponseKbSolaris",
                    "function params": [],
                    "file name": "FileSystemUtilsTestCase.java",
                    "file old path": "src/test/org/apache/commons/io/FileSystemUtilsTestCase.java",
                    "file new path": "src/test/org/apache/commons/io/FileSystemUtilsTestCase.java",
                    "full name": "src.test.org.apache.commons.io.FileSystemUtilsTestCase.testGetFreeSpaceUnix_String_NormalResponseKbSolaris"
                }
            ],
            "files that changed": [
                "src/java/org/apache/commons/io/FileSystemUtils.java",
                "src/test/org/apache/commons/io/FileSystemUtilsTestCase.java"
            ]
        },
        {
            "bug index": "340",
            "bug id": "IO-90",
            "hexsha": "742c51feeaf75542ab9db6782ad3d2ad506fb871",
            "fix_hash": "0a03609ddc6380dd7c9053eb8cb04072baa476a1",
            "description": "When using FileSystemUtils.freeSpaceWindows in an empty share directory, the line containing the free space does not exist which causes an infinite loop (the outerloop doesn't decrease the i index).\n\nIn fact to deal with all possible errors, I propose to test the exitCode of the dir command.\n\nHere is a proposed new code for this function :\n\n    /**\n     * Find free space on the Windows platform using the 'dir' command.\n     *\n     * @param path  the path to get free space for, including the colon\n     * @return the amount of free drive space on the drive\n     * @throws IOException if an error occurs\n     */\n    long freeSpaceWindows(String path) throws IOException {\n        path = FilenameUtils.normalize(path);\n        if (path.length() > 2 && path.charAt(1) == ':') {\n            path = path.substring(0, 2);  // seems to make it work\n        }\n\n        // build and run the 'dir' command\n        String[] cmdAttrbs = new String[] {\"cmd.exe\", \"/C\", \"dir /-c \" + path};\n\n        // read in the output of the command to an ArrayList\n        BufferedReader in = null;\n        String line = null;\n        ArrayList lines = new ArrayList();\n        int errorLevel = 0;\n        \n        try {\n            Process proc = Runtime.getRuntime().exec(cmdAttrbs);\n            in = new BufferedReader(\n                new InputStreamReader(proc.getInputStream()));\n            line = in.readLine();\n            while (line != null) {\n                line = line.toLowerCase().trim();\n                lines.add(line);\n                line = in.readLine();\n            }\n            \n            proc.waitFor();\n            errorLevel = proc.exitValue();\n           \n        } finally {\n            IOUtils.closeQuietly(in);\n        }\n\n        if (lines.size() == 0) {\n            // unknown problem, throw exception\n            throw new IOException(\n                    \"Command line 'dir /-c' did not return any info \" +\n                    \"for command '\" + cmdAttrbs[2] + \"'\");\n        }\n\n        if (errorLevel != 0) {\n            if (errorLevel == 2) {\n                // Empty directory : unable to calculate the freeSpace\n                return Integer.MAX_VALUE; // ???\n            } else {\n                // unknown problem, throw exception\n                throw new IOException(\n                        \"Command line 'dir /-c' error [\" + errorLevel +\n                        \"] for command '\" + cmdAttrbs[2] + \"'\");\n            }\n        }\n        \n        // now iterate over the lines we just read and find the LAST\n        // non-empty line (the free space bytes should be in the last element\n        // of the ArrayList anyway, but this will ensure it works even if it's\n        // not, still assuming it is on the last non-blank line)\n        long bytes = -1;\n        int i = lines.size() - 1;\n        int bytesStart = 0;\n        int bytesEnd = 0;\n        outerLoop: while (i > 0) {\n            line = (String) lines.get(i);\n            if (line.length() > 0) {\n                // found it, so now read from the end of the line to find the\n                // last numeric character on the line, then continue until we\n                // find the first non-numeric character, and everything between\n                // that and the last numeric character inclusive is our free\n                // space bytes count\n                int j = line.length() - 1;\n                innerLoop1: while (j >= 0) {\n                    char c = line.charAt(j);\n                    if (Character.isDigit(c)) {\n                      // found the last numeric character, this is the end of\n                      // the free space bytes count\n                      bytesEnd = j + 1;\n                      break innerLoop1;\n                    }\n                    j--;\n                }\n                innerLoop2: while (j >= 0) {\n                    char c = line.charAt(j);\n                    if (!Character.isDigit(c) && c != ',' && c != '.') {\n                      // found the next non-numeric character, this is the\n                      // beginning of the free space bytes count\n                      bytesStart = j + 1;\n                      break innerLoop2;\n                    }\n                    j--;\n                }\n                break outerLoop;\n            } else {\n                // If the last line is empty we are unable to parse the freeSpace\n                throw new IOException(\n                        \"Command line 'dir /-c' did not return valid info \" +\n                        \"for command '\" + cmdAttrbs[2] + \"'\");\n            }\n        }\n\n        // remove commas and dots in the bytes count\n        StringBuffer buf = new StringBuffer(line.substring(bytesStart, bytesEnd));\n        for (int k = 0; k < buf.length(); k++) {\n            if (buf.charAt(k) == ',' || buf.charAt(k) == '.') {\n                buf.deleteCharAt(k--);\n            }\n        }\n        bytes = Long.parseLong(buf.toString());\n        return bytes;\n    }\n",
            "commit number version hash": 443,
            "commit number": 352,
            "function that changed": [
                {
                    "function name": "freeSpaceWindows",
                    "function params": [
                        "path"
                    ],
                    "file name": "FileSystemUtils.java",
                    "file old path": "src/java/org/apache/commons/io/FileSystemUtils.java",
                    "file new path": "src/java/org/apache/commons/io/FileSystemUtils.java",
                    "full name": "src.java.org.apache.commons.io.FileSystemUtils.freeSpaceWindows"
                },
                {
                    "function name": "openProcessStream",
                    "function params": [
                        "proc"
                    ],
                    "file name": "FileSystemUtils.java",
                    "file old path": "src/java/org/apache/commons/io/FileSystemUtils.java",
                    "file new path": "src/java/org/apache/commons/io/FileSystemUtils.java",
                    "full name": "src.java.org.apache.commons.io.FileSystemUtils.openProcessStream"
                },
                {
                    "function name": "openProcessStream",
                    "function params": [
                        "params"
                    ],
                    "file name": "FileSystemUtils.java",
                    "file old path": "src/java/org/apache/commons/io/FileSystemUtils.java",
                    "file new path": "src/java/org/apache/commons/io/FileSystemUtils.java",
                    "full name": "src.java.org.apache.commons.io.FileSystemUtils.openProcessStream"
                },
                {
                    "function name": "freeSpaceUnix",
                    "function params": [
                        "path",
                        "kb",
                        "posix"
                    ],
                    "file name": "FileSystemUtils.java",
                    "file old path": "src/java/org/apache/commons/io/FileSystemUtils.java",
                    "file new path": "src/java/org/apache/commons/io/FileSystemUtils.java",
                    "full name": "src.java.org.apache.commons.io.FileSystemUtils.freeSpaceUnix"
                },
                {
                    "function name": "parseBytes",
                    "function params": [
                        "freeSpace",
                        "path"
                    ],
                    "file name": "FileSystemUtils.java",
                    "file old path": "src/java/org/apache/commons/io/FileSystemUtils.java",
                    "file new path": "src/java/org/apache/commons/io/FileSystemUtils.java",
                    "full name": "src.java.org.apache.commons.io.FileSystemUtils.parseBytes"
                },
                {
                    "function name": "performCommand",
                    "function params": [
                        "cmdAttribs",
                        "max"
                    ],
                    "file name": "FileSystemUtils.java",
                    "file old path": "src/java/org/apache/commons/io/FileSystemUtils.java",
                    "file new path": "src/java/org/apache/commons/io/FileSystemUtils.java",
                    "full name": "src.java.org.apache.commons.io.FileSystemUtils.performCommand"
                },
                {
                    "function name": "parseDir",
                    "function params": [
                        "line",
                        "path"
                    ],
                    "file name": "FileSystemUtils.java",
                    "file old path": "src/java/org/apache/commons/io/FileSystemUtils.java",
                    "file new path": "src/java/org/apache/commons/io/FileSystemUtils.java",
                    "full name": "src.java.org.apache.commons.io.FileSystemUtils.parseDir"
                },
                {
                    "function name": "openProcess",
                    "function params": [
                        "cmdAttribs"
                    ],
                    "file name": "FileSystemUtils.java",
                    "file old path": "src/java/org/apache/commons/io/FileSystemUtils.java",
                    "file new path": "src/java/org/apache/commons/io/FileSystemUtils.java",
                    "full name": "src.java.org.apache.commons.io.FileSystemUtils.openProcess"
                },
                {
                    "function name": "testGetFreeSpaceUnix_String_NormalResponseKb",
                    "function params": [],
                    "file name": "FileSystemUtilsTestCase.java",
                    "file old path": "src/test/org/apache/commons/io/FileSystemUtilsTestCase.java",
                    "file new path": "src/test/org/apache/commons/io/FileSystemUtilsTestCase.java",
                    "full name": "src.test.org.apache.commons.io.FileSystemUtilsTestCase.testGetFreeSpaceUnix_String_NormalResponseKb"
                },
                {
                    "function name": "testGetFreeSpaceWindows_String_EmptyResponse",
                    "function params": [],
                    "file name": "FileSystemUtilsTestCase.java",
                    "file old path": "src/test/org/apache/commons/io/FileSystemUtilsTestCase.java",
                    "file new path": "src/test/org/apache/commons/io/FileSystemUtilsTestCase.java",
                    "full name": "src.test.org.apache.commons.io.FileSystemUtilsTestCase.testGetFreeSpaceWindows_String_EmptyResponse"
                },
                {
                    "function name": "testGetFreeSpaceUnix_String_InvalidResponse2",
                    "function params": [],
                    "file name": "FileSystemUtilsTestCase.java",
                    "file old path": "src/test/org/apache/commons/io/FileSystemUtilsTestCase.java",
                    "file new path": "src/test/org/apache/commons/io/FileSystemUtilsTestCase.java",
                    "full name": "src.test.org.apache.commons.io.FileSystemUtilsTestCase.testGetFreeSpaceUnix_String_InvalidResponse2"
                },
                {
                    "function name": "testGetFreeSpaceUnix_String_LongResponseKb",
                    "function params": [],
                    "file name": "FileSystemUtilsTestCase.java",
                    "file old path": "src/test/org/apache/commons/io/FileSystemUtilsTestCase.java",
                    "file new path": "src/test/org/apache/commons/io/FileSystemUtilsTestCase.java",
                    "full name": "src.test.org.apache.commons.io.FileSystemUtilsTestCase.testGetFreeSpaceUnix_String_LongResponseKb"
                },
                {
                    "function name": "testGetFreeSpaceWindows_String_EmptyMultiLineResponse",
                    "function params": [],
                    "file name": "FileSystemUtilsTestCase.java",
                    "file old path": "src/test/org/apache/commons/io/FileSystemUtilsTestCase.java",
                    "file new path": "src/test/org/apache/commons/io/FileSystemUtilsTestCase.java",
                    "full name": "src.test.org.apache.commons.io.FileSystemUtilsTestCase.testGetFreeSpaceWindows_String_EmptyMultiLineResponse"
                },
                {
                    "function name": "MockFileSystemUtils",
                    "function params": [
                        "exitCode",
                        "lines",
                        "cmd"
                    ],
                    "file name": "FileSystemUtilsTestCase.java",
                    "file old path": "src/test/org/apache/commons/io/FileSystemUtilsTestCase.java",
                    "file new path": "src/test/org/apache/commons/io/FileSystemUtilsTestCase.java",
                    "full name": "src.test.org.apache.commons.io.FileSystemUtilsTestCase.MockFileSystemUtils"
                },
                {
                    "function name": "testGetFreeSpaceWindows_String_ParseCommaFormatBytes",
                    "function params": [],
                    "file name": "FileSystemUtilsTestCase.java",
                    "file old path": "src/test/org/apache/commons/io/FileSystemUtilsTestCase.java",
                    "file new path": "src/test/org/apache/commons/io/FileSystemUtilsTestCase.java",
                    "full name": "src.test.org.apache.commons.io.FileSystemUtilsTestCase.testGetFreeSpaceWindows_String_ParseCommaFormatBytes"
                },
                {
                    "function name": "testGetFreeSpaceUnix_String_EmptyPath",
                    "function params": [],
                    "file name": "FileSystemUtilsTestCase.java",
                    "file old path": "src/test/org/apache/commons/io/FileSystemUtilsTestCase.java",
                    "file new path": "src/test/org/apache/commons/io/FileSystemUtilsTestCase.java",
                    "full name": "src.test.org.apache.commons.io.FileSystemUtilsTestCase.testGetFreeSpaceUnix_String_EmptyPath"
                },
                {
                    "function name": "testGetFreeSpaceWindows_String_NormalResponse",
                    "function params": [],
                    "file name": "FileSystemUtilsTestCase.java",
                    "file old path": "src/test/org/apache/commons/io/FileSystemUtilsTestCase.java",
                    "file new path": "src/test/org/apache/commons/io/FileSystemUtilsTestCase.java",
                    "full name": "src.test.org.apache.commons.io.FileSystemUtilsTestCase.testGetFreeSpaceWindows_String_NormalResponse"
                },
                {
                    "function name": "MockFileSystemUtils",
                    "function params": [
                        "exitCode",
                        "lines"
                    ],
                    "file name": "FileSystemUtilsTestCase.java",
                    "file old path": "src/test/org/apache/commons/io/FileSystemUtilsTestCase.java",
                    "file new path": "src/test/org/apache/commons/io/FileSystemUtilsTestCase.java",
                    "full name": "src.test.org.apache.commons.io.FileSystemUtilsTestCase.MockFileSystemUtils"
                },
                {
                    "function name": "testGetFreeSpaceWindows_String_EmptyPath",
                    "function params": [],
                    "file name": "FileSystemUtilsTestCase.java",
                    "file old path": "src/test/org/apache/commons/io/FileSystemUtilsTestCase.java",
                    "file new path": "src/test/org/apache/commons/io/FileSystemUtilsTestCase.java",
                    "full name": "src.test.org.apache.commons.io.FileSystemUtilsTestCase.testGetFreeSpaceWindows_String_EmptyPath"
                },
                {
                    "function name": "MockFileSystemUtils",
                    "function params": [
                        "params"
                    ],
                    "file name": "FileSystemUtilsTestCase.java",
                    "file old path": "src/test/org/apache/commons/io/FileSystemUtilsTestCase.java",
                    "file new path": "src/test/org/apache/commons/io/FileSystemUtilsTestCase.java",
                    "full name": "src.test.org.apache.commons.io.FileSystemUtilsTestCase.MockFileSystemUtils"
                },
                {
                    "function name": "testGetFreeSpaceUnix_String_InvalidResponse1",
                    "function params": [],
                    "file name": "FileSystemUtilsTestCase.java",
                    "file old path": "src/test/org/apache/commons/io/FileSystemUtilsTestCase.java",
                    "file new path": "src/test/org/apache/commons/io/FileSystemUtilsTestCase.java",
                    "full name": "src.test.org.apache.commons.io.FileSystemUtilsTestCase.testGetFreeSpaceUnix_String_InvalidResponse1"
                },
                {
                    "function name": "testGetFreeSpaceUnix_String_LongResponse",
                    "function params": [],
                    "file name": "FileSystemUtilsTestCase.java",
                    "file old path": "src/test/org/apache/commons/io/FileSystemUtilsTestCase.java",
                    "file new path": "src/test/org/apache/commons/io/FileSystemUtilsTestCase.java",
                    "full name": "src.test.org.apache.commons.io.FileSystemUtilsTestCase.testGetFreeSpaceUnix_String_LongResponse"
                },
                {
                    "function name": "testGetFreeSpaceWindows_String_NoSuchDirectoryResponse",
                    "function params": [],
                    "file name": "FileSystemUtilsTestCase.java",
                    "file old path": "src/test/org/apache/commons/io/FileSystemUtilsTestCase.java",
                    "file new path": "src/test/org/apache/commons/io/FileSystemUtilsTestCase.java",
                    "full name": "src.test.org.apache.commons.io.FileSystemUtilsTestCase.testGetFreeSpaceWindows_String_NoSuchDirectoryResponse"
                },
                {
                    "function name": "testGetFreeSpaceWindows_String_StripDrive",
                    "function params": [],
                    "file name": "FileSystemUtilsTestCase.java",
                    "file old path": "src/test/org/apache/commons/io/FileSystemUtilsTestCase.java",
                    "file new path": "src/test/org/apache/commons/io/FileSystemUtilsTestCase.java",
                    "full name": "src.test.org.apache.commons.io.FileSystemUtilsTestCase.testGetFreeSpaceWindows_String_StripDrive"
                },
                {
                    "function name": "MockFileSystemUtils",
                    "function params": [
                        "p"
                    ],
                    "file name": "FileSystemUtilsTestCase.java",
                    "file old path": "src/test/org/apache/commons/io/FileSystemUtilsTestCase.java",
                    "file new path": "src/test/org/apache/commons/io/FileSystemUtilsTestCase.java",
                    "full name": "src.test.org.apache.commons.io.FileSystemUtilsTestCase.MockFileSystemUtils"
                },
                {
                    "function name": "testGetFreeSpaceUnix_String_NormalResponse",
                    "function params": [],
                    "file name": "FileSystemUtilsTestCase.java",
                    "file old path": "src/test/org/apache/commons/io/FileSystemUtilsTestCase.java",
                    "file new path": "src/test/org/apache/commons/io/FileSystemUtilsTestCase.java",
                    "full name": "src.test.org.apache.commons.io.FileSystemUtilsTestCase.testGetFreeSpaceUnix_String_NormalResponse"
                },
                {
                    "function name": "testGetFreeSpaceUnix_String_InvalidResponse3",
                    "function params": [],
                    "file name": "FileSystemUtilsTestCase.java",
                    "file old path": "src/test/org/apache/commons/io/FileSystemUtilsTestCase.java",
                    "file new path": "src/test/org/apache/commons/io/FileSystemUtilsTestCase.java",
                    "full name": "src.test.org.apache.commons.io.FileSystemUtilsTestCase.testGetFreeSpaceUnix_String_InvalidResponse3"
                },
                {
                    "function name": "testGetFreeSpaceWindows_String_InvalidTextResponse",
                    "function params": [],
                    "file name": "FileSystemUtilsTestCase.java",
                    "file old path": "src/test/org/apache/commons/io/FileSystemUtilsTestCase.java",
                    "file new path": "src/test/org/apache/commons/io/FileSystemUtilsTestCase.java",
                    "full name": "src.test.org.apache.commons.io.FileSystemUtilsTestCase.testGetFreeSpaceWindows_String_InvalidTextResponse"
                },
                {
                    "function name": "testGetFreeSpaceUnix_String_EmptyResponse",
                    "function params": [],
                    "file name": "FileSystemUtilsTestCase.java",
                    "file old path": "src/test/org/apache/commons/io/FileSystemUtilsTestCase.java",
                    "file new path": "src/test/org/apache/commons/io/FileSystemUtilsTestCase.java",
                    "full name": "src.test.org.apache.commons.io.FileSystemUtilsTestCase.testGetFreeSpaceUnix_String_EmptyResponse"
                },
                {
                    "function name": "testGetFreeSpaceUnix_String_InvalidResponse4",
                    "function params": [],
                    "file name": "FileSystemUtilsTestCase.java",
                    "file old path": "src/test/org/apache/commons/io/FileSystemUtilsTestCase.java",
                    "file new path": "src/test/org/apache/commons/io/FileSystemUtilsTestCase.java",
                    "full name": "src.test.org.apache.commons.io.FileSystemUtilsTestCase.testGetFreeSpaceUnix_String_InvalidResponse4"
                }
            ],
            "files that changed": [
                "src/java/org/apache/commons/io/FileSystemUtils.java",
                "src/test/org/apache/commons/io/FileSystemUtilsTestCase.java"
            ]
        },
        {
            "bug index": "341",
            "bug id": "IO-83",
            "hexsha": "742c51feeaf75542ab9db6782ad3d2ad506fb871",
            "fix_hash": "eaa8e0c698f694b7e5fdded5dbb9024c8cf15c4e",
            "description": "Reported via commons-owner@\n--------------------------------------------\n\nFrom: James Urie\nSent: Tuesday, July 11, 2006 8:51 AM\nTo: 'commons-dev-subscribe@jakarta.apache.org'\nSubject: New AIX fix?\n\n\n\nHello,\n\n\n\nI had to change the \"commons-io\" code to allow for usage on AIX 5.3.\nAttached is the file with changes.\n\nThe long and short of the change is that the \"df\" command used in the\nFile System Utils classes requires\n\nA \"P\" to be added to the switch to enable \"POSIX\" capability.\n\n\nJames Urie",
            "commit number version hash": 443,
            "commit number": 351,
            "function that changed": [
                {
                    "function name": "if",
                    "function params": [
                        "1"
                    ],
                    "file name": "FileSystemUtils.java",
                    "file old path": "src/java/org/apache/commons/io/FileSystemUtils.java",
                    "file new path": "src/java/org/apache/commons/io/FileSystemUtils.java",
                    "full name": "src.java.org.apache.commons.io.FileSystemUtils.if"
                },
                {
                    "function name": "freeSpaceOS",
                    "function params": [
                        "path",
                        "os",
                        "kb"
                    ],
                    "file name": "FileSystemUtils.java",
                    "file old path": "src/java/org/apache/commons/io/FileSystemUtils.java",
                    "file new path": "src/java/org/apache/commons/io/FileSystemUtils.java",
                    "full name": "src.java.org.apache.commons.io.FileSystemUtils.freeSpaceOS"
                },
                {
                    "function name": "if",
                    "function params": [
                        "1"
                    ],
                    "file name": "FileSystemUtils.java",
                    "file old path": "src/java/org/apache/commons/io/FileSystemUtils.java",
                    "file new path": "src/java/org/apache/commons/io/FileSystemUtils.java",
                    "full name": "src.java.org.apache.commons.io.FileSystemUtils.if"
                },
                {
                    "function name": "freeSpaceUnix",
                    "function params": [
                        "path",
                        "kb",
                        "posix"
                    ],
                    "file name": "FileSystemUtils.java",
                    "file old path": "src/java/org/apache/commons/io/FileSystemUtils.java",
                    "file new path": "src/java/org/apache/commons/io/FileSystemUtils.java",
                    "full name": "src.java.org.apache.commons.io.FileSystemUtils.freeSpaceUnix"
                },
                {
                    "function name": "if",
                    "function params": [
                        "1"
                    ],
                    "file name": "FileSystemUtils.java",
                    "file old path": "src/java/org/apache/commons/io/FileSystemUtils.java",
                    "file new path": "src/java/org/apache/commons/io/FileSystemUtils.java",
                    "full name": "src.java.org.apache.commons.io.FileSystemUtils.if"
                },
                {
                    "function name": "freeSpaceUnix",
                    "function params": [
                        "path",
                        "kb"
                    ],
                    "file name": "FileSystemUtils.java",
                    "file old path": "src/java/org/apache/commons/io/FileSystemUtils.java",
                    "file new path": "src/java/org/apache/commons/io/FileSystemUtils.java",
                    "full name": "src.java.org.apache.commons.io.FileSystemUtils.freeSpaceUnix"
                },
                {
                    "function name": "testGetFreeSpaceUnix_String_InvalidResponse2",
                    "function params": [],
                    "file name": "FileSystemUtilsTestCase.java",
                    "file old path": "src/test/org/apache/commons/io/FileSystemUtilsTestCase.java",
                    "file new path": "src/test/org/apache/commons/io/FileSystemUtilsTestCase.java",
                    "full name": "src.test.org.apache.commons.io.FileSystemUtilsTestCase.testGetFreeSpaceUnix_String_InvalidResponse2"
                },
                {
                    "function name": "testGetFreeSpace_String",
                    "function params": [],
                    "file name": "FileSystemUtilsTestCase.java",
                    "file old path": "src/test/org/apache/commons/io/FileSystemUtilsTestCase.java",
                    "file new path": "src/test/org/apache/commons/io/FileSystemUtilsTestCase.java",
                    "full name": "src.test.org.apache.commons.io.FileSystemUtilsTestCase.testGetFreeSpace_String"
                },
                {
                    "function name": "testGetFreeSpaceUnix_String_LongResponseKb",
                    "function params": [],
                    "file name": "FileSystemUtilsTestCase.java",
                    "file old path": "src/test/org/apache/commons/io/FileSystemUtilsTestCase.java",
                    "file new path": "src/test/org/apache/commons/io/FileSystemUtilsTestCase.java",
                    "full name": "src.test.org.apache.commons.io.FileSystemUtilsTestCase.testGetFreeSpaceUnix_String_LongResponseKb"
                },
                {
                    "function name": "testGetFreeSpaceOS_String_Unix",
                    "function params": [],
                    "file name": "FileSystemUtilsTestCase.java",
                    "file old path": "src/test/org/apache/commons/io/FileSystemUtilsTestCase.java",
                    "file new path": "src/test/org/apache/commons/io/FileSystemUtilsTestCase.java",
                    "full name": "src.test.org.apache.commons.io.FileSystemUtilsTestCase.testGetFreeSpaceOS_String_Unix"
                },
                {
                    "function name": "testGetFreeSpaceUnix_String_EmptyPath",
                    "function params": [],
                    "file name": "FileSystemUtilsTestCase.java",
                    "file old path": "src/test/org/apache/commons/io/FileSystemUtilsTestCase.java",
                    "file new path": "src/test/org/apache/commons/io/FileSystemUtilsTestCase.java",
                    "full name": "src.test.org.apache.commons.io.FileSystemUtilsTestCase.testGetFreeSpaceUnix_String_EmptyPath"
                },
                {
                    "function name": "testGetFreeSpaceUnix_String_InvalidResponse1",
                    "function params": [],
                    "file name": "FileSystemUtilsTestCase.java",
                    "file old path": "src/test/org/apache/commons/io/FileSystemUtilsTestCase.java",
                    "file new path": "src/test/org/apache/commons/io/FileSystemUtilsTestCase.java",
                    "full name": "src.test.org.apache.commons.io.FileSystemUtilsTestCase.testGetFreeSpaceUnix_String_InvalidResponse1"
                },
                {
                    "function name": "testGetFreeSpaceUnix_String_LongResponse",
                    "function params": [],
                    "file name": "FileSystemUtilsTestCase.java",
                    "file old path": "src/test/org/apache/commons/io/FileSystemUtilsTestCase.java",
                    "file new path": "src/test/org/apache/commons/io/FileSystemUtilsTestCase.java",
                    "full name": "src.test.org.apache.commons.io.FileSystemUtilsTestCase.testGetFreeSpaceUnix_String_LongResponse"
                },
                {
                    "function name": "testGetFreeSpaceUnix_String_EmptyResponse",
                    "function params": [],
                    "file name": "FileSystemUtilsTestCase.java",
                    "file old path": "src/test/org/apache/commons/io/FileSystemUtilsTestCase.java",
                    "file new path": "src/test/org/apache/commons/io/FileSystemUtilsTestCase.java",
                    "full name": "src.test.org.apache.commons.io.FileSystemUtilsTestCase.testGetFreeSpaceUnix_String_EmptyResponse"
                },
                {
                    "function name": "testGetFreeSpaceUnix_String_InvalidResponse3",
                    "function params": [],
                    "file name": "FileSystemUtilsTestCase.java",
                    "file old path": "src/test/org/apache/commons/io/FileSystemUtilsTestCase.java",
                    "file new path": "src/test/org/apache/commons/io/FileSystemUtilsTestCase.java",
                    "full name": "src.test.org.apache.commons.io.FileSystemUtilsTestCase.testGetFreeSpaceUnix_String_InvalidResponse3"
                },
                {
                    "function name": "testGetFreeSpaceUnix_String_NormalResponse",
                    "function params": [],
                    "file name": "FileSystemUtilsTestCase.java",
                    "file old path": "src/test/org/apache/commons/io/FileSystemUtilsTestCase.java",
                    "file new path": "src/test/org/apache/commons/io/FileSystemUtilsTestCase.java",
                    "full name": "src.test.org.apache.commons.io.FileSystemUtilsTestCase.testGetFreeSpaceUnix_String_NormalResponse"
                },
                {
                    "function name": "testGetFreeSpaceUnix_String_NormalResponseKb",
                    "function params": [],
                    "file name": "FileSystemUtilsTestCase.java",
                    "file old path": "src/test/org/apache/commons/io/FileSystemUtilsTestCase.java",
                    "file new path": "src/test/org/apache/commons/io/FileSystemUtilsTestCase.java",
                    "full name": "src.test.org.apache.commons.io.FileSystemUtilsTestCase.testGetFreeSpaceUnix_String_NormalResponseKb"
                },
                {
                    "function name": "testGetFreeSpaceUnix_String_InvalidResponse4",
                    "function params": [],
                    "file name": "FileSystemUtilsTestCase.java",
                    "file old path": "src/test/org/apache/commons/io/FileSystemUtilsTestCase.java",
                    "file new path": "src/test/org/apache/commons/io/FileSystemUtilsTestCase.java",
                    "full name": "src.test.org.apache.commons.io.FileSystemUtilsTestCase.testGetFreeSpaceUnix_String_InvalidResponse4"
                }
            ],
            "files that changed": [
                "src/java/org/apache/commons/io/FileSystemUtils.java",
                "src/test/org/apache/commons/io/FileSystemUtilsTestCase.java"
            ]
        },
        {
            "bug index": "342",
            "bug id": "IO-1",
            "hexsha": "742c51feeaf75542ab9db6782ad3d2ad506fb871",
            "fix_hash": "b3e812386927743ad9b68486a7270fb3d677d6e8",
            "description": "FileUtils.forceMkdir(File) calls File.mkdirs() to create the directory. The\nJavaDoc of this method does not mention that any necessary but nonexistent\nparent directories are created, too.",
            "commit number version hash": 443,
            "commit number": 342,
            "function that changed": [
                {
                    "function name": "directoryFileFilter",
                    "function params": [],
                    "file name": "FileFilterUtils.java",
                    "file old path": "src/java/org/apache/commons/io/filefilter/FileFilterUtils.java",
                    "file new path": "src/java/org/apache/commons/io/filefilter/FileFilterUtils.java",
                    "full name": "src.java.org.apache.commons.io.filefilter.FileFilterUtils.directoryFileFilter"
                },
                {
                    "function name": "trueFileFilter",
                    "function params": [],
                    "file name": "FileFilterUtils.java",
                    "file old path": "src/java/org/apache/commons/io/filefilter/FileFilterUtils.java",
                    "file new path": "src/java/org/apache/commons/io/filefilter/FileFilterUtils.java",
                    "full name": "src.java.org.apache.commons.io.filefilter.FileFilterUtils.trueFileFilter"
                },
                {
                    "function name": "falseFileFilter",
                    "function params": [],
                    "file name": "FileFilterUtils.java",
                    "file old path": "src/java/org/apache/commons/io/filefilter/FileFilterUtils.java",
                    "file new path": "src/java/org/apache/commons/io/filefilter/FileFilterUtils.java",
                    "full name": "src.java.org.apache.commons.io.filefilter.FileFilterUtils.falseFileFilter"
                },
                {
                    "function name": "testFalse",
                    "function params": [],
                    "file name": "FileFilterTestCase.java",
                    "file old path": "src/test/org/apache/commons/io/filefilter/FileFilterTestCase.java",
                    "file new path": "src/test/org/apache/commons/io/filefilter/FileFilterTestCase.java",
                    "full name": "src.test.org.apache.commons.io.filefilter.FileFilterTestCase.testFalse"
                },
                {
                    "function name": "testDirectory",
                    "function params": [],
                    "file name": "FileFilterTestCase.java",
                    "file old path": "src/test/org/apache/commons/io/filefilter/FileFilterTestCase.java",
                    "file new path": "src/test/org/apache/commons/io/filefilter/FileFilterTestCase.java",
                    "full name": "src.test.org.apache.commons.io.filefilter.FileFilterTestCase.testDirectory"
                },
                {
                    "function name": "testTrue",
                    "function params": [],
                    "file name": "FileFilterTestCase.java",
                    "file old path": "src/test/org/apache/commons/io/filefilter/FileFilterTestCase.java",
                    "file new path": "src/test/org/apache/commons/io/filefilter/FileFilterTestCase.java",
                    "full name": "src.test.org.apache.commons.io.filefilter.FileFilterTestCase.testTrue"
                }
            ],
            "files that changed": [
                "src/java/org/apache/commons/io/filefilter/DirectoryFileFilter.java",
                "src/java/org/apache/commons/io/filefilter/FalseFileFilter.java",
                "src/java/org/apache/commons/io/filefilter/FileFilterUtils.java",
                "src/java/org/apache/commons/io/filefilter/TrueFileFilter.java",
                "src/test/org/apache/commons/io/filefilter/FileFilterTestCase.java"
            ]
        },
        {
            "bug index": "343",
            "bug id": "IO-2",
            "hexsha": "742c51feeaf75542ab9db6782ad3d2ad506fb871",
            "fix_hash": "f38ef9b7478354cbecaa57fa9282e968e7ab8aee",
            "description": "Hi,\n\n(sorry to assign it to the wrong component, but I cannot choose for IO)\n\nwhen I try to concat 2 paths with \"\\\" as path separator instead of \"/\", an\nexception is thrown. I'll upload a patch for this as well as a junit test.\n\ne.g.: FilenameUtils.catPath(\"C:\\\\temp\\\\\", \"test\") throws an exception ...\n\nMaarten",
            "commit number version hash": 443,
            "commit number": 319,
            "function that changed": [
                {
                    "function name": "testForceDeleteDir",
                    "function params": [],
                    "file name": "FileUtilsTestCase.java",
                    "file old path": "src/test/org/apache/commons/io/FileUtilsTestCase.java",
                    "file new path": "src/test/org/apache/commons/io/FileUtilsTestCase.java",
                    "full name": "src.test.org.apache.commons.io.FileUtilsTestCase.testForceDeleteDir"
                },
                {
                    "function name": "testFileUtils",
                    "function params": [],
                    "file name": "FileUtilsTestCase.java",
                    "file old path": "src/test/org/apache/commons/io/FileUtilsTestCase.java",
                    "file new path": "src/test/org/apache/commons/io/FileUtilsTestCase.java",
                    "full name": "src.test.org.apache.commons.io.FileUtilsTestCase.testFileUtils"
                },
                {
                    "function name": "testCopyFile2",
                    "function params": [],
                    "file name": "FileUtilsTestCase.java",
                    "file old path": "src/test/org/apache/commons/io/FileUtilsTestCase.java",
                    "file new path": "src/test/org/apache/commons/io/FileUtilsTestCase.java",
                    "full name": "src.test.org.apache.commons.io.FileUtilsTestCase.testCopyFile2"
                },
                {
                    "function name": "getTestDirectory",
                    "function params": [],
                    "file name": "FileBasedTestCase.java",
                    "file old path": "src/test/org/apache/commons/io/testtools/FileBasedTestCase.java",
                    "file new path": "src/test/org/apache/commons/io/testtools/FileBasedTestCase.java",
                    "full name": "src.test.org.apache.commons.io.testtools.FileBasedTestCase.getTestDirectory"
                }
            ],
            "files that changed": [
                "src/test/org/apache/commons/io/FileUtilsTestCase.java",
                "src/test/org/apache/commons/io/testtools/FileBasedTestCase.java"
            ]
        },
        {
            "bug index": "344",
            "bug id": "IO-1",
            "hexsha": "742c51feeaf75542ab9db6782ad3d2ad506fb871",
            "fix_hash": "756d64a9eef6dc604db947597040c0b24965c52b",
            "description": "FileUtils.forceMkdir(File) calls File.mkdirs() to create the directory. The\nJavaDoc of this method does not mention that any necessary but nonexistent\nparent directories are created, too.",
            "commit number version hash": 443,
            "commit number": 286,
            "function that changed": [],
            "files that changed": [
                "src/java/org/apache/commons/io/EndianUtils.java"
            ]
        },
        {
            "bug index": "345",
            "bug id": "IO-1",
            "hexsha": "742c51feeaf75542ab9db6782ad3d2ad506fb871",
            "fix_hash": "990ea5d016b6ebc1961be059ba9aab0f5079683b",
            "description": "FileUtils.forceMkdir(File) calls File.mkdirs() to create the directory. The\nJavaDoc of this method does not mention that any necessary but nonexistent\nparent directories are created, too.",
            "commit number version hash": 443,
            "commit number": 284,
            "function that changed": [],
            "files that changed": [
                "src/java/org/apache/commons/io/CopyUtils.java",
                "src/java/org/apache/commons/io/EndianUtils.java",
                "src/java/org/apache/commons/io/FileCleaner.java",
                "src/java/org/apache/commons/io/FileSystemUtils.java",
                "src/java/org/apache/commons/io/FileUtils.java",
                "src/java/org/apache/commons/io/FilenameUtils.java",
                "src/java/org/apache/commons/io/HexDump.java",
                "src/java/org/apache/commons/io/IOUtils.java"
            ]
        },
        {
            "bug index": "346",
            "bug id": "IO-3",
            "hexsha": "742c51feeaf75542ab9db6782ad3d2ad506fb871",
            "fix_hash": "f0bd3788ad59aaf70fb170a2cb753afea15bf382",
            "description": "File copying using FileUtils.copyFile() does not preserve the last modified \ndate in the copy. I'm not sure about other OS's, but preservation of the last \nmodified date occurs when copying from Windows Explorer or the command window \nin a Windows environment. To add this feature to the class, just add the \nfollowing line at the end of FileUtils.copyFile():\n      destination.setLastModified(source.lastModified());\nTo unit test this change, add the following to the end of \nFileUtilsTestCase.testCopyFile1() and/or testCopyFile2():\n        assertTrue(\"Check last modified date preserved\", testFile1.lastModified\n() == destination.lastModified());",
            "commit number version hash": 443,
            "commit number": 185,
            "function that changed": [
                {
                    "function name": "innerListFiles",
                    "function params": [
                        "files",
                        "directory",
                        "filter"
                    ],
                    "file name": "FileUtils.java",
                    "file old path": "src/java/org/apache/commons/io/FileUtils.java",
                    "file new path": "src/java/org/apache/commons/io/FileUtils.java",
                    "full name": "src.java.org.apache.commons.io.FileUtils.innerListFiles"
                },
                {
                    "function name": "touch",
                    "function params": [
                        "file"
                    ],
                    "file name": "FileUtils.java",
                    "file old path": "src/java/org/apache/commons/io/FileUtils.java",
                    "file new path": "src/java/org/apache/commons/io/FileUtils.java",
                    "full name": "src.java.org.apache.commons.io.FileUtils.touch"
                }
            ],
            "files that changed": [
                "src/java/org/apache/commons/io/FileUtils.java"
            ]
        },
        {
            "bug index": "347",
            "bug id": "IO-2",
            "hexsha": "742c51feeaf75542ab9db6782ad3d2ad506fb871",
            "fix_hash": "2e2da038149e9c50bd92aae86378e4e5a10ca0a8",
            "description": "Hi,\n\n(sorry to assign it to the wrong component, but I cannot choose for IO)\n\nwhen I try to concat 2 paths with \"\\\" as path separator instead of \"/\", an\nexception is thrown. I'll upload a patch for this as well as a junit test.\n\ne.g.: FilenameUtils.catPath(\"C:\\\\temp\\\\\", \"test\") throws an exception ...\n\nMaarten",
            "commit number version hash": 443,
            "commit number": 175,
            "function that changed": [],
            "files that changed": [
                "src/java/org/apache/commons/io/EndianUtils.java",
                "src/java/org/apache/commons/io/IOUtils.java"
            ]
        },
        {
            "bug index": "348",
            "bug id": "IO-3",
            "hexsha": "742c51feeaf75542ab9db6782ad3d2ad506fb871",
            "fix_hash": "b13ad1c26d5473dd0559bb78a3424a562cec92b1",
            "description": "File copying using FileUtils.copyFile() does not preserve the last modified \ndate in the copy. I'm not sure about other OS's, but preservation of the last \nmodified date occurs when copying from Windows Explorer or the command window \nin a Windows environment. To add this feature to the class, just add the \nfollowing line at the end of FileUtils.copyFile():\n      destination.setLastModified(source.lastModified());\nTo unit test this change, add the following to the end of \nFileUtilsTestCase.testCopyFile1() and/or testCopyFile2():\n        assertTrue(\"Check last modified date preserved\", testFile1.lastModified\n() == destination.lastModified());",
            "commit number version hash": 443,
            "commit number": 163,
            "function that changed": [
                {
                    "function name": "touch",
                    "function params": [
                        "file"
                    ],
                    "file name": "FileUtils.java",
                    "file old path": "src/java/org/apache/commons/io/FileUtils.java",
                    "file new path": "src/java/org/apache/commons/io/FileUtils.java",
                    "full name": "src.java.org.apache.commons.io.FileUtils.touch"
                },
                {
                    "function name": "replaceAll",
                    "function params": [
                        "text",
                        "lookFor",
                        "replaceWith"
                    ],
                    "file name": "FileUtilsTestCase.java",
                    "file old path": "src/test/org/apache/commons/io/FileUtilsTestCase.java",
                    "file new path": "src/test/org/apache/commons/io/FileUtilsTestCase.java",
                    "full name": "src.test.org.apache.commons.io.FileUtilsTestCase.replaceAll"
                },
                {
                    "function name": "replaceAll",
                    "function params": [
                        "text",
                        "lookFor",
                        "replaceWith"
                    ],
                    "file name": "FilenameUtilsTestCase.java",
                    "file old path": "src/test/org/apache/commons/io/FilenameUtilsTestCase.java",
                    "file new path": "src/test/org/apache/commons/io/FilenameUtilsTestCase.java",
                    "full name": "src.test.org.apache.commons.io.FilenameUtilsTestCase.replaceAll"
                }
            ],
            "files that changed": [
                "src/java/org/apache/commons/io/FileUtils.java",
                "src/test/org/apache/commons/io/FileUtilsTestCase.java",
                "src/test/org/apache/commons/io/FilenameUtilsTestCase.java"
            ]
        }
    ]
}