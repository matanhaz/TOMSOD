{
    "bugs to commit": [
        {
            "bug index": "2",
            "bug id": "CSV-96",
            "hexsha": "e2221de62aa75cdb84f7c4b9742ac8aa0428fb91",
            "fix_hash": "a0d975933d6fe9eb5f359088de43508c1d3109bf",
            "description": "CSVRecord does not verify that the size of the header mapping matches the number of values. The following test will produce a ArrayOutOfBoundsException:\n\n{code}\n@Test\npublic void testInvalidHeaderTooLong() throws Exception {\n   final CSVParser parser = new CSVParser(\"a,b\", CSVFormat.newBuilder().withHeader(\"A\", \"B\", \"C\").build());\n   final CSVRecord record = parser.iterator().next();\n   record.get(\"C\");\n}\n{code}",
            "commit number version hash": 713,
            "commit number": 463,
            "function that changed": [
                {
                    "function name": "get",
                    "function params": [
                        "name"
                    ],
                    "file name": "CSVRecord.java",
                    "file old path": "src/main/java/org/apache/commons/csv/CSVRecord.java",
                    "file new path": "src/main/java/org/apache/commons/csv/CSVRecord.java",
                    "full name": "src.main.java.org.apache.commons.csv.CSVRecord.get"
                },
                {
                    "function name": "testGetString",
                    "function params": [],
                    "file name": "CSVRecordTest.java",
                    "file old path": null,
                    "file new path": "src/test/java/org/apache/commons/csv/CSVRecordTest.java",
                    "full name": "src.test.java.org.apache.commons.csv.CSVRecordTest.testGetString"
                },
                {
                    "function name": "testIsMapped",
                    "function params": [],
                    "file name": "CSVRecordTest.java",
                    "file old path": null,
                    "file new path": "src/test/java/org/apache/commons/csv/CSVRecordTest.java",
                    "full name": "src.test.java.org.apache.commons.csv.CSVRecordTest.testIsMapped"
                },
                {
                    "function name": "setUp",
                    "function params": [],
                    "file name": "CSVRecordTest.java",
                    "file old path": null,
                    "file new path": "src/test/java/org/apache/commons/csv/CSVRecordTest.java",
                    "full name": "src.test.java.org.apache.commons.csv.CSVRecordTest.setUp"
                },
                {
                    "function name": "testIterator",
                    "function params": [],
                    "file name": "CSVRecordTest.java",
                    "file old path": null,
                    "file new path": "src/test/java/org/apache/commons/csv/CSVRecordTest.java",
                    "full name": "src.test.java.org.apache.commons.csv.CSVRecordTest.testIterator"
                },
                {
                    "function name": "testGetStringInconsistentRecord",
                    "function params": [],
                    "file name": "CSVRecordTest.java",
                    "file old path": null,
                    "file new path": "src/test/java/org/apache/commons/csv/CSVRecordTest.java",
                    "full name": "src.test.java.org.apache.commons.csv.CSVRecordTest.testGetStringInconsistentRecord"
                },
                {
                    "function name": "testIsConsistent",
                    "function params": [],
                    "file name": "CSVRecordTest.java",
                    "file old path": null,
                    "file new path": "src/test/java/org/apache/commons/csv/CSVRecordTest.java",
                    "full name": "src.test.java.org.apache.commons.csv.CSVRecordTest.testIsConsistent"
                },
                {
                    "function name": "testGetInt",
                    "function params": [],
                    "file name": "CSVRecordTest.java",
                    "file old path": null,
                    "file new path": "src/test/java/org/apache/commons/csv/CSVRecordTest.java",
                    "full name": "src.test.java.org.apache.commons.csv.CSVRecordTest.testGetInt"
                },
                {
                    "function name": "testGetStringNoHeader",
                    "function params": [],
                    "file name": "CSVRecordTest.java",
                    "file old path": null,
                    "file new path": "src/test/java/org/apache/commons/csv/CSVRecordTest.java",
                    "full name": "src.test.java.org.apache.commons.csv.CSVRecordTest.testGetStringNoHeader"
                },
                {
                    "function name": "testIsSet",
                    "function params": [],
                    "file name": "CSVRecordTest.java",
                    "file old path": null,
                    "file new path": "src/test/java/org/apache/commons/csv/CSVRecordTest.java",
                    "full name": "src.test.java.org.apache.commons.csv.CSVRecordTest.testIsSet"
                }
            ],
            "files that changed": [
                "src/main/java/org/apache/commons/csv/CSVRecord.java"
            ]
        },
        {
            "bug index": "4",
            "bug id": "CSV-100",
            "hexsha": "e2221de62aa75cdb84f7c4b9742ac8aa0428fb91",
            "fix_hash": "22601f647f2ce9a05fa4ce20ea356492c670940c",
            "description": "title nearly says it all :-) \n\nGiven a CSVParser parser, the following line throws an NPE:\n\n{code}\nMap<String, Integer> header = parser.getHeaderMap();\n{code}\n\nStacktrace: \n\n{noformat}\nCaused by: java.lang.NullPointerException\nat java.util.HashMap.<init>(HashMap.java:318)\nat java.util.LinkedHashMap.<init>(LinkedHashMap.java:212)\nat org.apache.commons.csv.CSVParser.getHeaderMap(CSVParser.java:288)\n{noformat}\n\nhappens if the format doesn't have a headerMap.\n\nto fix, check if the parser's headerMap is null before trying to create the returned map:\n\n{code}\npublic Map<String, Integer> getHeaderMap() {\n    return this.headerMap != null ?\n       new LinkedHashMap<String, Integer>(this.headerMap)\n       : null;\n}\n\n{code}\n",
            "commit number version hash": 713,
            "commit number": 609,
            "function that changed": [
                {
                    "function name": "getHeaderMap",
                    "function params": [],
                    "file name": "CSVParser.java",
                    "file old path": "src/main/java/org/apache/commons/csv/CSVParser.java",
                    "file new path": "src/main/java/org/apache/commons/csv/CSVParser.java",
                    "full name": "src.main.java.org.apache.commons.csv.CSVParser.getHeaderMap"
                },
                {
                    "function name": "testNoHeaderMap",
                    "function params": [],
                    "file name": "CSVParserTest.java",
                    "file old path": "src/test/java/org/apache/commons/csv/CSVParserTest.java",
                    "file new path": "src/test/java/org/apache/commons/csv/CSVParserTest.java",
                    "full name": "src.test.java.org.apache.commons.csv.CSVParserTest.testNoHeaderMap"
                }
            ],
            "files that changed": [
                "src/main/java/org/apache/commons/csv/CSVParser.java",
                "src/test/java/org/apache/commons/csv/CSVParserTest.java"
            ]
        },
        {
            "bug index": "5",
            "bug id": "CSV-106",
            "hexsha": "e2221de62aa75cdb84f7c4b9742ac8aa0428fb91",
            "fix_hash": "73cc5246cf789db8f459e2f539831b6e91bedd26",
            "description": "When I now call\nCSVFormat.newFormat(';').withSkipHeaderRecord(true).withHeader(\"H1\",\"H2\").format(\"A\",\"B\")\nI get the output A;Bnull\n\nThe expected output would be \n\nA;B\n",
            "commit number version hash": 713,
            "commit number": 624,
            "function that changed": [
                {
                    "function name": "println",
                    "function params": [],
                    "file name": "CSVPrinter.java",
                    "file old path": "src/main/java/org/apache/commons/csv/CSVPrinter.java",
                    "file new path": "src/main/java/org/apache/commons/csv/CSVPrinter.java",
                    "full name": "src.main.java.org.apache.commons.csv.CSVPrinter.println"
                },
                {
                    "function name": "testNullRecordSeparatorCsv106",
                    "function params": [],
                    "file name": "CSVFormatTest.java",
                    "file old path": "src/test/java/org/apache/commons/csv/CSVFormatTest.java",
                    "file new path": "src/test/java/org/apache/commons/csv/CSVFormatTest.java",
                    "full name": "src.test.java.org.apache.commons.csv.CSVFormatTest.testNullRecordSeparatorCsv106"
                }
            ],
            "files that changed": [
                "src/main/java/org/apache/commons/csv/CSVPrinter.java",
                "src/test/java/org/apache/commons/csv/CSVFormatTest.java"
            ]
        },
        {
            "bug index": "6",
            "bug id": "CSV-111",
            "hexsha": "e2221de62aa75cdb84f7c4b9742ac8aa0428fb91",
            "fix_hash": "9f03b06a1ec8cb2cb64aec6068d2a6c1f663fbc9",
            "description": "Similar to CSV-96, if .toMap() is called on a record that has fewer fields than we have header columns we'll get an ArrayOutOfBoundsException.\n\n{code}\n@Test\npublic void testToMapWhenHeaderTooLong() throws Exception {\n   final CSVParser parser = new CSVParser(\"a,b\", CSVFormat.newBuilder().withHeader(\"A\", \"B\", \"C\").build());\n   final CSVRecord record = parser.iterator().next();\n   record.toMap();\n}\n{code}",
            "commit number version hash": 713,
            "commit number": 648,
            "function that changed": [
                {
                    "function name": "putIn",
                    "function params": [
                        "map"
                    ],
                    "file name": "CSVRecord.java",
                    "file old path": "src/main/java/org/apache/commons/csv/CSVRecord.java",
                    "file new path": "src/main/java/org/apache/commons/csv/CSVRecord.java",
                    "full name": "src.main.java.org.apache.commons.csv.CSVRecord.putIn"
                },
                {
                    "function name": "testToMapWithShortRecord",
                    "function params": [],
                    "file name": "CSVRecordTest.java",
                    "file old path": "src/test/java/org/apache/commons/csv/CSVRecordTest.java",
                    "file new path": "src/test/java/org/apache/commons/csv/CSVRecordTest.java",
                    "full name": "src.test.java.org.apache.commons.csv.CSVRecordTest.testToMapWithShortRecord"
                }
            ],
            "files that changed": [
                "src/main/java/org/apache/commons/csv/CSVRecord.java",
                "src/test/java/org/apache/commons/csv/CSVRecordTest.java"
            ]
        },
        {
            "bug index": "7",
            "bug id": "CSV-112",
            "hexsha": "e2221de62aa75cdb84f7c4b9742ac8aa0428fb91",
            "fix_hash": "ce4e72701b1ad4caabc3bd668bd058fff082f2b6",
            "description": "Given a parser format for csv files with a header line:\n{code}\nCSVFormat myFormat = CSVFormat.RFC4180.withDelimiter(\",\").withQuoteChar('\"').withQuotePolicy(Quote.MINIMAL)\n\t\t\t\t.withIgnoreSurroundingSpaces(true).withHeader().withSkipHeaderRecord(true);\n{code}\n\nAnd given a file with duplicate header names:\n \nCol1,Col2,Col2,Col3,Col4\n1,2,3,4,5\n4,5,6,7,8 \n\nThe HeaderMap returned by the parser misses an entry because of the Column name being used as a key, leading to wrong behavior when we rely on it.\n\nIf this is not supposed to happen in the file regarding the CSV format, at least this should raise an error. If not we should come up with a more clever way to store and access the headers.\n",
            "commit number version hash": 713,
            "commit number": 650,
            "function that changed": [
                {
                    "function name": "initializeHeader",
                    "function params": [],
                    "file name": "CSVParser.java",
                    "file old path": "src/main/java/org/apache/commons/csv/CSVParser.java",
                    "file new path": "src/main/java/org/apache/commons/csv/CSVParser.java",
                    "full name": "src.main.java.org.apache.commons.csv.CSVParser.initializeHeader"
                },
                {
                    "function name": "testDuplicateHeaderEntries",
                    "function params": [],
                    "file name": "CSVParserTest.java",
                    "file old path": "src/test/java/org/apache/commons/csv/CSVParserTest.java",
                    "file new path": "src/test/java/org/apache/commons/csv/CSVParserTest.java",
                    "full name": "src.test.java.org.apache.commons.csv.CSVParserTest.testDuplicateHeaderEntries"
                }
            ],
            "files that changed": [
                "src/main/java/org/apache/commons/csv/CSVParser.java",
                "src/test/java/org/apache/commons/csv/CSVParserTest.java"
            ]
        },
        {
            "bug index": "8",
            "bug id": "CSV-114",
            "hexsha": "e2221de62aa75cdb84f7c4b9742ac8aa0428fb91",
            "fix_hash": "35d101c2adecd51730f88e43941d85d16034886f",
            "description": "CSVFormat currently accepts whatever header String[] is provided.\nIt cannot be used if there are duplicate entries so these should be rejected.",
            "commit number version hash": 713,
            "commit number": 658,
            "function that changed": [
                {
                    "function name": "validate",
                    "function params": [],
                    "file name": "CSVFormat.java",
                    "file old path": "src/main/java/org/apache/commons/csv/CSVFormat.java",
                    "file new path": "src/main/java/org/apache/commons/csv/CSVFormat.java",
                    "full name": "src.main.java.org.apache.commons.csv.CSVFormat.validate"
                },
                {
                    "function name": "CSVFormat",
                    "function params": [
                        "delimiter",
                        "quoteChar",
                        "quotePolicy",
                        "commentStart",
                        "escape",
                        "ignoreSurroundingSpaces",
                        "ignoreEmptyLines",
                        "recordSeparator",
                        "nullString",
                        "header",
                        "skipHeaderRecord"
                    ],
                    "file name": "CSVFormat.java",
                    "file old path": "src/main/java/org/apache/commons/csv/CSVFormat.java",
                    "file new path": "src/main/java/org/apache/commons/csv/CSVFormat.java",
                    "full name": "src.main.java.org.apache.commons.csv.CSVFormat.CSVFormat"
                }
            ],
            "files that changed": [
                "src/main/java/org/apache/commons/csv/CSVFormat.java",
                "src/test/java/org/apache/commons/csv/CSVFormatTest.java"
            ]
        },
        {
            "bug index": "9",
            "bug id": "CSV-118",
            "hexsha": "e2221de62aa75cdb84f7c4b9742ac8aa0428fb91",
            "fix_hash": "2480dffa6d8343b189c6fb57b88b325c45f0b83f",
            "description": "The method toMap() on CSVRecord throws a NullPointerExcpetion when called on records derived using a format with no headers.\n\nThe method documentation states a null map should be returned instead.\n",
            "commit number version hash": 713,
            "commit number": 662,
            "function that changed": [
                {
                    "function name": "putIn",
                    "function params": [
                        "map"
                    ],
                    "file name": "CSVRecord.java",
                    "file old path": "src/main/java/org/apache/commons/csv/CSVRecord.java",
                    "file new path": "src/main/java/org/apache/commons/csv/CSVRecord.java",
                    "full name": "src.main.java.org.apache.commons.csv.CSVRecord.putIn"
                },
                {
                    "function name": "testToMapWithNoHeader",
                    "function params": [],
                    "file name": "CSVRecordTest.java",
                    "file old path": "src/test/java/org/apache/commons/csv/CSVRecordTest.java",
                    "file new path": "src/test/java/org/apache/commons/csv/CSVRecordTest.java",
                    "full name": "src.test.java.org.apache.commons.csv.CSVRecordTest.testToMapWithNoHeader"
                }
            ],
            "files that changed": [
                "src/main/java/org/apache/commons/csv/CSVRecord.java",
                "src/test/java/org/apache/commons/csv/CSVRecordTest.java"
            ]
        },
        {
            "bug index": "10",
            "bug id": "CSV-120",
            "hexsha": "e2221de62aa75cdb84f7c4b9742ac8aa0428fb91",
            "fix_hash": "1282503fb97d621b4225bd031757adbfada66181",
            "description": "In the current version [CSVFormat#withHeader|https://commons.apache.org/proper/commons-csv/apidocs/org/apache/commons/csv/CSVFormat.html#withHeader(java.lang.String...)] is only used by CSVParser. It would be nice if CSVPrinter also supported it. Ideally, the following line of code\n\n{code:java}\nCSVPrinter csvPrinter\n  = CSVFormat.TDF\n    .withHeader(\"x\")\n    .print(Files.newBufferedWriter(Paths.get(\"data.csv\")));\ncsvPrinter.printRecord(42);\ncsvPrinter.close();\n{code}\n\nshould produce\n\n{code}\nx\n42\n{code}\n\nIf you're alright with the idea of automatically inserting headers, I can attach a patch.",
            "commit number version hash": 713,
            "commit number": 664,
            "function that changed": [
                {
                    "function name": "print",
                    "function params": [
                        "out"
                    ],
                    "file name": "CSVFormat.java",
                    "file old path": "src/main/java/org/apache/commons/csv/CSVFormat.java",
                    "file new path": "src/main/java/org/apache/commons/csv/CSVFormat.java",
                    "full name": "src.main.java.org.apache.commons.csv.CSVFormat.print"
                },
                {
                    "function name": "CSVPrinter",
                    "function params": [
                        "out",
                        "format"
                    ],
                    "file name": "CSVPrinter.java",
                    "file old path": "src/main/java/org/apache/commons/csv/CSVPrinter.java",
                    "file new path": "src/main/java/org/apache/commons/csv/CSVPrinter.java",
                    "full name": "src.main.java.org.apache.commons.csv.CSVPrinter.CSVPrinter"
                },
                {
                    "function name": "testHeader",
                    "function params": [],
                    "file name": "CSVPrinterTest.java",
                    "file old path": "src/test/java/org/apache/commons/csv/CSVPrinterTest.java",
                    "file new path": "src/test/java/org/apache/commons/csv/CSVPrinterTest.java",
                    "full name": "src.test.java.org.apache.commons.csv.CSVPrinterTest.testHeader"
                }
            ],
            "files that changed": [
                "src/main/java/org/apache/commons/csv/CSVFormat.java",
                "src/main/java/org/apache/commons/csv/CSVPrinter.java",
                "src/test/java/org/apache/commons/csv/CSVPrinterTest.java"
            ]
        },
        {
            "bug index": "11",
            "bug id": "CSV-122",
            "hexsha": "e2221de62aa75cdb84f7c4b9742ac8aa0428fb91",
            "fix_hash": "b67524da7fd146634c7112b23e95d1d45c398b82",
            "description": "When setting the format to have a nullString of \"\" and having an empty header value, a nullPointerException is thrown.",
            "commit number version hash": 713,
            "commit number": 689,
            "function that changed": [
                {
                    "function name": "initializeHeader",
                    "function params": [],
                    "file name": "CSVParser.java",
                    "file old path": "src/main/java/org/apache/commons/csv/CSVParser.java",
                    "file new path": "src/main/java/org/apache/commons/csv/CSVParser.java",
                    "full name": "src.main.java.org.apache.commons.csv.CSVParser.initializeHeader"
                },
                {
                    "function name": "testHeaderMissingWithNull",
                    "function params": [],
                    "file name": "CSVParserTest.java",
                    "file old path": "src/test/java/org/apache/commons/csv/CSVParserTest.java",
                    "file new path": "src/test/java/org/apache/commons/csv/CSVParserTest.java",
                    "full name": "src.test.java.org.apache.commons.csv.CSVParserTest.testHeaderMissingWithNull"
                }
            ],
            "files that changed": [
                "src/main/java/org/apache/commons/csv/CSVParser.java",
                "src/test/java/org/apache/commons/csv/CSVParserTest.java"
            ]
        },
        {
            "bug index": "12",
            "bug id": "CSV-128",
            "hexsha": "65883aa4d9478161d7c526c1f6e1d5f2806da93b",
            "fix_hash": "c81ad0328eefb438cc875b9c9f081be93f9fdcc2",
            "description": "I have an Excel file with a first row with N column names\nIf there are additional columns that are not labeled, Excel exports empty columns. For example:\nA,B,C,,\na,b,c,d,e\n\nThis causes an IAE like:\n\n{noformat}\njava.lang.IllegalArgumentException: The header contains a duplicate name: \"\" in [A, B, C, , ]\n\tat org.apache.commons.csv.CSVParser.initializeHeader(CSVParser.java:368)\n\tat org.apache.commons.csv.CSVParser.<init>(CSVParser.java:248)\n\tat org.apache.commons.csv.CSVParser.parse(CSVParser.java:206)\n{noformat}\t\n\nIt seems like the simplest solution is to ignore empty column names, such that they cannot be addressable and not attempt to index them.",
            "commit number version hash": 754,
            "commit number": 716,
            "function that changed": [
                {
                    "function name": "validateLineNumbers",
                    "function params": [
                        "lineSeparator"
                    ],
                    "file name": "CSVParserTest.java",
                    "file old path": "src/test/java/org/apache/commons/csv/CSVParserTest.java",
                    "file new path": "src/test/java/org/apache/commons/csv/CSVParserTest.java",
                    "full name": "src.test.java.org.apache.commons.csv.CSVParserTest.validateLineNumbers"
                },
                {
                    "function name": "testExcelFormat2",
                    "function params": [],
                    "file name": "CSVParserTest.java",
                    "file old path": "src/test/java/org/apache/commons/csv/CSVParserTest.java",
                    "file new path": "src/test/java/org/apache/commons/csv/CSVParserTest.java",
                    "full name": "src.test.java.org.apache.commons.csv.CSVParserTest.testExcelFormat2"
                },
                {
                    "function name": "testEndOfFileBehaviourExcel",
                    "function params": [],
                    "file name": "CSVParserTest.java",
                    "file old path": "src/test/java/org/apache/commons/csv/CSVParserTest.java",
                    "file new path": "src/test/java/org/apache/commons/csv/CSVParserTest.java",
                    "full name": "src.test.java.org.apache.commons.csv.CSVParserTest.testEndOfFileBehaviourExcel"
                },
                {
                    "function name": "testBackslashEscaping2",
                    "function params": [],
                    "file name": "CSVParserTest.java",
                    "file old path": "src/test/java/org/apache/commons/csv/CSVParserTest.java",
                    "file new path": "src/test/java/org/apache/commons/csv/CSVParserTest.java",
                    "full name": "src.test.java.org.apache.commons.csv.CSVParserTest.testBackslashEscaping2"
                },
                {
                    "function name": "testBOM",
                    "function params": [],
                    "file name": "CSVParserTest.java",
                    "file old path": "src/test/java/org/apache/commons/csv/CSVParserTest.java",
                    "file new path": "src/test/java/org/apache/commons/csv/CSVParserTest.java",
                    "full name": "src.test.java.org.apache.commons.csv.CSVParserTest.testBOM"
                },
                {
                    "function name": "testEmptyLineBehaviourExcel",
                    "function params": [],
                    "file name": "CSVParserTest.java",
                    "file old path": "src/test/java/org/apache/commons/csv/CSVParserTest.java",
                    "file new path": "src/test/java/org/apache/commons/csv/CSVParserTest.java",
                    "full name": "src.test.java.org.apache.commons.csv.CSVParserTest.testEmptyLineBehaviourExcel"
                },
                {
                    "function name": "testEndOfFileBehaviorCSV",
                    "function params": [],
                    "file name": "CSVParserTest.java",
                    "file old path": "src/test/java/org/apache/commons/csv/CSVParserTest.java",
                    "file new path": "src/test/java/org/apache/commons/csv/CSVParserTest.java",
                    "full name": "src.test.java.org.apache.commons.csv.CSVParserTest.testEndOfFileBehaviorCSV"
                },
                {
                    "function name": "testDefaultFormat",
                    "function params": [],
                    "file name": "CSVParserTest.java",
                    "file old path": "src/test/java/org/apache/commons/csv/CSVParserTest.java",
                    "file new path": "src/test/java/org/apache/commons/csv/CSVParserTest.java",
                    "full name": "src.test.java.org.apache.commons.csv.CSVParserTest.testDefaultFormat"
                },
                {
                    "function name": "testExcelFormat1",
                    "function params": [],
                    "file name": "CSVParserTest.java",
                    "file old path": "src/test/java/org/apache/commons/csv/CSVParserTest.java",
                    "file new path": "src/test/java/org/apache/commons/csv/CSVParserTest.java",
                    "full name": "src.test.java.org.apache.commons.csv.CSVParserTest.testExcelFormat1"
                },
                {
                    "function name": "testBackslashEscapingOld",
                    "function params": [],
                    "file name": "CSVParserTest.java",
                    "file old path": "src/test/java/org/apache/commons/csv/CSVParserTest.java",
                    "file new path": "src/test/java/org/apache/commons/csv/CSVParserTest.java",
                    "full name": "src.test.java.org.apache.commons.csv.CSVParserTest.testBackslashEscapingOld"
                },
                {
                    "function name": "testDuplicateHeaders",
                    "function params": [],
                    "file name": "CSVParserTest.java",
                    "file old path": "src/test/java/org/apache/commons/csv/CSVParserTest.java",
                    "file new path": "src/test/java/org/apache/commons/csv/CSVParserTest.java",
                    "full name": "src.test.java.org.apache.commons.csv.CSVParserTest.testDuplicateHeaders"
                },
                {
                    "function name": "testIterator",
                    "function params": [],
                    "file name": "CSVParserTest.java",
                    "file old path": "src/test/java/org/apache/commons/csv/CSVParserTest.java",
                    "file new path": "src/test/java/org/apache/commons/csv/CSVParserTest.java",
                    "full name": "src.test.java.org.apache.commons.csv.CSVParserTest.testIterator"
                },
                {
                    "function name": "testForEach",
                    "function params": [],
                    "file name": "CSVParserTest.java",
                    "file old path": "src/test/java/org/apache/commons/csv/CSVParserTest.java",
                    "file new path": "src/test/java/org/apache/commons/csv/CSVParserTest.java",
                    "full name": "src.test.java.org.apache.commons.csv.CSVParserTest.testForEach"
                },
                {
                    "function name": "testIgnoreEmptyLines",
                    "function params": [],
                    "file name": "CSVParserTest.java",
                    "file old path": "src/test/java/org/apache/commons/csv/CSVParserTest.java",
                    "file new path": "src/test/java/org/apache/commons/csv/CSVParserTest.java",
                    "full name": "src.test.java.org.apache.commons.csv.CSVParserTest.testIgnoreEmptyLines"
                },
                {
                    "function name": "validateRecordNumbers",
                    "function params": [
                        "lineSeparator"
                    ],
                    "file name": "CSVParserTest.java",
                    "file old path": "src/test/java/org/apache/commons/csv/CSVParserTest.java",
                    "file new path": "src/test/java/org/apache/commons/csv/CSVParserTest.java",
                    "full name": "src.test.java.org.apache.commons.csv.CSVParserTest.validateRecordNumbers"
                },
                {
                    "function name": "testBOMInputStream",
                    "function params": [],
                    "file name": "CSVParserTest.java",
                    "file old path": "src/test/java/org/apache/commons/csv/CSVParserTest.java",
                    "file new path": "src/test/java/org/apache/commons/csv/CSVParserTest.java",
                    "full name": "src.test.java.org.apache.commons.csv.CSVParserTest.testBOMInputStream"
                },
                {
                    "function name": "testGetRecordWithMultiLineValues",
                    "function params": [],
                    "file name": "CSVParserTest.java",
                    "file old path": "src/test/java/org/apache/commons/csv/CSVParserTest.java",
                    "file new path": "src/test/java/org/apache/commons/csv/CSVParserTest.java",
                    "full name": "src.test.java.org.apache.commons.csv.CSVParserTest.testGetRecordWithMultiLineValues"
                },
                {
                    "function name": "testEmptyLineBehaviourCSV",
                    "function params": [],
                    "file name": "CSVParserTest.java",
                    "file old path": "src/test/java/org/apache/commons/csv/CSVParserTest.java",
                    "file new path": "src/test/java/org/apache/commons/csv/CSVParserTest.java",
                    "full name": "src.test.java.org.apache.commons.csv.CSVParserTest.testEmptyLineBehaviourCSV"
                },
                {
                    "function name": "testBackslashEscaping",
                    "function params": [],
                    "file name": "CSVParserTest.java",
                    "file old path": "src/test/java/org/apache/commons/csv/CSVParserTest.java",
                    "file new path": "src/test/java/org/apache/commons/csv/CSVParserTest.java",
                    "full name": "src.test.java.org.apache.commons.csv.CSVParserTest.testBackslashEscaping"
                },
                {
                    "function name": "testExcelHeaderCountLessThanData",
                    "function params": [],
                    "file name": "CSVParserTest.java",
                    "file old path": "src/test/java/org/apache/commons/csv/CSVParserTest.java",
                    "file new path": "src/test/java/org/apache/commons/csv/CSVParserTest.java",
                    "full name": "src.test.java.org.apache.commons.csv.CSVParserTest.testExcelHeaderCountLessThanData"
                }
            ],
            "files that changed": [
                "src/main/java/org/apache/commons/csv/CSVFormat.java",
                "src/test/java/org/apache/commons/csv/CSVParserTest.java"
            ]
        },
        {
            "bug index": "13",
            "bug id": "CSV-168",
            "hexsha": "d2a7ecd41f12db711487a765c4aef904cdaf4857",
            "fix_hash": "f8b80e83417c3c7eeed1282118f64fa0e85c4787",
            "description": "Hello,\n\nUse case: I'm generating MySQL dump files (text format) - for more details check this - http://dev.mysql.com/doc/refman/5.7/en/select-into.html. \n\nIssue: The value null is represented as \"\\N\". Also by default the escape char is '\\N'. The CsvPrinter.printAndEscape method will convert this value into {noformat}\"\\\\N\"{noformat}\n\nI suggest to modify the CsvPrinter in order to not escape the nullString value  - it should be written as it is. I can create a pull request if you want.\n\nI consider it a minor issue because it can be mitigated by making sure that the escape character is not a part of the nullString - however in my case it means that the LOAD commands should be modified accordingly.",
            "commit number version hash": 818,
            "commit number": 779,
            "function that changed": [
                {
                    "function name": "print",
                    "function params": [
                        "object",
                        "value",
                        "offset",
                        "len"
                    ],
                    "file name": "CSVPrinter.java",
                    "file old path": "src/main/java/org/apache/commons/csv/CSVPrinter.java",
                    "file new path": "src/main/java/org/apache/commons/csv/CSVPrinter.java",
                    "full name": "src.main.java.org.apache.commons.csv.CSVPrinter.print"
                },
                {
                    "function name": "testMySqlNullStringDefault",
                    "function params": [],
                    "file name": "CSVPrinterTest.java",
                    "file old path": "src/test/java/org/apache/commons/csv/CSVPrinterTest.java",
                    "file new path": "src/test/java/org/apache/commons/csv/CSVPrinterTest.java",
                    "full name": "src.test.java.org.apache.commons.csv.CSVPrinterTest.testMySqlNullStringDefault"
                },
                {
                    "function name": "testRandomExcel",
                    "function params": [],
                    "file name": "CSVPrinterTest.java",
                    "file old path": "src/test/java/org/apache/commons/csv/CSVPrinterTest.java",
                    "file new path": "src/test/java/org/apache/commons/csv/CSVPrinterTest.java",
                    "full name": "src.test.java.org.apache.commons.csv.CSVPrinterTest.testRandomExcel"
                },
                {
                    "function name": "testMySqlNullOutput",
                    "function params": [],
                    "file name": "CSVPrinterTest.java",
                    "file old path": "src/test/java/org/apache/commons/csv/CSVPrinterTest.java",
                    "file new path": "src/test/java/org/apache/commons/csv/CSVPrinterTest.java",
                    "full name": "src.test.java.org.apache.commons.csv.CSVPrinterTest.testMySqlNullOutput"
                },
                {
                    "function name": "testHeaderCommentTdf",
                    "function params": [],
                    "file name": "CSVPrinterTest.java",
                    "file old path": "src/test/java/org/apache/commons/csv/CSVPrinterTest.java",
                    "file new path": "src/test/java/org/apache/commons/csv/CSVPrinterTest.java",
                    "full name": "src.test.java.org.apache.commons.csv.CSVPrinterTest.testHeaderCommentTdf"
                },
                {
                    "function name": "testRandomMySql",
                    "function params": [],
                    "file name": "CSVPrinterTest.java",
                    "file old path": "src/test/java/org/apache/commons/csv/CSVPrinterTest.java",
                    "file new path": "src/test/java/org/apache/commons/csv/CSVPrinterTest.java",
                    "full name": "src.test.java.org.apache.commons.csv.CSVPrinterTest.testRandomMySql"
                },
                {
                    "function name": "randStr",
                    "function params": [],
                    "file name": "CSVPrinterTest.java",
                    "file old path": "src/test/java/org/apache/commons/csv/CSVPrinterTest.java",
                    "file new path": "src/test/java/org/apache/commons/csv/CSVPrinterTest.java",
                    "full name": "src.test.java.org.apache.commons.csv.CSVPrinterTest.randStr"
                },
                {
                    "function name": "expectNulls",
                    "function params": [
                        "original",
                        "csvFormat"
                    ],
                    "file name": "CSVPrinterTest.java",
                    "file old path": "src/test/java/org/apache/commons/csv/CSVPrinterTest.java",
                    "file new path": "src/test/java/org/apache/commons/csv/CSVPrinterTest.java",
                    "full name": "src.test.java.org.apache.commons.csv.CSVPrinterTest.expectNulls"
                },
                {
                    "function name": "toFirstRecordValues",
                    "function params": [
                        "expected",
                        "format"
                    ],
                    "file name": "CSVPrinterTest.java",
                    "file old path": "src/test/java/org/apache/commons/csv/CSVPrinterTest.java",
                    "file new path": "src/test/java/org/apache/commons/csv/CSVPrinterTest.java",
                    "full name": "src.test.java.org.apache.commons.csv.CSVPrinterTest.toFirstRecordValues"
                },
                {
                    "function name": "testSkipHeaderRecordFalse",
                    "function params": [],
                    "file name": "CSVPrinterTest.java",
                    "file old path": "src/test/java/org/apache/commons/csv/CSVPrinterTest.java",
                    "file new path": "src/test/java/org/apache/commons/csv/CSVPrinterTest.java",
                    "full name": "src.test.java.org.apache.commons.csv.CSVPrinterTest.testSkipHeaderRecordFalse"
                },
                {
                    "function name": "doOneRandom",
                    "function params": [
                        "format"
                    ],
                    "file name": "CSVPrinterTest.java",
                    "file old path": "src/test/java/org/apache/commons/csv/CSVPrinterTest.java",
                    "file new path": "src/test/java/org/apache/commons/csv/CSVPrinterTest.java",
                    "full name": "src.test.java.org.apache.commons.csv.CSVPrinterTest.doOneRandom"
                },
                {
                    "function name": "testRandomDefault",
                    "function params": [],
                    "file name": "CSVPrinterTest.java",
                    "file old path": "src/test/java/org/apache/commons/csv/CSVPrinterTest.java",
                    "file new path": "src/test/java/org/apache/commons/csv/CSVPrinterTest.java",
                    "full name": "src.test.java.org.apache.commons.csv.CSVPrinterTest.testRandomDefault"
                },
                {
                    "function name": "testRandomRfc4180",
                    "function params": [],
                    "file name": "CSVPrinterTest.java",
                    "file old path": "src/test/java/org/apache/commons/csv/CSVPrinterTest.java",
                    "file new path": "src/test/java/org/apache/commons/csv/CSVPrinterTest.java",
                    "full name": "src.test.java.org.apache.commons.csv.CSVPrinterTest.testRandomRfc4180"
                },
                {
                    "function name": "testHeader",
                    "function params": [],
                    "file name": "CSVPrinterTest.java",
                    "file old path": "src/test/java/org/apache/commons/csv/CSVPrinterTest.java",
                    "file new path": "src/test/java/org/apache/commons/csv/CSVPrinterTest.java",
                    "full name": "src.test.java.org.apache.commons.csv.CSVPrinterTest.testHeader"
                },
                {
                    "function name": "generateLines",
                    "function params": [
                        "nLines",
                        "nCol"
                    ],
                    "file name": "CSVPrinterTest.java",
                    "file old path": "src/test/java/org/apache/commons/csv/CSVPrinterTest.java",
                    "file new path": "src/test/java/org/apache/commons/csv/CSVPrinterTest.java",
                    "full name": "src.test.java.org.apache.commons.csv.CSVPrinterTest.generateLines"
                },
                {
                    "function name": "testSkipHeaderRecordTrue",
                    "function params": [],
                    "file name": "CSVPrinterTest.java",
                    "file old path": "src/test/java/org/apache/commons/csv/CSVPrinterTest.java",
                    "file new path": "src/test/java/org/apache/commons/csv/CSVPrinterTest.java",
                    "full name": "src.test.java.org.apache.commons.csv.CSVPrinterTest.testSkipHeaderRecordTrue"
                },
                {
                    "function name": "testRandomTdf",
                    "function params": [],
                    "file name": "CSVPrinterTest.java",
                    "file old path": "src/test/java/org/apache/commons/csv/CSVPrinterTest.java",
                    "file new path": "src/test/java/org/apache/commons/csv/CSVPrinterTest.java",
                    "full name": "src.test.java.org.apache.commons.csv.CSVPrinterTest.testRandomTdf"
                },
                {
                    "function name": "testEscapeBackslash",
                    "function params": [],
                    "file name": "CSVPrinterTest.java",
                    "file old path": "src/test/java/org/apache/commons/csv/CSVPrinterTest.java",
                    "file new path": "src/test/java/org/apache/commons/csv/CSVPrinterTest.java",
                    "full name": "src.test.java.org.apache.commons.csv.CSVPrinterTest.testEscapeBackslash"
                },
                {
                    "function name": "testExcelPrintAllIterableOfLists",
                    "function params": [],
                    "file name": "CSVPrinterTest.java",
                    "file old path": "src/test/java/org/apache/commons/csv/CSVPrinterTest.java",
                    "file new path": "src/test/java/org/apache/commons/csv/CSVPrinterTest.java",
                    "full name": "src.test.java.org.apache.commons.csv.CSVPrinterTest.testExcelPrintAllIterableOfLists"
                },
                {
                    "function name": "testHeaderCommentExcel",
                    "function params": [],
                    "file name": "CSVPrinterTest.java",
                    "file old path": "src/test/java/org/apache/commons/csv/CSVPrinterTest.java",
                    "file new path": "src/test/java/org/apache/commons/csv/CSVPrinterTest.java",
                    "full name": "src.test.java.org.apache.commons.csv.CSVPrinterTest.testHeaderCommentExcel"
                }
            ],
            "files that changed": [
                "src/main/java/org/apache/commons/csv/CSVFormat.java",
                "src/main/java/org/apache/commons/csv/CSVPrinter.java",
                "src/test/java/org/apache/commons/csv/CSVPrinterTest.java"
            ]
        },
        {
            "bug index": "14",
            "bug id": "CSV-171",
            "hexsha": "7e471527915cb0c73316c598fd02b71a56f2cf43",
            "fix_hash": "190390bf5dd83d6137ca3045902fcecbeafa3227",
            "description": "Negative Numeric values are always quoted in minimal mode if (and only if) they are in the first column.\n\ni.e.\nlong,lat,data\n\"-92.222\",43.333,3\n\nLooking at the code, this is by design but seem to be for an unknown reason.\n\nFrom v1.2 CSVPrinter line 230:\n\n// TODO where did this rule come from?\nif (newRecord && (c < '0' || (c > '9' && c < 'A') || (c > 'Z' && c < 'a') || (c > 'z'))) {\n    quote = true;\n} else ...\n   \n\nI propose this rule to either be remove or at a minimum be changed to:\n// TODO where did this rule come from?\nif (newRecord && (c !='-' && c < '0' || (c > '9' && c < 'A') || (c > 'Z' && c < 'a') || (c > 'z'))) {\n    quote = true;\n} else ...\n   \n\n",
            "commit number version hash": 886,
            "commit number": 854,
            "function that changed": [
                {
                    "function name": "printAndQuote",
                    "function params": [
                        "object",
                        "value",
                        "offset",
                        "len",
                        "out",
                        "newRecord"
                    ],
                    "file name": "CSVFormat.java",
                    "file old path": "src/main/java/org/apache/commons/csv/CSVFormat.java",
                    "file new path": "src/main/java/org/apache/commons/csv/CSVFormat.java",
                    "full name": "src.main.java.org.apache.commons.csv.CSVFormat.printAndQuote"
                },
                {
                    "function name": "testJira135_part2",
                    "function params": [],
                    "file name": "CSVPrinterTest.java",
                    "file old path": "src/test/java/org/apache/commons/csv/CSVPrinterTest.java",
                    "file new path": "src/test/java/org/apache/commons/csv/CSVPrinterTest.java",
                    "full name": "src.test.java.org.apache.commons.csv.CSVPrinterTest.testJira135_part2"
                },
                {
                    "function name": "testJira135All",
                    "function params": [],
                    "file name": "CSVPrinterTest.java",
                    "file old path": "src/test/java/org/apache/commons/csv/CSVPrinterTest.java",
                    "file new path": "src/test/java/org/apache/commons/csv/CSVPrinterTest.java",
                    "full name": "src.test.java.org.apache.commons.csv.CSVPrinterTest.testJira135All"
                },
                {
                    "function name": "testEscapeBackslash5",
                    "function params": [],
                    "file name": "CSVPrinterTest.java",
                    "file old path": "src/test/java/org/apache/commons/csv/CSVPrinterTest.java",
                    "file new path": "src/test/java/org/apache/commons/csv/CSVPrinterTest.java",
                    "full name": "src.test.java.org.apache.commons.csv.CSVPrinterTest.testEscapeBackslash5"
                },
                {
                    "function name": "testMySqlNullOutput",
                    "function params": [],
                    "file name": "CSVPrinterTest.java",
                    "file old path": "src/test/java/org/apache/commons/csv/CSVPrinterTest.java",
                    "file new path": "src/test/java/org/apache/commons/csv/CSVPrinterTest.java",
                    "full name": "src.test.java.org.apache.commons.csv.CSVPrinterTest.testMySqlNullOutput"
                },
                {
                    "function name": "testEscapeNull4",
                    "function params": [],
                    "file name": "CSVPrinterTest.java",
                    "file old path": "src/test/java/org/apache/commons/csv/CSVPrinterTest.java",
                    "file new path": "src/test/java/org/apache/commons/csv/CSVPrinterTest.java",
                    "full name": "src.test.java.org.apache.commons.csv.CSVPrinterTest.testEscapeNull4"
                },
                {
                    "function name": "testEscapeNull1",
                    "function params": [],
                    "file name": "CSVPrinterTest.java",
                    "file old path": "src/test/java/org/apache/commons/csv/CSVPrinterTest.java",
                    "file new path": "src/test/java/org/apache/commons/csv/CSVPrinterTest.java",
                    "full name": "src.test.java.org.apache.commons.csv.CSVPrinterTest.testEscapeNull1"
                },
                {
                    "function name": "testEscapeNull3",
                    "function params": [],
                    "file name": "CSVPrinterTest.java",
                    "file old path": "src/test/java/org/apache/commons/csv/CSVPrinterTest.java",
                    "file new path": "src/test/java/org/apache/commons/csv/CSVPrinterTest.java",
                    "full name": "src.test.java.org.apache.commons.csv.CSVPrinterTest.testEscapeNull3"
                },
                {
                    "function name": "randStr",
                    "function params": [],
                    "file name": "CSVPrinterTest.java",
                    "file old path": "src/test/java/org/apache/commons/csv/CSVPrinterTest.java",
                    "file new path": "src/test/java/org/apache/commons/csv/CSVPrinterTest.java",
                    "full name": "src.test.java.org.apache.commons.csv.CSVPrinterTest.randStr"
                },
                {
                    "function name": "testJira135_part3",
                    "function params": [],
                    "file name": "CSVPrinterTest.java",
                    "file old path": "src/test/java/org/apache/commons/csv/CSVPrinterTest.java",
                    "file new path": "src/test/java/org/apache/commons/csv/CSVPrinterTest.java",
                    "full name": "src.test.java.org.apache.commons.csv.CSVPrinterTest.testJira135_part3"
                },
                {
                    "function name": "testEscapeNull5",
                    "function params": [],
                    "file name": "CSVPrinterTest.java",
                    "file old path": "src/test/java/org/apache/commons/csv/CSVPrinterTest.java",
                    "file new path": "src/test/java/org/apache/commons/csv/CSVPrinterTest.java",
                    "full name": "src.test.java.org.apache.commons.csv.CSVPrinterTest.testEscapeNull5"
                },
                {
                    "function name": "testJira135_part1",
                    "function params": [],
                    "file name": "CSVPrinterTest.java",
                    "file old path": "src/test/java/org/apache/commons/csv/CSVPrinterTest.java",
                    "file new path": "src/test/java/org/apache/commons/csv/CSVPrinterTest.java",
                    "full name": "src.test.java.org.apache.commons.csv.CSVPrinterTest.testJira135_part1"
                },
                {
                    "function name": "testEscapeBackslash4",
                    "function params": [],
                    "file name": "CSVPrinterTest.java",
                    "file old path": "src/test/java/org/apache/commons/csv/CSVPrinterTest.java",
                    "file new path": "src/test/java/org/apache/commons/csv/CSVPrinterTest.java",
                    "full name": "src.test.java.org.apache.commons.csv.CSVPrinterTest.testEscapeBackslash4"
                },
                {
                    "function name": "testEscapeBackslash1",
                    "function params": [],
                    "file name": "CSVPrinterTest.java",
                    "file old path": "src/test/java/org/apache/commons/csv/CSVPrinterTest.java",
                    "file new path": "src/test/java/org/apache/commons/csv/CSVPrinterTest.java",
                    "full name": "src.test.java.org.apache.commons.csv.CSVPrinterTest.testEscapeBackslash1"
                },
                {
                    "function name": "testEscapeBackslash2",
                    "function params": [],
                    "file name": "CSVPrinterTest.java",
                    "file old path": "src/test/java/org/apache/commons/csv/CSVPrinterTest.java",
                    "file new path": "src/test/java/org/apache/commons/csv/CSVPrinterTest.java",
                    "full name": "src.test.java.org.apache.commons.csv.CSVPrinterTest.testEscapeBackslash2"
                },
                {
                    "function name": "testEscapeNull2",
                    "function params": [],
                    "file name": "CSVPrinterTest.java",
                    "file old path": "src/test/java/org/apache/commons/csv/CSVPrinterTest.java",
                    "file new path": "src/test/java/org/apache/commons/csv/CSVPrinterTest.java",
                    "full name": "src.test.java.org.apache.commons.csv.CSVPrinterTest.testEscapeNull2"
                }
            ],
            "files that changed": [
                "src/main/java/org/apache/commons/csv/CSVFormat.java",
                "src/test/java/org/apache/commons/csv/CSVPrinterTest.java"
            ]
        },
        {
            "bug index": "15",
            "bug id": "CSV-219",
            "hexsha": "3ddfb40c4f6a3a7e5f73858c6cafac3e64b1f3ad",
            "fix_hash": "8b3de71fd99d0fa07cb6a3a35b583bbb170aab66",
            "description": "When using CSVFormat.EXCEL to print a CSV file, the behavior of quote char using is not similar as Microsoft Excel does when the first string contains Chinese, Japanese or Korean (CJK) char(s).\r\n\r\ne.g.\r\nThere are 3 data members in a record, with Japanese chars: \"\u3042\", \"\u3044\", \"\u3046\":\r\n  Microsoft Excel outputs:\r\n  \u3042,\u3044,\u3046\r\n  Apache Common CSV outputs:\r\n  \"\u3042\",\u3044,\u3046\r\n",
            "commit number version hash": 913,
            "commit number": 891,
            "function that changed": [
                {
                    "function name": "printAndQuote",
                    "function params": [
                        "object",
                        "value",
                        "offset",
                        "len",
                        "out",
                        "newRecord"
                    ],
                    "file name": "CSVFormat.java",
                    "file old path": "src/main/java/org/apache/commons/csv/CSVFormat.java",
                    "file new path": "src/main/java/org/apache/commons/csv/CSVFormat.java",
                    "full name": "src.main.java.org.apache.commons.csv.CSVFormat.printAndQuote"
                },
                {
                    "function name": "testQuoteCommaFirstChar",
                    "function params": [],
                    "file name": "CSVPrinterTest.java",
                    "file old path": "src/test/java/org/apache/commons/csv/CSVPrinterTest.java",
                    "file new path": "src/test/java/org/apache/commons/csv/CSVPrinterTest.java",
                    "full name": "src.test.java.org.apache.commons.csv.CSVPrinterTest.testQuoteCommaFirstChar"
                },
                {
                    "function name": "testDontQuoteEuroFirstChar",
                    "function params": [],
                    "file name": "CSVPrinterTest.java",
                    "file old path": "src/test/java/org/apache/commons/csv/CSVPrinterTest.java",
                    "file new path": "src/test/java/org/apache/commons/csv/CSVPrinterTest.java",
                    "full name": "src.test.java.org.apache.commons.csv.CSVPrinterTest.testDontQuoteEuroFirstChar"
                }
            ],
            "files that changed": [
                "src/main/java/org/apache/commons/csv/CSVFormat.java",
                "src/test/java/org/apache/commons/csv/CSVPrinterTest.java"
            ]
        },
        {
            "bug index": "16",
            "bug id": "CSV-224",
            "hexsha": "3ddfb40c4f6a3a7e5f73858c6cafac3e64b1f3ad",
            "fix_hash": "f368f64fa7f9acdcc01084f676e8b9c2b86f946e",
            "description": "Repeated calls to CSVParser Iterable return new Iterators that each reference the same underlying parser lexer. Within the scope of a\u00a0single Iterator, row peeking with Iterator.hasNext() works as intended. When row peeking with Iterator.hasNext()\u00a0under circumstances that create a new Iterator, an element is consumed by the iterator which cannot be\u00a0accessed by subsequent, newly created Iterators and Iterator.next()s. Effectively, the record Iterator and the lexer get out of sequence. See snippet below.\r\n\r\nThe \"right thing\" is keeping the Iterator in sequence with the lexer, and since this is reading from a buffer, there seem to me to be only two resolutions:\r\n # One lexer, one Iterator.\r\n # New Iterators, but peeking with hasNext doesn't advance the lexer.\r\n\r\n\u00a0\r\n\r\nIf there's a consensus on one of these, I can put up a PR.\r\n\r\n\u00a0\r\n{code:java}\r\n\u00a0 @Test\r\n\r\n\u00a0 public void newIteratorSameLexer() throws Exception {\r\n\r\n\r\n\r\n\u00a0 \u00a0 String fiveRows = \"1\\n2\\n3\\n4\\n5\\n\";\r\n\r\n\r\n\r\n\u00a0 \u00a0 System.out.println(\"Enhanced for loop, no peeking:\");\r\n\r\n\u00a0 \u00a0 CSVParser parser =\r\n\r\n\u00a0 \u00a0 \u00a0 \u00a0 new CSVParser(new BufferedReader(new StringReader(fiveRows)), CSVFormat.DEFAULT);\r\n\r\n\u00a0 \u00a0 int recordNumber = 0;\r\n\r\n\u00a0 \u00a0 for (CSVRecord record : parser) {\r\n\r\n\u00a0 \u00a0 \u00a0 recordNumber++;\r\n\r\n\u00a0 \u00a0 \u00a0 System.out.println(recordNumber + \" -> \" + record.get(0));\r\n\r\n\u00a0 \u00a0 \u00a0 if (recordNumber >= 2) {\r\n\r\n\u00a0 \u00a0 \u00a0 \u00a0 break;\r\n\r\n\u00a0 \u00a0 \u00a0 }\r\n\r\n\u00a0 \u00a0 }\r\n\r\n\u00a0 \u00a0 // CSVParser.iterator() returns a new iterator, but the lexer isn't reset so we can pick up\r\n\r\n\u00a0 \u00a0 // where we left off.\r\n\r\n\u00a0 \u00a0 for (CSVRecord record : parser) {\r\n\r\n\u00a0 \u00a0 \u00a0 recordNumber++;\r\n\r\n\u00a0 \u00a0 \u00a0 System.out.println(recordNumber + \" -> \" + record.get(0));\r\n\r\n\u00a0 \u00a0 }\r\n\r\n\u00a0 \u00a0 // Enhanced for loop, no peeking:\r\n\r\n\u00a0 \u00a0 // 1 -> 1\r\n\r\n\u00a0 \u00a0 // 2 -> 2\r\n\r\n\u00a0 \u00a0 // 3 -> 3\r\n\r\n\u00a0 \u00a0 // 4 -> 4\r\n\r\n\u00a0 \u00a0 // 5 -> 5\r\n\r\n\r\n\r\n\r\n\r\n\u00a0 \u00a0 System.out.println(\"\\nEnhanced for loop, with peek:\");\r\n\r\n\u00a0 \u00a0 parser = new CSVParser(new BufferedReader(new StringReader(fiveRows)), CSVFormat.DEFAULT);\r\n\r\n\u00a0 \u00a0 recordNumber = 0;\r\n\r\n\u00a0 \u00a0 for (CSVRecord record : parser) {\r\n\r\n\u00a0 \u00a0 \u00a0 recordNumber++;\r\n\r\n\u00a0 \u00a0 \u00a0 System.out.println(recordNumber + \" -> \" + record.get(0));\r\n\r\n\u00a0 \u00a0 \u00a0 if (recordNumber >= 2) {\r\n\r\n\u00a0 \u00a0 \u00a0 \u00a0 break;\r\n\r\n\u00a0 \u00a0 \u00a0 }\r\n\r\n\u00a0 \u00a0 }\r\n\r\n\u00a0 \u00a0 // CSVParser.iterator() returns a new iterator, but we call hasNext before next, so we queue\r\n\r\n\u00a0 \u00a0 // one element for consumption. This element is discarded by the new iterator, even though the\r\n\r\n\u00a0 \u00a0 // lexer has advanced a row, so we've consumed an element with the peek!\r\n\r\n\u00a0 \u00a0 System.out.println(\"hasNext(): \" + parser.iterator().hasNext());\r\n\r\n\u00a0 \u00a0 for (CSVRecord record : parser) {\r\n\r\n\u00a0 \u00a0 \u00a0 recordNumber++;\r\n\r\n\u00a0 \u00a0 \u00a0 System.out.println(recordNumber + \" -> \" + record.get(0));\r\n\r\n\u00a0 \u00a0 }\r\n\r\n\u00a0 \u00a0 // Enhanced for loop, with peek:\r\n\r\n\u00a0 \u00a0 // 1 -> 1\r\n\r\n\u00a0 \u00a0 // 2 -> 2\r\n\r\n\u00a0 \u00a0 // hasNext(): true\r\n\r\n\u00a0 \u00a0 // 3 -> 4\r\n\r\n\u00a0 \u00a0 // 4 -> 5\r\n\r\n\r\n\r\n\r\n\r\n\u00a0 \u00a0 System.out.println(\"\\nIterator while, with peek:\");\r\n\r\n\u00a0 \u00a0 parser = new CSVParser(new BufferedReader(new StringReader(fiveRows)), CSVFormat.DEFAULT);\r\n\r\n\u00a0 \u00a0 recordNumber = 0;\r\n\r\n\u00a0 \u00a0 Iterator<CSVRecord> iter = parser.iterator();\r\n\r\n\u00a0 \u00a0 while (iter.hasNext()) {\r\n\r\n\u00a0 \u00a0 \u00a0 CSVRecord record = iter.next();\r\n\r\n\u00a0 \u00a0 \u00a0 recordNumber++;\r\n\r\n\u00a0 \u00a0 \u00a0 System.out.println(recordNumber + \" -> \" + record.get(0));\r\n\r\n\u00a0 \u00a0 \u00a0 if (recordNumber >= 2) {\r\n\r\n\u00a0 \u00a0 \u00a0 \u00a0 break;\r\n\r\n\u00a0 \u00a0 \u00a0 }\r\n\r\n\u00a0 \u00a0 }\r\n\r\n\u00a0 \u00a0 // When we use the same iterator, iterator and lexer are in sequence.\r\n\r\n\u00a0 \u00a0 System.out.println(\"hasNext(): \" + iter.hasNext());\r\n\r\n\u00a0 \u00a0 while (iter.hasNext()) {\r\n\r\n\u00a0 \u00a0 \u00a0 CSVRecord record = iter.next();\r\n\r\n\u00a0 \u00a0 \u00a0 recordNumber++;\r\n\r\n\u00a0 \u00a0 \u00a0 System.out.println(recordNumber + \" -> \" + record.get(0));\r\n\r\n\u00a0 \u00a0 }\r\n\r\n\u00a0 \u00a0 // Iterator while, with peek:\r\n\r\n\u00a0 \u00a0 // 1 -> 1\r\n\r\n\u00a0 \u00a0 // 2 -> 2\r\n\r\n\u00a0 \u00a0 // hasNext(): true\r\n\r\n\u00a0 \u00a0 // 3 -> 3\r\n\r\n\u00a0 \u00a0 // 4 -> 4\r\n\r\n\u00a0 \u00a0 // 5 -> 5\r\n\r\n\u00a0 }{code}",
            "commit number version hash": 913,
            "commit number": 901,
            "function that changed": [
                {
                    "function name": "CSVParser",
                    "function params": [
                        "reader",
                        "format",
                        "characterOffset",
                        "recordNumber"
                    ],
                    "file name": "CSVParser.java",
                    "file old path": "src/main/java/org/apache/commons/csv/CSVParser.java",
                    "file new path": "src/main/java/org/apache/commons/csv/CSVParser.java",
                    "full name": "src.main.java.org.apache.commons.csv.CSVParser.CSVParser"
                },
                {
                    "function name": "CSVRecordIterator",
                    "function params": [],
                    "file name": "CSVParser.java",
                    "file old path": "src/main/java/org/apache/commons/csv/CSVParser.java",
                    "file new path": "src/main/java/org/apache/commons/csv/CSVParser.java",
                    "full name": "src.main.java.org.apache.commons.csv.CSVParser.CSVRecordIterator"
                },
                {
                    "function name": "CSVRecordIterator",
                    "function params": [],
                    "file name": "CSVParser.java",
                    "file old path": "src/main/java/org/apache/commons/csv/CSVParser.java",
                    "file new path": "src/main/java/org/apache/commons/csv/CSVParser.java",
                    "full name": "src.main.java.org.apache.commons.csv.CSVParser.CSVRecordIterator"
                },
                {
                    "function name": "CSVRecordIterator",
                    "function params": [],
                    "file name": "CSVParser.java",
                    "file old path": "src/main/java/org/apache/commons/csv/CSVParser.java",
                    "file new path": "src/main/java/org/apache/commons/csv/CSVParser.java",
                    "full name": "src.main.java.org.apache.commons.csv.CSVParser.CSVRecordIterator"
                },
                {
                    "function name": "CSVRecordIterator",
                    "function params": [],
                    "file name": "CSVParser.java",
                    "file old path": "src/main/java/org/apache/commons/csv/CSVParser.java",
                    "file new path": "src/main/java/org/apache/commons/csv/CSVParser.java",
                    "full name": "src.main.java.org.apache.commons.csv.CSVParser.CSVRecordIterator"
                },
                {
                    "function name": "iterator",
                    "function params": [],
                    "file name": "CSVParser.java",
                    "file old path": "src/main/java/org/apache/commons/csv/CSVParser.java",
                    "file new path": "src/main/java/org/apache/commons/csv/CSVParser.java",
                    "full name": "src.main.java.org.apache.commons.csv.CSVParser.iterator"
                },
                {
                    "function name": "testIteratorSequenceBreaking",
                    "function params": [],
                    "file name": "CSVParserTest.java",
                    "file old path": "src/test/java/org/apache/commons/csv/CSVParserTest.java",
                    "file new path": "src/test/java/org/apache/commons/csv/CSVParserTest.java",
                    "full name": "src.test.java.org.apache.commons.csv.CSVParserTest.testIteratorSequenceBreaking"
                }
            ],
            "files that changed": [
                "src/main/java/org/apache/commons/csv/CSVParser.java",
                "src/test/java/org/apache/commons/csv/CSVParserTest.java"
            ]
        }
    ]
}