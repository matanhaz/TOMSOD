{
    "bugs to commit": [
        {
            "bug index": "12",
            "bug id": "NET-691",
            "hexsha": "ef9ccad4fd281d6af41282a7e7e06c91e12e0caa",
            "fix_hash": "6be7a84f85894d59d85b149a1c06af91aabc0e33",
            "description": "The [IMAPSClient Javadoc|http://commons.apache.org/proper/commons-net/apidocs/index.html?org/apache/commons/net/imap/IMAPSClient.html] could be improved with some code formatting. Pull request coming up...",
            "commit number version hash": 1523,
            "commit number": 1518,
            "function that changed": [],
            "files that changed": [
                "src/main/java/org/apache/commons/net/imap/IMAPSClient.java"
            ]
        },
        {
            "bug index": "14",
            "bug id": "NET-689",
            "hexsha": "ef9ccad4fd281d6af41282a7e7e06c91e12e0caa",
            "fix_hash": "7827f0549526920b91aa2e62d2a1e7682c36e1e7",
            "description": "When connecting with ssl to an ftps server, the hostname used to connect to the server is not copied to the SSLSocket, instead the sockets ip address is used. This applies to both with `AUTH TLS` and implicit SSL.\r\n\r\n\u00a0\r\n\r\nThe problem seems to be line 912 in FTPSclient.java:\r\n{code:java}\r\nreturn f.createSocket(socket, socket.getInetAddress().getHostAddress(), socket.getPort(), false);{code}\r\n\u00a0\r\n\r\nwhich forces the new SSLSocket to have the ip address as peer hostname, which makes it impossible to use `isEndpointCheckingEnabled` as the hostname is the ip address, not the hostname that appears in the certificate.\r\n\r\nLFTP [https://lftp.yar.ru/|https://lftp.yar.ru/)]\u00a0correctly connects to the hostname if the name matches, and disconnects if the name doesn't match the hostname, as does OpenSSL.\r\n\r\nThe fix would be very easy. Just change the line into\r\n{code:java}\r\nreturn f.createSocket(socket, _hostname_, socket.getPort(), false);\r\n\r\n{code}\r\nand it works. I tested this by simply debugging the code\u00a0",
            "commit number version hash": 1523,
            "commit number": 1512,
            "function that changed": [
                {
                    "function name": "createSSLSocket",
                    "function params": [
                        "socket"
                    ],
                    "file name": "FTPSClient.java",
                    "file old path": "src/main/java/org/apache/commons/net/ftp/FTPSClient.java",
                    "file new path": "src/main/java/org/apache/commons/net/ftp/FTPSClient.java",
                    "full name": "src.main.java.org.apache.commons.net.ftp.FTPSClient.createSSLSocket"
                },
                {
                    "function name": "sslNegotiation",
                    "function params": [],
                    "file name": "FTPSClient.java",
                    "file old path": "src/main/java/org/apache/commons/net/ftp/FTPSClient.java",
                    "file new path": "src/main/java/org/apache/commons/net/ftp/FTPSClient.java",
                    "full name": "src.main.java.org.apache.commons.net.ftp.FTPSClient.sslNegotiation"
                },
                {
                    "function name": "setUpClass",
                    "function params": [
                        "implicit"
                    ],
                    "file name": "FTPSClientTest.java",
                    "file old path": "src/test/java/org/apache/commons/net/ftp/FTPSClientTest.java",
                    "file new path": "src/test/java/org/apache/commons/net/ftp/FTPSClientTest.java",
                    "full name": "src.test.java.org.apache.commons.net.ftp.FTPSClientTest.setUpClass"
                },
                {
                    "function name": "FTPSClientTest",
                    "function params": [
                        "endpointCheckingEnabled"
                    ],
                    "file name": "FTPSClientTest.java",
                    "file old path": "src/test/java/org/apache/commons/net/ftp/FTPSClientTest.java",
                    "file new path": "src/test/java/org/apache/commons/net/ftp/FTPSClientTest.java",
                    "full name": "src.test.java.org.apache.commons.net.ftp.FTPSClientTest.FTPSClientTest"
                },
                {
                    "function name": "loginClient",
                    "function params": [],
                    "file name": "FTPSClientTest.java",
                    "file old path": "src/test/java/org/apache/commons/net/ftp/FTPSClientTest.java",
                    "file new path": "src/test/java/org/apache/commons/net/ftp/FTPSClientTest.java",
                    "full name": "src.test.java.org.apache.commons.net.ftp.FTPSClientTest.loginClient"
                },
                {
                    "function name": "testConstructurData",
                    "function params": [],
                    "file name": "FTPSClientTest.java",
                    "file old path": "src/test/java/org/apache/commons/net/ftp/FTPSClientTest.java",
                    "file new path": "src/test/java/org/apache/commons/net/ftp/FTPSClientTest.java",
                    "full name": "src.test.java.org.apache.commons.net.ftp.FTPSClientTest.testConstructurData"
                },
                {
                    "function name": "setUpClass",
                    "function params": [],
                    "file name": "FTPSClientTest.java",
                    "file old path": "src/test/java/org/apache/commons/net/ftp/FTPSClientTest.java",
                    "file new path": "src/test/java/org/apache/commons/net/ftp/FTPSClientTest.java",
                    "full name": "src.test.java.org.apache.commons.net.ftp.FTPSClientTest.setUpClass"
                }
            ],
            "files that changed": [
                "src/main/java/org/apache/commons/net/ftp/FTPSClient.java",
                "src/test/java/org/apache/commons/net/ftp/FTPSClientTest.java"
            ]
        },
        {
            "bug index": "17",
            "bug id": "NET-59",
            "hexsha": "be5af473dca0fd652be1637d824d0baebb492947",
            "fix_hash": "2e2897dcb82308019bdd40be3b5eede7918a572d",
            "description": "Hello,\n\nthink this bug is the same (or at least similiar) to the following one:\nhttp://issues.apache.org/bugzilla/show_bug.cgi?id=26296\nbut since I was not sure, I opened it as a seperate report.\n\nVersions affected: commons-net-1.2.2, think also commons-net-1.4.0\n\nProblem: If an exception occures while FTPClient.connect() is running, a call to \nFTPClient.disconnect() in a finally-block might throw a NullPointerException.\nI am pretty shure, that this might cause some Threads so keep alive, also they \ncannot be interrupted anymore.\n\nReason: This happens since TelnetClient.disconnect() does not check whether the \nStreams (__input and __ouput) it tries to close are NULL or not.\nNormally it is sufficent to check FTPClient.isConnected(), but if a exceptions \nis thrown after SocketClient.__connectAction_ has been excecuted, SocketClient.\n_isConnected_ is set to true, so the check will indicate that the connection is \nalive.\n\nChristian",
            "commit number version hash": 452,
            "commit number": 1489,
            "function that changed": [
                {
                    "function name": "_openDataConnection_",
                    "function params": [
                        "command",
                        "arg"
                    ],
                    "file name": "FTPSClient.java",
                    "file old path": "src/main/java/org/apache/commons/net/ftp/FTPSClient.java",
                    "file new path": "src/main/java/org/apache/commons/net/ftp/FTPSClient.java",
                    "full name": "src.main.java.org.apache.commons.net.ftp.FTPSClient._openDataConnection_"
                },
                {
                    "function name": "retrieveFile",
                    "function params": [
                        "pathname"
                    ],
                    "file name": "FTPSClientTest.java",
                    "file old path": "src/test/java/org/apache/commons/net/ftp/FTPSClientTest.java",
                    "file new path": "src/test/java/org/apache/commons/net/ftp/FTPSClientTest.java",
                    "full name": "src.test.java.org.apache.commons.net.ftp.FTPSClientTest.retrieveFile"
                },
                {
                    "function name": "setUpClass",
                    "function params": [
                        "implicit"
                    ],
                    "file name": "FTPSClientTest.java",
                    "file old path": "src/test/java/org/apache/commons/net/ftp/FTPSClientTest.java",
                    "file new path": "src/test/java/org/apache/commons/net/ftp/FTPSClientTest.java",
                    "full name": "src.test.java.org.apache.commons.net.ftp.FTPSClientTest.setUpClass"
                },
                {
                    "function name": "getTestHomeDirectory",
                    "function params": [],
                    "file name": "FTPSClientTest.java",
                    "file old path": "src/test/java/org/apache/commons/net/ftp/FTPSClientTest.java",
                    "file new path": "src/test/java/org/apache/commons/net/ftp/FTPSClientTest.java",
                    "full name": "src.test.java.org.apache.commons.net.ftp.FTPSClientTest.getTestHomeDirectory"
                },
                {
                    "function name": "assertClientCode",
                    "function params": [
                        "client"
                    ],
                    "file name": "FTPSClientTest.java",
                    "file old path": "src/test/java/org/apache/commons/net/ftp/FTPSClientTest.java",
                    "file new path": "src/test/java/org/apache/commons/net/ftp/FTPSClientTest.java",
                    "full name": "src.test.java.org.apache.commons.net.ftp.FTPSClientTest.assertClientCode"
                },
                {
                    "function name": "loginClient",
                    "function params": [],
                    "file name": "FTPSClientTest.java",
                    "file old path": "src/test/java/org/apache/commons/net/ftp/FTPSClientTest.java",
                    "file new path": "src/test/java/org/apache/commons/net/ftp/FTPSClientTest.java",
                    "full name": "src.test.java.org.apache.commons.net.ftp.FTPSClientTest.loginClient"
                },
                {
                    "function name": "testRetrieveFilePathNameRoot",
                    "function params": [],
                    "file name": "FTPSClientTest.java",
                    "file old path": "src/test/java/org/apache/commons/net/ftp/FTPSClientTest.java",
                    "file new path": "src/test/java/org/apache/commons/net/ftp/FTPSClientTest.java",
                    "full name": "src.test.java.org.apache.commons.net.ftp.FTPSClientTest.testRetrieveFilePathNameRoot"
                }
            ],
            "files that changed": [
                "src/main/java/org/apache/commons/net/ftp/FTPSClient.java",
                "src/test/java/org/apache/commons/net/ftp/FTPSClientTest.java"
            ]
        },
        {
            "bug index": "18",
            "bug id": "NET-685",
            "hexsha": "09f128a0f1373f227dea360c55b06c6638f83a36",
            "fix_hash": "f434fbf8496817d88196f83644dd13add05a2603",
            "description": "Hello Everybody,\r\n\r\nwe implemented a multithread scheduler in order to run many FTP connections (one for each customer). We use these connections to upload /download files from/to remote servers.\r\n\r\nInside the scheduler, we use a\u00a0ScheduledThreadPoolExecutor to run our FTP connections (about 50). We run one thread (which instantiates an FTPClient object) for each FTP connection.\r\n\r\nSometimes, one of those connections tries to connect to the FTP server and the method\u00a0FTPClient.connect() hangs without any timeout. No log. No server response.\r\n The connection is blocked as well as the whole JVM.\u00a0\r\n\r\nWe needed to restart the service to fix the production.\r\n\r\nWe already checked the following points during the issue:\r\n - the server is reachable;\r\n - No overlapping between run threads;\r\n - the virtual machine runs correctly;\r\n - Every other connection works correctly (FTPS, SFTP, CIFS, ...) so far.\r\n\r\n(Production logs attached)\r\n\r\nPULL-REQUEST link:\u00a0[https://github.com/apache/commons-net/pull/51]\r\n\r\nThanks in advance,\r\n Simone",
            "commit number version hash": 1608,
            "commit number": 1485,
            "function that changed": [],
            "files that changed": [
                "src/main/java/org/apache/commons/net/SocketClient.java"
            ]
        },
        {
            "bug index": "19",
            "bug id": "NET-675",
            "hexsha": "a76bed1f8338e0bffb78b3b5a918aede47135520",
            "fix_hash": "57af03c8cbece020780889f13b760d518ff1d0b5",
            "description": "If a SubnetUtils is created using a cidr notation of a single ip-address, the isInRange returns false for the ip-address.\r\n\r\nExample code:\r\n{code:java}\r\nString subnet = \"192.168.0.15/32\";\r\n\r\nSubnetUtils subnetUtils = new SubnetUtils(subnet);\r\nSubnetInfo info = subnetUtils.getInfo();\r\nlog.debug(\"{}\", info); // first and last ip-address are 0.0.0.0\r\nlog.debug(\"{}\", info.isInRange(\"192.168.0.15\")); // false is returned, I would expect true\r\nlog.debug(\"{}\", subnetInfo.getAddress())); // the exact address is returned\r\n{code}",
            "commit number version hash": 1390,
            "commit number": 1476,
            "function that changed": [
                {
                    "function name": "testCidrAddresses",
                    "function params": [],
                    "file name": "SubnetUtilsTest.java",
                    "file old path": "src/test/java/org/apache/commons/net/SubnetUtilsTest.java",
                    "file new path": "src/test/java/org/apache/commons/net/SubnetUtilsTest.java",
                    "full name": "src.test.java.org.apache.commons.net.SubnetUtilsTest.testCidrAddresses"
                },
                {
                    "function name": "testNET675",
                    "function params": [],
                    "file name": "SubnetUtilsTest.java",
                    "file old path": "src/test/java/org/apache/commons/net/SubnetUtilsTest.java",
                    "file new path": "src/test/java/org/apache/commons/net/SubnetUtilsTest.java",
                    "full name": "src.test.java.org.apache.commons.net.SubnetUtilsTest.testNET675"
                }
            ],
            "files that changed": [
                "src/test/java/org/apache/commons/net/SubnetUtilsTest.java"
            ]
        },
        {
            "bug index": "21",
            "bug id": "NET-646",
            "hexsha": "a76bed1f8338e0bffb78b3b5a918aede47135520",
            "fix_hash": "39f8fa7a1e8386edc05d924932733ea2f9b5fc6a",
            "description": "The allo() and allocate() methods of FTPClient should be made deprecated and new versions should be added that accept a 64-bit size.",
            "commit number version hash": 1390,
            "commit number": 1448,
            "function that changed": [
                {
                    "function name": "allo",
                    "function params": [
                        "bytes"
                    ],
                    "file name": "FTP.java",
                    "file old path": "src/main/java/org/apache/commons/net/ftp/FTP.java",
                    "file new path": "src/main/java/org/apache/commons/net/ftp/FTP.java",
                    "full name": "src.main.java.org.apache.commons.net.ftp.FTP.allo"
                },
                {
                    "function name": "allo",
                    "function params": [
                        "bytes",
                        "recordSize"
                    ],
                    "file name": "FTP.java",
                    "file old path": "src/main/java/org/apache/commons/net/ftp/FTP.java",
                    "file new path": "src/main/java/org/apache/commons/net/ftp/FTP.java",
                    "full name": "src.main.java.org.apache.commons.net.ftp.FTP.allo"
                },
                {
                    "function name": "allocate",
                    "function params": [
                        "bytes",
                        "recordSize"
                    ],
                    "file name": "FTPClient.java",
                    "file old path": "src/main/java/org/apache/commons/net/ftp/FTPClient.java",
                    "file new path": "src/main/java/org/apache/commons/net/ftp/FTPClient.java",
                    "full name": "src.main.java.org.apache.commons.net.ftp.FTPClient.allocate"
                },
                {
                    "function name": "allocate",
                    "function params": [
                        "bytes"
                    ],
                    "file name": "FTPClient.java",
                    "file old path": "src/main/java/org/apache/commons/net/ftp/FTPClient.java",
                    "file new path": "src/main/java/org/apache/commons/net/ftp/FTPClient.java",
                    "full name": "src.main.java.org.apache.commons.net.ftp.FTPClient.allocate"
                }
            ],
            "files that changed": [
                "src/main/java/org/apache/commons/net/ftp/FTP.java",
                "src/main/java/org/apache/commons/net/ftp/FTPClient.java"
            ]
        },
        {
            "bug index": "22",
            "bug id": "NET-663",
            "hexsha": "1eb03503f39c508b2b3ca157cfd35ee2dcbf1c22",
            "fix_hash": "3c01bfaa968514749d54218f910563ac19d970cf",
            "description": "At L934 of the {{FTPClient}}\u00a0code, Apache does a check to see whether the data and control connections are at the same IP address ({{verifyRemote}}). If they differ, the data connection socket is closed and an exception is raised.\u00a0 This can be disabled, but is the default behavior ({{__remoteVerificationEnabled = true}}).\r\n\r\nI'm connecting to the FTP via a proxy.  In my setup, the L934-939 code path where {{verifyRemote}} returns false always raises a {{java.lang.NullPointerException}}.  {{socket.getInetAddress()}} seems to return {{null}} after {{socket.close}} is called, leading to {{socket.getInetAdress().getHostAddress()}} to raise the {{java.lang.NullPointerException}} at L938.   This obfuscates a really useful error message (\"Host attempting data connection is not the same as server\") with a difficult to debug {{NullPointerException}}.\r\n\r\nExample State:\r\n\r\n{code}\r\nthis.__remoteVerificationEnabled -> true\r\nthis.getRemoteAddress().toString() -> \"ftp.example.com/987.654.321.000\"\r\nsocket.getInetAddress().toString() -> \"/123.456.789.000\"\r\n{code}",
            "commit number version hash": 1487,
            "commit number": 1447,
            "function that changed": [
                {
                    "function name": "_openDataConnection_",
                    "function params": [
                        "command",
                        "arg"
                    ],
                    "file name": "FTPClient.java",
                    "file old path": "src/main/java/org/apache/commons/net/ftp/FTPClient.java",
                    "file new path": "src/main/java/org/apache/commons/net/ftp/FTPClient.java",
                    "full name": "src.main.java.org.apache.commons.net.ftp.FTPClient._openDataConnection_"
                }
            ],
            "files that changed": [
                "src/main/java/org/apache/commons/net/ftp/FTPClient.java"
            ]
        },
        {
            "bug index": "23",
            "bug id": "NET-614",
            "hexsha": "a76bed1f8338e0bffb78b3b5a918aede47135520",
            "fix_hash": "fb7aae4c64f7d2bf6dced00c49c3ffc428b2d572",
            "description": "Mailbox names need to be quoted if they contain spaces or double-quote.\n\nIf they contain non-ASCII characters then they also need to be encoded [1]\n\nThere may be other parameters that are not being encoded/quoted correctly.\n\n[1] https://tools.ietf.org/html/rfc3501#section-5.1.3",
            "commit number version hash": 1390,
            "commit number": 1446,
            "function that changed": [
                {
                    "function name": "quoteMailboxName",
                    "function params": [
                        "input"
                    ],
                    "file name": "IMAP.java",
                    "file old path": "src/main/java/org/apache/commons/net/imap/IMAP.java",
                    "file new path": "src/main/java/org/apache/commons/net/imap/IMAP.java",
                    "full name": "src.main.java.org.apache.commons.net.imap.IMAP.quoteMailboxName"
                },
                {
                    "function name": "list",
                    "function params": [
                        "refName",
                        "mailboxName"
                    ],
                    "file name": "IMAPClient.java",
                    "file old path": "src/main/java/org/apache/commons/net/imap/IMAPClient.java",
                    "file new path": "src/main/java/org/apache/commons/net/imap/IMAPClient.java",
                    "full name": "src.main.java.org.apache.commons.net.imap.IMAPClient.list"
                },
                {
                    "function name": "create",
                    "function params": [
                        "mailboxName"
                    ],
                    "file name": "IMAPClient.java",
                    "file old path": "src/main/java/org/apache/commons/net/imap/IMAPClient.java",
                    "file new path": "src/main/java/org/apache/commons/net/imap/IMAPClient.java",
                    "full name": "src.main.java.org.apache.commons.net.imap.IMAPClient.create"
                },
                {
                    "function name": "lsub",
                    "function params": [
                        "refName",
                        "mailboxName"
                    ],
                    "file name": "IMAPClient.java",
                    "file old path": "src/main/java/org/apache/commons/net/imap/IMAPClient.java",
                    "file new path": "src/main/java/org/apache/commons/net/imap/IMAPClient.java",
                    "full name": "src.main.java.org.apache.commons.net.imap.IMAPClient.lsub"
                },
                {
                    "function name": "append",
                    "function params": [
                        "mailboxName",
                        "flags",
                        "datetime",
                        "message"
                    ],
                    "file name": "IMAPClient.java",
                    "file old path": "src/main/java/org/apache/commons/net/imap/IMAPClient.java",
                    "file new path": "src/main/java/org/apache/commons/net/imap/IMAPClient.java",
                    "full name": "src.main.java.org.apache.commons.net.imap.IMAPClient.append"
                },
                {
                    "function name": "status",
                    "function params": [
                        "mailboxName",
                        "itemNames"
                    ],
                    "file name": "IMAPClient.java",
                    "file old path": "src/main/java/org/apache/commons/net/imap/IMAPClient.java",
                    "file new path": "src/main/java/org/apache/commons/net/imap/IMAPClient.java",
                    "full name": "src.main.java.org.apache.commons.net.imap.IMAPClient.status"
                },
                {
                    "function name": "copy",
                    "function params": [
                        "sequenceSet",
                        "mailboxName"
                    ],
                    "file name": "IMAPClient.java",
                    "file old path": "src/main/java/org/apache/commons/net/imap/IMAPClient.java",
                    "file new path": "src/main/java/org/apache/commons/net/imap/IMAPClient.java",
                    "full name": "src.main.java.org.apache.commons.net.imap.IMAPClient.copy"
                },
                {
                    "function name": "select",
                    "function params": [
                        "mailboxName"
                    ],
                    "file name": "IMAPClient.java",
                    "file old path": "src/main/java/org/apache/commons/net/imap/IMAPClient.java",
                    "file new path": "src/main/java/org/apache/commons/net/imap/IMAPClient.java",
                    "full name": "src.main.java.org.apache.commons.net.imap.IMAPClient.select"
                },
                {
                    "function name": "examine",
                    "function params": [
                        "mailboxName"
                    ],
                    "file name": "IMAPClient.java",
                    "file old path": "src/main/java/org/apache/commons/net/imap/IMAPClient.java",
                    "file new path": "src/main/java/org/apache/commons/net/imap/IMAPClient.java",
                    "full name": "src.main.java.org.apache.commons.net.imap.IMAPClient.examine"
                },
                {
                    "function name": "subscribe",
                    "function params": [
                        "mailboxName"
                    ],
                    "file name": "IMAPClient.java",
                    "file old path": "src/main/java/org/apache/commons/net/imap/IMAPClient.java",
                    "file new path": "src/main/java/org/apache/commons/net/imap/IMAPClient.java",
                    "full name": "src.main.java.org.apache.commons.net.imap.IMAPClient.subscribe"
                },
                {
                    "function name": "delete",
                    "function params": [
                        "mailboxName"
                    ],
                    "file name": "IMAPClient.java",
                    "file old path": "src/main/java/org/apache/commons/net/imap/IMAPClient.java",
                    "file new path": "src/main/java/org/apache/commons/net/imap/IMAPClient.java",
                    "full name": "src.main.java.org.apache.commons.net.imap.IMAPClient.delete"
                },
                {
                    "function name": "rename",
                    "function params": [
                        "oldMailboxName",
                        "newMailboxName"
                    ],
                    "file name": "IMAPClient.java",
                    "file old path": "src/main/java/org/apache/commons/net/imap/IMAPClient.java",
                    "file new path": "src/main/java/org/apache/commons/net/imap/IMAPClient.java",
                    "full name": "src.main.java.org.apache.commons.net.imap.IMAPClient.rename"
                },
                {
                    "function name": "unsubscribe",
                    "function params": [
                        "mailboxName"
                    ],
                    "file name": "IMAPClient.java",
                    "file old path": "src/main/java/org/apache/commons/net/imap/IMAPClient.java",
                    "file new path": "src/main/java/org/apache/commons/net/imap/IMAPClient.java",
                    "full name": "src.main.java.org.apache.commons.net.imap.IMAPClient.unsubscribe"
                }
            ],
            "files that changed": [
                "src/main/java/org/apache/commons/net/imap/IMAP.java",
                "src/main/java/org/apache/commons/net/imap/IMAPClient.java"
            ]
        },
        {
            "bug index": "24",
            "bug id": "NET-614",
            "hexsha": "a76bed1f8338e0bffb78b3b5a918aede47135520",
            "fix_hash": "a4ae7b2374bfab3729937f8e293f3621d3b07654",
            "description": "Mailbox names need to be quoted if they contain spaces or double-quote.\n\nIf they contain non-ASCII characters then they also need to be encoded [1]\n\nThere may be other parameters that are not being encoded/quoted correctly.\n\n[1] https://tools.ietf.org/html/rfc3501#section-5.1.3",
            "commit number version hash": 1390,
            "commit number": 1443,
            "function that changed": [
                {
                    "function name": "quoteString",
                    "function params": [
                        "input"
                    ],
                    "file name": "IMAP.java",
                    "file old path": "src/main/java/org/apache/commons/net/imap/IMAP.java",
                    "file new path": "src/main/java/org/apache/commons/net/imap/IMAP.java",
                    "full name": "src.main.java.org.apache.commons.net.imap.IMAP.quoteString"
                },
                {
                    "function name": "list",
                    "function params": [
                        "refName",
                        "mailboxName"
                    ],
                    "file name": "IMAPClient.java",
                    "file old path": "src/main/java/org/apache/commons/net/imap/IMAPClient.java",
                    "file new path": "src/main/java/org/apache/commons/net/imap/IMAPClient.java",
                    "full name": "src.main.java.org.apache.commons.net.imap.IMAPClient.list"
                },
                {
                    "function name": "lsub",
                    "function params": [
                        "refName",
                        "mailboxName"
                    ],
                    "file name": "IMAPClient.java",
                    "file old path": "src/main/java/org/apache/commons/net/imap/IMAPClient.java",
                    "file new path": "src/main/java/org/apache/commons/net/imap/IMAPClient.java",
                    "full name": "src.main.java.org.apache.commons.net.imap.IMAPClient.lsub"
                }
            ],
            "files that changed": [
                "src/main/java/org/apache/commons/net/imap/IMAP.java",
                "src/main/java/org/apache/commons/net/imap/IMAPClient.java"
            ]
        },
        {
            "bug index": "25",
            "bug id": "NET-643",
            "hexsha": "1eb03503f39c508b2b3ca157cfd35ee2dcbf1c22",
            "fix_hash": "98d829eb6af5449ac27b66382952de37602ebe4e",
            "description": "our code:\n{code:java}\ntry {\n            TelnetClient telnetClient = new TelnetClient();\n            telnetClient.connect(address, port);\n            mInput = new BufferedInputStream(telnetClient.getInputStream());\n            mOutput = new PrintStream(telnetClient.getOutputStream());\n            BufferedReader br = new BufferedReader(new InputStreamReader(this.mInput));\n            ... some IO on streams ...\n} catch (IOException e) {\n            if (Dbg.DEBUG) {\n                Dbg.d(TAG, \"telnet exception \" + Dbg.getStackTraceString(e));\n            }\n            return false;\n} finally {\n            try {\n                  if (mInput != null) mInput.close();\n                  if (mOutput != null) mOutput.close();\n            } catch (IOException ignored) {}\n}\n{code}",
            "commit number version hash": 1487,
            "commit number": 1439,
            "function that changed": [
                {
                    "function name": "_flushOutputStream",
                    "function params": [],
                    "file name": "TelnetClient.java",
                    "file old path": "src/main/java/org/apache/commons/net/telnet/TelnetClient.java",
                    "file new path": "src/main/java/org/apache/commons/net/telnet/TelnetClient.java",
                    "full name": "src.main.java.org.apache.commons.net.telnet.TelnetClient._flushOutputStream"
                },
                {
                    "function name": "_closeOutputStream",
                    "function params": [],
                    "file name": "TelnetClient.java",
                    "file old path": "src/main/java/org/apache/commons/net/telnet/TelnetClient.java",
                    "file new path": "src/main/java/org/apache/commons/net/telnet/TelnetClient.java",
                    "full name": "src.main.java.org.apache.commons.net.telnet.TelnetClient._closeOutputStream"
                }
            ],
            "files that changed": [
                "src/main/java/org/apache/commons/net/telnet/TelnetClient.java"
            ]
        },
        {
            "bug index": "26",
            "bug id": "NET-641",
            "hexsha": "1eb03503f39c508b2b3ca157cfd35ee2dcbf1c22",
            "fix_hash": "2d935482d9b026ccd2cb2b55fcb05380a4466500",
            "description": "Code:\nimport org.apache.commons.net.util.SubnetUtils;\n\npublic class A {\n  public static void main(String[] args) {\n    System.out.println(new SubnetUtils(\"192.168.1.0/30\").getInfo().isInRange(\"0.0.0.0\"));\n    System.out.println(new SubnetUtils(\"192.168.1.0/31\").getInfo().isInRange(\"0.0.0.0\"));\n    System.out.println(new SubnetUtils(\"192.168.1.0/32\").getInfo().isInRange(\"0.0.0.0\"));\n  }\n}\n\nResult:\nfalse\ntrue\ntrue\n\nExpected:\nfalse\nfalse\nfalse\n",
            "commit number version hash": 1487,
            "commit number": 1436,
            "function that changed": [
                {
                    "function name": "SubnetInfo",
                    "function params": [
                        "address"
                    ],
                    "file name": "SubnetUtils.java",
                    "file old path": "src/main/java/org/apache/commons/net/util/SubnetUtils.java",
                    "file new path": "src/main/java/org/apache/commons/net/util/SubnetUtils.java",
                    "full name": "src.main.java.org.apache.commons.net.util.SubnetUtils.SubnetInfo"
                },
                {
                    "function name": "testNET641",
                    "function params": [],
                    "file name": "SubnetUtilsTest.java",
                    "file old path": "src/test/java/org/apache/commons/net/SubnetUtilsTest.java",
                    "file new path": "src/test/java/org/apache/commons/net/SubnetUtilsTest.java",
                    "full name": "src.test.java.org.apache.commons.net.SubnetUtilsTest.testNET641"
                }
            ],
            "files that changed": [
                "src/main/java/org/apache/commons/net/util/SubnetUtils.java",
                "src/test/java/org/apache/commons/net/SubnetUtilsTest.java"
            ]
        },
        {
            "bug index": "27",
            "bug id": "NET-639",
            "hexsha": "1eb03503f39c508b2b3ca157cfd35ee2dcbf1c22",
            "fix_hash": "e08fbb9e9adffc54c5ad87ddfd57b590e65ef862",
            "description": "Some PS-files couldn't be retrieved from ftp host (during FTPClient.listFiles(\"xxx\")). After investigation we've noticed, that the file has an unusual large allocation info (reading \n\n{code:java}\nVolume Unit    Referred Ext Used Recfm Lrecl BlkSz Dsorg Dsname\n   :     :          :     :   :    :      :    :    :      :\nPEZ320 3390   2017/07/03  215807  FB   29600 29600  PS  'LBP.TX.FTP.LAZAGDOM.WORK.HILF'\n   :     :          :     :   :    :      :    :    :      :\n\n{code}\n\nso the values of ext and used column merged. As a result, the pattern FILE_LIST_REGEX in MVSFTPEntryParser doesn't match -> the file is ignored.\n\nQuick Fix in Comments described ...",
            "commit number version hash": 1487,
            "commit number": 1434,
            "function that changed": [],
            "files that changed": [
                "src/main/java/org/apache/commons/net/ftp/parser/MVSFTPEntryParser.java",
                "src/test/java/org/apache/commons/net/ftp/parser/MVSFTPEntryParserTest.java"
            ]
        },
        {
            "bug index": "28",
            "bug id": "NET-636",
            "hexsha": "1eb03503f39c508b2b3ca157cfd35ee2dcbf1c22",
            "fix_hash": "7fabd00432b9974240f1df75e1e7fa63ba276589",
            "description": "The examples are currently under the top-level 'examples' package.\n\nThis was fine when they were only documentation samples, but they are now working examples which are published (in a separate jar).\n\nThe package needs to ge changed to be under org.apache.commons.net.\n\nGiven that they are clearly marked as examples, they are not part of the public API (and are not in the standard binary jar). Thus the change will not impact  compatibility of the component proper.\n\n",
            "commit number version hash": 1487,
            "commit number": 1431,
            "function that changed": [
                {
                    "function name": "scanClasses",
                    "function params": [],
                    "file name": "MainTest.java",
                    "file old path": "src/test/java/examples/MainTest.java",
                    "file new path": "src/test/java/org/apache/commons/net/examples/MainTest.java",
                    "full name": "src.test.java.org.apache.commons.net.examples.MainTest.scanClasses"
                },
                {
                    "function name": "processFileName",
                    "function params": [
                        "name",
                        "p"
                    ],
                    "file name": "MainTest.java",
                    "file old path": "src/test/java/examples/MainTest.java",
                    "file new path": "src/test/java/org/apache/commons/net/examples/MainTest.java",
                    "full name": "src.test.java.org.apache.commons.net.examples.MainTest.processFileName"
                }
            ],
            "files that changed": [
                "src/test/java/org/apache/commons/net/ntp/TestNtpClient.java"
            ]
        },
        {
            "bug index": "33",
            "bug id": "NET-631",
            "hexsha": "1eb03503f39c508b2b3ca157cfd35ee2dcbf1c22",
            "fix_hash": "d8f9af13ba04b2b483f6d441d1c4071174726988",
            "description": "FindBugs reports a bug in MVSFTPEntryParser#parseUnixList:\n\n\"Bug: The parameter file to org.apache.commons.net.ftp.parser.MVSFTPEntryParser.parseUnixList(FTPFile, String) is dead upon entry but overwritten\nThe initial value of this parameter is ignored, and the parameter is overwritten here. This often indicates a mistaken belief that the write to the parameter will be conveyed back to the caller.\"\n\nSince the other parsexxx() methods update the passed FTPFile parameter it looks like it was indeed the intention to update the parameter.\n\nUnfortunately there are no tests which exercise this code, and I have been unable to find examples of FTP LIST output for MVS in Unix mode. The code in preParse() looks for the string \"total\" at the start of the first line of output. [Presumably subsequent lines look like normal Unix FTP listings.]",
            "commit number version hash": 1487,
            "commit number": 1410,
            "function that changed": [
                {
                    "function name": "parseFTPEntry",
                    "function params": [
                        "entry"
                    ],
                    "file name": "MVSFTPEntryParser.java",
                    "file old path": "src/main/java/org/apache/commons/net/ftp/parser/MVSFTPEntryParser.java",
                    "file new path": "src/main/java/org/apache/commons/net/ftp/parser/MVSFTPEntryParser.java",
                    "full name": "src.main.java.org.apache.commons.net.ftp.parser.MVSFTPEntryParser.parseFTPEntry"
                },
                {
                    "function name": "getAllGoodListings",
                    "function params": [],
                    "file name": "MVSFTPEntryParserTest.java",
                    "file old path": "src/test/java/org/apache/commons/net/ftp/parser/MVSFTPEntryParserTest.java",
                    "file new path": "src/test/java/org/apache/commons/net/ftp/parser/MVSFTPEntryParserTest.java",
                    "full name": "src.test.java.org.apache.commons.net.ftp.parser.MVSFTPEntryParserTest.getAllGoodListings"
                },
                {
                    "function name": "testUnixListings",
                    "function params": [],
                    "file name": "MVSFTPEntryParserTest.java",
                    "file old path": "src/test/java/org/apache/commons/net/ftp/parser/MVSFTPEntryParserTest.java",
                    "file new path": "src/test/java/org/apache/commons/net/ftp/parser/MVSFTPEntryParserTest.java",
                    "full name": "src.test.java.org.apache.commons.net.ftp.parser.MVSFTPEntryParserTest.testUnixListings"
                }
            ],
            "files that changed": [
                "src/main/java/org/apache/commons/net/ftp/parser/MVSFTPEntryParser.java",
                "src/test/java/org/apache/commons/net/ftp/parser/MVSFTPEntryParserTest.java"
            ]
        },
        {
            "bug index": "34",
            "bug id": "NET-584",
            "hexsha": "1eb03503f39c508b2b3ca157cfd35ee2dcbf1c22",
            "fix_hash": "1c95a2a5d9e40d1b7d8b4626890ff1babc4f8862",
            "description": "I have a question about using library commons-net-3.4.jar\nQuestion is about org.apache.commons.net.ftp.FTPClient method setControlKeepAliveTimeout.\n\nRead about using it on:\nhttps://commons.apache.org/proper/commons-net/apidocs/org/apache/commons/net/ftp/FTPClient.html\n\n\nWhen I use it in my code I get this error:\n{code}\njava.net.SocketTimeoutException: Read timed out\n\tat java.net.SocketInputStream.socketRead0(Native Method)\n\tat java.net.SocketInputStream.read(SocketInputStream.java:163)\n\tat java.net.SocketInputStream.read(SocketInputStream.java:133)\n\tat sun.nio.cs.StreamDecoder.readBytes(StreamDecoder.java:322)\n\tat sun.nio.cs.StreamDecoder.implRead(StreamDecoder.java:364)\n\tat sun.nio.cs.StreamDecoder.read(StreamDecoder.java:210)\n\tat java.io.InputStreamReader.read(InputStreamReader.java:205)\n\tat java.io.BufferedReader.fill(BufferedReader.java:165)\n\tat java.io.BufferedReader.read(BufferedReader.java:186)\n\tat org.apache.commons.net.io.CRLFLineReader.readLine(CRLFLineReader.java:58)\n\tat org.apache.commons.net.ftp.FTP.__getReply(FTP.java:313)\n\tat org.apache.commons.net.ftp.FTP.__getReplyNoReport(FTP.java:303)\n\tat org.apache.commons.net.ftp.FTPClient$CSL.cleanUp(FTPClient.java:3838)\n\tat org.apache.commons.net.ftp.FTPClient._storeFile(FTPClient.java:695)\n\tat org.apache.commons.net.ftp.FTPClient.__storeFile(FTPClient.java:643)\n\tat org.apache.commons.net.ftp.FTPClient.storeFile(FTPClient.java:2033)\n\tat ru.mdm.File.Transfer.FTP.PutRemoteFileBinary(FTP.java:192)\n\tat ru.mdm.File.Transfer.TimeLimit.Thread.Protocol.PutRemoteFileBinaryThread.actionsToExecute(PutRemoteFileBinaryThread.java:23)\n\tat ru.mdm.File.Transfer.TimeLimit.OperationThread.run(OperationThread.java:60)\n{code}\nWithout enabling this option all works fine.\n\n\n\nHere is the code:\n{code}\npackage ru.mdm.File.Transfer;\nimport bin.ru.osa.common.utils.*;\nimport java.util.List;\nimport java.io.*;\nimport com.ibm.broker.javacompute.MbJavaComputeNode;\nimport com.ibm.broker.plugin.*;\nimport org.apache.commons.net.ftp.*;\nimport org.apache.commons.net.*;\nimport ru.mdm.File.Transfer.Options.OptionsXMLProcessor;\n\npublic class FTP implements Protocol \n{\n\t\n\tFTPClient client = new FTPClient();\n\t\n\tOptionsXMLProcessor optionsXMLProcessor;\n\t\n\t\n\tboolean   st;\n\tString LastMessage = new String();\n\t\n\tboolean   ignoreErrors = false;\n\t\n\t\n\tpublic FTP() \n\t{\n\t\tsuper();\t\t\n\t}\n\n\t\n\tprotected void finalize() { disconnect(); }\n\n\t\n\tpublic void connect(String CntName, \n\t\t\t\t\t\tString Host, \n\t\t\t\t\t\tString Port, \n\t\t\t\t\t\tString L, \n\t\t\t\t\t\tString P)  throws Exception\n\t{\n\t  try\n\t  {\t\t\n\t\tclient.setControlKeepAliveTimeout(300);\n\t    client.connect(Host);\n\t    client.login(L, P);\n\t    CheckState();\t    \n\t  }\n\t  catch(Exception e)\n\t  {\n\t     LastMessage=client.getReplyString();\t     \t     \n\t     if(LastMessage == null) LastMessage = e.getMessage();\n\t     \n\t     e.printStackTrace();\n\t     \n\t\t throw e;\n\t  }\n\t}\t\n\t\n\tpublic void disconnect()\n\t{\n\t\ttry\n\t\t{\n\t\t\tif(client.isConnected())\n\t\t\t{\n\t\t\t\tclient.logout();  \n\t\t\t\tclient.disconnect();\n\t\t\t}\n\t\t}\n\t\tcatch(Exception e)\n\t\t{\t\t\t\n\t\t\te.printStackTrace();\n\t\t}\n\t}\t\n\t\n\tpublic void chmod(String RemoteFile, String Rights)  throws Exception\n\t{\n\t\tclient.sendSiteCommand(\"chmod \"+RemoteFile+\" \"+Rights);\n\t\tCheckState();\n\t}\n\t\n\t\n\tpublic void lsMB(MbElement InputDir,MbElement filelist)   throws Exception, MbException\n\t{\n\t\tMbElement xfile;\t\t\n\t\t\n\t\tfor (FTPFile file : client.listFiles((String)InputDir.evaluateXPath(\"string(SOURCE_PATH)\")))\n        {\n          if(!file.isFile()) continue; //-- No sub-dirs, No Symlinks !\t                      \n          \n          xfile=filelist.createElementAsLastChild(MbElement.TYPE_NAME, \"File\", null);\n          xfile.createElementAsLastChild(MbElement.TYPE_NAME, \"FileName\", file.getName());\n          xfile.createElementAsLastChild(MbElement.TYPE_NAME, \"FileSize\", file.getSize());\n          xfile.createElementAsLastChild(MbElement.TYPE_NAME, \"SourcePath\", (String)InputDir.evaluateXPath(\"string(SOURCE_PATH)\"));\n          xfile.createElementAsLastChild(MbElement.TYPE_NAME, \"SourceGateway\", (String)InputDir.evaluateXPath(\"string(GATEWAY_NAME)\"));\n        }\t\t\n\t}\n\t\n\tpublic void mkdir(String RemotePath)   throws Exception\n\t{\n\t   client.makeDirectory(RemotePath);\n\t   CheckState();\n\t}\n\n\t\n\tpublic void chdir(String RemotePath)   throws Exception\n\t{\n\t\tclient.changeWorkingDirectory(RemotePath);\t\n\t\tCheckState();\n\t}\n\n\n\t\n\tpublic void delete(String RemotePath)   throws Exception\n\t{\n\t\tclient.deleteFile(RemotePath);\t\n\t\tCheckState();\n\t}\n\t\n\t\n\t\t\n\tpublic void rename(String RemoteFileSrc, String RemoteFileDst)    throws Exception\n\t{\n\t     client.rename(RemoteFileSrc, RemoteFileDst);\n\t     CheckState();\n\t}\n\t\n\t\t\n   public void GetRemoteFileBinary(String RemoteFile, String LocalFile)     throws Exception\n   {\n\t   client.enterLocalPassiveMode();\n       client.setFileType(FTPClient.BINARY_FILE_TYPE);\n       client.retrieveFile(RemoteFile, \n     \t\t               new FileOutputStream(LocalFile));\n       \n       \n       CheckState();\n    }\n\n  \t\t\n   public void PutRemoteFileBinary(String LocalFile, String RemoteFile)      throws Exception\n   {\n       client.enterLocalPassiveMode();\n       client.setFileType(FTPClient.BINARY_FILE_TYPE);\n       client.storeFile(RemoteFile, \n    \t\t            new FileInputStream(LocalFile));\t\n       CheckState();\n   }   \n   \n   \n\tpublic void ignoreErrors(boolean x)  { ignoreErrors=x;\t}\n   \n\t\n\tpublic boolean isOK()  { return st;\t}\n\n\t\n\tpublic boolean isConnected()\t\n\t{\n\t\tboolean answer=false;\n\t\ttry {\n\t\t\tanswer = client.sendNoOp();\n\t\t} catch (IOException e) {\n\t\t\t// TODO Auto-generated catch block\n\t\t\te.printStackTrace();\n\t\t}\t\t\n\t\tst = answer;\n\t\treturn answer;\t\t\n       \n\t}\n\t\n\t\n\tpublic String LastMessage() {\treturn LastMessage;\t};\n\t\n\t\n\tpublic void CheckState(boolean state) throws Exception\n\t{\n\t    int reply = client.getReplyCode();\n        if(FTPReply.isPositiveCompletion(reply))    st=true;\n        else                                        st=false;\n\t\t\n        LastMessage=client.getReplyString();\t\n\t\t\n\t\tif(!st && !ignoreErrors)\t\n\t\t\tthrow new Exception(LastMessage);\n\t}\n\t\n\tpublic void CheckState() throws Exception\n\t{\n\t    int reply = client.getReplyCode();\n        if(FTPReply.isPositiveCompletion(reply))    st=true;\n        else                                        st=false;\n\t\t\n        LastMessage=client.getReplyString();\t\n\t\t\n\t\tif(!st && !ignoreErrors)\t\n\t\t\tthrow new Exception(LastMessage);\n\t}\n\t\n\tpublic void attachOptions(OptionsXMLProcessor optionsXMLProcessor) throws Exception \n\t{\n\t\tthis.optionsXMLProcessor = optionsXMLProcessor;\n\t}\n\n\n\t\n\tpublic String getIP() {\n\t\t\n\t\treturn \"\";\n\t}\n\t\n\tpublic boolean isIgnoreErrors() \n\t{\t\t\n\t\treturn ignoreErrors;\n\t}\n}\n{code}",
            "commit number version hash": 1487,
            "commit number": 1408,
            "function that changed": [
                {
                    "function name": "CSL",
                    "function params": [],
                    "file name": "FTPClient.java",
                    "file old path": "src/main/java/org/apache/commons/net/ftp/FTPClient.java",
                    "file new path": "src/main/java/org/apache/commons/net/ftp/FTPClient.java",
                    "full name": "src.main.java.org.apache.commons.net.ftp.FTPClient.CSL"
                }
            ],
            "files that changed": [
                "src/main/java/org/apache/commons/net/ftp/FTPClient.java"
            ]
        },
        {
            "bug index": "35",
            "bug id": "NET-584",
            "hexsha": "1eb03503f39c508b2b3ca157cfd35ee2dcbf1c22",
            "fix_hash": "e4c5b3536ee6df12f621583a2bcf5da9f576015f",
            "description": "I have a question about using library commons-net-3.4.jar\nQuestion is about org.apache.commons.net.ftp.FTPClient method setControlKeepAliveTimeout.\n\nRead about using it on:\nhttps://commons.apache.org/proper/commons-net/apidocs/org/apache/commons/net/ftp/FTPClient.html\n\n\nWhen I use it in my code I get this error:\n{code}\njava.net.SocketTimeoutException: Read timed out\n\tat java.net.SocketInputStream.socketRead0(Native Method)\n\tat java.net.SocketInputStream.read(SocketInputStream.java:163)\n\tat java.net.SocketInputStream.read(SocketInputStream.java:133)\n\tat sun.nio.cs.StreamDecoder.readBytes(StreamDecoder.java:322)\n\tat sun.nio.cs.StreamDecoder.implRead(StreamDecoder.java:364)\n\tat sun.nio.cs.StreamDecoder.read(StreamDecoder.java:210)\n\tat java.io.InputStreamReader.read(InputStreamReader.java:205)\n\tat java.io.BufferedReader.fill(BufferedReader.java:165)\n\tat java.io.BufferedReader.read(BufferedReader.java:186)\n\tat org.apache.commons.net.io.CRLFLineReader.readLine(CRLFLineReader.java:58)\n\tat org.apache.commons.net.ftp.FTP.__getReply(FTP.java:313)\n\tat org.apache.commons.net.ftp.FTP.__getReplyNoReport(FTP.java:303)\n\tat org.apache.commons.net.ftp.FTPClient$CSL.cleanUp(FTPClient.java:3838)\n\tat org.apache.commons.net.ftp.FTPClient._storeFile(FTPClient.java:695)\n\tat org.apache.commons.net.ftp.FTPClient.__storeFile(FTPClient.java:643)\n\tat org.apache.commons.net.ftp.FTPClient.storeFile(FTPClient.java:2033)\n\tat ru.mdm.File.Transfer.FTP.PutRemoteFileBinary(FTP.java:192)\n\tat ru.mdm.File.Transfer.TimeLimit.Thread.Protocol.PutRemoteFileBinaryThread.actionsToExecute(PutRemoteFileBinaryThread.java:23)\n\tat ru.mdm.File.Transfer.TimeLimit.OperationThread.run(OperationThread.java:60)\n{code}\nWithout enabling this option all works fine.\n\n\n\nHere is the code:\n{code}\npackage ru.mdm.File.Transfer;\nimport bin.ru.osa.common.utils.*;\nimport java.util.List;\nimport java.io.*;\nimport com.ibm.broker.javacompute.MbJavaComputeNode;\nimport com.ibm.broker.plugin.*;\nimport org.apache.commons.net.ftp.*;\nimport org.apache.commons.net.*;\nimport ru.mdm.File.Transfer.Options.OptionsXMLProcessor;\n\npublic class FTP implements Protocol \n{\n\t\n\tFTPClient client = new FTPClient();\n\t\n\tOptionsXMLProcessor optionsXMLProcessor;\n\t\n\t\n\tboolean   st;\n\tString LastMessage = new String();\n\t\n\tboolean   ignoreErrors = false;\n\t\n\t\n\tpublic FTP() \n\t{\n\t\tsuper();\t\t\n\t}\n\n\t\n\tprotected void finalize() { disconnect(); }\n\n\t\n\tpublic void connect(String CntName, \n\t\t\t\t\t\tString Host, \n\t\t\t\t\t\tString Port, \n\t\t\t\t\t\tString L, \n\t\t\t\t\t\tString P)  throws Exception\n\t{\n\t  try\n\t  {\t\t\n\t\tclient.setControlKeepAliveTimeout(300);\n\t    client.connect(Host);\n\t    client.login(L, P);\n\t    CheckState();\t    \n\t  }\n\t  catch(Exception e)\n\t  {\n\t     LastMessage=client.getReplyString();\t     \t     \n\t     if(LastMessage == null) LastMessage = e.getMessage();\n\t     \n\t     e.printStackTrace();\n\t     \n\t\t throw e;\n\t  }\n\t}\t\n\t\n\tpublic void disconnect()\n\t{\n\t\ttry\n\t\t{\n\t\t\tif(client.isConnected())\n\t\t\t{\n\t\t\t\tclient.logout();  \n\t\t\t\tclient.disconnect();\n\t\t\t}\n\t\t}\n\t\tcatch(Exception e)\n\t\t{\t\t\t\n\t\t\te.printStackTrace();\n\t\t}\n\t}\t\n\t\n\tpublic void chmod(String RemoteFile, String Rights)  throws Exception\n\t{\n\t\tclient.sendSiteCommand(\"chmod \"+RemoteFile+\" \"+Rights);\n\t\tCheckState();\n\t}\n\t\n\t\n\tpublic void lsMB(MbElement InputDir,MbElement filelist)   throws Exception, MbException\n\t{\n\t\tMbElement xfile;\t\t\n\t\t\n\t\tfor (FTPFile file : client.listFiles((String)InputDir.evaluateXPath(\"string(SOURCE_PATH)\")))\n        {\n          if(!file.isFile()) continue; //-- No sub-dirs, No Symlinks !\t                      \n          \n          xfile=filelist.createElementAsLastChild(MbElement.TYPE_NAME, \"File\", null);\n          xfile.createElementAsLastChild(MbElement.TYPE_NAME, \"FileName\", file.getName());\n          xfile.createElementAsLastChild(MbElement.TYPE_NAME, \"FileSize\", file.getSize());\n          xfile.createElementAsLastChild(MbElement.TYPE_NAME, \"SourcePath\", (String)InputDir.evaluateXPath(\"string(SOURCE_PATH)\"));\n          xfile.createElementAsLastChild(MbElement.TYPE_NAME, \"SourceGateway\", (String)InputDir.evaluateXPath(\"string(GATEWAY_NAME)\"));\n        }\t\t\n\t}\n\t\n\tpublic void mkdir(String RemotePath)   throws Exception\n\t{\n\t   client.makeDirectory(RemotePath);\n\t   CheckState();\n\t}\n\n\t\n\tpublic void chdir(String RemotePath)   throws Exception\n\t{\n\t\tclient.changeWorkingDirectory(RemotePath);\t\n\t\tCheckState();\n\t}\n\n\n\t\n\tpublic void delete(String RemotePath)   throws Exception\n\t{\n\t\tclient.deleteFile(RemotePath);\t\n\t\tCheckState();\n\t}\n\t\n\t\n\t\t\n\tpublic void rename(String RemoteFileSrc, String RemoteFileDst)    throws Exception\n\t{\n\t     client.rename(RemoteFileSrc, RemoteFileDst);\n\t     CheckState();\n\t}\n\t\n\t\t\n   public void GetRemoteFileBinary(String RemoteFile, String LocalFile)     throws Exception\n   {\n\t   client.enterLocalPassiveMode();\n       client.setFileType(FTPClient.BINARY_FILE_TYPE);\n       client.retrieveFile(RemoteFile, \n     \t\t               new FileOutputStream(LocalFile));\n       \n       \n       CheckState();\n    }\n\n  \t\t\n   public void PutRemoteFileBinary(String LocalFile, String RemoteFile)      throws Exception\n   {\n       client.enterLocalPassiveMode();\n       client.setFileType(FTPClient.BINARY_FILE_TYPE);\n       client.storeFile(RemoteFile, \n    \t\t            new FileInputStream(LocalFile));\t\n       CheckState();\n   }   \n   \n   \n\tpublic void ignoreErrors(boolean x)  { ignoreErrors=x;\t}\n   \n\t\n\tpublic boolean isOK()  { return st;\t}\n\n\t\n\tpublic boolean isConnected()\t\n\t{\n\t\tboolean answer=false;\n\t\ttry {\n\t\t\tanswer = client.sendNoOp();\n\t\t} catch (IOException e) {\n\t\t\t// TODO Auto-generated catch block\n\t\t\te.printStackTrace();\n\t\t}\t\t\n\t\tst = answer;\n\t\treturn answer;\t\t\n       \n\t}\n\t\n\t\n\tpublic String LastMessage() {\treturn LastMessage;\t};\n\t\n\t\n\tpublic void CheckState(boolean state) throws Exception\n\t{\n\t    int reply = client.getReplyCode();\n        if(FTPReply.isPositiveCompletion(reply))    st=true;\n        else                                        st=false;\n\t\t\n        LastMessage=client.getReplyString();\t\n\t\t\n\t\tif(!st && !ignoreErrors)\t\n\t\t\tthrow new Exception(LastMessage);\n\t}\n\t\n\tpublic void CheckState() throws Exception\n\t{\n\t    int reply = client.getReplyCode();\n        if(FTPReply.isPositiveCompletion(reply))    st=true;\n        else                                        st=false;\n\t\t\n        LastMessage=client.getReplyString();\t\n\t\t\n\t\tif(!st && !ignoreErrors)\t\n\t\t\tthrow new Exception(LastMessage);\n\t}\n\t\n\tpublic void attachOptions(OptionsXMLProcessor optionsXMLProcessor) throws Exception \n\t{\n\t\tthis.optionsXMLProcessor = optionsXMLProcessor;\n\t}\n\n\n\t\n\tpublic String getIP() {\n\t\t\n\t\treturn \"\";\n\t}\n\t\n\tpublic boolean isIgnoreErrors() \n\t{\t\t\n\t\treturn ignoreErrors;\n\t}\n}\n{code}",
            "commit number version hash": 1487,
            "commit number": 1407,
            "function that changed": [
                {
                    "function name": "_retrieveFile",
                    "function params": [
                        "command",
                        "remote",
                        "local"
                    ],
                    "file name": "FTPClient.java",
                    "file old path": "src/main/java/org/apache/commons/net/ftp/FTPClient.java",
                    "file new path": "src/main/java/org/apache/commons/net/ftp/FTPClient.java",
                    "full name": "src.main.java.org.apache.commons.net.ftp.FTPClient._retrieveFile"
                },
                {
                    "function name": "CSL",
                    "function params": [],
                    "file name": "FTPClient.java",
                    "file old path": "src/main/java/org/apache/commons/net/ftp/FTPClient.java",
                    "file new path": "src/main/java/org/apache/commons/net/ftp/FTPClient.java",
                    "full name": "src.main.java.org.apache.commons.net.ftp.FTPClient.CSL"
                },
                {
                    "function name": "_storeFile",
                    "function params": [
                        "command",
                        "remote",
                        "local"
                    ],
                    "file name": "FTPClient.java",
                    "file old path": "src/main/java/org/apache/commons/net/ftp/FTPClient.java",
                    "file new path": "src/main/java/org/apache/commons/net/ftp/FTPClient.java",
                    "full name": "src.main.java.org.apache.commons.net.ftp.FTPClient._storeFile"
                }
            ],
            "files that changed": [
                "src/main/java/org/apache/commons/net/ftp/FTPClient.java"
            ]
        },
        {
            "bug index": "36",
            "bug id": "NET-584",
            "hexsha": "1eb03503f39c508b2b3ca157cfd35ee2dcbf1c22",
            "fix_hash": "43a4141d3eab58255bd74a0e433fe54fbeee5ec4",
            "description": "I have a question about using library commons-net-3.4.jar\nQuestion is about org.apache.commons.net.ftp.FTPClient method setControlKeepAliveTimeout.\n\nRead about using it on:\nhttps://commons.apache.org/proper/commons-net/apidocs/org/apache/commons/net/ftp/FTPClient.html\n\n\nWhen I use it in my code I get this error:\n{code}\njava.net.SocketTimeoutException: Read timed out\n\tat java.net.SocketInputStream.socketRead0(Native Method)\n\tat java.net.SocketInputStream.read(SocketInputStream.java:163)\n\tat java.net.SocketInputStream.read(SocketInputStream.java:133)\n\tat sun.nio.cs.StreamDecoder.readBytes(StreamDecoder.java:322)\n\tat sun.nio.cs.StreamDecoder.implRead(StreamDecoder.java:364)\n\tat sun.nio.cs.StreamDecoder.read(StreamDecoder.java:210)\n\tat java.io.InputStreamReader.read(InputStreamReader.java:205)\n\tat java.io.BufferedReader.fill(BufferedReader.java:165)\n\tat java.io.BufferedReader.read(BufferedReader.java:186)\n\tat org.apache.commons.net.io.CRLFLineReader.readLine(CRLFLineReader.java:58)\n\tat org.apache.commons.net.ftp.FTP.__getReply(FTP.java:313)\n\tat org.apache.commons.net.ftp.FTP.__getReplyNoReport(FTP.java:303)\n\tat org.apache.commons.net.ftp.FTPClient$CSL.cleanUp(FTPClient.java:3838)\n\tat org.apache.commons.net.ftp.FTPClient._storeFile(FTPClient.java:695)\n\tat org.apache.commons.net.ftp.FTPClient.__storeFile(FTPClient.java:643)\n\tat org.apache.commons.net.ftp.FTPClient.storeFile(FTPClient.java:2033)\n\tat ru.mdm.File.Transfer.FTP.PutRemoteFileBinary(FTP.java:192)\n\tat ru.mdm.File.Transfer.TimeLimit.Thread.Protocol.PutRemoteFileBinaryThread.actionsToExecute(PutRemoteFileBinaryThread.java:23)\n\tat ru.mdm.File.Transfer.TimeLimit.OperationThread.run(OperationThread.java:60)\n{code}\nWithout enabling this option all works fine.\n\n\n\nHere is the code:\n{code}\npackage ru.mdm.File.Transfer;\nimport bin.ru.osa.common.utils.*;\nimport java.util.List;\nimport java.io.*;\nimport com.ibm.broker.javacompute.MbJavaComputeNode;\nimport com.ibm.broker.plugin.*;\nimport org.apache.commons.net.ftp.*;\nimport org.apache.commons.net.*;\nimport ru.mdm.File.Transfer.Options.OptionsXMLProcessor;\n\npublic class FTP implements Protocol \n{\n\t\n\tFTPClient client = new FTPClient();\n\t\n\tOptionsXMLProcessor optionsXMLProcessor;\n\t\n\t\n\tboolean   st;\n\tString LastMessage = new String();\n\t\n\tboolean   ignoreErrors = false;\n\t\n\t\n\tpublic FTP() \n\t{\n\t\tsuper();\t\t\n\t}\n\n\t\n\tprotected void finalize() { disconnect(); }\n\n\t\n\tpublic void connect(String CntName, \n\t\t\t\t\t\tString Host, \n\t\t\t\t\t\tString Port, \n\t\t\t\t\t\tString L, \n\t\t\t\t\t\tString P)  throws Exception\n\t{\n\t  try\n\t  {\t\t\n\t\tclient.setControlKeepAliveTimeout(300);\n\t    client.connect(Host);\n\t    client.login(L, P);\n\t    CheckState();\t    \n\t  }\n\t  catch(Exception e)\n\t  {\n\t     LastMessage=client.getReplyString();\t     \t     \n\t     if(LastMessage == null) LastMessage = e.getMessage();\n\t     \n\t     e.printStackTrace();\n\t     \n\t\t throw e;\n\t  }\n\t}\t\n\t\n\tpublic void disconnect()\n\t{\n\t\ttry\n\t\t{\n\t\t\tif(client.isConnected())\n\t\t\t{\n\t\t\t\tclient.logout();  \n\t\t\t\tclient.disconnect();\n\t\t\t}\n\t\t}\n\t\tcatch(Exception e)\n\t\t{\t\t\t\n\t\t\te.printStackTrace();\n\t\t}\n\t}\t\n\t\n\tpublic void chmod(String RemoteFile, String Rights)  throws Exception\n\t{\n\t\tclient.sendSiteCommand(\"chmod \"+RemoteFile+\" \"+Rights);\n\t\tCheckState();\n\t}\n\t\n\t\n\tpublic void lsMB(MbElement InputDir,MbElement filelist)   throws Exception, MbException\n\t{\n\t\tMbElement xfile;\t\t\n\t\t\n\t\tfor (FTPFile file : client.listFiles((String)InputDir.evaluateXPath(\"string(SOURCE_PATH)\")))\n        {\n          if(!file.isFile()) continue; //-- No sub-dirs, No Symlinks !\t                      \n          \n          xfile=filelist.createElementAsLastChild(MbElement.TYPE_NAME, \"File\", null);\n          xfile.createElementAsLastChild(MbElement.TYPE_NAME, \"FileName\", file.getName());\n          xfile.createElementAsLastChild(MbElement.TYPE_NAME, \"FileSize\", file.getSize());\n          xfile.createElementAsLastChild(MbElement.TYPE_NAME, \"SourcePath\", (String)InputDir.evaluateXPath(\"string(SOURCE_PATH)\"));\n          xfile.createElementAsLastChild(MbElement.TYPE_NAME, \"SourceGateway\", (String)InputDir.evaluateXPath(\"string(GATEWAY_NAME)\"));\n        }\t\t\n\t}\n\t\n\tpublic void mkdir(String RemotePath)   throws Exception\n\t{\n\t   client.makeDirectory(RemotePath);\n\t   CheckState();\n\t}\n\n\t\n\tpublic void chdir(String RemotePath)   throws Exception\n\t{\n\t\tclient.changeWorkingDirectory(RemotePath);\t\n\t\tCheckState();\n\t}\n\n\n\t\n\tpublic void delete(String RemotePath)   throws Exception\n\t{\n\t\tclient.deleteFile(RemotePath);\t\n\t\tCheckState();\n\t}\n\t\n\t\n\t\t\n\tpublic void rename(String RemoteFileSrc, String RemoteFileDst)    throws Exception\n\t{\n\t     client.rename(RemoteFileSrc, RemoteFileDst);\n\t     CheckState();\n\t}\n\t\n\t\t\n   public void GetRemoteFileBinary(String RemoteFile, String LocalFile)     throws Exception\n   {\n\t   client.enterLocalPassiveMode();\n       client.setFileType(FTPClient.BINARY_FILE_TYPE);\n       client.retrieveFile(RemoteFile, \n     \t\t               new FileOutputStream(LocalFile));\n       \n       \n       CheckState();\n    }\n\n  \t\t\n   public void PutRemoteFileBinary(String LocalFile, String RemoteFile)      throws Exception\n   {\n       client.enterLocalPassiveMode();\n       client.setFileType(FTPClient.BINARY_FILE_TYPE);\n       client.storeFile(RemoteFile, \n    \t\t            new FileInputStream(LocalFile));\t\n       CheckState();\n   }   \n   \n   \n\tpublic void ignoreErrors(boolean x)  { ignoreErrors=x;\t}\n   \n\t\n\tpublic boolean isOK()  { return st;\t}\n\n\t\n\tpublic boolean isConnected()\t\n\t{\n\t\tboolean answer=false;\n\t\ttry {\n\t\t\tanswer = client.sendNoOp();\n\t\t} catch (IOException e) {\n\t\t\t// TODO Auto-generated catch block\n\t\t\te.printStackTrace();\n\t\t}\t\t\n\t\tst = answer;\n\t\treturn answer;\t\t\n       \n\t}\n\t\n\t\n\tpublic String LastMessage() {\treturn LastMessage;\t};\n\t\n\t\n\tpublic void CheckState(boolean state) throws Exception\n\t{\n\t    int reply = client.getReplyCode();\n        if(FTPReply.isPositiveCompletion(reply))    st=true;\n        else                                        st=false;\n\t\t\n        LastMessage=client.getReplyString();\t\n\t\t\n\t\tif(!st && !ignoreErrors)\t\n\t\t\tthrow new Exception(LastMessage);\n\t}\n\t\n\tpublic void CheckState() throws Exception\n\t{\n\t    int reply = client.getReplyCode();\n        if(FTPReply.isPositiveCompletion(reply))    st=true;\n        else                                        st=false;\n\t\t\n        LastMessage=client.getReplyString();\t\n\t\t\n\t\tif(!st && !ignoreErrors)\t\n\t\t\tthrow new Exception(LastMessage);\n\t}\n\t\n\tpublic void attachOptions(OptionsXMLProcessor optionsXMLProcessor) throws Exception \n\t{\n\t\tthis.optionsXMLProcessor = optionsXMLProcessor;\n\t}\n\n\n\t\n\tpublic String getIP() {\n\t\t\n\t\treturn \"\";\n\t}\n\t\n\tpublic boolean isIgnoreErrors() \n\t{\t\t\n\t\treturn ignoreErrors;\n\t}\n}\n{code}",
            "commit number version hash": 1487,
            "commit number": 1402,
            "function that changed": [
                {
                    "function name": "showCslStats",
                    "function params": [
                        "ftp"
                    ],
                    "file name": "FTPClientExample.java",
                    "file old path": "src/main/java/examples/ftp/FTPClientExample.java",
                    "file new path": "src/main/java/examples/ftp/FTPClientExample.java",
                    "full name": "src.main.java.examples.ftp.FTPClientExample.showCslStats"
                },
                {
                    "function name": "main",
                    "function params": [
                        "args"
                    ],
                    "file name": "FTPClientExample.java",
                    "file old path": "src/main/java/examples/ftp/FTPClientExample.java",
                    "file new path": "src/main/java/examples/ftp/FTPClientExample.java",
                    "full name": "src.main.java.examples.ftp.FTPClientExample.main"
                },
                {
                    "function name": "getCslDebug",
                    "function params": [],
                    "file name": "FTPClient.java",
                    "file old path": "src/main/java/org/apache/commons/net/ftp/FTPClient.java",
                    "file new path": "src/main/java/org/apache/commons/net/ftp/FTPClient.java",
                    "full name": "src.main.java.org.apache.commons.net.ftp.FTPClient.getCslDebug"
                },
                {
                    "function name": "CSL",
                    "function params": [
                        "totalBytesTransferred",
                        "bytesTransferred",
                        "streamSize"
                    ],
                    "file name": "FTPClient.java",
                    "file old path": "src/main/java/org/apache/commons/net/ftp/FTPClient.java",
                    "file new path": "src/main/java/org/apache/commons/net/ftp/FTPClient.java",
                    "full name": "src.main.java.org.apache.commons.net.ftp.FTPClient.CSL"
                },
                {
                    "function name": "_storeFile",
                    "function params": [
                        "command",
                        "remote",
                        "local"
                    ],
                    "file name": "FTPClient.java",
                    "file old path": "src/main/java/org/apache/commons/net/ftp/FTPClient.java",
                    "file new path": "src/main/java/org/apache/commons/net/ftp/FTPClient.java",
                    "full name": "src.main.java.org.apache.commons.net.ftp.FTPClient._storeFile"
                },
                {
                    "function name": "CSL",
                    "function params": [],
                    "file name": "FTPClient.java",
                    "file old path": "src/main/java/org/apache/commons/net/ftp/FTPClient.java",
                    "file new path": "src/main/java/org/apache/commons/net/ftp/FTPClient.java",
                    "full name": "src.main.java.org.apache.commons.net.ftp.FTPClient.CSL"
                },
                {
                    "function name": "_retrieveFile",
                    "function params": [
                        "command",
                        "remote",
                        "local"
                    ],
                    "file name": "FTPClient.java",
                    "file old path": "src/main/java/org/apache/commons/net/ftp/FTPClient.java",
                    "file new path": "src/main/java/org/apache/commons/net/ftp/FTPClient.java",
                    "full name": "src.main.java.org.apache.commons.net.ftp.FTPClient._retrieveFile"
                }
            ],
            "files that changed": [
                "src/main/java/examples/ftp/FTPClientExample.java",
                "src/main/java/org/apache/commons/net/ftp/FTPClient.java"
            ]
        },
        {
            "bug index": "37",
            "bug id": "NET-624",
            "hexsha": "1eb03503f39c508b2b3ca157cfd35ee2dcbf1c22",
            "fix_hash": "3a7c1a0ec0ef23e318e465fc5cafeebf544f10be",
            "description": "An IPv4 subnet mask, which is also the network mask, must consist of a set of contiguous 1-bits followed by a block of 0-bits (i.e. 255.255.255.0), but it does not check.\n\n{code}\n/* 255.255.0.1 is 11111111.11111111.00000000.00000001 in  binary */\nSubnetUtils su = new SubnetUtils(\"192.168.0.1\", \"255.255.0.1\"); // expect error\nSubnetInfo si = su.getInfo();\nSystem.out.println(si.getNetmask()); // Expect error or 255.255.0.1\n255.255.128.0\n{code}\n\nhttps://github.com/apache/commons-net/pull/13",
            "commit number version hash": 1487,
            "commit number": 1400,
            "function that changed": [
                {
                    "function name": "SubnetInfo",
                    "function params": [],
                    "file name": "SubnetUtils.java",
                    "file old path": "src/main/java/org/apache/commons/net/util/SubnetUtils.java",
                    "file new path": "src/main/java/org/apache/commons/net/util/SubnetUtils.java",
                    "full name": "src.main.java.org.apache.commons.net.util.SubnetUtils.SubnetInfo"
                }
            ],
            "files that changed": [
                "src/main/java/org/apache/commons/net/util/SubnetUtils.java"
            ]
        },
        {
            "bug index": "38",
            "bug id": "NET-584",
            "hexsha": "1eb03503f39c508b2b3ca157cfd35ee2dcbf1c22",
            "fix_hash": "ac37d8d64c3f5aeb0032f420ea976712947f2cc6",
            "description": "I have a question about using library commons-net-3.4.jar\nQuestion is about org.apache.commons.net.ftp.FTPClient method setControlKeepAliveTimeout.\n\nRead about using it on:\nhttps://commons.apache.org/proper/commons-net/apidocs/org/apache/commons/net/ftp/FTPClient.html\n\n\nWhen I use it in my code I get this error:\n{code}\njava.net.SocketTimeoutException: Read timed out\n\tat java.net.SocketInputStream.socketRead0(Native Method)\n\tat java.net.SocketInputStream.read(SocketInputStream.java:163)\n\tat java.net.SocketInputStream.read(SocketInputStream.java:133)\n\tat sun.nio.cs.StreamDecoder.readBytes(StreamDecoder.java:322)\n\tat sun.nio.cs.StreamDecoder.implRead(StreamDecoder.java:364)\n\tat sun.nio.cs.StreamDecoder.read(StreamDecoder.java:210)\n\tat java.io.InputStreamReader.read(InputStreamReader.java:205)\n\tat java.io.BufferedReader.fill(BufferedReader.java:165)\n\tat java.io.BufferedReader.read(BufferedReader.java:186)\n\tat org.apache.commons.net.io.CRLFLineReader.readLine(CRLFLineReader.java:58)\n\tat org.apache.commons.net.ftp.FTP.__getReply(FTP.java:313)\n\tat org.apache.commons.net.ftp.FTP.__getReplyNoReport(FTP.java:303)\n\tat org.apache.commons.net.ftp.FTPClient$CSL.cleanUp(FTPClient.java:3838)\n\tat org.apache.commons.net.ftp.FTPClient._storeFile(FTPClient.java:695)\n\tat org.apache.commons.net.ftp.FTPClient.__storeFile(FTPClient.java:643)\n\tat org.apache.commons.net.ftp.FTPClient.storeFile(FTPClient.java:2033)\n\tat ru.mdm.File.Transfer.FTP.PutRemoteFileBinary(FTP.java:192)\n\tat ru.mdm.File.Transfer.TimeLimit.Thread.Protocol.PutRemoteFileBinaryThread.actionsToExecute(PutRemoteFileBinaryThread.java:23)\n\tat ru.mdm.File.Transfer.TimeLimit.OperationThread.run(OperationThread.java:60)\n{code}\nWithout enabling this option all works fine.\n\n\n\nHere is the code:\n{code}\npackage ru.mdm.File.Transfer;\nimport bin.ru.osa.common.utils.*;\nimport java.util.List;\nimport java.io.*;\nimport com.ibm.broker.javacompute.MbJavaComputeNode;\nimport com.ibm.broker.plugin.*;\nimport org.apache.commons.net.ftp.*;\nimport org.apache.commons.net.*;\nimport ru.mdm.File.Transfer.Options.OptionsXMLProcessor;\n\npublic class FTP implements Protocol \n{\n\t\n\tFTPClient client = new FTPClient();\n\t\n\tOptionsXMLProcessor optionsXMLProcessor;\n\t\n\t\n\tboolean   st;\n\tString LastMessage = new String();\n\t\n\tboolean   ignoreErrors = false;\n\t\n\t\n\tpublic FTP() \n\t{\n\t\tsuper();\t\t\n\t}\n\n\t\n\tprotected void finalize() { disconnect(); }\n\n\t\n\tpublic void connect(String CntName, \n\t\t\t\t\t\tString Host, \n\t\t\t\t\t\tString Port, \n\t\t\t\t\t\tString L, \n\t\t\t\t\t\tString P)  throws Exception\n\t{\n\t  try\n\t  {\t\t\n\t\tclient.setControlKeepAliveTimeout(300);\n\t    client.connect(Host);\n\t    client.login(L, P);\n\t    CheckState();\t    \n\t  }\n\t  catch(Exception e)\n\t  {\n\t     LastMessage=client.getReplyString();\t     \t     \n\t     if(LastMessage == null) LastMessage = e.getMessage();\n\t     \n\t     e.printStackTrace();\n\t     \n\t\t throw e;\n\t  }\n\t}\t\n\t\n\tpublic void disconnect()\n\t{\n\t\ttry\n\t\t{\n\t\t\tif(client.isConnected())\n\t\t\t{\n\t\t\t\tclient.logout();  \n\t\t\t\tclient.disconnect();\n\t\t\t}\n\t\t}\n\t\tcatch(Exception e)\n\t\t{\t\t\t\n\t\t\te.printStackTrace();\n\t\t}\n\t}\t\n\t\n\tpublic void chmod(String RemoteFile, String Rights)  throws Exception\n\t{\n\t\tclient.sendSiteCommand(\"chmod \"+RemoteFile+\" \"+Rights);\n\t\tCheckState();\n\t}\n\t\n\t\n\tpublic void lsMB(MbElement InputDir,MbElement filelist)   throws Exception, MbException\n\t{\n\t\tMbElement xfile;\t\t\n\t\t\n\t\tfor (FTPFile file : client.listFiles((String)InputDir.evaluateXPath(\"string(SOURCE_PATH)\")))\n        {\n          if(!file.isFile()) continue; //-- No sub-dirs, No Symlinks !\t                      \n          \n          xfile=filelist.createElementAsLastChild(MbElement.TYPE_NAME, \"File\", null);\n          xfile.createElementAsLastChild(MbElement.TYPE_NAME, \"FileName\", file.getName());\n          xfile.createElementAsLastChild(MbElement.TYPE_NAME, \"FileSize\", file.getSize());\n          xfile.createElementAsLastChild(MbElement.TYPE_NAME, \"SourcePath\", (String)InputDir.evaluateXPath(\"string(SOURCE_PATH)\"));\n          xfile.createElementAsLastChild(MbElement.TYPE_NAME, \"SourceGateway\", (String)InputDir.evaluateXPath(\"string(GATEWAY_NAME)\"));\n        }\t\t\n\t}\n\t\n\tpublic void mkdir(String RemotePath)   throws Exception\n\t{\n\t   client.makeDirectory(RemotePath);\n\t   CheckState();\n\t}\n\n\t\n\tpublic void chdir(String RemotePath)   throws Exception\n\t{\n\t\tclient.changeWorkingDirectory(RemotePath);\t\n\t\tCheckState();\n\t}\n\n\n\t\n\tpublic void delete(String RemotePath)   throws Exception\n\t{\n\t\tclient.deleteFile(RemotePath);\t\n\t\tCheckState();\n\t}\n\t\n\t\n\t\t\n\tpublic void rename(String RemoteFileSrc, String RemoteFileDst)    throws Exception\n\t{\n\t     client.rename(RemoteFileSrc, RemoteFileDst);\n\t     CheckState();\n\t}\n\t\n\t\t\n   public void GetRemoteFileBinary(String RemoteFile, String LocalFile)     throws Exception\n   {\n\t   client.enterLocalPassiveMode();\n       client.setFileType(FTPClient.BINARY_FILE_TYPE);\n       client.retrieveFile(RemoteFile, \n     \t\t               new FileOutputStream(LocalFile));\n       \n       \n       CheckState();\n    }\n\n  \t\t\n   public void PutRemoteFileBinary(String LocalFile, String RemoteFile)      throws Exception\n   {\n       client.enterLocalPassiveMode();\n       client.setFileType(FTPClient.BINARY_FILE_TYPE);\n       client.storeFile(RemoteFile, \n    \t\t            new FileInputStream(LocalFile));\t\n       CheckState();\n   }   \n   \n   \n\tpublic void ignoreErrors(boolean x)  { ignoreErrors=x;\t}\n   \n\t\n\tpublic boolean isOK()  { return st;\t}\n\n\t\n\tpublic boolean isConnected()\t\n\t{\n\t\tboolean answer=false;\n\t\ttry {\n\t\t\tanswer = client.sendNoOp();\n\t\t} catch (IOException e) {\n\t\t\t// TODO Auto-generated catch block\n\t\t\te.printStackTrace();\n\t\t}\t\t\n\t\tst = answer;\n\t\treturn answer;\t\t\n       \n\t}\n\t\n\t\n\tpublic String LastMessage() {\treturn LastMessage;\t};\n\t\n\t\n\tpublic void CheckState(boolean state) throws Exception\n\t{\n\t    int reply = client.getReplyCode();\n        if(FTPReply.isPositiveCompletion(reply))    st=true;\n        else                                        st=false;\n\t\t\n        LastMessage=client.getReplyString();\t\n\t\t\n\t\tif(!st && !ignoreErrors)\t\n\t\t\tthrow new Exception(LastMessage);\n\t}\n\t\n\tpublic void CheckState() throws Exception\n\t{\n\t    int reply = client.getReplyCode();\n        if(FTPReply.isPositiveCompletion(reply))    st=true;\n        else                                        st=false;\n\t\t\n        LastMessage=client.getReplyString();\t\n\t\t\n\t\tif(!st && !ignoreErrors)\t\n\t\t\tthrow new Exception(LastMessage);\n\t}\n\t\n\tpublic void attachOptions(OptionsXMLProcessor optionsXMLProcessor) throws Exception \n\t{\n\t\tthis.optionsXMLProcessor = optionsXMLProcessor;\n\t}\n\n\n\t\n\tpublic String getIP() {\n\t\t\n\t\treturn \"\";\n\t}\n\t\n\tpublic boolean isIgnoreErrors() \n\t{\t\t\n\t\treturn ignoreErrors;\n\t}\n}\n{code}",
            "commit number version hash": 1487,
            "commit number": 1399,
            "function that changed": [
                {
                    "function name": "CSL",
                    "function params": [],
                    "file name": "FTPClient.java",
                    "file old path": "src/main/java/org/apache/commons/net/ftp/FTPClient.java",
                    "file new path": "src/main/java/org/apache/commons/net/ftp/FTPClient.java",
                    "full name": "src.main.java.org.apache.commons.net.ftp.FTPClient.CSL"
                }
            ],
            "files that changed": [
                "src/main/java/org/apache/commons/net/ftp/FTPClient.java"
            ]
        },
        {
            "bug index": "39",
            "bug id": "NET-624",
            "hexsha": "1eb03503f39c508b2b3ca157cfd35ee2dcbf1c22",
            "fix_hash": "76036954547d0ead559f4e7b258019b3355d05a4",
            "description": "An IPv4 subnet mask, which is also the network mask, must consist of a set of contiguous 1-bits followed by a block of 0-bits (i.e. 255.255.255.0), but it does not check.\n\n{code}\n/* 255.255.0.1 is 11111111.11111111.00000000.00000001 in  binary */\nSubnetUtils su = new SubnetUtils(\"192.168.0.1\", \"255.255.0.1\"); // expect error\nSubnetInfo si = su.getInfo();\nSystem.out.println(si.getNetmask()); // Expect error or 255.255.0.1\n255.255.128.0\n{code}\n\nhttps://github.com/apache/commons-net/pull/13",
            "commit number version hash": 1487,
            "commit number": 1398,
            "function that changed": [
                {
                    "function name": "toCidrNotation",
                    "function params": [
                        "addr",
                        "mask"
                    ],
                    "file name": "SubnetUtils.java",
                    "file old path": "src/main/java/org/apache/commons/net/util/SubnetUtils.java",
                    "file new path": "src/main/java/org/apache/commons/net/util/SubnetUtils.java",
                    "full name": "src.main.java.org.apache.commons.net.util.SubnetUtils.toCidrNotation"
                },
                {
                    "function name": "testNET624",
                    "function params": [],
                    "file name": "SubnetUtilsTest.java",
                    "file old path": "src/test/java/org/apache/commons/net/SubnetUtilsTest.java",
                    "file new path": "src/test/java/org/apache/commons/net/SubnetUtilsTest.java",
                    "full name": "src.test.java.org.apache.commons.net.SubnetUtilsTest.testNET624"
                }
            ],
            "files that changed": [
                "src/main/java/org/apache/commons/net/util/SubnetUtils.java",
                "src/test/java/org/apache/commons/net/SubnetUtilsTest.java"
            ]
        },
        {
            "bug index": "42",
            "bug id": "NET-618",
            "hexsha": "1eb03503f39c508b2b3ca157cfd35ee2dcbf1c22",
            "fix_hash": "c296d280f5c66277a7f0b6fcd0843eb7ad061858",
            "description": "Exception is printed to console in src/main/java/org/apache/commons/net/ftp/parser/MVSFTPEntryParser.java which can leak system information:\n{code}\n    private boolean parseMemberList(FTPFile file, String entry) {\n        if (matches(entry)) {\n            file.setRawListing(entry);\n            String name = group(1);\n            String datestr = group(2) + \" \" + group(3);\n            file.setName(name);\n            file.setType(FTPFile.FILE_TYPE);\n            try {\n                file.setTimestamp(super.parseTimestamp(datestr));\n            } catch (ParseException e) {\n                e.printStackTrace();\n                // just ignore parsing errors.\n                // TODO check this is ok\n                return false; // this is a parsing failure too.\n            }\n            return true;\n        }\n\n        return false;\n    }\n{code}\n\n",
            "commit number version hash": 1487,
            "commit number": 1391,
            "function that changed": [
                {
                    "function name": "parseMemberList",
                    "function params": [
                        "file",
                        "entry"
                    ],
                    "file name": "MVSFTPEntryParser.java",
                    "file old path": "src/main/java/org/apache/commons/net/ftp/parser/MVSFTPEntryParser.java",
                    "file new path": "src/main/java/org/apache/commons/net/ftp/parser/MVSFTPEntryParser.java",
                    "full name": "src.main.java.org.apache.commons.net.ftp.parser.MVSFTPEntryParser.parseMemberList"
                }
            ],
            "files that changed": [
                "src/main/java/org/apache/commons/net/ftp/parser/MVSFTPEntryParser.java"
            ]
        },
        {
            "bug index": "44",
            "bug id": "NET-414",
            "hexsha": "a76bed1f8338e0bffb78b3b5a918aede47135520",
            "fix_hash": "4564a17fb24a851771f83a614d0bde5bae05bcfa",
            "description": "When a TFTP request response arrives that incorrectly specifies its source port as the control port, the request should be rejected with an error code 5 (TFTPErrorPacket.UNKNOWN_TID) and suggested text \"INCORRECT SOURCE PORT\". \n\nThis can happen when an incorrectly written TFTP server replies to a request from a control socket instead of building a new socket that attaches to an ephemeral port.\n\nNote 1: The expected response from a read request is a DATA packet. The expected response from a write request is an ACK packet.\n\nNote 2: The control port is implementation specific and not always port 69 (as defined by IANA).",
            "commit number version hash": 1390,
            "commit number": 1382,
            "function that changed": [
                {
                    "function name": "receiveFile",
                    "function params": [
                        "filename",
                        "mode",
                        "output",
                        "host",
                        "port"
                    ],
                    "file name": "TFTPClient.java",
                    "file old path": "src/main/java/org/apache/commons/net/tftp/TFTPClient.java",
                    "file new path": "src/main/java/org/apache/commons/net/tftp/TFTPClient.java",
                    "full name": "src.main.java.org.apache.commons.net.tftp.TFTPClient.receiveFile"
                },
                {
                    "function name": "sendFile",
                    "function params": [
                        "filename",
                        "mode",
                        "input",
                        "host",
                        "port"
                    ],
                    "file name": "TFTPClient.java",
                    "file old path": "src/main/java/org/apache/commons/net/tftp/TFTPClient.java",
                    "file new path": "src/main/java/org/apache/commons/net/tftp/TFTPClient.java",
                    "full name": "src.main.java.org.apache.commons.net.tftp.TFTPClient.sendFile"
                }
            ],
            "files that changed": [
                "src/main/java/org/apache/commons/net/tftp/TFTPClient.java"
            ]
        },
        {
            "bug index": "45",
            "bug id": "NET-477",
            "hexsha": "a76bed1f8338e0bffb78b3b5a918aede47135520",
            "fix_hash": "f6b86b380606073a2847b8926d893be047903995",
            "description": "TFTPClient.java sendFile() method does not retry after initial timeout.\n\nBetween revisons 1088720 & 1229692 the 'continue' statements were changed to 'continue _sendPacket'. After the initial timeout of bufferedReceive() these cause the control to flow to the outer loop and never retry. If the control did flow accordingly, the retry would loop indefinitely since the timeouts variable is reset to zero each time as well.\n\nI am using a workaround by calling bufferedSend(sent) just before continue, in place of the 'continue _sendPacket' statement.\n\nIt looks as if similar logic was applied to the receiveFile() method as well.\n\nRevision:1229692\nTime:01/10/2012 01:14 PM\nAuthor:sebb\nPath:http://svn.apache.org/repos/asf/commons/proper/net/trunk/src/main/java/org/apache/commons/net/tftp/TFTPClient.java\nMessage:NET-410 Apache Commons TFTP does not handle RFC 783 retransmits\n",
            "commit number version hash": 1390,
            "commit number": 1381,
            "function that changed": [
                {
                    "function name": "receiveFile",
                    "function params": [
                        "filename",
                        "mode",
                        "output",
                        "host",
                        "port"
                    ],
                    "file name": "TFTPClient.java",
                    "file old path": "src/main/java/org/apache/commons/net/tftp/TFTPClient.java",
                    "file new path": "src/main/java/org/apache/commons/net/tftp/TFTPClient.java",
                    "full name": "src.main.java.org.apache.commons.net.tftp.TFTPClient.receiveFile"
                },
                {
                    "function name": "sendFile",
                    "function params": [
                        "filename",
                        "mode",
                        "input",
                        "host",
                        "port"
                    ],
                    "file name": "TFTPClient.java",
                    "file old path": "src/main/java/org/apache/commons/net/tftp/TFTPClient.java",
                    "file new path": "src/main/java/org/apache/commons/net/tftp/TFTPClient.java",
                    "full name": "src.main.java.org.apache.commons.net.tftp.TFTPClient.sendFile"
                }
            ],
            "files that changed": [
                "src/main/java/org/apache/commons/net/tftp/TFTPClient.java"
            ]
        },
        {
            "bug index": "46",
            "bug id": "NET-596",
            "hexsha": "a76bed1f8338e0bffb78b3b5a918aede47135520",
            "fix_hash": "796a288e0c2e17ddf7dc44a4cd790a7eab4e158d",
            "description": "When using the TelnetClient class, a {{NullPointerException}} may occur when calling the {{disconnect}} method twice, in the {{_closeOutputStream}} method called under the hood, if the Telnet connection is lost (for instance, server is hardly shut down).\n\n1. The first call to {{disconnect}} resets completely the TelnetClient instance.\n2. The second call to {{disconnect}} leads to the NPE exception, because the {{\\_output\\_}} property is {{null}}, in the {{_closeOutputStream}} method.\n\n*NOTE: the NPE does not occur with JDK 8, because, the first call to {{disconnect}} throws an I/O exception (socket is closed), leaving the TelnetClient instance with a non-null {{\\_output\\_}} property. Then a second call to disconnect does not throw a NPE. It seems the JDK 8 behaves differently when a client socket loses a connection. So there is also a bug with JDK 8, as disconnection shall close quietly resources without an I/O exception, and without leaving non-null resources, and then disconnect the client socket. The {{SocketClient.disconnect}} is a good implementation to start with.*\n\nThe problem is that the TelnetOutputStream class closes the Socket output stream under the hood, but doesn't check if it is null and doesn't reset it to null once done. _The implementation of the TelnetOutputStream is quite strange, as there is a cycling dependency between this class and the TelnetClient class. The {{TelnetClient}} class shall handle itself the close of its internal resources, and disconnect the client socket. But this responsibility is delegates to the TelnetOutputStream._\n\nHere's the stack trace of the NPE exception:\n{quote}\n|java.lang.NullPointerException\n     at org.apache.commons.net.telnet.TelnetClient._closeOutputStream(TelnetClient.java:83)\n      at org.apache.commons.net.telnet.TelnetOutputStream.close(TelnetOutputStream.java:163)\n      at org.apache.commons.net.telnet.TelnetClient.disconnect(TelnetClient.java:124)\n{quote}\n\nA way to workaround this bug, is to always check if the {{TelnetClient}} instance is connected, before calling the {{disconnect}} method.\n",
            "commit number version hash": 1390,
            "commit number": 1375,
            "function that changed": [
                {
                    "function name": "disconnect",
                    "function params": [],
                    "file name": "TelnetClient.java",
                    "file old path": "src/main/java/org/apache/commons/net/telnet/TelnetClient.java",
                    "file new path": "src/main/java/org/apache/commons/net/telnet/TelnetClient.java",
                    "full name": "src.main.java.org.apache.commons.net.telnet.TelnetClient.disconnect"
                },
                {
                    "function name": "_closeOutputStream",
                    "function params": [],
                    "file name": "TelnetClient.java",
                    "file old path": "src/main/java/org/apache/commons/net/telnet/TelnetClient.java",
                    "file new path": "src/main/java/org/apache/commons/net/telnet/TelnetClient.java",
                    "full name": "src.main.java.org.apache.commons.net.telnet.TelnetClient._closeOutputStream"
                }
            ],
            "files that changed": [
                "src/main/java/org/apache/commons/net/telnet/TelnetClient.java"
            ]
        },
        {
            "bug index": "47",
            "bug id": "NET-602",
            "hexsha": "a76bed1f8338e0bffb78b3b5a918aede47135520",
            "fix_hash": "6697e685dd8d3bb7a41c65a013276e79910203f5",
            "description": "When getting file entries from a Type: L8 system running on a Windows server the code cannot extract the timestamp of the file correctly (it returns null).\n\nThe entry format returned by the server is as follows:\n-rwxrwxrwx    1 user     group             2490 Sep    7 2016 file.txt\n\nThe reason for this appears to be a bug in the way the DefaultFTPFileEntryParserFactory constructs the CompositeFileEntryParser (createNTFTPEntryParser method), as when it passes the config object through to the NTFTPEntryParser first, the config passed through is updated with the Default timestamp format for Windows FTP servers \"MM-dd-yy hh:mma\", and then when the same config object is passed to the UnixFTPEntryParser it picks up this default and tries to use it instead of what it should be which is \"MMM d yyyy\".\n\nNot sure when this bug was introduced but it is at least present in 3.3 and 3.5.\n\nThe problem may also be present for the createOS400FTPEntryParser, though I have not confirmed this.\n\nPotential Solution:\nWhen passing the config through to the parsers for each part of the CompositeFileEntryParser they should be using a clone of the original to avoid this kind of cross-contamination between different parser types.",
            "commit number version hash": 1390,
            "commit number": 1374,
            "function that changed": [
                {
                    "function name": "FTPClientConfig",
                    "function params": [
                        "config"
                    ],
                    "file name": "FTPClientConfig.java",
                    "file old path": "src/main/java/org/apache/commons/net/ftp/FTPClientConfig.java",
                    "file new path": "src/main/java/org/apache/commons/net/ftp/FTPClientConfig.java",
                    "full name": "src.main.java.org.apache.commons.net.ftp.FTPClientConfig.FTPClientConfig"
                },
                {
                    "function name": "createOS400FTPEntryParser",
                    "function params": [
                        "config"
                    ],
                    "file name": "DefaultFTPFileEntryParserFactory.java",
                    "file old path": "src/main/java/org/apache/commons/net/ftp/parser/DefaultFTPFileEntryParserFactory.java",
                    "file new path": "src/main/java/org/apache/commons/net/ftp/parser/DefaultFTPFileEntryParserFactory.java",
                    "full name": "src.main.java.org.apache.commons.net.ftp.parser.DefaultFTPFileEntryParserFactory.createOS400FTPEntryParser"
                },
                {
                    "function name": "createNTFTPEntryParser",
                    "function params": [
                        "config"
                    ],
                    "file name": "DefaultFTPFileEntryParserFactory.java",
                    "file old path": "src/main/java/org/apache/commons/net/ftp/parser/DefaultFTPFileEntryParserFactory.java",
                    "file new path": "src/main/java/org/apache/commons/net/ftp/parser/DefaultFTPFileEntryParserFactory.java",
                    "full name": "src.main.java.org.apache.commons.net.ftp.parser.DefaultFTPFileEntryParserFactory.createNTFTPEntryParser"
                }
            ],
            "files that changed": [
                "src/main/java/org/apache/commons/net/ftp/FTPClientConfig.java",
                "src/main/java/org/apache/commons/net/ftp/parser/DefaultFTPFileEntryParserFactory.java"
            ]
        },
        {
            "bug index": "48",
            "bug id": "NET-588",
            "hexsha": "a76bed1f8338e0bffb78b3b5a918aede47135520",
            "fix_hash": "ddaa71735ac8c1e7875d4b7bfe30c92921389982",
            "description": "We have a NAT firewall between two \"site local\" 10.x networks. The effect is that the FTP library tries to make data connections to the wrong host because the passive NAT workaround doesn't operate if the FTP connection is made to a \"site local\" private address and the host returned in the PASV reply is also \"site local\".\n\nI see that Damon Dan references pretty much the exact issue within bug NET-363 when the workaround was originally introduced.\n\nUsers with \"site local\" networks would be quite at liberty to subnet within the network, I guess, to suit their administrative needs, so this seems like a valid issue.\n\nOptions I can see:\n1) Include a way of forcing the workaround in place\n2) Remove the selectivity around rewriting the host only if the PASV reply is \"site local\" and original host isn't... Issue here is around a server that has multiple endpoints for data connections?\n3) Allow the user to specify their own data host via API\n4) Check for whether the PASV reply address is in a different subnet to the original host we connected to and apply the workaround if so\n\nI haven't yet identified a workaround within the current code!",
            "commit number version hash": 1390,
            "commit number": 1372,
            "function that changed": [
                {
                    "function name": "NatServerResolverImpl",
                    "function params": [
                        "hostname"
                    ],
                    "file name": "FTPClient.java",
                    "file old path": "src/main/java/org/apache/commons/net/ftp/FTPClient.java",
                    "file new path": "src/main/java/org/apache/commons/net/ftp/FTPClient.java",
                    "full name": "src.main.java.org.apache.commons.net.ftp.FTPClient.NatServerResolverImpl"
                },
                {
                    "function name": "_parsePassiveModeReply",
                    "function params": [
                        "reply"
                    ],
                    "file name": "FTPClient.java",
                    "file old path": "src/main/java/org/apache/commons/net/ftp/FTPClient.java",
                    "file new path": "src/main/java/org/apache/commons/net/ftp/FTPClient.java",
                    "full name": "src.main.java.org.apache.commons.net.ftp.FTPClient._parsePassiveModeReply"
                },
                {
                    "function name": "NatServerResolverImpl",
                    "function params": [
                        "client"
                    ],
                    "file name": "FTPClient.java",
                    "file old path": "src/main/java/org/apache/commons/net/ftp/FTPClient.java",
                    "file new path": "src/main/java/org/apache/commons/net/ftp/FTPClient.java",
                    "full name": "src.main.java.org.apache.commons.net.ftp.FTPClient.NatServerResolverImpl"
                },
                {
                    "function name": "setPassiveNatWorkaround",
                    "function params": [
                        "enabled"
                    ],
                    "file name": "FTPClient.java",
                    "file old path": "src/main/java/org/apache/commons/net/ftp/FTPClient.java",
                    "file new path": "src/main/java/org/apache/commons/net/ftp/FTPClient.java",
                    "full name": "src.main.java.org.apache.commons.net.ftp.FTPClient.setPassiveNatWorkaround"
                },
                {
                    "function name": "setPassiveNatWorkaroundStrategy",
                    "function params": [
                        "resolver"
                    ],
                    "file name": "FTPClient.java",
                    "file old path": "src/main/java/org/apache/commons/net/ftp/FTPClient.java",
                    "file new path": "src/main/java/org/apache/commons/net/ftp/FTPClient.java",
                    "full name": "src.main.java.org.apache.commons.net.ftp.FTPClient.setPassiveNatWorkaroundStrategy"
                },
                {
                    "function name": "testParsePassiveModeReplyForLocalAddressWithSimpleNatWorkaroundStrategy",
                    "function params": [],
                    "file name": "FTPClientTest.java",
                    "file old path": "src/test/java/org/apache/commons/net/ftp/FTPClientTest.java",
                    "file new path": "src/test/java/org/apache/commons/net/ftp/FTPClientTest.java",
                    "full name": "src.test.java.org.apache.commons.net.ftp.FTPClientTest.testParsePassiveModeReplyForLocalAddressWithSimpleNatWorkaroundStrategy"
                },
                {
                    "function name": "PassiveNatWorkAroundLocalClient",
                    "function params": [
                        "passiveModeServerIP"
                    ],
                    "file name": "FTPClientTest.java",
                    "file old path": "src/test/java/org/apache/commons/net/ftp/FTPClientTest.java",
                    "file new path": "src/test/java/org/apache/commons/net/ftp/FTPClientTest.java",
                    "full name": "src.test.java.org.apache.commons.net.ftp.FTPClientTest.PassiveNatWorkAroundLocalClient"
                },
                {
                    "function name": "testParsePassiveModeReplyForNonLocalAddressWithNatWorkaroundDisabled",
                    "function params": [],
                    "file name": "FTPClientTest.java",
                    "file old path": "src/test/java/org/apache/commons/net/ftp/FTPClientTest.java",
                    "file new path": "src/test/java/org/apache/commons/net/ftp/FTPClientTest.java",
                    "full name": "src.test.java.org.apache.commons.net.ftp.FTPClientTest.testParsePassiveModeReplyForNonLocalAddressWithNatWorkaroundDisabled"
                },
                {
                    "function name": "testParsePassiveModeReplyForLocalAddressWithNatWorkaround",
                    "function params": [],
                    "file name": "FTPClientTest.java",
                    "file old path": "src/test/java/org/apache/commons/net/ftp/FTPClientTest.java",
                    "file new path": "src/test/java/org/apache/commons/net/ftp/FTPClientTest.java",
                    "full name": "src.test.java.org.apache.commons.net.ftp.FTPClientTest.testParsePassiveModeReplyForLocalAddressWithNatWorkaround"
                },
                {
                    "function name": "testParsePassiveModeReplyForNonLocalAddressWithoutNatWorkaroundStrategy",
                    "function params": [],
                    "file name": "FTPClientTest.java",
                    "file old path": "src/test/java/org/apache/commons/net/ftp/FTPClientTest.java",
                    "file new path": "src/test/java/org/apache/commons/net/ftp/FTPClientTest.java",
                    "full name": "src.test.java.org.apache.commons.net.ftp.FTPClientTest.testParsePassiveModeReplyForNonLocalAddressWithoutNatWorkaroundStrategy"
                },
                {
                    "function name": "PassiveNatWorkAroundLocalClient",
                    "function params": [],
                    "file name": "FTPClientTest.java",
                    "file old path": "src/test/java/org/apache/commons/net/ftp/FTPClientTest.java",
                    "file new path": "src/test/java/org/apache/commons/net/ftp/FTPClientTest.java",
                    "full name": "src.test.java.org.apache.commons.net.ftp.FTPClientTest.PassiveNatWorkAroundLocalClient"
                },
                {
                    "function name": "testParsePassiveModeReplyForLocalAddressWithNatWorkaroundDisabled",
                    "function params": [],
                    "file name": "FTPClientTest.java",
                    "file old path": "src/test/java/org/apache/commons/net/ftp/FTPClientTest.java",
                    "file new path": "src/test/java/org/apache/commons/net/ftp/FTPClientTest.java",
                    "full name": "src.test.java.org.apache.commons.net.ftp.FTPClientTest.testParsePassiveModeReplyForLocalAddressWithNatWorkaroundDisabled"
                },
                {
                    "function name": "testParsePassiveModeReplyForLocalAddressWithoutNatWorkaroundStrategy",
                    "function params": [],
                    "file name": "FTPClientTest.java",
                    "file old path": "src/test/java/org/apache/commons/net/ftp/FTPClientTest.java",
                    "file new path": "src/test/java/org/apache/commons/net/ftp/FTPClientTest.java",
                    "full name": "src.test.java.org.apache.commons.net.ftp.FTPClientTest.testParsePassiveModeReplyForLocalAddressWithoutNatWorkaroundStrategy"
                },
                {
                    "function name": "testParsePassiveModeReplyForNonLocalAddressWithNatWorkaround",
                    "function params": [],
                    "file name": "FTPClientTest.java",
                    "file old path": "src/test/java/org/apache/commons/net/ftp/FTPClientTest.java",
                    "file new path": "src/test/java/org/apache/commons/net/ftp/FTPClientTest.java",
                    "full name": "src.test.java.org.apache.commons.net.ftp.FTPClientTest.testParsePassiveModeReplyForNonLocalAddressWithNatWorkaround"
                }
            ],
            "files that changed": [
                "src/main/java/org/apache/commons/net/ftp/FTPClient.java",
                "src/test/java/org/apache/commons/net/ftp/FTPClientTest.java"
            ]
        },
        {
            "bug index": "49",
            "bug id": "NET-610",
            "hexsha": "a76bed1f8338e0bffb78b3b5a918aede47135520",
            "fix_hash": "d5c724671fd72d49ec416e7fd086220ef7c8f4e2",
            "description": "By RFC 3659 server must start fact with space character. But some inaccurate realisations reply without starting space.\nBut org.apache.commons.net.ftp.FTPClient.mlistFile() skips leading character even it is not a space:\n    public FTPFile mlistFile(String pathname) throws IOException\n    {\n        boolean success = FTPReply.isPositiveCompletion(sendCommand(FTPCmd.MLST, pathname));\n        if (success){\n            String entry = getReplyStrings()[1].substring(1); // skip leading space for parser\n            return MLSxEntryParser.parseEntry(entry);\n        } else {\n            return null;\n        }\n    }\n\n\nI think it is wrong. The method should throw exception, if first character is not a space. Or does not remove starting char (and should be some option responsible for that behaviour) if it is not a space.\n\nmy workaround in overriden method:\n    public FTPFile mlistFile(String pathname) throws IOException {\n        final boolean success = FTPReply.isPositiveCompletion(sendCommand(FTPCmd.MLST, pathname));\n        if (success) {\n            final String reply = getReplyStrings()[1];\n            final String entry = reply.charAt(0) == ' ' ? reply.substring(1) : reply;\n            return MLSxEntryParser.parseEntry(entry);\n        } else {\n            return null;\n        }\n    }\n",
            "commit number version hash": 1390,
            "commit number": 1371,
            "function that changed": [
                {
                    "function name": "mlistFile",
                    "function params": [
                        "pathname"
                    ],
                    "file name": "FTPClient.java",
                    "file old path": "src/main/java/org/apache/commons/net/ftp/FTPClient.java",
                    "file new path": "src/main/java/org/apache/commons/net/ftp/FTPClient.java",
                    "full name": "src.main.java.org.apache.commons.net.ftp.FTPClient.mlistFile"
                }
            ],
            "files that changed": [
                "src/main/java/org/apache/commons/net/ftp/FTPClient.java"
            ]
        },
        {
            "bug index": "50",
            "bug id": "NET-611",
            "hexsha": "a76bed1f8338e0bffb78b3b5a918aede47135520",
            "fix_hash": "c038c0c1c317861366eae15f3b3dc70d9e927992",
            "description": "The reply to a command consists of 3 digits, followed by space, followed by text.\nFor a multi-line reply, the space is replaced with a hypen (minus) on the first line.\n\nThe code currently handles the hyphen correctly, but it does not insist that the reply code is followed by a space.\n\nIt ought to check this and throw a MalformedServerReplyException if the reply does not have the correct syntax.",
            "commit number version hash": 1390,
            "commit number": 1370,
            "function that changed": [
                {
                    "function name": "setStrictReplyParsing",
                    "function params": [
                        "strictReplyParsing"
                    ],
                    "file name": "FTP.java",
                    "file old path": "src/main/java/org/apache/commons/net/ftp/FTP.java",
                    "file new path": "src/main/java/org/apache/commons/net/ftp/FTP.java",
                    "full name": "src.main.java.org.apache.commons.net.ftp.FTP.setStrictReplyParsing"
                },
                {
                    "function name": "isStrictReplyParsing",
                    "function params": [],
                    "file name": "FTP.java",
                    "file old path": "src/main/java/org/apache/commons/net/ftp/FTP.java",
                    "file new path": "src/main/java/org/apache/commons/net/ftp/FTP.java",
                    "full name": "src.main.java.org.apache.commons.net.ftp.FTP.isStrictReplyParsing"
                },
                {
                    "function name": "__getReply",
                    "function params": [
                        "reportReply"
                    ],
                    "file name": "FTP.java",
                    "file old path": "src/main/java/org/apache/commons/net/ftp/FTP.java",
                    "file new path": "src/main/java/org/apache/commons/net/ftp/FTP.java",
                    "full name": "src.main.java.org.apache.commons.net.ftp.FTP.__getReply"
                }
            ],
            "files that changed": [
                "src/main/java/org/apache/commons/net/ftp/FTP.java"
            ]
        },
        {
            "bug index": "51",
            "bug id": "NET-609",
            "hexsha": "a76bed1f8338e0bffb78b3b5a918aede47135520",
            "fix_hash": "cd299336abb873f53664063e0a977650f22fe8f3",
            "description": "I have an issue when calling listFiles() method on a FTP server.\nThe FTPFileEntry parser fail to parse the entry by adding a non existing leading space in the filename.\n\nIn the FTP library, a boolean field is existing to remove the leading spaces and needs to be set to true (in my case).\n\nThe issue is in the file DefaultUnixFTPFileEntryParserFactory.java (L124-L128) :\n{code:java}\nif (parser == null) { // Now try for aliases\n            String ukey = key.toUpperCase(java.util.Locale.ENGLISH);\n            if (ukey.indexOf(FTPClientConfig.SYST_UNIX) >= 0)\n            { // FTPClientConfig.SYST_UNIX = \"UNIX\"\n                parser = new UnixFTPEntryParser(config, false);\n            }\n            else if  (ukey.indexOf(FTPClientConfig.SYST_UNIX_TRIM_LEADING) >= 0)\n            { // FTPClientConfig.SYST_UNIX_TRIM_LEADING = \"UNIX_LTRIM\"\n                parser = new UnixFTPEntryParser(config, true);\n            }\n            // ...\n}\n{code}\n\nI think the issue is that the else if condition is unreachable because if second condition is true, the first condition is matching too :\nFTPClientConfig.SYST_UNIX = \"UNIX\"\nFTPClientConfig.SYST_UNIX_TRIM_LEADING = \"UNIX_LTRIM\"\n\nI think the issue is related to the commit on NET-566 (commit: http://svn.apache.org/viewvc?view=revision&revision=1652696)",
            "commit number version hash": 1390,
            "commit number": 1368,
            "function that changed": [
                {
                    "function name": "createFileEntryParser",
                    "function params": [
                        "key",
                        "config"
                    ],
                    "file name": "DefaultFTPFileEntryParserFactory.java",
                    "file old path": "src/main/java/org/apache/commons/net/ftp/parser/DefaultFTPFileEntryParserFactory.java",
                    "file new path": "src/main/java/org/apache/commons/net/ftp/parser/DefaultFTPFileEntryParserFactory.java",
                    "full name": "src.main.java.org.apache.commons.net.ftp.parser.DefaultFTPFileEntryParserFactory.createFileEntryParser"
                },
                {
                    "function name": "testDefaultParserFactory",
                    "function params": [],
                    "file name": "DefaultFTPFileEntryParserFactoryTest.java",
                    "file old path": "src/test/java/org/apache/commons/net/ftp/parser/DefaultFTPFileEntryParserFactoryTest.java",
                    "file new path": "src/test/java/org/apache/commons/net/ftp/parser/DefaultFTPFileEntryParserFactoryTest.java",
                    "full name": "src.test.java.org.apache.commons.net.ftp.parser.DefaultFTPFileEntryParserFactoryTest.testDefaultParserFactory"
                }
            ],
            "files that changed": [
                "src/main/java/org/apache/commons/net/ftp/parser/DefaultFTPFileEntryParserFactory.java",
                "src/main/java/org/apache/commons/net/ftp/parser/UnixFTPEntryParser.java",
                "src/test/java/org/apache/commons/net/ftp/parser/DefaultFTPFileEntryParserFactoryTest.java"
            ]
        },
        {
            "bug index": "52",
            "bug id": "NET-597",
            "hexsha": "328c4046d88629d1d7d484e88cb4293541bc1141",
            "fix_hash": "bec3eaa55584966aeab7ad00cb16b07656b82553",
            "description": "Commons Net lists no files for Solaris 10 FTPd (or WU-FTPD) when the server language is Japanese.\n\nHere is the result of the sample client.\n{panel}\njava -jar commons-net-examples-3.5.jar FTPClientExample -l 192.168.2.160 root password\n220 unknown FTP server ready.\nConnected to 192.168.2.160 on 21\nUSER *******\n331 Password required for root.\nPASS *******\n230 User root logged in.\nSYST\n215 UNIX Type: L8 Version: SUNOS\nRemote system is UNIX Type: L8 Version: SUNOS\nTYPE A\n200 Type set to A.\nPASV\n227 Entering Passive Mode (192,168,2,160,235,174)\nLIST\n150 Opening ASCII mode data connection for /bin/ls.\n226 Transfer complete.\nNOOP\n200 NOOP command successful.\nQUIT\n221-You have transferred 0 bytes in 0 files.\n221-Total traffic for this session was 3426 bytes in 1 transfers.\n221-Thank you for using the FTP service on unknown.\n221 Goodbye.\n{panel}\n\nI identified the cause in the source code. I'm attaching a patch later.\n\nOn Japanese Solaris 10, the result of \"ls -l\" is like below;\n{panel}\ndrwxrwxrwt  10 root     sys          875  7\u6708  7\u65e5  14:18 tmp\ndrwxr-xr-x  40 root     sys         1024  6\u6708 13\u65e5 2014\u5e74 usr\ndrwxr-xr-x  47 root     sys         1024  6\u6708 13\u65e5 2014\u5e74 var\ndr-xr-xr-x   6 root     root         512  2\u6708 25\u65e5  15:11 vol\n{panel}\nAs you can see, the timestamp has the postfixes of \"month\", \"date\", and \"year\" in Japanese.\nThe current REGEX of UnixFTPEntryParser doesn't work for it because of the Japanese postfixes.",
            "commit number version hash": 1350,
            "commit number": 1359,
            "function that changed": [
                {
                    "function name": "parseFTPEntry",
                    "function params": [
                        "entry"
                    ],
                    "file name": "UnixFTPEntryParser.java",
                    "file old path": "src/main/java/org/apache/commons/net/ftp/parser/UnixFTPEntryParser.java",
                    "file new path": "src/main/java/org/apache/commons/net/ftp/parser/UnixFTPEntryParser.java",
                    "full name": "src.main.java.org.apache.commons.net.ftp.parser.UnixFTPEntryParser.parseFTPEntry"
                },
                {
                    "function name": "getDefaultConfiguration",
                    "function params": [],
                    "file name": "UnixFTPEntryParser.java",
                    "file old path": "src/main/java/org/apache/commons/net/ftp/parser/UnixFTPEntryParser.java",
                    "file new path": "src/main/java/org/apache/commons/net/ftp/parser/UnixFTPEntryParser.java",
                    "full name": "src.main.java.org.apache.commons.net.ftp.parser.UnixFTPEntryParser.getDefaultConfiguration"
                },
                {
                    "function name": "testParseFieldsOnFileJapaneseTime",
                    "function params": [],
                    "file name": "UnixFTPEntryParserTest.java",
                    "file old path": "src/test/java/org/apache/commons/net/ftp/parser/UnixFTPEntryParserTest.java",
                    "file new path": "src/test/java/org/apache/commons/net/ftp/parser/UnixFTPEntryParserTest.java",
                    "full name": "src.test.java.org.apache.commons.net.ftp.parser.UnixFTPEntryParserTest.testParseFieldsOnFileJapaneseTime"
                },
                {
                    "function name": "testParseFieldsOnFileJapaneseYear",
                    "function params": [],
                    "file name": "UnixFTPEntryParserTest.java",
                    "file old path": "src/test/java/org/apache/commons/net/ftp/parser/UnixFTPEntryParserTest.java",
                    "file new path": "src/test/java/org/apache/commons/net/ftp/parser/UnixFTPEntryParserTest.java",
                    "full name": "src.test.java.org.apache.commons.net.ftp.parser.UnixFTPEntryParserTest.testParseFieldsOnFileJapaneseYear"
                }
            ],
            "files that changed": [
                "src/main/java/org/apache/commons/net/ftp/parser/UnixFTPEntryParser.java",
                "src/test/java/org/apache/commons/net/ftp/parser/UnixFTPEntryParserTest.java"
            ]
        },
        {
            "bug index": "53",
            "bug id": "NET-593",
            "hexsha": "2586f75769dc9c82de31c47412f3b41076a9c55b",
            "fix_hash": "19af5379fa93633e2c7bc0326fc5f3b28aaf192f",
            "description": "When TLS is used (not StartTLS) on port 465, the HostnameVerifier is checking for the ip address, not the hostname. This results in a failure on each connection.",
            "commit number version hash": 1332,
            "commit number": 1353,
            "function that changed": [
                {
                    "function name": "connect",
                    "function params": [
                        "hostname",
                        "port",
                        "localAddr",
                        "localPort"
                    ],
                    "file name": "SocketClient.java",
                    "file old path": "src/main/java/org/apache/commons/net/SocketClient.java",
                    "file new path": "src/main/java/org/apache/commons/net/SocketClient.java",
                    "full name": "src.main.java.org.apache.commons.net.SocketClient.connect"
                },
                {
                    "function name": "_connect",
                    "function params": [
                        "host",
                        "port",
                        "localAddr",
                        "localPort"
                    ],
                    "file name": "SocketClient.java",
                    "file old path": "src/main/java/org/apache/commons/net/SocketClient.java",
                    "file new path": "src/main/java/org/apache/commons/net/SocketClient.java",
                    "full name": "src.main.java.org.apache.commons.net.SocketClient._connect"
                },
                {
                    "function name": "connect",
                    "function params": [
                        "host",
                        "port"
                    ],
                    "file name": "SocketClient.java",
                    "file old path": "src/main/java/org/apache/commons/net/SocketClient.java",
                    "file new path": "src/main/java/org/apache/commons/net/SocketClient.java",
                    "full name": "src.main.java.org.apache.commons.net.SocketClient.connect"
                },
                {
                    "function name": "connect",
                    "function params": [
                        "hostname",
                        "port"
                    ],
                    "file name": "SocketClient.java",
                    "file old path": "src/main/java/org/apache/commons/net/SocketClient.java",
                    "file new path": "src/main/java/org/apache/commons/net/SocketClient.java",
                    "full name": "src.main.java.org.apache.commons.net.SocketClient.connect"
                },
                {
                    "function name": "connect",
                    "function params": [
                        "host",
                        "port",
                        "localAddr",
                        "localPort"
                    ],
                    "file name": "SocketClient.java",
                    "file old path": "src/main/java/org/apache/commons/net/SocketClient.java",
                    "file new path": "src/main/java/org/apache/commons/net/SocketClient.java",
                    "full name": "src.main.java.org.apache.commons.net.SocketClient.connect"
                },
                {
                    "function name": "connect",
                    "function params": [
                        "hostname"
                    ],
                    "file name": "SocketClient.java",
                    "file old path": "src/main/java/org/apache/commons/net/SocketClient.java",
                    "file new path": "src/main/java/org/apache/commons/net/SocketClient.java",
                    "full name": "src.main.java.org.apache.commons.net.SocketClient.connect"
                }
            ],
            "files that changed": [
                "src/main/java/org/apache/commons/net/SocketClient.java"
            ]
        },
        {
            "bug index": "54",
            "bug id": "NET-594",
            "hexsha": "a76bed1f8338e0bffb78b3b5a918aede47135520",
            "fix_hash": "acf58cffc617b2328c70acaf22026cfaadfcb592",
            "description": "As part of fixing an existing bug Oracle introduced a new bug into FilterOutputStream.close:\n\nhttp://bugs.java.com/bugdatabase/view_bug.do?bug_id=8054565\n\nWhile the bug is marked as fixed the fix will not be available until Java 9 from what I can tell and is not in the latest release as of writing (1.8.91)\n\nThis bug can also be reproduced through remote socket closure.\n\nDue to this bug the TelnetClient when calling disconnect() throws an unhandled exception and is unable to close the connection, if the socket was remotely closed.\n\nStack Trace:\n\njava.net.SocketException: Socket closed\n        at java.net.SocketOutputStream.socketWrite(SocketOutputStream.java:121)\n        at java.net.SocketOutputStream.write(SocketOutputStream.java:147)\n        at java.io.BufferedOutputStream.flushBuffer(BufferedOutputStream.java:82)\n        at java.io.BufferedOutputStream.flush(BufferedOutputStream.java:140)\n        at java.io.FilterOutputStream.close(FilterOutputStream.java:159)\n        at org.apache.commons.net.telnet.TelnetClient._closeOutputStream(TelnetClient.java:86)\n        at org.apache.commons.net.telnet.TelnetOutputStream.close(TelnetOutputStream.java:155)\n        at org.apache.commons.net.telnet.TelnetClient.disconnect(TelnetClient.java:127)\n",
            "commit number version hash": 1390,
            "commit number": 1352,
            "function that changed": [
                {
                    "function name": "disconnect",
                    "function params": [],
                    "file name": "TelnetClient.java",
                    "file old path": "src/main/java/org/apache/commons/net/telnet/TelnetClient.java",
                    "file new path": "src/main/java/org/apache/commons/net/telnet/TelnetClient.java",
                    "full name": "src.main.java.org.apache.commons.net.telnet.TelnetClient.disconnect"
                }
            ],
            "files that changed": [
                "src/main/java/org/apache/commons/net/telnet/TelnetClient.java"
            ]
        },
        {
            "bug index": "55",
            "bug id": "NET-592",
            "hexsha": "a76bed1f8338e0bffb78b3b5a918aede47135520",
            "fix_hash": "96e16497119db404a4e59709e022d4f9564d23e6",
            "description": "The plainSocket field in the FTPSClient is never closed. Over time, this will lead to an IOException with \"too many open files\".\n\nTo recreate this, try the following in a loop:\n\n- create an FTPSClient\n- call the login\n- upload a file\n- download the file\n- call logout\n- disconnect within a finally block\n\nI would expect the disconnect call would release all of the file descriptors but if you set a breakpoint you'll notice that this socket remains open.\n\nIn my test driver, this eventually fails after 8,000 iterations until it hits the max file descriptors for the test process. \n\nIf I use some reflection code and force FTPSClient.plainSocket to be accessible so I can close it, then everything works. ",
            "commit number version hash": 1390,
            "commit number": 1351,
            "function that changed": [
                {
                    "function name": "disconnect",
                    "function params": [],
                    "file name": "FTPSClient.java",
                    "file old path": "src/main/java/org/apache/commons/net/ftp/FTPSClient.java",
                    "file new path": "src/main/java/org/apache/commons/net/ftp/FTPSClient.java",
                    "full name": "src.main.java.org.apache.commons.net.ftp.FTPSClient.disconnect"
                }
            ],
            "files that changed": [
                "src/main/java/org/apache/commons/net/ftp/FTPSClient.java"
            ]
        },
        {
            "bug index": "56",
            "bug id": "NET-583",
            "hexsha": "328c4046d88629d1d7d484e88cb4293541bc1141",
            "fix_hash": "02ae1898a1bc9eb7fe541072b6bd1ac0dbf6a915",
            "description": "If the FTPClient's automatic server encoding detection is enabled, a FEAT command is issued in method _connectAction_() [indirectly via hasFeature(String)]. After that, the _replyCode and _replyLines fields are stored back to their previous values in _connectAction_(), but the _newReplyString flag isn't set to true. Because of that, you will then get back the reply to the FEAT command from getReplyString(), instead of the server's welcome message. Furthermore, you may get back a reply code that doesn't match that reply string. We have encountered a case when we got back reply code 220 after FTPClient.connect(), but reply string was \"530 Not logged in.\".\n\nThis error can easily be fixed by adding the following line to FTPClient.java around line 944:\n_newReplyString = true;\n\nPatch:\n===================================================================\n--- src/org/apache/commons/net/ftp/FTPClient.java\n+++ src/org/apache/commons/net/ftp/FTPClient.java\t(working copy)\n@@ -941,6 +941,7 @@\n            _replyLines.clear();\n            _replyLines.addAll(oldReplyLines);\n            _replyCode = oldReplyCode;\n+           _newReplyString = true;\n        }\n    }",
            "commit number version hash": 1350,
            "commit number": 1341,
            "function that changed": [
                {
                    "function name": "_connectAction_",
                    "function params": [
                        "socketIsReader"
                    ],
                    "file name": "FTPClient.java",
                    "file old path": "src/main/java/org/apache/commons/net/ftp/FTPClient.java",
                    "file new path": "src/main/java/org/apache/commons/net/ftp/FTPClient.java",
                    "full name": "src.main.java.org.apache.commons.net.ftp.FTPClient._connectAction_"
                }
            ],
            "files that changed": [
                "src/main/java/org/apache/commons/net/ftp/FTPClient.java"
            ]
        },
        {
            "bug index": "59",
            "bug id": "NET-581",
            "hexsha": "2586f75769dc9c82de31c47412f3b41076a9c55b",
            "fix_hash": "e8d76ef9c72325b773b9141a8566ce1147c1ebc6",
            "description": "According to RFC 5322 [1] (previously 2822, 822) the message headers MUST include both the From: and Date: (orig-date) fields.\n\nHowever this is not provided by SimpleSMTPHeader#toString()\n\nThe code should be amended to generate this if the user has not supplied a Date: header.\n\n[1] https://tools.ietf.org/html/rfc5322#section-3.6",
            "commit number version hash": 1332,
            "commit number": 1327,
            "function that changed": [
                {
                    "function name": "toString",
                    "function params": [],
                    "file name": "SimpleSMTPHeader.java",
                    "file old path": "src/main/java/org/apache/commons/net/smtp/SimpleSMTPHeader.java",
                    "file new path": "src/main/java/org/apache/commons/net/smtp/SimpleSMTPHeader.java",
                    "full name": "src.main.java.org.apache.commons.net.smtp.SimpleSMTPHeader.toString"
                },
                {
                    "function name": "addHeaderField",
                    "function params": [
                        "headerField",
                        "value"
                    ],
                    "file name": "SimpleSMTPHeader.java",
                    "file old path": "src/main/java/org/apache/commons/net/smtp/SimpleSMTPHeader.java",
                    "file new path": "src/main/java/org/apache/commons/net/smtp/SimpleSMTPHeader.java",
                    "full name": "src.main.java.org.apache.commons.net.smtp.SimpleSMTPHeader.addHeaderField"
                },
                {
                    "function name": "checkDate",
                    "function params": [
                        "msg"
                    ],
                    "file name": "SimpleSMTPHeaderTestCase.java",
                    "file old path": "src/test/java/org/apache/commons/net/smtp/SimpleSMTPHeaderTestCase.java",
                    "file new path": "src/test/java/org/apache/commons/net/smtp/SimpleSMTPHeaderTestCase.java",
                    "full name": "src.test.java.org.apache.commons.net.smtp.SimpleSMTPHeaderTestCase.checkDate"
                },
                {
                    "function name": "setUp",
                    "function params": [],
                    "file name": "SimpleSMTPHeaderTestCase.java",
                    "file old path": "src/test/java/org/apache/commons/net/smtp/SimpleSMTPHeaderTestCase.java",
                    "file new path": "src/test/java/org/apache/commons/net/smtp/SimpleSMTPHeaderTestCase.java",
                    "full name": "src.test.java.org.apache.commons.net.smtp.SimpleSMTPHeaderTestCase.setUp"
                },
                {
                    "function name": "testToStringNoSubject",
                    "function params": [],
                    "file name": "SimpleSMTPHeaderTestCase.java",
                    "file old path": "src/test/java/org/apache/commons/net/smtp/SimpleSMTPHeaderTestCase.java",
                    "file new path": "src/test/java/org/apache/commons/net/smtp/SimpleSMTPHeaderTestCase.java",
                    "full name": "src.test.java.org.apache.commons.net.smtp.SimpleSMTPHeaderTestCase.testToStringNoSubject"
                },
                {
                    "function name": "testToStringNoTo",
                    "function params": [],
                    "file name": "SimpleSMTPHeaderTestCase.java",
                    "file old path": "src/test/java/org/apache/commons/net/smtp/SimpleSMTPHeaderTestCase.java",
                    "file new path": "src/test/java/org/apache/commons/net/smtp/SimpleSMTPHeaderTestCase.java",
                    "full name": "src.test.java.org.apache.commons.net.smtp.SimpleSMTPHeaderTestCase.testToStringNoTo"
                },
                {
                    "function name": "testToStringAddHeaderDate",
                    "function params": [],
                    "file name": "SimpleSMTPHeaderTestCase.java",
                    "file old path": "src/test/java/org/apache/commons/net/smtp/SimpleSMTPHeaderTestCase.java",
                    "file new path": "src/test/java/org/apache/commons/net/smtp/SimpleSMTPHeaderTestCase.java",
                    "full name": "src.test.java.org.apache.commons.net.smtp.SimpleSMTPHeaderTestCase.testToStringAddHeaderDate"
                },
                {
                    "function name": "testToString",
                    "function params": [],
                    "file name": "SimpleSMTPHeaderTestCase.java",
                    "file old path": "src/test/java/org/apache/commons/net/smtp/SimpleSMTPHeaderTestCase.java",
                    "file new path": "src/test/java/org/apache/commons/net/smtp/SimpleSMTPHeaderTestCase.java",
                    "full name": "src.test.java.org.apache.commons.net.smtp.SimpleSMTPHeaderTestCase.testToString"
                },
                {
                    "function name": "testToStringAddHeader",
                    "function params": [],
                    "file name": "SimpleSMTPHeaderTestCase.java",
                    "file old path": "src/test/java/org/apache/commons/net/smtp/SimpleSMTPHeaderTestCase.java",
                    "file new path": "src/test/java/org/apache/commons/net/smtp/SimpleSMTPHeaderTestCase.java",
                    "full name": "src.test.java.org.apache.commons.net.smtp.SimpleSMTPHeaderTestCase.testToStringAddHeader"
                }
            ],
            "files that changed": [
                "src/main/java/org/apache/commons/net/smtp/SimpleSMTPHeader.java",
                "src/test/java/org/apache/commons/net/smtp/SimpleSMTPHeaderTestCase.java"
            ]
        },
        {
            "bug index": "60",
            "bug id": "NET-582",
            "hexsha": "2586f75769dc9c82de31c47412f3b41076a9c55b",
            "fix_hash": "a19fae7262f9212ada7acde170ded85a12720705",
            "description": "https://tools.ietf.org/html/rfc5322#section-3.6 states that the To: header field is optional. Howver the class does not allow for this.",
            "commit number version hash": 1332,
            "commit number": 1325,
            "function that changed": [
                {
                    "function name": "setUp",
                    "function params": [],
                    "file name": "SimpleSMTPHeaderTestCase.java",
                    "file old path": null,
                    "file new path": "src/test/java/org/apache/commons/net/smtp/SimpleSMTPHeaderTestCase.java",
                    "full name": "src.test.java.org.apache.commons.net.smtp.SimpleSMTPHeaderTestCase.setUp"
                },
                {
                    "function name": "testToStringNoSubject",
                    "function params": [],
                    "file name": "SimpleSMTPHeaderTestCase.java",
                    "file old path": null,
                    "file new path": "src/test/java/org/apache/commons/net/smtp/SimpleSMTPHeaderTestCase.java",
                    "full name": "src.test.java.org.apache.commons.net.smtp.SimpleSMTPHeaderTestCase.testToStringNoSubject"
                },
                {
                    "function name": "testToStringNoTo",
                    "function params": [],
                    "file name": "SimpleSMTPHeaderTestCase.java",
                    "file old path": null,
                    "file new path": "src/test/java/org/apache/commons/net/smtp/SimpleSMTPHeaderTestCase.java",
                    "full name": "src.test.java.org.apache.commons.net.smtp.SimpleSMTPHeaderTestCase.testToStringNoTo"
                },
                {
                    "function name": "testToString",
                    "function params": [],
                    "file name": "SimpleSMTPHeaderTestCase.java",
                    "file old path": null,
                    "file new path": "src/test/java/org/apache/commons/net/smtp/SimpleSMTPHeaderTestCase.java",
                    "full name": "src.test.java.org.apache.commons.net.smtp.SimpleSMTPHeaderTestCase.testToString"
                },
                {
                    "function name": "testToStringNoFrom",
                    "function params": [],
                    "file name": "SimpleSMTPHeaderTestCase.java",
                    "file old path": null,
                    "file new path": "src/test/java/org/apache/commons/net/smtp/SimpleSMTPHeaderTestCase.java",
                    "full name": "src.test.java.org.apache.commons.net.smtp.SimpleSMTPHeaderTestCase.testToStringNoFrom"
                }
            ],
            "files that changed": []
        },
        {
            "bug index": "61",
            "bug id": "NET-582",
            "hexsha": "2586f75769dc9c82de31c47412f3b41076a9c55b",
            "fix_hash": "83b950724307dc1551a7325961be1da89acbabf0",
            "description": "https://tools.ietf.org/html/rfc5322#section-3.6 states that the To: header field is optional. Howver the class does not allow for this.",
            "commit number version hash": 1332,
            "commit number": 1324,
            "function that changed": [
                {
                    "function name": "SimpleSMTPHeader",
                    "function params": [
                        "from",
                        "to",
                        "subject"
                    ],
                    "file name": "SimpleSMTPHeader.java",
                    "file old path": "src/main/java/org/apache/commons/net/smtp/SimpleSMTPHeader.java",
                    "file new path": "src/main/java/org/apache/commons/net/smtp/SimpleSMTPHeader.java",
                    "full name": "src.main.java.org.apache.commons.net.smtp.SimpleSMTPHeader.SimpleSMTPHeader"
                },
                {
                    "function name": "toString",
                    "function params": [],
                    "file name": "SimpleSMTPHeader.java",
                    "file old path": "src/main/java/org/apache/commons/net/smtp/SimpleSMTPHeader.java",
                    "file new path": "src/main/java/org/apache/commons/net/smtp/SimpleSMTPHeader.java",
                    "full name": "src.main.java.org.apache.commons.net.smtp.SimpleSMTPHeader.toString"
                }
            ],
            "files that changed": [
                "src/main/java/org/apache/commons/net/smtp/SimpleSMTPHeader.java"
            ]
        },
        {
            "bug index": "62",
            "bug id": "NET-580",
            "hexsha": "2586f75769dc9c82de31c47412f3b41076a9c55b",
            "fix_hash": "0177f90032a1a68496ae1e566697c1608fc8cb95",
            "description": "When SMTPClient.sendSimpleMessage() is used to send a message to multiple recipients, it ignores a failure to add a recipient as long as there is at least one successful recipient. This undocumented behaviour is unusual given that the API does not indicate which recipients were successful.",
            "commit number version hash": 1332,
            "commit number": 1322,
            "function that changed": [],
            "files that changed": [
                "src/main/java/org/apache/commons/net/smtp/SMTPClient.java"
            ]
        },
        {
            "bug index": "63",
            "bug id": "NET-579",
            "hexsha": "2586f75769dc9c82de31c47412f3b41076a9c55b",
            "fix_hash": "65302de24316b21a3955265203c60cf663067743",
            "description": "Every subclass of SocketClient that does SSL/TLS will never verify the hostname of the server against the certificate. This means that any valid certificate for any CA in the default trust store will be accepted without error.\n\nSocketClient should be modified to store the hostname, and SMTPSClient/FTPSClient/IMAPSClient/POP3SClient should use it when negotiating SSL/TLS.\n\nJava 1.7 has support for verifying the hostname if SSLParameters.setEndpointIdentificationAlgorithm(\"HTTPS\") is used.",
            "commit number version hash": 1332,
            "commit number": 1316,
            "function that changed": [
                {
                    "function name": "connect",
                    "function params": [
                        "hostname",
                        "port",
                        "localAddr",
                        "localPort"
                    ],
                    "file name": "SocketClient.java",
                    "file old path": "src/main/java/org/apache/commons/net/SocketClient.java",
                    "file new path": "src/main/java/org/apache/commons/net/SocketClient.java",
                    "full name": "src.main.java.org.apache.commons.net.SocketClient.connect"
                },
                {
                    "function name": "connect",
                    "function params": [
                        "host",
                        "port"
                    ],
                    "file name": "SocketClient.java",
                    "file old path": "src/main/java/org/apache/commons/net/SocketClient.java",
                    "file new path": "src/main/java/org/apache/commons/net/SocketClient.java",
                    "full name": "src.main.java.org.apache.commons.net.SocketClient.connect"
                },
                {
                    "function name": "disconnect",
                    "function params": [],
                    "file name": "SocketClient.java",
                    "file old path": "src/main/java/org/apache/commons/net/SocketClient.java",
                    "file new path": "src/main/java/org/apache/commons/net/SocketClient.java",
                    "full name": "src.main.java.org.apache.commons.net.SocketClient.disconnect"
                },
                {
                    "function name": "connect",
                    "function params": [
                        "hostname",
                        "port"
                    ],
                    "file name": "SocketClient.java",
                    "file old path": "src/main/java/org/apache/commons/net/SocketClient.java",
                    "file new path": "src/main/java/org/apache/commons/net/SocketClient.java",
                    "full name": "src.main.java.org.apache.commons.net.SocketClient.connect"
                },
                {
                    "function name": "connect",
                    "function params": [
                        "host",
                        "port",
                        "localAddr",
                        "localPort"
                    ],
                    "file name": "SocketClient.java",
                    "file old path": "src/main/java/org/apache/commons/net/SocketClient.java",
                    "file new path": "src/main/java/org/apache/commons/net/SocketClient.java",
                    "full name": "src.main.java.org.apache.commons.net.SocketClient.connect"
                },
                {
                    "function name": "SocketClient",
                    "function params": [],
                    "file name": "SocketClient.java",
                    "file old path": "src/main/java/org/apache/commons/net/SocketClient.java",
                    "file new path": "src/main/java/org/apache/commons/net/SocketClient.java",
                    "full name": "src.main.java.org.apache.commons.net.SocketClient.SocketClient"
                },
                {
                    "function name": "connect",
                    "function params": [
                        "host"
                    ],
                    "file name": "SocketClient.java",
                    "file old path": "src/main/java/org/apache/commons/net/SocketClient.java",
                    "file new path": "src/main/java/org/apache/commons/net/SocketClient.java",
                    "full name": "src.main.java.org.apache.commons.net.SocketClient.connect"
                },
                {
                    "function name": "connect",
                    "function params": [
                        "hostname"
                    ],
                    "file name": "SocketClient.java",
                    "file old path": "src/main/java/org/apache/commons/net/SocketClient.java",
                    "file new path": "src/main/java/org/apache/commons/net/SocketClient.java",
                    "full name": "src.main.java.org.apache.commons.net.SocketClient.connect"
                },
                {
                    "function name": "setEndpointCheckingEnabled",
                    "function params": [
                        "enable"
                    ],
                    "file name": "FTPSClient.java",
                    "file old path": "src/main/java/org/apache/commons/net/ftp/FTPSClient.java",
                    "file new path": "src/main/java/org/apache/commons/net/ftp/FTPSClient.java",
                    "full name": "src.main.java.org.apache.commons.net.ftp.FTPSClient.setEndpointCheckingEnabled"
                },
                {
                    "function name": "sslNegotiation",
                    "function params": [],
                    "file name": "FTPSClient.java",
                    "file old path": "src/main/java/org/apache/commons/net/ftp/FTPSClient.java",
                    "file new path": "src/main/java/org/apache/commons/net/ftp/FTPSClient.java",
                    "full name": "src.main.java.org.apache.commons.net.ftp.FTPSClient.sslNegotiation"
                },
                {
                    "function name": "getHostnameVerifier",
                    "function params": [],
                    "file name": "FTPSClient.java",
                    "file old path": "src/main/java/org/apache/commons/net/ftp/FTPSClient.java",
                    "file new path": "src/main/java/org/apache/commons/net/ftp/FTPSClient.java",
                    "full name": "src.main.java.org.apache.commons.net.ftp.FTPSClient.getHostnameVerifier"
                },
                {
                    "function name": "isEndpointCheckingEnabled",
                    "function params": [],
                    "file name": "FTPSClient.java",
                    "file old path": "src/main/java/org/apache/commons/net/ftp/FTPSClient.java",
                    "file new path": "src/main/java/org/apache/commons/net/ftp/FTPSClient.java",
                    "full name": "src.main.java.org.apache.commons.net.ftp.FTPSClient.isEndpointCheckingEnabled"
                },
                {
                    "function name": "setHostnameVerifier",
                    "function params": [
                        "newHostnameVerifier"
                    ],
                    "file name": "FTPSClient.java",
                    "file old path": "src/main/java/org/apache/commons/net/ftp/FTPSClient.java",
                    "file new path": "src/main/java/org/apache/commons/net/ftp/FTPSClient.java",
                    "full name": "src.main.java.org.apache.commons.net.ftp.FTPSClient.setHostnameVerifier"
                },
                {
                    "function name": "isEndpointCheckingEnabled",
                    "function params": [],
                    "file name": "IMAPSClient.java",
                    "file old path": "src/main/java/org/apache/commons/net/imap/IMAPSClient.java",
                    "file new path": "src/main/java/org/apache/commons/net/imap/IMAPSClient.java",
                    "full name": "src.main.java.org.apache.commons.net.imap.IMAPSClient.isEndpointCheckingEnabled"
                },
                {
                    "function name": "performSSLNegotiation",
                    "function params": [],
                    "file name": "IMAPSClient.java",
                    "file old path": "src/main/java/org/apache/commons/net/imap/IMAPSClient.java",
                    "file new path": "src/main/java/org/apache/commons/net/imap/IMAPSClient.java",
                    "full name": "src.main.java.org.apache.commons.net.imap.IMAPSClient.performSSLNegotiation"
                },
                {
                    "function name": "setHostnameVerifier",
                    "function params": [
                        "newHostnameVerifier"
                    ],
                    "file name": "IMAPSClient.java",
                    "file old path": "src/main/java/org/apache/commons/net/imap/IMAPSClient.java",
                    "file new path": "src/main/java/org/apache/commons/net/imap/IMAPSClient.java",
                    "full name": "src.main.java.org.apache.commons.net.imap.IMAPSClient.setHostnameVerifier"
                },
                {
                    "function name": "setEndpointCheckingEnabled",
                    "function params": [
                        "enable"
                    ],
                    "file name": "IMAPSClient.java",
                    "file old path": "src/main/java/org/apache/commons/net/imap/IMAPSClient.java",
                    "file new path": "src/main/java/org/apache/commons/net/imap/IMAPSClient.java",
                    "full name": "src.main.java.org.apache.commons.net.imap.IMAPSClient.setEndpointCheckingEnabled"
                },
                {
                    "function name": "getHostnameVerifier",
                    "function params": [],
                    "file name": "IMAPSClient.java",
                    "file old path": "src/main/java/org/apache/commons/net/imap/IMAPSClient.java",
                    "file new path": "src/main/java/org/apache/commons/net/imap/IMAPSClient.java",
                    "full name": "src.main.java.org.apache.commons.net.imap.IMAPSClient.getHostnameVerifier"
                },
                {
                    "function name": "performSSLNegotiation",
                    "function params": [],
                    "file name": "POP3SClient.java",
                    "file old path": "src/main/java/org/apache/commons/net/pop3/POP3SClient.java",
                    "file new path": "src/main/java/org/apache/commons/net/pop3/POP3SClient.java",
                    "full name": "src.main.java.org.apache.commons.net.pop3.POP3SClient.performSSLNegotiation"
                },
                {
                    "function name": "setEndpointCheckingEnabled",
                    "function params": [
                        "enable"
                    ],
                    "file name": "POP3SClient.java",
                    "file old path": "src/main/java/org/apache/commons/net/pop3/POP3SClient.java",
                    "file new path": "src/main/java/org/apache/commons/net/pop3/POP3SClient.java",
                    "full name": "src.main.java.org.apache.commons.net.pop3.POP3SClient.setEndpointCheckingEnabled"
                },
                {
                    "function name": "setHostnameVerifier",
                    "function params": [
                        "newHostnameVerifier"
                    ],
                    "file name": "POP3SClient.java",
                    "file old path": "src/main/java/org/apache/commons/net/pop3/POP3SClient.java",
                    "file new path": "src/main/java/org/apache/commons/net/pop3/POP3SClient.java",
                    "full name": "src.main.java.org.apache.commons.net.pop3.POP3SClient.setHostnameVerifier"
                },
                {
                    "function name": "getHostnameVerifier",
                    "function params": [],
                    "file name": "POP3SClient.java",
                    "file old path": "src/main/java/org/apache/commons/net/pop3/POP3SClient.java",
                    "file new path": "src/main/java/org/apache/commons/net/pop3/POP3SClient.java",
                    "full name": "src.main.java.org.apache.commons.net.pop3.POP3SClient.getHostnameVerifier"
                },
                {
                    "function name": "isEndpointCheckingEnabled",
                    "function params": [],
                    "file name": "POP3SClient.java",
                    "file old path": "src/main/java/org/apache/commons/net/pop3/POP3SClient.java",
                    "file new path": "src/main/java/org/apache/commons/net/pop3/POP3SClient.java",
                    "full name": "src.main.java.org.apache.commons.net.pop3.POP3SClient.isEndpointCheckingEnabled"
                },
                {
                    "function name": "isEndpointCheckingEnabled",
                    "function params": [],
                    "file name": "SMTPSClient.java",
                    "file old path": "src/main/java/org/apache/commons/net/smtp/SMTPSClient.java",
                    "file new path": "src/main/java/org/apache/commons/net/smtp/SMTPSClient.java",
                    "full name": "src.main.java.org.apache.commons.net.smtp.SMTPSClient.isEndpointCheckingEnabled"
                },
                {
                    "function name": "setEndpointCheckingEnabled",
                    "function params": [
                        "enable"
                    ],
                    "file name": "SMTPSClient.java",
                    "file old path": "src/main/java/org/apache/commons/net/smtp/SMTPSClient.java",
                    "file new path": "src/main/java/org/apache/commons/net/smtp/SMTPSClient.java",
                    "full name": "src.main.java.org.apache.commons.net.smtp.SMTPSClient.setEndpointCheckingEnabled"
                },
                {
                    "function name": "performSSLNegotiation",
                    "function params": [],
                    "file name": "SMTPSClient.java",
                    "file old path": "src/main/java/org/apache/commons/net/smtp/SMTPSClient.java",
                    "file new path": "src/main/java/org/apache/commons/net/smtp/SMTPSClient.java",
                    "full name": "src.main.java.org.apache.commons.net.smtp.SMTPSClient.performSSLNegotiation"
                },
                {
                    "function name": "getHostnameVerifier",
                    "function params": [],
                    "file name": "SMTPSClient.java",
                    "file old path": "src/main/java/org/apache/commons/net/smtp/SMTPSClient.java",
                    "file new path": "src/main/java/org/apache/commons/net/smtp/SMTPSClient.java",
                    "full name": "src.main.java.org.apache.commons.net.smtp.SMTPSClient.getHostnameVerifier"
                },
                {
                    "function name": "setHostnameVerifier",
                    "function params": [
                        "newHostnameVerifier"
                    ],
                    "file name": "SMTPSClient.java",
                    "file old path": "src/main/java/org/apache/commons/net/smtp/SMTPSClient.java",
                    "file new path": "src/main/java/org/apache/commons/net/smtp/SMTPSClient.java",
                    "full name": "src.main.java.org.apache.commons.net.smtp.SMTPSClient.setHostnameVerifier"
                },
                {
                    "function name": "SSLSocketUtils",
                    "function params": [],
                    "file name": "SSLSocketUtils.java",
                    "file old path": null,
                    "file new path": "src/main/java/org/apache/commons/net/util/SSLSocketUtils.java",
                    "full name": "src.main.java.org.apache.commons.net.util.SSLSocketUtils.SSLSocketUtils"
                },
                {
                    "function name": "enableEndpointNameVerification",
                    "function params": [
                        "socket"
                    ],
                    "file name": "SSLSocketUtils.java",
                    "file old path": null,
                    "file new path": "src/main/java/org/apache/commons/net/util/SSLSocketUtils.java",
                    "full name": "src.main.java.org.apache.commons.net.util.SSLSocketUtils.enableEndpointNameVerification"
                }
            ],
            "files that changed": [
                "src/main/java/org/apache/commons/net/SocketClient.java",
                "src/main/java/org/apache/commons/net/ftp/FTPSClient.java",
                "src/main/java/org/apache/commons/net/imap/IMAPSClient.java",
                "src/main/java/org/apache/commons/net/pop3/POP3SClient.java",
                "src/main/java/org/apache/commons/net/smtp/SMTPSClient.java"
            ]
        },
        {
            "bug index": "64",
            "bug id": "NET-558",
            "hexsha": "2586f75769dc9c82de31c47412f3b41076a9c55b",
            "fix_hash": "31044ba56dc378d68c04334b66344a718116821a",
            "description": "When retrieving the last modification time of a file on the server via the \nmethod getModificationTime(String filename) it returns something like \n\"213 20141111112706\" where only the part after the space is the relevant data.\n\nI digged deeper and i found that the first part before the space is the positive \nresponse code which is not removed before getModificationTime returns.\n\nI consider this a minor bug as i think there is a simple work around \n(split by space, use second part only) but i do not believe that \nthe result of the method is what a user expects regarding the documentation \nof that method. \n",
            "commit number version hash": 1332,
            "commit number": 1310,
            "function that changed": [
                {
                    "function name": "getModificationTime",
                    "function params": [
                        "pathname"
                    ],
                    "file name": "FTPClient.java",
                    "file old path": "src/main/java/org/apache/commons/net/ftp/FTPClient.java",
                    "file new path": "src/main/java/org/apache/commons/net/ftp/FTPClient.java",
                    "full name": "src.main.java.org.apache.commons.net.ftp.FTPClient.getModificationTime"
                }
            ],
            "files that changed": [
                "src/main/java/org/apache/commons/net/ftp/FTPClient.java"
            ]
        },
        {
            "bug index": "65",
            "bug id": "NET-573",
            "hexsha": "bcba9364c60b6b24dc916b1f30af6912c73949e6",
            "fix_hash": "12f145e46190bea7d100aae6ab45ea0e486be12c",
            "description": "We are trying to list files from AS400 systems and retrieve the timestamps from these files using the following code:\n\n{code}\nimport java.io.FileInputStream;\nimport java.io.FileOutputStream;\nimport java.io.IOException;\nimport java.io.InputStream;\nimport java.io.OutputStream;\nimport java.io.PrintWriter;\nimport java.net.InetAddress;\nimport java.net.UnknownHostException;\n\nimport org.apache.commons.net.PrintCommandListener;\nimport org.apache.commons.net.ftp.FTP;\nimport org.apache.commons.net.ftp.FTPClient;\nimport org.apache.commons.net.ftp.FTPHTTPClient;\nimport org.apache.commons.net.ftp.FTPClientConfig;\nimport org.apache.commons.net.ftp.FTPConnectionClosedException;\nimport org.apache.commons.net.ftp.FTPFile;\nimport org.apache.commons.net.ftp.FTPReply;\nimport org.apache.commons.net.ftp.FTPSClient;\nimport org.apache.commons.net.io.CopyStreamEvent;\nimport org.apache.commons.net.io.CopyStreamListener;\nimport org.apache.commons.net.util.TrustManagerUtils;\n\npublic final class FTPAccess {\n\tprivate String server;\n\tprivate String username;\n\tprivate String password;\n\tprivate String path ;\n\n\tpublic String getPath() {\n\t\treturn path;\n\t}\n\tpublic void setPath(String path) {\n\t\tthis.path = path;\n\t}\n\tpublic static void main(String[] args) throws UnknownHostException {\n\t\tFTPAccess ftpAccess = new FTPAccess();\n\t\tftpAccess.setServer(\"X.X.X.X\");\n\t\tftpAccess.setUsername(\"XXXXXX\");\n\t\tftpAccess.setPassword(XXXXXXX\");\n\t\tftpAccess.setPath(\"/reports\");\n\t\tftpAccess.getFile();\n\t}\n\tpublic void getFile() throws UnknownHostException {\n\t\t\n\t\tFTPClient ftpClient = new FTPClient();\n\t\t\n\t\ttry {\n\t\t\tInetAddress serveIPAddress = InetAddress.getByName(server);\n\t\t\tftpClient.setPassiveLocalIPAddress(serveIPAddress);\n\t\t\tftpClient.connect(serveIPAddress);\n\t\t\tSystem.out.println(\"Connected to \" + server + \".\");\n\n\t\t\tint reply = ftpClient.getReplyCode();\n\t\t\tif (!FTPReply.isPositiveCompletion(reply)) {\n\t\t\t\tSystem.err.println(\"FTP server refused connection.\");\n\t\t\t\tSystem.err.println(ftpClient.getReplyString());\n\t\t\t\tftpClient.disconnect();\n\t\t\t} else {\n\t\t\t}\n\n\t\t\tif (!ftpClient.login(username, password)) {\n\t\t\t\tSystem.out.println(ftpClient.getReplyString());\n\t\t\t\tftpClient.logout();\n\t\t\t} else{\n\t\t\t\tdiplayContent(ftpClient, path);\n\n\t\t\t}\n\n\t\t} catch (IOException e) {\n\t\t\tif (ftpClient.isConnected()) {\n\t\t\t\ttry {\n\t\t\t\t\tftpClient.disconnect();\n\t\t\t\t} catch (IOException ioException) {\n\t\t\t\t\t// do nothing\n\t\t\t\t}\n\t\t\t}\n\t\t\tSystem.err.println(\"Could not connect to server.\");\n\t\t\t// e.printStackTrace();\n\t\t\tSystem.exit(1);\n\t\t}\n\n\t\t// } catch (FTPConnectionClosedException e) {\n\t\t// error = true;\n\t\t// System.err.println(\"Server closed connection.\");\n\t\t// e.printStackTrace();\n\t\t// } catch (IOException e) {\n\t\t// error = true;\n\t\t// e.printStackTrace();\n\t\t// } finally {\n\t\t// if (ftp.isConnected()) {\n\t\t// try {\n\t\t// ftp.disconnect();\n\t\t// } catch (IOException f) {\n\t\t// // do nothing\n\t\t// }\n\t\t// }\n\t\t// }\n\n\t} // end main\n\n\tpublic String getServer() {\n\t\treturn server;\n\t}\n\n\tpublic void setServer(String server) {\n\t\tthis.server = server;\n\t}\n\n\tpublic String getUsername() {\n\t\treturn username;\n\t}\n\n\tpublic void setUsername(String username) {\n\t\tthis.username = username;\n\t}\n\n\tpublic String getPassword() {\n\t\treturn password;\n\t}\n\n\tpublic void setPassword(String password) {\n\t\tthis.password = password;\n\t}\n\t\n\tpublic void diplayContent(FTPClient ftpClient, String path) throws IOException {\n\t\tSystem.out.println(path);\n\t\tfor (FTPFile ftpFile : ftpClient.listFiles(path)) {\n\t\t\tif(ftpFile.isDirectory() ){\n\t\t\t\tdiplayContent(ftpClient, path+\"/\"+ftpFile.getName());\n\t\t\t} else{\n\t\t\t\tSystem.out.println(path+\"/\"+ftpFile.getName());\n\t\t\t\tSystem.out.println(ftpFile.getTimestamp());\n\t\t\t}\n\t\t}\n\t\t\n\t}\n\n}\n{code}\n\nThe LIST command which is used internally in the FTPClient retrieves the timestamps successfully. However after parsing the FTPFile has a null value for the timestamp field.\n\nThe null value is returned just when a user place the file in the AS400 usint the NetServer Servivice. This is used to share foldes between windows network and the AS/400\n\nPlease help us fix this problem. It is not critical to us.\n",
            "commit number version hash": 1120,
            "commit number": 1306,
            "function that changed": [
                {
                    "function name": "testNET573",
                    "function params": [],
                    "file name": "OS400FTPEntryParserTest.java",
                    "file old path": "src/test/java/org/apache/commons/net/ftp/parser/OS400FTPEntryParserTest.java",
                    "file new path": "src/test/java/org/apache/commons/net/ftp/parser/OS400FTPEntryParserTest.java",
                    "full name": "src.test.java.org.apache.commons.net.ftp.parser.OS400FTPEntryParserTest.testNET573"
                }
            ],
            "files that changed": [
                "src/test/java/org/apache/commons/net/ftp/parser/OS400FTPEntryParserTest.java"
            ]
        },
        {
            "bug index": "66",
            "bug id": "NET-538",
            "hexsha": "2586f75769dc9c82de31c47412f3b41076a9c55b",
            "fix_hash": "f6d1a4d9d0fa98e275bef1a65cd40374bfe751be",
            "description": "FTPHTTPClient can't set socket timeout when connecting to remote http proxy. This may cause hangouts for calls to remote http ftp proxies.\n\nExpected: FTPHTTPClient  supports creation sockets with Factory methods. We had same approach for regular FTPClient calling .setSocketFactory(...) method and have control over socket creation.\nActual: FTPHTTPClient  creates Socket inside public void connect(...) directly, and it is impossible to set timouts since this object will be used immediately. It is even impossible to inherit from FTPHTTPClient   to override connect - since proxyHost, proxyPort and tunnelHandshake is private.\n\nso we may change \n      _socket_ = new Socket(proxyHost, proxyPort);\nto \n     _socket_ = _socketFactory_.createSocket();\n\nand add support for FTPHTTPClient  to handle socket factories for http proxies calls.\n\nIs it possiible?\n\n",
            "commit number version hash": 1332,
            "commit number": 1303,
            "function that changed": [
                {
                    "function name": "_openDataConnection_",
                    "function params": [
                        "command",
                        "arg"
                    ],
                    "file name": "FTPHTTPClient.java",
                    "file old path": "src/main/java/org/apache/commons/net/ftp/FTPHTTPClient.java",
                    "file new path": "src/main/java/org/apache/commons/net/ftp/FTPHTTPClient.java",
                    "full name": "src.main.java.org.apache.commons.net.ftp.FTPHTTPClient._openDataConnection_"
                },
                {
                    "function name": "connect",
                    "function params": [
                        "host",
                        "port"
                    ],
                    "file name": "FTPHTTPClient.java",
                    "file old path": "src/main/java/org/apache/commons/net/ftp/FTPHTTPClient.java",
                    "file new path": "src/main/java/org/apache/commons/net/ftp/FTPHTTPClient.java",
                    "full name": "src.main.java.org.apache.commons.net.ftp.FTPHTTPClient.connect"
                }
            ],
            "files that changed": [
                "src/main/java/org/apache/commons/net/ftp/FTPHTTPClient.java"
            ]
        },
        {
            "bug index": "69",
            "bug id": "NET-566",
            "hexsha": "2586f75769dc9c82de31c47412f3b41076a9c55b",
            "fix_hash": "50a124bf76c36d47d797306ccadcb3d97c43caca",
            "description": "The {{UnixFTPEntryParser}} [regular expression | http://svn.apache.org/viewvc/commons/proper/net/trunk/src/main/java/org/apache/commons/net/ftp/parser/UnixFTPEntryParser.java?view=markup] (line 106) consumes all spaces between the timestamp and the file name.\n\nThe {{FTPFile.name}} property ends up getting a value with stripped leading spaces.\n\nReported by Spring Integration user at https://jira.spring.io/browse/INT-3591",
            "commit number version hash": 1332,
            "commit number": 1287,
            "function that changed": [
                {
                    "function name": "createFileEntryParser",
                    "function params": [
                        "key",
                        "config"
                    ],
                    "file name": "DefaultFTPFileEntryParserFactory.java",
                    "file old path": "src/main/java/org/apache/commons/net/ftp/parser/DefaultFTPFileEntryParserFactory.java",
                    "file new path": "src/main/java/org/apache/commons/net/ftp/parser/DefaultFTPFileEntryParserFactory.java",
                    "full name": "src.main.java.org.apache.commons.net.ftp.parser.DefaultFTPFileEntryParserFactory.createFileEntryParser"
                },
                {
                    "function name": "createOS400FTPEntryParser",
                    "function params": [
                        "config"
                    ],
                    "file name": "DefaultFTPFileEntryParserFactory.java",
                    "file old path": "src/main/java/org/apache/commons/net/ftp/parser/DefaultFTPFileEntryParserFactory.java",
                    "file new path": "src/main/java/org/apache/commons/net/ftp/parser/DefaultFTPFileEntryParserFactory.java",
                    "full name": "src.main.java.org.apache.commons.net.ftp.parser.DefaultFTPFileEntryParserFactory.createOS400FTPEntryParser"
                },
                {
                    "function name": "createNTFTPEntryParser",
                    "function params": [
                        "config"
                    ],
                    "file name": "DefaultFTPFileEntryParserFactory.java",
                    "file old path": "src/main/java/org/apache/commons/net/ftp/parser/DefaultFTPFileEntryParserFactory.java",
                    "file new path": "src/main/java/org/apache/commons/net/ftp/parser/DefaultFTPFileEntryParserFactory.java",
                    "full name": "src.main.java.org.apache.commons.net.ftp.parser.DefaultFTPFileEntryParserFactory.createNTFTPEntryParser"
                },
                {
                    "function name": "UnixFTPEntryParser",
                    "function params": [
                        "config"
                    ],
                    "file name": "UnixFTPEntryParser.java",
                    "file old path": "src/main/java/org/apache/commons/net/ftp/parser/UnixFTPEntryParser.java",
                    "file new path": "src/main/java/org/apache/commons/net/ftp/parser/UnixFTPEntryParser.java",
                    "full name": "src.main.java.org.apache.commons.net.ftp.parser.UnixFTPEntryParser.UnixFTPEntryParser"
                },
                {
                    "function name": "testLeadingSpacesDefault",
                    "function params": [],
                    "file name": "UnixFTPEntryParserTest.java",
                    "file old path": "src/test/java/org/apache/commons/net/ftp/parser/UnixFTPEntryParserTest.java",
                    "file new path": "src/test/java/org/apache/commons/net/ftp/parser/UnixFTPEntryParserTest.java",
                    "full name": "src.test.java.org.apache.commons.net.ftp.parser.UnixFTPEntryParserTest.testLeadingSpacesDefault"
                },
                {
                    "function name": "testTrimLeadingSpacesNET566",
                    "function params": [],
                    "file name": "UnixFTPEntryParserTest.java",
                    "file old path": "src/test/java/org/apache/commons/net/ftp/parser/UnixFTPEntryParserTest.java",
                    "file new path": "src/test/java/org/apache/commons/net/ftp/parser/UnixFTPEntryParserTest.java",
                    "full name": "src.test.java.org.apache.commons.net.ftp.parser.UnixFTPEntryParserTest.testTrimLeadingSpacesNET566"
                }
            ],
            "files that changed": [
                "src/main/java/org/apache/commons/net/ftp/FTPClientConfig.java",
                "src/main/java/org/apache/commons/net/ftp/parser/DefaultFTPFileEntryParserFactory.java",
                "src/main/java/org/apache/commons/net/ftp/parser/UnixFTPEntryParser.java",
                "src/test/java/org/apache/commons/net/ftp/parser/UnixFTPEntryParserTest.java"
            ]
        },
        {
            "bug index": "70",
            "bug id": "NET-566",
            "hexsha": "2586f75769dc9c82de31c47412f3b41076a9c55b",
            "fix_hash": "f9a8a38405a6c0c269b21318d1e469a7c392be1f",
            "description": "The {{UnixFTPEntryParser}} [regular expression | http://svn.apache.org/viewvc/commons/proper/net/trunk/src/main/java/org/apache/commons/net/ftp/parser/UnixFTPEntryParser.java?view=markup] (line 106) consumes all spaces between the timestamp and the file name.\n\nThe {{FTPFile.name}} property ends up getting a value with stripped leading spaces.\n\nReported by Spring Integration user at https://jira.spring.io/browse/INT-3591",
            "commit number version hash": 1332,
            "commit number": 1284,
            "function that changed": [
                {
                    "function name": "UnixFTPEntryParser",
                    "function params": [
                        "config",
                        "trimLeadingSpaces"
                    ],
                    "file name": "UnixFTPEntryParser.java",
                    "file old path": "src/main/java/org/apache/commons/net/ftp/parser/UnixFTPEntryParser.java",
                    "file new path": "src/main/java/org/apache/commons/net/ftp/parser/UnixFTPEntryParser.java",
                    "full name": "src.main.java.org.apache.commons.net.ftp.parser.UnixFTPEntryParser.UnixFTPEntryParser"
                },
                {
                    "function name": "UnixFTPEntryParser",
                    "function params": [
                        "config"
                    ],
                    "file name": "UnixFTPEntryParser.java",
                    "file old path": "src/main/java/org/apache/commons/net/ftp/parser/UnixFTPEntryParser.java",
                    "file new path": "src/main/java/org/apache/commons/net/ftp/parser/UnixFTPEntryParser.java",
                    "full name": "src.main.java.org.apache.commons.net.ftp.parser.UnixFTPEntryParser.UnixFTPEntryParser"
                },
                {
                    "function name": "parseFTPEntry",
                    "function params": [
                        "entry"
                    ],
                    "file name": "UnixFTPEntryParser.java",
                    "file old path": "src/main/java/org/apache/commons/net/ftp/parser/UnixFTPEntryParser.java",
                    "file new path": "src/main/java/org/apache/commons/net/ftp/parser/UnixFTPEntryParser.java",
                    "full name": "src.main.java.org.apache.commons.net.ftp.parser.UnixFTPEntryParser.parseFTPEntry"
                },
                {
                    "function name": "testLeadingSpacesOriginal",
                    "function params": [],
                    "file name": "UnixFTPEntryParserTest.java",
                    "file old path": "src/test/java/org/apache/commons/net/ftp/parser/UnixFTPEntryParserTest.java",
                    "file new path": "src/test/java/org/apache/commons/net/ftp/parser/UnixFTPEntryParserTest.java",
                    "full name": "src.test.java.org.apache.commons.net.ftp.parser.UnixFTPEntryParserTest.testLeadingSpacesOriginal"
                },
                {
                    "function name": "testLeadingSpacesNET566",
                    "function params": [],
                    "file name": "UnixFTPEntryParserTest.java",
                    "file old path": "src/test/java/org/apache/commons/net/ftp/parser/UnixFTPEntryParserTest.java",
                    "file new path": "src/test/java/org/apache/commons/net/ftp/parser/UnixFTPEntryParserTest.java",
                    "full name": "src.test.java.org.apache.commons.net.ftp.parser.UnixFTPEntryParserTest.testLeadingSpacesNET566"
                }
            ],
            "files that changed": [
                "src/main/java/org/apache/commons/net/ftp/parser/UnixFTPEntryParser.java",
                "src/test/java/org/apache/commons/net/ftp/parser/UnixFTPEntryParserTest.java"
            ]
        },
        {
            "bug index": "71",
            "bug id": "NET-552",
            "hexsha": "2586f75769dc9c82de31c47412f3b41076a9c55b",
            "fix_hash": "9fb2ca62d1cd49e037d14fb35a00d75a6266a8ea",
            "description": "Randomly, we're experiencing SocketTimoutException when we connect an FTP via an Http Proxy :\n\n{noformat}\njava.io.IOException: Timed out waiting for initial connect reply\n\tat org.apache.commons.net.ftp.FTP._connectAction_(FTP.java:403)\n\tat org.apache.commons.net.ftp.FTPClient._connectAction_(FTPClient.java:931)\n\tat org.apache.commons.net.ftp.FTPClient._connectAction_(FTPClient.java:925)\n\tat org.apache.commons.net.ftp.FTPHTTPClient.connect(FTPHTTPClient.java:144)\nCaused by: java.net.SocketTimeoutException: Read timed out\n\tat java.net.SocketInputStream.socketRead0(Native Method)\n\tat java.net.SocketInputStream.read(SocketInputStream.java:150)\n\tat java.net.SocketInputStream.read(SocketInputStream.java:121)\n\tat sun.nio.cs.StreamDecoder.readBytes(StreamDecoder.java:284)\n\tat sun.nio.cs.StreamDecoder.implRead(StreamDecoder.java:326)\n\tat sun.nio.cs.StreamDecoder.read(StreamDecoder.java:178)\n\tat java.io.InputStreamReader.read(InputStreamReader.java:184)\n\tat java.io.BufferedReader.fill(BufferedReader.java:161)\n\tat java.io.BufferedReader.read(BufferedReader.java:182)\n\tat org.apache.commons.net.io.CRLFLineReader.readLine(CRLFLineReader.java:58)\n\tat org.apache.commons.net.ftp.FTP.__getReply(FTP.java:315)\n\tat org.apache.commons.net.ftp.FTP.__getReply(FTP.java:295)\n\tat org.apache.commons.net.ftp.FTP._connectAction_(FTP.java:397)\n\t... 6 more\n{noformat}\n\nAfter analysis, I think the problem is that commons-net opens 2 BufferedReader on the same InputStream : first in the FTPHTTPClient.tunnelHandshake method, and the second in FTP._connectAction() method.\nIf the first BufferedReader reads all datas in the socket, the second waits until SocketTimeout.",
            "commit number version hash": 1332,
            "commit number": 1276,
            "function that changed": [
                {
                    "function name": "_connectAction_",
                    "function params": [
                        "socketIsReader"
                    ],
                    "file name": "FTP.java",
                    "file old path": "src/main/java/org/apache/commons/net/ftp/FTP.java",
                    "file new path": "src/main/java/org/apache/commons/net/ftp/FTP.java",
                    "full name": "src.main.java.org.apache.commons.net.ftp.FTP._connectAction_"
                },
                {
                    "function name": "_connectAction_",
                    "function params": [],
                    "file name": "FTP.java",
                    "file old path": "src/main/java/org/apache/commons/net/ftp/FTP.java",
                    "file new path": "src/main/java/org/apache/commons/net/ftp/FTP.java",
                    "full name": "src.main.java.org.apache.commons.net.ftp.FTP._connectAction_"
                },
                {
                    "function name": "_connectAction_",
                    "function params": [],
                    "file name": "FTPClient.java",
                    "file old path": "src/main/java/org/apache/commons/net/ftp/FTPClient.java",
                    "file new path": "src/main/java/org/apache/commons/net/ftp/FTPClient.java",
                    "full name": "src.main.java.org.apache.commons.net.ftp.FTPClient._connectAction_"
                },
                {
                    "function name": "_connectAction_",
                    "function params": [
                        "socketIsReader"
                    ],
                    "file name": "FTPClient.java",
                    "file old path": "src/main/java/org/apache/commons/net/ftp/FTPClient.java",
                    "file new path": "src/main/java/org/apache/commons/net/ftp/FTPClient.java",
                    "full name": "src.main.java.org.apache.commons.net.ftp.FTPClient._connectAction_"
                },
                {
                    "function name": "connect",
                    "function params": [
                        "host",
                        "port"
                    ],
                    "file name": "FTPHTTPClient.java",
                    "file old path": "src/main/java/org/apache/commons/net/ftp/FTPHTTPClient.java",
                    "file new path": "src/main/java/org/apache/commons/net/ftp/FTPHTTPClient.java",
                    "full name": "src.main.java.org.apache.commons.net.ftp.FTPHTTPClient.connect"
                },
                {
                    "function name": "tunnelHandshake",
                    "function params": [
                        "host",
                        "port",
                        "input",
                        "output"
                    ],
                    "file name": "FTPHTTPClient.java",
                    "file old path": "src/main/java/org/apache/commons/net/ftp/FTPHTTPClient.java",
                    "file new path": "src/main/java/org/apache/commons/net/ftp/FTPHTTPClient.java",
                    "full name": "src.main.java.org.apache.commons.net.ftp.FTPHTTPClient.tunnelHandshake"
                }
            ],
            "files that changed": [
                "src/main/java/org/apache/commons/net/ftp/FTP.java",
                "src/main/java/org/apache/commons/net/ftp/FTPClient.java",
                "src/main/java/org/apache/commons/net/ftp/FTPHTTPClient.java"
            ]
        },
        {
            "bug index": "72",
            "bug id": "NET-563",
            "hexsha": "2586f75769dc9c82de31c47412f3b41076a9c55b",
            "fix_hash": "17ecff749acf32ddeb8c8e9883491503b8d953a0",
            "description": "The MLSxEntryParser currently has no proper unit tests.\nAlso the parsing is too lax, for example at least one fact is required unless the entry starts with a space, but this is not detected.",
            "commit number version hash": 1332,
            "commit number": 1235,
            "function that changed": [
                {
                    "function name": "parseFTPEntry",
                    "function params": [
                        "entry"
                    ],
                    "file name": "MLSxEntryParser.java",
                    "file old path": "src/main/java/org/apache/commons/net/ftp/parser/MLSxEntryParser.java",
                    "file new path": "src/main/java/org/apache/commons/net/ftp/parser/MLSxEntryParser.java",
                    "full name": "src.main.java.org.apache.commons.net.ftp.parser.MLSxEntryParser.parseFTPEntry"
                },
                {
                    "function name": "getBadListing",
                    "function params": [],
                    "file name": "MLSxEntryParserTest.java",
                    "file old path": null,
                    "file new path": "src/test/java/org/apache/commons/net/ftp/parser/MLSxEntryParserTest.java",
                    "full name": "src.test.java.org.apache.commons.net.ftp.parser.MLSxEntryParserTest.getBadListing"
                },
                {
                    "function name": "getGoodListing",
                    "function params": [],
                    "file name": "MLSxEntryParserTest.java",
                    "file old path": null,
                    "file new path": "src/test/java/org/apache/commons/net/ftp/parser/MLSxEntryParserTest.java",
                    "full name": "src.test.java.org.apache.commons.net.ftp.parser.MLSxEntryParserTest.getGoodListing"
                },
                {
                    "function name": "MLSxEntryParserTest",
                    "function params": [
                        "name"
                    ],
                    "file name": "MLSxEntryParserTest.java",
                    "file old path": null,
                    "file new path": "src/test/java/org/apache/commons/net/ftp/parser/MLSxEntryParserTest.java",
                    "full name": "src.test.java.org.apache.commons.net.ftp.parser.MLSxEntryParserTest.MLSxEntryParserTest"
                },
                {
                    "function name": "testParseFieldsOnFile",
                    "function params": [],
                    "file name": "MLSxEntryParserTest.java",
                    "file old path": null,
                    "file new path": "src/test/java/org/apache/commons/net/ftp/parser/MLSxEntryParserTest.java",
                    "full name": "src.test.java.org.apache.commons.net.ftp.parser.MLSxEntryParserTest.testParseFieldsOnFile"
                },
                {
                    "function name": "nullFileOrNullDate",
                    "function params": [
                        "f"
                    ],
                    "file name": "MLSxEntryParserTest.java",
                    "file old path": null,
                    "file new path": "src/test/java/org/apache/commons/net/ftp/parser/MLSxEntryParserTest.java",
                    "full name": "src.test.java.org.apache.commons.net.ftp.parser.MLSxEntryParserTest.nullFileOrNullDate"
                },
                {
                    "function name": "getParser",
                    "function params": [],
                    "file name": "MLSxEntryParserTest.java",
                    "file old path": null,
                    "file new path": "src/test/java/org/apache/commons/net/ftp/parser/MLSxEntryParserTest.java",
                    "full name": "src.test.java.org.apache.commons.net.ftp.parser.MLSxEntryParserTest.getParser"
                },
                {
                    "function name": "testParseFieldsOnDirectory",
                    "function params": [],
                    "file name": "MLSxEntryParserTest.java",
                    "file old path": null,
                    "file new path": "src/test/java/org/apache/commons/net/ftp/parser/MLSxEntryParserTest.java",
                    "full name": "src.test.java.org.apache.commons.net.ftp.parser.MLSxEntryParserTest.testParseFieldsOnDirectory"
                }
            ],
            "files that changed": [
                "src/main/java/org/apache/commons/net/ftp/parser/MLSxEntryParser.java"
            ]
        },
        {
            "bug index": "73",
            "bug id": "NET-561",
            "hexsha": "2586f75769dc9c82de31c47412f3b41076a9c55b",
            "fix_hash": "752a551c95abe091bd69a4c68c8f9d900e5e3b67",
            "description": "toFormattedString outputs the user and group names in the wrong order",
            "commit number version hash": 1332,
            "commit number": 1223,
            "function that changed": [
                {
                    "function name": "toFormattedString",
                    "function params": [],
                    "file name": "FTPFile.java",
                    "file old path": "src/main/java/org/apache/commons/net/ftp/FTPFile.java",
                    "file new path": "src/main/java/org/apache/commons/net/ftp/FTPFile.java",
                    "full name": "src.main.java.org.apache.commons.net.ftp.FTPFile.toFormattedString"
                }
            ],
            "files that changed": [
                "src/main/java/org/apache/commons/net/ftp/FTPFile.java"
            ]
        },
        {
            "bug index": "74",
            "bug id": "NET-544",
            "hexsha": "2586f75769dc9c82de31c47412f3b41076a9c55b",
            "fix_hash": "e68628bb255ff74b33ae19a37e17058806d9592a",
            "description": "At line 3232 of FTPClient, it is mentionned that the parserKey and entryParser are cached \"to avoid creation of a new object every time a file listing is generated\".\n\nHowever the test seems to be incorrect as a new entryParser is created every time the method \"listFiles\" is called. Indeed, in method named listFiles, the initiateListParsing is called with a null argument for the parserKey.\nSo the test : \"if(__entryParser == null ||  ! __entryParserKey.equals(parserKey))\" is always true (even if __entryParserKey has been cached) and thus a new entryParser is created.",
            "commit number version hash": 1332,
            "commit number": 1222,
            "function that changed": [
                {
                    "function name": "initiateListParsing",
                    "function params": [
                        "parserKey",
                        "pathname"
                    ],
                    "file name": "FTPClient.java",
                    "file old path": "src/main/java/org/apache/commons/net/ftp/FTPClient.java",
                    "file new path": "src/main/java/org/apache/commons/net/ftp/FTPClient.java",
                    "full name": "src.main.java.org.apache.commons.net.ftp.FTPClient.initiateListParsing"
                },
                {
                    "function name": "__createParser",
                    "function params": [
                        "parserKey"
                    ],
                    "file name": "FTPClient.java",
                    "file old path": "src/main/java/org/apache/commons/net/ftp/FTPClient.java",
                    "file new path": "src/main/java/org/apache/commons/net/ftp/FTPClient.java",
                    "full name": "src.main.java.org.apache.commons.net.ftp.FTPClient.__createParser"
                },
                {
                    "function name": "getEntryParser",
                    "function params": [],
                    "file name": "FTPClient.java",
                    "file old path": "src/main/java/org/apache/commons/net/ftp/FTPClient.java",
                    "file new path": "src/main/java/org/apache/commons/net/ftp/FTPClient.java",
                    "full name": "src.main.java.org.apache.commons.net.ftp.FTPClient.getEntryParser"
                },
                {
                    "function name": "LocalClient",
                    "function params": [
                        "type"
                    ],
                    "file name": "FTPClientTest.java",
                    "file old path": "src/test/java/org/apache/commons/net/ftp/FTPClientTest.java",
                    "file new path": "src/test/java/org/apache/commons/net/ftp/FTPClientTest.java",
                    "full name": "src.test.java.org.apache.commons.net.ftp.FTPClientTest.LocalClient"
                },
                {
                    "function name": "testParserCachingWithKey",
                    "function params": [],
                    "file name": "FTPClientTest.java",
                    "file old path": "src/test/java/org/apache/commons/net/ftp/FTPClientTest.java",
                    "file new path": "src/test/java/org/apache/commons/net/ftp/FTPClientTest.java",
                    "full name": "src.test.java.org.apache.commons.net.ftp.FTPClientTest.testParserCachingWithKey"
                },
                {
                    "function name": "LocalClient",
                    "function params": [],
                    "file name": "FTPClientTest.java",
                    "file old path": "src/test/java/org/apache/commons/net/ftp/FTPClientTest.java",
                    "file new path": "src/test/java/org/apache/commons/net/ftp/FTPClientTest.java",
                    "full name": "src.test.java.org.apache.commons.net.ftp.FTPClientTest.LocalClient"
                },
                {
                    "function name": "testParserCachingNullKey",
                    "function params": [],
                    "file name": "FTPClientTest.java",
                    "file old path": "src/test/java/org/apache/commons/net/ftp/FTPClientTest.java",
                    "file new path": "src/test/java/org/apache/commons/net/ftp/FTPClientTest.java",
                    "full name": "src.test.java.org.apache.commons.net.ftp.FTPClientTest.testParserCachingNullKey"
                }
            ],
            "files that changed": [
                "src/main/java/org/apache/commons/net/ftp/FTPClient.java",
                "src/test/java/org/apache/commons/net/ftp/FTPClientTest.java"
            ]
        },
        {
            "bug index": "75",
            "bug id": "NET-558",
            "hexsha": "2586f75769dc9c82de31c47412f3b41076a9c55b",
            "fix_hash": "316dfd409563f1396521798aefab04ce7999f84f",
            "description": "When retrieving the last modification time of a file on the server via the \nmethod getModificationTime(String filename) it returns something like \n\"213 20141111112706\" where only the part after the space is the relevant data.\n\nI digged deeper and i found that the first part before the space is the positive \nresponse code which is not removed before getModificationTime returns.\n\nI consider this a minor bug as i think there is a simple work around \n(split by space, use second part only) but i do not believe that \nthe result of the method is what a user expects regarding the documentation \nof that method. \n",
            "commit number version hash": 1332,
            "commit number": 1219,
            "function that changed": [
                {
                    "function name": "getModificationTime",
                    "function params": [
                        "pathname"
                    ],
                    "file name": "FTPClient.java",
                    "file old path": "src/main/java/org/apache/commons/net/ftp/FTPClient.java",
                    "file new path": "src/main/java/org/apache/commons/net/ftp/FTPClient.java",
                    "full name": "src.main.java.org.apache.commons.net.ftp.FTPClient.getModificationTime"
                }
            ],
            "files that changed": [
                "src/main/java/org/apache/commons/net/ftp/FTPClient.java"
            ]
        },
        {
            "bug index": "76",
            "bug id": "NET-550",
            "hexsha": "2586f75769dc9c82de31c47412f3b41076a9c55b",
            "fix_hash": "5555226cf8d009ee9fdb9164a919e96d768c529e",
            "description": "While experimenting with FTPClient, I discovered that if I don't call setBufferSize(), the default value is zero.  This results in retrieveFile() calling the version of InputStream.read() with no parameters, reading one byte at a time.  For comparison, the downloading a CD ISO image of about ~648MB took 18m10s with the default settings.  In contrast, calling setBufferSize(8192) took only 7.9s, an improvement of ~137x.\n\nHere is some sample code:\n\n{code:java}\nFTPClient ftp = new FTPClient();\n// ftp.setBufferSize(8192);\nftp.setControlKeepAliveTimeout(300);\nftp.setCopyStreamListener(new CopyStreamListener() {\n    @Override\n    public void bytesTransferred(long totalBytesTransferred, int bytesTransferred, long streamSize) {\n        System.out.println(\"totalBytesTransferred: \" + totalBytesTransferred\n            + \", bytesTransferred: \" + bytesTransferred + \", streamSize: \" + streamSize);\n    }\n\n    @Override public void bytesTransferred(CopyStreamEvent event) {}\n});\nftp.connect(host);\nftp.login(user, pass);\nftp.retrieveFile(file, outputStream);\n{code}\n\nThe log message from the stream listener printed lots messages \"bytesTransferred: 1\" and totalBytesTransferred incremented by 1 each time.  This corresponds to the part of the code which reads one byte at a time with {{int inputStream.read()}}.\n",
            "commit number version hash": 1332,
            "commit number": 1209,
            "function that changed": [
                {
                    "function name": "copyStream",
                    "function params": [
                        "source",
                        "dest",
                        "bufferSize",
                        "streamSize",
                        "listener",
                        "flush"
                    ],
                    "file name": "Util.java",
                    "file old path": "src/main/java/org/apache/commons/net/io/Util.java",
                    "file new path": "src/main/java/org/apache/commons/net/io/Util.java",
                    "full name": "src.main.java.org.apache.commons.net.io.Util.copyStream"
                },
                {
                    "function name": "copyReader",
                    "function params": [
                        "source",
                        "dest",
                        "bufferSize",
                        "streamSize",
                        "listener"
                    ],
                    "file name": "Util.java",
                    "file old path": "src/main/java/org/apache/commons/net/io/Util.java",
                    "file new path": "src/main/java/org/apache/commons/net/io/Util.java",
                    "full name": "src.main.java.org.apache.commons.net.io.Util.copyReader"
                },
                {
                    "function name": "testNET550_Stream",
                    "function params": [],
                    "file name": "UtilTest.java",
                    "file old path": "src/test/java/org/apache/commons/net/util/UtilTest.java",
                    "file new path": "src/test/java/org/apache/commons/net/util/UtilTest.java",
                    "full name": "src.test.java.org.apache.commons.net.util.UtilTest.testNET550_Stream"
                },
                {
                    "function name": "testNET550_Reader",
                    "function params": [],
                    "file name": "UtilTest.java",
                    "file old path": "src/test/java/org/apache/commons/net/util/UtilTest.java",
                    "file new path": "src/test/java/org/apache/commons/net/util/UtilTest.java",
                    "full name": "src.test.java.org.apache.commons.net.util.UtilTest.testNET550_Reader"
                },
                {
                    "function name": "CSLtotal",
                    "function params": [
                        "event"
                    ],
                    "file name": "UtilTest.java",
                    "file old path": "src/test/java/org/apache/commons/net/util/UtilTest.java",
                    "file new path": "src/test/java/org/apache/commons/net/util/UtilTest.java",
                    "full name": "src.test.java.org.apache.commons.net.util.UtilTest.CSLtotal"
                },
                {
                    "function name": "CSLtotal",
                    "function params": [
                        "totalBytesTransferred",
                        "bytesTransferred"
                    ],
                    "file name": "UtilTest.java",
                    "file old path": "src/test/java/org/apache/commons/net/util/UtilTest.java",
                    "file new path": "src/test/java/org/apache/commons/net/util/UtilTest.java",
                    "full name": "src.test.java.org.apache.commons.net.util.UtilTest.CSLtotal"
                },
                {
                    "function name": "CSL",
                    "function params": [
                        "totalBytesTransferred",
                        "bytesTransferred",
                        "streamSize"
                    ],
                    "file name": "UtilTest.java",
                    "file old path": "src/test/java/org/apache/commons/net/util/UtilTest.java",
                    "file new path": "src/test/java/org/apache/commons/net/util/UtilTest.java",
                    "full name": "src.test.java.org.apache.commons.net.util.UtilTest.CSL"
                },
                {
                    "function name": "CSLtotal",
                    "function params": [],
                    "file name": "UtilTest.java",
                    "file old path": "src/test/java/org/apache/commons/net/util/UtilTest.java",
                    "file new path": "src/test/java/org/apache/commons/net/util/UtilTest.java",
                    "full name": "src.test.java.org.apache.commons.net.util.UtilTest.CSLtotal"
                },
                {
                    "function name": "CSLtotal",
                    "function params": [
                        "totalBytesTransferred",
                        "bytesTransferred",
                        "streamSize"
                    ],
                    "file name": "UtilTest.java",
                    "file old path": "src/test/java/org/apache/commons/net/util/UtilTest.java",
                    "file new path": "src/test/java/org/apache/commons/net/util/UtilTest.java",
                    "full name": "src.test.java.org.apache.commons.net.util.UtilTest.CSLtotal"
                }
            ],
            "files that changed": [
                "src/main/java/org/apache/commons/net/io/Util.java",
                "src/test/java/org/apache/commons/net/util/UtilTest.java"
            ]
        },
        {
            "bug index": "77",
            "bug id": "NET-551",
            "hexsha": "2586f75769dc9c82de31c47412f3b41076a9c55b",
            "fix_hash": "506d027199a615962ad5df482f077792841a01c1",
            "description": "Util copyReader calls CopyStreamListener.bytesTransferred with the incorrect value for bytesTransferred parameter if it reads a single character.\n\nIt uses the value of the field chars which at that point contains the character, rather than the number read.\n\nThe code also re-uses the chars field for both the number of characters read and the single character, which is quite confusing. [The copyStream also re-uses the bytes field, but uses the correct bytesTransferred parameter]",
            "commit number version hash": 1332,
            "commit number": 1208,
            "function that changed": [
                {
                    "function name": "copyReader",
                    "function params": [
                        "source",
                        "dest",
                        "bufferSize",
                        "streamSize",
                        "listener"
                    ],
                    "file name": "Util.java",
                    "file old path": "src/main/java/org/apache/commons/net/io/Util.java",
                    "file new path": "src/main/java/org/apache/commons/net/io/Util.java",
                    "full name": "src.main.java.org.apache.commons.net.io.Util.copyReader"
                },
                {
                    "function name": "copyStream",
                    "function params": [
                        "source",
                        "dest",
                        "bufferSize",
                        "streamSize",
                        "listener",
                        "flush"
                    ],
                    "file name": "Util.java",
                    "file old path": "src/main/java/org/apache/commons/net/io/Util.java",
                    "file new path": "src/main/java/org/apache/commons/net/io/Util.java",
                    "full name": "src.main.java.org.apache.commons.net.io.Util.copyStream"
                }
            ],
            "files that changed": [
                "src/main/java/org/apache/commons/net/io/Util.java"
            ]
        },
        {
            "bug index": "78",
            "bug id": "NET-551",
            "hexsha": "2586f75769dc9c82de31c47412f3b41076a9c55b",
            "fix_hash": "aee94d0b51becdc83ea4a74e86b242d0ca3d6f0a",
            "description": "Util copyReader calls CopyStreamListener.bytesTransferred with the incorrect value for bytesTransferred parameter if it reads a single character.\n\nIt uses the value of the field chars which at that point contains the character, rather than the number read.\n\nThe code also re-uses the chars field for both the number of characters read and the single character, which is quite confusing. [The copyStream also re-uses the bytes field, but uses the correct bytesTransferred parameter]",
            "commit number version hash": 1332,
            "commit number": 1207,
            "function that changed": [
                {
                    "function name": "copyReader",
                    "function params": [
                        "source",
                        "dest",
                        "bufferSize",
                        "streamSize",
                        "listener"
                    ],
                    "file name": "Util.java",
                    "file old path": "src/main/java/org/apache/commons/net/io/Util.java",
                    "file new path": "src/main/java/org/apache/commons/net/io/Util.java",
                    "full name": "src.main.java.org.apache.commons.net.io.Util.copyReader"
                },
                {
                    "function name": "testStream1",
                    "function params": [],
                    "file name": "UtilTest.java",
                    "file old path": null,
                    "file new path": "src/test/java/org/apache/commons/net/util/UtilTest.java",
                    "full name": "src.test.java.org.apache.commons.net.util.UtilTest.testStream1"
                },
                {
                    "function name": "testReader_1",
                    "function params": [],
                    "file name": "UtilTest.java",
                    "file old path": null,
                    "file new path": "src/test/java/org/apache/commons/net/util/UtilTest.java",
                    "full name": "src.test.java.org.apache.commons.net.util.UtilTest.testReader_1"
                },
                {
                    "function name": "testReader0",
                    "function params": [],
                    "file name": "UtilTest.java",
                    "file old path": null,
                    "file new path": "src/test/java/org/apache/commons/net/util/UtilTest.java",
                    "full name": "src.test.java.org.apache.commons.net.util.UtilTest.testReader0"
                },
                {
                    "function name": "CSL",
                    "function params": [
                        "event"
                    ],
                    "file name": "UtilTest.java",
                    "file old path": null,
                    "file new path": "src/test/java/org/apache/commons/net/util/UtilTest.java",
                    "full name": "src.test.java.org.apache.commons.net.util.UtilTest.CSL"
                },
                {
                    "function name": "testcloseQuietly",
                    "function params": [],
                    "file name": "UtilTest.java",
                    "file old path": null,
                    "file new path": "src/test/java/org/apache/commons/net/util/UtilTest.java",
                    "full name": "src.test.java.org.apache.commons.net.util.UtilTest.testcloseQuietly"
                },
                {
                    "function name": "testStream0",
                    "function params": [],
                    "file name": "UtilTest.java",
                    "file old path": null,
                    "file new path": "src/test/java/org/apache/commons/net/util/UtilTest.java",
                    "full name": "src.test.java.org.apache.commons.net.util.UtilTest.testStream0"
                },
                {
                    "function name": "testStream_1",
                    "function params": [],
                    "file name": "UtilTest.java",
                    "file old path": null,
                    "file new path": "src/test/java/org/apache/commons/net/util/UtilTest.java",
                    "full name": "src.test.java.org.apache.commons.net.util.UtilTest.testStream_1"
                },
                {
                    "function name": "CSL",
                    "function params": [
                        "totalBytesTransferred",
                        "bytesTransferred",
                        "streamSize"
                    ],
                    "file name": "UtilTest.java",
                    "file old path": null,
                    "file new path": "src/test/java/org/apache/commons/net/util/UtilTest.java",
                    "full name": "src.test.java.org.apache.commons.net.util.UtilTest.CSL"
                },
                {
                    "function name": "CSL",
                    "function params": [
                        "totalBytesTransferred",
                        "bytesTransferred",
                        "streamSize"
                    ],
                    "file name": "UtilTest.java",
                    "file old path": null,
                    "file new path": "src/test/java/org/apache/commons/net/util/UtilTest.java",
                    "full name": "src.test.java.org.apache.commons.net.util.UtilTest.CSL"
                },
                {
                    "function name": "testReader1",
                    "function params": [],
                    "file name": "UtilTest.java",
                    "file old path": null,
                    "file new path": "src/test/java/org/apache/commons/net/util/UtilTest.java",
                    "full name": "src.test.java.org.apache.commons.net.util.UtilTest.testReader1"
                }
            ],
            "files that changed": [
                "src/main/java/org/apache/commons/net/io/Util.java"
            ]
        },
        {
            "bug index": "79",
            "bug id": "NET-549",
            "hexsha": "2586f75769dc9c82de31c47412f3b41076a9c55b",
            "fix_hash": "72ea0f2be8d01e1559aff14889967c8ccbf1822f",
            "description": "Hi,\n\nWe are using your library to connect/login to some Windows and Foundary devices via Telnet.\nThe source(client) is a Windows 7 professional windows machine and all the servers we are trying to connect are Windows machines running Microsoft(R) Windows(R) Server 2003, Standard Edition.\nIn version 2.2 we were able to connect and then login successfully to these devices with no issues.\nHowever, on upgrade to 3.3 version, we are unable to login to these devices successfully.\nIn v 3.3, after entering the username and hitting enter, there is no response at all. However in v 2.2, as soon as you enter the username and hit enter, password prompt comes back for us to enter the password and we are logged in successfully. \n\nI compraed the packet captures between the two versions for the same target server machine. The only difference I can see is when the user name is set, in v2.2 a '\\r' is appended to the end of the username where is v 3.3, this '\\r' is missing. Is this due to any change in library?\n\nI can provide the packet capture/logs if required. Please let us know if this is a known issue or if there are any workarounds. \n\n\n\nThanks\n-Pradeep",
            "commit number version hash": 1332,
            "commit number": 1203,
            "function that changed": [
                {
                    "function name": "write",
                    "function params": [
                        "ch"
                    ],
                    "file name": "TelnetOutputStream.java",
                    "file old path": "src/main/java/org/apache/commons/net/telnet/TelnetOutputStream.java",
                    "file new path": "src/main/java/org/apache/commons/net/telnet/TelnetOutputStream.java",
                    "full name": "src.main.java.org.apache.commons.net.telnet.TelnetOutputStream.write"
                }
            ],
            "files that changed": [
                "src/main/java/org/apache/commons/net/telnet/TelnetOutputStream.java"
            ]
        },
        {
            "bug index": "80",
            "bug id": "NET-543",
            "hexsha": "2586f75769dc9c82de31c47412f3b41076a9c55b",
            "fix_hash": "131a120d7e3fc8cedf6552f9e5fdb4ff933a7386",
            "description": "the code in Telnet::_spyRead has a bug that results in a 'reversed' EOL.\nI'm expecting SocketClient.NETASCII_EOL (\\r\\n) but I'm getting '\\n\\r'.\n\nthe code\n{noformat}\n    void _spyRead(int ch)\n    {\n        OutputStream spy = spyStream;\n        if (spy != null)\n        {\n            try\n            {\n                if (ch != '\\r')\n                {\n                    spy.write(ch);\n                    if (ch == '\\n')\n                    {\n                        spy.write('\\r');\n                    }\n                    spy.flush();\n                }\n            }\n            catch (IOException e)\n            {\n                spyStream = null;\n            }\n        }\n    }\n{noformat}\n\nshould be replaced by\n{noformat}\n    void _spyRead(int ch)\n    {\n        OutputStream spy = spyStream;\n        if (spy != null)\n        {\n            try\n            {\n                if (ch != '\\r')\n                {\n                    if (ch == '\\n')\n                    {\n                        spy.write('\\r');\n                    }\n                    spy.write(ch);\n                    spy.flush();\n                }\n            }\n            catch (IOException e)\n            {\n                spyStream = null;\n            }\n        }\n    }\n{noformat}",
            "commit number version hash": 1332,
            "commit number": 1197,
            "function that changed": [
                {
                    "function name": "_spyRead",
                    "function params": [
                        "ch"
                    ],
                    "file name": "Telnet.java",
                    "file old path": "src/main/java/org/apache/commons/net/telnet/Telnet.java",
                    "file new path": "src/main/java/org/apache/commons/net/telnet/Telnet.java",
                    "full name": "src.main.java.org.apache.commons.net.telnet.Telnet._spyRead"
                }
            ],
            "files that changed": [
                "src/main/java/org/apache/commons/net/telnet/Telnet.java"
            ]
        },
        {
            "bug index": "81",
            "bug id": "NET-539",
            "hexsha": "2586f75769dc9c82de31c47412f3b41076a9c55b",
            "fix_hash": "b26a3b41b047cdcc37aa65625075fa621d13f66e",
            "description": "Threader.pruneEmptyContainers fails with NPE if Thread.thread is invoked with an empty list\n\nThe code allows for a null list, but not an empty list.",
            "commit number version hash": 1332,
            "commit number": 1187,
            "function that changed": [
                {
                    "function name": "thread",
                    "function params": [
                        "messages"
                    ],
                    "file name": "Threader.java",
                    "file old path": "src/main/java/org/apache/commons/net/nntp/Threader.java",
                    "file new path": "src/main/java/org/apache/commons/net/nntp/Threader.java",
                    "full name": "src.main.java.org.apache.commons.net.nntp.Threader.thread"
                },
                {
                    "function name": "thread",
                    "function params": [
                        "messages"
                    ],
                    "file name": "Threader.java",
                    "file old path": "src/main/java/org/apache/commons/net/nntp/Threader.java",
                    "file new path": "src/main/java/org/apache/commons/net/nntp/Threader.java",
                    "full name": "src.main.java.org.apache.commons.net.nntp.Threader.thread"
                },
                {
                    "function name": "testEmptyArray",
                    "function params": [],
                    "file name": "TestThreader.java",
                    "file old path": null,
                    "file new path": "src/test/java/org/apache/commons/net/nntp/TestThreader.java",
                    "full name": "src.test.java.org.apache.commons.net.nntp.TestThreader.testEmptyArray"
                },
                {
                    "function name": "testNullArray",
                    "function params": [],
                    "file name": "TestThreader.java",
                    "file old path": null,
                    "file new path": "src/test/java/org/apache/commons/net/nntp/TestThreader.java",
                    "full name": "src.test.java.org.apache.commons.net.nntp.TestThreader.testNullArray"
                },
                {
                    "function name": "testEmptyList",
                    "function params": [],
                    "file name": "TestThreader.java",
                    "file old path": null,
                    "file new path": "src/test/java/org/apache/commons/net/nntp/TestThreader.java",
                    "full name": "src.test.java.org.apache.commons.net.nntp.TestThreader.testEmptyList"
                },
                {
                    "function name": "testNullList",
                    "function params": [],
                    "file name": "TestThreader.java",
                    "file old path": null,
                    "file new path": "src/test/java/org/apache/commons/net/nntp/TestThreader.java",
                    "full name": "src.test.java.org.apache.commons.net.nntp.TestThreader.testNullList"
                },
                {
                    "function name": "testNullIterable",
                    "function params": [],
                    "file name": "TestThreader.java",
                    "file old path": null,
                    "file new path": "src/test/java/org/apache/commons/net/nntp/TestThreader.java",
                    "full name": "src.test.java.org.apache.commons.net.nntp.TestThreader.testNullIterable"
                },
                {
                    "function name": "testEmptyIterable",
                    "function params": [],
                    "file name": "TestThreader.java",
                    "file old path": null,
                    "file new path": "src/test/java/org/apache/commons/net/nntp/TestThreader.java",
                    "full name": "src.test.java.org.apache.commons.net.nntp.TestThreader.testEmptyIterable"
                }
            ],
            "files that changed": [
                "src/main/java/org/apache/commons/net/nntp/Threader.java"
            ]
        },
        {
            "bug index": "91",
            "bug id": "NET-530",
            "hexsha": "2586f75769dc9c82de31c47412f3b41076a9c55b",
            "fix_hash": "b8ecb3f9fab3350ac9fbf2c0585932a804483c36",
            "description": "i noticed the the input parameter 'boolean reportReply' in method org.apache.commons.net.ftp.FTP.__getReply(boolean) is never be used. so it seemde there is no difference between org.apache.commons.net.ftp.FTP.__getReplyNoReport() and org.apache.commons.net.ftp.FTP.__getReply().\nwho could tell me why?",
            "commit number version hash": 1332,
            "commit number": 1158,
            "function that changed": [
                {
                    "function name": "__getReply",
                    "function params": [
                        "reportReply"
                    ],
                    "file name": "FTP.java",
                    "file old path": "src/main/java/org/apache/commons/net/ftp/FTP.java",
                    "file new path": "src/main/java/org/apache/commons/net/ftp/FTP.java",
                    "full name": "src.main.java.org.apache.commons.net.ftp.FTP.__getReply"
                }
            ],
            "files that changed": [
                "src/main/java/org/apache/commons/net/ftp/FTP.java"
            ]
        },
        {
            "bug index": "92",
            "bug id": "NET-529",
            "hexsha": "2586f75769dc9c82de31c47412f3b41076a9c55b",
            "fix_hash": "adfaf3ba4254d38ef80aeb5bc6fd0df6fe98380a",
            "description": "I think that xx.yy.zz.aa/0 should be accepted value by SubnetUtils, where xx.yy.zz.aa is any valid IPv4 IP address.\n\nTest case:\nSubnetUtils subnetUtils = new SubnetUtils(\"10.10.10.10/0\");\n\nHowever it throws exception:\n\njava.lang.IllegalArgumentException: Value [0] not in range (0,32]\n\torg.apache.commons.net.util.SubnetUtils.rangeCheck(SubnetUtils.java:304)\n\torg.apache.commons.net.util.SubnetUtils.calculate(SubnetUtils.java:229)\n\torg.apache.commons.net.util.SubnetUtils.<init>(SubnetUtils.java:52)\n\n(I have updated issue description from original, to reflect that issue is not only with 0.0.0.0/0)",
            "commit number version hash": 1332,
            "commit number": 1157,
            "function that changed": [
                {
                    "function name": "calculate",
                    "function params": [
                        "mask"
                    ],
                    "file name": "SubnetUtils.java",
                    "file old path": "src/main/java/org/apache/commons/net/util/SubnetUtils.java",
                    "file new path": "src/main/java/org/apache/commons/net/util/SubnetUtils.java",
                    "full name": "src.main.java.org.apache.commons.net.util.SubnetUtils.calculate"
                },
                {
                    "function name": "testInvalidMasks",
                    "function params": [],
                    "file name": "SubnetUtilsTest.java",
                    "file old path": "src/test/java/org/apache/commons/net/SubnetUtilsTest.java",
                    "file new path": "src/test/java/org/apache/commons/net/SubnetUtilsTest.java",
                    "full name": "src.test.java.org.apache.commons.net.SubnetUtilsTest.testInvalidMasks"
                }
            ],
            "files that changed": [
                "src/main/java/org/apache/commons/net/util/SubnetUtils.java",
                "src/test/java/org/apache/commons/net/SubnetUtilsTest.java"
            ]
        },
        {
            "bug index": "93",
            "bug id": "NET-516",
            "hexsha": "2586f75769dc9c82de31c47412f3b41076a9c55b",
            "fix_hash": "41dd3db34ae2c03f5b5148bcca84653055c0e3eb",
            "description": "Problem occurs if the filename contains one or more characters of which the second byte of Shift-JIS code is 0x85, on a windows Japanese machine when listing file names from IIS FTP server.\nThis was working fine in commons-net-1.4.0.jar . \n\n[This relates to the NTFTPEntryParser]",
            "commit number version hash": 1332,
            "commit number": 1155,
            "function that changed": [
                {
                    "function name": "NTFTPEntryParser",
                    "function params": [
                        "config"
                    ],
                    "file name": "NTFTPEntryParser.java",
                    "file old path": "src/main/java/org/apache/commons/net/ftp/parser/NTFTPEntryParser.java",
                    "file new path": "src/main/java/org/apache/commons/net/ftp/parser/NTFTPEntryParser.java",
                    "full name": "src.main.java.org.apache.commons.net.ftp.parser.NTFTPEntryParser.NTFTPEntryParser"
                },
                {
                    "function name": "testNET516",
                    "function params": [],
                    "file name": "NTFTPEntryParserTest.java",
                    "file old path": "src/test/java/org/apache/commons/net/ftp/parser/NTFTPEntryParserTest.java",
                    "file new path": "src/test/java/org/apache/commons/net/ftp/parser/NTFTPEntryParserTest.java",
                    "full name": "src.test.java.org.apache.commons.net.ftp.parser.NTFTPEntryParserTest.testNET516"
                },
                {
                    "function name": "testNET516",
                    "function params": [
                        "charset"
                    ],
                    "file name": "NTFTPEntryParserTest.java",
                    "file old path": "src/test/java/org/apache/commons/net/ftp/parser/NTFTPEntryParserTest.java",
                    "file new path": "src/test/java/org/apache/commons/net/ftp/parser/NTFTPEntryParserTest.java",
                    "full name": "src.test.java.org.apache.commons.net.ftp.parser.NTFTPEntryParserTest.testNET516"
                }
            ],
            "files that changed": [
                "src/main/java/org/apache/commons/net/ftp/parser/NTFTPEntryParser.java",
                "src/test/java/org/apache/commons/net/ftp/parser/NTFTPEntryParserTest.java"
            ]
        },
        {
            "bug index": "95",
            "bug id": "NET-520",
            "hexsha": "2586f75769dc9c82de31c47412f3b41076a9c55b",
            "fix_hash": "717068898a67d03b7c2435e9f16bb65aced68048",
            "description": "See NET-511 - SubnetUtils(\"0.0.0.0/0\") can now be created, but does not behave as might be expected.\n\nUnit tests needed which can then drive the fixes",
            "commit number version hash": 1332,
            "commit number": 1134,
            "function that changed": [
                {
                    "function name": "SubnetInfo",
                    "function params": [],
                    "file name": "SubnetUtils.java",
                    "file old path": "src/main/java/org/apache/commons/net/util/SubnetUtils.java",
                    "file new path": "src/main/java/org/apache/commons/net/util/SubnetUtils.java",
                    "full name": "src.main.java.org.apache.commons.net.util.SubnetUtils.SubnetInfo"
                },
                {
                    "function name": "SubnetInfo",
                    "function params": [],
                    "file name": "SubnetUtils.java",
                    "file old path": "src/main/java/org/apache/commons/net/util/SubnetUtils.java",
                    "file new path": "src/main/java/org/apache/commons/net/util/SubnetUtils.java",
                    "full name": "src.main.java.org.apache.commons.net.util.SubnetUtils.SubnetInfo"
                },
                {
                    "function name": "SubnetInfo",
                    "function params": [],
                    "file name": "SubnetUtils.java",
                    "file old path": "src/main/java/org/apache/commons/net/util/SubnetUtils.java",
                    "file new path": "src/main/java/org/apache/commons/net/util/SubnetUtils.java",
                    "full name": "src.main.java.org.apache.commons.net.util.SubnetUtils.SubnetInfo"
                },
                {
                    "function name": "SubnetInfo",
                    "function params": [],
                    "file name": "SubnetUtils.java",
                    "file old path": "src/main/java/org/apache/commons/net/util/SubnetUtils.java",
                    "file new path": "src/main/java/org/apache/commons/net/util/SubnetUtils.java",
                    "full name": "src.main.java.org.apache.commons.net.util.SubnetUtils.SubnetInfo"
                },
                {
                    "function name": "SubnetInfo",
                    "function params": [
                        "address"
                    ],
                    "file name": "SubnetUtils.java",
                    "file old path": "src/main/java/org/apache/commons/net/util/SubnetUtils.java",
                    "file new path": "src/main/java/org/apache/commons/net/util/SubnetUtils.java",
                    "full name": "src.main.java.org.apache.commons.net.util.SubnetUtils.SubnetInfo"
                },
                {
                    "function name": "SubnetInfo",
                    "function params": [],
                    "file name": "SubnetUtils.java",
                    "file old path": "src/main/java/org/apache/commons/net/util/SubnetUtils.java",
                    "file new path": "src/main/java/org/apache/commons/net/util/SubnetUtils.java",
                    "full name": "src.main.java.org.apache.commons.net.util.SubnetUtils.SubnetInfo"
                },
                {
                    "function name": "testNET520",
                    "function params": [],
                    "file name": "SubnetUtilsTest.java",
                    "file old path": "src/test/java/org/apache/commons/net/SubnetUtilsTest.java",
                    "file new path": "src/test/java/org/apache/commons/net/SubnetUtilsTest.java",
                    "full name": "src.test.java.org.apache.commons.net.SubnetUtilsTest.testNET520"
                }
            ],
            "files that changed": [
                "src/main/java/org/apache/commons/net/util/SubnetUtils.java",
                "src/test/java/org/apache/commons/net/SubnetUtilsTest.java"
            ]
        },
        {
            "bug index": "96",
            "bug id": "NET-521",
            "hexsha": "2586f75769dc9c82de31c47412f3b41076a9c55b",
            "fix_hash": "1ab1a17fd37c377d96c8b41f41178ef1498c7fb5",
            "description": "The method SubnetUtils.SubnetInfo.getAddressCount() returns an int.\n\nHowever a CIDR with 0 or 1 bits in the routing mask can represent more than Integer.MAX_VALUE entries, so the method cannot currently return the correct value.\n\nUnfortunately, if the method were changed to return a long it would break binary compatibility (the return type is part of the API signature).\n\nOne possible solution is to provide a new method which returns a long, and deprecate the old method.\n\nIf the original method cannot return the correct value, it should probably throw a runtime error.",
            "commit number version hash": 1332,
            "commit number": 1133,
            "function that changed": [
                {
                    "function name": "SubnetInfo",
                    "function params": [],
                    "file name": "SubnetUtils.java",
                    "file old path": "src/main/java/org/apache/commons/net/util/SubnetUtils.java",
                    "file new path": "src/main/java/org/apache/commons/net/util/SubnetUtils.java",
                    "full name": "src.main.java.org.apache.commons.net.util.SubnetUtils.SubnetInfo"
                },
                {
                    "function name": "SubnetInfo",
                    "function params": [],
                    "file name": "SubnetUtils.java",
                    "file old path": "src/main/java/org/apache/commons/net/util/SubnetUtils.java",
                    "file new path": "src/main/java/org/apache/commons/net/util/SubnetUtils.java",
                    "full name": "src.main.java.org.apache.commons.net.util.SubnetUtils.SubnetInfo"
                },
                {
                    "function name": "testNET521",
                    "function params": [],
                    "file name": "SubnetUtilsTest.java",
                    "file old path": "src/test/java/org/apache/commons/net/SubnetUtilsTest.java",
                    "file new path": "src/test/java/org/apache/commons/net/SubnetUtilsTest.java",
                    "full name": "src.test.java.org.apache.commons.net.SubnetUtilsTest.testNET521"
                }
            ],
            "files that changed": [
                "src/main/java/org/apache/commons/net/util/SubnetUtils.java",
                "src/test/java/org/apache/commons/net/SubnetUtilsTest.java"
            ]
        },
        {
            "bug index": "97",
            "bug id": "NET-517",
            "hexsha": "2586f75769dc9c82de31c47412f3b41076a9c55b",
            "fix_hash": "f2e08e8429dd35afbc522e72091f11e5c2731bac",
            "description": "Expected to have public modifier.",
            "commit number version hash": 1332,
            "commit number": 1131,
            "function that changed": [
                {
                    "function name": "reinitialize",
                    "function params": [],
                    "file name": "FTPClient.java",
                    "file old path": "src/main/java/org/apache/commons/net/ftp/FTPClient.java",
                    "file new path": "src/main/java/org/apache/commons/net/ftp/FTPClient.java",
                    "full name": "src.main.java.org.apache.commons.net.ftp.FTPClient.reinitialize"
                }
            ],
            "files that changed": [
                "src/main/java/org/apache/commons/net/ftp/FTPClient.java"
            ]
        },
        {
            "bug index": "98",
            "bug id": "NET-512",
            "hexsha": "2586f75769dc9c82de31c47412f3b41076a9c55b",
            "fix_hash": "7879fd6518258118611af31d826bd0791adbb5c2",
            "description": null,
            "commit number version hash": 1332,
            "commit number": 1130,
            "function that changed": [
                {
                    "function name": "isNullOrEmpty",
                    "function params": [
                        "string"
                    ],
                    "file name": "OS400FTPEntryParser.java",
                    "file old path": "src/main/java/org/apache/commons/net/ftp/parser/OS400FTPEntryParser.java",
                    "file new path": "src/main/java/org/apache/commons/net/ftp/parser/OS400FTPEntryParser.java",
                    "full name": "src.main.java.org.apache.commons.net.ftp.parser.OS400FTPEntryParser.isNullOrEmpty"
                },
                {
                    "function name": "parseFTPEntry",
                    "function params": [
                        "entry"
                    ],
                    "file name": "OS400FTPEntryParser.java",
                    "file old path": "src/main/java/org/apache/commons/net/ftp/parser/OS400FTPEntryParser.java",
                    "file new path": "src/main/java/org/apache/commons/net/ftp/parser/OS400FTPEntryParser.java",
                    "full name": "src.main.java.org.apache.commons.net.ftp.parser.OS400FTPEntryParser.parseFTPEntry"
                },
                {
                    "function name": "getBadListings",
                    "function params": [],
                    "file name": "OS400FTPEntryParserAdditionalTest.java",
                    "file old path": null,
                    "file new path": "src/test/java/org/apache/commons/net/ftp/parser/OS400FTPEntryParserAdditionalTest.java",
                    "full name": "src.test.java.org.apache.commons.net.ftp.parser.OS400FTPEntryParserAdditionalTest.getBadListings"
                },
                {
                    "function name": "testParseFieldsOnDirectory",
                    "function params": [],
                    "file name": "OS400FTPEntryParserAdditionalTest.java",
                    "file old path": null,
                    "file new path": "src/test/java/org/apache/commons/net/ftp/parser/OS400FTPEntryParserAdditionalTest.java",
                    "full name": "src.test.java.org.apache.commons.net.ftp.parser.OS400FTPEntryParserAdditionalTest.testParseFieldsOnDirectory"
                },
                {
                    "function name": "OS400FTPEntryParserAdditionalTest",
                    "function params": [
                        "name"
                    ],
                    "file name": "OS400FTPEntryParserAdditionalTest.java",
                    "file old path": null,
                    "file new path": "src/test/java/org/apache/commons/net/ftp/parser/OS400FTPEntryParserAdditionalTest.java",
                    "full name": "src.test.java.org.apache.commons.net.ftp.parser.OS400FTPEntryParserAdditionalTest.OS400FTPEntryParserAdditionalTest"
                },
                {
                    "function name": "testParseFieldsOnFile",
                    "function params": [],
                    "file name": "OS400FTPEntryParserAdditionalTest.java",
                    "file old path": null,
                    "file new path": "src/test/java/org/apache/commons/net/ftp/parser/OS400FTPEntryParserAdditionalTest.java",
                    "full name": "src.test.java.org.apache.commons.net.ftp.parser.OS400FTPEntryParserAdditionalTest.testParseFieldsOnFile"
                },
                {
                    "function name": "doAdditionalGoodTests",
                    "function params": [
                        "test",
                        "f"
                    ],
                    "file name": "OS400FTPEntryParserAdditionalTest.java",
                    "file old path": null,
                    "file new path": "src/test/java/org/apache/commons/net/ftp/parser/OS400FTPEntryParserAdditionalTest.java",
                    "full name": "src.test.java.org.apache.commons.net.ftp.parser.OS400FTPEntryParserAdditionalTest.doAdditionalGoodTests"
                },
                {
                    "function name": "getParser",
                    "function params": [],
                    "file name": "OS400FTPEntryParserAdditionalTest.java",
                    "file old path": null,
                    "file new path": "src/test/java/org/apache/commons/net/ftp/parser/OS400FTPEntryParserAdditionalTest.java",
                    "full name": "src.test.java.org.apache.commons.net.ftp.parser.OS400FTPEntryParserAdditionalTest.getParser"
                },
                {
                    "function name": "getGoodListings",
                    "function params": [],
                    "file name": "OS400FTPEntryParserAdditionalTest.java",
                    "file old path": null,
                    "file new path": "src/test/java/org/apache/commons/net/ftp/parser/OS400FTPEntryParserAdditionalTest.java",
                    "full name": "src.test.java.org.apache.commons.net.ftp.parser.OS400FTPEntryParserAdditionalTest.getGoodListings"
                }
            ],
            "files that changed": [
                "src/main/java/org/apache/commons/net/ftp/parser/OS400FTPEntryParser.java"
            ]
        },
        {
            "bug index": "99",
            "bug id": "NET-518",
            "hexsha": "2586f75769dc9c82de31c47412f3b41076a9c55b",
            "fix_hash": "476395d79f05ed4dee56d964d15aeba2928c6fe9",
            "description": "Some servers reply with 530 when requesting features before being logged in. However sending FEAT is used to determine if the server supports secured connection before attempting to login using an unsecured connection.\n\nDue to the caching of the empty map subsequent feature detection fails.",
            "commit number version hash": 1332,
            "commit number": 1129,
            "function that changed": [
                {
                    "function name": "initFeatureMap",
                    "function params": [],
                    "file name": "FTPClient.java",
                    "file old path": "src/main/java/org/apache/commons/net/ftp/FTPClient.java",
                    "file new path": "src/main/java/org/apache/commons/net/ftp/FTPClient.java",
                    "full name": "src.main.java.org.apache.commons.net.ftp.FTPClient.initFeatureMap"
                }
            ],
            "files that changed": [
                "src/main/java/org/apache/commons/net/ftp/FTPClient.java"
            ]
        },
        {
            "bug index": "100",
            "bug id": "NET-511",
            "hexsha": "2586f75769dc9c82de31c47412f3b41076a9c55b",
            "fix_hash": "9d090d40ef488c6c8e0784da877b93a05034e339",
            "description": "The following example in SubnetUtils throws an exception:\n\n{code:java}\nSubnetUtils utils = new SubnetUtils(\"0.0.0.0/0\");\n{code}\n\nAs '0.0.0.0/0' is within the IPv4 specification, it should be supported.",
            "commit number version hash": 1332,
            "commit number": 1126,
            "function that changed": [
                {
                    "function name": "calculate",
                    "function params": [
                        "mask"
                    ],
                    "file name": "SubnetUtils.java",
                    "file old path": "src/main/java/org/apache/commons/net/util/SubnetUtils.java",
                    "file new path": "src/main/java/org/apache/commons/net/util/SubnetUtils.java",
                    "full name": "src.main.java.org.apache.commons.net.util.SubnetUtils.calculate"
                },
                {
                    "function name": "testZeroAddressAndCidr",
                    "function params": [],
                    "file name": "SubnetUtilsTest.java",
                    "file old path": "src/test/java/org/apache/commons/net/SubnetUtilsTest.java",
                    "file new path": "src/test/java/org/apache/commons/net/SubnetUtilsTest.java",
                    "full name": "src.test.java.org.apache.commons.net.SubnetUtilsTest.testZeroAddressAndCidr"
                }
            ],
            "files that changed": [
                "src/main/java/org/apache/commons/net/util/SubnetUtils.java",
                "src/test/java/org/apache/commons/net/SubnetUtilsTest.java"
            ]
        },
        {
            "bug index": "101",
            "bug id": "NET-514",
            "hexsha": "2586f75769dc9c82de31c47412f3b41076a9c55b",
            "fix_hash": "5e305c6a2c7d0e3d2dfc9c07a702167f55944373",
            "description": "There are multiple issues in the way APPEND is handled in IMapClient.\n\n1) According to RFC3501 [1] the date-time field in an APPEND command is enclosed in double quotes. The code currently uses { } which is incorrect\n\n2) The APPEND command has the following arguments [2]:\n\nArguments:  mailbox name\n           OPTIONAL flag parenthesized list\n           OPTIONAL date/time string\n           message literal\n\nHowever, the existing methods don't support the message literal; there needs to be a method that supports the message literal. The existing methods should be deprecated as they serve no purpose.\n\n[1] http://tools.ietf.org/html/rfc3501#page-85\n[2] http://tools.ietf.org/html/rfc3501#section-6.3.11",
            "commit number version hash": 1332,
            "commit number": 1122,
            "function that changed": [
                {
                    "function name": "process",
                    "function params": [
                        "sb",
                        "imap",
                        "folder"
                    ],
                    "file name": "IMAPImportMbox.java",
                    "file old path": null,
                    "file new path": "src/main/java/examples/mail/IMAPImportMbox.java",
                    "full name": "src.main.java.examples.mail.IMAPImportMbox.process"
                },
                {
                    "function name": "main",
                    "function params": [
                        "args"
                    ],
                    "file name": "IMAPImportMbox.java",
                    "file old path": null,
                    "file new path": "src/main/java/examples/mail/IMAPImportMbox.java",
                    "full name": "src.main.java.examples.mail.IMAPImportMbox.main"
                },
                {
                    "function name": "append",
                    "function params": [
                        "mailboxName",
                        "flags",
                        "datetime",
                        "message"
                    ],
                    "file name": "IMAPClient.java",
                    "file old path": "src/main/java/org/apache/commons/net/imap/IMAPClient.java",
                    "file new path": "src/main/java/org/apache/commons/net/imap/IMAPClient.java",
                    "full name": "src.main.java.org.apache.commons.net.imap.IMAPClient.append"
                }
            ],
            "files that changed": [
                "src/main/java/org/apache/commons/net/imap/IMAPClient.java"
            ]
        },
        {
            "bug index": "102",
            "bug id": "NET-509",
            "hexsha": "bcba9364c60b6b24dc916b1f30af6912c73949e6",
            "fix_hash": "09472a2175e4717846bff4d4d9f29c791833a693",
            "description": "AuthenticatingSMTPClient extends SMTPSClient but does not have a constructor with the isImplicit argument.\nBecause of this we can not connect to a SSL SMTP server that requires authentication.\nAccording to the SMTPSClient javadoc :\n{quote}\nIn explicit mode (the default), SSL/TLS\n * negotiation starts when the user calls execTLS() and the server accepts the command.\n\n Implicit usage:\n               SMTPSClient c = new SMTPSClient(true);\n               c.connect(\"127.0.0.1\", 465);\n Explicit usage:\n               SMTPSClient c = new SMTPSClient();\n               c.connect(\"127.0.0.1\", 25);\n               if (c.execTLS()) { /rest of the commands here/ }\n\n{quote} \nSo all in all, we could think this is not important to have a constructor without the isImplicit argument, since we can go the c.execTLS() way.\nBut here is what happens when you use the explicit usage with AuthenticatingSMTPClient and a SSL connection (works fine with STARTTLS btw) : when you call connect(), SMTP.__getReply() is eventually called, and line 196 :\n{code}\n        String line = _reader.readLine();\n{code}\nis waiting for the SMTP server to reply... BUT the smtp client did not yet initiate the SSL connection; so we just wait for the timeout to occur (since the server won't reply anything before the SSL connection is initialized).\nAnd if we try to call execTls() before connect(), we get a NPE because the writer is not set yet.\n\nI have attached a simple patch to make AuthenticatingSMTPClient works with SSL connections (again it works fine with STARTTLS already)",
            "commit number version hash": 1120,
            "commit number": 1118,
            "function that changed": [
                {
                    "function name": "AuthenticatingSMTPClient",
                    "function params": [
                        "proto",
                        "implicit"
                    ],
                    "file name": "AuthenticatingSMTPClient.java",
                    "file old path": "src/main/java/org/apache/commons/net/smtp/AuthenticatingSMTPClient.java",
                    "file new path": "src/main/java/org/apache/commons/net/smtp/AuthenticatingSMTPClient.java",
                    "full name": "src.main.java.org.apache.commons.net.smtp.AuthenticatingSMTPClient.AuthenticatingSMTPClient"
                },
                {
                    "function name": "AuthenticatingSMTPClient",
                    "function params": [
                        "proto",
                        "implicit",
                        "encoding"
                    ],
                    "file name": "AuthenticatingSMTPClient.java",
                    "file old path": "src/main/java/org/apache/commons/net/smtp/AuthenticatingSMTPClient.java",
                    "file new path": "src/main/java/org/apache/commons/net/smtp/AuthenticatingSMTPClient.java",
                    "full name": "src.main.java.org.apache.commons.net.smtp.AuthenticatingSMTPClient.AuthenticatingSMTPClient"
                },
                {
                    "function name": "AuthenticatingSMTPClient",
                    "function params": [
                        "implicit",
                        "ctx"
                    ],
                    "file name": "AuthenticatingSMTPClient.java",
                    "file old path": "src/main/java/org/apache/commons/net/smtp/AuthenticatingSMTPClient.java",
                    "file new path": "src/main/java/org/apache/commons/net/smtp/AuthenticatingSMTPClient.java",
                    "full name": "src.main.java.org.apache.commons.net.smtp.AuthenticatingSMTPClient.AuthenticatingSMTPClient"
                }
            ],
            "files that changed": [
                "src/main/java/org/apache/commons/net/smtp/AuthenticatingSMTPClient.java"
            ]
        },
        {
            "bug index": "103",
            "bug id": "NET-501",
            "hexsha": "bcba9364c60b6b24dc916b1f30af6912c73949e6",
            "fix_hash": "3d5e169b975731cb028a7974d81e7be0f2f60282",
            "description": "I'm getting the following exception while disconnecting a threaded (readerThread=true) TelnetClient connection. \n\n{code}\nException in thread \"Thread-160\" java.lang.IllegalStateException: Queue is full! Cannot process another character. \n\tat org.apache.commons.net.telnet.TelnetInputStream.__processChar(TelnetInputStream.java:339)\n\tat org.apache.commons.net.telnet.TelnetInputStream.run(TelnetInputStream.java:647)\n\tat java.lang.Thread.run(Thread.java:722)\n{code}\n\nI noticed that when TelnetClient.disconnect() is called the attribute __threaded is set to false while the thread in the TelnetInputStream.run() method could call TelnetInputStream().__processChar(...) throwing IllegalStateException\n\n\nThis is a test program to reproduce the issue\n\n{code}\npublic class TestTelnetClient implements Runnable {\n\n\t/**\n\t * @param args\n\t */\n\tpublic static void main(String[] args) {\n\t\tArrayList<Thread> workers = new ArrayList<Thread>();\n\t\tfor( int i=0; i<1000; ++i){\n\t\t\tThread t = new Thread ( new TestTelnetClient() );\n\t\t\tt.start();\n\t\t\tworkers.add(t);\n\t\t}\n\t\tfor (Thread t : workers ) {\t\t\t\n\t\t\ttry {\n\t\t\t\tt.join();\t\t\t\n\t\t\t} catch (InterruptedException e) {\n\t\t\t\te.printStackTrace();\n\t\t\t}\n\t\t}\t\t\t\n\n\t}\n\n\t@Override\n\tpublic void run() {\n\t\tSystem.out.println(\"Starting thread...\");\n\t\tTelnetClient tc = new TelnetClient();\n//\t\ttc.setReaderThread(false);\n\t\ttry {\n\t\t\ttc.connect(\"localhost\", 23);\n\t\t\ttc.setSoTimeout(1000);\n\t\t\tInputStream in = tc.getInputStream();\n\t\t\tint ch;\n\t\t\tin.read();\n\t\t} catch (SocketException e) {\n\t\t\te.printStackTrace();\n\t\t} catch (IOException e) {\n\t\t\te.printStackTrace();\n\t\t} finally {\n\t\t\tSystem.out.println(\"Disconnecting...\");\n\t\t\ttry {\n\t\t\t\ttc.disconnect();\n\t\t\t} catch (IOException e) {\n\t\t\t\t// TODO Auto-generated catch block\n\t\t\t\te.printStackTrace();\n\t\t\t}\n\t\t}\n\t\t\n\t}\n\n}\n{code}\n\nA telnet server (telnetd) is required. I also modified the initial banner ( /etc/issue.net ) with a lot of characters to get a better chance to receive information while calling disconnect.",
            "commit number version hash": 1120,
            "commit number": 1117,
            "function that changed": [
                {
                    "function name": "close",
                    "function params": [],
                    "file name": "TelnetInputStream.java",
                    "file old path": "src/main/java/org/apache/commons/net/telnet/TelnetInputStream.java",
                    "file new path": "src/main/java/org/apache/commons/net/telnet/TelnetInputStream.java",
                    "full name": "src.main.java.org.apache.commons.net.telnet.TelnetInputStream.close"
                }
            ],
            "files that changed": [
                "src/main/java/org/apache/commons/net/telnet/TelnetInputStream.java"
            ]
        },
        {
            "bug index": "104",
            "bug id": "NET-505",
            "hexsha": "bcba9364c60b6b24dc916b1f30af6912c73949e6",
            "fix_hash": "e25ab319c95f4f2bf76815a9eb6df20be1cdc111",
            "description": "The __bufferSize member variable is reset in the __initDefaults() method. This method is called from the FTPClient's constructor, _connectAction_, reinitialize, and disconnect. This can happen when the FTPClient is re-used after the remote server closes a session due to a timeout, for example. \n\nIf the bufferSize is set by the user via the setBufferSize() method, the value is lost when the buffer size is reset. Since the default buffer size controls the amount read from the input stream and written to the output stream, and is so low by default (1024B as defined by Util.DEFAULT_BUFFER_SIZE) the performance of FTPClient drops dramatically.\n\nThe recommendation would be to initialize __bufferSize to zero when it is declared and then remove the assignment in __initDefaults().",
            "commit number version hash": 1120,
            "commit number": 1114,
            "function that changed": [
                {
                    "function name": "__initDefaults",
                    "function params": [],
                    "file name": "FTPClient.java",
                    "file old path": "src/main/java/org/apache/commons/net/ftp/FTPClient.java",
                    "file new path": "src/main/java/org/apache/commons/net/ftp/FTPClient.java",
                    "full name": "src.main.java.org.apache.commons.net.ftp.FTPClient.__initDefaults"
                }
            ],
            "files that changed": [
                "src/main/java/org/apache/commons/net/ftp/FTPClient.java"
            ]
        },
        {
            "bug index": "107",
            "bug id": "NET-503",
            "hexsha": "bcba9364c60b6b24dc916b1f30af6912c73949e6",
            "fix_hash": "6efd0220ab3f3735cddeb7703f0049bd1ff26d3f",
            "description": "The AuthenticatingSMTPClient and SMTPSClient do not support any encoding aside from the default encoding of ISO-8859-1 defined in SMTP.\nThis is because the encoding field is final and can only be set in the constructor, but there is not constructor in these classes that allows specifying the encoding. There is one in the base SMTPClient class, but not in the super classes.",
            "commit number version hash": 1120,
            "commit number": 1098,
            "function that changed": [
                {
                    "function name": "AuthenticatingSMTPClient",
                    "function params": [
                        "protocol",
                        "encoding"
                    ],
                    "file name": "AuthenticatingSMTPClient.java",
                    "file old path": "src/main/java/org/apache/commons/net/smtp/AuthenticatingSMTPClient.java",
                    "file new path": "src/main/java/org/apache/commons/net/smtp/AuthenticatingSMTPClient.java",
                    "full name": "src.main.java.org.apache.commons.net.smtp.AuthenticatingSMTPClient.AuthenticatingSMTPClient"
                },
                {
                    "function name": "SMTPSClient",
                    "function params": [
                        "proto",
                        "implicit",
                        "encoding"
                    ],
                    "file name": "SMTPSClient.java",
                    "file old path": "src/main/java/org/apache/commons/net/smtp/SMTPSClient.java",
                    "file new path": "src/main/java/org/apache/commons/net/smtp/SMTPSClient.java",
                    "full name": "src.main.java.org.apache.commons.net.smtp.SMTPSClient.SMTPSClient"
                }
            ],
            "files that changed": [
                "src/main/java/org/apache/commons/net/smtp/AuthenticatingSMTPClient.java",
                "src/main/java/org/apache/commons/net/smtp/SMTPSClient.java"
            ]
        },
        {
            "bug index": "108",
            "bug id": "NET-502",
            "hexsha": "bcba9364c60b6b24dc916b1f30af6912c73949e6",
            "fix_hash": "d94fff12abc67d2ff61f89d8ea4f938ac34af565",
            "description": "Common FTP servers (like vsftpd) responses' to PWD don't have a commentary as per RFC959.\n\nvsftpd, MockFtpServer and others respond thusly:\n\n> 257 \"/\"\n\nThe current handling in FTPClient.__parsePathname simply returns everything after \"257 \". This breaks other code that relies on Apache FTPClient, like the Camel FTP2 component.\n\nI suggest that, for increased resilience, this brief response be special-cased.\n\nvsftpd maintainer has been notified too, but it's just an email address.",
            "commit number version hash": 1120,
            "commit number": 1097,
            "function that changed": [],
            "files that changed": [
                "src/test/java/org/apache/commons/net/ftp/FTPClientTest.java"
            ]
        },
        {
            "bug index": "109",
            "bug id": "NET-465",
            "hexsha": "bcba9364c60b6b24dc916b1f30af6912c73949e6",
            "fix_hash": "2fe4a2e0c0ac3c0ad1a43a4da97d1fe109c96491",
            "description": "When sending large files the need to set the send and receive buffer sizes on the data socket is much more important than the command socket.  Please either give 2 more setters or make the setters set the data socket and leave the command socket alone.",
            "commit number version hash": 1120,
            "commit number": 1090,
            "function that changed": [
                {
                    "function name": "getReceiveDataSocketBufferSize",
                    "function params": [],
                    "file name": "FTPClient.java",
                    "file old path": "src/main/java/org/apache/commons/net/ftp/FTPClient.java",
                    "file new path": "src/main/java/org/apache/commons/net/ftp/FTPClient.java",
                    "full name": "src.main.java.org.apache.commons.net.ftp.FTPClient.getReceiveDataSocketBufferSize"
                },
                {
                    "function name": "getSendDataSocketBufferSize",
                    "function params": [],
                    "file name": "FTPClient.java",
                    "file old path": "src/main/java/org/apache/commons/net/ftp/FTPClient.java",
                    "file new path": "src/main/java/org/apache/commons/net/ftp/FTPClient.java",
                    "full name": "src.main.java.org.apache.commons.net.ftp.FTPClient.getSendDataSocketBufferSize"
                },
                {
                    "function name": "__initDefaults",
                    "function params": [],
                    "file name": "FTPClient.java",
                    "file old path": "src/main/java/org/apache/commons/net/ftp/FTPClient.java",
                    "file new path": "src/main/java/org/apache/commons/net/ftp/FTPClient.java",
                    "full name": "src.main.java.org.apache.commons.net.ftp.FTPClient.__initDefaults"
                },
                {
                    "function name": "setSendDataSocketBufferSize",
                    "function params": [
                        "bufSize"
                    ],
                    "file name": "FTPClient.java",
                    "file old path": "src/main/java/org/apache/commons/net/ftp/FTPClient.java",
                    "file new path": "src/main/java/org/apache/commons/net/ftp/FTPClient.java",
                    "full name": "src.main.java.org.apache.commons.net.ftp.FTPClient.setSendDataSocketBufferSize"
                },
                {
                    "function name": "setReceieveDataSocketBufferSize",
                    "function params": [
                        "bufSize"
                    ],
                    "file name": "FTPClient.java",
                    "file old path": "src/main/java/org/apache/commons/net/ftp/FTPClient.java",
                    "file new path": "src/main/java/org/apache/commons/net/ftp/FTPClient.java",
                    "full name": "src.main.java.org.apache.commons.net.ftp.FTPClient.setReceieveDataSocketBufferSize"
                },
                {
                    "function name": "_openDataConnection_",
                    "function params": [
                        "command",
                        "arg"
                    ],
                    "file name": "FTPClient.java",
                    "file old path": "src/main/java/org/apache/commons/net/ftp/FTPClient.java",
                    "file new path": "src/main/java/org/apache/commons/net/ftp/FTPClient.java",
                    "full name": "src.main.java.org.apache.commons.net.ftp.FTPClient._openDataConnection_"
                }
            ],
            "files that changed": [
                "src/main/java/org/apache/commons/net/ftp/FTPClient.java"
            ]
        },
        {
            "bug index": "111",
            "bug id": "NET-480",
            "hexsha": "bcba9364c60b6b24dc916b1f30af6912c73949e6",
            "fix_hash": "e75b2edd53d840e1163e9eb1715ef304596f69c6",
            "description": "At the FTPHTTPClient Class in line 99 the Answer from the EPSV Command will parse to receive the Data port and the passiv Host.\n\\_parsePassiveModeReply(\\_replyLines.get(0))\nIn this function the \\_\\_passivHost is set to the remoteAddress, but this address is determine by \"this.\\_socket\\_.getInetAddress();\" and the socket is the socket of the proxy Server and NOT of the ftp Server.\n\n\n",
            "commit number version hash": 1120,
            "commit number": 1084,
            "function that changed": [
                {
                    "function name": "_openDataConnection_",
                    "function params": [
                        "command",
                        "arg"
                    ],
                    "file name": "FTPHTTPClient.java",
                    "file old path": "src/main/java/org/apache/commons/net/ftp/FTPHTTPClient.java",
                    "file new path": "src/main/java/org/apache/commons/net/ftp/FTPHTTPClient.java",
                    "full name": "src.main.java.org.apache.commons.net.ftp.FTPHTTPClient._openDataConnection_"
                },
                {
                    "function name": "tunnelHandshake",
                    "function params": [
                        "host",
                        "port",
                        "input",
                        "output"
                    ],
                    "file name": "FTPHTTPClient.java",
                    "file old path": "src/main/java/org/apache/commons/net/ftp/FTPHTTPClient.java",
                    "file new path": "src/main/java/org/apache/commons/net/ftp/FTPHTTPClient.java",
                    "full name": "src.main.java.org.apache.commons.net.ftp.FTPHTTPClient.tunnelHandshake"
                },
                {
                    "function name": "FTPHTTPClient",
                    "function params": [
                        "proxyHost",
                        "proxyPort",
                        "proxyUser",
                        "proxyPass"
                    ],
                    "file name": "FTPHTTPClient.java",
                    "file old path": "src/main/java/org/apache/commons/net/ftp/FTPHTTPClient.java",
                    "file new path": "src/main/java/org/apache/commons/net/ftp/FTPHTTPClient.java",
                    "full name": "src.main.java.org.apache.commons.net.ftp.FTPHTTPClient.FTPHTTPClient"
                }
            ],
            "files that changed": [
                "src/main/java/org/apache/commons/net/ftp/FTPHTTPClient.java"
            ]
        },
        {
            "bug index": "112",
            "bug id": "NET-494",
            "hexsha": "bcba9364c60b6b24dc916b1f30af6912c73949e6",
            "fix_hash": "aec7c943a7f797fa0c28a525a98964593bec89ae",
            "description": "The CSL class temporarily resets the socket timeout.\n\nThe cleanUp() method restores the original setting, however this may be skipped if an exception occurs.\n\nThe code should ensure that the original setting is always restored.",
            "commit number version hash": 1120,
            "commit number": 1080,
            "function that changed": [
                {
                    "function name": "_retrieveFile",
                    "function params": [
                        "command",
                        "remote",
                        "local"
                    ],
                    "file name": "FTPClient.java",
                    "file old path": "src/main/java/org/apache/commons/net/ftp/FTPClient.java",
                    "file new path": "src/main/java/org/apache/commons/net/ftp/FTPClient.java",
                    "full name": "src.main.java.org.apache.commons.net.ftp.FTPClient._retrieveFile"
                },
                {
                    "function name": "CSL",
                    "function params": [],
                    "file name": "FTPClient.java",
                    "file old path": "src/main/java/org/apache/commons/net/ftp/FTPClient.java",
                    "file new path": "src/main/java/org/apache/commons/net/ftp/FTPClient.java",
                    "full name": "src.main.java.org.apache.commons.net.ftp.FTPClient.CSL"
                },
                {
                    "function name": "_storeFile",
                    "function params": [
                        "command",
                        "remote",
                        "local"
                    ],
                    "file name": "FTPClient.java",
                    "file old path": "src/main/java/org/apache/commons/net/ftp/FTPClient.java",
                    "file new path": "src/main/java/org/apache/commons/net/ftp/FTPClient.java",
                    "full name": "src.main.java.org.apache.commons.net.ftp.FTPClient._storeFile"
                }
            ],
            "files that changed": [
                "src/main/java/org/apache/commons/net/ftp/FTPClient.java"
            ]
        },
        {
            "bug index": "113",
            "bug id": "NET-492",
            "hexsha": "bcba9364c60b6b24dc916b1f30af6912c73949e6",
            "fix_hash": "79253380a13362b631285a427b08f70aef54fa64",
            "description": "The new implementation of FTPClient.printWorkingDirectory() which tries to follow RFC959 is invalid and can return unescaped or invalid path in certain circumstances. According to the commentary, the author interpreted the RFC that the output is always constructed in the following way:\n\n257<space>\"<directory-name>\"<space><commentary>\nWhere any double quotes within the directory name are doubled.\n\nFirst issue: the RFC does not state that the output for PWD looks exactly like this, but that the reply code is the same, as for MKD. Especially, PWD does not return any commentary, and VSFTPD server (which I'm trying to talk to) does not print out the terminating space, but ends up the output on the last double quote. The algorithm uses the following code to detect the end of the quoted path:\n\nint end = reply.lastIndexOf(\"\\\" \");\n\nIf there is no terminating space, the last double quote cannot be found, and as a result, the method returns the unescaped directory name:\n\n\"/foo\"\n\ninstead of\n\n/foo\n\nSecond issue: the current implementation would not work in case of the following directory:\n\n/Foo/Bar\" /Joe\n\nPWD command output:\n\n257 \"/Foo/Bar\"\" /Joe\"\n\nValue returned by printWorkingDirectory():\n\n/Foo/Bar\"\n\nNote to the administrators: the problem has been found in commons-net 3.2 version, but JIRA claims it is unreleased and does not allow me to choose it.",
            "commit number version hash": 1120,
            "commit number": 1079,
            "function that changed": [
                {
                    "function name": "__parsePathname",
                    "function params": [
                        "reply"
                    ],
                    "file name": "FTPClient.java",
                    "file old path": "src/main/java/org/apache/commons/net/ftp/FTPClient.java",
                    "file new path": "src/main/java/org/apache/commons/net/ftp/FTPClient.java",
                    "full name": "src.main.java.org.apache.commons.net.ftp.FTPClient.__parsePathname"
                },
                {
                    "function name": "FTPClientTest",
                    "function params": [
                        "name"
                    ],
                    "file name": "FTPClientTest.java",
                    "file old path": null,
                    "file new path": "src/test/java/org/apache/commons/net/ftp/FTPClientTest.java",
                    "full name": "src.test.java.org.apache.commons.net.ftp.FTPClientTest.FTPClientTest"
                },
                {
                    "function name": "testParseClient",
                    "function params": [],
                    "file name": "FTPClientTest.java",
                    "file old path": null,
                    "file new path": "src/test/java/org/apache/commons/net/ftp/FTPClientTest.java",
                    "full name": "src.test.java.org.apache.commons.net.ftp.FTPClientTest.testParseClient"
                }
            ],
            "files that changed": [
                "src/main/java/org/apache/commons/net/ftp/FTPClient.java"
            ]
        },
        {
            "bug index": "114",
            "bug id": "NET-492",
            "hexsha": "bcba9364c60b6b24dc916b1f30af6912c73949e6",
            "fix_hash": "ac65ef8457de014462967ee6d9354ed43cace618",
            "description": "The new implementation of FTPClient.printWorkingDirectory() which tries to follow RFC959 is invalid and can return unescaped or invalid path in certain circumstances. According to the commentary, the author interpreted the RFC that the output is always constructed in the following way:\n\n257<space>\"<directory-name>\"<space><commentary>\nWhere any double quotes within the directory name are doubled.\n\nFirst issue: the RFC does not state that the output for PWD looks exactly like this, but that the reply code is the same, as for MKD. Especially, PWD does not return any commentary, and VSFTPD server (which I'm trying to talk to) does not print out the terminating space, but ends up the output on the last double quote. The algorithm uses the following code to detect the end of the quoted path:\n\nint end = reply.lastIndexOf(\"\\\" \");\n\nIf there is no terminating space, the last double quote cannot be found, and as a result, the method returns the unescaped directory name:\n\n\"/foo\"\n\ninstead of\n\n/foo\n\nSecond issue: the current implementation would not work in case of the following directory:\n\n/Foo/Bar\" /Joe\n\nPWD command output:\n\n257 \"/Foo/Bar\"\" /Joe\"\n\nValue returned by printWorkingDirectory():\n\n/Foo/Bar\"\n\nNote to the administrators: the problem has been found in commons-net 3.2 version, but JIRA claims it is unreleased and does not allow me to choose it.",
            "commit number version hash": 1120,
            "commit number": 1077,
            "function that changed": [
                {
                    "function name": "__parsePathname",
                    "function params": [
                        "reply"
                    ],
                    "file name": "FTPClient.java",
                    "file old path": "src/main/java/org/apache/commons/net/ftp/FTPClient.java",
                    "file new path": "src/main/java/org/apache/commons/net/ftp/FTPClient.java",
                    "full name": "src.main.java.org.apache.commons.net.ftp.FTPClient.__parsePathname"
                }
            ],
            "files that changed": [
                "src/main/java/org/apache/commons/net/ftp/FTPClient.java"
            ]
        },
        {
            "bug index": "115",
            "bug id": "NET-492",
            "hexsha": "bcba9364c60b6b24dc916b1f30af6912c73949e6",
            "fix_hash": "efed269e52de3d7dc9733b9d47408526bff25a7f",
            "description": "The new implementation of FTPClient.printWorkingDirectory() which tries to follow RFC959 is invalid and can return unescaped or invalid path in certain circumstances. According to the commentary, the author interpreted the RFC that the output is always constructed in the following way:\n\n257<space>\"<directory-name>\"<space><commentary>\nWhere any double quotes within the directory name are doubled.\n\nFirst issue: the RFC does not state that the output for PWD looks exactly like this, but that the reply code is the same, as for MKD. Especially, PWD does not return any commentary, and VSFTPD server (which I'm trying to talk to) does not print out the terminating space, but ends up the output on the last double quote. The algorithm uses the following code to detect the end of the quoted path:\n\nint end = reply.lastIndexOf(\"\\\" \");\n\nIf there is no terminating space, the last double quote cannot be found, and as a result, the method returns the unescaped directory name:\n\n\"/foo\"\n\ninstead of\n\n/foo\n\nSecond issue: the current implementation would not work in case of the following directory:\n\n/Foo/Bar\" /Joe\n\nPWD command output:\n\n257 \"/Foo/Bar\"\" /Joe\"\n\nValue returned by printWorkingDirectory():\n\n/Foo/Bar\"\n\nNote to the administrators: the problem has been found in commons-net 3.2 version, but JIRA claims it is unreleased and does not allow me to choose it.",
            "commit number version hash": 1120,
            "commit number": 1075,
            "function that changed": [
                {
                    "function name": "__parsePathname",
                    "function params": [
                        "reply"
                    ],
                    "file name": "FTPClient.java",
                    "file old path": "src/main/java/org/apache/commons/net/ftp/FTPClient.java",
                    "file new path": "src/main/java/org/apache/commons/net/ftp/FTPClient.java",
                    "full name": "src.main.java.org.apache.commons.net.ftp.FTPClient.__parsePathname"
                }
            ],
            "files that changed": [
                "src/main/java/org/apache/commons/net/ftp/FTPClient.java"
            ]
        },
        {
            "bug index": "118",
            "bug id": "NET-46",
            "hexsha": "87058fcc14851401368176e34ccbe07688513c60",
            "fix_hash": "1f696bb27bd7045f6361f4ab6f131e60a7d52ee2",
            "description": "For my application I need a way to get the InputStream of a binary file on a\nFTPServer. What I did was :\n\n// connect and get ftpFiles as an array\n// for each ftpFile ...\n\nInputStream is = ftp.retrieveFileStream(ftpFiles[i].getName());\n\nHowever, this behaves erratically : sometimes the inputstream is correct and\nsometimes it is null (and the ftpFile exists, no weird name or anything odd\nabout it).\n\nAfter first blaming my FTPServer (I use GuildFTPd 0.9.9.13) I tried another\nFTPServer (Serv-U 6.1), but this also had the same behavior. \n\nThen I thought I might have to do with timing. So I tried Thread.sleep(xxx) on a\ncouple of locations but to no avail. In a last attempt (was getting pretty\ndesperate :) ) I rewrote my original line and replaced it by this :\n\nByteArrayOutputStream out = new ByteArrayOutputStream();\nftp.retrieveFile(ftpFiles[i].getName(),out);\nInputStream is = new ByteArrayInputStream(out.toByteArray());\n\nAnd much to my surprise, it worked like a charm. Tested it a couple of times (on\nboth FTPServer products) and works perfectly.\n\nSo I'm guessing something is going wrong in your retrieveFileStream\nimplementation. Maybe something worth looking into ? (easiest fix : use the\nByteArrayOut/InputStream swap :)).\n\nkind regards,\n\nDennis",
            "commit number version hash": 1073,
            "commit number": 1063,
            "function that changed": [
                {
                    "function name": "_openDataConnection_",
                    "function params": [
                        "command",
                        "arg"
                    ],
                    "file name": "FTPClient.java",
                    "file old path": "src/main/java/org/apache/commons/net/ftp/FTPClient.java",
                    "file new path": "src/main/java/org/apache/commons/net/ftp/FTPClient.java",
                    "full name": "src.main.java.org.apache.commons.net.ftp.FTPClient._openDataConnection_"
                }
            ],
            "files that changed": [
                "src/main/java/org/apache/commons/net/ftp/FTPClient.java"
            ]
        },
        {
            "bug index": "120",
            "bug id": "NET-485",
            "hexsha": "87058fcc14851401368176e34ccbe07688513c60",
            "fix_hash": "54b53793a5f46eed7648ff3d2236eb114c4f1121",
            "description": "There are two methods in Base64 which are left-overs from Commons Codec.\nThey were intended to support the Encoder and Decoder interfaces which are not used in Commons NET.\n\nThe following methods should be deleted:\n\nBase64#decode(Object)\nBase64#encode(Object)",
            "commit number version hash": 1073,
            "commit number": 1059,
            "function that changed": [
                {
                    "function name": "decode",
                    "function params": [
                        "pObject"
                    ],
                    "file name": "Base64.java",
                    "file old path": "src/main/java/org/apache/commons/net/util/Base64.java",
                    "file new path": "src/main/java/org/apache/commons/net/util/Base64.java",
                    "full name": "src.main.java.org.apache.commons.net.util.Base64.decode"
                },
                {
                    "function name": "encode",
                    "function params": [
                        "pObject"
                    ],
                    "file name": "Base64.java",
                    "file old path": "src/main/java/org/apache/commons/net/util/Base64.java",
                    "file new path": "src/main/java/org/apache/commons/net/util/Base64.java",
                    "full name": "src.main.java.org.apache.commons.net.util.Base64.encode"
                }
            ],
            "files that changed": [
                "src/main/java/org/apache/commons/net/util/Base64.java"
            ]
        },
        {
            "bug index": "121",
            "bug id": "NET-483",
            "hexsha": "87058fcc14851401368176e34ccbe07688513c60",
            "fix_hash": "4bb2f5f1a66f4fa8059941549cc6eea53a19286c",
            "description": "The method Base64.encodeBase64(byte[] binaryData, boolean isChunked, boolean urlSafe, int maxResultSize) fails to calculate the output size correctly for unchunked output.\n\nThis is because it assumes all output is chunked.",
            "commit number version hash": 1073,
            "commit number": 1056,
            "function that changed": [
                {
                    "function name": "getLineLength",
                    "function params": [],
                    "file name": "Base64.java",
                    "file old path": "src/main/java/org/apache/commons/net/util/Base64.java",
                    "file new path": "src/main/java/org/apache/commons/net/util/Base64.java",
                    "full name": "src.main.java.org.apache.commons.net.util.Base64.getLineLength"
                },
                {
                    "function name": "encodeBase64",
                    "function params": [
                        "binaryData",
                        "isChunked",
                        "urlSafe",
                        "maxResultSize"
                    ],
                    "file name": "Base64.java",
                    "file old path": "src/main/java/org/apache/commons/net/util/Base64.java",
                    "file new path": "src/main/java/org/apache/commons/net/util/Base64.java",
                    "full name": "src.main.java.org.apache.commons.net.util.Base64.encodeBase64"
                },
                {
                    "function name": "getLineSeparator",
                    "function params": [],
                    "file name": "Base64.java",
                    "file old path": "src/main/java/org/apache/commons/net/util/Base64.java",
                    "file new path": "src/main/java/org/apache/commons/net/util/Base64.java",
                    "full name": "src.main.java.org.apache.commons.net.util.Base64.getLineSeparator"
                },
                {
                    "function name": "testEncodeBase64Chunked",
                    "function params": [],
                    "file name": "Base64Test.java",
                    "file old path": null,
                    "file new path": "src/test/java/org/apache/commons/net/util/Base64Test.java",
                    "full name": "src.test.java.org.apache.commons.net.util.Base64Test.testEncodeBase64Chunked"
                },
                {
                    "function name": "testIsBase64",
                    "function params": [],
                    "file name": "Base64Test.java",
                    "file old path": null,
                    "file new path": "src/test/java/org/apache/commons/net/util/Base64Test.java",
                    "full name": "src.test.java.org.apache.commons.net.util.Base64Test.testIsBase64"
                },
                {
                    "function name": "testEncodeBase64ByteArray",
                    "function params": [],
                    "file name": "Base64Test.java",
                    "file old path": null,
                    "file new path": "src/test/java/org/apache/commons/net/util/Base64Test.java",
                    "full name": "src.test.java.org.apache.commons.net.util.Base64Test.testEncodeBase64ByteArray"
                },
                {
                    "function name": "testBase64",
                    "function params": [],
                    "file name": "Base64Test.java",
                    "file old path": null,
                    "file new path": "src/test/java/org/apache/commons/net/util/Base64Test.java",
                    "full name": "src.test.java.org.apache.commons.net.util.Base64Test.testBase64"
                },
                {
                    "function name": "testIsArrayByteBase64",
                    "function params": [],
                    "file name": "Base64Test.java",
                    "file old path": null,
                    "file new path": "src/test/java/org/apache/commons/net/util/Base64Test.java",
                    "full name": "src.test.java.org.apache.commons.net.util.Base64Test.testIsArrayByteBase64"
                },
                {
                    "function name": "testEncodeBase64ByteArrayBoolean",
                    "function params": [],
                    "file name": "Base64Test.java",
                    "file old path": null,
                    "file new path": "src/test/java/org/apache/commons/net/util/Base64Test.java",
                    "full name": "src.test.java.org.apache.commons.net.util.Base64Test.testEncodeBase64ByteArrayBoolean"
                },
                {
                    "function name": "testDecodeString",
                    "function params": [],
                    "file name": "Base64Test.java",
                    "file old path": null,
                    "file new path": "src/test/java/org/apache/commons/net/util/Base64Test.java",
                    "full name": "src.test.java.org.apache.commons.net.util.Base64Test.testDecodeString"
                },
                {
                    "function name": "testEncodeBase64URLSafeString",
                    "function params": [],
                    "file name": "Base64Test.java",
                    "file old path": null,
                    "file new path": "src/test/java/org/apache/commons/net/util/Base64Test.java",
                    "full name": "src.test.java.org.apache.commons.net.util.Base64Test.testEncodeBase64URLSafeString"
                },
                {
                    "function name": "testBase64IntByteArray",
                    "function params": [],
                    "file name": "Base64Test.java",
                    "file old path": null,
                    "file new path": "src/test/java/org/apache/commons/net/util/Base64Test.java",
                    "full name": "src.test.java.org.apache.commons.net.util.Base64Test.testBase64IntByteArray"
                },
                {
                    "function name": "testToIntegerBytes",
                    "function params": [],
                    "file name": "Base64Test.java",
                    "file old path": null,
                    "file new path": "src/test/java/org/apache/commons/net/util/Base64Test.java",
                    "full name": "src.test.java.org.apache.commons.net.util.Base64Test.testToIntegerBytes"
                },
                {
                    "function name": "testDecodeObject",
                    "function params": [],
                    "file name": "Base64Test.java",
                    "file old path": null,
                    "file new path": "src/test/java/org/apache/commons/net/util/Base64Test.java",
                    "full name": "src.test.java.org.apache.commons.net.util.Base64Test.testDecodeObject"
                },
                {
                    "function name": "testEncodeBase64StringByteArrayBoolean",
                    "function params": [],
                    "file name": "Base64Test.java",
                    "file old path": null,
                    "file new path": "src/test/java/org/apache/commons/net/util/Base64Test.java",
                    "full name": "src.test.java.org.apache.commons.net.util.Base64Test.testEncodeBase64StringByteArrayBoolean"
                },
                {
                    "function name": "testDecodeBase64ByteArray",
                    "function params": [],
                    "file name": "Base64Test.java",
                    "file old path": null,
                    "file new path": "src/test/java/org/apache/commons/net/util/Base64Test.java",
                    "full name": "src.test.java.org.apache.commons.net.util.Base64Test.testDecodeBase64ByteArray"
                },
                {
                    "function name": "testBase64Int",
                    "function params": [],
                    "file name": "Base64Test.java",
                    "file old path": null,
                    "file new path": "src/test/java/org/apache/commons/net/util/Base64Test.java",
                    "full name": "src.test.java.org.apache.commons.net.util.Base64Test.testBase64Int"
                },
                {
                    "function name": "testDecodeByteArray",
                    "function params": [],
                    "file name": "Base64Test.java",
                    "file old path": null,
                    "file new path": "src/test/java/org/apache/commons/net/util/Base64Test.java",
                    "full name": "src.test.java.org.apache.commons.net.util.Base64Test.testDecodeByteArray"
                },
                {
                    "function name": "testEncodeBase64ByteArrayBooleanBoolean",
                    "function params": [],
                    "file name": "Base64Test.java",
                    "file old path": null,
                    "file new path": "src/test/java/org/apache/commons/net/util/Base64Test.java",
                    "full name": "src.test.java.org.apache.commons.net.util.Base64Test.testEncodeBase64ByteArrayBooleanBoolean"
                },
                {
                    "function name": "testDecodeBase64String",
                    "function params": [],
                    "file name": "Base64Test.java",
                    "file old path": null,
                    "file new path": "src/test/java/org/apache/commons/net/util/Base64Test.java",
                    "full name": "src.test.java.org.apache.commons.net.util.Base64Test.testDecodeBase64String"
                },
                {
                    "function name": "testEncodeInteger",
                    "function params": [],
                    "file name": "Base64Test.java",
                    "file old path": null,
                    "file new path": "src/test/java/org/apache/commons/net/util/Base64Test.java",
                    "full name": "src.test.java.org.apache.commons.net.util.Base64Test.testEncodeInteger"
                },
                {
                    "function name": "testEncodeBase64StringByteArray",
                    "function params": [],
                    "file name": "Base64Test.java",
                    "file old path": null,
                    "file new path": "src/test/java/org/apache/commons/net/util/Base64Test.java",
                    "full name": "src.test.java.org.apache.commons.net.util.Base64Test.testEncodeBase64StringByteArray"
                },
                {
                    "function name": "testDecodeInteger",
                    "function params": [],
                    "file name": "Base64Test.java",
                    "file old path": null,
                    "file new path": "src/test/java/org/apache/commons/net/util/Base64Test.java",
                    "full name": "src.test.java.org.apache.commons.net.util.Base64Test.testDecodeInteger"
                },
                {
                    "function name": "testEncodeToString",
                    "function params": [],
                    "file name": "Base64Test.java",
                    "file old path": null,
                    "file new path": "src/test/java/org/apache/commons/net/util/Base64Test.java",
                    "full name": "src.test.java.org.apache.commons.net.util.Base64Test.testEncodeToString"
                },
                {
                    "function name": "testBase64IntByteArrayBoolean",
                    "function params": [],
                    "file name": "Base64Test.java",
                    "file old path": null,
                    "file new path": "src/test/java/org/apache/commons/net/util/Base64Test.java",
                    "full name": "src.test.java.org.apache.commons.net.util.Base64Test.testBase64IntByteArrayBoolean"
                },
                {
                    "function name": "testEncodeBase64StringUnChunked",
                    "function params": [],
                    "file name": "Base64Test.java",
                    "file old path": null,
                    "file new path": "src/test/java/org/apache/commons/net/util/Base64Test.java",
                    "full name": "src.test.java.org.apache.commons.net.util.Base64Test.testEncodeBase64StringUnChunked"
                },
                {
                    "function name": "testEncodeBase64URLSafe",
                    "function params": [],
                    "file name": "Base64Test.java",
                    "file old path": null,
                    "file new path": "src/test/java/org/apache/commons/net/util/Base64Test.java",
                    "full name": "src.test.java.org.apache.commons.net.util.Base64Test.testEncodeBase64URLSafe"
                },
                {
                    "function name": "testEncodeBase64ByteArrayBooleanBooleanInt",
                    "function params": [],
                    "file name": "Base64Test.java",
                    "file old path": null,
                    "file new path": "src/test/java/org/apache/commons/net/util/Base64Test.java",
                    "full name": "src.test.java.org.apache.commons.net.util.Base64Test.testEncodeBase64ByteArrayBooleanBooleanInt"
                },
                {
                    "function name": "testEncodeObject",
                    "function params": [],
                    "file name": "Base64Test.java",
                    "file old path": null,
                    "file new path": "src/test/java/org/apache/commons/net/util/Base64Test.java",
                    "full name": "src.test.java.org.apache.commons.net.util.Base64Test.testEncodeObject"
                },
                {
                    "function name": "testBase64Boolean",
                    "function params": [],
                    "file name": "Base64Test.java",
                    "file old path": null,
                    "file new path": "src/test/java/org/apache/commons/net/util/Base64Test.java",
                    "full name": "src.test.java.org.apache.commons.net.util.Base64Test.testBase64Boolean"
                },
                {
                    "function name": "testEncodeByteArray",
                    "function params": [],
                    "file name": "Base64Test.java",
                    "file old path": null,
                    "file new path": "src/test/java/org/apache/commons/net/util/Base64Test.java",
                    "full name": "src.test.java.org.apache.commons.net.util.Base64Test.testEncodeByteArray"
                }
            ],
            "files that changed": [
                "src/main/java/org/apache/commons/net/util/Base64.java"
            ]
        },
        {
            "bug index": "122",
            "bug id": "NET-466",
            "hexsha": "87058fcc14851401368176e34ccbe07688513c60",
            "fix_hash": "6d3d503cc4a4dfe75717fb9eb0b9d2b84ecdd45b",
            "description": "When testing with Commons Net 3.1 for Eclipse https://bugs.eclipse.org/bugs/show_bug.cgi?id=194473 , I found that our telnet client blocks when the ReaderThread is running and waiting for new data. Investigation shows that our code blocks on TelnetInputStream#available().\n\nThis regression is due to the code introduced for NET-437 \"TelnetInputStream doesn't support non-blocking IO when reader thread is not enabled\":\n\nTelnetInputStream#available() now calls super.available() which is declared as \"synchronized\" on BufferedInputStream in JDK 1.6.0_21 at least. But at the same time, the telnet ReaderThread has already the Monitor on BufferedInputStream and doesn't give it up while sitting in read0().\n\nThis seems to be exactly the situation that the comment before TelnetInputStream#close() warns about:\n    // Cannot be synchronized.  Will cause deadlock if run() is blocked\n    // in read because BufferedInputStream read() is synchronized.\n\nThis is a severe issue since it violates the specification and use of available().",
            "commit number version hash": 1073,
            "commit number": 1049,
            "function that changed": [
                {
                    "function name": "available",
                    "function params": [],
                    "file name": "TelnetInputStream.java",
                    "file old path": "src/main/java/org/apache/commons/net/telnet/TelnetInputStream.java",
                    "file new path": "src/main/java/org/apache/commons/net/telnet/TelnetInputStream.java",
                    "full name": "src.main.java.org.apache.commons.net.telnet.TelnetInputStream.available"
                }
            ],
            "files that changed": [
                "src/main/java/org/apache/commons/net/telnet/TelnetInputStream.java"
            ]
        },
        {
            "bug index": "123",
            "bug id": "NET-426",
            "hexsha": "87058fcc14851401368176e34ccbe07688513c60",
            "fix_hash": "12d33c3bd2156252b55cb7152fe8a153effc74cf",
            "description": "Currently in FTPSClient class, there is protected _openDataConnection_ method, which create SSLSocket for data connection.  But there is no hook to customize the SSLSocket before startHandshake is called.  \n\nI need to know the remote host ip and port, which i can get for socket, and do custom setup to try to reuse SSL sessions from control connection socket.  Since the socket factory uses createSocket() method, I can't just use custom socket factory since I don't know the host and port.  I can't just override the _openDataConnection_() method in my class since that will call the startHandshake().  \n\nSo it would be nice if you can provide hook, much like _connectAction_(), but for data connection before handshake is started.  You can pass the new data socket as argument to this hook method so one can get remote host and port information.  ",
            "commit number version hash": 1073,
            "commit number": 1046,
            "function that changed": [
                {
                    "function name": "_openDataConnection_",
                    "function params": [
                        "command",
                        "arg"
                    ],
                    "file name": "FTPSClient.java",
                    "file old path": "src/main/java/org/apache/commons/net/ftp/FTPSClient.java",
                    "file new path": "src/main/java/org/apache/commons/net/ftp/FTPSClient.java",
                    "full name": "src.main.java.org.apache.commons.net.ftp.FTPSClient._openDataConnection_"
                },
                {
                    "function name": "_openDataConnection_",
                    "function params": [
                        "command",
                        "arg"
                    ],
                    "file name": "FTPSClient.java",
                    "file old path": "src/main/java/org/apache/commons/net/ftp/FTPSClient.java",
                    "file new path": "src/main/java/org/apache/commons/net/ftp/FTPSClient.java",
                    "full name": "src.main.java.org.apache.commons.net.ftp.FTPSClient._openDataConnection_"
                }
            ],
            "files that changed": [
                "src/main/java/org/apache/commons/net/ftp/FTPSClient.java"
            ]
        },
        {
            "bug index": "125",
            "bug id": "NET-456",
            "hexsha": "87058fcc14851401368176e34ccbe07688513c60",
            "fix_hash": "737a076added6e41719d205ca9aa5261e68e5002",
            "description": "I'm trying to use TelnetClient(commons-net-3.1) with the reader-thread enabled,\n but it sometimes hangs.\n\nI tracked \"__receiveState\", and found that the state sometimes changes to invalid ones.\n\nIn threaded-mode, TelnetInputStream.__read(boolean mayBlock) is normally called only by TelnetInputStream.run().\nBut if the read-thread startup delays, it may also called by TelnetInputStream.read()\nbeacues the value of __threaded is still false.\n\n\nexample of hang-up pattern\n\n1.\n// user-thread\ntelnetClient._connectAction()\nTelnetInputStream._start()\n__thread.start();                 ... try to start read-thread\n\n2.\n// user-thread\nTelnetInputStream.read() ... __threaded is still false, so TelnetInputStream.__read() is called.\n\n3.\n// read-thread starts (before __read() above dosen't end )\nTelnetInputStream.run( ) ... sets __threaded to true, and calls TelnetInputStream.__read()\n\n\n\nI think __threaded flag should be set to true just after __thread.start(),\nnot at the begining of run().\n\n        __thread.start();\n        __threaded = true; // add\n\n\n\nThis problem may related to NET-73\n",
            "commit number version hash": 1073,
            "commit number": 1038,
            "function that changed": [
                {
                    "function name": "_start",
                    "function params": [],
                    "file name": "TelnetInputStream.java",
                    "file old path": "src/main/java/org/apache/commons/net/telnet/TelnetInputStream.java",
                    "file new path": "src/main/java/org/apache/commons/net/telnet/TelnetInputStream.java",
                    "full name": "src.main.java.org.apache.commons.net.telnet.TelnetInputStream._start"
                },
                {
                    "function name": "run",
                    "function params": [],
                    "file name": "TelnetInputStream.java",
                    "file old path": "src/main/java/org/apache/commons/net/telnet/TelnetInputStream.java",
                    "file new path": "src/main/java/org/apache/commons/net/telnet/TelnetInputStream.java",
                    "full name": "src.main.java.org.apache.commons.net.telnet.TelnetInputStream.run"
                }
            ],
            "files that changed": [
                "src/main/java/org/apache/commons/net/telnet/TelnetInputStream.java"
            ]
        },
        {
            "bug index": "126",
            "bug id": "NET-449",
            "hexsha": "87058fcc14851401368176e34ccbe07688513c60",
            "fix_hash": "f48876521e52ae38d4e75c08c5fb27edb0eee326",
            "description": "FTP Server status:\n\n{code}\nroot@xxx-srv:/data/Library# tree -A\n.\n\u251c\u2500\u2500 -dash\n\u2502   \u251c\u2500\u2500 -dash.txt\n\u2502   \u251c\u2500\u2500 file1.txt\n\u2502   \u2514\u2500\u2500 file2.txt\n\u2514\u2500\u2500 test\n    \u251c\u2500\u2500 file2.txt\n    \u2514\u2500\u2500 file.txt\n{code}\n\nTest code:\n\n{code} \nfinal FTPClient ftp = new FTPClient();\nftp.connect(host, port);\nftp.login(login, pwd);\nSystem.out.println(\"PWD: \" + ftp.printWorkingDirectory());\nfinal FTPFile[] listFiles = ftp.listFiles();\nfor (int i = 0; i < listFiles.length; i++) {\n   System.out.println(\"[\" + i + \"] \" + listFiles[i]);\n}\n\nSystem.out.println(\"Files in /-dash\");\nfinal FTPFile[] listFiles2 = ftp.listFiles(\"/-dash\");\nfor (int i = 0; i < listFiles2.length; i++) {\n   System.out.println(\"[\" + i + \"] \" + listFiles2[i]);\n}\n\nSystem.out.println(\"Files in -dash\");\nfinal FTPFile[] listFiles3 = ftp.listFiles(\"-dash\");\nfor (int i = 0; i < listFiles3.length; i++) {\n   System.out.println(\"[\" + i + \"] \" + listFiles3[i]);\n}\n{code} \n\nresults:\n{code} \nPWD: /\n[0] -dash\n[1] test\nFiles in /-dash\n[0] -dash.txt\n[1] file1.txt\n[2] file2.txt\nFiles in -dash\n[0] -dash\n[1] .\n[2] ..\n[3] test\n{code} \nWhen listing \"-dash\", it list the current directory instead of the destination one.\nIf I do the same test with the folder test, this time it works as expected.",
            "commit number version hash": 1073,
            "commit number": 1037,
            "function that changed": [],
            "files that changed": [
                "src/main/java/org/apache/commons/net/ftp/FTPClient.java"
            ]
        },
        {
            "bug index": "127",
            "bug id": "NET-473",
            "hexsha": "87058fcc14851401368176e34ccbe07688513c60",
            "fix_hash": "6037f828b16141d886e636a782fe81fe69662606",
            "description": "After creating FTPClient you are able to invoke org.apache.commons.net.SocketClient-> setSoTimeout () method which will result in NullPointerException.\n\nIt happens because in SocketClient class Socket object is initialized with null. Shouldn't it be more sensible to create new socket from the socketFactory and don't wait for socket creation till connect() method, because it will be imposiible to do any configuration to the socket until you're connected.",
            "commit number version hash": 1073,
            "commit number": 1035,
            "function that changed": [],
            "files that changed": [
                "src/main/java/org/apache/commons/net/SocketClient.java"
            ]
        },
        {
            "bug index": "128",
            "bug id": "NET-475",
            "hexsha": "87058fcc14851401368176e34ccbe07688513c60",
            "fix_hash": "6e6b6dd192f5303264e4735ed4375856198bc6c9",
            "description": "First setting a restart offset and then requesting a directory listing makes FtpClient send REST, LIST. The correct behavior should be to send only LIST and send REST on the first file transfer operation.\n\nVersions 3.1 and 3.0.1 of commons-net have shown this behavior in our software.\n\nFollowing is a minimal sample, tested with version 3.1:\n\n{code}\npackage test;\n\nimport java.io.PrintWriter;\n\nimport org.apache.commons.net.PrintCommandListener;\nimport org.apache.commons.net.ftp.FTPClient;\n\npublic class Test {\n\n\tpublic static void main(String[] args) throws Exception {\n\t\tFTPClient client = new FTPClient();\n\t\tclient.addProtocolCommandListener(new PrintCommandListener(\n\t\t\t\tnew PrintWriter(System.out), true));\n\t\t\n\t\tclient.connect(Server.ip);\n\t\tclient.login(Server.username, Server.password);\n\t\t\n        client.setRestartOffset(10);\n        \n        client.listFiles(\"\");\n\t}\n\t\n}\n{code}\n\nOutput:\n{code}\n220 Welcome to FTP service.\nUSER *******\n331 Please specify the password.\nPASS *******\n230 Login successful.\nSYST\n215 UNIX Type: L8\nPORT 10,43,92,50,230,56\n200 PORT command successful. Consider using PASV.\nREST 10\n350 Restart position accepted (10).\nLIST \n150 Here comes the directory listing.\n226 Directory send OK.\n{code}",
            "commit number version hash": 1073,
            "commit number": 1032,
            "function that changed": [],
            "files that changed": [
                "src/main/java/org/apache/commons/net/ftp/FTPClient.java"
            ]
        },
        {
            "bug index": "129",
            "bug id": "NET-465",
            "hexsha": "bcba9364c60b6b24dc916b1f30af6912c73949e6",
            "fix_hash": "58a309554be9de39a3b2665d56b6dddeca4fd648",
            "description": "When sending large files the need to set the send and receive buffer sizes on the data socket is much more important than the command socket.  Please either give 2 more setters or make the setters set the data socket and leave the command socket alone.",
            "commit number version hash": 1120,
            "commit number": 1031,
            "function that changed": [
                {
                    "function name": "_retrieveFile",
                    "function params": [
                        "command",
                        "remote",
                        "local"
                    ],
                    "file name": "FTPClient.java",
                    "file old path": "src/main/java/org/apache/commons/net/ftp/FTPClient.java",
                    "file new path": "src/main/java/org/apache/commons/net/ftp/FTPClient.java",
                    "full name": "src.main.java.org.apache.commons.net.ftp.FTPClient._retrieveFile"
                },
                {
                    "function name": "_retrieveFileStream",
                    "function params": [
                        "command",
                        "remote"
                    ],
                    "file name": "FTPClient.java",
                    "file old path": "src/main/java/org/apache/commons/net/ftp/FTPClient.java",
                    "file new path": "src/main/java/org/apache/commons/net/ftp/FTPClient.java",
                    "full name": "src.main.java.org.apache.commons.net.ftp.FTPClient._retrieveFileStream"
                },
                {
                    "function name": "getDefaultedBufferSize",
                    "function params": [],
                    "file name": "FTPClient.java",
                    "file old path": "src/main/java/org/apache/commons/net/ftp/FTPClient.java",
                    "file new path": "src/main/java/org/apache/commons/net/ftp/FTPClient.java",
                    "full name": "src.main.java.org.apache.commons.net.ftp.FTPClient.getDefaultedBufferSize"
                },
                {
                    "function name": "_openDataConnection_",
                    "function params": [
                        "command",
                        "arg"
                    ],
                    "file name": "FTPClient.java",
                    "file old path": "src/main/java/org/apache/commons/net/ftp/FTPClient.java",
                    "file new path": "src/main/java/org/apache/commons/net/ftp/FTPClient.java",
                    "full name": "src.main.java.org.apache.commons.net.ftp.FTPClient._openDataConnection_"
                },
                {
                    "function name": "_storeFileStream",
                    "function params": [
                        "command",
                        "remote"
                    ],
                    "file name": "FTPClient.java",
                    "file old path": "src/main/java/org/apache/commons/net/ftp/FTPClient.java",
                    "file new path": "src/main/java/org/apache/commons/net/ftp/FTPClient.java",
                    "full name": "src.main.java.org.apache.commons.net.ftp.FTPClient._storeFileStream"
                },
                {
                    "function name": "_storeFile",
                    "function params": [
                        "command",
                        "remote",
                        "local"
                    ],
                    "file name": "FTPClient.java",
                    "file old path": "src/main/java/org/apache/commons/net/ftp/FTPClient.java",
                    "file new path": "src/main/java/org/apache/commons/net/ftp/FTPClient.java",
                    "full name": "src.main.java.org.apache.commons.net.ftp.FTPClient._storeFile"
                }
            ],
            "files that changed": [
                "src/main/java/org/apache/commons/net/ftp/FTPClient.java"
            ]
        },
        {
            "bug index": "130",
            "bug id": "NET-467",
            "hexsha": "87058fcc14851401368176e34ccbe07688513c60",
            "fix_hash": "8428e16383bb3b071bda3760351cbf0b456dad37",
            "description": "As reported on the user list, IMAP#fetch(\"1\",\"body[header]\") fails with an error such as:\n\norg.apache.commons.net.MalformedServerReplyException: Received\nunexpected IMAP protocol response from server: 'Return-Path: <snip>'\n\nThis is because the code does not currently handle literal strings, i.e.\n\n{nnn}CRLF\ntextCRLF\n...\n\nSee http://tools.ietf.org/html/rfc3501#section-4.3",
            "commit number version hash": 1073,
            "commit number": 1027,
            "function that changed": [
                {
                    "function name": "__getReply",
                    "function params": [
                        "wantTag"
                    ],
                    "file name": "IMAP.java",
                    "file old path": "src/main/java/org/apache/commons/net/imap/IMAP.java",
                    "file new path": "src/main/java/org/apache/commons/net/imap/IMAP.java",
                    "full name": "src.main.java.org.apache.commons.net.imap.IMAP.__getReply"
                },
                {
                    "function name": "literalCount",
                    "function params": [
                        "line"
                    ],
                    "file name": "IMAPReply.java",
                    "file old path": "src/main/java/org/apache/commons/net/imap/IMAPReply.java",
                    "file new path": "src/main/java/org/apache/commons/net/imap/IMAPReply.java",
                    "full name": "src.main.java.org.apache.commons.net.imap.IMAPReply.literalCount"
                }
            ],
            "files that changed": [
                "src/main/java/org/apache/commons/net/imap/IMAP.java",
                "src/main/java/org/apache/commons/net/imap/IMAPReply.java"
            ]
        },
        {
            "bug index": "131",
            "bug id": "NET-458",
            "hexsha": "87058fcc14851401368176e34ccbe07688513c60",
            "fix_hash": "a62d38cd071e90b8daf726bda1b8a0ee7f3352bb",
            "description": "Line 360 in MVSFTPEntryParser.parseSimpleEntry :\n\n    String name = entry.split(\" \")[0];\n\ngives an ArrayIndexOutOfBoundsException: 0\n\nIt appears to be caused by a partitioned dataset whose members only contain names. No other details (creation date, file type etc).\n\nThis is the method, if it helps:\n\n{code}\nprivate boolean parseSimpleEntry(FTPFile file, String entry) {\n    if (entry != null && entry.length() > 0) {\n        file.setRawListing(entry);\n        String name = entry.split(\" \")[0];           // <--- error occurs here\n        file.setName(name);\n        file.setType(FTPFile.FILE_TYPE);\n        return true;\n    }\n    return false;\n}\n{code}",
            "commit number version hash": 1073,
            "commit number": 1019,
            "function that changed": [
                {
                    "function name": "parseSimpleEntry",
                    "function params": [
                        "file",
                        "entry"
                    ],
                    "file name": "MVSFTPEntryParser.java",
                    "file old path": "src/main/java/org/apache/commons/net/ftp/parser/MVSFTPEntryParser.java",
                    "file new path": "src/main/java/org/apache/commons/net/ftp/parser/MVSFTPEntryParser.java",
                    "full name": "src.main.java.org.apache.commons.net.ftp.parser.MVSFTPEntryParser.parseSimpleEntry"
                }
            ],
            "files that changed": [
                "src/main/java/org/apache/commons/net/ftp/parser/MVSFTPEntryParser.java"
            ]
        },
        {
            "bug index": "132",
            "bug id": "NET-450",
            "hexsha": "87058fcc14851401368176e34ccbe07688513c60",
            "fix_hash": "f6517101f46aaf05d4c25bcfa95b887ce7f9c2ec",
            "description": "In the Documentation for FTPClient there are some examples\nOne is\n    FTPClient f = new FTPClient();\n    f.connect(server);\n    f.login(username, password);\n    FTPFile[] files = listFiles(directory);\n\nThere is a typo on the last line.\n\nIt should be f.listFiles(directory);\n\nRating this as Minior as any decent Java programmer should work it out.",
            "commit number version hash": 1073,
            "commit number": 1015,
            "function that changed": [],
            "files that changed": [
                "src/main/java/org/apache/commons/net/ftp/FTPClient.java"
            ]
        },
        {
            "bug index": "133",
            "bug id": "NET-448",
            "hexsha": "6919eed1a4f064f445849b30da2281f67925cdee",
            "fix_hash": "b824ae8b74ab93fb2887bee202251a88fd804a77",
            "description": "I am using vsftpd ftp server on centos with our own self signed root ca certificate.\n\nI have not installed the self signed root certificate on the client machine. Neither am I setting the Trust Manager on the FTPSClient object, using X509TrustManager instance pointing to my physical cert file.\n\nBut I am still able to use the FTPSClient bundled in any of the following jar file and send/receive the files.\ncommons-net-2.0.jar \ncommons-net-3.1.jar \ncommons-net-2.0-jdk14.jar (from zehon)\n\nI was expecting that I will have to either install the self signed root ca on the client machine Or set Trust Manager etc.\n\nCan you please explain the behavior? ",
            "commit number version hash": 998,
            "commit number": 1008,
            "function that changed": [],
            "files that changed": [
                "src/main/java/org/apache/commons/net/ftp/FTPSClient.java"
            ]
        },
        {
            "bug index": "134",
            "bug id": "NET-442",
            "hexsha": "87058fcc14851401368176e34ccbe07688513c60",
            "fix_hash": "d8bbd2f6cb457e84429ef13425851beb272a09af",
            "description": "I've an ftp server that at the pwd request responds with |257  root is current directory.| without any double quotes present and the lib gives up with this exception:\n\njava.lang.StringIndexOutOfBoundsException: String index out of range: -1\n\tat java.lang.String.substring(String.java:1949)\n\tat org.apache.commons.net.ftp.FTPClient.__parsePathname(FTPClient.java:469)\n\tat org.apache.commons.net.ftp.FTPClient.printWorkingDirectory(FTPClient.java:2374)\n\nProbably it's only needed a check in __parsePathname\n\nprivate String __parsePathname(String reply)\n    {\n        int begin, end;\n\n        begin = reply.indexOf('\"') + 1;\n        end = reply.indexOf('\"', begin);\n        \n        if (begin == -1 && end == -1) \n        {\n            return reply;\n        }\n\n        return reply.substring(begin, end);\n    }",
            "commit number version hash": 1073,
            "commit number": 1007,
            "function that changed": [
                {
                    "function name": "__parsePathname",
                    "function params": [
                        "reply"
                    ],
                    "file name": "FTPClient.java",
                    "file old path": "src/main/java/org/apache/commons/net/ftp/FTPClient.java",
                    "file new path": "src/main/java/org/apache/commons/net/ftp/FTPClient.java",
                    "full name": "src.main.java.org.apache.commons.net.ftp.FTPClient.__parsePathname"
                }
            ],
            "files that changed": [
                "src/main/java/org/apache/commons/net/ftp/FTPClient.java"
            ]
        },
        {
            "bug index": "135",
            "bug id": "NET-444",
            "hexsha": "87058fcc14851401368176e34ccbe07688513c60",
            "fix_hash": "4593db5c235bf26cd90f4595b6c82ff16ae99149",
            "description": "CI tests reported the following test failure on Feb 28th, 2012 (a leap year):\n\nFailed tests:   testParseTimestampWithSlop(org.apache.commons.net.ftp.parser.FTPTimestampParserImplTest): test.slop.roll.back.year expected:<1> but was:<0>\n\nThe cause is to do with how lenient future dates are handled.",
            "commit number version hash": 1073,
            "commit number": 1000,
            "function that changed": [
                {
                    "function name": "parseTimestamp",
                    "function params": [
                        "timestampStr",
                        "serverTime"
                    ],
                    "file name": "FTPTimestampParserImpl.java",
                    "file old path": "src/main/java/org/apache/commons/net/ftp/parser/FTPTimestampParserImpl.java",
                    "file new path": "src/main/java/org/apache/commons/net/ftp/parser/FTPTimestampParserImpl.java",
                    "full name": "src.main.java.org.apache.commons.net.ftp.parser.FTPTimestampParserImpl.parseTimestamp"
                },
                {
                    "function name": "testParser",
                    "function params": [],
                    "file name": "FTPTimestampParserImplTest.java",
                    "file old path": "src/test/java/org/apache/commons/net/ftp/parser/FTPTimestampParserImplTest.java",
                    "file new path": "src/test/java/org/apache/commons/net/ftp/parser/FTPTimestampParserImplTest.java",
                    "full name": "src.test.java.org.apache.commons.net.ftp.parser.FTPTimestampParserImplTest.testParser"
                },
                {
                    "function name": "testNET444",
                    "function params": [],
                    "file name": "FTPTimestampParserImplTest.java",
                    "file old path": "src/test/java/org/apache/commons/net/ftp/parser/FTPTimestampParserImplTest.java",
                    "file new path": "src/test/java/org/apache/commons/net/ftp/parser/FTPTimestampParserImplTest.java",
                    "full name": "src.test.java.org.apache.commons.net.ftp.parser.FTPTimestampParserImplTest.testNET444"
                }
            ],
            "files that changed": [
                "src/main/java/org/apache/commons/net/ftp/parser/FTPTimestampParserImpl.java",
                "src/test/java/org/apache/commons/net/ftp/parser/FTPTimestampParserImplTest.java"
            ]
        },
        {
            "bug index": "136",
            "bug id": "NET-441",
            "hexsha": "6919eed1a4f064f445849b30da2281f67925cdee",
            "fix_hash": "5a1999f11206fa2907921412448b98be342010f1",
            "description": "In FTPClient.class \"Generate a directory listing for the current directory using the MSLD command.\" should use \"MLSD\" not \"MSLD\".",
            "commit number version hash": 998,
            "commit number": 996,
            "function that changed": [],
            "files that changed": [
                "src/main/java/org/apache/commons/net/ftp/FTPClient.java"
            ]
        },
        {
            "bug index": "137",
            "bug id": "NET-440",
            "hexsha": "6919eed1a4f064f445849b30da2281f67925cdee",
            "fix_hash": "4f21d978fbfa17f550d1b5e47c9c83c24e7f34fa",
            "description": "The FTP client uses the SYST command to determine the list output.\nThis can fail in two ways:\n\n- a ParserInitializationException in case the response of the server is not known by apache.\n\n- When the response to SYST command is 502 command unknown (the command is optional after all - http://www.ietf.org/rfc/rfc959.txt) the client throws an IOException.\n\nCan't it just default to UNIX for these type of ftp servers?",
            "commit number version hash": 998,
            "commit number": 995,
            "function that changed": [
                {
                    "function name": "getSystemType",
                    "function params": [],
                    "file name": "FTPClient.java",
                    "file old path": "src/main/java/org/apache/commons/net/ftp/FTPClient.java",
                    "file new path": "src/main/java/org/apache/commons/net/ftp/FTPClient.java",
                    "full name": "src.main.java.org.apache.commons.net.ftp.FTPClient.getSystemType"
                }
            ],
            "files that changed": [
                "src/main/java/org/apache/commons/net/ftp/FTPClient.java"
            ]
        },
        {
            "bug index": "138",
            "bug id": "NET-291",
            "hexsha": "6919eed1a4f064f445849b30da2281f67925cdee",
            "fix_hash": "379524e5af8675671bed871ec69fa688e261f870",
            "description": "\n\nenterLocalPassiveMode (exhibit A) docs claim that mode will be set to PASSIVE_LOCAL_DATA_CONNECTION_MODE \"some other method such as\" enterLocalActiveMode is called  (exhibit B).  However, active mode is being entered after connect is called.   This behavior can be easily observed by modifying FtpExample by moving ftp.enterLocalPassiveMode()  to before ftp.connect(server).   \n\nPerhaps either the code or docs could be updated to remedy this.  Versions prior to 2.0 behaved as documented.\n \nexhibit A:\n   /***\n     * Set the current data connection mode to\n     * <code> PASSIVE_LOCAL_DATA_CONNECTION_MODE </code>.  Use this\n     * method only for data transfers between the client and server.\n     * This method causes a PASV command to be issued to the server\n     * before the opening of every data connection, telling the server to\n     * open a data port to which the client will connect to conduct\n     * data transfers.  The FTPClient will stay in\n     * <code> PASSIVE_LOCAL_DATA_CONNECTION_MODE </code> until the\n     * mode is changed by calling some other method such as\n     * {@link #enterLocalActiveMode  enterLocalActiveMode() }\n     ***/\n    public void enterLocalPassiveMode()\n    {\n        __dataConnectionMode = PASSIVE_LOCAL_DATA_CONNECTION_MODE;\n        // These will be set when just before a data connection is opened\n        // in _openDataConnection_()\n        __passiveHost = null;\n        __passivePort = -1;\n    }\n\nexhibit B\n\n    @Override\n    protected void _connectAction_() throws IOException\n    {\n        super._connectAction_();\n        __initDefaults();\n    }",
            "commit number version hash": 998,
            "commit number": 992,
            "function that changed": [
                {
                    "function name": "_openDataConnection_",
                    "function params": [
                        "command",
                        "arg"
                    ],
                    "file name": "FTPHTTPClient.java",
                    "file old path": "src/main/java/org/apache/commons/net/ftp/FTPHTTPClient.java",
                    "file new path": "src/main/java/org/apache/commons/net/ftp/FTPHTTPClient.java",
                    "full name": "src.main.java.org.apache.commons.net.ftp.FTPHTTPClient._openDataConnection_"
                },
                {
                    "function name": "_openDataConnection_",
                    "function params": [
                        "command",
                        "arg"
                    ],
                    "file name": "FTPHTTPClient.java",
                    "file old path": "src/main/java/org/apache/commons/net/ftp/FTPHTTPClient.java",
                    "file new path": "src/main/java/org/apache/commons/net/ftp/FTPHTTPClient.java",
                    "full name": "src.main.java.org.apache.commons.net.ftp.FTPHTTPClient._openDataConnection_"
                }
            ],
            "files that changed": [
                "src/main/java/org/apache/commons/net/ftp/FTPHTTPClient.java"
            ]
        },
        {
            "bug index": "139",
            "bug id": "NET-412",
            "hexsha": "6919eed1a4f064f445849b30da2281f67925cdee",
            "fix_hash": "b5ac3314309acc4cded8f65cf50adeb7a1c13f95",
            "description": "This is regarding the org.apache.commons.net.tftp.TFTPClient class.\n\nIn the sendFile() method, when a duplicate TFTP ACK is received, the \"if (lastBlock == block)\" section of code fails and control moves to the \"else\" statement. The else block checks to see if the ACK is for the previous DATA packet, and if so, sends control back to the _sendPacket label where the DATA packet is resent.\n\nThis is in direct violation of Sorcerer's Apprentice Syndrome as defined in RFC 1123 section 4.2.3.1:\n\n\"the sender (i.e., the side originating the DATA packets) must never resend the current DATA packet on receipt of a duplicate ACK\"\n\nThe proper else block would look something like this:\n\n{noformat}\n{\n    continue _receivePacket;\n}\n{noformat}\n\nThis enables the client to ignore the duplicated ACK and listen for ACK+1. If ACK+1 never comes in, the listener should timeout and attempt to resend the current data packet. As described in NET-410, the TFTP client also does not properly handle re-transmits either. It is recommended that this issue and NET-410 be implemented in tandem.\n\n\n\n",
            "commit number version hash": 998,
            "commit number": 978,
            "function that changed": [
                {
                    "function name": "sendFile",
                    "function params": [
                        "filename",
                        "mode",
                        "input",
                        "host",
                        "port"
                    ],
                    "file name": "TFTPClient.java",
                    "file old path": "src/main/java/org/apache/commons/net/tftp/TFTPClient.java",
                    "file new path": "src/main/java/org/apache/commons/net/tftp/TFTPClient.java",
                    "full name": "src.main.java.org.apache.commons.net.tftp.TFTPClient.sendFile"
                }
            ],
            "files that changed": [
                "src/main/java/org/apache/commons/net/tftp/TFTPClient.java"
            ]
        },
        {
            "bug index": "140",
            "bug id": "NET-410",
            "hexsha": "6919eed1a4f064f445849b30da2281f67925cdee",
            "fix_hash": "760661dfd35d3c51f4aaddf914b32223787ad0c7",
            "description": "org.apache.commons.net.tftp.TFTPClient\n\nWhen a packet fails to be received, the looping logic in TFTPClient contains an unlabeled \"continue\" in the TFTPTimeout blocks. This causes TFTPClient to go back to the listening state in the innermost loop, rather than the _sendPacket label in the outermost loop (which will cause a resend of the missing packet).\n\nThis issue should be resolved before implementing NET-412.",
            "commit number version hash": 998,
            "commit number": 977,
            "function that changed": [
                {
                    "function name": "receiveFile",
                    "function params": [
                        "filename",
                        "mode",
                        "output",
                        "host",
                        "port"
                    ],
                    "file name": "TFTPClient.java",
                    "file old path": "src/main/java/org/apache/commons/net/tftp/TFTPClient.java",
                    "file new path": "src/main/java/org/apache/commons/net/tftp/TFTPClient.java",
                    "full name": "src.main.java.org.apache.commons.net.tftp.TFTPClient.receiveFile"
                },
                {
                    "function name": "sendFile",
                    "function params": [
                        "filename",
                        "mode",
                        "input",
                        "host",
                        "port"
                    ],
                    "file name": "TFTPClient.java",
                    "file old path": "src/main/java/org/apache/commons/net/tftp/TFTPClient.java",
                    "file new path": "src/main/java/org/apache/commons/net/tftp/TFTPClient.java",
                    "full name": "src.main.java.org.apache.commons.net.tftp.TFTPClient.sendFile"
                }
            ],
            "files that changed": [
                "src/main/java/org/apache/commons/net/tftp/TFTPClient.java"
            ]
        },
        {
            "bug index": "141",
            "bug id": "NET-437",
            "hexsha": "6919eed1a4f064f445849b30da2281f67925cdee",
            "fix_hash": "c266a88173dd8d12da5519f0b4f114e9441e92d6",
            "description": "When the telnet client is used without allowing it to create it's own reader thread (i.e. setReaderThread(false)) then the TelnetInputStream.available() method will always return 0 bytes available.  This makes non-blocking IO impossible as you need to actualy call read to get the data without knowing if it will block or not.\n\nThis fix to the available method in org.apache.commons.net.telnet.TelnetInputStream, seems to fix the issue, and should work for reader threads as well:\n\n{noformat} \n    @Override\n    public int available() throws IOException\n    {\n        // Critical section because run() may change __bytesAvailable\n        synchronized (__queue)\n        {\n        \tif (__bytesAvailable == 0 && !__threaded) {\n        \t\treturn super.available();\n        \t} else {\n        \t\treturn __bytesAvailable;\n        \t}\n        }\n    }\n{noformat} \n",
            "commit number version hash": 998,
            "commit number": 976,
            "function that changed": [
                {
                    "function name": "available",
                    "function params": [],
                    "file name": "TelnetInputStream.java",
                    "file old path": "src/main/java/org/apache/commons/net/telnet/TelnetInputStream.java",
                    "file new path": "src/main/java/org/apache/commons/net/telnet/TelnetInputStream.java",
                    "full name": "src.main.java.org.apache.commons.net.telnet.TelnetInputStream.available"
                }
            ],
            "files that changed": [
                "src/main/java/org/apache/commons/net/telnet/TelnetInputStream.java"
            ]
        },
        {
            "bug index": "142",
            "bug id": "NET-422",
            "hexsha": "6919eed1a4f064f445849b30da2281f67925cdee",
            "fix_hash": "d0af24cdff2aecc9c63affbb395759d8ab44aee4",
            "description": "I know that FTPHTTPClient is experimental, but - I have discovered 2 bugs in it:\n\n- response from proxy is taken only if username and password are set\n- username and response are not correctly provided to Base64.encode() method\n\nI will attach a patch with proposed fix, feel free to apply it if you think it's correct.\n\nOne more note: I'm not expert in this area so sorry if this question is nonsense but - shouldn't it be possible to connect to the encrypted FTP over HTTP proxy as well? Or am I completely wrong and this can't be ever possible.\n\nThanks.\n",
            "commit number version hash": 998,
            "commit number": 969,
            "function that changed": [
                {
                    "function name": "main",
                    "function params": [
                        "args"
                    ],
                    "file name": "FTPClientExample.java",
                    "file old path": "src/main/java/examples/ftp/FTPClientExample.java",
                    "file new path": "src/main/java/examples/ftp/FTPClientExample.java",
                    "full name": "src.main.java.examples.ftp.FTPClientExample.main"
                },
                {
                    "function name": "_openDataConnection_",
                    "function params": [
                        "command",
                        "arg"
                    ],
                    "file name": "FTPClient.java",
                    "file old path": "src/main/java/org/apache/commons/net/ftp/FTPClient.java",
                    "file new path": "src/main/java/org/apache/commons/net/ftp/FTPClient.java",
                    "full name": "src.main.java.org.apache.commons.net.ftp.FTPClient._openDataConnection_"
                },
                {
                    "function name": "_parseExtendedPassiveModeReply",
                    "function params": [
                        "reply"
                    ],
                    "file name": "FTPClient.java",
                    "file old path": "src/main/java/org/apache/commons/net/ftp/FTPClient.java",
                    "file new path": "src/main/java/org/apache/commons/net/ftp/FTPClient.java",
                    "full name": "src.main.java.org.apache.commons.net.ftp.FTPClient._parseExtendedPassiveModeReply"
                },
                {
                    "function name": "_parsePassiveModeReply",
                    "function params": [
                        "reply"
                    ],
                    "file name": "FTPClient.java",
                    "file old path": "src/main/java/org/apache/commons/net/ftp/FTPClient.java",
                    "file new path": "src/main/java/org/apache/commons/net/ftp/FTPClient.java",
                    "full name": "src.main.java.org.apache.commons.net.ftp.FTPClient._parsePassiveModeReply"
                },
                {
                    "function name": "restart",
                    "function params": [
                        "offset"
                    ],
                    "file name": "FTPClient.java",
                    "file old path": "src/main/java/org/apache/commons/net/ftp/FTPClient.java",
                    "file new path": "src/main/java/org/apache/commons/net/ftp/FTPClient.java",
                    "full name": "src.main.java.org.apache.commons.net.ftp.FTPClient.restart"
                },
                {
                    "function name": "enterRemotePassiveMode",
                    "function params": [],
                    "file name": "FTPClient.java",
                    "file old path": "src/main/java/org/apache/commons/net/ftp/FTPClient.java",
                    "file new path": "src/main/java/org/apache/commons/net/ftp/FTPClient.java",
                    "full name": "src.main.java.org.apache.commons.net.ftp.FTPClient.enterRemotePassiveMode"
                },
                {
                    "function name": "connect",
                    "function params": [
                        "host",
                        "port"
                    ],
                    "file name": "FTPHTTPClient.java",
                    "file old path": "src/main/java/org/apache/commons/net/ftp/FTPHTTPClient.java",
                    "file new path": "src/main/java/org/apache/commons/net/ftp/FTPHTTPClient.java",
                    "full name": "src.main.java.org.apache.commons.net.ftp.FTPHTTPClient.connect"
                },
                {
                    "function name": "tunnelHandshake",
                    "function params": [
                        "host",
                        "port",
                        "input",
                        "output"
                    ],
                    "file name": "FTPHTTPClient.java",
                    "file old path": "src/main/java/org/apache/commons/net/ftp/FTPHTTPClient.java",
                    "file new path": "src/main/java/org/apache/commons/net/ftp/FTPHTTPClient.java",
                    "full name": "src.main.java.org.apache.commons.net.ftp.FTPHTTPClient.tunnelHandshake"
                },
                {
                    "function name": "_openDataConnection_",
                    "function params": [
                        "command",
                        "arg"
                    ],
                    "file name": "FTPHTTPClient.java",
                    "file old path": "src/main/java/org/apache/commons/net/ftp/FTPHTTPClient.java",
                    "file new path": "src/main/java/org/apache/commons/net/ftp/FTPHTTPClient.java",
                    "full name": "src.main.java.org.apache.commons.net.ftp.FTPHTTPClient._openDataConnection_"
                }
            ],
            "files that changed": [
                "src/main/java/examples/ftp/FTPClientExample.java",
                "src/main/java/org/apache/commons/net/ftp/FTPClient.java",
                "src/main/java/org/apache/commons/net/ftp/FTPHTTPClient.java"
            ]
        },
        {
            "bug index": "143",
            "bug id": "NET-423",
            "hexsha": "6919eed1a4f064f445849b30da2281f67925cdee",
            "fix_hash": "31ca60623ff48b6b4563ee81901486277610c34b",
            "description": "When setting ControlKeepAliveTimeout. FTPClient.__storeFile might fail when waiting for ack on ControlConnection.\n\nCurrent code:\n{noformat}\n        // Get the transfer response\n        boolean ok = completePendingCommand();\n        if (csl != null) {\n            csl.cleanUp(); // fetch any outstanding keepalive replies\n        }\n{noformat}\nWhile CSL is active, the ControlConnection timeout is set to 1 sec., if using default. This timeout value doesn't leave much room in terms of network/end point latency.\n\nReplacing the code fragment above with the following fragment probably solves the problem (If proper ControlConnection timeout value is set):\n{noformat}\n        if (csl != null) {\n            csl.cleanUp(); // fetch any outstanding keepalive replies\n        }\n        // Get the transfer response\n        boolean ok = completePendingCommand();\n{noformat}\n\nOne workaround is to set ControlKeepAliveReplyTimeout to a higher value.\n",
            "commit number version hash": 998,
            "commit number": 967,
            "function that changed": [
                {
                    "function name": "_storeFile",
                    "function params": [
                        "command",
                        "remote",
                        "local"
                    ],
                    "file name": "FTPClient.java",
                    "file old path": "src/main/java/org/apache/commons/net/ftp/FTPClient.java",
                    "file new path": "src/main/java/org/apache/commons/net/ftp/FTPClient.java",
                    "full name": "src.main.java.org.apache.commons.net.ftp.FTPClient._storeFile"
                },
                {
                    "function name": "_retrieveFile",
                    "function params": [
                        "command",
                        "remote",
                        "local"
                    ],
                    "file name": "FTPClient.java",
                    "file old path": "src/main/java/org/apache/commons/net/ftp/FTPClient.java",
                    "file new path": "src/main/java/org/apache/commons/net/ftp/FTPClient.java",
                    "full name": "src.main.java.org.apache.commons.net.ftp.FTPClient._retrieveFile"
                }
            ],
            "files that changed": [
                "src/main/java/org/apache/commons/net/ftp/FTPClient.java"
            ]
        },
        {
            "bug index": "144",
            "bug id": "NET-426",
            "hexsha": "87058fcc14851401368176e34ccbe07688513c60",
            "fix_hash": "3f56c7abbd2d0257260d2c4a1af458273b4e3425",
            "description": "Currently in FTPSClient class, there is protected _openDataConnection_ method, which create SSLSocket for data connection.  But there is no hook to customize the SSLSocket before startHandshake is called.  \n\nI need to know the remote host ip and port, which i can get for socket, and do custom setup to try to reuse SSL sessions from control connection socket.  Since the socket factory uses createSocket() method, I can't just use custom socket factory since I don't know the host and port.  I can't just override the _openDataConnection_() method in my class since that will call the startHandshake().  \n\nSo it would be nice if you can provide hook, much like _connectAction_(), but for data connection before handshake is started.  You can pass the new data socket as argument to this hook method so one can get remote host and port information.  ",
            "commit number version hash": 1073,
            "commit number": 966,
            "function that changed": [
                {
                    "function name": "_prepareDataSocket_",
                    "function params": [
                        "socket"
                    ],
                    "file name": "FTPSClient.java",
                    "file old path": "src/main/java/org/apache/commons/net/ftp/FTPSClient.java",
                    "file new path": "src/main/java/org/apache/commons/net/ftp/FTPSClient.java",
                    "full name": "src.main.java.org.apache.commons.net.ftp.FTPSClient._prepareDataSocket_"
                },
                {
                    "function name": "_openDataConnection_",
                    "function params": [
                        "command",
                        "arg"
                    ],
                    "file name": "FTPSClient.java",
                    "file old path": "src/main/java/org/apache/commons/net/ftp/FTPSClient.java",
                    "file new path": "src/main/java/org/apache/commons/net/ftp/FTPSClient.java",
                    "full name": "src.main.java.org.apache.commons.net.ftp.FTPSClient._openDataConnection_"
                }
            ],
            "files that changed": [
                "src/main/java/org/apache/commons/net/ftp/FTPSClient.java"
            ]
        },
        {
            "bug index": "145",
            "bug id": "NET-430",
            "hexsha": "6919eed1a4f064f445849b30da2281f67925cdee",
            "fix_hash": "8215881d49fc1a5478b1a30518bbe2b2e90830d6",
            "description": "Login fails if using explizit mode as the reader and writer remain the same after STLS command.\nTake a look at https://issues.apache.org/jira/browse/NET-421 - it's nearly the same bug.\n\nBugfix for POP3SClient.java:\n{noformat}private void performSSLNegotiation() throws IOException\n{\n   ...    \n    _reader = new CRLFLineReader(new InputStreamReader(_input_, __DEFAULT_ENCODING));\n    __writer = new BufferedWriter(new OutputStreamWriter(_output_, __DEFAULT_ENCODING));\n}{noformat} \n\nTherefore you have to change some variables in POP3.java from private to protected.\n",
            "commit number version hash": 998,
            "commit number": 965,
            "function that changed": [
                {
                    "function name": "POP3",
                    "function params": [],
                    "file name": "POP3.java",
                    "file old path": "src/main/java/org/apache/commons/net/pop3/POP3.java",
                    "file new path": "src/main/java/org/apache/commons/net/pop3/POP3.java",
                    "full name": "src.main.java.org.apache.commons.net.pop3.POP3.POP3"
                },
                {
                    "function name": "sendCommand",
                    "function params": [
                        "command",
                        "args"
                    ],
                    "file name": "POP3.java",
                    "file old path": "src/main/java/org/apache/commons/net/pop3/POP3.java",
                    "file new path": "src/main/java/org/apache/commons/net/pop3/POP3.java",
                    "full name": "src.main.java.org.apache.commons.net.pop3.POP3.sendCommand"
                },
                {
                    "function name": "_connectAction_",
                    "function params": [],
                    "file name": "POP3.java",
                    "file old path": "src/main/java/org/apache/commons/net/pop3/POP3.java",
                    "file new path": "src/main/java/org/apache/commons/net/pop3/POP3.java",
                    "full name": "src.main.java.org.apache.commons.net.pop3.POP3._connectAction_"
                },
                {
                    "function name": "disconnect",
                    "function params": [],
                    "file name": "POP3.java",
                    "file old path": "src/main/java/org/apache/commons/net/pop3/POP3.java",
                    "file new path": "src/main/java/org/apache/commons/net/pop3/POP3.java",
                    "full name": "src.main.java.org.apache.commons.net.pop3.POP3.disconnect"
                },
                {
                    "function name": "performSSLNegotiation",
                    "function params": [],
                    "file name": "POP3SClient.java",
                    "file old path": "src/main/java/org/apache/commons/net/pop3/POP3SClient.java",
                    "file new path": "src/main/java/org/apache/commons/net/pop3/POP3SClient.java",
                    "full name": "src.main.java.org.apache.commons.net.pop3.POP3SClient.performSSLNegotiation"
                }
            ],
            "files that changed": [
                "src/main/java/org/apache/commons/net/pop3/POP3.java",
                "src/main/java/org/apache/commons/net/pop3/POP3SClient.java"
            ]
        },
        {
            "bug index": "146",
            "bug id": "NET-434",
            "hexsha": "6919eed1a4f064f445849b30da2281f67925cdee",
            "fix_hash": "ba75ed23264fdc913f7007323d6ca728bc3a712e",
            "description": "FtpClient connect to an ftp server and login successfully, call ftpClient.listFiles() method to list remote directory,\nand ftp server is vsftp and use active mode.\non commons-net-3.0.1 class org.apache.commons.net.ftp.FTPClient at line 680 :  \n   if (!FTPReply.isPositivePreliminary(sendCommand(command, arg)))\n            {\n                server.close();\n                return null;\n            }\ncall sendCommand throw an exception blow:\n\njava.net.SocketTimeoutException: Read timed out\n        at java.net.SocketInputStream.socketRead0(Native Method)\n        at java.net.SocketInputStream.read(SocketInputStream.java:129)\n        at sun.nio.cs.StreamDecoder.readBytes(StreamDecoder.java:264)\n        at sun.nio.cs.StreamDecoder.implRead(StreamDecoder.java:306)\n        at sun.nio.cs.StreamDecoder.read(StreamDecoder.java:158)\n        at java.io.InputStreamReader.read(InputStreamReader.java:167)\n        at java.io.BufferedReader.fill(BufferedReader.java:136)\n        at java.io.BufferedReader.readLine(BufferedReader.java:299)\n        at java.io.BufferedReader.readLine(BufferedReader.java:362)\n        at org.apache.commons.net.ftp.FTP.__getReply(FTP.java:299)\n        at org.apache.commons.net.ftp.FTP.sendCommand(FTP.java:500)\n\n\nclass org.apache.commons.net.ftp.FTPClient at line 648 :  ServerSocket server = _serverSocketFactory_.createServerSocket(getActivePort(), 1, getHostAddress());\n\nthe local listener socket \"server\" is not close when sendCommand method throws exception.\n",
            "commit number version hash": 998,
            "commit number": 964,
            "function that changed": [
                {
                    "function name": "_openDataConnection_",
                    "function params": [
                        "command",
                        "arg"
                    ],
                    "file name": "FTPClient.java",
                    "file old path": "src/main/java/org/apache/commons/net/ftp/FTPClient.java",
                    "file new path": "src/main/java/org/apache/commons/net/ftp/FTPClient.java",
                    "full name": "src.main.java.org.apache.commons.net.ftp.FTPClient._openDataConnection_"
                }
            ],
            "files that changed": [
                "src/main/java/org/apache/commons/net/ftp/FTPClient.java"
            ]
        },
        {
            "bug index": "147",
            "bug id": "NET-428",
            "hexsha": "6919eed1a4f064f445849b30da2281f67925cdee",
            "fix_hash": "5278cd419abc3ccaabc352ba67631b1985eb4bed",
            "description": "new SubnetUtils( \"1.2.3.4/32\" ).getInfo().getAllAddresses() throws\n\nException in thread \"main\" java.lang.ArrayIndexOutOfBoundsException: 0\n$SubnetInfo.getAllAddresses(SubnetUtils.java:166)\n\nSimilarly for /31\n\nIt would make more sense to return an empty array.",
            "commit number version hash": 998,
            "commit number": 953,
            "function that changed": [
                {
                    "function name": "SubnetInfo",
                    "function params": [],
                    "file name": "SubnetUtils.java",
                    "file old path": "src/main/java/org/apache/commons/net/util/SubnetUtils.java",
                    "file new path": "src/main/java/org/apache/commons/net/util/SubnetUtils.java",
                    "full name": "src.main.java.org.apache.commons.net.util.SubnetUtils.SubnetInfo"
                },
                {
                    "function name": "testNET428_32",
                    "function params": [],
                    "file name": "SubnetUtilsTest.java",
                    "file old path": "src/test/java/org/apache/commons/net/SubnetUtilsTest.java",
                    "file new path": "src/test/java/org/apache/commons/net/SubnetUtilsTest.java",
                    "full name": "src.test.java.org.apache.commons.net.SubnetUtilsTest.testNET428_32"
                },
                {
                    "function name": "testNET428_31",
                    "function params": [],
                    "file name": "SubnetUtilsTest.java",
                    "file old path": "src/test/java/org/apache/commons/net/SubnetUtilsTest.java",
                    "file new path": "src/test/java/org/apache/commons/net/SubnetUtilsTest.java",
                    "full name": "src.test.java.org.apache.commons.net.SubnetUtilsTest.testNET428_31"
                }
            ],
            "files that changed": [
                "src/main/java/org/apache/commons/net/util/SubnetUtils.java",
                "src/test/java/org/apache/commons/net/SubnetUtilsTest.java"
            ]
        },
        {
            "bug index": "148",
            "bug id": "NET-421",
            "hexsha": "6919eed1a4f064f445849b30da2281f67925cdee",
            "fix_hash": "432510450e21779226669b40d0b3531baaf8e27b",
            "description": "Just tried to send an email through gmail servers by doing the following:\n{code}AuthenticatingSMTPClient client = new AuthenticatingSMTPClient();\nclient.connect(\"smtp.gmail.com\", 587); // reply: 220 220 mx.google.com ESMTP\nclient.login(); // reply: 250 250 mx.google.com at your service\nclient.execTLS(); // reply: 220 2.0.0 Ready to start TLS\nclient.auth(AUTH_METHOD.PLAIN, username, password); // exception\n...{code}\n\nUnfortunality after execTLS() I get a MalformedServerReplyException. I looked at the SMTPSClient source code and found out that the reader/writer are wrong after execTLS() got called. The performSSLNegotiation() method sets _input_ and _output_ to the new input/output streams from SSLSocket, but the reader/writer are still pointing to the values set inside _connectAction_().\n\nPossible fix for this issue:\n{code}public boolean execTLS() throws SSLException, IOException\n{\n\tif (!SMTPReply.isPositiveCompletion(sendCommand(\"STARTTLS\")))\n\t{\n\t\treturn false;\n\t\t//throw new SSLException(getReplyString());\n\t}\n\tperformSSLNegotiation();\n\t_reader = new CRLFLineReader(new InputStreamReader(_input_, encoding));\n    \t_writer = new BufferedWriter(new OutputStreamWriter(_output_, encoding));\n\treturn true;\n}{code}",
            "commit number version hash": 998,
            "commit number": 952,
            "function that changed": [
                {
                    "function name": "performSSLNegotiation",
                    "function params": [],
                    "file name": "SMTPSClient.java",
                    "file old path": "src/main/java/org/apache/commons/net/smtp/SMTPSClient.java",
                    "file new path": "src/main/java/org/apache/commons/net/smtp/SMTPSClient.java",
                    "full name": "src.main.java.org.apache.commons.net.smtp.SMTPSClient.performSSLNegotiation"
                }
            ],
            "files that changed": [
                "src/main/java/org/apache/commons/net/smtp/SMTP.java",
                "src/main/java/org/apache/commons/net/smtp/SMTPSClient.java"
            ]
        },
        {
            "bug index": "149",
            "bug id": "NET-409",
            "hexsha": "432510450e21779226669b40d0b3531baaf8e27b",
            "fix_hash": "11f725ec69d1aedc1302f50609c8a49d52fefc6d",
            "description": "Functionality works fine on commons-net-2.2.  Error occurred after upgrading library to commons-net-3.0 version.  Sending a file from Windows 7 to CentOS/Linux using FTPClient storeFile method results in truncation of files over 2k in size.  Rolling back upgrade to commons-net-2.2 version fixes problem.",
            "commit number version hash": 952,
            "commit number": 950,
            "function that changed": [
                {
                    "function name": "__storeFile",
                    "function params": [
                        "command",
                        "remote",
                        "local"
                    ],
                    "file name": "FTPClient.java",
                    "file old path": "src/main/java/org/apache/commons/net/ftp/FTPClient.java",
                    "file new path": "src/main/java/org/apache/commons/net/ftp/FTPClient.java",
                    "full name": "src.main.java.org.apache.commons.net.ftp.FTPClient.__storeFile"
                }
            ],
            "files that changed": [
                "src/main/java/org/apache/commons/net/ftp/FTPClient.java"
            ]
        },
        {
            "bug index": "150",
            "bug id": "NET-404",
            "hexsha": "c1026d8510ea97d8c5990cc0d281269311b54caa",
            "fix_hash": "6858072e1ee0bfc7c9865bffade4df0bb1696a72",
            "description": "Adding connect timeout for NET-399 changed the code to use socketFactory.createSocket() instead of createSocket(host, port).\n\nAs FTPSSocketFactory does not implement createSocket(), this means that the context socketFactory is not used, leading to:\n\n{noformat}\njava.net.SocketException: Unconnected sockets not implemented\n        at javax.net.SocketFactory.createSocket(SocketFactory.java:104)\n        at org.apache.commons.net.ftp.FTPClient._openDataConnection_(FTPClient.java:714)\n        at org.apache.commons.net.ftp.FTPSClient._openDataConnection_(FTPSClient.java:549)\n{noformat}\n\nFix is to implement the no-arg createSocket() method.",
            "commit number version hash": 947,
            "commit number": 932,
            "function that changed": [
                {
                    "function name": "createServerSocket",
                    "function params": [],
                    "file name": "FTPSServerSocketFactory.java",
                    "file old path": "src/main/java/org/apache/commons/net/ftp/FTPSServerSocketFactory.java",
                    "file new path": "src/main/java/org/apache/commons/net/ftp/FTPSServerSocketFactory.java",
                    "full name": "src.main.java.org.apache.commons.net.ftp.FTPSServerSocketFactory.createServerSocket"
                }
            ],
            "files that changed": [
                "src/main/java/org/apache/commons/net/ftp/FTPSServerSocketFactory.java"
            ]
        },
        {
            "bug index": "151",
            "bug id": "NET-404",
            "hexsha": "c1026d8510ea97d8c5990cc0d281269311b54caa",
            "fix_hash": "0e3a5bf9d1fd57895bf1ada985ecc800f5261838",
            "description": "Adding connect timeout for NET-399 changed the code to use socketFactory.createSocket() instead of createSocket(host, port).\n\nAs FTPSSocketFactory does not implement createSocket(), this means that the context socketFactory is not used, leading to:\n\n{noformat}\njava.net.SocketException: Unconnected sockets not implemented\n        at javax.net.SocketFactory.createSocket(SocketFactory.java:104)\n        at org.apache.commons.net.ftp.FTPClient._openDataConnection_(FTPClient.java:714)\n        at org.apache.commons.net.ftp.FTPSClient._openDataConnection_(FTPSClient.java:549)\n{noformat}\n\nFix is to implement the no-arg createSocket() method.",
            "commit number version hash": 947,
            "commit number": 931,
            "function that changed": [
                {
                    "function name": "createSocket",
                    "function params": [],
                    "file name": "FTPSSocketFactory.java",
                    "file old path": "src/main/java/org/apache/commons/net/ftp/FTPSSocketFactory.java",
                    "file new path": "src/main/java/org/apache/commons/net/ftp/FTPSSocketFactory.java",
                    "full name": "src.main.java.org.apache.commons.net.ftp.FTPSSocketFactory.createSocket"
                }
            ],
            "files that changed": [
                "src/main/java/org/apache/commons/net/ftp/FTPSSocketFactory.java"
            ]
        },
        {
            "bug index": "152",
            "bug id": "NET-396",
            "hexsha": "91db96b2f79d3e22238e5877fd75a8a8f4848c5c",
            "fix_hash": "87ae91b48a06288678f98c4986af5114c223aae0",
            "description": "The POP3 method setState() is public. However, the state should only be settable by library methods, not by client code, otherwise the state checks won't work correctly.\n\nChanging the visibility would break binary compatibility.\n\nTo maintain compatibility there could be a new method (package-private, which would give test cases access) which is allowed to set the state. Also change the public method to either do nothing or throw an UnsupportedOperationException.\n\nThe getState() method can remain public.",
            "commit number version hash": 629,
            "commit number": 930,
            "function that changed": [
                {
                    "function name": "testNoopCommand",
                    "function params": [],
                    "file name": "POP3ClientCommandsTest.java",
                    "file old path": "src/test/java/org/apache/commons/net/pop3/POP3ClientCommandsTest.java",
                    "file new path": "src/test/java/org/apache/commons/net/pop3/POP3ClientCommandsTest.java",
                    "full name": "src.test.java.org.apache.commons.net.pop3.POP3ClientCommandsTest.testNoopCommand"
                },
                {
                    "function name": "testListMessagesOnEmptyMailbox",
                    "function params": [],
                    "file name": "POP3ClientCommandsTest.java",
                    "file old path": "src/test/java/org/apache/commons/net/pop3/POP3ClientCommandsTest.java",
                    "file new path": "src/test/java/org/apache/commons/net/pop3/POP3ClientCommandsTest.java",
                    "full name": "src.test.java.org.apache.commons.net.pop3.POP3ClientCommandsTest.testListMessagesOnEmptyMailbox"
                },
                {
                    "function name": "testResetAndDeleteShouldFails",
                    "function params": [],
                    "file name": "POP3ClientCommandsTest.java",
                    "file old path": "src/test/java/org/apache/commons/net/pop3/POP3ClientCommandsTest.java",
                    "file new path": "src/test/java/org/apache/commons/net/pop3/POP3ClientCommandsTest.java",
                    "full name": "src.test.java.org.apache.commons.net.pop3.POP3ClientCommandsTest.testResetAndDeleteShouldFails"
                },
                {
                    "function name": "testListMessagesOnFullMailbox",
                    "function params": [],
                    "file name": "POP3ClientCommandsTest.java",
                    "file old path": "src/test/java/org/apache/commons/net/pop3/POP3ClientCommandsTest.java",
                    "file new path": "src/test/java/org/apache/commons/net/pop3/POP3ClientCommandsTest.java",
                    "full name": "src.test.java.org.apache.commons.net.pop3.POP3ClientCommandsTest.testListMessagesOnFullMailbox"
                },
                {
                    "function name": "testListUniqueIDOnFullMailbox",
                    "function params": [],
                    "file name": "POP3ClientCommandsTest.java",
                    "file old path": "src/test/java/org/apache/commons/net/pop3/POP3ClientCommandsTest.java",
                    "file new path": "src/test/java/org/apache/commons/net/pop3/POP3ClientCommandsTest.java",
                    "full name": "src.test.java.org.apache.commons.net.pop3.POP3ClientCommandsTest.testListUniqueIDOnFullMailbox"
                },
                {
                    "function name": "testRetrieveMessageTopShouldFails",
                    "function params": [],
                    "file name": "POP3ClientCommandsTest.java",
                    "file old path": "src/test/java/org/apache/commons/net/pop3/POP3ClientCommandsTest.java",
                    "file new path": "src/test/java/org/apache/commons/net/pop3/POP3ClientCommandsTest.java",
                    "full name": "src.test.java.org.apache.commons.net.pop3.POP3ClientCommandsTest.testRetrieveMessageTopShouldFails"
                },
                {
                    "function name": "testListUniqueIDsOnEmptyMailbox",
                    "function params": [],
                    "file name": "POP3ClientCommandsTest.java",
                    "file old path": "src/test/java/org/apache/commons/net/pop3/POP3ClientCommandsTest.java",
                    "file new path": "src/test/java/org/apache/commons/net/pop3/POP3ClientCommandsTest.java",
                    "full name": "src.test.java.org.apache.commons.net.pop3.POP3ClientCommandsTest.testListUniqueIDsOnEmptyMailbox"
                },
                {
                    "function name": "testListUniqueIDsOnFullMailbox",
                    "function params": [],
                    "file name": "POP3ClientCommandsTest.java",
                    "file old path": "src/test/java/org/apache/commons/net/pop3/POP3ClientCommandsTest.java",
                    "file new path": "src/test/java/org/apache/commons/net/pop3/POP3ClientCommandsTest.java",
                    "full name": "src.test.java.org.apache.commons.net.pop3.POP3ClientCommandsTest.testListUniqueIDsOnFullMailbox"
                },
                {
                    "function name": "testRetrieveMessageShouldFails",
                    "function params": [],
                    "file name": "POP3ClientCommandsTest.java",
                    "file old path": "src/test/java/org/apache/commons/net/pop3/POP3ClientCommandsTest.java",
                    "file new path": "src/test/java/org/apache/commons/net/pop3/POP3ClientCommandsTest.java",
                    "full name": "src.test.java.org.apache.commons.net.pop3.POP3ClientCommandsTest.testRetrieveMessageShouldFails"
                },
                {
                    "function name": "testStatus",
                    "function params": [],
                    "file name": "POP3ClientCommandsTest.java",
                    "file old path": "src/test/java/org/apache/commons/net/pop3/POP3ClientCommandsTest.java",
                    "file new path": "src/test/java/org/apache/commons/net/pop3/POP3ClientCommandsTest.java",
                    "full name": "src.test.java.org.apache.commons.net.pop3.POP3ClientCommandsTest.testStatus"
                },
                {
                    "function name": "testListMessageOnFullMailbox",
                    "function params": [],
                    "file name": "POP3ClientCommandsTest.java",
                    "file old path": "src/test/java/org/apache/commons/net/pop3/POP3ClientCommandsTest.java",
                    "file new path": "src/test/java/org/apache/commons/net/pop3/POP3ClientCommandsTest.java",
                    "full name": "src.test.java.org.apache.commons.net.pop3.POP3ClientCommandsTest.testListMessageOnFullMailbox"
                },
                {
                    "function name": "testLoginFromWrongState",
                    "function params": [],
                    "file name": "POP3ClientTest.java",
                    "file old path": "src/test/java/org/apache/commons/net/pop3/POP3ClientTest.java",
                    "file new path": "src/test/java/org/apache/commons/net/pop3/POP3ClientTest.java",
                    "full name": "src.test.java.org.apache.commons.net.pop3.POP3ClientTest.testLoginFromWrongState"
                },
                {
                    "function name": "testLogoutFromAllStates",
                    "function params": [],
                    "file name": "POP3ClientTest.java",
                    "file old path": "src/test/java/org/apache/commons/net/pop3/POP3ClientTest.java",
                    "file new path": "src/test/java/org/apache/commons/net/pop3/POP3ClientTest.java",
                    "full name": "src.test.java.org.apache.commons.net.pop3.POP3ClientTest.testLogoutFromAllStates"
                }
            ],
            "files that changed": [
                "src/test/java/org/apache/commons/net/pop3/POP3ClientCommandsTest.java",
                "src/test/java/org/apache/commons/net/pop3/POP3ClientTest.java"
            ]
        },
        {
            "bug index": "153",
            "bug id": "NET-396",
            "hexsha": "91db96b2f79d3e22238e5877fd75a8a8f4848c5c",
            "fix_hash": "1b140680b6dc855ddc664b889f4e03928d3b03fb",
            "description": "The POP3 method setState() is public. However, the state should only be settable by library methods, not by client code, otherwise the state checks won't work correctly.\n\nChanging the visibility would break binary compatibility.\n\nTo maintain compatibility there could be a new method (package-private, which would give test cases access) which is allowed to set the state. Also change the public method to either do nothing or throw an UnsupportedOperationException.\n\nThe getState() method can remain public.",
            "commit number version hash": 629,
            "commit number": 929,
            "function that changed": [
                {
                    "function name": "disconnect",
                    "function params": [],
                    "file name": "POP3.java",
                    "file old path": "src/main/java/org/apache/commons/net/pop3/POP3.java",
                    "file new path": "src/main/java/org/apache/commons/net/pop3/POP3.java",
                    "full name": "src.main.java.org.apache.commons.net.pop3.POP3.disconnect"
                },
                {
                    "function name": "setState",
                    "function params": [
                        "state"
                    ],
                    "file name": "POP3.java",
                    "file old path": "src/main/java/org/apache/commons/net/pop3/POP3.java",
                    "file new path": "src/main/java/org/apache/commons/net/pop3/POP3.java",
                    "full name": "src.main.java.org.apache.commons.net.pop3.POP3.setState"
                },
                {
                    "function name": "_connectAction_",
                    "function params": [],
                    "file name": "POP3.java",
                    "file old path": "src/main/java/org/apache/commons/net/pop3/POP3.java",
                    "file new path": "src/main/java/org/apache/commons/net/pop3/POP3.java",
                    "full name": "src.main.java.org.apache.commons.net.pop3.POP3._connectAction_"
                },
                {
                    "function name": "login",
                    "function params": [
                        "username",
                        "password"
                    ],
                    "file name": "POP3Client.java",
                    "file old path": "src/main/java/org/apache/commons/net/pop3/POP3Client.java",
                    "file new path": "src/main/java/org/apache/commons/net/pop3/POP3Client.java",
                    "full name": "src.main.java.org.apache.commons.net.pop3.POP3Client.login"
                },
                {
                    "function name": "login",
                    "function params": [
                        "username",
                        "timestamp",
                        "secret"
                    ],
                    "file name": "POP3Client.java",
                    "file old path": "src/main/java/org/apache/commons/net/pop3/POP3Client.java",
                    "file new path": "src/main/java/org/apache/commons/net/pop3/POP3Client.java",
                    "full name": "src.main.java.org.apache.commons.net.pop3.POP3Client.login"
                },
                {
                    "function name": "logout",
                    "function params": [],
                    "file name": "POP3Client.java",
                    "file old path": "src/main/java/org/apache/commons/net/pop3/POP3Client.java",
                    "file new path": "src/main/java/org/apache/commons/net/pop3/POP3Client.java",
                    "full name": "src.main.java.org.apache.commons.net.pop3.POP3Client.logout"
                }
            ],
            "files that changed": [
                "src/main/java/org/apache/commons/net/pop3/POP3.java",
                "src/main/java/org/apache/commons/net/pop3/POP3Client.java"
            ]
        },
        {
            "bug index": "154",
            "bug id": "NET-399",
            "hexsha": "c1026d8510ea97d8c5990cc0d281269311b54caa",
            "fix_hash": "f362322ddb6f3ed05cbb8427f8e3dd2e568bbde4",
            "description": "Deep inside the lengthy method org.apache.commons.net.ftp.FTPClient._openDataConnection_(int, String) we find this line\n\n            socket = _socketFactory_.createSocket(__passiveHost, __passivePort);\n\nWhich I believe does not set the connect timeout when opening the connection. If the line were changed to the following, it would use the connectTimeout property. \n\n            socket = connect(__passiveHost, __passivePort)",
            "commit number version hash": 947,
            "commit number": 914,
            "function that changed": [
                {
                    "function name": "_openDataConnection_",
                    "function params": [
                        "command",
                        "arg"
                    ],
                    "file name": "FTPClient.java",
                    "file old path": "src/main/java/org/apache/commons/net/ftp/FTPClient.java",
                    "file new path": "src/main/java/org/apache/commons/net/ftp/FTPClient.java",
                    "full name": "src.main.java.org.apache.commons.net.ftp.FTPClient._openDataConnection_"
                }
            ],
            "files that changed": [
                "src/main/java/org/apache/commons/net/ftp/FTPClient.java"
            ]
        },
        {
            "bug index": "155",
            "bug id": "NET-402",
            "hexsha": "c1026d8510ea97d8c5990cc0d281269311b54caa",
            "fix_hash": "1eaa52321395b5f58cbaf6caa27f2bec6f2fe406",
            "description": "BufferedReader is used for wrapping the control channel, and uses its readLine() for getting responses from the server.\n\nThe IMAP, NNTP, POP3 and SMTP protocols require CRLF at the end of lines, but Bufferedreader#readLine() also allows bare CR and LF terminators, which could potentially be included in a server reply.",
            "commit number version hash": 947,
            "commit number": 911,
            "function that changed": [
                {
                    "function name": "performSSLNegotiation",
                    "function params": [],
                    "file name": "IMAPSClient.java",
                    "file old path": "src/main/java/org/apache/commons/net/imap/IMAPSClient.java",
                    "file new path": "src/main/java/org/apache/commons/net/imap/IMAPSClient.java",
                    "full name": "src.main.java.org.apache.commons.net.imap.IMAPSClient.performSSLNegotiation"
                },
                {
                    "function name": "_connectAction_",
                    "function params": [],
                    "file name": "NNTP.java",
                    "file old path": "src/main/java/org/apache/commons/net/nntp/NNTP.java",
                    "file new path": "src/main/java/org/apache/commons/net/nntp/NNTP.java",
                    "full name": "src.main.java.org.apache.commons.net.nntp.NNTP._connectAction_"
                },
                {
                    "function name": "_connectAction_",
                    "function params": [],
                    "file name": "POP3.java",
                    "file old path": "src/main/java/org/apache/commons/net/pop3/POP3.java",
                    "file new path": "src/main/java/org/apache/commons/net/pop3/POP3.java",
                    "full name": "src.main.java.org.apache.commons.net.pop3.POP3._connectAction_"
                },
                {
                    "function name": "_connectAction_",
                    "function params": [],
                    "file name": "SMTP.java",
                    "file old path": "src/main/java/org/apache/commons/net/smtp/SMTP.java",
                    "file new path": "src/main/java/org/apache/commons/net/smtp/SMTP.java",
                    "full name": "src.main.java.org.apache.commons.net.smtp.SMTP._connectAction_"
                }
            ],
            "files that changed": [
                "src/main/java/org/apache/commons/net/imap/IMAPSClient.java",
                "src/main/java/org/apache/commons/net/nntp/NNTP.java",
                "src/main/java/org/apache/commons/net/pop3/POP3.java",
                "src/main/java/org/apache/commons/net/smtp/SMTP.java"
            ]
        },
        {
            "bug index": "156",
            "bug id": "NET-401",
            "hexsha": "c1026d8510ea97d8c5990cc0d281269311b54caa",
            "fix_hash": "4d43ad4001c5196e5cde5b7c009bf57fec1b64da",
            "description": "The FTP class uses BufferedReader for wrapping the control channel, and uses its readLine() for getting responses from the server.\n\nThe FTP protocol requires CRLF at the end of lines, but Bufferedreader#readLine() also allows bare CR and LF terminators, which could potentially be included in a server reply.",
            "commit number version hash": 947,
            "commit number": 910,
            "function that changed": [
                {
                    "function name": "_connectAction_",
                    "function params": [],
                    "file name": "FTPClient.java",
                    "file old path": "src/main/java/org/apache/commons/net/ftp/FTPClient.java",
                    "file new path": "src/main/java/org/apache/commons/net/ftp/FTPClient.java",
                    "full name": "src.main.java.org.apache.commons.net.ftp.FTPClient._connectAction_"
                }
            ],
            "files that changed": [
                "src/main/java/org/apache/commons/net/ftp/FTPClient.java"
            ]
        },
        {
            "bug index": "157",
            "bug id": "NET-401",
            "hexsha": "c1026d8510ea97d8c5990cc0d281269311b54caa",
            "fix_hash": "1fa1b9ec8b48e6a3e69a2629b051927bd70305c8",
            "description": "The FTP class uses BufferedReader for wrapping the control channel, and uses its readLine() for getting responses from the server.\n\nThe FTP protocol requires CRLF at the end of lines, but Bufferedreader#readLine() also allows bare CR and LF terminators, which could potentially be included in a server reply.",
            "commit number version hash": 947,
            "commit number": 909,
            "function that changed": [
                {
                    "function name": "_connectAction_",
                    "function params": [],
                    "file name": "FTP.java",
                    "file old path": "src/main/java/org/apache/commons/net/ftp/FTP.java",
                    "file new path": "src/main/java/org/apache/commons/net/ftp/FTP.java",
                    "full name": "src.main.java.org.apache.commons.net.ftp.FTP._connectAction_"
                }
            ],
            "files that changed": [
                "src/main/java/org/apache/commons/net/ftp/FTP.java"
            ]
        },
        {
            "bug index": "158",
            "bug id": "NET-397",
            "hexsha": "c1026d8510ea97d8c5990cc0d281269311b54caa",
            "fix_hash": "12c952df0694b3df19d02a0fc072d5d1910b0a63",
            "description": "FTPSClient does not provide any code to handle AUTH or ADAT, and does not provide support for handling a reduced buffer size provided by the server.\n\nFTPSCommand defines int values for AUTH and ADAT, but if the integer values are used by client code, the value will be passed to FTPClient, which uses its own array of command strings, and FTPSCommand.AUTH will translate to \"USER\" and ADAT => \"PASS\", similarly for PBSZ, PROT and CCC.\n\nThese commands all need special handling, so should be dealt with by FTPSClient only.\nFTPSClient can override the sendCommand(int) and sendCommand(int, String) methods in FTPClient which will help prevent problems.\nSince most of these commands need additional special handling, there should be execNAME() methods for each.\nFTPSCommand should be deprecated.",
            "commit number version hash": 947,
            "commit number": 906,
            "function that changed": [
                {
                    "function name": "testListMessagesOnFullMailbox",
                    "function params": [],
                    "file name": "POP3ClientCommandsTest.java",
                    "file old path": "src/test/java/org/apache/commons/net/pop3/POP3ClientCommandsTest.java",
                    "file new path": "src/test/java/org/apache/commons/net/pop3/POP3ClientCommandsTest.java",
                    "full name": "src.test.java.org.apache.commons.net.pop3.POP3ClientCommandsTest.testListMessagesOnFullMailbox"
                },
                {
                    "function name": "testResetAndDeleteShouldFails",
                    "function params": [],
                    "file name": "POP3ClientCommandsTest.java",
                    "file old path": "src/test/java/org/apache/commons/net/pop3/POP3ClientCommandsTest.java",
                    "file new path": "src/test/java/org/apache/commons/net/pop3/POP3ClientCommandsTest.java",
                    "full name": "src.test.java.org.apache.commons.net.pop3.POP3ClientCommandsTest.testResetAndDeleteShouldFails"
                },
                {
                    "function name": "testListUniqueIDOnFullMailbox",
                    "function params": [],
                    "file name": "POP3ClientCommandsTest.java",
                    "file old path": "src/test/java/org/apache/commons/net/pop3/POP3ClientCommandsTest.java",
                    "file new path": "src/test/java/org/apache/commons/net/pop3/POP3ClientCommandsTest.java",
                    "full name": "src.test.java.org.apache.commons.net.pop3.POP3ClientCommandsTest.testListUniqueIDOnFullMailbox"
                },
                {
                    "function name": "testRetrieveMessageTopShouldFails",
                    "function params": [],
                    "file name": "POP3ClientCommandsTest.java",
                    "file old path": "src/test/java/org/apache/commons/net/pop3/POP3ClientCommandsTest.java",
                    "file new path": "src/test/java/org/apache/commons/net/pop3/POP3ClientCommandsTest.java",
                    "full name": "src.test.java.org.apache.commons.net.pop3.POP3ClientCommandsTest.testRetrieveMessageTopShouldFails"
                },
                {
                    "function name": "testListUniqueIDsOnFullMailbox",
                    "function params": [],
                    "file name": "POP3ClientCommandsTest.java",
                    "file old path": "src/test/java/org/apache/commons/net/pop3/POP3ClientCommandsTest.java",
                    "file new path": "src/test/java/org/apache/commons/net/pop3/POP3ClientCommandsTest.java",
                    "full name": "src.test.java.org.apache.commons.net.pop3.POP3ClientCommandsTest.testListUniqueIDsOnFullMailbox"
                },
                {
                    "function name": "testRetrieveMessageShouldFails",
                    "function params": [],
                    "file name": "POP3ClientCommandsTest.java",
                    "file old path": "src/test/java/org/apache/commons/net/pop3/POP3ClientCommandsTest.java",
                    "file new path": "src/test/java/org/apache/commons/net/pop3/POP3ClientCommandsTest.java",
                    "full name": "src.test.java.org.apache.commons.net.pop3.POP3ClientCommandsTest.testRetrieveMessageShouldFails"
                },
                {
                    "function name": "testListUniqueIDsOnEmptyMailbox",
                    "function params": [],
                    "file name": "POP3ClientCommandsTest.java",
                    "file old path": "src/test/java/org/apache/commons/net/pop3/POP3ClientCommandsTest.java",
                    "file new path": "src/test/java/org/apache/commons/net/pop3/POP3ClientCommandsTest.java",
                    "full name": "src.test.java.org.apache.commons.net.pop3.POP3ClientCommandsTest.testListUniqueIDsOnEmptyMailbox"
                },
                {
                    "function name": "testStatus",
                    "function params": [],
                    "file name": "POP3ClientCommandsTest.java",
                    "file old path": "src/test/java/org/apache/commons/net/pop3/POP3ClientCommandsTest.java",
                    "file new path": "src/test/java/org/apache/commons/net/pop3/POP3ClientCommandsTest.java",
                    "full name": "src.test.java.org.apache.commons.net.pop3.POP3ClientCommandsTest.testStatus"
                },
                {
                    "function name": "testListMessageOnFullMailbox",
                    "function params": [],
                    "file name": "POP3ClientCommandsTest.java",
                    "file old path": "src/test/java/org/apache/commons/net/pop3/POP3ClientCommandsTest.java",
                    "file new path": "src/test/java/org/apache/commons/net/pop3/POP3ClientCommandsTest.java",
                    "full name": "src.test.java.org.apache.commons.net.pop3.POP3ClientCommandsTest.testListMessageOnFullMailbox"
                },
                {
                    "function name": "testListMessagesOnEmptyMailbox",
                    "function params": [],
                    "file name": "POP3ClientCommandsTest.java",
                    "file old path": "src/test/java/org/apache/commons/net/pop3/POP3ClientCommandsTest.java",
                    "file new path": "src/test/java/org/apache/commons/net/pop3/POP3ClientCommandsTest.java",
                    "full name": "src.test.java.org.apache.commons.net.pop3.POP3ClientCommandsTest.testListMessagesOnEmptyMailbox"
                },
                {
                    "function name": "testNoopCommand",
                    "function params": [],
                    "file name": "POP3ClientCommandsTest.java",
                    "file old path": "src/test/java/org/apache/commons/net/pop3/POP3ClientCommandsTest.java",
                    "file new path": "src/test/java/org/apache/commons/net/pop3/POP3ClientCommandsTest.java",
                    "full name": "src.test.java.org.apache.commons.net.pop3.POP3ClientCommandsTest.testNoopCommand"
                },
                {
                    "function name": "testLoginFromWrongState",
                    "function params": [],
                    "file name": "POP3ClientTest.java",
                    "file old path": "src/test/java/org/apache/commons/net/pop3/POP3ClientTest.java",
                    "file new path": "src/test/java/org/apache/commons/net/pop3/POP3ClientTest.java",
                    "full name": "src.test.java.org.apache.commons.net.pop3.POP3ClientTest.testLoginFromWrongState"
                },
                {
                    "function name": "testLogoutFromAllStates",
                    "function params": [],
                    "file name": "POP3ClientTest.java",
                    "file old path": "src/test/java/org/apache/commons/net/pop3/POP3ClientTest.java",
                    "file new path": "src/test/java/org/apache/commons/net/pop3/POP3ClientTest.java",
                    "full name": "src.test.java.org.apache.commons.net.pop3.POP3ClientTest.testLogoutFromAllStates"
                }
            ],
            "files that changed": [
                "src/test/java/org/apache/commons/net/pop3/POP3ClientCommandsTest.java",
                "src/test/java/org/apache/commons/net/pop3/POP3ClientTest.java"
            ]
        },
        {
            "bug index": "159",
            "bug id": "NET-397",
            "hexsha": "c1026d8510ea97d8c5990cc0d281269311b54caa",
            "fix_hash": "c062f74182fa8eb15b60b520d1f8ae10eff71b1b",
            "description": "FTPSClient does not provide any code to handle AUTH or ADAT, and does not provide support for handling a reduced buffer size provided by the server.\n\nFTPSCommand defines int values for AUTH and ADAT, but if the integer values are used by client code, the value will be passed to FTPClient, which uses its own array of command strings, and FTPSCommand.AUTH will translate to \"USER\" and ADAT => \"PASS\", similarly for PBSZ, PROT and CCC.\n\nThese commands all need special handling, so should be dealt with by FTPSClient only.\nFTPSClient can override the sendCommand(int) and sendCommand(int, String) methods in FTPClient which will help prevent problems.\nSince most of these commands need additional special handling, there should be execNAME() methods for each.\nFTPSCommand should be deprecated.",
            "commit number version hash": 947,
            "commit number": 904,
            "function that changed": [
                {
                    "function name": "xsetState",
                    "function params": [
                        "state"
                    ],
                    "file name": "POP3.java",
                    "file old path": "src/main/java/org/apache/commons/net/pop3/POP3.java",
                    "file new path": "src/main/java/org/apache/commons/net/pop3/POP3.java",
                    "full name": "src.main.java.org.apache.commons.net.pop3.POP3.xsetState"
                },
                {
                    "function name": "_setState",
                    "function params": [
                        "state"
                    ],
                    "file name": "POP3.java",
                    "file old path": "src/main/java/org/apache/commons/net/pop3/POP3.java",
                    "file new path": "src/main/java/org/apache/commons/net/pop3/POP3.java",
                    "full name": "src.main.java.org.apache.commons.net.pop3.POP3._setState"
                },
                {
                    "function name": "disconnect",
                    "function params": [],
                    "file name": "POP3.java",
                    "file old path": "src/main/java/org/apache/commons/net/pop3/POP3.java",
                    "file new path": "src/main/java/org/apache/commons/net/pop3/POP3.java",
                    "full name": "src.main.java.org.apache.commons.net.pop3.POP3.disconnect"
                },
                {
                    "function name": "_connectAction_",
                    "function params": [],
                    "file name": "POP3.java",
                    "file old path": "src/main/java/org/apache/commons/net/pop3/POP3.java",
                    "file new path": "src/main/java/org/apache/commons/net/pop3/POP3.java",
                    "full name": "src.main.java.org.apache.commons.net.pop3.POP3._connectAction_"
                },
                {
                    "function name": "login",
                    "function params": [
                        "username",
                        "timestamp",
                        "secret"
                    ],
                    "file name": "POP3Client.java",
                    "file old path": "src/main/java/org/apache/commons/net/pop3/POP3Client.java",
                    "file new path": "src/main/java/org/apache/commons/net/pop3/POP3Client.java",
                    "full name": "src.main.java.org.apache.commons.net.pop3.POP3Client.login"
                },
                {
                    "function name": "login",
                    "function params": [
                        "username",
                        "password"
                    ],
                    "file name": "POP3Client.java",
                    "file old path": "src/main/java/org/apache/commons/net/pop3/POP3Client.java",
                    "file new path": "src/main/java/org/apache/commons/net/pop3/POP3Client.java",
                    "full name": "src.main.java.org.apache.commons.net.pop3.POP3Client.login"
                },
                {
                    "function name": "logout",
                    "function params": [],
                    "file name": "POP3Client.java",
                    "file old path": "src/main/java/org/apache/commons/net/pop3/POP3Client.java",
                    "file new path": "src/main/java/org/apache/commons/net/pop3/POP3Client.java",
                    "full name": "src.main.java.org.apache.commons.net.pop3.POP3Client.logout"
                }
            ],
            "files that changed": [
                "src/main/java/org/apache/commons/net/pop3/POP3.java",
                "src/main/java/org/apache/commons/net/pop3/POP3Client.java"
            ]
        },
        {
            "bug index": "160",
            "bug id": "NET-397",
            "hexsha": "c1026d8510ea97d8c5990cc0d281269311b54caa",
            "fix_hash": "9faf79c90ce0b4e6d8acdd6b8bfe5fd5fc7bae9f",
            "description": "FTPSClient does not provide any code to handle AUTH or ADAT, and does not provide support for handling a reduced buffer size provided by the server.\n\nFTPSCommand defines int values for AUTH and ADAT, but if the integer values are used by client code, the value will be passed to FTPClient, which uses its own array of command strings, and FTPSCommand.AUTH will translate to \"USER\" and ADAT => \"PASS\", similarly for PBSZ, PROT and CCC.\n\nThese commands all need special handling, so should be dealt with by FTPSClient only.\nFTPSClient can override the sendCommand(int) and sendCommand(int, String) methods in FTPClient which will help prevent problems.\nSince most of these commands need additional special handling, there should be execNAME() methods for each.\nFTPSCommand should be deprecated.",
            "commit number version hash": 947,
            "commit number": 902,
            "function that changed": [
                {
                    "function name": "isProtectedReplyCode",
                    "function params": [
                        "reply"
                    ],
                    "file name": "FTPReply.java",
                    "file old path": "src/main/java/org/apache/commons/net/ftp/FTPReply.java",
                    "file new path": "src/main/java/org/apache/commons/net/ftp/FTPReply.java",
                    "full name": "src.main.java.org.apache.commons.net.ftp.FTPReply.isProtectedReplyCode"
                },
                {
                    "function name": "execPBSZ",
                    "function params": [
                        "pbsz"
                    ],
                    "file name": "FTPSClient.java",
                    "file old path": "src/main/java/org/apache/commons/net/ftp/FTPSClient.java",
                    "file new path": "src/main/java/org/apache/commons/net/ftp/FTPSClient.java",
                    "full name": "src.main.java.org.apache.commons.net.ftp.FTPSClient.execPBSZ"
                },
                {
                    "function name": "execAUTH",
                    "function params": [
                        "mechanism"
                    ],
                    "file name": "FTPSClient.java",
                    "file old path": "src/main/java/org/apache/commons/net/ftp/FTPSClient.java",
                    "file new path": "src/main/java/org/apache/commons/net/ftp/FTPSClient.java",
                    "full name": "src.main.java.org.apache.commons.net.ftp.FTPSClient.execAUTH"
                },
                {
                    "function name": "execADAT",
                    "function params": [
                        "data"
                    ],
                    "file name": "FTPSClient.java",
                    "file old path": "src/main/java/org/apache/commons/net/ftp/FTPSClient.java",
                    "file new path": "src/main/java/org/apache/commons/net/ftp/FTPSClient.java",
                    "full name": "src.main.java.org.apache.commons.net.ftp.FTPSClient.execADAT"
                },
                {
                    "function name": "execCCC",
                    "function params": [],
                    "file name": "FTPSClient.java",
                    "file old path": "src/main/java/org/apache/commons/net/ftp/FTPSClient.java",
                    "file new path": "src/main/java/org/apache/commons/net/ftp/FTPSClient.java",
                    "full name": "src.main.java.org.apache.commons.net.ftp.FTPSClient.execCCC"
                },
                {
                    "function name": "execENC",
                    "function params": [
                        "data"
                    ],
                    "file name": "FTPSClient.java",
                    "file old path": "src/main/java/org/apache/commons/net/ftp/FTPSClient.java",
                    "file new path": "src/main/java/org/apache/commons/net/ftp/FTPSClient.java",
                    "full name": "src.main.java.org.apache.commons.net.ftp.FTPSClient.execENC"
                },
                {
                    "function name": "extractPrefixedData",
                    "function params": [
                        "prefix",
                        "reply"
                    ],
                    "file name": "FTPSClient.java",
                    "file old path": "src/main/java/org/apache/commons/net/ftp/FTPSClient.java",
                    "file new path": "src/main/java/org/apache/commons/net/ftp/FTPSClient.java",
                    "full name": "src.main.java.org.apache.commons.net.ftp.FTPSClient.extractPrefixedData"
                },
                {
                    "function name": "parsePBSZ",
                    "function params": [
                        "pbsz"
                    ],
                    "file name": "FTPSClient.java",
                    "file old path": "src/main/java/org/apache/commons/net/ftp/FTPSClient.java",
                    "file new path": "src/main/java/org/apache/commons/net/ftp/FTPSClient.java",
                    "full name": "src.main.java.org.apache.commons.net.ftp.FTPSClient.parsePBSZ"
                },
                {
                    "function name": "sendCommand",
                    "function params": [
                        "command",
                        "args"
                    ],
                    "file name": "FTPSClient.java",
                    "file old path": "src/main/java/org/apache/commons/net/ftp/FTPSClient.java",
                    "file new path": "src/main/java/org/apache/commons/net/ftp/FTPSClient.java",
                    "full name": "src.main.java.org.apache.commons.net.ftp.FTPSClient.sendCommand"
                },
                {
                    "function name": "parseADATReply",
                    "function params": [
                        "reply"
                    ],
                    "file name": "FTPSClient.java",
                    "file old path": "src/main/java/org/apache/commons/net/ftp/FTPSClient.java",
                    "file new path": "src/main/java/org/apache/commons/net/ftp/FTPSClient.java",
                    "full name": "src.main.java.org.apache.commons.net.ftp.FTPSClient.parseADATReply"
                },
                {
                    "function name": "execAUTH",
                    "function params": [],
                    "file name": "FTPSClient.java",
                    "file old path": "src/main/java/org/apache/commons/net/ftp/FTPSClient.java",
                    "file new path": "src/main/java/org/apache/commons/net/ftp/FTPSClient.java",
                    "full name": "src.main.java.org.apache.commons.net.ftp.FTPSClient.execAUTH"
                },
                {
                    "function name": "execMIC",
                    "function params": [
                        "data"
                    ],
                    "file name": "FTPSClient.java",
                    "file old path": "src/main/java/org/apache/commons/net/ftp/FTPSClient.java",
                    "file new path": "src/main/java/org/apache/commons/net/ftp/FTPSClient.java",
                    "full name": "src.main.java.org.apache.commons.net.ftp.FTPSClient.execMIC"
                },
                {
                    "function name": "execPROT",
                    "function params": [
                        "prot"
                    ],
                    "file name": "FTPSClient.java",
                    "file old path": "src/main/java/org/apache/commons/net/ftp/FTPSClient.java",
                    "file new path": "src/main/java/org/apache/commons/net/ftp/FTPSClient.java",
                    "full name": "src.main.java.org.apache.commons.net.ftp.FTPSClient.execPROT"
                },
                {
                    "function name": "execCONF",
                    "function params": [
                        "data"
                    ],
                    "file name": "FTPSClient.java",
                    "file old path": "src/main/java/org/apache/commons/net/ftp/FTPSClient.java",
                    "file new path": "src/main/java/org/apache/commons/net/ftp/FTPSClient.java",
                    "full name": "src.main.java.org.apache.commons.net.ftp.FTPSClient.execCONF"
                }
            ],
            "files that changed": [
                "src/main/java/org/apache/commons/net/ftp/FTPReply.java",
                "src/main/java/org/apache/commons/net/ftp/FTPSClient.java",
                "src/main/java/org/apache/commons/net/ftp/FTPSCommand.java"
            ]
        },
        {
            "bug index": "161",
            "bug id": "NET-268",
            "hexsha": "c1026d8510ea97d8c5990cc0d281269311b54caa",
            "fix_hash": "46c9b97454b17150b3ee7b2de973eae4aed8522a",
            "description": "SubnetUtilsTest  does not include any tests for CIDRs with masks of /30, /31, /32\n\nIt only includes tests for /8 /16 /24 and /29, plus a test for the (invalid) /0.",
            "commit number version hash": 947,
            "commit number": 894,
            "function that changed": [
                {
                    "function name": "SubnetInfo",
                    "function params": [],
                    "file name": "SubnetUtils.java",
                    "file old path": "src/main/java/org/apache/commons/net/util/SubnetUtils.java",
                    "file new path": "src/main/java/org/apache/commons/net/util/SubnetUtils.java",
                    "full name": "src.main.java.org.apache.commons.net.util.SubnetUtils.SubnetInfo"
                },
                {
                    "function name": "SubnetInfo",
                    "function params": [],
                    "file name": "SubnetUtils.java",
                    "file old path": "src/main/java/org/apache/commons/net/util/SubnetUtils.java",
                    "file new path": "src/main/java/org/apache/commons/net/util/SubnetUtils.java",
                    "full name": "src.main.java.org.apache.commons.net.util.SubnetUtils.SubnetInfo"
                },
                {
                    "function name": "SubnetInfo",
                    "function params": [],
                    "file name": "SubnetUtils.java",
                    "file old path": "src/main/java/org/apache/commons/net/util/SubnetUtils.java",
                    "file new path": "src/main/java/org/apache/commons/net/util/SubnetUtils.java",
                    "full name": "src.main.java.org.apache.commons.net.util.SubnetUtils.SubnetInfo"
                },
                {
                    "function name": "testParseSimpleNetmaskExclusive",
                    "function params": [],
                    "file name": "SubnetUtilsTest.java",
                    "file old path": "src/test/java/org/apache/commons/net/SubnetUtilsTest.java",
                    "file new path": "src/test/java/org/apache/commons/net/SubnetUtilsTest.java",
                    "full name": "src.test.java.org.apache.commons.net.SubnetUtilsTest.testParseSimpleNetmaskExclusive"
                },
                {
                    "function name": "testParseSimpleNetmaskInclusive",
                    "function params": [],
                    "file name": "SubnetUtilsTest.java",
                    "file old path": "src/test/java/org/apache/commons/net/SubnetUtilsTest.java",
                    "file new path": "src/test/java/org/apache/commons/net/SubnetUtilsTest.java",
                    "full name": "src.test.java.org.apache.commons.net.SubnetUtilsTest.testParseSimpleNetmaskInclusive"
                }
            ],
            "files that changed": [
                "src/main/java/org/apache/commons/net/util/SubnetUtils.java",
                "src/test/java/org/apache/commons/net/SubnetUtilsTest.java"
            ]
        },
        {
            "bug index": "162",
            "bug id": "NET-369",
            "hexsha": "c1026d8510ea97d8c5990cc0d281269311b54caa",
            "fix_hash": "90ccc18509a354a05768f1c82051b4096fd5a954",
            "description": "The method addHeaderField() stores a header name/value in a StringBuffer, but provides no means to return the contents of the buffer.\n\nEither the method and the field should be deleted, or there should be a getHeader() method - in which case the storage mechanism should probably be changed to a HashMap of some kind to make it easier to return individual header values.",
            "commit number version hash": 947,
            "commit number": 814,
            "function that changed": [
                {
                    "function name": "Article",
                    "function params": [],
                    "file name": "Article.java",
                    "file old path": "src/main/java/org/apache/commons/net/nntp/Article.java",
                    "file new path": "src/main/java/org/apache/commons/net/nntp/Article.java",
                    "full name": "src.main.java.org.apache.commons.net.nntp.Article.Article"
                }
            ],
            "files that changed": [
                "src/main/java/org/apache/commons/net/nntp/Article.java"
            ]
        },
        {
            "bug index": "163",
            "bug id": "NET-367",
            "hexsha": "c1026d8510ea97d8c5990cc0d281269311b54caa",
            "fix_hash": "33caf19f30fd1060d3cf0b863ebf24fc3327211b",
            "description": "Findbugs reports that ntp.TimeStamp uses incorrect lazy initialisation of the static fields simpleFormatter and utcFormatter.\nThis is because the static fields are written and read without synchronisation. One proposed solution is to make the static fields volatile.\n\nThe fields are SoftReferences containing SimpleDateFormat instances. SimpleDateFormat (SDF) is not thread-safe, so when it is used, the code has to synchronize on the instance.\n\nAre the SoftReferences necessary? Does it really matter if the field cannot be garbage-collected?\nIf not, an Init on Demand Holder (IODH) be safer, and would avoid creating the instance if it was not needed.\n\nAlso, is it necessary to use static fields to hold the SimpleDateFormat instances, given that this requires the synchronisation when using the methods toUTCString/toDateString?\n\nThe other mutable classes in the package are not thread-safe (mutable fields are not volatile or synch) so overall thread-safety for the package would not be compromised by using instance fields and removing the SDF synchronisation and SoftReference.",
            "commit number version hash": 947,
            "commit number": 813,
            "function that changed": [
                {
                    "function name": "toDateString",
                    "function params": [],
                    "file name": "TimeStamp.java",
                    "file old path": "src/main/java/org/apache/commons/net/ntp/TimeStamp.java",
                    "file new path": "src/main/java/org/apache/commons/net/ntp/TimeStamp.java",
                    "full name": "src.main.java.org.apache.commons.net.ntp.TimeStamp.toDateString"
                },
                {
                    "function name": "toUTCString",
                    "function params": [],
                    "file name": "TimeStamp.java",
                    "file old path": "src/main/java/org/apache/commons/net/ntp/TimeStamp.java",
                    "file new path": "src/main/java/org/apache/commons/net/ntp/TimeStamp.java",
                    "full name": "src.main.java.org.apache.commons.net.ntp.TimeStamp.toUTCString"
                }
            ],
            "files that changed": [
                "src/main/java/org/apache/commons/net/ntp/TimeStamp.java"
            ]
        },
        {
            "bug index": "164",
            "bug id": "NET-388",
            "hexsha": "c1026d8510ea97d8c5990cc0d281269311b54caa",
            "fix_hash": "68bcc154c4ee05771538a8ff466e087b3072f06c",
            "description": "VMSVersioningFTPEntryParser#preParse() should not call super.preParse(), because that calls parse() currently, and will be a noop when NET-381 is implemented.\n\nIn either case, calling super.preParse() is wrong.",
            "commit number version hash": 947,
            "commit number": 810,
            "function that changed": [
                {
                    "function name": "preParse",
                    "function params": [
                        "original"
                    ],
                    "file name": "VMSVersioningFTPEntryParser.java",
                    "file old path": "src/main/java/org/apache/commons/net/ftp/parser/VMSVersioningFTPEntryParser.java",
                    "file new path": "src/main/java/org/apache/commons/net/ftp/parser/VMSVersioningFTPEntryParser.java",
                    "full name": "src.main.java.org.apache.commons.net.ftp.parser.VMSVersioningFTPEntryParser.preParse"
                }
            ],
            "files that changed": [
                "src/main/java/org/apache/commons/net/ftp/parser/VMSVersioningFTPEntryParser.java"
            ]
        },
        {
            "bug index": "165",
            "bug id": "NET-362",
            "hexsha": "c1026d8510ea97d8c5990cc0d281269311b54caa",
            "fix_hash": "c55f56d6459fc8c8a9a0df19cba54b3f8ca93de4",
            "description": "The run() method references several variables shared with other threads, but does not use synch. or volatile\nFor example\n\n__threaded\n__isClosed",
            "commit number version hash": 947,
            "commit number": 809,
            "function that changed": [],
            "files that changed": [
                "src/main/java/org/apache/commons/net/telnet/TelnetInputStream.java"
            ]
        },
        {
            "bug index": "166",
            "bug id": "NET-89",
            "hexsha": "c1026d8510ea97d8c5990cc0d281269311b54caa",
            "fix_hash": "ad39cce40fb518021ec1b7b11af61fb4328ff357",
            "description": "TelnetClient does not handle correctly binary transmissions in two places:\n\nFirst in TelnetClient#_connectAction_() the telnet input and output streams are\nwrapped in the NetASCII streams to handle net vs platform line separator\nconversion which breaks the binary data. My quick solution was to simply remove\nthose two wrapping streams. A more general solution might be to provide access\nto the unfilterer stream with methods like getUnfilteredInputStream and\ngetUnfilteredOutputStream or to dynamically stop the NetASCII stream from\n'corrupting' the stream when a TelnetOption.BINARY option is negotiated.\n\n{quote}\nAlso, in TelnetInputStream#__read() there is a bug in the __receiveState\nhandling for the _STATE_IAC state. When a second consecutive IAC (0x255) is\nreceived to encode the single 0x255 character, read does not return 0x255 but\ninstead move on to reading the next char in the stream.\n...\n{quote}\n\nThe above bug report has been moved to the subtask NET-329\n\nI'll provide patches for this.\nColin.",
            "commit number version hash": 947,
            "commit number": 808,
            "function that changed": [
                {
                    "function name": "_connectAction_",
                    "function params": [],
                    "file name": "TelnetClient.java",
                    "file old path": "src/main/java/org/apache/commons/net/telnet/TelnetClient.java",
                    "file new path": "src/main/java/org/apache/commons/net/telnet/TelnetClient.java",
                    "full name": "src.main.java.org.apache.commons.net.telnet.TelnetClient._connectAction_"
                }
            ],
            "files that changed": [
                "src/main/java/org/apache/commons/net/telnet/TelnetClient.java"
            ]
        },
        {
            "bug index": "167",
            "bug id": "NET-377",
            "hexsha": "c1026d8510ea97d8c5990cc0d281269311b54caa",
            "fix_hash": "48a4d8212d4adcc3ac1de986e2abb0d36b931c86",
            "description": "NLST often supports hidden files, but the setting is not used by the code",
            "commit number version hash": 947,
            "commit number": 769,
            "function that changed": [
                {
                    "function name": "listNames",
                    "function params": [
                        "pathname"
                    ],
                    "file name": "FTPClient.java",
                    "file old path": "src/main/java/org/apache/commons/net/ftp/FTPClient.java",
                    "file new path": "src/main/java/org/apache/commons/net/ftp/FTPClient.java",
                    "full name": "src.main.java.org.apache.commons.net.ftp.FTPClient.listNames"
                }
            ],
            "files that changed": [
                "src/main/java/org/apache/commons/net/ftp/FTPClient.java"
            ]
        },
        {
            "bug index": "168",
            "bug id": "NET-372",
            "hexsha": "c1026d8510ea97d8c5990cc0d281269311b54caa",
            "fix_hash": "2294b22f2a3675c47d6d69c1b4071adfc6be2cd0",
            "description": "FTPSClient defaults to providing the TrustManager provided by FTPSTrustManager.\n\nIt should be possible to use setTrustManager(null) to obtain the default JVM trust manager, however this fails with\n\njava.security.cert.CertificateException: No X509TrustManager implementation available\n\nbecause SSLContext.init(KeyManager[] km, TrustManager[] tm, SecureRandom random) expects null parameters, but does not allow for null entries in the TrustManager array.\n\nThe init call needs to be changed so null is passed instead of an array with a null entry.",
            "commit number version hash": 947,
            "commit number": 726,
            "function that changed": [
                {
                    "function name": "initSslContext",
                    "function params": [],
                    "file name": "FTPSClient.java",
                    "file old path": "src/main/java/org/apache/commons/net/ftp/FTPSClient.java",
                    "file new path": "src/main/java/org/apache/commons/net/ftp/FTPSClient.java",
                    "full name": "src.main.java.org.apache.commons.net.ftp.FTPSClient.initSslContext"
                }
            ],
            "files that changed": [
                "src/main/java/org/apache/commons/net/ftp/FTPSClient.java"
            ]
        },
        {
            "bug index": "169",
            "bug id": "NET-354",
            "hexsha": "c1026d8510ea97d8c5990cc0d281269311b54caa",
            "fix_hash": "1f5b8095272bd0516f8a1d352a0a6eaa00d7e096",
            "description": "FTPSClient does not behave properly after issuing CCC (Clear Command Channel). Proper behaviour is to close SSLSocket, but keep underlying connection without SSL open.\nTo achieve this, the SSLSocket should be created with \"false\", like this on line 255 (of FTPSClient v2.2)\n\nSSLSocket socket =\n(SSLSocket) ssf.createSocket(_socket_, ip, port, false);\n\nFurthermore, on sendCommand CCC, sslSocket must be closed before setting _socket = _plainsocket on line 493:\n   _socket.close();\n   _socket = _plainsocket;\n   ...\n\n\nAnd finally, it is wrong to set socket factory to null on line 500 of the same method; this is set properly in exexPROT and should not be reset on CCC.\n\n\n\n\n\n\n\n",
            "commit number version hash": 947,
            "commit number": 722,
            "function that changed": [
                {
                    "function name": "sslNegotiation",
                    "function params": [],
                    "file name": "FTPSClient.java",
                    "file old path": "src/main/java/org/apache/commons/net/ftp/FTPSClient.java",
                    "file new path": "src/main/java/org/apache/commons/net/ftp/FTPSClient.java",
                    "full name": "src.main.java.org.apache.commons.net.ftp.FTPSClient.sslNegotiation"
                },
                {
                    "function name": "sendCommand",
                    "function params": [
                        "command",
                        "args"
                    ],
                    "file name": "FTPSClient.java",
                    "file old path": "src/main/java/org/apache/commons/net/ftp/FTPSClient.java",
                    "file new path": "src/main/java/org/apache/commons/net/ftp/FTPSClient.java",
                    "full name": "src.main.java.org.apache.commons.net.ftp.FTPSClient.sendCommand"
                }
            ],
            "files that changed": [
                "src/main/java/org/apache/commons/net/ftp/FTPSClient.java"
            ]
        },
        {
            "bug index": "170",
            "bug id": "NET-276",
            "hexsha": "c1026d8510ea97d8c5990cc0d281269311b54caa",
            "fix_hash": "81cd8d90b2771b3f514cfdcfc73ee237bfdad6ca",
            "description": "The following command causes a MalformedServerReplyException on my usenet server (astraweb):\nclient.listNewsgroups();\n\nRoot Cause:\nCaused by: org.apache.commons.net.MalformedServerReplyException: alt.binaries.boneless 2230918506 1662764743 y\n\tat org.apache.commons.net.nntp.NNTPClient.__readNewsgroupListing(NNTPClient.java:255)\n\tat org.apache.commons.net.nntp.NNTPClient.listNewsgroups(NNTPClient.java:930)\n\tat org.lievaart.jleecher.protocol.CommandFactory$2.doOnServer(CommandFactory.java:27)\n\tat org.lievaart.jleecher.protocol.NNTPProtocol.callServer(NNTPProtocol.java:33)\n\t... 2 more\n\nMy hypothesis is that NNTP cannot parse the response, because one of the numbers exceeds the Integer range.\nLocally I have applied the following quick fix to get it to work:\n\npublic class NNTPClient extends NNTP {\n...\n...\n...\n\tprivate NewsgroupInfo __parseNewsgroupListEntry(final String entry) {\n\t\tNewsgroupInfo result;\n\t\tStringTokenizer tokenizer;\n\t\tint lastNum, firstNum;\n\t\tString last, first, permission;\n\n\t\tresult = new NewsgroupInfo();\n\t\ttokenizer = new StringTokenizer(entry);\n\n\t\tif (tokenizer.countTokens() < 4) {\n\t\t\treturn null;\n\t\t}\n\n\t\tresult._setNewsgroup(tokenizer.nextToken());\n\t\tlast = tokenizer.nextToken();\n\t\tfirst = tokenizer.nextToken();\n\t\tpermission = tokenizer.nextToken();\n\n\n\t\ttry {\n\t\t\ttry {\n\t\t\t\tlastNum = Integer.parseInt(last);\n\t\t\t} catch (NumberFormatException nfe) {\n\t\t\t\tif (last.matches(\"\\\\d++\")) {\n\t\t\t\t\tlastNum = Integer.MAX_VALUE;\n\t\t\t\t} else {\n\t\t\t\t\tthrow nfe;\n\t\t\t\t}\n\t\t\t}\n",
            "commit number version hash": 947,
            "commit number": 717,
            "function that changed": [
                {
                    "function name": "setArticleNumber",
                    "function params": [
                        "l"
                    ],
                    "file name": "Article.java",
                    "file old path": "src/main/java/org/apache/commons/net/nntp/Article.java",
                    "file new path": "src/main/java/org/apache/commons/net/nntp/Article.java",
                    "full name": "src.main.java.org.apache.commons.net.nntp.Article.setArticleNumber"
                },
                {
                    "function name": "getArticleNumber",
                    "function params": [],
                    "file name": "Article.java",
                    "file old path": "src/main/java/org/apache/commons/net/nntp/Article.java",
                    "file new path": "src/main/java/org/apache/commons/net/nntp/Article.java",
                    "full name": "src.main.java.org.apache.commons.net.nntp.Article.getArticleNumber"
                },
                {
                    "function name": "setArticleNumber",
                    "function params": [
                        "i"
                    ],
                    "file name": "Article.java",
                    "file old path": "src/main/java/org/apache/commons/net/nntp/Article.java",
                    "file new path": "src/main/java/org/apache/commons/net/nntp/Article.java",
                    "full name": "src.main.java.org.apache.commons.net.nntp.Article.setArticleNumber"
                },
                {
                    "function name": "__parseArticleEntry",
                    "function params": [
                        "line"
                    ],
                    "file name": "NNTPClient.java",
                    "file old path": "src/main/java/org/apache/commons/net/nntp/NNTPClient.java",
                    "file new path": "src/main/java/org/apache/commons/net/nntp/NNTPClient.java",
                    "full name": "src.main.java.org.apache.commons.net.nntp.NNTPClient.__parseArticleEntry"
                }
            ],
            "files that changed": [
                "src/main/java/org/apache/commons/net/nntp/Article.java",
                "src/main/java/org/apache/commons/net/nntp/NNTPClient.java"
            ]
        },
        {
            "bug index": "171",
            "bug id": "NET-327",
            "hexsha": "c1026d8510ea97d8c5990cc0d281269311b54caa",
            "fix_hash": "a009b96b6a39744e6c02ea036f1719ae74935424",
            "description": "I'm using Apache Camel as an integration platform. Specifically, at the moment, I depend on the ftp/ftps/sftp support in the camel-ftp component. Under the hood Camel uses Commons Net for ftp and ftps support.\n\nRecently, the camel-ftp component was enhanced (on my request) with the possibility to use a secure data channel. This is accomplished by using the execProt() (and execPsbz()) method in class FTPSClient.\n\nHowever, later on (in case Camel needs to reconnect), one of the connect() methods in the base class to FTPSClient is called. Unfortunately all the connect methods first create an unconnected socket and then tries to connect it. The connection factory now associated with the FTPSClient then throws an exception stating: \"Unconnected sockets not implemented\".\n\nIt seems like the FTPSClient does not support \"re-connect\" once it has entered secure communications mode.\n\nSee also: http://www.mail-archive.com/user@commons.apache.org/msg04933.html\nand http://www.mail-archive.com/users@camel.apache.org/msg08732.html",
            "commit number version hash": 947,
            "commit number": 690,
            "function that changed": [
                {
                    "function name": "disconnect",
                    "function params": [],
                    "file name": "FTPSClient.java",
                    "file old path": "src/main/java/org/apache/commons/net/ftp/FTPSClient.java",
                    "file new path": "src/main/java/org/apache/commons/net/ftp/FTPSClient.java",
                    "full name": "src.main.java.org.apache.commons.net.ftp.FTPSClient.disconnect"
                }
            ],
            "files that changed": [
                "src/main/java/org/apache/commons/net/ftp/FTPSClient.java"
            ]
        },
        {
            "bug index": "172",
            "bug id": "NET-350",
            "hexsha": "c1026d8510ea97d8c5990cc0d281269311b54caa",
            "fix_hash": "bc0f9d2ea697d21ff85d7ff5267b8a77bdb03df5",
            "description": "I'm trying to write some code to have a reliable way to determine if a telnet connection is still available and not closed on the remote server. Even though I first call TelnetClient.isConnected(), the followed TelnetClient.sendAYT() gives me SocketException. The problem occurs when I provide invalid login credentials on purpose when logging in to the telnet server.\n\nCode snippet:\n{code:java}\n    private boolean isConnected() {\n        return isConnected(100);\n    }\n\n    private boolean isConnected(int timeOut) {\n        boolean connected = false;\n\n        if (telnetClient.isConnected()) {\n            try {\n                connected = telnetClient.sendAYT(timeOut);\n            } catch (IOException ex) {\n                Logger.getLogger(ForceLogin.class.getName()).log(Level.SEVERE, null, ex);\n            } catch (IllegalArgumentException ex) {\n                Logger.getLogger(ForceLogin.class.getName()).log(Level.SEVERE, null, ex);\n            } catch (InterruptedException ex) {\n                Logger.getLogger(ForceLogin.class.getName()).log(Level.SEVERE, null, ex);\n            }\n        }\n        \n        System.out.println(\"Still connected? \" + connected);\n\n        return connected;\n    }\n{code}\n\nWhat I do is execute the following:\n{code:java}\nsuccesfulLogin = forceLogin.isConnected();\n\nif (succesfulLogin) {\n        succesfulLogin = forceLogin.isConnected(1000);\n}\n{code}\n\nWhen I try to fail the telnet login (providing invalid credentials), the first \"isConnected()\" call sometimes gives me TRUE, sometimes gives me FALSE. When it's TRUE I want to make sure that we are really still connected using a longer \"TelnetClient.sendAYT()\" timeout. This is where the exception occurs.\n\nResulting exception:\n{code:java}\n16-Jan-2011 16:44:04 force.ForceLogin isConnected\nSEVERE: null\njava.net.SocketException: Broken pipe\n        at java.net.SocketOutputStream.socketWrite0(Native Method)\n        at java.net.SocketOutputStream.socketWrite(SocketOutputStream.java:92)\n        at java.net.SocketOutputStream.write(SocketOutputStream.java:136)\n        at java.io.BufferedOutputStream.flushBuffer(BufferedOutputStream.java:65)\n        at java.io.BufferedOutputStream.flush(BufferedOutputStream.java:123)\n        at org.apache.commons.net.telnet.Telnet._sendAYT(Telnet.java:1095)\n        at org.apache.commons.net.telnet.TelnetClient.sendAYT(TelnetClient.java:206)\n        at force.ForceLogin.isConnected(ForceLogin.java:95)\n        at force.ForceLogin.main(ForceLogin.java:160)\n{code}",
            "commit number version hash": 947,
            "commit number": 689,
            "function that changed": [
                {
                    "function name": "isAvailable",
                    "function params": [],
                    "file name": "SocketClient.java",
                    "file old path": "src/main/java/org/apache/commons/net/SocketClient.java",
                    "file new path": "src/main/java/org/apache/commons/net/SocketClient.java",
                    "full name": "src.main.java.org.apache.commons.net.SocketClient.isAvailable"
                }
            ],
            "files that changed": [
                "src/main/java/org/apache/commons/net/SocketClient.java"
            ]
        },
        {
            "bug index": "173",
            "bug id": "NET-365",
            "hexsha": "c1026d8510ea97d8c5990cc0d281269311b54caa",
            "fix_hash": "92a49d9f04650358740bdc854022ddc918f9a8a9",
            "description": "If you are connecting to an FTP server that speaks German you will get German language month names in result to a LIST command. For month names with three-letter abreviations that are identical to the english versions (eg Jan) everything works fine. For month names that are not identical to the englisch versions (eg Dez instead of Dec) you will get FTPFile entrys without date/time information. This is just annoying, but OK.\n\nYou get a real problem in March. The German abreviation is M\u00e4r, containing the German umlaut character \u00e4. File entries with a date in March will just be dropped without further notice. I think this should be considered a bug.\n\nThe reason for this behaviour is the REGEX in UnixFTPEntryParser, which matches only to month names containing \"normal\" letters:\n\n{noformat}[a-zA-Z]{3}{noformat}\n\nSo the month name \"M\u00e4r\" will not match.\n\nI fixed this by changing this part of REGEX to\n\n{noformat}\\\\D{3}{noformat}\n\nIn REGEX there are two occurances of the not working part that have to be changed.",
            "commit number version hash": 947,
            "commit number": 687,
            "function that changed": [],
            "files that changed": [
                "src/main/java/org/apache/commons/net/ftp/parser/UnixFTPEntryParser.java"
            ]
        },
        {
            "bug index": "174",
            "bug id": "NET-366",
            "hexsha": "c1026d8510ea97d8c5990cc0d281269311b54caa",
            "fix_hash": "ee0a6a094b212a4ca688f167bf9229601b52df8f",
            "description": "The methods {{setServerLanguageCode}} and {{setShortMonthNames}} of {{FTPClientConfig}} do not work.\n\nThe reason for this is, that the config object is not passed to {{ConfigurableFTPFileEntryParserImpl.configure}}.\n\nThe reason for this can be found in class {{UnixFTPEntryParser}}:\n\n{noformat}\npublic UnixFTPEntryParser()\n{\n    this(null);\n}\n\npublic UnixFTPEntryParser(FTPClientConfig config)\n{\n    super(REGEX);\n    configure(config);\n}\n{noformat}\n\nThe contructor {{UnixFTPEntryParser(FTPClientConfig config)}} is never called from outside this class. It is only called once, by the other constructor {{UnixFTPEntryParser()}}.\n\nTherefore in {{UnixFTPEntryParser(FTPClientConfig config)}} the parameter {{config}} is always null.\n\nSo the settings of {{serverLanguageCode}} and {{shortMonthNames}} will never be passed to {{ConfigurableFTPFileEntryParserImpl.configure}}.\n\nThis can be fixed by changing class {{DefaultFTPFileEntryParserFactory}}.\n\nChange from\n{noformat}\npublic FTPFileEntryParser createUnixFTPEntryParser()\n{\n    return new UnixFTPEntryParser();\n}\n{noformat}\n\nto\n\n{noformat}\npublic FTPFileEntryParser createUnixFTPEntryParser()\n{\n    return new UnixFTPEntryParser(config);\n}\n{noformat}\n\nThen the config object will be passed to {{UnixFTPEntryParser}}.",
            "commit number version hash": 947,
            "commit number": 686,
            "function that changed": [
                {
                    "function name": "createNTFTPEntryParser",
                    "function params": [
                        "config"
                    ],
                    "file name": "DefaultFTPFileEntryParserFactory.java",
                    "file old path": "src/main/java/org/apache/commons/net/ftp/parser/DefaultFTPFileEntryParserFactory.java",
                    "file new path": "src/main/java/org/apache/commons/net/ftp/parser/DefaultFTPFileEntryParserFactory.java",
                    "full name": "src.main.java.org.apache.commons.net.ftp.parser.DefaultFTPFileEntryParserFactory.createNTFTPEntryParser"
                },
                {
                    "function name": "createFileEntryParser",
                    "function params": [
                        "key",
                        "config"
                    ],
                    "file name": "DefaultFTPFileEntryParserFactory.java",
                    "file old path": "src/main/java/org/apache/commons/net/ftp/parser/DefaultFTPFileEntryParserFactory.java",
                    "file new path": "src/main/java/org/apache/commons/net/ftp/parser/DefaultFTPFileEntryParserFactory.java",
                    "full name": "src.main.java.org.apache.commons.net.ftp.parser.DefaultFTPFileEntryParserFactory.createFileEntryParser"
                },
                {
                    "function name": "createOS400FTPEntryParser",
                    "function params": [
                        "config"
                    ],
                    "file name": "DefaultFTPFileEntryParserFactory.java",
                    "file old path": "src/main/java/org/apache/commons/net/ftp/parser/DefaultFTPFileEntryParserFactory.java",
                    "file new path": "src/main/java/org/apache/commons/net/ftp/parser/DefaultFTPFileEntryParserFactory.java",
                    "full name": "src.main.java.org.apache.commons.net.ftp.parser.DefaultFTPFileEntryParserFactory.createOS400FTPEntryParser"
                }
            ],
            "files that changed": [
                "src/main/java/org/apache/commons/net/ftp/parser/DefaultFTPFileEntryParserFactory.java"
            ]
        },
        {
            "bug index": "175",
            "bug id": "NET-276",
            "hexsha": "c1026d8510ea97d8c5990cc0d281269311b54caa",
            "fix_hash": "8dbb4478ddaae61c259b9e0a2328f3d0416eaf67",
            "description": "The following command causes a MalformedServerReplyException on my usenet server (astraweb):\nclient.listNewsgroups();\n\nRoot Cause:\nCaused by: org.apache.commons.net.MalformedServerReplyException: alt.binaries.boneless 2230918506 1662764743 y\n\tat org.apache.commons.net.nntp.NNTPClient.__readNewsgroupListing(NNTPClient.java:255)\n\tat org.apache.commons.net.nntp.NNTPClient.listNewsgroups(NNTPClient.java:930)\n\tat org.lievaart.jleecher.protocol.CommandFactory$2.doOnServer(CommandFactory.java:27)\n\tat org.lievaart.jleecher.protocol.NNTPProtocol.callServer(NNTPProtocol.java:33)\n\t... 2 more\n\nMy hypothesis is that NNTP cannot parse the response, because one of the numbers exceeds the Integer range.\nLocally I have applied the following quick fix to get it to work:\n\npublic class NNTPClient extends NNTP {\n...\n...\n...\n\tprivate NewsgroupInfo __parseNewsgroupListEntry(final String entry) {\n\t\tNewsgroupInfo result;\n\t\tStringTokenizer tokenizer;\n\t\tint lastNum, firstNum;\n\t\tString last, first, permission;\n\n\t\tresult = new NewsgroupInfo();\n\t\ttokenizer = new StringTokenizer(entry);\n\n\t\tif (tokenizer.countTokens() < 4) {\n\t\t\treturn null;\n\t\t}\n\n\t\tresult._setNewsgroup(tokenizer.nextToken());\n\t\tlast = tokenizer.nextToken();\n\t\tfirst = tokenizer.nextToken();\n\t\tpermission = tokenizer.nextToken();\n\n\n\t\ttry {\n\t\t\ttry {\n\t\t\t\tlastNum = Integer.parseInt(last);\n\t\t\t} catch (NumberFormatException nfe) {\n\t\t\t\tif (last.matches(\"\\\\d++\")) {\n\t\t\t\t\tlastNum = Integer.MAX_VALUE;\n\t\t\t\t} else {\n\t\t\t\t\tthrow nfe;\n\t\t\t\t}\n\t\t\t}\n",
            "commit number version hash": 947,
            "commit number": 685,
            "function that changed": [
                {
                    "function name": "demo",
                    "function params": [
                        "host",
                        "user",
                        "password"
                    ],
                    "file name": "ExtendedNNTPOps.java",
                    "file old path": "src/main/java/examples/nntp/ExtendedNNTPOps.java",
                    "file new path": "src/main/java/examples/nntp/ExtendedNNTPOps.java",
                    "full name": "src.main.java.examples.nntp.ExtendedNNTPOps.demo"
                },
                {
                    "function name": "main",
                    "function params": [
                        "args"
                    ],
                    "file name": "MessageThreading.java",
                    "file old path": "src/main/java/examples/nntp/MessageThreading.java",
                    "file new path": "src/main/java/examples/nntp/MessageThreading.java",
                    "full name": "src.main.java.examples.nntp.MessageThreading.main"
                },
                {
                    "function name": "getArticleInfo",
                    "function params": [
                        "client",
                        "lowArticleNumber",
                        "highArticleNumber"
                    ],
                    "file name": "NNTPUtils.java",
                    "file old path": "src/main/java/examples/nntp/NNTPUtils.java",
                    "file new path": "src/main/java/examples/nntp/NNTPUtils.java",
                    "full name": "src.main.java.examples.nntp.NNTPUtils.getArticleInfo"
                },
                {
                    "function name": "getArticleInfo",
                    "function params": [
                        "client",
                        "lowArticleNumber",
                        "highArticleNumber"
                    ],
                    "file name": "NNTPUtils.java",
                    "file old path": "src/main/java/examples/nntp/NNTPUtils.java",
                    "file new path": "src/main/java/examples/nntp/NNTPUtils.java",
                    "full name": "src.main.java.examples.nntp.NNTPUtils.getArticleInfo"
                },
                {
                    "function name": "stat",
                    "function params": [
                        "articleNumber"
                    ],
                    "file name": "NNTP.java",
                    "file old path": "src/main/java/org/apache/commons/net/nntp/NNTP.java",
                    "file new path": "src/main/java/org/apache/commons/net/nntp/NNTP.java",
                    "full name": "src.main.java.org.apache.commons.net.nntp.NNTP.stat"
                },
                {
                    "function name": "article",
                    "function params": [
                        "articleNumber"
                    ],
                    "file name": "NNTP.java",
                    "file old path": "src/main/java/org/apache/commons/net/nntp/NNTP.java",
                    "file new path": "src/main/java/org/apache/commons/net/nntp/NNTP.java",
                    "full name": "src.main.java.org.apache.commons.net.nntp.NNTP.article"
                },
                {
                    "function name": "head",
                    "function params": [
                        "articleNumber"
                    ],
                    "file name": "NNTP.java",
                    "file old path": "src/main/java/org/apache/commons/net/nntp/NNTP.java",
                    "file new path": "src/main/java/org/apache/commons/net/nntp/NNTP.java",
                    "full name": "src.main.java.org.apache.commons.net.nntp.NNTP.head"
                },
                {
                    "function name": "article",
                    "function params": [
                        "articleNumber"
                    ],
                    "file name": "NNTP.java",
                    "file old path": "src/main/java/org/apache/commons/net/nntp/NNTP.java",
                    "file new path": "src/main/java/org/apache/commons/net/nntp/NNTP.java",
                    "full name": "src.main.java.org.apache.commons.net.nntp.NNTP.article"
                },
                {
                    "function name": "head",
                    "function params": [
                        "articleNumber"
                    ],
                    "file name": "NNTP.java",
                    "file old path": "src/main/java/org/apache/commons/net/nntp/NNTP.java",
                    "file new path": "src/main/java/org/apache/commons/net/nntp/NNTP.java",
                    "full name": "src.main.java.org.apache.commons.net.nntp.NNTP.head"
                },
                {
                    "function name": "stat",
                    "function params": [
                        "articleNumber"
                    ],
                    "file name": "NNTP.java",
                    "file old path": "src/main/java/org/apache/commons/net/nntp/NNTP.java",
                    "file new path": "src/main/java/org/apache/commons/net/nntp/NNTP.java",
                    "full name": "src.main.java.org.apache.commons.net.nntp.NNTP.stat"
                },
                {
                    "function name": "body",
                    "function params": [
                        "articleNumber"
                    ],
                    "file name": "NNTP.java",
                    "file old path": "src/main/java/org/apache/commons/net/nntp/NNTP.java",
                    "file new path": "src/main/java/org/apache/commons/net/nntp/NNTP.java",
                    "full name": "src.main.java.org.apache.commons.net.nntp.NNTP.body"
                },
                {
                    "function name": "body",
                    "function params": [
                        "articleNumber"
                    ],
                    "file name": "NNTP.java",
                    "file old path": "src/main/java/org/apache/commons/net/nntp/NNTP.java",
                    "file new path": "src/main/java/org/apache/commons/net/nntp/NNTP.java",
                    "full name": "src.main.java.org.apache.commons.net.nntp.NNTP.body"
                },
                {
                    "function name": "retrieveHeader",
                    "function params": [
                        "header",
                        "articleNumber"
                    ],
                    "file name": "NNTPClient.java",
                    "file old path": "src/main/java/org/apache/commons/net/nntp/NNTPClient.java",
                    "file new path": "src/main/java/org/apache/commons/net/nntp/NNTPClient.java",
                    "full name": "src.main.java.org.apache.commons.net.nntp.NNTPClient.retrieveHeader"
                },
                {
                    "function name": "retrieveArticleInfo",
                    "function params": [
                        "lowArticleNumber",
                        "highArticleNumber"
                    ],
                    "file name": "NNTPClient.java",
                    "file old path": "src/main/java/org/apache/commons/net/nntp/NNTPClient.java",
                    "file new path": "src/main/java/org/apache/commons/net/nntp/NNTPClient.java",
                    "full name": "src.main.java.org.apache.commons.net.nntp.NNTPClient.retrieveArticleInfo"
                },
                {
                    "function name": "selectArticle",
                    "function params": [
                        "articleNumber",
                        "pointer"
                    ],
                    "file name": "NNTPClient.java",
                    "file old path": "src/main/java/org/apache/commons/net/nntp/NNTPClient.java",
                    "file new path": "src/main/java/org/apache/commons/net/nntp/NNTPClient.java",
                    "full name": "src.main.java.org.apache.commons.net.nntp.NNTPClient.selectArticle"
                },
                {
                    "function name": "retrieveHeader",
                    "function params": [
                        "header",
                        "articleNumber"
                    ],
                    "file name": "NNTPClient.java",
                    "file old path": "src/main/java/org/apache/commons/net/nntp/NNTPClient.java",
                    "file new path": "src/main/java/org/apache/commons/net/nntp/NNTPClient.java",
                    "full name": "src.main.java.org.apache.commons.net.nntp.NNTPClient.retrieveHeader"
                },
                {
                    "function name": "selectArticle",
                    "function params": [
                        "articleNumber"
                    ],
                    "file name": "NNTPClient.java",
                    "file old path": "src/main/java/org/apache/commons/net/nntp/NNTPClient.java",
                    "file new path": "src/main/java/org/apache/commons/net/nntp/NNTPClient.java",
                    "full name": "src.main.java.org.apache.commons.net.nntp.NNTPClient.selectArticle"
                },
                {
                    "function name": "__parseGroupReply",
                    "function params": [
                        "reply",
                        "info"
                    ],
                    "file name": "NNTPClient.java",
                    "file old path": "src/main/java/org/apache/commons/net/nntp/NNTPClient.java",
                    "file new path": "src/main/java/org/apache/commons/net/nntp/NNTPClient.java",
                    "full name": "src.main.java.org.apache.commons.net.nntp.NNTPClient.__parseGroupReply"
                },
                {
                    "function name": "__parseArticlePointer",
                    "function params": [
                        "reply",
                        "pointer"
                    ],
                    "file name": "NNTPClient.java",
                    "file old path": "src/main/java/org/apache/commons/net/nntp/NNTPClient.java",
                    "file new path": "src/main/java/org/apache/commons/net/nntp/NNTPClient.java",
                    "full name": "src.main.java.org.apache.commons.net.nntp.NNTPClient.__parseArticlePointer"
                },
                {
                    "function name": "selectArticle",
                    "function params": [
                        "articleNumber"
                    ],
                    "file name": "NNTPClient.java",
                    "file old path": "src/main/java/org/apache/commons/net/nntp/NNTPClient.java",
                    "file new path": "src/main/java/org/apache/commons/net/nntp/NNTPClient.java",
                    "full name": "src.main.java.org.apache.commons.net.nntp.NNTPClient.selectArticle"
                },
                {
                    "function name": "retrieveArticleInfo",
                    "function params": [
                        "lowArticleNumber",
                        "highArticleNumber"
                    ],
                    "file name": "NNTPClient.java",
                    "file old path": "src/main/java/org/apache/commons/net/nntp/NNTPClient.java",
                    "file new path": "src/main/java/org/apache/commons/net/nntp/NNTPClient.java",
                    "full name": "src.main.java.org.apache.commons.net.nntp.NNTPClient.retrieveArticleInfo"
                },
                {
                    "function name": "selectArticle",
                    "function params": [
                        "articleNumber",
                        "pointer"
                    ],
                    "file name": "NNTPClient.java",
                    "file old path": "src/main/java/org/apache/commons/net/nntp/NNTPClient.java",
                    "file new path": "src/main/java/org/apache/commons/net/nntp/NNTPClient.java",
                    "full name": "src.main.java.org.apache.commons.net.nntp.NNTPClient.selectArticle"
                },
                {
                    "function name": "__parseNewsgroupListEntry",
                    "function params": [
                        "entry"
                    ],
                    "file name": "NNTPClient.java",
                    "file old path": "src/main/java/org/apache/commons/net/nntp/NNTPClient.java",
                    "file new path": "src/main/java/org/apache/commons/net/nntp/NNTPClient.java",
                    "full name": "src.main.java.org.apache.commons.net.nntp.NNTPClient.__parseNewsgroupListEntry"
                },
                {
                    "function name": "_setFirstArticle",
                    "function params": [
                        "first"
                    ],
                    "file name": "NewsgroupInfo.java",
                    "file old path": "src/main/java/org/apache/commons/net/nntp/NewsgroupInfo.java",
                    "file new path": "src/main/java/org/apache/commons/net/nntp/NewsgroupInfo.java",
                    "full name": "src.main.java.org.apache.commons.net.nntp.NewsgroupInfo._setFirstArticle"
                },
                {
                    "function name": "getLastArticle",
                    "function params": [],
                    "file name": "NewsgroupInfo.java",
                    "file old path": "src/main/java/org/apache/commons/net/nntp/NewsgroupInfo.java",
                    "file new path": "src/main/java/org/apache/commons/net/nntp/NewsgroupInfo.java",
                    "full name": "src.main.java.org.apache.commons.net.nntp.NewsgroupInfo.getLastArticle"
                },
                {
                    "function name": "_setLastArticle",
                    "function params": [
                        "last"
                    ],
                    "file name": "NewsgroupInfo.java",
                    "file old path": "src/main/java/org/apache/commons/net/nntp/NewsgroupInfo.java",
                    "file new path": "src/main/java/org/apache/commons/net/nntp/NewsgroupInfo.java",
                    "full name": "src.main.java.org.apache.commons.net.nntp.NewsgroupInfo._setLastArticle"
                },
                {
                    "function name": "_setArticleCount",
                    "function params": [
                        "count"
                    ],
                    "file name": "NewsgroupInfo.java",
                    "file old path": "src/main/java/org/apache/commons/net/nntp/NewsgroupInfo.java",
                    "file new path": "src/main/java/org/apache/commons/net/nntp/NewsgroupInfo.java",
                    "full name": "src.main.java.org.apache.commons.net.nntp.NewsgroupInfo._setArticleCount"
                },
                {
                    "function name": "getFirstArticle",
                    "function params": [],
                    "file name": "NewsgroupInfo.java",
                    "file old path": "src/main/java/org/apache/commons/net/nntp/NewsgroupInfo.java",
                    "file new path": "src/main/java/org/apache/commons/net/nntp/NewsgroupInfo.java",
                    "full name": "src.main.java.org.apache.commons.net.nntp.NewsgroupInfo.getFirstArticle"
                },
                {
                    "function name": "_setArticleCount",
                    "function params": [
                        "count"
                    ],
                    "file name": "NewsgroupInfo.java",
                    "file old path": "src/main/java/org/apache/commons/net/nntp/NewsgroupInfo.java",
                    "file new path": "src/main/java/org/apache/commons/net/nntp/NewsgroupInfo.java",
                    "full name": "src.main.java.org.apache.commons.net.nntp.NewsgroupInfo._setArticleCount"
                },
                {
                    "function name": "_setLastArticle",
                    "function params": [
                        "last"
                    ],
                    "file name": "NewsgroupInfo.java",
                    "file old path": "src/main/java/org/apache/commons/net/nntp/NewsgroupInfo.java",
                    "file new path": "src/main/java/org/apache/commons/net/nntp/NewsgroupInfo.java",
                    "full name": "src.main.java.org.apache.commons.net.nntp.NewsgroupInfo._setLastArticle"
                },
                {
                    "function name": "_setFirstArticle",
                    "function params": [
                        "first"
                    ],
                    "file name": "NewsgroupInfo.java",
                    "file old path": "src/main/java/org/apache/commons/net/nntp/NewsgroupInfo.java",
                    "file new path": "src/main/java/org/apache/commons/net/nntp/NewsgroupInfo.java",
                    "full name": "src.main.java.org.apache.commons.net.nntp.NewsgroupInfo._setFirstArticle"
                },
                {
                    "function name": "getArticleCount",
                    "function params": [],
                    "file name": "NewsgroupInfo.java",
                    "file old path": "src/main/java/org/apache/commons/net/nntp/NewsgroupInfo.java",
                    "file new path": "src/main/java/org/apache/commons/net/nntp/NewsgroupInfo.java",
                    "full name": "src.main.java.org.apache.commons.net.nntp.NewsgroupInfo.getArticleCount"
                }
            ],
            "files that changed": [
                "src/main/java/examples/nntp/ExtendedNNTPOps.java",
                "src/main/java/examples/nntp/MessageThreading.java",
                "src/main/java/examples/nntp/NNTPUtils.java",
                "src/main/java/org/apache/commons/net/nntp/ArticlePointer.java",
                "src/main/java/org/apache/commons/net/nntp/NNTP.java",
                "src/main/java/org/apache/commons/net/nntp/NNTPClient.java",
                "src/main/java/org/apache/commons/net/nntp/NewsgroupInfo.java"
            ]
        },
        {
            "bug index": "176",
            "bug id": "NET-185",
            "hexsha": "c1026d8510ea97d8c5990cc0d281269311b54caa",
            "fix_hash": "4637434691d853d013daac0af1374cfcda3de031",
            "description": "In Threader.gatherSubjects, it appears to be possible for tail.next = c.child; to be null [line 356]:\n\n\t349\t if (old.threadable == null && c.threadable == null) {\n\t350\t\t// both dummies - merge them\n\t351\t\tThreadContainer tail;\n\t352\t\tfor (tail = old.child;\n\t353\t\ttail != null && tail.next != null;\n\t354\t\ttail = tail.next);\n\t355\t\n\t356\t\ttail.next = c.child;\n\nIt also seems kind of pointless, given that the subsequent line immediately resets tail to c.child. Perhaps the ; is not intended there?",
            "commit number version hash": 947,
            "commit number": 681,
            "function that changed": [
                {
                    "function name": "gatherSubjects",
                    "function params": [],
                    "file name": "Threader.java",
                    "file old path": "src/main/java/org/apache/commons/net/nntp/Threader.java",
                    "file new path": "src/main/java/org/apache/commons/net/nntp/Threader.java",
                    "full name": "src.main.java.org.apache.commons.net.nntp.Threader.gatherSubjects"
                }
            ],
            "files that changed": [
                "src/main/java/org/apache/commons/net/nntp/Threader.java"
            ]
        },
        {
            "bug index": "177",
            "bug id": "NET-364",
            "hexsha": "c1026d8510ea97d8c5990cc0d281269311b54caa",
            "fix_hash": "1226cb414d62e0f7f9b2433fd8f6a839f9208594",
            "description": "References are currently stored as tab-separated strings in a string buffer, which is then parsed to return the list.\n\nAlso, the article information may contain several space-separated references.\n\nArticle.isReply() is also incorrect, as it depends on the subject containing Re;, rather than whether there are any references.",
            "commit number version hash": 947,
            "commit number": 676,
            "function that changed": [
                {
                    "function name": "getReferences",
                    "function params": [],
                    "file name": "Article.java",
                    "file old path": "src/main/java/org/apache/commons/net/nntp/Article.java",
                    "file new path": "src/main/java/org/apache/commons/net/nntp/Article.java",
                    "full name": "src.main.java.org.apache.commons.net.nntp.Article.getReferences"
                },
                {
                    "function name": "subjectIsReply",
                    "function params": [],
                    "file name": "Article.java",
                    "file old path": "src/main/java/org/apache/commons/net/nntp/Article.java",
                    "file new path": "src/main/java/org/apache/commons/net/nntp/Article.java",
                    "full name": "src.main.java.org.apache.commons.net.nntp.Article.subjectIsReply"
                },
                {
                    "function name": "simplifySubject",
                    "function params": [],
                    "file name": "Article.java",
                    "file old path": "src/main/java/org/apache/commons/net/nntp/Article.java",
                    "file new path": "src/main/java/org/apache/commons/net/nntp/Article.java",
                    "full name": "src.main.java.org.apache.commons.net.nntp.Article.simplifySubject"
                },
                {
                    "function name": "addReference",
                    "function params": [
                        "msgId"
                    ],
                    "file name": "Article.java",
                    "file old path": "src/main/java/org/apache/commons/net/nntp/Article.java",
                    "file new path": "src/main/java/org/apache/commons/net/nntp/Article.java",
                    "full name": "src.main.java.org.apache.commons.net.nntp.Article.addReference"
                },
                {
                    "function name": "toString",
                    "function params": [],
                    "file name": "Article.java",
                    "file old path": "src/main/java/org/apache/commons/net/nntp/Article.java",
                    "file new path": "src/main/java/org/apache/commons/net/nntp/Article.java",
                    "full name": "src.main.java.org.apache.commons.net.nntp.Article.toString"
                }
            ],
            "files that changed": [
                "src/main/java/org/apache/commons/net/nntp/Article.java"
            ]
        },
        {
            "bug index": "178",
            "bug id": "NET-363",
            "hexsha": "c1026d8510ea97d8c5990cc0d281269311b54caa",
            "fix_hash": "03da017dfc0a0a033c9f9cbb07f40df2f7024070",
            "description": "When the FTP server is behind a firewall, FTPClient can connect, but it cannot transfer data. This is because the FTP server provides it's own address instead of the firewall address to make the connection. I have confirmed the problem by hacking a copy of FTPClient to set the __passiveHost to the appropriate internet address. With this hack, I can transfer data.\n\nPerhaps the FTP server could be configured differently to fix the issue. Unfortunately, I do not have access to the server configuration. I do know that the commercial product IpswitchFtp does deal with the issue as this extract from it's log shows:\n------------\nPASV\n227 Entering Passive Mode (192,168,13,11,195,129)\nconnecting data channel to 192.168.13.11:195,129(50049)\nSubstituting connection address 159.106.121.79 for private address 192.168.13.11 from PASV\ndata channel connected to 159.106.121.79:195,129(50049)\nLIST\n125 List started OK\ntransferred 4157 bytes in 0.078 seconds, 425.688 kbps ( 53.211 kBps), transfer succeeded.\n250 List completed successfully.\nQUIT\n----------------------------\nI can take a shot at a fix if you want. I'll set some timeout, and  if that fails, I'll use the original address",
            "commit number version hash": 947,
            "commit number": 673,
            "function that changed": [
                {
                    "function name": "__parsePassiveModeReply",
                    "function params": [
                        "reply"
                    ],
                    "file name": "FTPClient.java",
                    "file old path": "src/main/java/org/apache/commons/net/ftp/FTPClient.java",
                    "file new path": "src/main/java/org/apache/commons/net/ftp/FTPClient.java",
                    "full name": "src.main.java.org.apache.commons.net.ftp.FTPClient.__parsePassiveModeReply"
                }
            ],
            "files that changed": [
                "src/main/java/org/apache/commons/net/ftp/FTPClient.java"
            ]
        },
        {
            "bug index": "179",
            "bug id": "NET-348",
            "hexsha": "c1026d8510ea97d8c5990cc0d281269311b54caa",
            "fix_hash": "4b95006a95ba1c4b756c0dfaab8b5a9ab43f3e6d",
            "description": "Hello \n\n  I am using Telnet library of common.net. And I got an exception \n\nin TelnetInputStream once in a while. \n\n \n\nThe exception message was as following.\n\n------------------------------------------------------------------------\n--------------------------------------------\n\nException in thread \"Thread-9399\" java.lang.IllegalStateException: Queue\nis full! Cannot process another character.\n\n        at\norg.apache.commons.net.telnet.TelnetInputStream.__processChar(TelnetInpu\ntStream.java:306)\n\n        at\norg.apache.commons.net.telnet.TelnetInputStream.run(TelnetInputStream.ja\nva:596)\n\n        at java.lang.Thread.run(Thread.java:619)\n\n------------------------------------------------------------------------\n--------------------------------------------\n\n \n\nAt first, I think it is possible that I didn't call read() in time to\nread the data in TelnetInputStream so that the buffer\n\nof TelnetInputStream overflowed. But then I wrote a simple program to\ntest it and I found that it is not the cause.\n\n \n\nThen I studied the source of TelnetInputStream. The segment of function\n__processChar is as following.\n\n280\n<http://commons.apache.org/net/xref/org/apache/commons/net/telnet/Telnet\nInputStream.html#280>      private void __processChar(int ch) throws\nInterruptedException\n281\n<http://commons.apache.org/net/xref/org/apache/commons/net/telnet/Telnet\nInputStream.html#281>      {\n282\n<http://commons.apache.org/net/xref/org/apache/commons/net/telnet/Telnet\nInputStream.html#282>          // Critical section because we're\naltering __bytesAvailable,\n283\n<http://commons.apache.org/net/xref/org/apache/commons/net/telnet/Telnet\nInputStream.html#283>          // __queueTail, and the contents of\n_queue.\n284\n<http://commons.apache.org/net/xref/org/apache/commons/net/telnet/Telnet\nInputStream.html#284>          synchronized (__queue)\n285\n<http://commons.apache.org/net/xref/org/apache/commons/net/telnet/Telnet\nInputStream.html#285>          {\n286\n<http://commons.apache.org/net/xref/org/apache/commons/net/telnet/Telnet\nInputStream.html#286>              while (__bytesAvailable >=\n__queue.length - 1)\n287\n<http://commons.apache.org/net/xref/org/apache/commons/net/telnet/Telnet\nInputStream.html#287>              {\n288\n<http://commons.apache.org/net/xref/org/apache/commons/net/telnet/Telnet\nInputStream.html#288>                  // The queue is full. We need to\nwait before adding any more data to it. Hopefully the stream owner\n289\n<http://commons.apache.org/net/xref/org/apache/commons/net/telnet/Telnet\nInputStream.html#289>                  // will consume some data soon! \n290\n<http://commons.apache.org/net/xref/org/apache/commons/net/telnet/Telnet\nInputStream.html#290>                  if(__threaded)\n291\n<http://commons.apache.org/net/xref/org/apache/commons/net/telnet/Telnet\nInputStream.html#291>                  {\n292\n<http://commons.apache.org/net/xref/org/apache/commons/net/telnet/Telnet\nInputStream.html#292>                      __queue.notify();\n293\n<http://commons.apache.org/net/xref/org/apache/commons/net/telnet/Telnet\nInputStream.html#293>                      try\n294\n<http://commons.apache.org/net/xref/org/apache/commons/net/telnet/Telnet\nInputStream.html#294>                      {\n295\n<http://commons.apache.org/net/xref/org/apache/commons/net/telnet/Telnet\nInputStream.html#295>                          __queue.wait();\n296\n<http://commons.apache.org/net/xref/org/apache/commons/net/telnet/Telnet\nInputStream.html#296>                      }\n297\n<http://commons.apache.org/net/xref/org/apache/commons/net/telnet/Telnet\nInputStream.html#297>                      catch (InterruptedException\ne)\n298\n<http://commons.apache.org/net/xref/org/apache/commons/net/telnet/Telnet\nInputStream.html#298>                      {\n299\n<http://commons.apache.org/net/xref/org/apache/commons/net/telnet/Telnet\nInputStream.html#299>                          throw e;\n300\n<http://commons.apache.org/net/xref/org/apache/commons/net/telnet/Telnet\nInputStream.html#300>                      }\n301\n<http://commons.apache.org/net/xref/org/apache/commons/net/telnet/Telnet\nInputStream.html#301>                  }\n302\n<http://commons.apache.org/net/xref/org/apache/commons/net/telnet/Telnet\nInputStream.html#302>                  else\n303\n<http://commons.apache.org/net/xref/org/apache/commons/net/telnet/Telnet\nInputStream.html#303>                  {\n304\n<http://commons.apache.org/net/xref/org/apache/commons/net/telnet/Telnet\nInputStream.html#304>                      // We've been asked to add\nanother character to the queue, but it is already full and there's\n305\n<http://commons.apache.org/net/xref/org/apache/commons/net/telnet/Telnet\nInputStream.html#305>                      // no other thread to drain\nit. This should not have happened! \n306\n<http://commons.apache.org/net/xref/org/apache/commons/net/telnet/Telnet\nInputStream.html#306>                      throw new\nIllegalStateException(\"Queue is full! Cannot process another\ncharacter.\");\n307\n<http://commons.apache.org/net/xref/org/apache/commons/net/telnet/Telnet\nInputStream.html#307>                  }\n308\n<http://commons.apache.org/net/xref/org/apache/commons/net/telnet/Telnet\nInputStream.html#308>              }\n309\n<http://commons.apache.org/net/xref/org/apache/commons/net/telnet/Telnet\nInputStream.html#309>  \n310\n<http://commons.apache.org/net/xref/org/apache/commons/net/telnet/Telnet\nInputStream.html#310>              // Need to do this in case we're not\nfull, but block on a read\n311\n<http://commons.apache.org/net/xref/org/apache/commons/net/telnet/Telnet\nInputStream.html#311>              if (__readIsWaiting && __threaded)\n312\n<http://commons.apache.org/net/xref/org/apache/commons/net/telnet/Telnet\nInputStream.html#312>              {\n313\n<http://commons.apache.org/net/xref/org/apache/commons/net/telnet/Telnet\nInputStream.html#313>                  __queue.notify();\n314\n<http://commons.apache.org/net/xref/org/apache/commons/net/telnet/Telnet\nInputStream.html#314>              }\n315\n<http://commons.apache.org/net/xref/org/apache/commons/net/telnet/Telnet\nInputStream.html#315>  \n316\n<http://commons.apache.org/net/xref/org/apache/commons/net/telnet/Telnet\nInputStream.html#316>              __queue[__queueTail] = ch;\n317\n<http://commons.apache.org/net/xref/org/apache/commons/net/telnet/Telnet\nInputStream.html#317>              ++__bytesAvailable;\n318\n<http://commons.apache.org/net/xref/org/apache/commons/net/telnet/Telnet\nInputStream.html#318>  \n319\n<http://commons.apache.org/net/xref/org/apache/commons/net/telnet/Telnet\nInputStream.html#319>              if (++__queueTail >= __queue.length)\n320\n<http://commons.apache.org/net/xref/org/apache/commons/net/telnet/Telnet\nInputStream.html#320>                  __queueTail = 0;\n321\n<http://commons.apache.org/net/xref/org/apache/commons/net/telnet/Telnet\nInputStream.html#321>          }\n322\n<http://commons.apache.org/net/xref/org/apache/commons/net/telnet/Telnet\nInputStream.html#322>      }\n\n \n\nIn line 306 the exception IllegalStateException is thrown. In this\ncondition, the variable __threaded should be false.\n\nBut I didn't call TelnetClient.setReaderThread\n<http://commons.apache.org/net/api/org/apache/commons/net/telnet/TelnetC\nlient.html#setReaderThread%28boolean%29>  to set it to false.\n\n \n\nThe __threaded is set to true in _start() of TelnetInputStream\n\n84\n<http://commons.apache.org/net/xref/org/apache/commons/net/telnet/Telnet\nInputStream.html#84>       void _start()\n85\n<http://commons.apache.org/net/xref/org/apache/commons/net/telnet/Telnet\nInputStream.html#85>       {\n86\n<http://commons.apache.org/net/xref/org/apache/commons/net/telnet/Telnet\nInputStream.html#86>           if(__thread == null)\n87\n<http://commons.apache.org/net/xref/org/apache/commons/net/telnet/Telnet\nInputStream.html#87>               return;\n88\n<http://commons.apache.org/net/xref/org/apache/commons/net/telnet/Telnet\nInputStream.html#88>   \n89\n<http://commons.apache.org/net/xref/org/apache/commons/net/telnet/Telnet\nInputStream.html#89>           int priority;\n90\n<http://commons.apache.org/net/xref/org/apache/commons/net/telnet/Telnet\nInputStream.html#90>           __isClosed = false;\n91\n<http://commons.apache.org/net/xref/org/apache/commons/net/telnet/Telnet\nInputStream.html#91>           // TODO remove this\n92\n<http://commons.apache.org/net/xref/org/apache/commons/net/telnet/Telnet\nInputStream.html#92>           // Need to set a higher priority in case\nJVM does not use pre-emptive\n93\n<http://commons.apache.org/net/xref/org/apache/commons/net/telnet/Telnet\nInputStream.html#93>           // threads.  This should prevent\nscheduler induced deadlock (rather than\n94\n<http://commons.apache.org/net/xref/org/apache/commons/net/telnet/Telnet\nInputStream.html#94>           // deadlock caused by a bug in this\ncode).\n95\n<http://commons.apache.org/net/xref/org/apache/commons/net/telnet/Telnet\nInputStream.html#95>           priority =\nThread.currentThread().getPriority() + 1;\n96\n<http://commons.apache.org/net/xref/org/apache/commons/net/telnet/Telnet\nInputStream.html#96>           if (priority > Thread.MAX_PRIORITY)\n97\n<http://commons.apache.org/net/xref/org/apache/commons/net/telnet/Telnet\nInputStream.html#97>               priority = Thread.MAX_PRIORITY;\n98\n<http://commons.apache.org/net/xref/org/apache/commons/net/telnet/Telnet\nInputStream.html#98>           __thread.setPriority(priority);\n99\n<http://commons.apache.org/net/xref/org/apache/commons/net/telnet/Telnet\nInputStream.html#99>           __thread.setDaemon(true);\n100\n<http://commons.apache.org/net/xref/org/apache/commons/net/telnet/Telnet\nInputStream.html#100>          __thread.start();\n101\n<http://commons.apache.org/net/xref/org/apache/commons/net/telnet/Telnet\nInputStream.html#101>          __threaded = true;\n102\n<http://commons.apache.org/net/xref/org/apache/commons/net/telnet/Telnet\nInputStream.html#102>      }\n \nI guess that is there a possibility that the thread in __thread.start()\nis started so fast that when __processChar() is called, the __threaded\nhas not been set to true.\nSo the exception IllegalStateException is thrown.\nI think line 101 should be moved up of line 100.",
            "commit number version hash": 947,
            "commit number": 666,
            "function that changed": [
                {
                    "function name": "run",
                    "function params": [],
                    "file name": "TelnetInputStream.java",
                    "file old path": "src/main/java/org/apache/commons/net/telnet/TelnetInputStream.java",
                    "file new path": "src/main/java/org/apache/commons/net/telnet/TelnetInputStream.java",
                    "full name": "src.main.java.org.apache.commons.net.telnet.TelnetInputStream.run"
                },
                {
                    "function name": "_start",
                    "function params": [],
                    "file name": "TelnetInputStream.java",
                    "file old path": "src/main/java/org/apache/commons/net/telnet/TelnetInputStream.java",
                    "file new path": "src/main/java/org/apache/commons/net/telnet/TelnetInputStream.java",
                    "full name": "src.main.java.org.apache.commons.net.telnet.TelnetInputStream._start"
                }
            ],
            "files that changed": [
                "src/main/java/org/apache/commons/net/telnet/TelnetInputStream.java"
            ]
        },
        {
            "bug index": "180",
            "bug id": "NET-345",
            "hexsha": "c1026d8510ea97d8c5990cc0d281269311b54caa",
            "fix_hash": "9fc7e85de43213ae797b27dea5005c0cd58a943d",
            "description": "Subnegotiation messages in telnet are sent using the sequence {{IAC SB ... IAC SE}}.\n\nAlthough it's not clearly spelled out in [RFC 854|http://tools.ietf.org/html/rfc854], any {{IAC}} ({{0xff}}) bytes inside these messages must be escaped by doubling. Other clients do this and this is the only behavior that makes sense.\n\nThe commons-net telnet client is failing both to escape and to unescape {{IAC}} bytes within subnegotiation messages. Moreover, if it does receive a valid {{IAC IAC}} sequence within a subnegotiation message, it will incorrectly jump back to \"data\" input mode, discarding the message and introducing its remainder as garbage in the data stream.\n\nIn addition, the code fails to check for an overflow of the subnegotiation buffer, which would cause an {{ArrayIndexOutOfBounds}} exception if a malicious peer triggered this condition.\n\nFinally, a {{IAC SE}} sequence appearing by itself should probably be discarded, rather than passing as a command to the handler.\n\nI'm attaching a patch to fix these issues.\n",
            "commit number version hash": 947,
            "commit number": 660,
            "function that changed": [
                {
                    "function name": "_sendSubnegotiation",
                    "function params": [],
                    "file name": "Telnet.java",
                    "file old path": "src/main/java/org/apache/commons/net/telnet/Telnet.java",
                    "file new path": "src/main/java/org/apache/commons/net/telnet/Telnet.java",
                    "full name": "src.main.java.org.apache.commons.net.telnet.Telnet._sendSubnegotiation"
                },
                {
                    "function name": "__read",
                    "function params": [
                        "mayBlock"
                    ],
                    "file name": "TelnetInputStream.java",
                    "file old path": "src/main/java/org/apache/commons/net/telnet/TelnetInputStream.java",
                    "file new path": "src/main/java/org/apache/commons/net/telnet/TelnetInputStream.java",
                    "full name": "src.main.java.org.apache.commons.net.telnet.TelnetInputStream.__read"
                }
            ],
            "files that changed": [
                "src/main/java/org/apache/commons/net/telnet/Telnet.java",
                "src/main/java/org/apache/commons/net/telnet/TelnetInputStream.java"
            ]
        },
        {
            "bug index": "181",
            "bug id": "NET-289",
            "hexsha": "c1026d8510ea97d8c5990cc0d281269311b54caa",
            "fix_hash": "ee34b1dc39e3dee7a4157d2f812b456212f66c9b",
            "description": "The loop detection code in Threader.buildContainer() is currently:\n                // Link references together in the order they appear in the References: header,\n                // IF they dont have a have a parent already &&\n                // IF it will not cause a circular reference\n                if ((parentRef != null)\n                    && (ref.parent == null)\n                    && (parentRef != ref)\n                    && !(parentRef.findChild(ref))) {\n                    // Link ref into the parent's child list\nDeep circular references where 'parentRef' is already a child of 'ref' and ref is the root container are possible.\nThe test should be:\n               if ((parentRef != null)\n                    && (ref.parent == null)\n                    && (parentRef != ref)\n                    && !(ref.findChild(parentRef))) {\n                    // Link ref into the parent's child list\n",
            "commit number version hash": 947,
            "commit number": 645,
            "function that changed": [
                {
                    "function name": "buildContainer",
                    "function params": [
                        "threadable"
                    ],
                    "file name": "Threader.java",
                    "file old path": "src/main/java/org/apache/commons/net/nntp/Threader.java",
                    "file new path": "src/main/java/org/apache/commons/net/nntp/Threader.java",
                    "full name": "src.main.java.org.apache.commons.net.nntp.Threader.buildContainer"
                }
            ],
            "files that changed": [
                "src/main/java/org/apache/commons/net/nntp/Threader.java"
            ]
        },
        {
            "bug index": "182",
            "bug id": "NET-317",
            "hexsha": "c1026d8510ea97d8c5990cc0d281269311b54caa",
            "fix_hash": "ff71403dac8ae5b60b53f976d94afb728d514182",
            "description": "The 3 public instance fields in POP3MessageInfo should be made final.\n\nAFAICT, there's no use case for allowing them to be changed externally.\n\nThey are not written by current code, but changing them to final would change the API - hence fix version set to 3.0",
            "commit number version hash": 947,
            "commit number": 644,
            "function that changed": [],
            "files that changed": [
                "src/main/java/org/apache/commons/net/pop3/POP3MessageInfo.java"
            ]
        },
        {
            "bug index": "183",
            "bug id": "NET-330",
            "hexsha": "c1026d8510ea97d8c5990cc0d281269311b54caa",
            "fix_hash": "babcf3132e471875ca53d25215a0a7af605967df",
            "description": "The method VMSFTPEntryParser.parseFileList(InputStream listStream) should not be present.\n\nNo other FTPFileEntryParser implementations have this method.\n\nThe method does not appear to be used currently in NET,  and the parsers should only be called by the engine, not by external callers.\n\nThe method should be deprecated and deleted in the next major release.",
            "commit number version hash": 947,
            "commit number": 643,
            "function that changed": [],
            "files that changed": [
                "src/main/java/org/apache/commons/net/ftp/parser/VMSFTPEntryParser.java"
            ]
        },
        {
            "bug index": "184",
            "bug id": "NET-303",
            "hexsha": "c1026d8510ea97d8c5990cc0d281269311b54caa",
            "fix_hash": "4af259d5796dd0d5596b133016a6eefada6e078b",
            "description": "The samples in the FTPFileEntryParser API doc use non-existent methods\n\nFTPClient.createFileList(directory, parser);\n\nFTPClient.FTPFile[] files = f.listFiles(parser, ...",
            "commit number version hash": 947,
            "commit number": 642,
            "function that changed": [],
            "files that changed": [
                "src/main/java/org/apache/commons/net/ftp/FTPFileEntryParser.java"
            ]
        },
        {
            "bug index": "185",
            "bug id": "NET-360",
            "hexsha": "c1026d8510ea97d8c5990cc0d281269311b54caa",
            "fix_hash": "b0c51fd8ba7e811c68c5bb4fa8ffe121f3c2c382",
            "description": "DefaultFTPFileEntryParserFactory.createFileEntryParser(String key) always tries to load the class given by the key value.\n\nThis is rather wasteful, as normally the autodetect mechanism is used. This provides the system name, which is unlikely ever to be a valid class name.\n\nClass names must match a specific format [1] & [2], so there is no point trying to load the class if the key does not have this format.\n\n[1] http://java.sun.com/docs/books/jvms/second_edition/html/Concepts.doc.html#20389\n[2] http://java.sun.com/docs/books/jvms/second_edition/html/Concepts.doc.html#28702",
            "commit number version hash": 947,
            "commit number": 641,
            "function that changed": [],
            "files that changed": [
                "src/main/java/org/apache/commons/net/ftp/parser/DefaultFTPFileEntryParserFactory.java"
            ]
        },
        {
            "bug index": "186",
            "bug id": "NET-360",
            "hexsha": "c1026d8510ea97d8c5990cc0d281269311b54caa",
            "fix_hash": "c702d38a6e54c9c949d45b85f34db398c21d866a",
            "description": "DefaultFTPFileEntryParserFactory.createFileEntryParser(String key) always tries to load the class given by the key value.\n\nThis is rather wasteful, as normally the autodetect mechanism is used. This provides the system name, which is unlikely ever to be a valid class name.\n\nClass names must match a specific format [1] & [2], so there is no point trying to load the class if the key does not have this format.\n\n[1] http://java.sun.com/docs/books/jvms/second_edition/html/Concepts.doc.html#20389\n[2] http://java.sun.com/docs/books/jvms/second_edition/html/Concepts.doc.html#28702",
            "commit number version hash": 947,
            "commit number": 635,
            "function that changed": [
                {
                    "function name": "createFileEntryParser",
                    "function params": [
                        "key"
                    ],
                    "file name": "DefaultFTPFileEntryParserFactory.java",
                    "file old path": "src/main/java/org/apache/commons/net/ftp/parser/DefaultFTPFileEntryParserFactory.java",
                    "file new path": "src/main/java/org/apache/commons/net/ftp/parser/DefaultFTPFileEntryParserFactory.java",
                    "full name": "src.main.java.org.apache.commons.net.ftp.parser.DefaultFTPFileEntryParserFactory.createFileEntryParser"
                }
            ],
            "files that changed": [
                "src/main/java/org/apache/commons/net/ftp/parser/DefaultFTPFileEntryParserFactory.java"
            ]
        },
        {
            "bug index": "187",
            "bug id": "NET-359",
            "hexsha": "c1026d8510ea97d8c5990cc0d281269311b54caa",
            "fix_hash": "3ce46ae21184aeb703468a3e1628b8de006fde02",
            "description": "The CopyStreamAdapter.bytesTransferred(CopyStreamEvent event) method unpacks the event in order to pass the parameters to bytesTransferred(long, int, long) method which creates a new event and propagates it to the listeners.\n\nThis means that the original event source is lost, and there is an unnecessary event creation.\n\nIt seems wrong for the bytesTransferred(long, int, long) method to create a CopyStreamEvent - the interface Javadoc specifically says that the bytesTransferred(long, int, long) method was added to avoid the need to create the event.\n\nIt would make more sense if the adapter handled the methods independently, i.e. if the caller provides an event, pass that on, otherwise pass on the individual parameters to the listeners.",
            "commit number version hash": 947,
            "commit number": 624,
            "function that changed": [
                {
                    "function name": "bytesTransferred",
                    "function params": [
                        "event"
                    ],
                    "file name": "CopyStreamAdapter.java",
                    "file old path": "src/main/java/org/apache/commons/net/io/CopyStreamAdapter.java",
                    "file new path": "src/main/java/org/apache/commons/net/io/CopyStreamAdapter.java",
                    "full name": "src.main.java.org.apache.commons.net.io.CopyStreamAdapter.bytesTransferred"
                },
                {
                    "function name": "bytesTransferred",
                    "function params": [
                        "totalBytesTransferred",
                        "bytesTransferred",
                        "streamSize"
                    ],
                    "file name": "CopyStreamAdapter.java",
                    "file old path": "src/main/java/org/apache/commons/net/io/CopyStreamAdapter.java",
                    "file new path": "src/main/java/org/apache/commons/net/io/CopyStreamAdapter.java",
                    "full name": "src.main.java.org.apache.commons.net.io.CopyStreamAdapter.bytesTransferred"
                }
            ],
            "files that changed": [
                "src/main/java/org/apache/commons/net/io/CopyStreamAdapter.java"
            ]
        },
        {
            "bug index": "188",
            "bug id": "NET-355",
            "hexsha": "c1026d8510ea97d8c5990cc0d281269311b54caa",
            "fix_hash": "17a1a0237411139a92fdfce236864cfa6ed4f87f",
            "description": "The compile error is:\nThe method retrieveArticleInfo(int, int) in the type NNTPClient is not applicable for the arguments (long, long) NNTPUtils.java:53\n\nThis appears to be related to NET-276, where NNTPClient was changed to from accepting ints to accepting longs, then back again. ",
            "commit number version hash": 947,
            "commit number": 619,
            "function that changed": [
                {
                    "function name": "demo",
                    "function params": [
                        "host",
                        "user",
                        "password"
                    ],
                    "file name": "ExtendedNNTPOps.java",
                    "file old path": "src/main/java/examples/nntp/ExtendedNNTPOps.java",
                    "file new path": "src/main/java/examples/nntp/ExtendedNNTPOps.java",
                    "full name": "src.main.java.examples.nntp.ExtendedNNTPOps.demo"
                },
                {
                    "function name": "main",
                    "function params": [
                        "args"
                    ],
                    "file name": "MessageThreading.java",
                    "file old path": "src/main/java/examples/nntp/MessageThreading.java",
                    "file new path": "src/main/java/examples/nntp/MessageThreading.java",
                    "full name": "src.main.java.examples.nntp.MessageThreading.main"
                },
                {
                    "function name": "getArticleInfo",
                    "function params": [
                        "client",
                        "lowArticleNumber",
                        "highArticleNumber"
                    ],
                    "file name": "NNTPUtils.java",
                    "file old path": "src/main/java/examples/nntp/NNTPUtils.java",
                    "file new path": "src/main/java/examples/nntp/NNTPUtils.java",
                    "full name": "src.main.java.examples.nntp.NNTPUtils.getArticleInfo"
                },
                {
                    "function name": "getArticleInfo",
                    "function params": [
                        "client",
                        "lowArticleNumber",
                        "highArticleNumber"
                    ],
                    "file name": "NNTPUtils.java",
                    "file old path": "src/main/java/examples/nntp/NNTPUtils.java",
                    "file new path": "src/main/java/examples/nntp/NNTPUtils.java",
                    "full name": "src.main.java.examples.nntp.NNTPUtils.getArticleInfo"
                }
            ],
            "files that changed": [
                "src/main/java/examples/nntp/ExtendedNNTPOps.java",
                "src/main/java/examples/nntp/MessageThreading.java",
                "src/main/java/examples/nntp/NNTPUtils.java"
            ]
        },
        {
            "bug index": "189",
            "bug id": "NET-351",
            "hexsha": "c1026d8510ea97d8c5990cc0d281269311b54caa",
            "fix_hash": "b9b9bae63e08432f620abd1c0e35abf662a6008d",
            "description": "The APOP authentication fails most of the time. Server replying \"-ERR Incorrect parameters\" and puts \"no authentication data\" in the log.",
            "commit number version hash": 947,
            "commit number": 618,
            "function that changed": [
                {
                    "function name": "login",
                    "function params": [
                        "username",
                        "timestamp",
                        "secret"
                    ],
                    "file name": "POP3Client.java",
                    "file old path": "src/main/java/org/apache/commons/net/pop3/POP3Client.java",
                    "file new path": "src/main/java/org/apache/commons/net/pop3/POP3Client.java",
                    "full name": "src.main.java.org.apache.commons.net.pop3.POP3Client.login"
                }
            ],
            "files that changed": [
                "src/main/java/org/apache/commons/net/pop3/POP3Client.java"
            ]
        },
        {
            "bug index": "190",
            "bug id": "NET-262",
            "hexsha": "91db96b2f79d3e22238e5877fd75a8a8f4848c5c",
            "fix_hash": "283d197e50372882ae8d2f985a6c2a493ce58dad",
            "description": "SubnetUtils does not handle /31 and /32 CIDRs well.\n\nThis should be documented and/or fixed.\n\n192.168.0.1/32 causes an IllegalArgumentException to be thrown (by the way, that should show the upper and lower bounds)\n\n192.168.0.3/31 gives \naddressCount=0, \nlow =192.168.0.3 \nhigh=192.168.0.2\nand 192.168.0.3 is rejected as not in range",
            "commit number version hash": 629,
            "commit number": 613,
            "function that changed": [
                {
                    "function name": "testInvalidMasks",
                    "function params": [],
                    "file name": "SubnetUtilsTest.java",
                    "file old path": "src/test/java/org/apache/commons/net/SubnetUtilsTest.java",
                    "file new path": "src/test/java/org/apache/commons/net/SubnetUtilsTest.java",
                    "full name": "src.test.java.org.apache.commons.net.SubnetUtilsTest.testInvalidMasks"
                },
                {
                    "function name": "testCidrAddresses",
                    "function params": [],
                    "file name": "SubnetUtilsTest.java",
                    "file old path": "src/test/java/org/apache/commons/net/SubnetUtilsTest.java",
                    "file new path": "src/test/java/org/apache/commons/net/SubnetUtilsTest.java",
                    "full name": "src.test.java.org.apache.commons.net.SubnetUtilsTest.testCidrAddresses"
                }
            ],
            "files that changed": [
                "src/main/java/org/apache/commons/net/util/SubnetUtils.java",
                "src/test/java/org/apache/commons/net/SubnetUtilsTest.java"
            ]
        },
        {
            "bug index": "191",
            "bug id": "NET-276",
            "hexsha": "c1026d8510ea97d8c5990cc0d281269311b54caa",
            "fix_hash": "ca5da1a157782a2b62f7d7f71850c4b4647c4db0",
            "description": "The following command causes a MalformedServerReplyException on my usenet server (astraweb):\nclient.listNewsgroups();\n\nRoot Cause:\nCaused by: org.apache.commons.net.MalformedServerReplyException: alt.binaries.boneless 2230918506 1662764743 y\n\tat org.apache.commons.net.nntp.NNTPClient.__readNewsgroupListing(NNTPClient.java:255)\n\tat org.apache.commons.net.nntp.NNTPClient.listNewsgroups(NNTPClient.java:930)\n\tat org.lievaart.jleecher.protocol.CommandFactory$2.doOnServer(CommandFactory.java:27)\n\tat org.lievaart.jleecher.protocol.NNTPProtocol.callServer(NNTPProtocol.java:33)\n\t... 2 more\n\nMy hypothesis is that NNTP cannot parse the response, because one of the numbers exceeds the Integer range.\nLocally I have applied the following quick fix to get it to work:\n\npublic class NNTPClient extends NNTP {\n...\n...\n...\n\tprivate NewsgroupInfo __parseNewsgroupListEntry(final String entry) {\n\t\tNewsgroupInfo result;\n\t\tStringTokenizer tokenizer;\n\t\tint lastNum, firstNum;\n\t\tString last, first, permission;\n\n\t\tresult = new NewsgroupInfo();\n\t\ttokenizer = new StringTokenizer(entry);\n\n\t\tif (tokenizer.countTokens() < 4) {\n\t\t\treturn null;\n\t\t}\n\n\t\tresult._setNewsgroup(tokenizer.nextToken());\n\t\tlast = tokenizer.nextToken();\n\t\tfirst = tokenizer.nextToken();\n\t\tpermission = tokenizer.nextToken();\n\n\n\t\ttry {\n\t\t\ttry {\n\t\t\t\tlastNum = Integer.parseInt(last);\n\t\t\t} catch (NumberFormatException nfe) {\n\t\t\t\tif (last.matches(\"\\\\d++\")) {\n\t\t\t\t\tlastNum = Integer.MAX_VALUE;\n\t\t\t\t} else {\n\t\t\t\t\tthrow nfe;\n\t\t\t\t}\n\t\t\t}\n",
            "commit number version hash": 947,
            "commit number": 612,
            "function that changed": [
                {
                    "function name": "__parseGroupReply",
                    "function params": [
                        "reply",
                        "info"
                    ],
                    "file name": "NNTPClient.java",
                    "file old path": "src/main/java/org/apache/commons/net/nntp/NNTPClient.java",
                    "file new path": "src/main/java/org/apache/commons/net/nntp/NNTPClient.java",
                    "full name": "src.main.java.org.apache.commons.net.nntp.NNTPClient.__parseGroupReply"
                },
                {
                    "function name": "__parseArticlePointer",
                    "function params": [
                        "reply",
                        "pointer"
                    ],
                    "file name": "NNTPClient.java",
                    "file old path": "src/main/java/org/apache/commons/net/nntp/NNTPClient.java",
                    "file new path": "src/main/java/org/apache/commons/net/nntp/NNTPClient.java",
                    "full name": "src.main.java.org.apache.commons.net.nntp.NNTPClient.__parseArticlePointer"
                },
                {
                    "function name": "retrieveArticleInfo",
                    "function params": [
                        "lowArticleNumber",
                        "highArticleNumber"
                    ],
                    "file name": "NNTPClient.java",
                    "file old path": "src/main/java/org/apache/commons/net/nntp/NNTPClient.java",
                    "file new path": "src/main/java/org/apache/commons/net/nntp/NNTPClient.java",
                    "full name": "src.main.java.org.apache.commons.net.nntp.NNTPClient.retrieveArticleInfo"
                },
                {
                    "function name": "retrieveArticleInfo",
                    "function params": [
                        "lowArticleNumber",
                        "highArticleNumber"
                    ],
                    "file name": "NNTPClient.java",
                    "file old path": "src/main/java/org/apache/commons/net/nntp/NNTPClient.java",
                    "file new path": "src/main/java/org/apache/commons/net/nntp/NNTPClient.java",
                    "full name": "src.main.java.org.apache.commons.net.nntp.NNTPClient.retrieveArticleInfo"
                },
                {
                    "function name": "__parseNewsgroupListEntry",
                    "function params": [
                        "entry"
                    ],
                    "file name": "NNTPClient.java",
                    "file old path": "src/main/java/org/apache/commons/net/nntp/NNTPClient.java",
                    "file new path": "src/main/java/org/apache/commons/net/nntp/NNTPClient.java",
                    "full name": "src.main.java.org.apache.commons.net.nntp.NNTPClient.__parseNewsgroupListEntry"
                },
                {
                    "function name": "_setFirstArticle",
                    "function params": [
                        "first"
                    ],
                    "file name": "NewsgroupInfo.java",
                    "file old path": "src/main/java/org/apache/commons/net/nntp/NewsgroupInfo.java",
                    "file new path": "src/main/java/org/apache/commons/net/nntp/NewsgroupInfo.java",
                    "full name": "src.main.java.org.apache.commons.net.nntp.NewsgroupInfo._setFirstArticle"
                },
                {
                    "function name": "getLastArticle",
                    "function params": [],
                    "file name": "NewsgroupInfo.java",
                    "file old path": "src/main/java/org/apache/commons/net/nntp/NewsgroupInfo.java",
                    "file new path": "src/main/java/org/apache/commons/net/nntp/NewsgroupInfo.java",
                    "full name": "src.main.java.org.apache.commons.net.nntp.NewsgroupInfo.getLastArticle"
                },
                {
                    "function name": "_setLastArticle",
                    "function params": [
                        "last"
                    ],
                    "file name": "NewsgroupInfo.java",
                    "file old path": "src/main/java/org/apache/commons/net/nntp/NewsgroupInfo.java",
                    "file new path": "src/main/java/org/apache/commons/net/nntp/NewsgroupInfo.java",
                    "full name": "src.main.java.org.apache.commons.net.nntp.NewsgroupInfo._setLastArticle"
                },
                {
                    "function name": "getFirstArticle",
                    "function params": [],
                    "file name": "NewsgroupInfo.java",
                    "file old path": "src/main/java/org/apache/commons/net/nntp/NewsgroupInfo.java",
                    "file new path": "src/main/java/org/apache/commons/net/nntp/NewsgroupInfo.java",
                    "full name": "src.main.java.org.apache.commons.net.nntp.NewsgroupInfo.getFirstArticle"
                },
                {
                    "function name": "_setArticleCount",
                    "function params": [
                        "count"
                    ],
                    "file name": "NewsgroupInfo.java",
                    "file old path": "src/main/java/org/apache/commons/net/nntp/NewsgroupInfo.java",
                    "file new path": "src/main/java/org/apache/commons/net/nntp/NewsgroupInfo.java",
                    "full name": "src.main.java.org.apache.commons.net.nntp.NewsgroupInfo._setArticleCount"
                },
                {
                    "function name": "_setLastArticle",
                    "function params": [
                        "last"
                    ],
                    "file name": "NewsgroupInfo.java",
                    "file old path": "src/main/java/org/apache/commons/net/nntp/NewsgroupInfo.java",
                    "file new path": "src/main/java/org/apache/commons/net/nntp/NewsgroupInfo.java",
                    "full name": "src.main.java.org.apache.commons.net.nntp.NewsgroupInfo._setLastArticle"
                },
                {
                    "function name": "_setArticleCount",
                    "function params": [
                        "count"
                    ],
                    "file name": "NewsgroupInfo.java",
                    "file old path": "src/main/java/org/apache/commons/net/nntp/NewsgroupInfo.java",
                    "file new path": "src/main/java/org/apache/commons/net/nntp/NewsgroupInfo.java",
                    "full name": "src.main.java.org.apache.commons.net.nntp.NewsgroupInfo._setArticleCount"
                },
                {
                    "function name": "getArticleCount",
                    "function params": [],
                    "file name": "NewsgroupInfo.java",
                    "file old path": "src/main/java/org/apache/commons/net/nntp/NewsgroupInfo.java",
                    "file new path": "src/main/java/org/apache/commons/net/nntp/NewsgroupInfo.java",
                    "full name": "src.main.java.org.apache.commons.net.nntp.NewsgroupInfo.getArticleCount"
                },
                {
                    "function name": "_setFirstArticle",
                    "function params": [
                        "first"
                    ],
                    "file name": "NewsgroupInfo.java",
                    "file old path": "src/main/java/org/apache/commons/net/nntp/NewsgroupInfo.java",
                    "file new path": "src/main/java/org/apache/commons/net/nntp/NewsgroupInfo.java",
                    "full name": "src.main.java.org.apache.commons.net.nntp.NewsgroupInfo._setFirstArticle"
                }
            ],
            "files that changed": [
                "src/main/java/org/apache/commons/net/nntp/ArticlePointer.java",
                "src/main/java/org/apache/commons/net/nntp/NNTPClient.java",
                "src/main/java/org/apache/commons/net/nntp/NewsgroupInfo.java"
            ]
        },
        {
            "bug index": "192",
            "bug id": "NET-334",
            "hexsha": "91db96b2f79d3e22238e5877fd75a8a8f4848c5c",
            "fix_hash": "c4786e75f22050e5716072b2ce53463c87a076d0",
            "description": "org.apache.commons.net.io.FromNetASCIIInputStream.available() can throw a NullPointerException if the \nInputStream is null. This has been experienced on a loaded system. \n\nStackTrace: \n\nException in thread \"Telnet Reader\" java.lang.NullPointerException \nat org.apache.commons.net.io.FromNetASCIIInputStream.available(FromNetASCIIInputStream.java:202) \nat org.apache.commons.net.io.FromNetASCIIInputStream.read(FromNetASCIIInputStream.java:164) \nat java.io.BufferedInputStream.fill(Unknown Source) \nat java.io.BufferedInputStream.read(Unknown Source) \nat org.apache.commons.net.telnet.TelnetInputStream.__read(TelnetInputStream.java:122) \nat org.apache.commons.net.telnet.TelnetInputStream.read(TelnetInputStream.java:375) \nat org.apache.commons.net.telnet.TelnetInputStream.read(TelnetInputStream.java:492) \nat java.io.BufferedInputStream.fill(Unknown Source) \nat java.io.BufferedInputStream.read1(Unknown Source) \nat java.io.BufferedInputStream.read(Unknown Source) \nat java.io.FilterInputStream.read(Unknown Source) \n\n\nCause: \n\nThe base PushbackInputStream checks the input stream is not closed before invoking avilable()\n\n274  public int available() throws IOException {\n275 \tensureOpen();\n276\t\treturn (buf.length - pos) + super.available();\n277  }\n\n\nWhich throws appropriate IOException if input stream is null: \n\n72\tprivate void ensureOpen() throws IOException {\n73\t\tif (in == null)\n74\t\tthrow new IOException(\"Stream closed\");\n75\t}\n\n\ncommons.net.io.FromNetASCIIInputStream does not. This can lead to a NullPointerException being thrown if the input stream is null.\n\n191        // PushbackInputStream in JDK 1.1.3 returns the wrong thing\n192        /***\n193         * Returns the number of bytes that can be read without blocking EXCEPT\n194         * when newline conversions have to be made somewhere within the\n195         * available block of bytes.  In other words, you really should not\n196         * rely on the value returned by this method if you are trying to avoid\n197         * blocking.\n198         ***/\n199        @Override\n200        public int available() throws IOException\n201        {\n202            return (buf.length - pos) + in.available();\n203        }\n\n\n\nFromNetASCIIInputStream.available() should be changed to mimic the base class behaviour. ",
            "commit number version hash": 629,
            "commit number": 606,
            "function that changed": [
                {
                    "function name": "available",
                    "function params": [],
                    "file name": "FromNetASCIIInputStream.java",
                    "file old path": "src/main/java/org/apache/commons/net/io/FromNetASCIIInputStream.java",
                    "file new path": "src/main/java/org/apache/commons/net/io/FromNetASCIIInputStream.java",
                    "full name": "src.main.java.org.apache.commons.net.io.FromNetASCIIInputStream.available"
                }
            ],
            "files that changed": [
                "src/main/java/org/apache/commons/net/io/FromNetASCIIInputStream.java"
            ]
        },
        {
            "bug index": "194",
            "bug id": "NET-339",
            "hexsha": "91db96b2f79d3e22238e5877fd75a8a8f4848c5c",
            "fix_hash": "c73d661f30f04065c0375ddccf46e1404b7b289c",
            "description": "Somewhere in the past the timestamp format returned by windows/the windows ftp server changed.\n\nIn the past the timestamp had a format like: '09-21-10 06:00PM'.\nThe 'current' format however is: '09-21-10 18:00'.\n\nIn version 1.4 this resulted in no files being displayed because parsing the timestamp fails;\nIn version 2 this results in the files being displayed but without the timestamp.\n\n(This is the result of change 645299)\n\nThe attached patch updates the code so that it detects both the old and the new format of the timestamp.\n\nA bug that also mentions this, or at least the comments, https://issues.apache.org/jira/browse/NET-50\n\n",
            "commit number version hash": 629,
            "commit number": 603,
            "function that changed": [
                {
                    "function name": "parseFTPEntry",
                    "function params": [
                        "entry"
                    ],
                    "file name": "NTFTPEntryParser.java",
                    "file old path": "src/main/java/org/apache/commons/net/ftp/parser/NTFTPEntryParser.java",
                    "file new path": "src/main/java/org/apache/commons/net/ftp/parser/NTFTPEntryParser.java",
                    "full name": "src.main.java.org.apache.commons.net.ftp.parser.NTFTPEntryParser.parseFTPEntry"
                },
                {
                    "function name": "NTFTPEntryParser",
                    "function params": [
                        "config"
                    ],
                    "file name": "NTFTPEntryParser.java",
                    "file old path": "src/main/java/org/apache/commons/net/ftp/parser/NTFTPEntryParser.java",
                    "file new path": "src/main/java/org/apache/commons/net/ftp/parser/NTFTPEntryParser.java",
                    "full name": "src.main.java.org.apache.commons.net.ftp.parser.NTFTPEntryParser.NTFTPEntryParser"
                },
                {
                    "function name": "testNET339",
                    "function params": [],
                    "file name": "NTFTPEntryParserTest.java",
                    "file old path": "src/test/java/org/apache/commons/net/ftp/parser/NTFTPEntryParserTest.java",
                    "file new path": "src/test/java/org/apache/commons/net/ftp/parser/NTFTPEntryParserTest.java",
                    "full name": "src.test.java.org.apache.commons.net.ftp.parser.NTFTPEntryParserTest.testNET339"
                }
            ],
            "files that changed": [
                "src/main/java/org/apache/commons/net/ftp/parser/NTFTPEntryParser.java",
                "src/test/java/org/apache/commons/net/ftp/parser/NTFTPEntryParserTest.java"
            ]
        },
        {
            "bug index": "195",
            "bug id": "NET-341",
            "hexsha": "91db96b2f79d3e22238e5877fd75a8a8f4848c5c",
            "fix_hash": "895ffae05ffa20b661e0d189d03beb9d20eea165",
            "description": "From user-list report:\n\nhttp://mail-archives.apache.org/mod_mbox/commons-user/201010.mbox/%3C618a4792-6400-4ee8-8452-1391067c6c0f@neccn-cas02.nec.com.cn%3E\n\nThe FTPClient.remoteAppend(String filename) method uses STOR instead of APPE",
            "commit number version hash": 629,
            "commit number": 602,
            "function that changed": [
                {
                    "function name": "remoteAppend",
                    "function params": [
                        "filename"
                    ],
                    "file name": "FTPClient.java",
                    "file old path": "src/main/java/org/apache/commons/net/ftp/FTPClient.java",
                    "file new path": "src/main/java/org/apache/commons/net/ftp/FTPClient.java",
                    "full name": "src.main.java.org.apache.commons.net.ftp.FTPClient.remoteAppend"
                }
            ],
            "files that changed": [
                "src/main/java/org/apache/commons/net/ftp/FTPClient.java"
            ]
        },
        {
            "bug index": "196",
            "bug id": "NET-339",
            "hexsha": "91db96b2f79d3e22238e5877fd75a8a8f4848c5c",
            "fix_hash": "ed18f4f95c55e7cab56868ebbf712d17f397bda6",
            "description": "Somewhere in the past the timestamp format returned by windows/the windows ftp server changed.\n\nIn the past the timestamp had a format like: '09-21-10 06:00PM'.\nThe 'current' format however is: '09-21-10 18:00'.\n\nIn version 1.4 this resulted in no files being displayed because parsing the timestamp fails;\nIn version 2 this results in the files being displayed but without the timestamp.\n\n(This is the result of change 645299)\n\nThe attached patch updates the code so that it detects both the old and the new format of the timestamp.\n\nA bug that also mentions this, or at least the comments, https://issues.apache.org/jira/browse/NET-50\n\n",
            "commit number version hash": 629,
            "commit number": 601,
            "function that changed": [
                {
                    "function name": "TODOtestNET339",
                    "function params": [],
                    "file name": "NTFTPEntryParserTest.java",
                    "file old path": "src/test/java/org/apache/commons/net/ftp/parser/NTFTPEntryParserTest.java",
                    "file new path": "src/test/java/org/apache/commons/net/ftp/parser/NTFTPEntryParserTest.java",
                    "full name": "src.test.java.org.apache.commons.net.ftp.parser.NTFTPEntryParserTest.TODOtestNET339"
                }
            ],
            "files that changed": [
                "src/test/java/org/apache/commons/net/ftp/parser/NTFTPEntryParserTest.java"
            ]
        },
        {
            "bug index": "197",
            "bug id": "NET-291",
            "hexsha": "6919eed1a4f064f445849b30da2281f67925cdee",
            "fix_hash": "f310f6ae6f2bec8239289fb6bcc1a9382929168c",
            "description": "\n\nenterLocalPassiveMode (exhibit A) docs claim that mode will be set to PASSIVE_LOCAL_DATA_CONNECTION_MODE \"some other method such as\" enterLocalActiveMode is called  (exhibit B).  However, active mode is being entered after connect is called.   This behavior can be easily observed by modifying FtpExample by moving ftp.enterLocalPassiveMode()  to before ftp.connect(server).   \n\nPerhaps either the code or docs could be updated to remedy this.  Versions prior to 2.0 behaved as documented.\n \nexhibit A:\n   /***\n     * Set the current data connection mode to\n     * <code> PASSIVE_LOCAL_DATA_CONNECTION_MODE </code>.  Use this\n     * method only for data transfers between the client and server.\n     * This method causes a PASV command to be issued to the server\n     * before the opening of every data connection, telling the server to\n     * open a data port to which the client will connect to conduct\n     * data transfers.  The FTPClient will stay in\n     * <code> PASSIVE_LOCAL_DATA_CONNECTION_MODE </code> until the\n     * mode is changed by calling some other method such as\n     * {@link #enterLocalActiveMode  enterLocalActiveMode() }\n     ***/\n    public void enterLocalPassiveMode()\n    {\n        __dataConnectionMode = PASSIVE_LOCAL_DATA_CONNECTION_MODE;\n        // These will be set when just before a data connection is opened\n        // in _openDataConnection_()\n        __passiveHost = null;\n        __passivePort = -1;\n    }\n\nexhibit B\n\n    @Override\n    protected void _connectAction_() throws IOException\n    {\n        super._connectAction_();\n        __initDefaults();\n    }",
            "commit number version hash": 998,
            "commit number": 588,
            "function that changed": [],
            "files that changed": [
                "src/main/java/org/apache/commons/net/ftp/FTPClient.java"
            ]
        },
        {
            "bug index": "198",
            "bug id": "NET-313",
            "hexsha": "91db96b2f79d3e22238e5877fd75a8a8f4848c5c",
            "fix_hash": "045baf90953dda495c94258b5d3b2c835e9950e1",
            "description": "as implemented in NET-288, the client can work now via IPv6 ... EPSV is not only useful on IPv6 but also when NAT is enabled (see [RFC 2428|http://tools.ietf.org/html/rfc2428])\n\nwhat my patch does:\n\n * (re)enable EPSV command on IPv4 too (i dont know why [~rwinston@eircom.net] removed it from the supplied patch in NET-288), also see my comments in patch\n * sending EPRT only if we are over IPv6, cause there is no advantage over PORT on IPv4, it could even have disadvantages (see comments in patch)\n * EPRT was sending the result of getActivePort() to the server, but when there was no activePortRange set, it did send 0 as default which leads to an error on server site:\n{quote}\nTue Mar 23 17:17:20 2010 [pid 10581] [ftpuser] FTP command: Client \"192.168.11.130\", \"EPRT |1|192.168.11.130|0|\"\nTue Mar 23 17:17:20 2010 [pid 10581] [ftpuser] FTP response: Client \"192.168.11.130\", \"500 Illegal EPRT command.\"\n{quote}\n * and even calling getActivePort() has no sense here, cause that port is used to be random, but we should send same port  where the ServerSocket is listening on -> server.getLocalPort()\n * getActivePort() checks if __activeMaxPort > __activeMinPort, but when i want to set a range of only one single port (min==max) it would return 0 ... now it will check if equal and return __activeMaxPort",
            "commit number version hash": 629,
            "commit number": 586,
            "function that changed": [
                {
                    "function name": "isUseEPSVwithIPv4",
                    "function params": [],
                    "file name": "FTPClient.java",
                    "file old path": "src/main/java/org/apache/commons/net/ftp/FTPClient.java",
                    "file new path": "src/main/java/org/apache/commons/net/ftp/FTPClient.java",
                    "full name": "src.main.java.org.apache.commons.net.ftp.FTPClient.isUseEPSVwithIPv4"
                },
                {
                    "function name": "setUseEPSVwithIPv4",
                    "function params": [
                        "selected"
                    ],
                    "file name": "FTPClient.java",
                    "file old path": "src/main/java/org/apache/commons/net/ftp/FTPClient.java",
                    "file new path": "src/main/java/org/apache/commons/net/ftp/FTPClient.java",
                    "full name": "src.main.java.org.apache.commons.net.ftp.FTPClient.setUseEPSVwithIPv4"
                },
                {
                    "function name": "FTPClient",
                    "function params": [],
                    "file name": "FTPClient.java",
                    "file old path": "src/main/java/org/apache/commons/net/ftp/FTPClient.java",
                    "file new path": "src/main/java/org/apache/commons/net/ftp/FTPClient.java",
                    "full name": "src.main.java.org.apache.commons.net.ftp.FTPClient.FTPClient"
                },
                {
                    "function name": "_openDataConnection_",
                    "function params": [
                        "command",
                        "arg"
                    ],
                    "file name": "FTPClient.java",
                    "file old path": "src/main/java/org/apache/commons/net/ftp/FTPClient.java",
                    "file new path": "src/main/java/org/apache/commons/net/ftp/FTPClient.java",
                    "full name": "src.main.java.org.apache.commons.net.ftp.FTPClient._openDataConnection_"
                }
            ],
            "files that changed": [
                "src/main/java/org/apache/commons/net/ftp/FTPClient.java"
            ]
        },
        {
            "bug index": "199",
            "bug id": "NET-313",
            "hexsha": "91db96b2f79d3e22238e5877fd75a8a8f4848c5c",
            "fix_hash": "906377e8d7b9c0361e902d28ff728e5398dbe379",
            "description": "as implemented in NET-288, the client can work now via IPv6 ... EPSV is not only useful on IPv6 but also when NAT is enabled (see [RFC 2428|http://tools.ietf.org/html/rfc2428])\n\nwhat my patch does:\n\n * (re)enable EPSV command on IPv4 too (i dont know why [~rwinston@eircom.net] removed it from the supplied patch in NET-288), also see my comments in patch\n * sending EPRT only if we are over IPv6, cause there is no advantage over PORT on IPv4, it could even have disadvantages (see comments in patch)\n * EPRT was sending the result of getActivePort() to the server, but when there was no activePortRange set, it did send 0 as default which leads to an error on server site:\n{quote}\nTue Mar 23 17:17:20 2010 [pid 10581] [ftpuser] FTP command: Client \"192.168.11.130\", \"EPRT |1|192.168.11.130|0|\"\nTue Mar 23 17:17:20 2010 [pid 10581] [ftpuser] FTP response: Client \"192.168.11.130\", \"500 Illegal EPRT command.\"\n{quote}\n * and even calling getActivePort() has no sense here, cause that port is used to be random, but we should send same port  where the ServerSocket is listening on -> server.getLocalPort()\n * getActivePort() checks if __activeMaxPort > __activeMinPort, but when i want to set a range of only one single port (min==max) it would return 0 ... now it will check if equal and return __activeMaxPort",
            "commit number version hash": 629,
            "commit number": 585,
            "function that changed": [
                {
                    "function name": "getActivePort",
                    "function params": [],
                    "file name": "FTPClient.java",
                    "file old path": "src/main/java/org/apache/commons/net/ftp/FTPClient.java",
                    "file new path": "src/main/java/org/apache/commons/net/ftp/FTPClient.java",
                    "full name": "src.main.java.org.apache.commons.net.ftp.FTPClient.getActivePort"
                }
            ],
            "files that changed": [
                "src/main/java/org/apache/commons/net/ftp/FTPClient.java"
            ]
        },
        {
            "bug index": "200",
            "bug id": "NET-328",
            "hexsha": "91db96b2f79d3e22238e5877fd75a8a8f4848c5c",
            "fix_hash": "9de4928a1860c043a8aec6a7bdf150650a33632f",
            "description": "The method FromNetASCIIInputStream.read(byte[], int, int) may change the length passed to superclass if not doing conversion.\n\nIt should probably check  _noConversionRequired and call the super-class before recalculating the length.\nThat is\n{code}\nif (_noConversionRequired)\n    return super.read(buffer, offset, __length);\n{code}\nshould be done at the very start of the method.",
            "commit number version hash": 629,
            "commit number": 582,
            "function that changed": [
                {
                    "function name": "read",
                    "function params": [
                        "offset",
                        "length"
                    ],
                    "file name": "FromNetASCIIInputStream.java",
                    "file old path": "src/main/java/org/apache/commons/net/io/FromNetASCIIInputStream.java",
                    "file new path": "src/main/java/org/apache/commons/net/io/FromNetASCIIInputStream.java",
                    "full name": "src.main.java.org.apache.commons.net.io.FromNetASCIIInputStream.read"
                }
            ],
            "files that changed": [
                "src/main/java/org/apache/commons/net/io/FromNetASCIIInputStream.java"
            ]
        },
        {
            "bug index": "201",
            "bug id": "NET-74",
            "hexsha": "91db96b2f79d3e22238e5877fd75a8a8f4848c5c",
            "fix_hash": "0c3c30d99fa91d75fee373c8a48585ff34bf3701",
            "description": "in accordance to RFC855: \"Finally, if parameters in an option \"subnegotiation\"\ninclude a byte with a value of 255, it is necessary to double this byte in\naccordance the general TELNET rules.\"\n\nI've actually encontered this while implementing WindowSize option handler, but\nit seems that all the currently avilable handlers are vulnerable to this.",
            "commit number version hash": 629,
            "commit number": 581,
            "function that changed": [
                {
                    "function name": "testAnswerSubnegotiation",
                    "function params": [],
                    "file name": "WindowSizeOptionHandlerTest.java",
                    "file old path": null,
                    "file new path": "src/test/java/org/apache/commons/net/telnet/WindowSizeOptionHandlerTest.java",
                    "full name": "src.test.java.org.apache.commons.net.telnet.WindowSizeOptionHandlerTest.testAnswerSubnegotiation"
                },
                {
                    "function name": "testStartSubnegotiationLocal",
                    "function params": [],
                    "file name": "WindowSizeOptionHandlerTest.java",
                    "file old path": null,
                    "file new path": "src/test/java/org/apache/commons/net/telnet/WindowSizeOptionHandlerTest.java",
                    "full name": "src.test.java.org.apache.commons.net.telnet.WindowSizeOptionHandlerTest.testStartSubnegotiationLocal"
                },
                {
                    "function name": "testConstructors",
                    "function params": [],
                    "file name": "WindowSizeOptionHandlerTest.java",
                    "file old path": null,
                    "file new path": "src/test/java/org/apache/commons/net/telnet/WindowSizeOptionHandlerTest.java",
                    "full name": "src.test.java.org.apache.commons.net.telnet.WindowSizeOptionHandlerTest.testConstructors"
                },
                {
                    "function name": "testStartSubnegotiation",
                    "function params": [],
                    "file name": "WindowSizeOptionHandlerTest.java",
                    "file old path": null,
                    "file new path": "src/test/java/org/apache/commons/net/telnet/WindowSizeOptionHandlerTest.java",
                    "full name": "src.test.java.org.apache.commons.net.telnet.WindowSizeOptionHandlerTest.testStartSubnegotiation"
                },
                {
                    "function name": "equalInts",
                    "function params": [],
                    "file name": "WindowSizeOptionHandlerTest.java",
                    "file old path": null,
                    "file new path": "src/test/java/org/apache/commons/net/telnet/WindowSizeOptionHandlerTest.java",
                    "full name": "src.test.java.org.apache.commons.net.telnet.WindowSizeOptionHandlerTest.equalInts"
                },
                {
                    "function name": "setUp",
                    "function params": [],
                    "file name": "WindowSizeOptionHandlerTest.java",
                    "file old path": null,
                    "file new path": "src/test/java/org/apache/commons/net/telnet/WindowSizeOptionHandlerTest.java",
                    "full name": "src.test.java.org.apache.commons.net.telnet.WindowSizeOptionHandlerTest.setUp"
                }
            ],
            "files that changed": []
        },
        {
            "bug index": "202",
            "bug id": "NET-330",
            "hexsha": "c1026d8510ea97d8c5990cc0d281269311b54caa",
            "fix_hash": "e5255e86575ddede23245c5b12da26732ed23936",
            "description": "The method VMSFTPEntryParser.parseFileList(InputStream listStream) should not be present.\n\nNo other FTPFileEntryParser implementations have this method.\n\nThe method does not appear to be used currently in NET,  and the parsers should only be called by the engine, not by external callers.\n\nThe method should be deprecated and deleted in the next major release.",
            "commit number version hash": 947,
            "commit number": 579,
            "function that changed": [],
            "files that changed": [
                "src/main/java/org/apache/commons/net/ftp/parser/VMSFTPEntryParser.java"
            ]
        },
        {
            "bug index": "203",
            "bug id": "NET-180",
            "hexsha": "91db96b2f79d3e22238e5877fd75a8a8f4848c5c",
            "fix_hash": "a68542f4bcbf6d986a5eb62b3584230556c95bb5",
            "description": "I have a TN5250 client (see rfc1205) which extends TelnetClient. Basically, the client negotiates BINARY transmission and operates in block-mode. However the host sends IAC EOR at the end of each block in order to notify the client that the transmission of the block of data is complete, and the client should build the display. The problem is that the IAC EOR is \"consumed\" by the TelnetInputStream and therefore never reaches the client.\n\nThere are a few ways this could be handled, here are couple of suggestions (the 2nd is probably better):-\n\n1. Within TelnetInputStream, treat IAC EOR as data when in BINARY transmission state\n2. Extend TelnetNotificationHandler and send notifications of all Telnet Commands received\n",
            "commit number version hash": 629,
            "commit number": 578,
            "function that changed": [
                {
                    "function name": "_processCommand",
                    "function params": [
                        "command"
                    ],
                    "file name": "Telnet.java",
                    "file old path": "src/main/java/org/apache/commons/net/telnet/Telnet.java",
                    "file new path": "src/main/java/org/apache/commons/net/telnet/Telnet.java",
                    "full name": "src.main.java.org.apache.commons.net.telnet.Telnet._processCommand"
                },
                {
                    "function name": "read",
                    "function params": [],
                    "file name": "TelnetInputStream.java",
                    "file old path": "src/main/java/org/apache/commons/net/telnet/TelnetInputStream.java",
                    "file new path": "src/main/java/org/apache/commons/net/telnet/TelnetInputStream.java",
                    "full name": "src.main.java.org.apache.commons.net.telnet.TelnetInputStream.read"
                },
                {
                    "function name": "__read",
                    "function params": [
                        "mayBlock"
                    ],
                    "file name": "TelnetInputStream.java",
                    "file old path": "src/main/java/org/apache/commons/net/telnet/TelnetInputStream.java",
                    "file new path": "src/main/java/org/apache/commons/net/telnet/TelnetInputStream.java",
                    "full name": "src.main.java.org.apache.commons.net.telnet.TelnetInputStream.__read"
                }
            ],
            "files that changed": [
                "src/main/java/org/apache/commons/net/telnet/Telnet.java",
                "src/main/java/org/apache/commons/net/telnet/TelnetInputStream.java",
                "src/main/java/org/apache/commons/net/telnet/TelnetNotificationHandler.java"
            ]
        },
        {
            "bug index": "205",
            "bug id": "NET-302",
            "hexsha": "91db96b2f79d3e22238e5877fd75a8a8f4848c5c",
            "fix_hash": "b94a9e981799af5cd9856e63204c8f3b7b7e1555",
            "description": "if you use initiateListParsing with a  FTPFileEntryParser  this code can fail:\n\nFTPClient.listFiles()\n\nftp.initiateListParsing(parserKey, ...\n\nIt seems that the listFiles() already set a parser, that gets cached and the parser in the initiateListParsing gets ignored.\n\nFor z/OS you can use ftp for file transfer and for submitting jobs, in the second case you'd want another parser than for the first call.\nc.f. http://www.ibm.com/developerworks/systems/library/es-zosbatchjavav/index.html",
            "commit number version hash": 629,
            "commit number": 564,
            "function that changed": [
                {
                    "function name": "__initDefaults",
                    "function params": [],
                    "file name": "FTPClient.java",
                    "file old path": "src/main/java/org/apache/commons/net/ftp/FTPClient.java",
                    "file new path": "src/main/java/org/apache/commons/net/ftp/FTPClient.java",
                    "full name": "src.main.java.org.apache.commons.net.ftp.FTPClient.__initDefaults"
                },
                {
                    "function name": "initiateListParsing",
                    "function params": [
                        "parserKey",
                        "pathname"
                    ],
                    "file name": "FTPClient.java",
                    "file old path": "src/main/java/org/apache/commons/net/ftp/FTPClient.java",
                    "file new path": "src/main/java/org/apache/commons/net/ftp/FTPClient.java",
                    "full name": "src.main.java.org.apache.commons.net.ftp.FTPClient.initiateListParsing"
                }
            ],
            "files that changed": [
                "src/main/java/org/apache/commons/net/ftp/FTPClient.java"
            ]
        },
        {
            "bug index": "206",
            "bug id": "NET-264",
            "hexsha": "91db96b2f79d3e22238e5877fd75a8a8f4848c5c",
            "fix_hash": "baec3f0f99abd5d3f4f1d6b033aba0e39b323241",
            "description": "Calling stopSpyStream on TelnetClient sets spyStream to null without regard to whether _spyRead or _spyWrite are being invoked on another thread. \n\nResulting NPE in _spyRead/_spy_Write is caught in TelnetInputStream.run() which goes on to close the stream.\n\nMay be able to fix by taking local copy of spyStream (which ought also to be volatile) in both of _spyRead and _spyWrite. E.g. for _spyRead:\n\n    void _spyRead(int ch)\n    {\n        OutputStream _spyStream = spyStream;\n        \n        if (_spyStream != null)\n        {\n            try\n            {\n                if (ch != '\\r')\n                {\n                    _spyStream.write(ch);\n                    if (ch == '\\n')\n                    {\n                        _spyStream.write('\\r');\n                    }\n                    _spyStream.flush();\n                }\n            }\n            catch (IOException e)\n            {\n                spyStream = null;\n            }\n        }\n    }",
            "commit number version hash": 629,
            "commit number": 563,
            "function that changed": [
                {
                    "function name": "_spyRead",
                    "function params": [
                        "ch"
                    ],
                    "file name": "Telnet.java",
                    "file old path": "src/main/java/org/apache/commons/net/telnet/Telnet.java",
                    "file new path": "src/main/java/org/apache/commons/net/telnet/Telnet.java",
                    "full name": "src.main.java.org.apache.commons.net.telnet.Telnet._spyRead"
                },
                {
                    "function name": "_spyWrite",
                    "function params": [
                        "ch"
                    ],
                    "file name": "Telnet.java",
                    "file old path": "src/main/java/org/apache/commons/net/telnet/Telnet.java",
                    "file new path": "src/main/java/org/apache/commons/net/telnet/Telnet.java",
                    "full name": "src.main.java.org.apache.commons.net.telnet.Telnet._spyWrite"
                }
            ],
            "files that changed": [
                "src/main/java/org/apache/commons/net/telnet/Telnet.java"
            ]
        },
        {
            "bug index": "209",
            "bug id": "NET-290",
            "hexsha": "91db96b2f79d3e22238e5877fd75a8a8f4848c5c",
            "fix_hash": "a0ae3ae65e5762b66f79fe433db83896bbf21fb0",
            "description": "If the DotTerminatedMessageReader receives two carriage return characters at the end of the line, it does not process them correctly.\n\nWhen the DTMR tries to read \"\\r\\r\\n\" from the server, it does not process this as a correct end of line.  The code handles the first \\r as a standalone character, but then does not process the second \\r character to test for end-of-line.  If this happens at the end of a file, the DTMR will not recognize the '.' character as the end of file, and will try to read another character.  This hangs the reader.\n\nThe process flow breaks down in the following order.  The first \\r character is tested at line 127.  It then reads the second \\r character at line 133.  The test fails, and the second \\r is pushed in to the internalBuffer at line 160.  The second time the read() method is called, the \\r character is returned without processing at line 90.  The third time the read() is called, the \\n character is read and checked at line 127.  But, because the preceding \\r character is not found first, it does not process this as EOL.  If the next character is a '.', it is not processed as EOF.\n\nThe following fix solves the problem by pushing the second \\r character back in to the reader stream (rather than putting it in the internalBuffer), where it will be processed correctly:\n\n160a160,163\n>                 else if ( ch == '\\r' )\n>                 {\n>                       internalReader.unread( ch );\n>                 }\n",
            "commit number version hash": 629,
            "commit number": 520,
            "function that changed": [
                {
                    "function name": "testDoubleCrBeforeDot",
                    "function params": [],
                    "file name": "DotTerminatedMessageReaderTest.java",
                    "file old path": null,
                    "file new path": "src/test/java/org/apache/commons/net/io/DotTerminatedMessageReaderTest.java",
                    "full name": "src.test.java.org.apache.commons.net.io.DotTerminatedMessageReaderTest.testDoubleCrBeforeDot"
                },
                {
                    "function name": "testReadSimpleString",
                    "function params": [],
                    "file name": "DotTerminatedMessageReaderTest.java",
                    "file old path": null,
                    "file new path": "src/test/java/org/apache/commons/net/io/DotTerminatedMessageReaderTest.java",
                    "full name": "src.test.java.org.apache.commons.net.io.DotTerminatedMessageReaderTest.testReadSimpleString"
                },
                {
                    "function name": "testEmbeddedNewlines",
                    "function params": [],
                    "file name": "DotTerminatedMessageReaderTest.java",
                    "file old path": null,
                    "file new path": "src/test/java/org/apache/commons/net/io/DotTerminatedMessageReaderTest.java",
                    "full name": "src.test.java.org.apache.commons.net.io.DotTerminatedMessageReaderTest.testEmbeddedNewlines"
                }
            ],
            "files that changed": []
        },
        {
            "bug index": "210",
            "bug id": "NET-290",
            "hexsha": "91db96b2f79d3e22238e5877fd75a8a8f4848c5c",
            "fix_hash": "1382c2c056507a001a189872ea72b47ccb70f5df",
            "description": "If the DotTerminatedMessageReader receives two carriage return characters at the end of the line, it does not process them correctly.\n\nWhen the DTMR tries to read \"\\r\\r\\n\" from the server, it does not process this as a correct end of line.  The code handles the first \\r as a standalone character, but then does not process the second \\r character to test for end-of-line.  If this happens at the end of a file, the DTMR will not recognize the '.' character as the end of file, and will try to read another character.  This hangs the reader.\n\nThe process flow breaks down in the following order.  The first \\r character is tested at line 127.  It then reads the second \\r character at line 133.  The test fails, and the second \\r is pushed in to the internalBuffer at line 160.  The second time the read() method is called, the \\r character is returned without processing at line 90.  The third time the read() is called, the \\n character is read and checked at line 127.  But, because the preceding \\r character is not found first, it does not process this as EOL.  If the next character is a '.', it is not processed as EOF.\n\nThe following fix solves the problem by pushing the second \\r character back in to the reader stream (rather than putting it in the internalBuffer), where it will be processed correctly:\n\n160a160,163\n>                 else if ( ch == '\\r' )\n>                 {\n>                       internalReader.unread( ch );\n>                 }\n",
            "commit number version hash": 629,
            "commit number": 519,
            "function that changed": [
                {
                    "function name": "read",
                    "function params": [],
                    "file name": "DotTerminatedMessageReader.java",
                    "file old path": "src/main/java/org/apache/commons/net/io/DotTerminatedMessageReader.java",
                    "file new path": "src/main/java/org/apache/commons/net/io/DotTerminatedMessageReader.java",
                    "full name": "src.main.java.org.apache.commons.net.io.DotTerminatedMessageReader.read"
                }
            ],
            "files that changed": [
                "src/main/java/org/apache/commons/net/io/DotTerminatedMessageReader.java"
            ]
        },
        {
            "bug index": "211",
            "bug id": "NET-305",
            "hexsha": "91db96b2f79d3e22238e5877fd75a8a8f4848c5c",
            "fix_hash": "af63187f263d9926c564078d15eac90feae0159d",
            "description": "The following code:\n\nSubnetUtils subnetUtils = new SubnetUtils(\"192.168.0.1/32\");\n\nthrows the following exception:\n\nException in thread \"main\" java.lang.IllegalArgumentException: Value [32] not in range (-1,31]\n\tat org.apache.commons.net.util.SubnetUtils.rangeCheck(SubnetUtils.java:216)\n\tat org.apache.commons.net.util.SubnetUtils.calculate(SubnetUtils.java:141)\n\tat org.apache.commons.net.util.SubnetUtils.<init>(SubnetUtils.java:46)\n\tat com.gs.configmgt.proteus.model.impl.TestTest.main(TestTest.java:12)\n\n/32 is a perfectly valid subnet of one host. See wikipedia for verification: http://en.wikipedia.org/wiki/IPv4_subnetting_reference.",
            "commit number version hash": 629,
            "commit number": 516,
            "function that changed": [
                {
                    "function name": "SubnetInfo",
                    "function params": [],
                    "file name": "SubnetUtils.java",
                    "file old path": "src/main/java/org/apache/commons/net/util/SubnetUtils.java",
                    "file new path": "src/main/java/org/apache/commons/net/util/SubnetUtils.java",
                    "full name": "src.main.java.org.apache.commons.net.util.SubnetUtils.SubnetInfo"
                },
                {
                    "function name": "calculate",
                    "function params": [
                        "mask"
                    ],
                    "file name": "SubnetUtils.java",
                    "file old path": "src/main/java/org/apache/commons/net/util/SubnetUtils.java",
                    "file new path": "src/main/java/org/apache/commons/net/util/SubnetUtils.java",
                    "full name": "src.main.java.org.apache.commons.net.util.SubnetUtils.calculate"
                },
                {
                    "function name": "isInclusiveHostCount",
                    "function params": [],
                    "file name": "SubnetUtils.java",
                    "file old path": "src/main/java/org/apache/commons/net/util/SubnetUtils.java",
                    "file new path": "src/main/java/org/apache/commons/net/util/SubnetUtils.java",
                    "full name": "src.main.java.org.apache.commons.net.util.SubnetUtils.isInclusiveHostCount"
                },
                {
                    "function name": "setInclusiveHostCount",
                    "function params": [
                        "inclusiveHostCount"
                    ],
                    "file name": "SubnetUtils.java",
                    "file old path": "src/main/java/org/apache/commons/net/util/SubnetUtils.java",
                    "file new path": "src/main/java/org/apache/commons/net/util/SubnetUtils.java",
                    "full name": "src.main.java.org.apache.commons.net.util.SubnetUtils.setInclusiveHostCount"
                },
                {
                    "function name": "SubnetInfo",
                    "function params": [],
                    "file name": "SubnetUtils.java",
                    "file old path": "src/main/java/org/apache/commons/net/util/SubnetUtils.java",
                    "file new path": "src/main/java/org/apache/commons/net/util/SubnetUtils.java",
                    "full name": "src.main.java.org.apache.commons.net.util.SubnetUtils.SubnetInfo"
                },
                {
                    "function name": "SubnetInfo",
                    "function params": [],
                    "file name": "SubnetUtils.java",
                    "file old path": "src/main/java/org/apache/commons/net/util/SubnetUtils.java",
                    "file new path": "src/main/java/org/apache/commons/net/util/SubnetUtils.java",
                    "full name": "src.main.java.org.apache.commons.net.util.SubnetUtils.SubnetInfo"
                },
                {
                    "function name": "testCidrAddresses",
                    "function params": [],
                    "file name": "SubnetUtilsTest.java",
                    "file old path": "src/test/java/org/apache/commons/net/SubnetUtilsTest.java",
                    "file new path": "src/test/java/org/apache/commons/net/SubnetUtilsTest.java",
                    "full name": "src.test.java.org.apache.commons.net.SubnetUtilsTest.testCidrAddresses"
                }
            ],
            "files that changed": [
                "src/main/java/org/apache/commons/net/util/SubnetUtils.java",
                "src/test/java/org/apache/commons/net/SubnetUtilsTest.java"
            ]
        },
        {
            "bug index": "212",
            "bug id": "NET-300",
            "hexsha": "91db96b2f79d3e22238e5877fd75a8a8f4848c5c",
            "fix_hash": "cc8870db1014308fb6f426aa72ae697e25a6a199",
            "description": "When listHiddenFiles is TRUE FTPClient.getListArguments() code determines the length of pathname parameter to create the appropriate StringBuffer (FtpClient.java:2319).\nStill pathname may merely be null if I call FTPClient.listFiles() - the one without params",
            "commit number version hash": 629,
            "commit number": 515,
            "function that changed": [
                {
                    "function name": "getListArguments",
                    "function params": [
                        "pathname"
                    ],
                    "file name": "FTPClient.java",
                    "file old path": "src/main/java/org/apache/commons/net/ftp/FTPClient.java",
                    "file new path": "src/main/java/org/apache/commons/net/ftp/FTPClient.java",
                    "full name": "src.main.java.org.apache.commons.net.ftp.FTPClient.getListArguments"
                }
            ],
            "files that changed": [
                "src/main/java/org/apache/commons/net/ftp/FTPClient.java"
            ]
        },
        {
            "bug index": "213",
            "bug id": "NET-294",
            "hexsha": "91db96b2f79d3e22238e5877fd75a8a8f4848c5c",
            "fix_hash": "a8da84c614ba6e6e87c6c91e0c426ddfec2766a2",
            "description": "The regex does match the entry but the resulting groups are wrong for exemple, with\n{code}\n-rwxrwx---   1 ftp      ftp-admin 816026400 Oct  5  2008 bloplab 7 cd1.img\n{code}\nthe unix group name group will match \"ftp-admin 816026400 Oct\" file size group will match \"5\" first date group will match \"2008 bloplab\" then the year group will match \"7\" and the file name group will match \"cd1.img\"\nin this listing :\n{code}\n-rwxrwx---   1 ftp      ftp-admin      771 Oct  5  2008 bloplab 7 cd1.ccd\n-rwxrwx---   1 ftp      ftp-admin       76 Oct  5  2008 bloplab 7 cd1.cue\n-rwxrwx---   1 ftp      ftp-admin 816026400 Oct  5  2008 bloplab 7 cd1.img\n-rwxrwx---   1 ftp      ftp-admin 33307200 Oct  5  2008 bloplab 7 cd1.sub\n-rwxrwx---   1 ftp      ftp-admin      772 Oct  5  2008 bloplab 7 cd2.ccd\n-rwxrwx---   1 ftp      ftp-admin       76 Oct  5  2008 bloplab 7 cd2.cue\n-rwxrwx---   1 ftp      ftp-admin 413902608 Oct  5  2008 bloplab 7 cd2.img\n-rwxrwx---   1 ftp      ftp-admin 16893984 Oct  5  2008 bloplab 7 cd2.sub\n{code}\nthe 4 entries in which groupname and file size are only separated by one space wont be parsed properly, the others work",
            "commit number version hash": 629,
            "commit number": 502,
            "function that changed": [
                {
                    "function name": "doAdditionalGoodTests",
                    "function params": [
                        "test",
                        "f"
                    ],
                    "file name": "UnixFTPEntryParserTest.java",
                    "file old path": "src/test/org/apache/commons/net/ftp/parser/UnixFTPEntryParserTest.java",
                    "file new path": "src/test/org/apache/commons/net/ftp/parser/UnixFTPEntryParserTest.java",
                    "full name": "src.test.org.apache.commons.net.ftp.parser.UnixFTPEntryParserTest.doAdditionalGoodTests"
                },
                {
                    "function name": "testNET294",
                    "function params": [],
                    "file name": "UnixFTPEntryParserTest.java",
                    "file old path": "src/test/org/apache/commons/net/ftp/parser/UnixFTPEntryParserTest.java",
                    "file new path": "src/test/org/apache/commons/net/ftp/parser/UnixFTPEntryParserTest.java",
                    "full name": "src.test.org.apache.commons.net.ftp.parser.UnixFTPEntryParserTest.testNET294"
                }
            ],
            "files that changed": [
                "src/java/org/apache/commons/net/ftp/parser/UnixFTPEntryParser.java",
                "src/test/org/apache/commons/net/ftp/parser/UnixFTPEntryParserTest.java"
            ]
        },
        {
            "bug index": "214",
            "bug id": "NET-294",
            "hexsha": "91db96b2f79d3e22238e5877fd75a8a8f4848c5c",
            "fix_hash": "46548634f12fcfacd2e455a6f45245aaee81c773",
            "description": "The regex does match the entry but the resulting groups are wrong for exemple, with\n{code}\n-rwxrwx---   1 ftp      ftp-admin 816026400 Oct  5  2008 bloplab 7 cd1.img\n{code}\nthe unix group name group will match \"ftp-admin 816026400 Oct\" file size group will match \"5\" first date group will match \"2008 bloplab\" then the year group will match \"7\" and the file name group will match \"cd1.img\"\nin this listing :\n{code}\n-rwxrwx---   1 ftp      ftp-admin      771 Oct  5  2008 bloplab 7 cd1.ccd\n-rwxrwx---   1 ftp      ftp-admin       76 Oct  5  2008 bloplab 7 cd1.cue\n-rwxrwx---   1 ftp      ftp-admin 816026400 Oct  5  2008 bloplab 7 cd1.img\n-rwxrwx---   1 ftp      ftp-admin 33307200 Oct  5  2008 bloplab 7 cd1.sub\n-rwxrwx---   1 ftp      ftp-admin      772 Oct  5  2008 bloplab 7 cd2.ccd\n-rwxrwx---   1 ftp      ftp-admin       76 Oct  5  2008 bloplab 7 cd2.cue\n-rwxrwx---   1 ftp      ftp-admin 413902608 Oct  5  2008 bloplab 7 cd2.img\n-rwxrwx---   1 ftp      ftp-admin 16893984 Oct  5  2008 bloplab 7 cd2.sub\n{code}\nthe 4 entries in which groupname and file size are only separated by one space wont be parsed properly, the others work",
            "commit number version hash": 629,
            "commit number": 501,
            "function that changed": [
                {
                    "function name": "parseFTPEntry",
                    "function params": [
                        "entry"
                    ],
                    "file name": "UnixFTPEntryParser.java",
                    "file old path": "src/main/java/org/apache/commons/net/ftp/parser/UnixFTPEntryParser.java",
                    "file new path": "src/main/java/org/apache/commons/net/ftp/parser/UnixFTPEntryParser.java",
                    "full name": "src.main.java.org.apache.commons.net.ftp.parser.UnixFTPEntryParser.parseFTPEntry"
                },
                {
                    "function name": "testNET294",
                    "function params": [],
                    "file name": "UnixFTPEntryParserTest.java",
                    "file old path": "src/test/java/org/apache/commons/net/ftp/parser/UnixFTPEntryParserTest.java",
                    "file new path": "src/test/java/org/apache/commons/net/ftp/parser/UnixFTPEntryParserTest.java",
                    "full name": "src.test.java.org.apache.commons.net.ftp.parser.UnixFTPEntryParserTest.testNET294"
                },
                {
                    "function name": "doAdditionalGoodTests",
                    "function params": [
                        "test",
                        "f"
                    ],
                    "file name": "UnixFTPEntryParserTest.java",
                    "file old path": "src/test/java/org/apache/commons/net/ftp/parser/UnixFTPEntryParserTest.java",
                    "file new path": "src/test/java/org/apache/commons/net/ftp/parser/UnixFTPEntryParserTest.java",
                    "full name": "src.test.java.org.apache.commons.net.ftp.parser.UnixFTPEntryParserTest.doAdditionalGoodTests"
                }
            ],
            "files that changed": [
                "src/main/java/org/apache/commons/net/ftp/parser/UnixFTPEntryParser.java",
                "src/test/java/org/apache/commons/net/ftp/parser/UnixFTPEntryParserTest.java"
            ]
        },
        {
            "bug index": "215",
            "bug id": "NET-279",
            "hexsha": "91db96b2f79d3e22238e5877fd75a8a8f4848c5c",
            "fix_hash": "5eaac875d5c9e4100ed92c72c7176c524ecdf01f",
            "description": "The SMTP.getReplyStrings method returns an array of nulls, as it doesn't copy the internal list to the result String[] correctly.",
            "commit number version hash": 629,
            "commit number": 498,
            "function that changed": [
                {
                    "function name": "getReplyStrings",
                    "function params": [],
                    "file name": "SMTP.java",
                    "file old path": "src/main/java/org/apache/commons/net/smtp/SMTP.java",
                    "file new path": "src/main/java/org/apache/commons/net/smtp/SMTP.java",
                    "full name": "src.main.java.org.apache.commons.net.smtp.SMTP.getReplyStrings"
                }
            ],
            "files that changed": [
                "src/main/java/org/apache/commons/net/smtp/SMTP.java"
            ]
        },
        {
            "bug index": "216",
            "bug id": "NET-277",
            "hexsha": "91db96b2f79d3e22238e5877fd75a8a8f4848c5c",
            "fix_hash": "79a19d63165db326c918a9cb96c9f55f96fce359",
            "description": "In the class NNTPReply, I found the following status code:\n\n\tpublic static final int AUTHENTICATION_REQUIRED = CODE_408;\n\nMy server returns 480, which I believe is the correct code.\n\n   480: The client must authenticate itself to the server (that is, it\n      must provide information as to the identity of the client) before\n      the facility can be used on this connection.  This will involve\n      the use of an authentication extension such as [NNTP-AUTH].\n",
            "commit number version hash": 629,
            "commit number": 497,
            "function that changed": [],
            "files that changed": [
                "src/main/java/org/apache/commons/net/nntp/NNTPReply.java"
            ]
        },
        {
            "bug index": "217",
            "bug id": "NET-276",
            "hexsha": "c1026d8510ea97d8c5990cc0d281269311b54caa",
            "fix_hash": "7ddf77b60a9f65925d166a5e8b6fa2a7aeff6156",
            "description": "The following command causes a MalformedServerReplyException on my usenet server (astraweb):\nclient.listNewsgroups();\n\nRoot Cause:\nCaused by: org.apache.commons.net.MalformedServerReplyException: alt.binaries.boneless 2230918506 1662764743 y\n\tat org.apache.commons.net.nntp.NNTPClient.__readNewsgroupListing(NNTPClient.java:255)\n\tat org.apache.commons.net.nntp.NNTPClient.listNewsgroups(NNTPClient.java:930)\n\tat org.lievaart.jleecher.protocol.CommandFactory$2.doOnServer(CommandFactory.java:27)\n\tat org.lievaart.jleecher.protocol.NNTPProtocol.callServer(NNTPProtocol.java:33)\n\t... 2 more\n\nMy hypothesis is that NNTP cannot parse the response, because one of the numbers exceeds the Integer range.\nLocally I have applied the following quick fix to get it to work:\n\npublic class NNTPClient extends NNTP {\n...\n...\n...\n\tprivate NewsgroupInfo __parseNewsgroupListEntry(final String entry) {\n\t\tNewsgroupInfo result;\n\t\tStringTokenizer tokenizer;\n\t\tint lastNum, firstNum;\n\t\tString last, first, permission;\n\n\t\tresult = new NewsgroupInfo();\n\t\ttokenizer = new StringTokenizer(entry);\n\n\t\tif (tokenizer.countTokens() < 4) {\n\t\t\treturn null;\n\t\t}\n\n\t\tresult._setNewsgroup(tokenizer.nextToken());\n\t\tlast = tokenizer.nextToken();\n\t\tfirst = tokenizer.nextToken();\n\t\tpermission = tokenizer.nextToken();\n\n\n\t\ttry {\n\t\t\ttry {\n\t\t\t\tlastNum = Integer.parseInt(last);\n\t\t\t} catch (NumberFormatException nfe) {\n\t\t\t\tif (last.matches(\"\\\\d++\")) {\n\t\t\t\t\tlastNum = Integer.MAX_VALUE;\n\t\t\t\t} else {\n\t\t\t\t\tthrow nfe;\n\t\t\t\t}\n\t\t\t}\n",
            "commit number version hash": 947,
            "commit number": 496,
            "function that changed": [
                {
                    "function name": "demo",
                    "function params": [
                        "host",
                        "user",
                        "password"
                    ],
                    "file name": "ExtendedNNTPOps.java",
                    "file old path": "src/main/java/examples/nntp/ExtendedNNTPOps.java",
                    "file new path": "src/main/java/examples/nntp/ExtendedNNTPOps.java",
                    "full name": "src.main.java.examples.nntp.ExtendedNNTPOps.demo"
                },
                {
                    "function name": "main",
                    "function params": [
                        "args"
                    ],
                    "file name": "MessageThreading.java",
                    "file old path": "src/main/java/examples/nntp/MessageThreading.java",
                    "file new path": "src/main/java/examples/nntp/MessageThreading.java",
                    "full name": "src.main.java.examples.nntp.MessageThreading.main"
                },
                {
                    "function name": "getArticleInfo",
                    "function params": [
                        "client",
                        "lowArticleNumber",
                        "highArticleNumber"
                    ],
                    "file name": "NNTPUtils.java",
                    "file old path": "src/main/java/examples/nntp/NNTPUtils.java",
                    "file new path": "src/main/java/examples/nntp/NNTPUtils.java",
                    "full name": "src.main.java.examples.nntp.NNTPUtils.getArticleInfo"
                },
                {
                    "function name": "getArticleInfo",
                    "function params": [
                        "client",
                        "lowArticleNumber",
                        "highArticleNumber"
                    ],
                    "file name": "NNTPUtils.java",
                    "file old path": "src/main/java/examples/nntp/NNTPUtils.java",
                    "file new path": "src/main/java/examples/nntp/NNTPUtils.java",
                    "full name": "src.main.java.examples.nntp.NNTPUtils.getArticleInfo"
                },
                {
                    "function name": "__parseGroupReply",
                    "function params": [
                        "reply",
                        "info"
                    ],
                    "file name": "NNTPClient.java",
                    "file old path": "src/main/java/org/apache/commons/net/nntp/NNTPClient.java",
                    "file new path": "src/main/java/org/apache/commons/net/nntp/NNTPClient.java",
                    "full name": "src.main.java.org.apache.commons.net.nntp.NNTPClient.__parseGroupReply"
                },
                {
                    "function name": "__parseArticlePointer",
                    "function params": [
                        "reply",
                        "pointer"
                    ],
                    "file name": "NNTPClient.java",
                    "file old path": "src/main/java/org/apache/commons/net/nntp/NNTPClient.java",
                    "file new path": "src/main/java/org/apache/commons/net/nntp/NNTPClient.java",
                    "full name": "src.main.java.org.apache.commons.net.nntp.NNTPClient.__parseArticlePointer"
                },
                {
                    "function name": "retrieveArticleInfo",
                    "function params": [
                        "lowArticleNumber",
                        "highArticleNumber"
                    ],
                    "file name": "NNTPClient.java",
                    "file old path": "src/main/java/org/apache/commons/net/nntp/NNTPClient.java",
                    "file new path": "src/main/java/org/apache/commons/net/nntp/NNTPClient.java",
                    "full name": "src.main.java.org.apache.commons.net.nntp.NNTPClient.retrieveArticleInfo"
                },
                {
                    "function name": "__parseNewsgroupListEntry",
                    "function params": [
                        "entry"
                    ],
                    "file name": "NNTPClient.java",
                    "file old path": "src/main/java/org/apache/commons/net/nntp/NNTPClient.java",
                    "file new path": "src/main/java/org/apache/commons/net/nntp/NNTPClient.java",
                    "full name": "src.main.java.org.apache.commons.net.nntp.NNTPClient.__parseNewsgroupListEntry"
                },
                {
                    "function name": "retrieveArticleInfo",
                    "function params": [
                        "lowArticleNumber",
                        "highArticleNumber"
                    ],
                    "file name": "NNTPClient.java",
                    "file old path": "src/main/java/org/apache/commons/net/nntp/NNTPClient.java",
                    "file new path": "src/main/java/org/apache/commons/net/nntp/NNTPClient.java",
                    "full name": "src.main.java.org.apache.commons.net.nntp.NNTPClient.retrieveArticleInfo"
                },
                {
                    "function name": "_setArticleCount",
                    "function params": [
                        "count"
                    ],
                    "file name": "NewsgroupInfo.java",
                    "file old path": "src/main/java/org/apache/commons/net/nntp/NewsgroupInfo.java",
                    "file new path": "src/main/java/org/apache/commons/net/nntp/NewsgroupInfo.java",
                    "full name": "src.main.java.org.apache.commons.net.nntp.NewsgroupInfo._setArticleCount"
                },
                {
                    "function name": "_setLastArticle",
                    "function params": [
                        "last"
                    ],
                    "file name": "NewsgroupInfo.java",
                    "file old path": "src/main/java/org/apache/commons/net/nntp/NewsgroupInfo.java",
                    "file new path": "src/main/java/org/apache/commons/net/nntp/NewsgroupInfo.java",
                    "full name": "src.main.java.org.apache.commons.net.nntp.NewsgroupInfo._setLastArticle"
                },
                {
                    "function name": "_setArticleCount",
                    "function params": [
                        "count"
                    ],
                    "file name": "NewsgroupInfo.java",
                    "file old path": "src/main/java/org/apache/commons/net/nntp/NewsgroupInfo.java",
                    "file new path": "src/main/java/org/apache/commons/net/nntp/NewsgroupInfo.java",
                    "full name": "src.main.java.org.apache.commons.net.nntp.NewsgroupInfo._setArticleCount"
                },
                {
                    "function name": "getArticleCount",
                    "function params": [],
                    "file name": "NewsgroupInfo.java",
                    "file old path": "src/main/java/org/apache/commons/net/nntp/NewsgroupInfo.java",
                    "file new path": "src/main/java/org/apache/commons/net/nntp/NewsgroupInfo.java",
                    "full name": "src.main.java.org.apache.commons.net.nntp.NewsgroupInfo.getArticleCount"
                },
                {
                    "function name": "_setFirstArticle",
                    "function params": [
                        "first"
                    ],
                    "file name": "NewsgroupInfo.java",
                    "file old path": "src/main/java/org/apache/commons/net/nntp/NewsgroupInfo.java",
                    "file new path": "src/main/java/org/apache/commons/net/nntp/NewsgroupInfo.java",
                    "full name": "src.main.java.org.apache.commons.net.nntp.NewsgroupInfo._setFirstArticle"
                },
                {
                    "function name": "_setLastArticle",
                    "function params": [
                        "last"
                    ],
                    "file name": "NewsgroupInfo.java",
                    "file old path": "src/main/java/org/apache/commons/net/nntp/NewsgroupInfo.java",
                    "file new path": "src/main/java/org/apache/commons/net/nntp/NewsgroupInfo.java",
                    "full name": "src.main.java.org.apache.commons.net.nntp.NewsgroupInfo._setLastArticle"
                },
                {
                    "function name": "_setFirstArticle",
                    "function params": [
                        "first"
                    ],
                    "file name": "NewsgroupInfo.java",
                    "file old path": "src/main/java/org/apache/commons/net/nntp/NewsgroupInfo.java",
                    "file new path": "src/main/java/org/apache/commons/net/nntp/NewsgroupInfo.java",
                    "full name": "src.main.java.org.apache.commons.net.nntp.NewsgroupInfo._setFirstArticle"
                },
                {
                    "function name": "getLastArticle",
                    "function params": [],
                    "file name": "NewsgroupInfo.java",
                    "file old path": "src/main/java/org/apache/commons/net/nntp/NewsgroupInfo.java",
                    "file new path": "src/main/java/org/apache/commons/net/nntp/NewsgroupInfo.java",
                    "full name": "src.main.java.org.apache.commons.net.nntp.NewsgroupInfo.getLastArticle"
                },
                {
                    "function name": "getFirstArticle",
                    "function params": [],
                    "file name": "NewsgroupInfo.java",
                    "file old path": "src/main/java/org/apache/commons/net/nntp/NewsgroupInfo.java",
                    "file new path": "src/main/java/org/apache/commons/net/nntp/NewsgroupInfo.java",
                    "full name": "src.main.java.org.apache.commons.net.nntp.NewsgroupInfo.getFirstArticle"
                }
            ],
            "files that changed": [
                "src/main/java/examples/nntp/ExtendedNNTPOps.java",
                "src/main/java/examples/nntp/MessageThreading.java",
                "src/main/java/examples/nntp/NNTPUtils.java",
                "src/main/java/org/apache/commons/net/nntp/ArticlePointer.java",
                "src/main/java/org/apache/commons/net/nntp/NNTPClient.java",
                "src/main/java/org/apache/commons/net/nntp/NewsgroupInfo.java"
            ]
        },
        {
            "bug index": "218",
            "bug id": "NET-275",
            "hexsha": "91db96b2f79d3e22238e5877fd75a8a8f4848c5c",
            "fix_hash": "9d2d25e620cb4f0d2091f1639fcce53b2584c5c2",
            "description": "The example code in the FTPClient class documentation is a bit broken.\n\nI'll attach a patch that resolves the issues that i have found.",
            "commit number version hash": 629,
            "commit number": 494,
            "function that changed": [],
            "files that changed": [
                "src/main/java/org/apache/commons/net/ftp/FTPClient.java"
            ]
        },
        {
            "bug index": "219",
            "bug id": "NET-274",
            "hexsha": "91db96b2f79d3e22238e5877fd75a8a8f4848c5c",
            "fix_hash": "a29009716c694f44b5469735268f3397b57e0612",
            "description": "When the FTP Client communicates with FTP Server in Explicit SSL mode, after the exchange of data channel security commands, the Client issues the CCC command (Clear Command Channel). A reply code of 200 is received for the CCC command. However, the subsequent commands issued fails with the error ::\n\norg.apache.commons.net.ftp.FTPConnectionClosedException: Connection closed without indication.\n\nThis is occuring because after issuing the CCC Command ,(in sendCommand of FTPSClient)  the socket is switched to plane socket whereas the Input and output streams of the socket _controlInput_ and _controlOutput_ still point to the older secure socket.\n\nThis issue can be resolved by adding the following lines in the sendCommand () of FTPSClient after switching thesocket to plainSocket\n\n_socket_ = planeSocket;\n        _controlInput_ = new BufferedReader(new InputStreamReader( _socket_ .getInputStream(), getControlEncoding()));\n        _controlOutput_ = new BufferedWriter(new OutputStreamWriter( _socket_.getOutputStream(), getControlEncoding()));\n\n\nThanks",
            "commit number version hash": 629,
            "commit number": 493,
            "function that changed": [
                {
                    "function name": "sendCommand",
                    "function params": [
                        "command",
                        "args"
                    ],
                    "file name": "FTPSClient.java",
                    "file old path": "src/main/java/org/apache/commons/net/ftp/FTPSClient.java",
                    "file new path": "src/main/java/org/apache/commons/net/ftp/FTPSClient.java",
                    "full name": "src.main.java.org.apache.commons.net.ftp.FTPSClient.sendCommand"
                }
            ],
            "files that changed": [
                "src/main/java/org/apache/commons/net/ftp/FTPSClient.java"
            ]
        },
        {
            "bug index": "220",
            "bug id": "NET-261",
            "hexsha": "91db96b2f79d3e22238e5877fd75a8a8f4848c5c",
            "fix_hash": "b8bc7f83cf3123de1440fd48c65158176132b334",
            "description": "The beahviour of SubnetUtils.SubnetInfo.isInRange(...) is not documented.\n\nIs it supposed to be a strict range check, including both .0 and .255?\nOr is it a range check excluding .0 and .255?",
            "commit number version hash": 629,
            "commit number": 482,
            "function that changed": [
                {
                    "function name": "matchAddress",
                    "function params": [
                        "matcher"
                    ],
                    "file name": "SubnetUtils.java",
                    "file old path": "src/main/java/org/apache/commons/net/util/SubnetUtils.java",
                    "file new path": "src/main/java/org/apache/commons/net/util/SubnetUtils.java",
                    "full name": "src.main.java.org.apache.commons.net.util.SubnetUtils.matchAddress"
                },
                {
                    "function name": "rangeCheck",
                    "function params": [
                        "value",
                        "begin",
                        "end"
                    ],
                    "file name": "SubnetUtils.java",
                    "file old path": "src/main/java/org/apache/commons/net/util/SubnetUtils.java",
                    "file new path": "src/main/java/org/apache/commons/net/util/SubnetUtils.java",
                    "full name": "src.main.java.org.apache.commons.net.util.SubnetUtils.rangeCheck"
                },
                {
                    "function name": "calculate",
                    "function params": [
                        "mask"
                    ],
                    "file name": "SubnetUtils.java",
                    "file old path": "src/main/java/org/apache/commons/net/util/SubnetUtils.java",
                    "file new path": "src/main/java/org/apache/commons/net/util/SubnetUtils.java",
                    "full name": "src.main.java.org.apache.commons.net.util.SubnetUtils.calculate"
                }
            ],
            "files that changed": [
                "src/main/java/org/apache/commons/net/util/SubnetUtils.java"
            ]
        },
        {
            "bug index": "221",
            "bug id": "NET-262",
            "hexsha": "91db96b2f79d3e22238e5877fd75a8a8f4848c5c",
            "fix_hash": "6655daf3f8eaf1392a27dccbf0846d2a79e33616",
            "description": "SubnetUtils does not handle /31 and /32 CIDRs well.\n\nThis should be documented and/or fixed.\n\n192.168.0.1/32 causes an IllegalArgumentException to be thrown (by the way, that should show the upper and lower bounds)\n\n192.168.0.3/31 gives \naddressCount=0, \nlow =192.168.0.3 \nhigh=192.168.0.2\nand 192.168.0.3 is rejected as not in range",
            "commit number version hash": 629,
            "commit number": 481,
            "function that changed": [
                {
                    "function name": "main",
                    "function params": [
                        "args"
                    ],
                    "file name": "SubnetUtilsExample.java",
                    "file old path": "src/main/java/examples/SubnetUtilsExample.java",
                    "file new path": "src/main/java/examples/SubnetUtilsExample.java",
                    "full name": "src.main.java.examples.SubnetUtilsExample.main"
                },
                {
                    "function name": "rangeCheck",
                    "function params": [
                        "value",
                        "begin",
                        "end"
                    ],
                    "file name": "SubnetUtils.java",
                    "file old path": "src/main/java/org/apache/commons/net/util/SubnetUtils.java",
                    "file new path": "src/main/java/org/apache/commons/net/util/SubnetUtils.java",
                    "full name": "src.main.java.org.apache.commons.net.util.SubnetUtils.rangeCheck"
                }
            ],
            "files that changed": [
                "src/main/java/examples/SubnetUtilsExample.java",
                "src/main/java/org/apache/commons/net/util/SubnetUtils.java"
            ]
        },
        {
            "bug index": "222",
            "bug id": "NET-266",
            "hexsha": "91db96b2f79d3e22238e5877fd75a8a8f4848c5c",
            "fix_hash": "04e55f06015356a0a0b2358b97fdf8aadeb46435",
            "description": "A directory on the FTP server contains the following files:\nabc def ghi.csv\n123 abc ghi.csv\n123 abc 456.csv\n123 456 abc.csv\n\nWhen calling FTPClient.listFiles on the above directory the filenames returned in the FTPFile[] are as follows:\nabc def ghi.csv\n123 abc ghi.csv\n123 abc 456.csv\nabc.csv\n\nAs this shows, the filename 123 456 abc.csv is being truncated and returned as abc.csv.  This appears to be the case for all filenames that follow a pattern of 'number group' 'space' 'number group' 'space' 'character group'",
            "commit number version hash": 629,
            "commit number": 476,
            "function that changed": [
                {
                    "function name": "testCorrectGroupNameParsing",
                    "function params": [],
                    "file name": "UnixFTPEntryParserTest.java",
                    "file old path": "src/test/java/org/apache/commons/net/ftp/parser/UnixFTPEntryParserTest.java",
                    "file new path": "src/test/java/org/apache/commons/net/ftp/parser/UnixFTPEntryParserTest.java",
                    "full name": "src.test.java.org.apache.commons.net.ftp.parser.UnixFTPEntryParserTest.testCorrectGroupNameParsing"
                },
                {
                    "function name": "testFilenamesWithEmbeddedNumbers",
                    "function params": [],
                    "file name": "UnixFTPEntryParserTest.java",
                    "file old path": "src/test/java/org/apache/commons/net/ftp/parser/UnixFTPEntryParserTest.java",
                    "file new path": "src/test/java/org/apache/commons/net/ftp/parser/UnixFTPEntryParserTest.java",
                    "full name": "src.test.java.org.apache.commons.net.ftp.parser.UnixFTPEntryParserTest.testFilenamesWithEmbeddedNumbers"
                }
            ],
            "files that changed": [
                "src/test/java/org/apache/commons/net/ftp/parser/UnixFTPEntryParserTest.java"
            ]
        },
        {
            "bug index": "223",
            "bug id": "NET-266",
            "hexsha": "91db96b2f79d3e22238e5877fd75a8a8f4848c5c",
            "fix_hash": "b59310ec79f3dff3c3ddddbee61dd4acece8fdc4",
            "description": "A directory on the FTP server contains the following files:\nabc def ghi.csv\n123 abc ghi.csv\n123 abc 456.csv\n123 456 abc.csv\n\nWhen calling FTPClient.listFiles on the above directory the filenames returned in the FTPFile[] are as follows:\nabc def ghi.csv\n123 abc ghi.csv\n123 abc 456.csv\nabc.csv\n\nAs this shows, the filename 123 456 abc.csv is being truncated and returned as abc.csv.  This appears to be the case for all filenames that follow a pattern of 'number group' 'space' 'number group' 'space' 'character group'",
            "commit number version hash": 629,
            "commit number": 475,
            "function that changed": [
                {
                    "function name": "testFilenamesWithEmbeddedNumbers",
                    "function params": [],
                    "file name": "UnixFTPEntryParserTest.java",
                    "file old path": "src/test/java/org/apache/commons/net/ftp/parser/UnixFTPEntryParserTest.java",
                    "file new path": "src/test/java/org/apache/commons/net/ftp/parser/UnixFTPEntryParserTest.java",
                    "full name": "src.test.java.org.apache.commons.net.ftp.parser.UnixFTPEntryParserTest.testFilenamesWithEmbeddedNumbers"
                }
            ],
            "files that changed": [
                "src/test/java/org/apache/commons/net/ftp/parser/UnixFTPEntryParserTest.java"
            ]
        },
        {
            "bug index": "224",
            "bug id": "NET-265",
            "hexsha": "91db96b2f79d3e22238e5877fd75a8a8f4848c5c",
            "fix_hash": "3687706250eede3c6f1906a3011d5adc9ea2a216",
            "description": "The UnixFTPEntryParser fails to parse following entry:\n-rw-r--r--   1 ftpuser  ftpusers 12414535 Mar 17 11:07 test 1999 abc.pdf\n\nBecause of the fact that the group name may contain spaces, it is extended in this case to \"ftpusers 12414535 Mar\".\nThis happens because there is only one space between the group name an the file size (occurs (in my case) if the file size has eight or more digits). Additionally the file name contains spaces and the \"second part\" of the file name is a number. (Seems to be an odd case, but obviously it sometimes emerges.)\n\nThe problem does not occur if a numeric date is used (\"2008-03-19\"). So I made the regex for the standard date (\"Mar 19\") more specific in a way that the month may only contain characters ([a-zA-Z]). Right now all non-whitespace characters are allowed (\\S). The patch is attached.",
            "commit number version hash": 629,
            "commit number": 474,
            "function that changed": [
                {
                    "function name": "testCorrectGroupNameParsing",
                    "function params": [],
                    "file name": "UnixFTPEntryParserTest.java",
                    "file old path": "src/test/java/org/apache/commons/net/ftp/parser/UnixFTPEntryParserTest.java",
                    "file new path": "src/test/java/org/apache/commons/net/ftp/parser/UnixFTPEntryParserTest.java",
                    "full name": "src.test.java.org.apache.commons.net.ftp.parser.UnixFTPEntryParserTest.testCorrectGroupNameParsing"
                }
            ],
            "files that changed": [
                "src/main/java/org/apache/commons/net/ftp/parser/UnixFTPEntryParser.java",
                "src/test/java/org/apache/commons/net/ftp/parser/UnixFTPEntryParserTest.java"
            ]
        },
        {
            "bug index": "225",
            "bug id": "NET-259",
            "hexsha": "91db96b2f79d3e22238e5877fd75a8a8f4848c5c",
            "fix_hash": "ddd40b701b587c73c51d6b25e5a7422e622ff765",
            "description": "The following directory entries are not parsed by the UnixFTPEntryParser:\n\n{code}\ndrwxr-x---+1464 chrism   chrism     41472 Feb 25 13:17 20090225\ndrwxr-x---+1465 chrism   chrism     41984 Feb 28 07:15 20090226\ndrwxr-x---+1465 chrism   chrism     41984 Feb 28 07:15 20090227\n{code}\n\nThe root cause is that the REGEX used to parse these Strings expects there is at least one space between the first '+' and the following decimal characters.\n\nThe REGEX format is:\n\n{noformat}\n<.......>\n(((r|-)(w|-)([xsStTL-]))((r|-)(w|-)([xsStTL-]))((r|-)(w|-)([xsStTL-])))\\\\+?\\\\s+\n<.......>\n\nThe problem is the pattern \\\\s+, it should be \\\\s*\n{noformat}\n\nChris M.\n\n\n",
            "commit number version hash": 629,
            "commit number": 473,
            "function that changed": [
                {
                    "function name": "testNoSpacesBeforeFileSize",
                    "function params": [],
                    "file name": "UnixFTPEntryParserTest.java",
                    "file old path": "src/test/java/org/apache/commons/net/ftp/parser/UnixFTPEntryParserTest.java",
                    "file new path": "src/test/java/org/apache/commons/net/ftp/parser/UnixFTPEntryParserTest.java",
                    "full name": "src.test.java.org.apache.commons.net.ftp.parser.UnixFTPEntryParserTest.testNoSpacesBeforeFileSize"
                },
                {
                    "function name": "testNameWIthPunctuation",
                    "function params": [],
                    "file name": "UnixFTPEntryParserTest.java",
                    "file old path": "src/test/java/org/apache/commons/net/ftp/parser/UnixFTPEntryParserTest.java",
                    "file new path": "src/test/java/org/apache/commons/net/ftp/parser/UnixFTPEntryParserTest.java",
                    "full name": "src.test.java.org.apache.commons.net.ftp.parser.UnixFTPEntryParserTest.testNameWIthPunctuation"
                }
            ],
            "files that changed": [
                "src/main/java/org/apache/commons/net/ftp/parser/UnixFTPEntryParser.java",
                "src/test/java/org/apache/commons/net/ftp/parser/UnixFTPEntryParserTest.java"
            ]
        },
        {
            "bug index": "226",
            "bug id": "NET-257",
            "hexsha": "91db96b2f79d3e22238e5877fd75a8a8f4848c5c",
            "fix_hash": "ad1a51f03abbe85c6648c1b94d9ca440cb1d6966",
            "description": "The 2.0 implementation of FTP.getReplyStrings() returns an array of null Strings instead of the actual reply text. Here is the current method:\n\n{{String[] lines;}}\n{{lines = new String[_replyLines.size()];}}\n{{_replyLines.addAll(Arrays.asList(lines));}}\n{{return lines;}}\n\nI believe the correction is to replace the above code with something like:\n\n{{return _replyLines.toArray(new String[0]);}}\n",
            "commit number version hash": 629,
            "commit number": 463,
            "function that changed": [
                {
                    "function name": "getReplyStrings",
                    "function params": [],
                    "file name": "FTP.java",
                    "file old path": "src/main/java/org/apache/commons/net/ftp/FTP.java",
                    "file new path": "src/main/java/org/apache/commons/net/ftp/FTP.java",
                    "full name": "src.main.java.org.apache.commons.net.ftp.FTP.getReplyStrings"
                }
            ],
            "files that changed": [
                "src/main/java/org/apache/commons/net/ftp/FTP.java"
            ]
        },
        {
            "bug index": "228",
            "bug id": "NET-236",
            "hexsha": "91db96b2f79d3e22238e5877fd75a8a8f4848c5c",
            "fix_hash": "092aa892f11cb28324dcb0b57f19a220a8e65285",
            "description": "current implementation failing to check low limit:\n{code}\nprivate boolean isInRange(int address)      { return ((address-low()) <= (high()-low())); }\n{code}\n\nsuggested fix:\n{code}\nprivate boolean isInRange(int address)      { \n    normal = address-low();\n    return (normal>=0 && (normal <= (high()-low())));\n}\n{code}",
            "commit number version hash": 629,
            "commit number": 457,
            "function that changed": [
                {
                    "function name": "SubnetInfo",
                    "function params": [
                        "address"
                    ],
                    "file name": "SubnetUtils.java",
                    "file old path": "src/main/java/org/apache/commons/net/util/SubnetUtils.java",
                    "file new path": "src/main/java/org/apache/commons/net/util/SubnetUtils.java",
                    "full name": "src.main.java.org.apache.commons.net.util.SubnetUtils.SubnetInfo"
                }
            ],
            "files that changed": [
                "src/main/java/org/apache/commons/net/util/SubnetUtils.java"
            ]
        },
        {
            "bug index": "229",
            "bug id": "NET-242",
            "hexsha": "91db96b2f79d3e22238e5877fd75a8a8f4848c5c",
            "fix_hash": "a4244f86bdafafb60f7fb63ced991a105d65f611",
            "description": "When the data channel is secured and we are using Active mode , we need to set UseClientMode to true in the FTP Client so even though the FtpServer is initiating the connection, he is the \"server\" in the SSL handshake.\n\nIn the current code , this is done in the method init() called by createServerSocket() in FTPSSocketFactory. But this method is never called as we create ServerSockets using a ServerSocketFactory.  \n\nThe solution is to create a FTPSServerSocketFactory which takes the responsibility of creating ServerSockets.  \n\nFix provided.\n\n",
            "commit number version hash": 629,
            "commit number": 456,
            "function that changed": [
                {
                    "function name": "execPROT",
                    "function params": [
                        "prot"
                    ],
                    "file name": "FTPSClient.java",
                    "file old path": "src/main/java/org/apache/commons/net/ftp/FTPSClient.java",
                    "file new path": "src/main/java/org/apache/commons/net/ftp/FTPSClient.java",
                    "full name": "src.main.java.org.apache.commons.net.ftp.FTPSClient.execPROT"
                },
                {
                    "function name": "createServerSocket",
                    "function params": [
                        "port"
                    ],
                    "file name": "FTPSServerSocketFactory.java",
                    "file old path": null,
                    "file new path": "src/main/java/org/apache/commons/net/ftp/FTPSServerSocketFactory.java",
                    "full name": "src.main.java.org.apache.commons.net.ftp.FTPSServerSocketFactory.createServerSocket"
                },
                {
                    "function name": "FTPSServerSocketFactory",
                    "function params": [
                        "context"
                    ],
                    "file name": "FTPSServerSocketFactory.java",
                    "file old path": null,
                    "file new path": "src/main/java/org/apache/commons/net/ftp/FTPSServerSocketFactory.java",
                    "full name": "src.main.java.org.apache.commons.net.ftp.FTPSServerSocketFactory.FTPSServerSocketFactory"
                },
                {
                    "function name": "createServerSocket",
                    "function params": [
                        "port",
                        "backlog",
                        "ifAddress"
                    ],
                    "file name": "FTPSServerSocketFactory.java",
                    "file old path": null,
                    "file new path": "src/main/java/org/apache/commons/net/ftp/FTPSServerSocketFactory.java",
                    "full name": "src.main.java.org.apache.commons.net.ftp.FTPSServerSocketFactory.createServerSocket"
                },
                {
                    "function name": "init",
                    "function params": [
                        "socket"
                    ],
                    "file name": "FTPSServerSocketFactory.java",
                    "file old path": null,
                    "file new path": "src/main/java/org/apache/commons/net/ftp/FTPSServerSocketFactory.java",
                    "full name": "src.main.java.org.apache.commons.net.ftp.FTPSServerSocketFactory.init"
                },
                {
                    "function name": "createServerSocket",
                    "function params": [
                        "port",
                        "backlog"
                    ],
                    "file name": "FTPSServerSocketFactory.java",
                    "file old path": null,
                    "file new path": "src/main/java/org/apache/commons/net/ftp/FTPSServerSocketFactory.java",
                    "full name": "src.main.java.org.apache.commons.net.ftp.FTPSServerSocketFactory.createServerSocket"
                }
            ],
            "files that changed": [
                "src/main/java/org/apache/commons/net/ftp/FTPSClient.java",
                "src/main/java/org/apache/commons/net/ftp/FTPSSocketFactory.java"
            ]
        },
        {
            "bug index": "230",
            "bug id": "NET-248",
            "hexsha": "91db96b2f79d3e22238e5877fd75a8a8f4848c5c",
            "fix_hash": "11822e984d6a055c39b5051477ad667c37fa2237",
            "description": "in version 2.0\nthe \"MDTM\" has been add into supporting.\n\n/** @since 2.0 */\n    public static final int MDTM = 33;\n\n\nbut the commands list \"static final String[] _commands = {\" is halt-baked.\nshould be:\nstatic final String[] _commands = {\n                                          \"USER\", \"PASS\", \"ACCT\", \"CWD\", \"CDUP\", \"SMNT\", \"REIN\", \"QUIT\", \"PORT\",\n                                          \"PASV\", \"TYPE\", \"STRU\", \"MODE\", \"RETR\", \"STOR\", \"STOU\", \"APPE\", \"ALLO\",\n                                          \"REST\", \"RNFR\", \"RNTO\", \"ABOR\", \"DELE\", \"RMD\", \"MKD\", \"PWD\", \"LIST\",\n                                          \"NLST\", \"SITE\", \"SYST\", \"STAT\", \"HELP\", \"NOOP\",\"MDTM\",\n                                      };\n\nbut\nstatic final String[] _commands = {\n                                          \"USER\", \"PASS\", \"ACCT\", \"CWD\", \"CDUP\", \"SMNT\", \"REIN\", \"QUIT\", \"PORT\",\n                                          \"PASV\", \"TYPE\", \"STRU\", \"MODE\", \"RETR\", \"STOR\", \"STOU\", \"APPE\", \"ALLO\",\n                                          \"REST\", \"RNFR\", \"RNTO\", \"ABOR\", \"DELE\", \"RMD\", \"MKD\", \"PWD\", \"LIST\",\n                                          \"NLST\", \"SITE\", \"SYST\", \"STAT\", \"HELP\", \"NOOP\",\n                                      };\nright now,at released version.",
            "commit number version hash": 629,
            "commit number": 454,
            "function that changed": [],
            "files that changed": [
                "src/main/java/org/apache/commons/net/ftp/FTPCommand.java"
            ]
        },
        {
            "bug index": "231",
            "bug id": "NET-250",
            "hexsha": "91db96b2f79d3e22238e5877fd75a8a8f4848c5c",
            "fix_hash": "1bf311737d015ac4ef840d75dd97964b9373aa19",
            "description": "We have just being trying to upgrade from the old NetComponents-1.3.8 to the new apache commons-net-2.0  The only thing we really needed to do is to change some imports and our project compiled.\n\nThe problem is that listFiles does not work any more with our netware ftp server! I have done some debugging and found that the problem is when creating a FTPFileEntryParser from the class DefaultFTPFileEntryParserFactory it returns a Unix entry parser due the code:\n\n{code}\n            if ((ukey.indexOf(FTPClientConfig.SYST_UNIX) >= 0) \n\t            \t\t|| (ukey.indexOf(FTPClientConfig.SYST_L8) >= 0))\n\t            {\n\t                parser = createUnixFTPEntryParser();\n\t            }\n{code}\n\nI understand that the SYST_L8 is used to identify that the system is unknown and so per default takes the UNIX server, however our FTP server returns \"NETWARE TYPE: L8\" and should really be identified as a netware server. maybe this L8 test could be done at the end of these massive if, else statements?\n\nIn the meanwhile i have created by own FTPFileEntryParserFactory which does this and it works. The question is, is it a bug and should this change also be done in the commons?\n",
            "commit number version hash": 629,
            "commit number": 453,
            "function that changed": [
                {
                    "function name": "createFileEntryParser",
                    "function params": [
                        "key"
                    ],
                    "file name": "DefaultFTPFileEntryParserFactory.java",
                    "file old path": "src/main/java/org/apache/commons/net/ftp/parser/DefaultFTPFileEntryParserFactory.java",
                    "file new path": "src/main/java/org/apache/commons/net/ftp/parser/DefaultFTPFileEntryParserFactory.java",
                    "full name": "src.main.java.org.apache.commons.net.ftp.parser.DefaultFTPFileEntryParserFactory.createFileEntryParser"
                }
            ],
            "files that changed": [
                "src/main/java/org/apache/commons/net/ftp/parser/DefaultFTPFileEntryParserFactory.java"
            ]
        },
        {
            "bug index": "232",
            "bug id": "NET-225",
            "hexsha": "be5af473dca0fd652be1637d824d0baebb492947",
            "fix_hash": "c4cd3d1c5ea6d15316713a633196185c78e5a8fc",
            "description": "I am using Ant 1.7.0 task to get files from our Embedded FTP server:\n<ftp server=\"${xxxximage.master.test.xxxx.ip}\"\n\tport=\"${xxxximage.master.test.xxxx.port}\"\n\tuserid=\"${xxxximage.master.test.xxxx.user}\"\n\tpassword=\"${xxxximage.master.test.xxxx.password}\"\n\tremotedir=\"${xxxximage.master.test.xxxx.dir}\"\n\tretriesAllowed=\"3\"\n\taction=\"get\"\n\tskipFailedTransfers=\"true\"\n\tsystemTypeKey=\"UNIX\"\n\t>\n    <fileset dir=\"${xxxximage.master.dist.test.nunit.dir}\">\n\t\t<include name=\"${xxxximage.master.test.xxxx.results}\"/>\n</fileset>\n</ftp>\nAnt task crashes with the following error message:\njava.lang.NullPointerException\n        at org.apache.tools.ant.dispatch.DispatchUtils.execute(DispatchUtils.jav\na:115)\n        at org.apache.tools.ant.Task.perform(Task.java:348)\n        at org.apache.tools.ant.Target.execute(Target.java:357)\n        at org.apache.tools.ant.Target.performTasks(Target.java:385)\n        at org.apache.tools.ant.Project.executeSortedTargets(Project.java:1329)\n        at org.apache.tools.ant.Project.executeTarget(Project.java:1298)\n        at org.apache.tools.ant.helper.DefaultExecutor.executeTargets(DefaultExe\ncutor.java:41)\n        at org.apache.tools.ant.Project.executeTargets(Project.java:1181)\n        at org.apache.tools.ant.Main.runBuild(Main.java:698)\n        at org.apache.tools.ant.Main.startAnt(Main.java:199)\n        at org.apache.tools.ant.launch.Launcher.run(Launcher.java:257)\n        at org.apache.tools.ant.launch.Launcher.main(Launcher.java:104)\nCaused by: java.lang.NullPointerException\n        at org.apache.tools.ant.taskdefs.optional.net.FTP$FTPDirectoryScanner.ch\neckRemoteSensitivity(FTP.java:583)\n        at org.apache.tools.ant.taskdefs.optional.net.FTP$FTPDirectoryScanner.fo\nrceRemoteSensitivityCheck(FTP.java:552)\n        at org.apache.tools.ant.taskdefs.optional.net.FTP$FTPDirectoryScanner.sc\nan(FTP.java:231)\n        at org.apache.tools.ant.taskdefs.optional.net.FTP.transferFiles(FTP.java\n:1570)\n        at org.apache.tools.ant.taskdefs.optional.net.FTP.transferFiles(FTP.java\n:1683)\n        at org.apache.tools.ant.taskdefs.optional.net.FTP.execute(FTP.java:2373)\n\n        at org.apache.tools.ant.UnknownElement.execute(UnknownElement.java:288)\n        at sun.reflect.GeneratedMethodAccessor2.invoke(Unknown Source)\n        at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAcces\nsorImpl.java:25)\n        at java.lang.reflect.Method.invoke(Method.java:585)\n        at org.apache.tools.ant.dispatch.DispatchUtils.execute(DispatchUtils.jav\na:105)\n        ... 11 more\n--- Nested Exception ---\njava.lang.NullPointerException\n        at org.apache.tools.ant.taskdefs.optional.net.FTP$FTPDirectoryScanner.ch\neckRemoteSensitivity(FTP.java:583)\n        at org.apache.tools.ant.taskdefs.optional.net.FTP$FTPDirectoryScanner.fo\nrceRemoteSensitivityCheck(FTP.java:552)\n        at org.apache.tools.ant.taskdefs.optional.net.FTP$FTPDirectoryScanner.sc\nan(FTP.java:231)\n        at org.apache.tools.ant.taskdefs.optional.net.FTP.transferFiles(FTP.java\n:1570)\n        at org.apache.tools.ant.taskdefs.optional.net.FTP.transferFiles(FTP.java\n:1683)\n        at org.apache.tools.ant.taskdefs.optional.net.FTP.execute(FTP.java:2373)\n\n        at org.apache.tools.ant.UnknownElement.execute(UnknownElement.java:288)\n        at sun.reflect.GeneratedMethodAccessor2.invoke(Unknown Source)\n        at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAcces\nsorImpl.java:25)\n        at java.lang.reflect.Method.invoke(Method.java:585)\n        at org.apache.tools.ant.dispatch.DispatchUtils.execute(DispatchUtils.jav\na:105)\n        at org.apache.tools.ant.Task.perform(Task.java:348)\n        at org.apache.tools.ant.Target.execute(Target.java:357)\n        at org.apache.tools.ant.Target.performTasks(Target.java:385)\n        at org.apache.tools.ant.Project.executeSortedTargets(Project.java:1329)\n        at org.apache.tools.ant.Project.executeTarget(Project.java:1298)\n        at org.apache.tools.ant.helper.DefaultExecutor.executeTargets(DefaultExe\ncutor.java:41)\n        at org.apache.tools.ant.Project.executeTargets(Project.java:1181)\n        at org.apache.tools.ant.Main.runBuild(Main.java:698)\n        at org.apache.tools.ant.Main.startAnt(Main.java:199)\n        at org.apache.tools.ant.launch.Launcher.run(Launcher.java:257)\n        at org.apache.tools.ant.launch.Launcher.main(Launcher.java:104)\n\nThe problem is in the Commons-Net library used internally by the Ant task.\nOur FTP server returns empty string at the end of the requested folder file list that causes the org.apache.commons.net.ftp.FtpClient.listFiles() method to return FTPFile array with null elements at the end, which in turn causes NullPointer exception in the org.apache.tools.ant.taskdefs.optional.net.FTP.checkRemoteSensivity() method.\n\nThe problem occurs because the org.apache.commons.net.ftp.FTPFileEntryParserImpl.preParse() methods designed to wipe off non-valid lines from the file list response doesn't remove trailing empty lines from response inspite of its Javadoc description: \"This default implementation removes entries that do not parse as files.\"\n\nThe issue can be fixed by removing\nelse {\n   break;\n}\nclause from the method's implementation.\n\nI have checked the HEAD version of the FTPFileEntryParserImpl.java file. The else{ break; } clause still remains there and I can reproduce issue with the HEAD version of the commons.net.ftp, thus I am assuming that the issue occurs in the commons-net 1.4.1 as well as in the latest development version.",
            "commit number version hash": 452,
            "commit number": 449,
            "function that changed": [
                {
                    "function name": "preParse",
                    "function params": [
                        "original"
                    ],
                    "file name": "FTPFileEntryParserImpl.java",
                    "file old path": "src/main/java/org/apache/commons/net/ftp/FTPFileEntryParserImpl.java",
                    "file new path": "src/main/java/org/apache/commons/net/ftp/FTPFileEntryParserImpl.java",
                    "full name": "src.main.java.org.apache.commons.net.ftp.FTPFileEntryParserImpl.preParse"
                }
            ],
            "files that changed": [
                "src/main/java/org/apache/commons/net/ftp/FTPFileEntryParserImpl.java"
            ]
        },
        {
            "bug index": "233",
            "bug id": "NET-225",
            "hexsha": "be5af473dca0fd652be1637d824d0baebb492947",
            "fix_hash": "f4509e7fff01493c2f1683c1ef0b9cbbcf3b4c09",
            "description": "I am using Ant 1.7.0 task to get files from our Embedded FTP server:\n<ftp server=\"${xxxximage.master.test.xxxx.ip}\"\n\tport=\"${xxxximage.master.test.xxxx.port}\"\n\tuserid=\"${xxxximage.master.test.xxxx.user}\"\n\tpassword=\"${xxxximage.master.test.xxxx.password}\"\n\tremotedir=\"${xxxximage.master.test.xxxx.dir}\"\n\tretriesAllowed=\"3\"\n\taction=\"get\"\n\tskipFailedTransfers=\"true\"\n\tsystemTypeKey=\"UNIX\"\n\t>\n    <fileset dir=\"${xxxximage.master.dist.test.nunit.dir}\">\n\t\t<include name=\"${xxxximage.master.test.xxxx.results}\"/>\n</fileset>\n</ftp>\nAnt task crashes with the following error message:\njava.lang.NullPointerException\n        at org.apache.tools.ant.dispatch.DispatchUtils.execute(DispatchUtils.jav\na:115)\n        at org.apache.tools.ant.Task.perform(Task.java:348)\n        at org.apache.tools.ant.Target.execute(Target.java:357)\n        at org.apache.tools.ant.Target.performTasks(Target.java:385)\n        at org.apache.tools.ant.Project.executeSortedTargets(Project.java:1329)\n        at org.apache.tools.ant.Project.executeTarget(Project.java:1298)\n        at org.apache.tools.ant.helper.DefaultExecutor.executeTargets(DefaultExe\ncutor.java:41)\n        at org.apache.tools.ant.Project.executeTargets(Project.java:1181)\n        at org.apache.tools.ant.Main.runBuild(Main.java:698)\n        at org.apache.tools.ant.Main.startAnt(Main.java:199)\n        at org.apache.tools.ant.launch.Launcher.run(Launcher.java:257)\n        at org.apache.tools.ant.launch.Launcher.main(Launcher.java:104)\nCaused by: java.lang.NullPointerException\n        at org.apache.tools.ant.taskdefs.optional.net.FTP$FTPDirectoryScanner.ch\neckRemoteSensitivity(FTP.java:583)\n        at org.apache.tools.ant.taskdefs.optional.net.FTP$FTPDirectoryScanner.fo\nrceRemoteSensitivityCheck(FTP.java:552)\n        at org.apache.tools.ant.taskdefs.optional.net.FTP$FTPDirectoryScanner.sc\nan(FTP.java:231)\n        at org.apache.tools.ant.taskdefs.optional.net.FTP.transferFiles(FTP.java\n:1570)\n        at org.apache.tools.ant.taskdefs.optional.net.FTP.transferFiles(FTP.java\n:1683)\n        at org.apache.tools.ant.taskdefs.optional.net.FTP.execute(FTP.java:2373)\n\n        at org.apache.tools.ant.UnknownElement.execute(UnknownElement.java:288)\n        at sun.reflect.GeneratedMethodAccessor2.invoke(Unknown Source)\n        at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAcces\nsorImpl.java:25)\n        at java.lang.reflect.Method.invoke(Method.java:585)\n        at org.apache.tools.ant.dispatch.DispatchUtils.execute(DispatchUtils.jav\na:105)\n        ... 11 more\n--- Nested Exception ---\njava.lang.NullPointerException\n        at org.apache.tools.ant.taskdefs.optional.net.FTP$FTPDirectoryScanner.ch\neckRemoteSensitivity(FTP.java:583)\n        at org.apache.tools.ant.taskdefs.optional.net.FTP$FTPDirectoryScanner.fo\nrceRemoteSensitivityCheck(FTP.java:552)\n        at org.apache.tools.ant.taskdefs.optional.net.FTP$FTPDirectoryScanner.sc\nan(FTP.java:231)\n        at org.apache.tools.ant.taskdefs.optional.net.FTP.transferFiles(FTP.java\n:1570)\n        at org.apache.tools.ant.taskdefs.optional.net.FTP.transferFiles(FTP.java\n:1683)\n        at org.apache.tools.ant.taskdefs.optional.net.FTP.execute(FTP.java:2373)\n\n        at org.apache.tools.ant.UnknownElement.execute(UnknownElement.java:288)\n        at sun.reflect.GeneratedMethodAccessor2.invoke(Unknown Source)\n        at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAcces\nsorImpl.java:25)\n        at java.lang.reflect.Method.invoke(Method.java:585)\n        at org.apache.tools.ant.dispatch.DispatchUtils.execute(DispatchUtils.jav\na:105)\n        at org.apache.tools.ant.Task.perform(Task.java:348)\n        at org.apache.tools.ant.Target.execute(Target.java:357)\n        at org.apache.tools.ant.Target.performTasks(Target.java:385)\n        at org.apache.tools.ant.Project.executeSortedTargets(Project.java:1329)\n        at org.apache.tools.ant.Project.executeTarget(Project.java:1298)\n        at org.apache.tools.ant.helper.DefaultExecutor.executeTargets(DefaultExe\ncutor.java:41)\n        at org.apache.tools.ant.Project.executeTargets(Project.java:1181)\n        at org.apache.tools.ant.Main.runBuild(Main.java:698)\n        at org.apache.tools.ant.Main.startAnt(Main.java:199)\n        at org.apache.tools.ant.launch.Launcher.run(Launcher.java:257)\n        at org.apache.tools.ant.launch.Launcher.main(Launcher.java:104)\n\nThe problem is in the Commons-Net library used internally by the Ant task.\nOur FTP server returns empty string at the end of the requested folder file list that causes the org.apache.commons.net.ftp.FtpClient.listFiles() method to return FTPFile array with null elements at the end, which in turn causes NullPointer exception in the org.apache.tools.ant.taskdefs.optional.net.FTP.checkRemoteSensivity() method.\n\nThe problem occurs because the org.apache.commons.net.ftp.FTPFileEntryParserImpl.preParse() methods designed to wipe off non-valid lines from the file list response doesn't remove trailing empty lines from response inspite of its Javadoc description: \"This default implementation removes entries that do not parse as files.\"\n\nThe issue can be fixed by removing\nelse {\n   break;\n}\nclause from the method's implementation.\n\nI have checked the HEAD version of the FTPFileEntryParserImpl.java file. The else{ break; } clause still remains there and I can reproduce issue with the HEAD version of the commons.net.ftp, thus I am assuming that the issue occurs in the commons-net 1.4.1 as well as in the latest development version.",
            "commit number version hash": 452,
            "commit number": 448,
            "function that changed": [
                {
                    "function name": "preParse",
                    "function params": [
                        "original"
                    ],
                    "file name": "FTPFileEntryParserImpl.java",
                    "file old path": "src/java/org/apache/commons/net/ftp/FTPFileEntryParserImpl.java",
                    "file new path": "src/java/org/apache/commons/net/ftp/FTPFileEntryParserImpl.java",
                    "full name": "src.java.org.apache.commons.net.ftp.FTPFileEntryParserImpl.preParse"
                }
            ],
            "files that changed": [
                "src/java/org/apache/commons/net/ftp/FTPFileEntryParserImpl.java"
            ]
        },
        {
            "bug index": "234",
            "bug id": "NET-230",
            "hexsha": "be5af473dca0fd652be1637d824d0baebb492947",
            "fix_hash": "ad68413e363e51af7259d0fd3c69d5ba2974f590",
            "description": "Was getting an error when connecting to one of our vendor file servers that was returning \"215 UNKNOWN Type: L8\" for a SYST command.\n\nThe DefaultFTPFileEntryParserFactory does a toUpperCase on the key, which was then being compared to the constant SYST_L8.\n\nThat constant was \"Type: L8\", so it could never match.\n\nHere's the patch (also attached as a file):\n\n# This patch file was generated by NetBeans IDE # Following Index: paths are relative to: C:\\Documents and Settings\\robw\\My Documents\\NetBeansProjects\\NET_2_0\n# This patch can be applied using context Tools: Patch action on respective folder.\n# It uses platform neutral UTF-8 encoding and \\n newlines.\n# Above lines and this line are ignored by the patching process.\nIndex: src/main/java/org/apache/commons/net/ftp/FTPClientConfig.java\n--- src/main/java/org/apache/commons/net/ftp/FTPClientConfig.java Base\n(BASE)\n+++ src/main/java/org/apache/commons/net/ftp/FTPClientConfig.java\nLocally Modified (Based On LOCAL)\n@@ -190,9 +190,12 @@\n      * This may happen if the ftpd in question was compiled without system\n      * information.\n      *\n+     * 2008-Aug-07 - Updated to be UPPERCASE so that the check done in\n+     * createFileEntryParser will succeed.\n+     *\n      * @since 1.5\n      */\n-    public static final String SYST_L8 = \"Type: L8\";\n+    public static final String SYST_L8 = \"TYPE: L8\";\n     \n     /**\n      * Identifier by which an Netware-based ftp server is known throughout\nIndex:\nsrc/test/java/org/apache/commons/net/ftp/parser/DefaultFTPFileEntryParse\nrFactoryTest.java\n---\nsrc/test/java/org/apache/commons/net/ftp/parser/DefaultFTPFileEntryParse\nrFactoryTest.java Base (BASE)\n+++\nsrc/test/java/org/apache/commons/net/ftp/parser/DefaultFTPFileEntryParse\nrFactoryTest.java Locally Modified (Based On LOCAL) @@ -62,6 +62,14 @@\n         parser = factory.createFileEntryParser(\"OS/400\");\n         assertTrue(parser instanceof CompositeFileEntryParser);\n \n+        parser = factory.createFileEntryParser(\"AS/400\");\n+        assertTrue(parser instanceof CompositeFileEntryParser);\n+\n+        // Added test to make sure it handles the Unix systems that\nwere\n+        // compiled with OS as \"UNKNOWN\". This test validates that the\n+        // check is case-insensitive.\n+        parser = factory.createFileEntryParser(\"UNKNOWN Type: L8\");\n+\n         try {\n             parser =\nfactory.createFileEntryParser(\"OS2FTPFileEntryParser\");\n             fail(\"Exception should have been thrown.\n\\\"OS2FTPFileEntryParser\\\" is not a recognized key\");\n\n",
            "commit number version hash": 452,
            "commit number": 447,
            "function that changed": [
                {
                    "function name": "createFileEntryParser",
                    "function params": [
                        "key"
                    ],
                    "file name": "DefaultFTPFileEntryParserFactory.java",
                    "file old path": "src/java/org/apache/commons/net/ftp/parser/DefaultFTPFileEntryParserFactory.java",
                    "file new path": "src/java/org/apache/commons/net/ftp/parser/DefaultFTPFileEntryParserFactory.java",
                    "full name": "src.java.org.apache.commons.net.ftp.parser.DefaultFTPFileEntryParserFactory.createFileEntryParser"
                },
                {
                    "function name": "testDefaultParserFactory",
                    "function params": [],
                    "file name": "DefaultFTPFileEntryParserFactoryTest.java",
                    "file old path": "src/test/org/apache/commons/net/ftp/parser/DefaultFTPFileEntryParserFactoryTest.java",
                    "file new path": "src/test/org/apache/commons/net/ftp/parser/DefaultFTPFileEntryParserFactoryTest.java",
                    "full name": "src.test.org.apache.commons.net.ftp.parser.DefaultFTPFileEntryParserFactoryTest.testDefaultParserFactory"
                }
            ],
            "files that changed": [
                "src/java/org/apache/commons/net/ftp/FTPClientConfig.java",
                "src/java/org/apache/commons/net/ftp/parser/DefaultFTPFileEntryParserFactory.java",
                "src/test/org/apache/commons/net/ftp/parser/DefaultFTPFileEntryParserFactoryTest.java"
            ]
        },
        {
            "bug index": "235",
            "bug id": "NET-230",
            "hexsha": "be5af473dca0fd652be1637d824d0baebb492947",
            "fix_hash": "c65ef9d7f1a985cc2edf754f77498654891ee553",
            "description": "Was getting an error when connecting to one of our vendor file servers that was returning \"215 UNKNOWN Type: L8\" for a SYST command.\n\nThe DefaultFTPFileEntryParserFactory does a toUpperCase on the key, which was then being compared to the constant SYST_L8.\n\nThat constant was \"Type: L8\", so it could never match.\n\nHere's the patch (also attached as a file):\n\n# This patch file was generated by NetBeans IDE # Following Index: paths are relative to: C:\\Documents and Settings\\robw\\My Documents\\NetBeansProjects\\NET_2_0\n# This patch can be applied using context Tools: Patch action on respective folder.\n# It uses platform neutral UTF-8 encoding and \\n newlines.\n# Above lines and this line are ignored by the patching process.\nIndex: src/main/java/org/apache/commons/net/ftp/FTPClientConfig.java\n--- src/main/java/org/apache/commons/net/ftp/FTPClientConfig.java Base\n(BASE)\n+++ src/main/java/org/apache/commons/net/ftp/FTPClientConfig.java\nLocally Modified (Based On LOCAL)\n@@ -190,9 +190,12 @@\n      * This may happen if the ftpd in question was compiled without system\n      * information.\n      *\n+     * 2008-Aug-07 - Updated to be UPPERCASE so that the check done in\n+     * createFileEntryParser will succeed.\n+     *\n      * @since 1.5\n      */\n-    public static final String SYST_L8 = \"Type: L8\";\n+    public static final String SYST_L8 = \"TYPE: L8\";\n     \n     /**\n      * Identifier by which an Netware-based ftp server is known throughout\nIndex:\nsrc/test/java/org/apache/commons/net/ftp/parser/DefaultFTPFileEntryParse\nrFactoryTest.java\n---\nsrc/test/java/org/apache/commons/net/ftp/parser/DefaultFTPFileEntryParse\nrFactoryTest.java Base (BASE)\n+++\nsrc/test/java/org/apache/commons/net/ftp/parser/DefaultFTPFileEntryParse\nrFactoryTest.java Locally Modified (Based On LOCAL) @@ -62,6 +62,14 @@\n         parser = factory.createFileEntryParser(\"OS/400\");\n         assertTrue(parser instanceof CompositeFileEntryParser);\n \n+        parser = factory.createFileEntryParser(\"AS/400\");\n+        assertTrue(parser instanceof CompositeFileEntryParser);\n+\n+        // Added test to make sure it handles the Unix systems that\nwere\n+        // compiled with OS as \"UNKNOWN\". This test validates that the\n+        // check is case-insensitive.\n+        parser = factory.createFileEntryParser(\"UNKNOWN Type: L8\");\n+\n         try {\n             parser =\nfactory.createFileEntryParser(\"OS2FTPFileEntryParser\");\n             fail(\"Exception should have been thrown.\n\\\"OS2FTPFileEntryParser\\\" is not a recognized key\");\n\n",
            "commit number version hash": 452,
            "commit number": 446,
            "function that changed": [
                {
                    "function name": "testDefaultParserFactory",
                    "function params": [],
                    "file name": "DefaultFTPFileEntryParserFactoryTest.java",
                    "file old path": "src/test/java/org/apache/commons/net/ftp/parser/DefaultFTPFileEntryParserFactoryTest.java",
                    "file new path": "src/test/java/org/apache/commons/net/ftp/parser/DefaultFTPFileEntryParserFactoryTest.java",
                    "full name": "src.test.java.org.apache.commons.net.ftp.parser.DefaultFTPFileEntryParserFactoryTest.testDefaultParserFactory"
                }
            ],
            "files that changed": [
                "src/main/java/org/apache/commons/net/ftp/FTPClientConfig.java",
                "src/test/java/org/apache/commons/net/ftp/parser/DefaultFTPFileEntryParserFactoryTest.java"
            ]
        },
        {
            "bug index": "236",
            "bug id": "NET-223",
            "hexsha": "be5af473dca0fd652be1637d824d0baebb492947",
            "fix_hash": "a70f7c8cec33421db2be57525d9b193a32d44fd2",
            "description": "In method FTPClient.initiateListParsing(FTPFileEntryParser, String), \nthe data connection socket is not closed when an IOException(e.g. SocketTimeoutException)\noccurred while calling FTPListParseEngine.readServerList().\n\n> engine.readServerList(socket.getInputStream(), getControlEncoding());\n> socket.close();\n\nIn other methods that open a data connection socket, like retrieveFile() and __storeFile(),\nthe socket is closed when an IOException occurred.\n\nI think, the client should close the socket like the following.\n\n> try {\n>     engine.readServerList(socket.getInputStream(), getControlEncoding());\n> } finally {\n>     socket.close();",
            "commit number version hash": 452,
            "commit number": 442,
            "function that changed": [
                {
                    "function name": "initiateListParsing",
                    "function params": [
                        "parser",
                        "pathname"
                    ],
                    "file name": "FTPClient.java",
                    "file old path": "src/java/org/apache/commons/net/ftp/FTPClient.java",
                    "file new path": "src/java/org/apache/commons/net/ftp/FTPClient.java",
                    "full name": "src.java.org.apache.commons.net.ftp.FTPClient.initiateListParsing"
                }
            ],
            "files that changed": [
                "src/java/org/apache/commons/net/ftp/FTPClient.java"
            ]
        },
        {
            "bug index": "237",
            "bug id": "NET-223",
            "hexsha": "be5af473dca0fd652be1637d824d0baebb492947",
            "fix_hash": "58f702c8619ed0a071d9a5da6c193c3be1ca39dd",
            "description": "In method FTPClient.initiateListParsing(FTPFileEntryParser, String), \nthe data connection socket is not closed when an IOException(e.g. SocketTimeoutException)\noccurred while calling FTPListParseEngine.readServerList().\n\n> engine.readServerList(socket.getInputStream(), getControlEncoding());\n> socket.close();\n\nIn other methods that open a data connection socket, like retrieveFile() and __storeFile(),\nthe socket is closed when an IOException occurred.\n\nI think, the client should close the socket like the following.\n\n> try {\n>     engine.readServerList(socket.getInputStream(), getControlEncoding());\n> } finally {\n>     socket.close();",
            "commit number version hash": 452,
            "commit number": 441,
            "function that changed": [
                {
                    "function name": "initiateListParsing",
                    "function params": [
                        "parser",
                        "pathname"
                    ],
                    "file name": "FTPClient.java",
                    "file old path": "src/main/java/org/apache/commons/net/ftp/FTPClient.java",
                    "file new path": "src/main/java/org/apache/commons/net/ftp/FTPClient.java",
                    "full name": "src.main.java.org.apache.commons.net.ftp.FTPClient.initiateListParsing"
                }
            ],
            "files that changed": [
                "src/main/java/org/apache/commons/net/ftp/FTPClient.java"
            ]
        },
        {
            "bug index": "238",
            "bug id": "NET-221",
            "hexsha": "be5af473dca0fd652be1637d824d0baebb492947",
            "fix_hash": "6e859c18a1c624fca140c636658df191a9ef8cb0",
            "description": "It would be helpful to identify the classes that are new to 2.0",
            "commit number version hash": 452,
            "commit number": 435,
            "function that changed": [],
            "files that changed": [
                "src/main/java/org/apache/commons/net/PrintCommandListener.java",
                "src/main/java/org/apache/commons/net/SocketClient.java",
                "src/main/java/org/apache/commons/net/ftp/FTP.java",
                "src/main/java/org/apache/commons/net/ftp/FTPClient.java",
                "src/main/java/org/apache/commons/net/ftp/FTPClientConfig.java",
                "src/main/java/org/apache/commons/net/ftp/FTPCommand.java",
                "src/main/java/org/apache/commons/net/ftp/FTPReply.java",
                "src/main/java/org/apache/commons/net/ftp/FTPSClient.java",
                "src/main/java/org/apache/commons/net/ftp/FTPSCommand.java",
                "src/main/java/org/apache/commons/net/ftp/FTPSSocketFactory.java",
                "src/main/java/org/apache/commons/net/ftp/FTPSTrustManager.java",
                "src/main/java/org/apache/commons/net/ftp/parser/DefaultFTPFileEntryParserFactory.java",
                "src/main/java/org/apache/commons/net/ftp/parser/FTPTimestampParserImpl.java",
                "src/main/java/org/apache/commons/net/ftp/parser/MVSFTPEntryParser.java",
                "src/main/java/org/apache/commons/net/ftp/parser/NetwareFTPEntryParser.java",
                "src/main/java/org/apache/commons/net/ftp/parser/RegexFTPFileEntryParserImpl.java",
                "src/main/java/org/apache/commons/net/smtp/SMTP.java",
                "src/main/java/org/apache/commons/net/smtp/SMTPClient.java",
                "src/main/java/org/apache/commons/net/telnet/WindowSizeOptionHandler.java",
                "src/main/java/org/apache/commons/net/tftp/TFTPServer.java",
                "src/main/java/org/apache/commons/net/util/ListenerList.java",
                "src/main/java/org/apache/commons/net/util/SubnetUtils.java"
            ]
        },
        {
            "bug index": "239",
            "bug id": "NET-221",
            "hexsha": "be5af473dca0fd652be1637d824d0baebb492947",
            "fix_hash": "6d7731e3085da1999035284c65929ad66f63b607",
            "description": "It would be helpful to identify the classes that are new to 2.0",
            "commit number version hash": 452,
            "commit number": 434,
            "function that changed": [],
            "files that changed": [
                "src/java/org/apache/commons/net/ftp/FTPClientConfig.java",
                "src/java/org/apache/commons/net/ftp/parser/DefaultFTPFileEntryParserFactory.java",
                "src/java/org/apache/commons/net/ftp/parser/FTPTimestampParserImpl.java",
                "src/java/org/apache/commons/net/ftp/parser/NetwareFTPEntryParser.java"
            ]
        },
        {
            "bug index": "240",
            "bug id": "NET-208",
            "hexsha": "be5af473dca0fd652be1637d824d0baebb492947",
            "fix_hash": "dda1bff5fae389f63bbed495fd0ab6632aa6b2d7",
            "description": "The TelnetInputStream catches InterruptedException in the read() method (line 342) and throws a new IOException without wrapping the InterruptedException. This means that the fact that the read() method was interrupted can hardly be distinguished from any other IOException.\n\nI use thread interruption as a cancellation mechanism for a thread that uses the TelnetInputStream to read data.\n\nThe read method is not allowed to throw InterruptedException, so I propose to fix it by at least wrapping the underlying InterruptedException:\n\ncatch (InterruptedException e)\n{\n    throw new IOException(\"Fatal thread interruption during read.\", e);\n}\n",
            "commit number version hash": 452,
            "commit number": 431,
            "function that changed": [
                {
                    "function name": "read",
                    "function params": [],
                    "file name": "TelnetInputStream.java",
                    "file old path": "src/main/java/org/apache/commons/net/telnet/TelnetInputStream.java",
                    "file new path": "src/main/java/org/apache/commons/net/telnet/TelnetInputStream.java",
                    "full name": "src.main.java.org.apache.commons.net.telnet.TelnetInputStream.read"
                }
            ],
            "files that changed": [
                "src/main/java/org/apache/commons/net/telnet/TelnetInputStream.java"
            ]
        },
        {
            "bug index": "241",
            "bug id": "NET-194",
            "hexsha": "be5af473dca0fd652be1637d824d0baebb492947",
            "fix_hash": "8601927a7abd8a549d737024575fa97cf0643b2e",
            "description": "The Telnet class in trunk catches Exception several times; it should really catch just the appropriate Exceptions.\n\nAlso the Exception blocks writes to System.err - is this really correct?",
            "commit number version hash": 452,
            "commit number": 430,
            "function that changed": [
                {
                    "function name": "_spyRead",
                    "function params": [
                        "ch"
                    ],
                    "file name": "Telnet.java",
                    "file old path": "src/main/java/org/apache/commons/net/telnet/Telnet.java",
                    "file new path": "src/main/java/org/apache/commons/net/telnet/Telnet.java",
                    "full name": "src.main.java.org.apache.commons.net.telnet.Telnet._spyRead"
                },
                {
                    "function name": "_setDo",
                    "function params": [
                        "option"
                    ],
                    "file name": "Telnet.java",
                    "file old path": "src/main/java/org/apache/commons/net/telnet/Telnet.java",
                    "file new path": "src/main/java/org/apache/commons/net/telnet/Telnet.java",
                    "full name": "src.main.java.org.apache.commons.net.telnet.Telnet._setDo"
                },
                {
                    "function name": "_spyWrite",
                    "function params": [
                        "ch"
                    ],
                    "file name": "Telnet.java",
                    "file old path": "src/main/java/org/apache/commons/net/telnet/Telnet.java",
                    "file new path": "src/main/java/org/apache/commons/net/telnet/Telnet.java",
                    "full name": "src.main.java.org.apache.commons.net.telnet.Telnet._spyWrite"
                },
                {
                    "function name": "_processAYTResponse",
                    "function params": [],
                    "file name": "Telnet.java",
                    "file old path": "src/main/java/org/apache/commons/net/telnet/Telnet.java",
                    "file new path": "src/main/java/org/apache/commons/net/telnet/Telnet.java",
                    "full name": "src.main.java.org.apache.commons.net.telnet.Telnet._processAYTResponse"
                },
                {
                    "function name": "_setWill",
                    "function params": [
                        "option"
                    ],
                    "file name": "Telnet.java",
                    "file old path": "src/main/java/org/apache/commons/net/telnet/Telnet.java",
                    "file new path": "src/main/java/org/apache/commons/net/telnet/Telnet.java",
                    "full name": "src.main.java.org.apache.commons.net.telnet.Telnet._setWill"
                }
            ],
            "files that changed": [
                "src/main/java/org/apache/commons/net/telnet/Telnet.java"
            ]
        },
        {
            "bug index": "242",
            "bug id": "NET-208",
            "hexsha": "be5af473dca0fd652be1637d824d0baebb492947",
            "fix_hash": "bb1c0319a76d08ee028ef792064aa5f92fcee0ec",
            "description": "The TelnetInputStream catches InterruptedException in the read() method (line 342) and throws a new IOException without wrapping the InterruptedException. This means that the fact that the read() method was interrupted can hardly be distinguished from any other IOException.\n\nI use thread interruption as a cancellation mechanism for a thread that uses the TelnetInputStream to read data.\n\nThe read method is not allowed to throw InterruptedException, so I propose to fix it by at least wrapping the underlying InterruptedException:\n\ncatch (InterruptedException e)\n{\n    throw new IOException(\"Fatal thread interruption during read.\", e);\n}\n",
            "commit number version hash": 452,
            "commit number": 428,
            "function that changed": [
                {
                    "function name": "read",
                    "function params": [],
                    "file name": "TelnetInputStream.java",
                    "file old path": "src/java/org/apache/commons/net/telnet/TelnetInputStream.java",
                    "file new path": "src/java/org/apache/commons/net/telnet/TelnetInputStream.java",
                    "full name": "src.java.org.apache.commons.net.telnet.TelnetInputStream.read"
                }
            ],
            "files that changed": [
                "src/java/org/apache/commons/net/telnet/TelnetInputStream.java"
            ]
        },
        {
            "bug index": "243",
            "bug id": "NET-194",
            "hexsha": "be5af473dca0fd652be1637d824d0baebb492947",
            "fix_hash": "46c188e2a222fe567926cd5c9291855238622ee5",
            "description": "The Telnet class in trunk catches Exception several times; it should really catch just the appropriate Exceptions.\n\nAlso the Exception blocks writes to System.err - is this really correct?",
            "commit number version hash": 452,
            "commit number": 426,
            "function that changed": [
                {
                    "function name": "_spyRead",
                    "function params": [
                        "ch"
                    ],
                    "file name": "Telnet.java",
                    "file old path": "src/java/org/apache/commons/net/telnet/Telnet.java",
                    "file new path": "src/java/org/apache/commons/net/telnet/Telnet.java",
                    "full name": "src.java.org.apache.commons.net.telnet.Telnet._spyRead"
                },
                {
                    "function name": "_spyWrite",
                    "function params": [
                        "ch"
                    ],
                    "file name": "Telnet.java",
                    "file old path": "src/java/org/apache/commons/net/telnet/Telnet.java",
                    "file new path": "src/java/org/apache/commons/net/telnet/Telnet.java",
                    "full name": "src.java.org.apache.commons.net.telnet.Telnet._spyWrite"
                },
                {
                    "function name": "_setDo",
                    "function params": [
                        "option"
                    ],
                    "file name": "Telnet.java",
                    "file old path": "src/java/org/apache/commons/net/telnet/Telnet.java",
                    "file new path": "src/java/org/apache/commons/net/telnet/Telnet.java",
                    "full name": "src.java.org.apache.commons.net.telnet.Telnet._setDo"
                },
                {
                    "function name": "_processAYTResponse",
                    "function params": [],
                    "file name": "Telnet.java",
                    "file old path": "src/java/org/apache/commons/net/telnet/Telnet.java",
                    "file new path": "src/java/org/apache/commons/net/telnet/Telnet.java",
                    "full name": "src.java.org.apache.commons.net.telnet.Telnet._processAYTResponse"
                },
                {
                    "function name": "_setWill",
                    "function params": [
                        "option"
                    ],
                    "file name": "Telnet.java",
                    "file old path": "src/java/org/apache/commons/net/telnet/Telnet.java",
                    "file new path": "src/java/org/apache/commons/net/telnet/Telnet.java",
                    "full name": "src.java.org.apache.commons.net.telnet.Telnet._setWill"
                }
            ],
            "files that changed": [
                "src/java/org/apache/commons/net/telnet/Telnet.java"
            ]
        },
        {
            "bug index": "244",
            "bug id": "NET-216",
            "hexsha": "be5af473dca0fd652be1637d824d0baebb492947",
            "fix_hash": "8f28a93ab1933356496a2fce1d7a6cd39a0dca50",
            "description": "When setting the KeyManager and TrustManager for FtpsClient, it will not be used for the data connection. In addition, the current code eats an exception and just dumps it to stderr. ",
            "commit number version hash": 452,
            "commit number": 425,
            "function that changed": [
                {
                    "function name": "FTPSClient",
                    "function params": [
                        "protocol",
                        "isImplicit"
                    ],
                    "file name": "FTPSClient.java",
                    "file old path": "src/main/java/org/apache/commons/net/ftp/FTPSClient.java",
                    "file new path": "src/main/java/org/apache/commons/net/ftp/FTPSClient.java",
                    "full name": "src.main.java.org.apache.commons.net.ftp.FTPSClient.FTPSClient"
                },
                {
                    "function name": "FTPSClient",
                    "function params": [
                        "protocol"
                    ],
                    "file name": "FTPSClient.java",
                    "file old path": "src/main/java/org/apache/commons/net/ftp/FTPSClient.java",
                    "file new path": "src/main/java/org/apache/commons/net/ftp/FTPSClient.java",
                    "full name": "src.main.java.org.apache.commons.net.ftp.FTPSClient.FTPSClient"
                },
                {
                    "function name": "execPROT",
                    "function params": [
                        "prot"
                    ],
                    "file name": "FTPSClient.java",
                    "file old path": "src/main/java/org/apache/commons/net/ftp/FTPSClient.java",
                    "file new path": "src/main/java/org/apache/commons/net/ftp/FTPSClient.java",
                    "full name": "src.main.java.org.apache.commons.net.ftp.FTPSClient.execPROT"
                },
                {
                    "function name": "FTPSClient",
                    "function params": [
                        "isImplicit"
                    ],
                    "file name": "FTPSClient.java",
                    "file old path": "src/main/java/org/apache/commons/net/ftp/FTPSClient.java",
                    "file new path": "src/main/java/org/apache/commons/net/ftp/FTPSClient.java",
                    "full name": "src.main.java.org.apache.commons.net.ftp.FTPSClient.FTPSClient"
                },
                {
                    "function name": "sslNegotiation",
                    "function params": [],
                    "file name": "FTPSClient.java",
                    "file old path": "src/main/java/org/apache/commons/net/ftp/FTPSClient.java",
                    "file new path": "src/main/java/org/apache/commons/net/ftp/FTPSClient.java",
                    "full name": "src.main.java.org.apache.commons.net.ftp.FTPSClient.sslNegotiation"
                },
                {
                    "function name": "initSslContext",
                    "function params": [],
                    "file name": "FTPSClient.java",
                    "file old path": "src/main/java/org/apache/commons/net/ftp/FTPSClient.java",
                    "file new path": "src/main/java/org/apache/commons/net/ftp/FTPSClient.java",
                    "full name": "src.main.java.org.apache.commons.net.ftp.FTPSClient.initSslContext"
                },
                {
                    "function name": "FTPSClient",
                    "function params": [],
                    "file name": "FTPSClient.java",
                    "file old path": "src/main/java/org/apache/commons/net/ftp/FTPSClient.java",
                    "file new path": "src/main/java/org/apache/commons/net/ftp/FTPSClient.java",
                    "full name": "src.main.java.org.apache.commons.net.ftp.FTPSClient.FTPSClient"
                }
            ],
            "files that changed": [
                "src/main/java/org/apache/commons/net/ftp/FTPSClient.java"
            ]
        },
        {
            "bug index": "245",
            "bug id": "NET-213",
            "hexsha": "be5af473dca0fd652be1637d824d0baebb492947",
            "fix_hash": "e8f3ebfdf487f1e70f06b8bd990e0400542137da",
            "description": "The constructors in FromNetASCIIInputStream.java assign a value to a static field:\n\n_lineSeparatorBytes = _lineSeparator.getBytes(encoding);\n\nThis is not thread-safe, indeed it is thread-hostile if the value can ever be different for different encodings.\n(Two different instances wanting to use two different values of the same static field)\n\nThe field should be initialised in the static initialiser (and should probably be made final as a hint not to change it - though this won't stop the contents being changed).\n\n\n",
            "commit number version hash": 452,
            "commit number": 424,
            "function that changed": [
                {
                    "function name": "retrieveFile",
                    "function params": [
                        "remote",
                        "local"
                    ],
                    "file name": "FTPClient.java",
                    "file old path": "src/main/java/org/apache/commons/net/ftp/FTPClient.java",
                    "file new path": "src/main/java/org/apache/commons/net/ftp/FTPClient.java",
                    "full name": "src.main.java.org.apache.commons.net.ftp.FTPClient.retrieveFile"
                },
                {
                    "function name": "retrieveFileStream",
                    "function params": [
                        "remote"
                    ],
                    "file name": "FTPClient.java",
                    "file old path": "src/main/java/org/apache/commons/net/ftp/FTPClient.java",
                    "file new path": "src/main/java/org/apache/commons/net/ftp/FTPClient.java",
                    "full name": "src.main.java.org.apache.commons.net.ftp.FTPClient.retrieveFileStream"
                },
                {
                    "function name": "FromNetASCIIInputStream",
                    "function params": [
                        "input"
                    ],
                    "file name": "FromNetASCIIInputStream.java",
                    "file old path": "src/main/java/org/apache/commons/net/io/FromNetASCIIInputStream.java",
                    "file new path": "src/main/java/org/apache/commons/net/io/FromNetASCIIInputStream.java",
                    "full name": "src.main.java.org.apache.commons.net.io.FromNetASCIIInputStream.FromNetASCIIInputStream"
                },
                {
                    "function name": "FromNetASCIIInputStream",
                    "function params": [
                        "input",
                        "encoding"
                    ],
                    "file name": "FromNetASCIIInputStream.java",
                    "file old path": "src/main/java/org/apache/commons/net/io/FromNetASCIIInputStream.java",
                    "file new path": "src/main/java/org/apache/commons/net/io/FromNetASCIIInputStream.java",
                    "full name": "src.main.java.org.apache.commons.net.io.FromNetASCIIInputStream.FromNetASCIIInputStream"
                }
            ],
            "files that changed": [
                "src/main/java/org/apache/commons/net/ftp/FTPClient.java",
                "src/main/java/org/apache/commons/net/io/FromNetASCIIInputStream.java"
            ]
        },
        {
            "bug index": "246",
            "bug id": "NET-188",
            "hexsha": "be5af473dca0fd652be1637d824d0baebb492947",
            "fix_hash": "881bd43752025c1315b09177d3bb5478d16835da",
            "description": "This issue has same cause as VALIDATOR-221.\norg.apache.commons.net.ftp.parser.FTPTimestampParserImpl#parseTimestamp throws ParseException with timestampStr = \"Feb 29 11:22\".\n\nFTP Server status:\n\n{code}\n[root@localhost test-commonsnet]# pwd\n/tmp/test-commonsnet\n[root@localhost test-commonsnet]# ls -l\ntotal 0\n-rw-r--r--  1 root root 0 Dec 19  2006 aaa.txt\n-rw-r--r--  1 root root 0 Feb 29 11:22 bbb.txt\n{code}\n\ntest code:\n\n{code}\npublic void testCommonsNetLeapDay() throws Exception {\n    final FTPClient ftp = new FTPClient();\n    ftp.connect(host);\n    ftp.login(user, password);\n    final FTPFile[] listFiles = ftp.listFiles(\"/tmp/test-commonsnet\");\n    for (int i = 0; i < listFiles.length; i++) {\n        System.out.println(\"[\" + i + \"] \" + listFiles[i]);\n    }\n    ftp.disconnect();\n}\n{code}\n\nresults bellow.\n\n{code}\n[0] -rw-r--r--    1 0        0               0 Dec 18  2006 aaa.txt\n[1] null\n{code}\n\nSecond element(bbb.txt) should not be null.\n",
            "commit number version hash": 452,
            "commit number": 419,
            "function that changed": [
                {
                    "function name": "parseTimestamp",
                    "function params": [
                        "timestampStr",
                        "serverTime"
                    ],
                    "file name": "FTPTimestampParserImpl.java",
                    "file old path": "src/java/org/apache/commons/net/ftp/parser/FTPTimestampParserImpl.java",
                    "file new path": "src/java/org/apache/commons/net/ftp/parser/FTPTimestampParserImpl.java",
                    "full name": "src.java.org.apache.commons.net.ftp.parser.FTPTimestampParserImpl.parseTimestamp"
                }
            ],
            "files that changed": [
                "src/java/org/apache/commons/net/ftp/parser/FTPTimestampParserImpl.java"
            ]
        },
        {
            "bug index": "247",
            "bug id": "NET-211",
            "hexsha": "be5af473dca0fd652be1637d824d0baebb492947",
            "fix_hash": "c8cdd97e568cb25d21374fcb4b6f5cc2660ba3a5",
            "description": "Extracted from NET-188.\n\nIf today's date is Dec 30 2007, then the short date \"Dec 31\" parses as Dec 31 2006 if lenientFutureDate is false, and Dec 31 2007 if lenient = true.\n\nHowever, if today's date is Dec 31 2007, then the short date \"Jan 1\" parses as Jan 1 2006 even if lenient = true.\n\nThis is inconsistent.",
            "commit number version hash": 452,
            "commit number": 418,
            "function that changed": [
                {
                    "function name": "parseTimestamp",
                    "function params": [
                        "timestampStr",
                        "serverTime"
                    ],
                    "file name": "FTPTimestampParserImpl.java",
                    "file old path": "src/main/java/org/apache/commons/net/ftp/parser/FTPTimestampParserImpl.java",
                    "file new path": "src/main/java/org/apache/commons/net/ftp/parser/FTPTimestampParserImpl.java",
                    "full name": "src.main.java.org.apache.commons.net.ftp.parser.FTPTimestampParserImpl.parseTimestamp"
                }
            ],
            "files that changed": [
                "src/main/java/org/apache/commons/net/ftp/parser/FTPTimestampParserImpl.java"
            ]
        },
        {
            "bug index": "248",
            "bug id": "NET-211",
            "hexsha": "be5af473dca0fd652be1637d824d0baebb492947",
            "fix_hash": "7d75d97ff1d071bc688d74f7f5060277ee82c743",
            "description": "Extracted from NET-188.\n\nIf today's date is Dec 30 2007, then the short date \"Dec 31\" parses as Dec 31 2006 if lenientFutureDate is false, and Dec 31 2007 if lenient = true.\n\nHowever, if today's date is Dec 31 2007, then the short date \"Jan 1\" parses as Jan 1 2006 even if lenient = true.\n\nThis is inconsistent.",
            "commit number version hash": 452,
            "commit number": 416,
            "function that changed": [
                {
                    "function name": "checkShortParse",
                    "function params": [
                        "msg",
                        "now",
                        "input"
                    ],
                    "file name": "FTPTimestampParserImplTest.java",
                    "file old path": "src/test/org/apache/commons/net/ftp/parser/FTPTimestampParserImplTest.java",
                    "file new path": "src/test/org/apache/commons/net/ftp/parser/FTPTimestampParserImplTest.java",
                    "full name": "src.test.org.apache.commons.net.ftp.parser.FTPTimestampParserImplTest.checkShortParse"
                },
                {
                    "function name": "testParseJan01",
                    "function params": [],
                    "file name": "FTPTimestampParserImplTest.java",
                    "file old path": "src/test/org/apache/commons/net/ftp/parser/FTPTimestampParserImplTest.java",
                    "file new path": "src/test/org/apache/commons/net/ftp/parser/FTPTimestampParserImplTest.java",
                    "full name": "src.test.org.apache.commons.net.ftp.parser.FTPTimestampParserImplTest.testParseJan01"
                }
            ],
            "files that changed": [
                "src/test/org/apache/commons/net/ftp/parser/FTPTimestampParserImplTest.java"
            ]
        },
        {
            "bug index": "249",
            "bug id": "NET-211",
            "hexsha": "be5af473dca0fd652be1637d824d0baebb492947",
            "fix_hash": "ce13bab451577512245b345bdf36ac95fd1c1666",
            "description": "Extracted from NET-188.\n\nIf today's date is Dec 30 2007, then the short date \"Dec 31\" parses as Dec 31 2006 if lenientFutureDate is false, and Dec 31 2007 if lenient = true.\n\nHowever, if today's date is Dec 31 2007, then the short date \"Jan 1\" parses as Jan 1 2006 even if lenient = true.\n\nThis is inconsistent.",
            "commit number version hash": 452,
            "commit number": 415,
            "function that changed": [
                {
                    "function name": "parseTimestamp",
                    "function params": [
                        "timestampStr",
                        "serverTime"
                    ],
                    "file name": "FTPTimestampParserImpl.java",
                    "file old path": "src/java/org/apache/commons/net/ftp/parser/FTPTimestampParserImpl.java",
                    "file new path": "src/java/org/apache/commons/net/ftp/parser/FTPTimestampParserImpl.java",
                    "full name": "src.java.org.apache.commons.net.ftp.parser.FTPTimestampParserImpl.parseTimestamp"
                }
            ],
            "files that changed": [
                "src/java/org/apache/commons/net/ftp/parser/FTPTimestampParserImpl.java"
            ]
        },
        {
            "bug index": "250",
            "bug id": "NET-211",
            "hexsha": "be5af473dca0fd652be1637d824d0baebb492947",
            "fix_hash": "cc49d682f1cb32939e880e5ecbbfb8baaf106ba2",
            "description": "Extracted from NET-188.\n\nIf today's date is Dec 30 2007, then the short date \"Dec 31\" parses as Dec 31 2006 if lenientFutureDate is false, and Dec 31 2007 if lenient = true.\n\nHowever, if today's date is Dec 31 2007, then the short date \"Jan 1\" parses as Jan 1 2006 even if lenient = true.\n\nThis is inconsistent.",
            "commit number version hash": 452,
            "commit number": 414,
            "function that changed": [
                {
                    "function name": "testParseJan01Lenient",
                    "function params": [],
                    "file name": "FTPTimestampParserImplTest.java",
                    "file old path": "src/test/java/org/apache/commons/net/ftp/parser/FTPTimestampParserImplTest.java",
                    "file new path": "src/test/java/org/apache/commons/net/ftp/parser/FTPTimestampParserImplTest.java",
                    "full name": "src.test.java.org.apache.commons.net.ftp.parser.FTPTimestampParserImplTest.testParseJan01Lenient"
                },
                {
                    "function name": "testParseDec31Lenient",
                    "function params": [],
                    "file name": "FTPTimestampParserImplTest.java",
                    "file old path": "src/test/java/org/apache/commons/net/ftp/parser/FTPTimestampParserImplTest.java",
                    "file new path": "src/test/java/org/apache/commons/net/ftp/parser/FTPTimestampParserImplTest.java",
                    "full name": "src.test.java.org.apache.commons.net.ftp.parser.FTPTimestampParserImplTest.testParseDec31Lenient"
                },
                {
                    "function name": "checkShortParse",
                    "function params": [
                        "msg",
                        "now",
                        "input",
                        "lenient"
                    ],
                    "file name": "FTPTimestampParserImplTest.java",
                    "file old path": "src/test/java/org/apache/commons/net/ftp/parser/FTPTimestampParserImplTest.java",
                    "file new path": "src/test/java/org/apache/commons/net/ftp/parser/FTPTimestampParserImplTest.java",
                    "full name": "src.test.java.org.apache.commons.net.ftp.parser.FTPTimestampParserImplTest.checkShortParse"
                },
                {
                    "function name": "checkShortParse",
                    "function params": [
                        "msg",
                        "now",
                        "input"
                    ],
                    "file name": "FTPTimestampParserImplTest.java",
                    "file old path": "src/test/java/org/apache/commons/net/ftp/parser/FTPTimestampParserImplTest.java",
                    "file new path": "src/test/java/org/apache/commons/net/ftp/parser/FTPTimestampParserImplTest.java",
                    "full name": "src.test.java.org.apache.commons.net.ftp.parser.FTPTimestampParserImplTest.checkShortParse"
                }
            ],
            "files that changed": [
                "src/test/java/org/apache/commons/net/ftp/parser/FTPTimestampParserImplTest.java"
            ]
        },
        {
            "bug index": "251",
            "bug id": "NET-211",
            "hexsha": "be5af473dca0fd652be1637d824d0baebb492947",
            "fix_hash": "17959f838d049c87de800ce848d01b3dcdffd19c",
            "description": "Extracted from NET-188.\n\nIf today's date is Dec 30 2007, then the short date \"Dec 31\" parses as Dec 31 2006 if lenientFutureDate is false, and Dec 31 2007 if lenient = true.\n\nHowever, if today's date is Dec 31 2007, then the short date \"Jan 1\" parses as Jan 1 2006 even if lenient = true.\n\nThis is inconsistent.",
            "commit number version hash": 452,
            "commit number": 413,
            "function that changed": [
                {
                    "function name": "testParseJan01Lenient",
                    "function params": [],
                    "file name": "FTPTimestampParserImplTest.java",
                    "file old path": "src/test/org/apache/commons/net/ftp/parser/FTPTimestampParserImplTest.java",
                    "file new path": "src/test/org/apache/commons/net/ftp/parser/FTPTimestampParserImplTest.java",
                    "full name": "src.test.org.apache.commons.net.ftp.parser.FTPTimestampParserImplTest.testParseJan01Lenient"
                },
                {
                    "function name": "checkShortParse",
                    "function params": [
                        "msg",
                        "now",
                        "input"
                    ],
                    "file name": "FTPTimestampParserImplTest.java",
                    "file old path": "src/test/org/apache/commons/net/ftp/parser/FTPTimestampParserImplTest.java",
                    "file new path": "src/test/org/apache/commons/net/ftp/parser/FTPTimestampParserImplTest.java",
                    "full name": "src.test.org.apache.commons.net.ftp.parser.FTPTimestampParserImplTest.checkShortParse"
                },
                {
                    "function name": "testParseTimestampAcrossTimeZones",
                    "function params": [],
                    "file name": "FTPTimestampParserImplTest.java",
                    "file old path": "src/test/org/apache/commons/net/ftp/parser/FTPTimestampParserImplTest.java",
                    "file new path": "src/test/org/apache/commons/net/ftp/parser/FTPTimestampParserImplTest.java",
                    "full name": "src.test.org.apache.commons.net.ftp.parser.FTPTimestampParserImplTest.testParseTimestampAcrossTimeZones"
                },
                {
                    "function name": "testParseDec31Lenient",
                    "function params": [],
                    "file name": "FTPTimestampParserImplTest.java",
                    "file old path": "src/test/org/apache/commons/net/ftp/parser/FTPTimestampParserImplTest.java",
                    "file new path": "src/test/org/apache/commons/net/ftp/parser/FTPTimestampParserImplTest.java",
                    "full name": "src.test.org.apache.commons.net.ftp.parser.FTPTimestampParserImplTest.testParseDec31Lenient"
                },
                {
                    "function name": "checkShortParse",
                    "function params": [
                        "msg",
                        "now",
                        "input",
                        "lenient"
                    ],
                    "file name": "FTPTimestampParserImplTest.java",
                    "file old path": "src/test/org/apache/commons/net/ftp/parser/FTPTimestampParserImplTest.java",
                    "file new path": "src/test/org/apache/commons/net/ftp/parser/FTPTimestampParserImplTest.java",
                    "full name": "src.test.org.apache.commons.net.ftp.parser.FTPTimestampParserImplTest.checkShortParse"
                }
            ],
            "files that changed": [
                "src/test/org/apache/commons/net/ftp/parser/FTPTimestampParserImplTest.java"
            ]
        },
        {
            "bug index": "252",
            "bug id": "NET-188",
            "hexsha": "be5af473dca0fd652be1637d824d0baebb492947",
            "fix_hash": "35648a2d7640d8551a372a80c88f7d337daf8411",
            "description": "This issue has same cause as VALIDATOR-221.\norg.apache.commons.net.ftp.parser.FTPTimestampParserImpl#parseTimestamp throws ParseException with timestampStr = \"Feb 29 11:22\".\n\nFTP Server status:\n\n{code}\n[root@localhost test-commonsnet]# pwd\n/tmp/test-commonsnet\n[root@localhost test-commonsnet]# ls -l\ntotal 0\n-rw-r--r--  1 root root 0 Dec 19  2006 aaa.txt\n-rw-r--r--  1 root root 0 Feb 29 11:22 bbb.txt\n{code}\n\ntest code:\n\n{code}\npublic void testCommonsNetLeapDay() throws Exception {\n    final FTPClient ftp = new FTPClient();\n    ftp.connect(host);\n    ftp.login(user, password);\n    final FTPFile[] listFiles = ftp.listFiles(\"/tmp/test-commonsnet\");\n    for (int i = 0; i < listFiles.length; i++) {\n        System.out.println(\"[\" + i + \"] \" + listFiles[i]);\n    }\n    ftp.disconnect();\n}\n{code}\n\nresults bellow.\n\n{code}\n[0] -rw-r--r--    1 0        0               0 Dec 18  2006 aaa.txt\n[1] null\n{code}\n\nSecond element(bbb.txt) should not be null.\n",
            "commit number version hash": 452,
            "commit number": 410,
            "function that changed": [
                {
                    "function name": "parseTimestamp",
                    "function params": [
                        "timestampStr",
                        "now"
                    ],
                    "file name": "FTPTimestampParserImpl.java",
                    "file old path": "src/java/org/apache/commons/net/ftp/parser/FTPTimestampParserImpl.java",
                    "file new path": "src/java/org/apache/commons/net/ftp/parser/FTPTimestampParserImpl.java",
                    "full name": "src.java.org.apache.commons.net.ftp.parser.FTPTimestampParserImpl.parseTimestamp"
                }
            ],
            "files that changed": [
                "src/java/org/apache/commons/net/ftp/parser/FTPTimestampParserImpl.java"
            ]
        },
        {
            "bug index": "255",
            "bug id": "NET-195",
            "hexsha": "be5af473dca0fd652be1637d824d0baebb492947",
            "fix_hash": "84a574e82115eeeeed3d115f2a09d0a080b8c7c5",
            "description": "The NtpV3Impl#getDatagramPacket() method implements double-checked locking, which is known not to work.\n\nThe initial \"if (dp == null)\" condition should be removed; once this is done, the synch block could be removed and the method synchronized instead.",
            "commit number version hash": 452,
            "commit number": 407,
            "function that changed": [
                {
                    "function name": "getDatagramPacket",
                    "function params": [],
                    "file name": "NtpV3Impl.java",
                    "file old path": "src/java/org/apache/commons/net/ntp/NtpV3Impl.java",
                    "file new path": "src/java/org/apache/commons/net/ntp/NtpV3Impl.java",
                    "full name": "src.java.org.apache.commons.net.ntp.NtpV3Impl.getDatagramPacket"
                }
            ],
            "files that changed": [
                "src/java/org/apache/commons/net/ntp/NtpV3Impl.java"
            ]
        },
        {
            "bug index": "256",
            "bug id": "NET-195",
            "hexsha": "be5af473dca0fd652be1637d824d0baebb492947",
            "fix_hash": "3687d9331a0002f7735dddf93fc0bc19939bf94a",
            "description": "The NtpV3Impl#getDatagramPacket() method implements double-checked locking, which is known not to work.\n\nThe initial \"if (dp == null)\" condition should be removed; once this is done, the synch block could be removed and the method synchronized instead.",
            "commit number version hash": 452,
            "commit number": 406,
            "function that changed": [
                {
                    "function name": "getDatagramPacket",
                    "function params": [],
                    "file name": "NtpV3Impl.java",
                    "file old path": "src/main/java/org/apache/commons/net/ntp/NtpV3Impl.java",
                    "file new path": "src/main/java/org/apache/commons/net/ntp/NtpV3Impl.java",
                    "full name": "src.main.java.org.apache.commons.net.ntp.NtpV3Impl.getDatagramPacket"
                }
            ],
            "files that changed": [
                "src/main/java/org/apache/commons/net/ntp/NtpV3Impl.java"
            ]
        },
        {
            "bug index": "257",
            "bug id": "NET-203",
            "hexsha": "be5af473dca0fd652be1637d824d0baebb492947",
            "fix_hash": "efb89dd9f2f2c4961518f7a20b5c162ad86841f6",
            "description": "FTPSClient uses mutable objects for CipherSuites and Protocols.\n\nThe setxxx methods ought to copy the arrays, rather than storing a reference to them.\n\nAs these arrays are used in establishing a secure connection, it's important that the data is also secure.\n",
            "commit number version hash": 452,
            "commit number": 405,
            "function that changed": [
                {
                    "function name": "setEnabledCipherSuites",
                    "function params": [
                        "cipherSuites"
                    ],
                    "file name": "FTPSClient.java",
                    "file old path": "src/main/java/org/apache/commons/net/ftp/FTPSClient.java",
                    "file new path": "src/main/java/org/apache/commons/net/ftp/FTPSClient.java",
                    "full name": "src.main.java.org.apache.commons.net.ftp.FTPSClient.setEnabledCipherSuites"
                },
                {
                    "function name": "setEnabledProtocols",
                    "function params": [
                        "protocolVersions"
                    ],
                    "file name": "FTPSClient.java",
                    "file old path": "src/main/java/org/apache/commons/net/ftp/FTPSClient.java",
                    "file new path": "src/main/java/org/apache/commons/net/ftp/FTPSClient.java",
                    "full name": "src.main.java.org.apache.commons.net.ftp.FTPSClient.setEnabledProtocols"
                },
                {
                    "function name": "setEnabledCipherSuites",
                    "function params": [
                        "suites"
                    ],
                    "file name": "FTPSClient.java",
                    "file old path": "src/main/java/org/apache/commons/net/ftp/FTPSClient.java",
                    "file new path": "src/main/java/org/apache/commons/net/ftp/FTPSClient.java",
                    "full name": "src.main.java.org.apache.commons.net.ftp.FTPSClient.setEnabledCipherSuites"
                },
                {
                    "function name": "setEnabledProtocols",
                    "function params": [
                        "protocols"
                    ],
                    "file name": "FTPSClient.java",
                    "file old path": "src/main/java/org/apache/commons/net/ftp/FTPSClient.java",
                    "file new path": "src/main/java/org/apache/commons/net/ftp/FTPSClient.java",
                    "full name": "src.main.java.org.apache.commons.net.ftp.FTPSClient.setEnabledProtocols"
                }
            ],
            "files that changed": [
                "src/main/java/org/apache/commons/net/ftp/FTPSClient.java"
            ]
        },
        {
            "bug index": "258",
            "bug id": "NET-206",
            "hexsha": "be5af473dca0fd652be1637d824d0baebb492947",
            "fix_hash": "03d73d56148d078dd3aa93798b0706dc79b4d367",
            "description": "When default locale of a JVM is set to tr_TR with the UTF-8 encoding the following error is seen when connecting to windows ftp server:\n...\nat org.apache.commons.net.ftp.parser.ParserInitializationException: Unknown parser type: Windows_NT\nat org.apache.commons.net.ftp.parser.DefaultFTPFileEntryParserFactory.createFileEntryParser(DefaultFTPFileEntryParserFactory.java:118)\nat org.apache.commons.net.ftp.FTPClient.initiateListParsing(FTPClient.java:2358)\nat org.apache.commons.net.ftp.FTPClient.listFiles(FTPClient.java:2141)\nat org.apache.commons.net.ftp.FTPClient.listFiles(FTPClient.java:2188)\n...",
            "commit number version hash": 452,
            "commit number": 404,
            "function that changed": [
                {
                    "function name": "createFileEntryParser",
                    "function params": [
                        "key"
                    ],
                    "file name": "DefaultFTPFileEntryParserFactory.java",
                    "file old path": "src/main/java/org/apache/commons/net/ftp/parser/DefaultFTPFileEntryParserFactory.java",
                    "file new path": "src/main/java/org/apache/commons/net/ftp/parser/DefaultFTPFileEntryParserFactory.java",
                    "full name": "src.main.java.org.apache.commons.net.ftp.parser.DefaultFTPFileEntryParserFactory.createFileEntryParser"
                },
                {
                    "function name": "TFTPRequestPacket",
                    "function params": [
                        "type",
                        "datagram"
                    ],
                    "file name": "TFTPRequestPacket.java",
                    "file old path": "src/main/java/org/apache/commons/net/tftp/TFTPRequestPacket.java",
                    "file new path": "src/main/java/org/apache/commons/net/tftp/TFTPRequestPacket.java",
                    "full name": "src.main.java.org.apache.commons.net.tftp.TFTPRequestPacket.TFTPRequestPacket"
                }
            ],
            "files that changed": [
                "src/main/java/org/apache/commons/net/ftp/parser/DefaultFTPFileEntryParserFactory.java",
                "src/main/java/org/apache/commons/net/tftp/TFTPRequestPacket.java"
            ]
        },
        {
            "bug index": "259",
            "bug id": "NET-206",
            "hexsha": "be5af473dca0fd652be1637d824d0baebb492947",
            "fix_hash": "f4fab2c93bfb37dd183eb95b06d3551ac0b8c6f4",
            "description": "When default locale of a JVM is set to tr_TR with the UTF-8 encoding the following error is seen when connecting to windows ftp server:\n...\nat org.apache.commons.net.ftp.parser.ParserInitializationException: Unknown parser type: Windows_NT\nat org.apache.commons.net.ftp.parser.DefaultFTPFileEntryParserFactory.createFileEntryParser(DefaultFTPFileEntryParserFactory.java:118)\nat org.apache.commons.net.ftp.FTPClient.initiateListParsing(FTPClient.java:2358)\nat org.apache.commons.net.ftp.FTPClient.listFiles(FTPClient.java:2141)\nat org.apache.commons.net.ftp.FTPClient.listFiles(FTPClient.java:2188)\n...",
            "commit number version hash": 452,
            "commit number": 403,
            "function that changed": [
                {
                    "function name": "createFileEntryParser",
                    "function params": [
                        "key"
                    ],
                    "file name": "DefaultFTPFileEntryParserFactory.java",
                    "file old path": "src/java/org/apache/commons/net/ftp/parser/DefaultFTPFileEntryParserFactory.java",
                    "file new path": "src/java/org/apache/commons/net/ftp/parser/DefaultFTPFileEntryParserFactory.java",
                    "full name": "src.java.org.apache.commons.net.ftp.parser.DefaultFTPFileEntryParserFactory.createFileEntryParser"
                },
                {
                    "function name": "TFTPRequestPacket",
                    "function params": [
                        "type",
                        "datagram"
                    ],
                    "file name": "TFTPRequestPacket.java",
                    "file old path": "src/java/org/apache/commons/net/tftp/TFTPRequestPacket.java",
                    "file new path": "src/java/org/apache/commons/net/tftp/TFTPRequestPacket.java",
                    "full name": "src.java.org.apache.commons.net.tftp.TFTPRequestPacket.TFTPRequestPacket"
                }
            ],
            "files that changed": [
                "src/java/org/apache/commons/net/ftp/parser/DefaultFTPFileEntryParserFactory.java",
                "src/java/org/apache/commons/net/tftp/TFTPRequestPacket.java"
            ]
        },
        {
            "bug index": "260",
            "bug id": "NET-201",
            "hexsha": "be5af473dca0fd652be1637d824d0baebb492947",
            "fix_hash": "1078ab218d3c0e62c313eec88545d18813b0efb7",
            "description": "The following is a valid entry from a FreeBSD system:\n\n      crw-r-----  1 root      kmem        0,  27 Jan 30 11:42 kmem\n\nThis causes a parse error, because the regular expression does not allow for the major and minor device numbers.",
            "commit number version hash": 452,
            "commit number": 398,
            "function that changed": [
                {
                    "function name": "doAdditionalGoodTests",
                    "function params": [
                        "test",
                        "f"
                    ],
                    "file name": "UnixFTPEntryParserTest.java",
                    "file old path": "src/test/org/apache/commons/net/ftp/parser/UnixFTPEntryParserTest.java",
                    "file new path": "src/test/org/apache/commons/net/ftp/parser/UnixFTPEntryParserTest.java",
                    "full name": "src.test.org.apache.commons.net.ftp.parser.UnixFTPEntryParserTest.doAdditionalGoodTests"
                }
            ],
            "files that changed": [
                "src/java/org/apache/commons/net/ftp/parser/UnixFTPEntryParser.java",
                "src/test/org/apache/commons/net/ftp/parser/UnixFTPEntryParserTest.java"
            ]
        },
        {
            "bug index": "261",
            "bug id": "NET-201",
            "hexsha": "be5af473dca0fd652be1637d824d0baebb492947",
            "fix_hash": "0dd2e79fbdf14f62db132a837f987fe38f831243",
            "description": "The following is a valid entry from a FreeBSD system:\n\n      crw-r-----  1 root      kmem        0,  27 Jan 30 11:42 kmem\n\nThis causes a parse error, because the regular expression does not allow for the major and minor device numbers.",
            "commit number version hash": 452,
            "commit number": 397,
            "function that changed": [
                {
                    "function name": "doAdditionalGoodTests",
                    "function params": [
                        "test",
                        "f"
                    ],
                    "file name": "UnixFTPEntryParserTest.java",
                    "file old path": "src/test/java/org/apache/commons/net/ftp/parser/UnixFTPEntryParserTest.java",
                    "file new path": "src/test/java/org/apache/commons/net/ftp/parser/UnixFTPEntryParserTest.java",
                    "full name": "src.test.java.org.apache.commons.net.ftp.parser.UnixFTPEntryParserTest.doAdditionalGoodTests"
                }
            ],
            "files that changed": [
                "src/main/java/org/apache/commons/net/ftp/FTPClient.java",
                "src/main/java/org/apache/commons/net/ftp/parser/UnixFTPEntryParser.java",
                "src/test/java/org/apache/commons/net/ftp/parser/UnixFTPEntryParserTest.java"
            ]
        },
        {
            "bug index": "263",
            "bug id": "NET-169",
            "hexsha": "be5af473dca0fd652be1637d824d0baebb492947",
            "fix_hash": "2ff4c4686bd5f50f0304eaeeb58231d1b8257047",
            "description": "Hi, \nI am connecting to an ftp server with my username and password. When I call ftpClient.listNames();  it returns 0 length string array although i am very sure that there are files inside. \n\nI also know that when I changed the ftp server to another one this function works. So I am assuming the server that I connected has a weird ftp server. When I called the function ftpClient.getSystemName() it returns UNKNOWN Type: L8.\nIf I call ftpClient.listNames I got this exception\n org.apache.commons.net.ftp.parser.ParserInitializationException: Unknown parser type: UNKNOWN Type: L8\n\tat org.apache.commons.net.ftp.parser.DefaultFTPFileEntryParserFactory.createFileEntryParser(DefaultFTPFileEntryParserFactory.java:125)\n\tat org.apache.commons.net.ftp.FTPClient.initiateListParsing(FTPClient.java:2362)\n\tat org.apache.commons.net.ftp.FTPClient.listFiles(FTPClient.java:2145)\n\tat org.apache.commons.net.ftp.FTPClient.listFiles(FTPClient.java:2192)\n\nI have to get the filenames from the server, so how can I solve the problem.\nThanks for the helps.\nBurak Ulutoprak",
            "commit number version hash": 452,
            "commit number": 386,
            "function that changed": [
                {
                    "function name": "createFileEntryParser",
                    "function params": [
                        "key"
                    ],
                    "file name": "DefaultFTPFileEntryParserFactory.java",
                    "file old path": "src/java/org/apache/commons/net/ftp/parser/DefaultFTPFileEntryParserFactory.java",
                    "file new path": "src/java/org/apache/commons/net/ftp/parser/DefaultFTPFileEntryParserFactory.java",
                    "full name": "src.java.org.apache.commons.net.ftp.parser.DefaultFTPFileEntryParserFactory.createFileEntryParser"
                }
            ],
            "files that changed": [
                "src/java/org/apache/commons/net/ftp/FTPClientConfig.java",
                "src/java/org/apache/commons/net/ftp/parser/DefaultFTPFileEntryParserFactory.java"
            ]
        },
        {
            "bug index": "267",
            "bug id": "NET-198",
            "hexsha": "be5af473dca0fd652be1637d824d0baebb492947",
            "fix_hash": "386c6c0e18853d44754c6ee0ce99fd14c614fe5e",
            "description": "The FTPTimestampParserImpl#parseTimeStamp() method is not fully testable, because it unconditionally creates Calendar items using the current time.\n\nIn order to test for leap years and DST, the test code needs to be able to set arbitrary times.\n\nI suggest adding a package-private method that takes an additional Calendar parameter, as follows:\n\n\tCalendar parseTimestamp(String timestampStr, Calendar now) throws ParseException {\n        // etc\n\nThis would replace the original code; the public interface would delegate to the package-private method:\n\n\tpublic Calendar parseTimestamp(String timestampStr) throws ParseException {\n\t\tCalendar now = Calendar.getInstance();\n\t\treturn parseTimestamp(timestampStr, now);\n\t}\n\nPatch to follow.",
            "commit number version hash": 452,
            "commit number": 368,
            "function that changed": [
                {
                    "function name": "parseTimestamp",
                    "function params": [
                        "timestampStr",
                        "now"
                    ],
                    "file name": "FTPTimestampParserImpl.java",
                    "file old path": "src/main/java/org/apache/commons/net/ftp/parser/FTPTimestampParserImpl.java",
                    "file new path": "src/main/java/org/apache/commons/net/ftp/parser/FTPTimestampParserImpl.java",
                    "full name": "src.main.java.org.apache.commons.net.ftp.parser.FTPTimestampParserImpl.parseTimestamp"
                },
                {
                    "function name": "parseTimestamp",
                    "function params": [
                        "timestampStr"
                    ],
                    "file name": "FTPTimestampParserImpl.java",
                    "file old path": "src/main/java/org/apache/commons/net/ftp/parser/FTPTimestampParserImpl.java",
                    "file new path": "src/main/java/org/apache/commons/net/ftp/parser/FTPTimestampParserImpl.java",
                    "full name": "src.main.java.org.apache.commons.net.ftp.parser.FTPTimestampParserImpl.parseTimestamp"
                }
            ],
            "files that changed": [
                "src/main/java/org/apache/commons/net/ftp/parser/FTPTimestampParserImpl.java"
            ]
        },
        {
            "bug index": "268",
            "bug id": "NET-198",
            "hexsha": "be5af473dca0fd652be1637d824d0baebb492947",
            "fix_hash": "c9e76236f32666b05d622ea112c9f2b044c79e25",
            "description": "The FTPTimestampParserImpl#parseTimeStamp() method is not fully testable, because it unconditionally creates Calendar items using the current time.\n\nIn order to test for leap years and DST, the test code needs to be able to set arbitrary times.\n\nI suggest adding a package-private method that takes an additional Calendar parameter, as follows:\n\n\tCalendar parseTimestamp(String timestampStr, Calendar now) throws ParseException {\n        // etc\n\nThis would replace the original code; the public interface would delegate to the package-private method:\n\n\tpublic Calendar parseTimestamp(String timestampStr) throws ParseException {\n\t\tCalendar now = Calendar.getInstance();\n\t\treturn parseTimestamp(timestampStr, now);\n\t}\n\nPatch to follow.",
            "commit number version hash": 452,
            "commit number": 367,
            "function that changed": [
                {
                    "function name": "parseTimestamp",
                    "function params": [
                        "timestampStr",
                        "now"
                    ],
                    "file name": "FTPTimestampParserImpl.java",
                    "file old path": "src/java/org/apache/commons/net/ftp/parser/FTPTimestampParserImpl.java",
                    "file new path": "src/java/org/apache/commons/net/ftp/parser/FTPTimestampParserImpl.java",
                    "full name": "src.java.org.apache.commons.net.ftp.parser.FTPTimestampParserImpl.parseTimestamp"
                },
                {
                    "function name": "parseTimestamp",
                    "function params": [
                        "timestampStr"
                    ],
                    "file name": "FTPTimestampParserImpl.java",
                    "file old path": "src/java/org/apache/commons/net/ftp/parser/FTPTimestampParserImpl.java",
                    "file new path": "src/java/org/apache/commons/net/ftp/parser/FTPTimestampParserImpl.java",
                    "full name": "src.java.org.apache.commons.net.ftp.parser.FTPTimestampParserImpl.parseTimestamp"
                }
            ],
            "files that changed": [
                "src/java/org/apache/commons/net/ftp/parser/FTPTimestampParserImpl.java"
            ]
        },
        {
            "bug index": "269",
            "bug id": "NET-169",
            "hexsha": "be5af473dca0fd652be1637d824d0baebb492947",
            "fix_hash": "30f5293c15477339ca1f6e5ba60a17da24e08000",
            "description": "Hi, \nI am connecting to an ftp server with my username and password. When I call ftpClient.listNames();  it returns 0 length string array although i am very sure that there are files inside. \n\nI also know that when I changed the ftp server to another one this function works. So I am assuming the server that I connected has a weird ftp server. When I called the function ftpClient.getSystemName() it returns UNKNOWN Type: L8.\nIf I call ftpClient.listNames I got this exception\n org.apache.commons.net.ftp.parser.ParserInitializationException: Unknown parser type: UNKNOWN Type: L8\n\tat org.apache.commons.net.ftp.parser.DefaultFTPFileEntryParserFactory.createFileEntryParser(DefaultFTPFileEntryParserFactory.java:125)\n\tat org.apache.commons.net.ftp.FTPClient.initiateListParsing(FTPClient.java:2362)\n\tat org.apache.commons.net.ftp.FTPClient.listFiles(FTPClient.java:2145)\n\tat org.apache.commons.net.ftp.FTPClient.listFiles(FTPClient.java:2192)\n\nI have to get the filenames from the server, so how can I solve the problem.\nThanks for the helps.\nBurak Ulutoprak",
            "commit number version hash": 452,
            "commit number": 365,
            "function that changed": [
                {
                    "function name": "createFileEntryParser",
                    "function params": [
                        "key"
                    ],
                    "file name": "DefaultFTPFileEntryParserFactory.java",
                    "file old path": "src/main/java/org/apache/commons/net/ftp/parser/DefaultFTPFileEntryParserFactory.java",
                    "file new path": "src/main/java/org/apache/commons/net/ftp/parser/DefaultFTPFileEntryParserFactory.java",
                    "full name": "src.main.java.org.apache.commons.net.ftp.parser.DefaultFTPFileEntryParserFactory.createFileEntryParser"
                }
            ],
            "files that changed": [
                "src/main/java/org/apache/commons/net/ftp/FTPClientConfig.java",
                "src/main/java/org/apache/commons/net/ftp/parser/DefaultFTPFileEntryParserFactory.java"
            ]
        },
        {
            "bug index": "270",
            "bug id": "NET-198",
            "hexsha": "be5af473dca0fd652be1637d824d0baebb492947",
            "fix_hash": "abfee60e6f5aabc268a39f55ecc5f295fc3bb7f6",
            "description": "The FTPTimestampParserImpl#parseTimeStamp() method is not fully testable, because it unconditionally creates Calendar items using the current time.\n\nIn order to test for leap years and DST, the test code needs to be able to set arbitrary times.\n\nI suggest adding a package-private method that takes an additional Calendar parameter, as follows:\n\n\tCalendar parseTimestamp(String timestampStr, Calendar now) throws ParseException {\n        // etc\n\nThis would replace the original code; the public interface would delegate to the package-private method:\n\n\tpublic Calendar parseTimestamp(String timestampStr) throws ParseException {\n\t\tCalendar now = Calendar.getInstance();\n\t\treturn parseTimestamp(timestampStr, now);\n\t}\n\nPatch to follow.",
            "commit number version hash": 452,
            "commit number": 364,
            "function that changed": [
                {
                    "function name": "parseTimestamp",
                    "function params": [
                        "timestampStr"
                    ],
                    "file name": "FTPTimestampParserImpl.java",
                    "file old path": "src/java/org/apache/commons/net/ftp/parser/FTPTimestampParserImpl.java",
                    "file new path": "src/java/org/apache/commons/net/ftp/parser/FTPTimestampParserImpl.java",
                    "full name": "src.java.org.apache.commons.net.ftp.parser.FTPTimestampParserImpl.parseTimestamp"
                },
                {
                    "function name": "parseTimestamp",
                    "function params": [
                        "timestampStr",
                        "now"
                    ],
                    "file name": "FTPTimestampParserImpl.java",
                    "file old path": "src/java/org/apache/commons/net/ftp/parser/FTPTimestampParserImpl.java",
                    "file new path": "src/java/org/apache/commons/net/ftp/parser/FTPTimestampParserImpl.java",
                    "full name": "src.java.org.apache.commons.net.ftp.parser.FTPTimestampParserImpl.parseTimestamp"
                }
            ],
            "files that changed": [
                "src/java/org/apache/commons/net/ftp/parser/FTPTimestampParserImpl.java"
            ]
        },
        {
            "bug index": "271",
            "bug id": "NET-198",
            "hexsha": "be5af473dca0fd652be1637d824d0baebb492947",
            "fix_hash": "32bab3e4ca532aceb5ec75fd93a4d6869fcfcfbe",
            "description": "The FTPTimestampParserImpl#parseTimeStamp() method is not fully testable, because it unconditionally creates Calendar items using the current time.\n\nIn order to test for leap years and DST, the test code needs to be able to set arbitrary times.\n\nI suggest adding a package-private method that takes an additional Calendar parameter, as follows:\n\n\tCalendar parseTimestamp(String timestampStr, Calendar now) throws ParseException {\n        // etc\n\nThis would replace the original code; the public interface would delegate to the package-private method:\n\n\tpublic Calendar parseTimestamp(String timestampStr) throws ParseException {\n\t\tCalendar now = Calendar.getInstance();\n\t\treturn parseTimestamp(timestampStr, now);\n\t}\n\nPatch to follow.",
            "commit number version hash": 452,
            "commit number": 363,
            "function that changed": [
                {
                    "function name": "parseTimestamp",
                    "function params": [
                        "timestampStr",
                        "now"
                    ],
                    "file name": "FTPTimestampParserImpl.java",
                    "file old path": "src/main/java/org/apache/commons/net/ftp/parser/FTPTimestampParserImpl.java",
                    "file new path": "src/main/java/org/apache/commons/net/ftp/parser/FTPTimestampParserImpl.java",
                    "full name": "src.main.java.org.apache.commons.net.ftp.parser.FTPTimestampParserImpl.parseTimestamp"
                },
                {
                    "function name": "parseTimestamp",
                    "function params": [
                        "timestampStr"
                    ],
                    "file name": "FTPTimestampParserImpl.java",
                    "file old path": "src/main/java/org/apache/commons/net/ftp/parser/FTPTimestampParserImpl.java",
                    "file new path": "src/main/java/org/apache/commons/net/ftp/parser/FTPTimestampParserImpl.java",
                    "full name": "src.main.java.org.apache.commons.net.ftp.parser.FTPTimestampParserImpl.parseTimestamp"
                }
            ],
            "files that changed": [
                "src/main/java/org/apache/commons/net/ftp/parser/FTPTimestampParserImpl.java"
            ]
        },
        {
            "bug index": "272",
            "bug id": "NET-73",
            "hexsha": "be5af473dca0fd652be1637d824d0baebb492947",
            "fix_hash": "571c9eac8a1471ad1a088e71e06a1a61a95e9646",
            "description": "Background: If one calls TelnetInputStream.read() in single-threaded mode (no \nreader thread) and there is no data immediately available, the call blocks on \na socket read. When data starts to arrive, the stream adds all the available \nbytes to its internal queue before returning the first one to the caller. To \ndo this, it calls __read() in a loop for as long as there are bytes available. \nThe __read() method returns the first byte of \"user data\" from the socket. If \n__read() encounters a Telnet command sequence (IAC, WILL, WONT, DO, DONT, \netc.), it handles the negotiation transparently and then returns the first \nbyte of user data.\n\nIn most cases, this works fine, but a problem arises if a chunk of data from \nthe remote host ends in a Telnet command sequence. When that happens, the \nTelnetInputStream.read() method hangs, even though it may have already \nacquired some user data. This is because it calls __read() in a loop as long \nas super.available() returns true. But if the remaining data from the socket \nconsists entirely of Telnet commands, __read() will process those AND THEN \nBLOCK waiting for user data.\n\nJust checking super.available() is not sufficient. We should continue the loop \nonly if there are bytes of USER DATA still available from the socket. Not \ndoing this can cause the client to wait indefinitely.",
            "commit number version hash": 452,
            "commit number": 362,
            "function that changed": [
                {
                    "function name": "run",
                    "function params": [],
                    "file name": "TelnetInputStream.java",
                    "file old path": "src/main/java/org/apache/commons/net/telnet/TelnetInputStream.java",
                    "file new path": "src/main/java/org/apache/commons/net/telnet/TelnetInputStream.java",
                    "full name": "src.main.java.org.apache.commons.net.telnet.TelnetInputStream.run"
                },
                {
                    "function name": "read",
                    "function params": [],
                    "file name": "TelnetInputStream.java",
                    "file old path": "src/main/java/org/apache/commons/net/telnet/TelnetInputStream.java",
                    "file new path": "src/main/java/org/apache/commons/net/telnet/TelnetInputStream.java",
                    "full name": "src.main.java.org.apache.commons.net.telnet.TelnetInputStream.read"
                },
                {
                    "function name": "__read",
                    "function params": [
                        "mayBlock"
                    ],
                    "file name": "TelnetInputStream.java",
                    "file old path": "src/main/java/org/apache/commons/net/telnet/TelnetInputStream.java",
                    "file new path": "src/main/java/org/apache/commons/net/telnet/TelnetInputStream.java",
                    "full name": "src.main.java.org.apache.commons.net.telnet.TelnetInputStream.__read"
                },
                {
                    "function name": "__read",
                    "function params": [],
                    "file name": "TelnetInputStream.java",
                    "file old path": "src/main/java/org/apache/commons/net/telnet/TelnetInputStream.java",
                    "file new path": "src/main/java/org/apache/commons/net/telnet/TelnetInputStream.java",
                    "full name": "src.main.java.org.apache.commons.net.telnet.TelnetInputStream.__read"
                }
            ],
            "files that changed": [
                "src/main/java/org/apache/commons/net/telnet/TelnetInputStream.java"
            ]
        },
        {
            "bug index": "273",
            "bug id": "NET-73",
            "hexsha": "be5af473dca0fd652be1637d824d0baebb492947",
            "fix_hash": "3c394cece81c20dce6747dc5512c25a82194b847",
            "description": "Background: If one calls TelnetInputStream.read() in single-threaded mode (no \nreader thread) and there is no data immediately available, the call blocks on \na socket read. When data starts to arrive, the stream adds all the available \nbytes to its internal queue before returning the first one to the caller. To \ndo this, it calls __read() in a loop for as long as there are bytes available. \nThe __read() method returns the first byte of \"user data\" from the socket. If \n__read() encounters a Telnet command sequence (IAC, WILL, WONT, DO, DONT, \netc.), it handles the negotiation transparently and then returns the first \nbyte of user data.\n\nIn most cases, this works fine, but a problem arises if a chunk of data from \nthe remote host ends in a Telnet command sequence. When that happens, the \nTelnetInputStream.read() method hangs, even though it may have already \nacquired some user data. This is because it calls __read() in a loop as long \nas super.available() returns true. But if the remaining data from the socket \nconsists entirely of Telnet commands, __read() will process those AND THEN \nBLOCK waiting for user data.\n\nJust checking super.available() is not sufficient. We should continue the loop \nonly if there are bytes of USER DATA still available from the socket. Not \ndoing this can cause the client to wait indefinitely.",
            "commit number version hash": 452,
            "commit number": 360,
            "function that changed": [
                {
                    "function name": "__read",
                    "function params": [],
                    "file name": "TelnetInputStream.java",
                    "file old path": "src/java/org/apache/commons/net/telnet/TelnetInputStream.java",
                    "file new path": "src/java/org/apache/commons/net/telnet/TelnetInputStream.java",
                    "full name": "src.java.org.apache.commons.net.telnet.TelnetInputStream.__read"
                },
                {
                    "function name": "run",
                    "function params": [],
                    "file name": "TelnetInputStream.java",
                    "file old path": "src/java/org/apache/commons/net/telnet/TelnetInputStream.java",
                    "file new path": "src/java/org/apache/commons/net/telnet/TelnetInputStream.java",
                    "full name": "src.java.org.apache.commons.net.telnet.TelnetInputStream.run"
                },
                {
                    "function name": "__read",
                    "function params": [
                        "mayBlock"
                    ],
                    "file name": "TelnetInputStream.java",
                    "file old path": "src/java/org/apache/commons/net/telnet/TelnetInputStream.java",
                    "file new path": "src/java/org/apache/commons/net/telnet/TelnetInputStream.java",
                    "full name": "src.java.org.apache.commons.net.telnet.TelnetInputStream.__read"
                },
                {
                    "function name": "read",
                    "function params": [],
                    "file name": "TelnetInputStream.java",
                    "file old path": "src/java/org/apache/commons/net/telnet/TelnetInputStream.java",
                    "file new path": "src/java/org/apache/commons/net/telnet/TelnetInputStream.java",
                    "full name": "src.java.org.apache.commons.net.telnet.TelnetInputStream.read"
                }
            ],
            "files that changed": [
                "src/java/org/apache/commons/net/telnet/TelnetInputStream.java"
            ]
        },
        {
            "bug index": "277",
            "bug id": "NET-188",
            "hexsha": "be5af473dca0fd652be1637d824d0baebb492947",
            "fix_hash": "1ccf0989570645d9bb403a916324d07992c16b12",
            "description": "This issue has same cause as VALIDATOR-221.\norg.apache.commons.net.ftp.parser.FTPTimestampParserImpl#parseTimestamp throws ParseException with timestampStr = \"Feb 29 11:22\".\n\nFTP Server status:\n\n{code}\n[root@localhost test-commonsnet]# pwd\n/tmp/test-commonsnet\n[root@localhost test-commonsnet]# ls -l\ntotal 0\n-rw-r--r--  1 root root 0 Dec 19  2006 aaa.txt\n-rw-r--r--  1 root root 0 Feb 29 11:22 bbb.txt\n{code}\n\ntest code:\n\n{code}\npublic void testCommonsNetLeapDay() throws Exception {\n    final FTPClient ftp = new FTPClient();\n    ftp.connect(host);\n    ftp.login(user, password);\n    final FTPFile[] listFiles = ftp.listFiles(\"/tmp/test-commonsnet\");\n    for (int i = 0; i < listFiles.length; i++) {\n        System.out.println(\"[\" + i + \"] \" + listFiles[i]);\n    }\n    ftp.disconnect();\n}\n{code}\n\nresults bellow.\n\n{code}\n[0] -rw-r--r--    1 0        0               0 Dec 18  2006 aaa.txt\n[1] null\n{code}\n\nSecond element(bbb.txt) should not be null.\n",
            "commit number version hash": 452,
            "commit number": 350,
            "function that changed": [
                {
                    "function name": "parseTimestamp",
                    "function params": [
                        "timestampStr"
                    ],
                    "file name": "FTPTimestampParserImpl.java",
                    "file old path": "src/java/org/apache/commons/net/ftp/parser/FTPTimestampParserImpl.java",
                    "file new path": "src/java/org/apache/commons/net/ftp/parser/FTPTimestampParserImpl.java",
                    "full name": "src.java.org.apache.commons.net.ftp.parser.FTPTimestampParserImpl.parseTimestamp"
                }
            ],
            "files that changed": [
                "src/java/org/apache/commons/net/ftp/parser/FTPTimestampParserImpl.java"
            ]
        },
        {
            "bug index": "278",
            "bug id": "NET-188",
            "hexsha": "be5af473dca0fd652be1637d824d0baebb492947",
            "fix_hash": "251c542162e563fef81954fd373cafcc31f24824",
            "description": "This issue has same cause as VALIDATOR-221.\norg.apache.commons.net.ftp.parser.FTPTimestampParserImpl#parseTimestamp throws ParseException with timestampStr = \"Feb 29 11:22\".\n\nFTP Server status:\n\n{code}\n[root@localhost test-commonsnet]# pwd\n/tmp/test-commonsnet\n[root@localhost test-commonsnet]# ls -l\ntotal 0\n-rw-r--r--  1 root root 0 Dec 19  2006 aaa.txt\n-rw-r--r--  1 root root 0 Feb 29 11:22 bbb.txt\n{code}\n\ntest code:\n\n{code}\npublic void testCommonsNetLeapDay() throws Exception {\n    final FTPClient ftp = new FTPClient();\n    ftp.connect(host);\n    ftp.login(user, password);\n    final FTPFile[] listFiles = ftp.listFiles(\"/tmp/test-commonsnet\");\n    for (int i = 0; i < listFiles.length; i++) {\n        System.out.println(\"[\" + i + \"] \" + listFiles[i]);\n    }\n    ftp.disconnect();\n}\n{code}\n\nresults bellow.\n\n{code}\n[0] -rw-r--r--    1 0        0               0 Dec 18  2006 aaa.txt\n[1] null\n{code}\n\nSecond element(bbb.txt) should not be null.\n",
            "commit number version hash": 452,
            "commit number": 345,
            "function that changed": [
                {
                    "function name": "parseTimestamp",
                    "function params": [
                        "timestampStr"
                    ],
                    "file name": "FTPTimestampParserImpl.java",
                    "file old path": "src/main/java/org/apache/commons/net/ftp/parser/FTPTimestampParserImpl.java",
                    "file new path": "src/main/java/org/apache/commons/net/ftp/parser/FTPTimestampParserImpl.java",
                    "full name": "src.main.java.org.apache.commons.net.ftp.parser.FTPTimestampParserImpl.parseTimestamp"
                }
            ],
            "files that changed": [
                "src/main/java/org/apache/commons/net/ftp/parser/FTPTimestampParserImpl.java"
            ]
        },
        {
            "bug index": "279",
            "bug id": "NET-188",
            "hexsha": "be5af473dca0fd652be1637d824d0baebb492947",
            "fix_hash": "fdfcb814712d7d6c40116bdbb6df183f935f0cb3",
            "description": "This issue has same cause as VALIDATOR-221.\norg.apache.commons.net.ftp.parser.FTPTimestampParserImpl#parseTimestamp throws ParseException with timestampStr = \"Feb 29 11:22\".\n\nFTP Server status:\n\n{code}\n[root@localhost test-commonsnet]# pwd\n/tmp/test-commonsnet\n[root@localhost test-commonsnet]# ls -l\ntotal 0\n-rw-r--r--  1 root root 0 Dec 19  2006 aaa.txt\n-rw-r--r--  1 root root 0 Feb 29 11:22 bbb.txt\n{code}\n\ntest code:\n\n{code}\npublic void testCommonsNetLeapDay() throws Exception {\n    final FTPClient ftp = new FTPClient();\n    ftp.connect(host);\n    ftp.login(user, password);\n    final FTPFile[] listFiles = ftp.listFiles(\"/tmp/test-commonsnet\");\n    for (int i = 0; i < listFiles.length; i++) {\n        System.out.println(\"[\" + i + \"] \" + listFiles[i]);\n    }\n    ftp.disconnect();\n}\n{code}\n\nresults bellow.\n\n{code}\n[0] -rw-r--r--    1 0        0               0 Dec 18  2006 aaa.txt\n[1] null\n{code}\n\nSecond element(bbb.txt) should not be null.\n",
            "commit number version hash": 452,
            "commit number": 342,
            "function that changed": [
                {
                    "function name": "parseTimestamp",
                    "function params": [
                        "timestampStr"
                    ],
                    "file name": "FTPTimestampParserImpl.java",
                    "file old path": "src/main/java/org/apache/commons/net/ftp/parser/FTPTimestampParserImpl.java",
                    "file new path": "src/main/java/org/apache/commons/net/ftp/parser/FTPTimestampParserImpl.java",
                    "full name": "src.main.java.org.apache.commons.net.ftp.parser.FTPTimestampParserImpl.parseTimestamp"
                }
            ],
            "files that changed": [
                "src/main/java/org/apache/commons/net/ftp/parser/FTPTimestampParserImpl.java"
            ]
        },
        {
            "bug index": "280",
            "bug id": "NET-188",
            "hexsha": "be5af473dca0fd652be1637d824d0baebb492947",
            "fix_hash": "c351e2292f4bca64ce71b75d73b5cd727d623c6d",
            "description": "This issue has same cause as VALIDATOR-221.\norg.apache.commons.net.ftp.parser.FTPTimestampParserImpl#parseTimestamp throws ParseException with timestampStr = \"Feb 29 11:22\".\n\nFTP Server status:\n\n{code}\n[root@localhost test-commonsnet]# pwd\n/tmp/test-commonsnet\n[root@localhost test-commonsnet]# ls -l\ntotal 0\n-rw-r--r--  1 root root 0 Dec 19  2006 aaa.txt\n-rw-r--r--  1 root root 0 Feb 29 11:22 bbb.txt\n{code}\n\ntest code:\n\n{code}\npublic void testCommonsNetLeapDay() throws Exception {\n    final FTPClient ftp = new FTPClient();\n    ftp.connect(host);\n    ftp.login(user, password);\n    final FTPFile[] listFiles = ftp.listFiles(\"/tmp/test-commonsnet\");\n    for (int i = 0; i < listFiles.length; i++) {\n        System.out.println(\"[\" + i + \"] \" + listFiles[i]);\n    }\n    ftp.disconnect();\n}\n{code}\n\nresults bellow.\n\n{code}\n[0] -rw-r--r--    1 0        0               0 Dec 18  2006 aaa.txt\n[1] null\n{code}\n\nSecond element(bbb.txt) should not be null.\n",
            "commit number version hash": 452,
            "commit number": 339,
            "function that changed": [
                {
                    "function name": "parseTimestamp",
                    "function params": [
                        "timestampStr"
                    ],
                    "file name": "FTPTimestampParserImpl.java",
                    "file old path": "src/main/java/org/apache/commons/net/ftp/parser/FTPTimestampParserImpl.java",
                    "file new path": "src/main/java/org/apache/commons/net/ftp/parser/FTPTimestampParserImpl.java",
                    "full name": "src.main.java.org.apache.commons.net.ftp.parser.FTPTimestampParserImpl.parseTimestamp"
                }
            ],
            "files that changed": [
                "src/main/java/org/apache/commons/net/ftp/parser/FTPTimestampParserImpl.java"
            ]
        },
        {
            "bug index": "281",
            "bug id": "NET-148",
            "hexsha": "be5af473dca0fd652be1637d824d0baebb492947",
            "fix_hash": "52d8d739a6ba7e623ba72855597fc0ba5ba77ad3",
            "description": "In FTP.java's __getReply() method, this do/while loop reads multi-line responses from the server:\n\n            do\n            {\n                line = _controlInput.readLine();\n...\n            }\n            while (!(line.length() >= 4 && line.charAt(3) != '-' &&\n                     Character.isDigit(line.charAt(0))));\n            // This is too strong a condition because of non-conforming ftp\n            // servers like ftp.funet.fi which sent 226 as the last line of a\n            // 426 multi-line reply in response to ls /.  We relax the condition to\n            // test that the line starts with a digit rather than starting with\n            // the code.\n            // line.startsWith(code)));\n        }\n\nNote the comment and the commented-out termination condition.  I think the relevant spec is http://www.ietf.org/rfc/rfc0959.txt  and the section is \"4.2.  FTP REPLIES\".  This is causing problems with the return from the STAT command from Geocities' FTP servers.  Here is an example reply.\n\n211- ftp.us.geocities.com FTP server status: \n     Version wu-2.6.0(48) Tue Jan 2 16:30:15 PST 2007 \n Connected to 144.212.217.85 \n Logged in anonymously \n TYPE: ASCII, FORM: Nonprint; STRUcture: File; transfer MODE: Stream \n No data connection \n 0 data bytes received in 0 files \n 0 data bytes transmitted in 0 files \n0 data bytes total in 0 files \n57 traffic bytes received in 0 transfers \n733 traffic bytes transmitted in 0 transfers \n834 traffic bytes total in 0 transfers \n211  End of status\n\nNote that the line \"0 data bytes total in 0 files\" starts with a digit, but it isn't a reply code.  This prematurely halts reading of lines from the server, and the remaining lines will look like a reply from the next command.",
            "commit number version hash": 452,
            "commit number": 326,
            "function that changed": [
                {
                    "function name": "__strictCheck",
                    "function params": [
                        "line",
                        "code"
                    ],
                    "file name": "FTP.java",
                    "file old path": "src/main/java/org/apache/commons/net/ftp/FTP.java",
                    "file new path": "src/main/java/org/apache/commons/net/ftp/FTP.java",
                    "full name": "src.main.java.org.apache.commons.net.ftp.FTP.__strictCheck"
                }
            ],
            "files that changed": [
                "src/main/java/org/apache/commons/net/ftp/FTP.java"
            ]
        },
        {
            "bug index": "282",
            "bug id": "NET-148",
            "hexsha": "be5af473dca0fd652be1637d824d0baebb492947",
            "fix_hash": "a02430dbd4636baa43cd3d496a94c33c29cbedd4",
            "description": "In FTP.java's __getReply() method, this do/while loop reads multi-line responses from the server:\n\n            do\n            {\n                line = _controlInput.readLine();\n...\n            }\n            while (!(line.length() >= 4 && line.charAt(3) != '-' &&\n                     Character.isDigit(line.charAt(0))));\n            // This is too strong a condition because of non-conforming ftp\n            // servers like ftp.funet.fi which sent 226 as the last line of a\n            // 426 multi-line reply in response to ls /.  We relax the condition to\n            // test that the line starts with a digit rather than starting with\n            // the code.\n            // line.startsWith(code)));\n        }\n\nNote the comment and the commented-out termination condition.  I think the relevant spec is http://www.ietf.org/rfc/rfc0959.txt  and the section is \"4.2.  FTP REPLIES\".  This is causing problems with the return from the STAT command from Geocities' FTP servers.  Here is an example reply.\n\n211- ftp.us.geocities.com FTP server status: \n     Version wu-2.6.0(48) Tue Jan 2 16:30:15 PST 2007 \n Connected to 144.212.217.85 \n Logged in anonymously \n TYPE: ASCII, FORM: Nonprint; STRUcture: File; transfer MODE: Stream \n No data connection \n 0 data bytes received in 0 files \n 0 data bytes transmitted in 0 files \n0 data bytes total in 0 files \n57 traffic bytes received in 0 transfers \n733 traffic bytes transmitted in 0 transfers \n834 traffic bytes total in 0 transfers \n211  End of status\n\nNote that the line \"0 data bytes total in 0 files\" starts with a digit, but it isn't a reply code.  This prematurely halts reading of lines from the server, and the remaining lines will look like a reply from the next command.",
            "commit number version hash": 452,
            "commit number": 319,
            "function that changed": [
                {
                    "function name": "setStrictMultilineParsing",
                    "function params": [
                        "strictMultilineParsing"
                    ],
                    "file name": "FTP.java",
                    "file old path": "src/main/java/org/apache/commons/net/ftp/FTP.java",
                    "file new path": "src/main/java/org/apache/commons/net/ftp/FTP.java",
                    "full name": "src.main.java.org.apache.commons.net.ftp.FTP.setStrictMultilineParsing"
                },
                {
                    "function name": "isStrictMultilineParsing",
                    "function params": [],
                    "file name": "FTP.java",
                    "file old path": "src/main/java/org/apache/commons/net/ftp/FTP.java",
                    "file new path": "src/main/java/org/apache/commons/net/ftp/FTP.java",
                    "full name": "src.main.java.org.apache.commons.net.ftp.FTP.isStrictMultilineParsing"
                },
                {
                    "function name": "__strictCheck",
                    "function params": [
                        "line",
                        "code"
                    ],
                    "file name": "FTP.java",
                    "file old path": "src/main/java/org/apache/commons/net/ftp/FTP.java",
                    "file new path": "src/main/java/org/apache/commons/net/ftp/FTP.java",
                    "full name": "src.main.java.org.apache.commons.net.ftp.FTP.__strictCheck"
                },
                {
                    "function name": "__lenientCheck",
                    "function params": [
                        "line"
                    ],
                    "file name": "FTP.java",
                    "file old path": "src/main/java/org/apache/commons/net/ftp/FTP.java",
                    "file new path": "src/main/java/org/apache/commons/net/ftp/FTP.java",
                    "full name": "src.main.java.org.apache.commons.net.ftp.FTP.__lenientCheck"
                },
                {
                    "function name": "__getReply",
                    "function params": [],
                    "file name": "FTP.java",
                    "file old path": "src/main/java/org/apache/commons/net/ftp/FTP.java",
                    "file new path": "src/main/java/org/apache/commons/net/ftp/FTP.java",
                    "full name": "src.main.java.org.apache.commons.net.ftp.FTP.__getReply"
                },
                {
                    "function name": "retrieveFileStream",
                    "function params": [
                        "remote"
                    ],
                    "file name": "FTPClient.java",
                    "file old path": "src/main/java/org/apache/commons/net/ftp/FTPClient.java",
                    "file new path": "src/main/java/org/apache/commons/net/ftp/FTPClient.java",
                    "full name": "src.main.java.org.apache.commons.net.ftp.FTPClient.retrieveFileStream"
                },
                {
                    "function name": "retrieveFile",
                    "function params": [
                        "remote",
                        "local"
                    ],
                    "file name": "FTPClient.java",
                    "file old path": "src/main/java/org/apache/commons/net/ftp/FTPClient.java",
                    "file new path": "src/main/java/org/apache/commons/net/ftp/FTPClient.java",
                    "full name": "src.main.java.org.apache.commons.net.ftp.FTPClient.retrieveFile"
                },
                {
                    "function name": "FromNetASCIIInputStream",
                    "function params": [
                        "input"
                    ],
                    "file name": "FromNetASCIIInputStream.java",
                    "file old path": "src/main/java/org/apache/commons/net/io/FromNetASCIIInputStream.java",
                    "file new path": "src/main/java/org/apache/commons/net/io/FromNetASCIIInputStream.java",
                    "full name": "src.main.java.org.apache.commons.net.io.FromNetASCIIInputStream.FromNetASCIIInputStream"
                },
                {
                    "function name": "FromNetASCIIInputStream",
                    "function params": [
                        "input",
                        "encoding"
                    ],
                    "file name": "FromNetASCIIInputStream.java",
                    "file old path": "src/main/java/org/apache/commons/net/io/FromNetASCIIInputStream.java",
                    "file new path": "src/main/java/org/apache/commons/net/io/FromNetASCIIInputStream.java",
                    "full name": "src.main.java.org.apache.commons.net.io.FromNetASCIIInputStream.FromNetASCIIInputStream"
                }
            ],
            "files that changed": [
                "src/main/java/org/apache/commons/net/ftp/FTP.java",
                "src/main/java/org/apache/commons/net/ftp/FTPClient.java",
                "src/main/java/org/apache/commons/net/io/FromNetASCIIInputStream.java"
            ]
        },
        {
            "bug index": "283",
            "bug id": "NET-172",
            "hexsha": "be5af473dca0fd652be1637d824d0baebb492947",
            "fix_hash": "ca4c6b694befae0bffbdba330aebedbcd7d01e17",
            "description": "NTP client when using UDP should not bind to port 123 on the local system.  This renders the software unusable for the very common case where you also have an NTP server running on your system.  It should send to port 123 on the server, but the client should not bind to the local port 123.  ",
            "commit number version hash": 452,
            "commit number": 318,
            "function that changed": [
                {
                    "function name": "main",
                    "function params": [
                        "args"
                    ],
                    "file name": "NTPClient.java",
                    "file old path": "src/main/java/examples/ntp/NTPClient.java",
                    "file new path": "src/main/java/examples/ntp/NTPClient.java",
                    "full name": "src.main.java.examples.ntp.NTPClient.main"
                }
            ],
            "files that changed": [
                "src/main/java/examples/ntp/NTPClient.java"
            ]
        },
        {
            "bug index": "284",
            "bug id": "NET-68",
            "hexsha": "be5af473dca0fd652be1637d824d0baebb492947",
            "fix_hash": "7556827f4d25275707a839ae2143a5c4afe169a3",
            "description": "TFTPClient reads all acks just fine except the last-one when sending a file. I\nfigured this out when I tried to use the same TFTPClient-instance for something\nelse (reading a file) after sending a file. This ack was next in the buffer and\nsome exception was thrown (don't remember which anymore). \n\nI fixed this for myself using a flag (lastAckWait). Here is a the result of\ndiff-command:\n\ndiff -u TFTPClient.java.original TFTPClient.java.patched\n--- TFTPClient.java.original    2004-12-28 15:02:37.235997984 +0200\n+++ TFTPClient.java.patched     2004-12-28 15:09:14.516602152 +0200\n@@ -372,6 +372,7 @@\n\n         dataLength = lastBlock = hostPort = bytesRead = 0;\n         block = 0;\n+        boolean lastAckWait = false;\n\n         if (mode == TFTP.ASCII_MODE)\n             input = new ToNetASCIIInputStream(input);\n@@ -455,7 +456,10 @@\n                         if (lastBlock == block)\n                         {\n                             ++block;\n-                            break _receivePacket;\n+                            if (lastAckWait)\n+                              break _sendPacket;\n+                            else\n+                              break _receivePacket;\n                         }\n                         else\n                         {\n@@ -501,9 +505,8 @@\n             data.setData(_sendBuffer, 4, offset - 4);\n             sent = data;\n         }\n-        while (dataLength == 0);\n+        while (dataLength == 0 || lastAckWait);\n\n-        bufferedSend(sent);\n         endBufferedOps();\n     }\n\n\n\nBy the way we have implemented a TFTP server also (heavily unit-tested). I could\ntry to contribute it back if it fits in commons net. There was some talk in the\nweb-pages of doing only client-side stuff for commons-net. \n\n-Perttu",
            "commit number version hash": 452,
            "commit number": 316,
            "function that changed": [
                {
                    "function name": "sendFile",
                    "function params": [
                        "filename",
                        "mode",
                        "input",
                        "host",
                        "port"
                    ],
                    "file name": "TFTPClient.java",
                    "file old path": "src/java/org/apache/commons/net/tftp/TFTPClient.java",
                    "file new path": "src/java/org/apache/commons/net/tftp/TFTPClient.java",
                    "full name": "src.java.org.apache.commons.net.tftp.TFTPClient.sendFile"
                }
            ],
            "files that changed": [
                "src/java/org/apache/commons/net/tftp/TFTPClient.java"
            ]
        },
        {
            "bug index": "285",
            "bug id": "NET-170",
            "hexsha": "be5af473dca0fd652be1637d824d0baebb492947",
            "fix_hash": "eacb4eb812111f8cb8315b291e9b8e8115849270",
            "description": "The regex in UnixFTPEntryParser does not cope with the situation where the file owner name contains spaces. A patch was previously submitted to fix group names with spaces but a similar bug also affects the owner name. As a result, a call to FTPClient.listFiles() returns a FTPFile[] which does not contain entries for affected files.",
            "commit number version hash": 452,
            "commit number": 315,
            "function that changed": [
                {
                    "function name": "testOwnerANdGroupNameWithSpaces",
                    "function params": [],
                    "file name": "UnixFTPEntryParserTest.java",
                    "file old path": "src/test/java/org/apache/commons/net/ftp/parser/UnixFTPEntryParserTest.java",
                    "file new path": "src/test/java/org/apache/commons/net/ftp/parser/UnixFTPEntryParserTest.java",
                    "full name": "src.test.java.org.apache.commons.net.ftp.parser.UnixFTPEntryParserTest.testOwnerANdGroupNameWithSpaces"
                },
                {
                    "function name": "testOwnerNameWithSpaces",
                    "function params": [],
                    "file name": "UnixFTPEntryParserTest.java",
                    "file old path": "src/test/java/org/apache/commons/net/ftp/parser/UnixFTPEntryParserTest.java",
                    "file new path": "src/test/java/org/apache/commons/net/ftp/parser/UnixFTPEntryParserTest.java",
                    "full name": "src.test.java.org.apache.commons.net.ftp.parser.UnixFTPEntryParserTest.testOwnerNameWithSpaces"
                }
            ],
            "files that changed": [
                "src/main/java/org/apache/commons/net/ftp/parser/UnixFTPEntryParser.java",
                "src/test/java/org/apache/commons/net/ftp/parser/UnixFTPEntryParserTest.java"
            ]
        },
        {
            "bug index": "286",
            "bug id": "NET-182",
            "hexsha": "be5af473dca0fd652be1637d824d0baebb492947",
            "fix_hash": "000e726af8464d94e7d02d307dde0e07e176d58c",
            "description": "createFileEntryParser needs to null protect from a null 'key' parameter.",
            "commit number version hash": 452,
            "commit number": 313,
            "function that changed": [
                {
                    "function name": "createFileEntryParser",
                    "function params": [
                        "key"
                    ],
                    "file name": "DefaultFTPFileEntryParserFactory.java",
                    "file old path": "src/main/java/org/apache/commons/net/ftp/parser/DefaultFTPFileEntryParserFactory.java",
                    "file new path": "src/main/java/org/apache/commons/net/ftp/parser/DefaultFTPFileEntryParserFactory.java",
                    "full name": "src.main.java.org.apache.commons.net.ftp.parser.DefaultFTPFileEntryParserFactory.createFileEntryParser"
                }
            ],
            "files that changed": [
                "src/main/java/org/apache/commons/net/ftp/parser/DefaultFTPFileEntryParserFactory.java"
            ]
        },
        {
            "bug index": "287",
            "bug id": "NET-178",
            "hexsha": "be5af473dca0fd652be1637d824d0baebb492947",
            "fix_hash": "d26934447d0959f1cca83ef987f455b60675f711",
            "description": "I'm using sendMessageData() method of SMTPClient class to obtain a Writer object. The mails i need to send contain unicode characters. The Writer which sendMessageData() method returns, uses \"ISO-8859-1\" encoding which does not provide support for all unicode characters. Also the encoding is not configurable i.e. there is no method through which i can set the encoding to something else. This issue has delayed the release of my project. I think this is a very major issue which needs to be addressed as soon as possible. Unicode support should be provided by this API or encoding must be made configurable. Please provide me a workaround for this issue. It's very urgent!",
            "commit number version hash": 452,
            "commit number": 310,
            "function that changed": [
                {
                    "function name": "getReplyStrings",
                    "function params": [],
                    "file name": "SMTP.java",
                    "file old path": "src/main/java/org/apache/commons/net/smtp/SMTP.java",
                    "file new path": "src/main/java/org/apache/commons/net/smtp/SMTP.java",
                    "full name": "src.main.java.org.apache.commons.net.smtp.SMTP.getReplyStrings"
                },
                {
                    "function name": "_connectAction_",
                    "function params": [],
                    "file name": "SMTP.java",
                    "file old path": "src/main/java/org/apache/commons/net/smtp/SMTP.java",
                    "file new path": "src/main/java/org/apache/commons/net/smtp/SMTP.java",
                    "full name": "src.main.java.org.apache.commons.net.smtp.SMTP._connectAction_"
                },
                {
                    "function name": "disconnect",
                    "function params": [],
                    "file name": "SMTP.java",
                    "file old path": "src/main/java/org/apache/commons/net/smtp/SMTP.java",
                    "file new path": "src/main/java/org/apache/commons/net/smtp/SMTP.java",
                    "full name": "src.main.java.org.apache.commons.net.smtp.SMTP.disconnect"
                },
                {
                    "function name": "getReplyString",
                    "function params": [],
                    "file name": "SMTP.java",
                    "file old path": "src/main/java/org/apache/commons/net/smtp/SMTP.java",
                    "file new path": "src/main/java/org/apache/commons/net/smtp/SMTP.java",
                    "full name": "src.main.java.org.apache.commons.net.smtp.SMTP.getReplyString"
                },
                {
                    "function name": "SMTP",
                    "function params": [
                        "encoding"
                    ],
                    "file name": "SMTP.java",
                    "file old path": "src/main/java/org/apache/commons/net/smtp/SMTP.java",
                    "file new path": "src/main/java/org/apache/commons/net/smtp/SMTP.java",
                    "full name": "src.main.java.org.apache.commons.net.smtp.SMTP.SMTP"
                },
                {
                    "function name": "SMTP",
                    "function params": [],
                    "file name": "SMTP.java",
                    "file old path": "src/main/java/org/apache/commons/net/smtp/SMTP.java",
                    "file new path": "src/main/java/org/apache/commons/net/smtp/SMTP.java",
                    "full name": "src.main.java.org.apache.commons.net.smtp.SMTP.SMTP"
                },
                {
                    "function name": "__getReply",
                    "function params": [],
                    "file name": "SMTP.java",
                    "file old path": "src/main/java/org/apache/commons/net/smtp/SMTP.java",
                    "file new path": "src/main/java/org/apache/commons/net/smtp/SMTP.java",
                    "full name": "src.main.java.org.apache.commons.net.smtp.SMTP.__getReply"
                }
            ],
            "files that changed": [
                "src/main/java/org/apache/commons/net/smtp/SMTP.java"
            ]
        },
        {
            "bug index": "288",
            "bug id": "NET-24",
            "hexsha": "be5af473dca0fd652be1637d824d0baebb492947",
            "fix_hash": "5d1dc2b9a4bb19c5fbc38c271960be147ef22016",
            "description": "When calling the connect method on org.apache.commons.net.bsd.RLoginClient,\ntimeout can take 10 minutes +.\n\nI have found that this is down to the RCommandClient connect method.\n\nThe exception to catch should be a BindException.  The logic here is that so\nlong as we have got a valid local port and address (no BindException) then we\nshouldn't bother trying all of the other local ports.  If this is adopted, then\na connect exception is thrown from the connect method indicating that the remote\nserver is not present or responding.\n\nPlease see snippet from the corrected connect method below.\n\n        for (localPort = MAX_CLIENT_PORT; localPort >= MIN_CLIENT_PORT; --localPort)\n        {\n            try\n            {\n                _socket_ =\n                    _socketFactory_.createSocket(host, port, localAddr, localPort);\n            }\n//            catch (SocketException e)\n            catch (BindException e)\n            {\n                continue;\n            }\n            break;\n        }",
            "commit number version hash": 452,
            "commit number": 309,
            "function that changed": [
                {
                    "function name": "connect",
                    "function params": [
                        "host",
                        "port",
                        "localAddr"
                    ],
                    "file name": "RCommandClient.java",
                    "file old path": "src/main/java/org/apache/commons/net/bsd/RCommandClient.java",
                    "file new path": "src/main/java/org/apache/commons/net/bsd/RCommandClient.java",
                    "full name": "src.main.java.org.apache.commons.net.bsd.RCommandClient.connect"
                }
            ],
            "files that changed": [
                "src/main/java/org/apache/commons/net/bsd/RCommandClient.java"
            ]
        },
        {
            "bug index": "291",
            "bug id": "NET-68",
            "hexsha": "be5af473dca0fd652be1637d824d0baebb492947",
            "fix_hash": "4676f817b13db90735df8fb9e35304a7a75722f6",
            "description": "TFTPClient reads all acks just fine except the last-one when sending a file. I\nfigured this out when I tried to use the same TFTPClient-instance for something\nelse (reading a file) after sending a file. This ack was next in the buffer and\nsome exception was thrown (don't remember which anymore). \n\nI fixed this for myself using a flag (lastAckWait). Here is a the result of\ndiff-command:\n\ndiff -u TFTPClient.java.original TFTPClient.java.patched\n--- TFTPClient.java.original    2004-12-28 15:02:37.235997984 +0200\n+++ TFTPClient.java.patched     2004-12-28 15:09:14.516602152 +0200\n@@ -372,6 +372,7 @@\n\n         dataLength = lastBlock = hostPort = bytesRead = 0;\n         block = 0;\n+        boolean lastAckWait = false;\n\n         if (mode == TFTP.ASCII_MODE)\n             input = new ToNetASCIIInputStream(input);\n@@ -455,7 +456,10 @@\n                         if (lastBlock == block)\n                         {\n                             ++block;\n-                            break _receivePacket;\n+                            if (lastAckWait)\n+                              break _sendPacket;\n+                            else\n+                              break _receivePacket;\n                         }\n                         else\n                         {\n@@ -501,9 +505,8 @@\n             data.setData(_sendBuffer, 4, offset - 4);\n             sent = data;\n         }\n-        while (dataLength == 0);\n+        while (dataLength == 0 || lastAckWait);\n\n-        bufferedSend(sent);\n         endBufferedOps();\n     }\n\n\n\nBy the way we have implemented a TFTP server also (heavily unit-tested). I could\ntry to contribute it back if it fits in commons net. There was some talk in the\nweb-pages of doing only client-side stuff for commons-net. \n\n-Perttu",
            "commit number version hash": 452,
            "commit number": 281,
            "function that changed": [
                {
                    "function name": "sendFile",
                    "function params": [
                        "filename",
                        "mode",
                        "input",
                        "host",
                        "port"
                    ],
                    "file name": "TFTPClient.java",
                    "file old path": "src/main/java/org/apache/commons/net/tftp/TFTPClient.java",
                    "file new path": "src/main/java/org/apache/commons/net/tftp/TFTPClient.java",
                    "full name": "src.main.java.org.apache.commons.net.tftp.TFTPClient.sendFile"
                }
            ],
            "files that changed": [
                "src/main/java/org/apache/commons/net/tftp/TFTPClient.java"
            ]
        },
        {
            "bug index": "292",
            "bug id": "NET-36",
            "hexsha": "be5af473dca0fd652be1637d824d0baebb492947",
            "fix_hash": "eb945ea4b8810c4a32f622b1bea7781079a3ab37",
            "description": "I've included 3 patch files for changes I've made to the FTP andFTPClient\nclasses in the commons-net package.\n\nThe first patch is for the FTP class making it extend SocketClientinstead of\nTelnetClient. I noticed that the behavior of theTelnetClient's input stream\nreader thread was effectively ignoring thesocket's SOTimeout causing reads to\nhang forever if the server decidednot to respond to a client request at all.\nThis should also answer oneof the goals from the TODO list:\n\n\"Divorce FTPClient from TelnetClient, getting rid of the TelnetClientthreads\nwhich cause problems on some platforms (e.g., MacOS).\"\n\nThe second patch is for an FTPTest unit test. I've covered most of thebasic\nmethods (connect(), disconnect(), sendCommand(), getReplyCode(),etc). Ignored\nfor now are the convenience methods since they all callsendCommand() underneath.\nPart of the FTPTest class is a DummyFTPServerinner class which is used to\ncommunicate to the test FTP class - don'tknow if that would be useful elsewhere\n(maybe part of FTPClient unittests), so you might consider making it a utility\nclass for other unittests.\n\nFinally I've attached a patch for minor changes to FTPClient:\n - changed __storeFile() from private to protected so that it can beused by\nclasses that extend FTPClient\n\n - added __storeFile(String, String) method - so that the commands itaccepts are\nnot limited to what's found in FTPCommand. Note: the__storeFile(int, String)\nmethod now calls the __storeFile(String,String) method.\n\n - added _openDataConnection_(String, String) method - so that thecommands it\naccepts are not limited to what's found in FTPCommand. Note:the\n_openDataConnection_(int, String) method now calls\nthe_openDataConnection_(String, String) method.\n\nHopefully you'll find the changes agreeable and will incorporate theminto the\ncode base.",
            "commit number version hash": 452,
            "commit number": 262,
            "function that changed": [
                {
                    "function name": "main",
                    "function params": [
                        "args"
                    ],
                    "file name": "FTPSExample.java",
                    "file old path": "src/main/java/examples/FTPSExample.java",
                    "file new path": "src/main/java/examples/FTPSExample.java",
                    "full name": "src.main.java.examples.FTPSExample.main"
                },
                {
                    "function name": "FTP",
                    "function params": [],
                    "file name": "FTP.java",
                    "file old path": "src/main/java/org/apache/commons/net/ftp/FTP.java",
                    "file new path": "src/main/java/org/apache/commons/net/ftp/FTP.java",
                    "full name": "src.main.java.org.apache.commons.net.ftp.FTP.FTP"
                },
                {
                    "function name": "getReplyString",
                    "function params": [],
                    "file name": "FTP.java",
                    "file old path": "src/main/java/org/apache/commons/net/ftp/FTP.java",
                    "file new path": "src/main/java/org/apache/commons/net/ftp/FTP.java",
                    "full name": "src.main.java.org.apache.commons.net.ftp.FTP.getReplyString"
                },
                {
                    "function name": "__getReply",
                    "function params": [],
                    "file name": "FTP.java",
                    "file old path": "src/main/java/org/apache/commons/net/ftp/FTP.java",
                    "file new path": "src/main/java/org/apache/commons/net/ftp/FTP.java",
                    "full name": "src.main.java.org.apache.commons.net.ftp.FTP.__getReply"
                },
                {
                    "function name": "_connectAction_",
                    "function params": [],
                    "file name": "FTP.java",
                    "file old path": "src/main/java/org/apache/commons/net/ftp/FTP.java",
                    "file new path": "src/main/java/org/apache/commons/net/ftp/FTP.java",
                    "full name": "src.main.java.org.apache.commons.net.ftp.FTP._connectAction_"
                }
            ],
            "files that changed": [
                "src/main/java/examples/FTPSExample.java",
                "src/main/java/org/apache/commons/net/ftp/FTP.java",
                "src/main/java/org/apache/commons/net/ftp/FTPSClient.java"
            ]
        },
        {
            "bug index": "293",
            "bug id": "NET-28",
            "hexsha": "be5af473dca0fd652be1637d824d0baebb492947",
            "fix_hash": "2f6cce0a9de948b6b59c0dab22ee4b58c809fe6c",
            "description": "Hi, All.\n\nI have improved and tested some functions of FTPS.\n\n  DO NOT REPLY [COM-2710]  - [net] How to implent FTPS\n&#12288;http://marc.theaimsgroup.com/?t=113763609300003&r=1&w=2\n\nI attach a patch (src.zip).\n\nChanges:\n - add the implicit mode\n - add the CCC command handling\n - improve a behavior of the PROT command. (C and P)\n\nSources:\n FTPSClient.java   [modified]\n FTPSCommand.java  [new]\n FTPSReply.java    [new]\n\n\nBest Regards.",
            "commit number version hash": 452,
            "commit number": 259,
            "function that changed": [
                {
                    "function name": "execAUTH",
                    "function params": [],
                    "file name": "FTPSClient.java",
                    "file old path": "src/main/java/org/apache/commons/net/ftp/FTPSClient.java",
                    "file new path": "src/main/java/org/apache/commons/net/ftp/FTPSClient.java",
                    "full name": "src.main.java.org.apache.commons.net.ftp.FTPSClient.execAUTH"
                },
                {
                    "function name": "execPROT",
                    "function params": [
                        "prot"
                    ],
                    "file name": "FTPSClient.java",
                    "file old path": "src/main/java/org/apache/commons/net/ftp/FTPSClient.java",
                    "file new path": "src/main/java/org/apache/commons/net/ftp/FTPSClient.java",
                    "full name": "src.main.java.org.apache.commons.net.ftp.FTPSClient.execPROT"
                },
                {
                    "function name": "getUseClientMode",
                    "function params": [],
                    "file name": "FTPSClient.java",
                    "file old path": "src/main/java/org/apache/commons/net/ftp/FTPSClient.java",
                    "file new path": "src/main/java/org/apache/commons/net/ftp/FTPSClient.java",
                    "full name": "src.main.java.org.apache.commons.net.ftp.FTPSClient.getUseClientMode"
                },
                {
                    "function name": "setNeedClientAuth",
                    "function params": [
                        "isNeedClientAuth"
                    ],
                    "file name": "FTPSClient.java",
                    "file old path": "src/main/java/org/apache/commons/net/ftp/FTPSClient.java",
                    "file new path": "src/main/java/org/apache/commons/net/ftp/FTPSClient.java",
                    "full name": "src.main.java.org.apache.commons.net.ftp.FTPSClient.setNeedClientAuth"
                },
                {
                    "function name": "FTPSClient",
                    "function params": [
                        "keyStoreName",
                        "sslContext",
                        "password",
                        "pbsz",
                        "prot"
                    ],
                    "file name": "FTPSClient.java",
                    "file old path": "src/main/java/org/apache/commons/net/ftp/FTPSClient.java",
                    "file new path": "src/main/java/org/apache/commons/net/ftp/FTPSClient.java",
                    "full name": "src.main.java.org.apache.commons.net.ftp.FTPSClient.FTPSClient"
                },
                {
                    "function name": "connect",
                    "function params": [
                        "address",
                        "port",
                        "localAddress",
                        "localPort"
                    ],
                    "file name": "FTPSClient.java",
                    "file old path": "src/main/java/org/apache/commons/net/ftp/FTPSClient.java",
                    "file new path": "src/main/java/org/apache/commons/net/ftp/FTPSClient.java",
                    "full name": "src.main.java.org.apache.commons.net.ftp.FTPSClient.connect"
                },
                {
                    "function name": "execPBSZ",
                    "function params": [
                        "pbsz"
                    ],
                    "file name": "FTPSClient.java",
                    "file old path": "src/main/java/org/apache/commons/net/ftp/FTPSClient.java",
                    "file new path": "src/main/java/org/apache/commons/net/ftp/FTPSClient.java",
                    "full name": "src.main.java.org.apache.commons.net.ftp.FTPSClient.execPBSZ"
                },
                {
                    "function name": "createTrustManager",
                    "function params": [
                        "ks"
                    ],
                    "file name": "FTPSClient.java",
                    "file old path": "src/main/java/org/apache/commons/net/ftp/FTPSClient.java",
                    "file new path": "src/main/java/org/apache/commons/net/ftp/FTPSClient.java",
                    "full name": "src.main.java.org.apache.commons.net.ftp.FTPSClient.createTrustManager"
                },
                {
                    "function name": "sendCommand",
                    "function params": [
                        "command",
                        "args"
                    ],
                    "file name": "FTPSClient.java",
                    "file old path": "src/main/java/org/apache/commons/net/ftp/FTPSClient.java",
                    "file new path": "src/main/java/org/apache/commons/net/ftp/FTPSClient.java",
                    "full name": "src.main.java.org.apache.commons.net.ftp.FTPSClient.sendCommand"
                },
                {
                    "function name": "getEnabledCipherSuites",
                    "function params": [],
                    "file name": "FTPSClient.java",
                    "file old path": "src/main/java/org/apache/commons/net/ftp/FTPSClient.java",
                    "file new path": "src/main/java/org/apache/commons/net/ftp/FTPSClient.java",
                    "full name": "src.main.java.org.apache.commons.net.ftp.FTPSClient.getEnabledCipherSuites"
                },
                {
                    "function name": "_connectAction_",
                    "function params": [],
                    "file name": "FTPSClient.java",
                    "file old path": "src/main/java/org/apache/commons/net/ftp/FTPSClient.java",
                    "file new path": "src/main/java/org/apache/commons/net/ftp/FTPSClient.java",
                    "full name": "src.main.java.org.apache.commons.net.ftp.FTPSClient._connectAction_"
                },
                {
                    "function name": "getNeedClientAuth",
                    "function params": [],
                    "file name": "FTPSClient.java",
                    "file old path": "src/main/java/org/apache/commons/net/ftp/FTPSClient.java",
                    "file new path": "src/main/java/org/apache/commons/net/ftp/FTPSClient.java",
                    "full name": "src.main.java.org.apache.commons.net.ftp.FTPSClient.getNeedClientAuth"
                },
                {
                    "function name": "setEnabledSessionCreation",
                    "function params": [
                        "isCreation"
                    ],
                    "file name": "FTPSClient.java",
                    "file old path": "src/main/java/org/apache/commons/net/ftp/FTPSClient.java",
                    "file new path": "src/main/java/org/apache/commons/net/ftp/FTPSClient.java",
                    "full name": "src.main.java.org.apache.commons.net.ftp.FTPSClient.setEnabledSessionCreation"
                },
                {
                    "function name": "setEnabledCipherSuites",
                    "function params": [
                        "suites"
                    ],
                    "file name": "FTPSClient.java",
                    "file old path": "src/main/java/org/apache/commons/net/ftp/FTPSClient.java",
                    "file new path": "src/main/java/org/apache/commons/net/ftp/FTPSClient.java",
                    "full name": "src.main.java.org.apache.commons.net.ftp.FTPSClient.setEnabledCipherSuites"
                },
                {
                    "function name": "setUseClientMode",
                    "function params": [
                        "isClientMode"
                    ],
                    "file name": "FTPSClient.java",
                    "file old path": "src/main/java/org/apache/commons/net/ftp/FTPSClient.java",
                    "file new path": "src/main/java/org/apache/commons/net/ftp/FTPSClient.java",
                    "full name": "src.main.java.org.apache.commons.net.ftp.FTPSClient.setUseClientMode"
                },
                {
                    "function name": "getWantClientAuth",
                    "function params": [],
                    "file name": "FTPSClient.java",
                    "file old path": "src/main/java/org/apache/commons/net/ftp/FTPSClient.java",
                    "file new path": "src/main/java/org/apache/commons/net/ftp/FTPSClient.java",
                    "full name": "src.main.java.org.apache.commons.net.ftp.FTPSClient.getWantClientAuth"
                },
                {
                    "function name": "createKeyManager",
                    "function params": [
                        "ks",
                        "storePass"
                    ],
                    "file name": "FTPSClient.java",
                    "file old path": "src/main/java/org/apache/commons/net/ftp/FTPSClient.java",
                    "file new path": "src/main/java/org/apache/commons/net/ftp/FTPSClient.java",
                    "full name": "src.main.java.org.apache.commons.net.ftp.FTPSClient.createKeyManager"
                },
                {
                    "function name": "connect",
                    "function params": [
                        "address",
                        "port"
                    ],
                    "file name": "FTPSClient.java",
                    "file old path": "src/main/java/org/apache/commons/net/ftp/FTPSClient.java",
                    "file new path": "src/main/java/org/apache/commons/net/ftp/FTPSClient.java",
                    "full name": "src.main.java.org.apache.commons.net.ftp.FTPSClient.connect"
                },
                {
                    "function name": "getEnabledProtocols",
                    "function params": [],
                    "file name": "FTPSClient.java",
                    "file old path": "src/main/java/org/apache/commons/net/ftp/FTPSClient.java",
                    "file new path": "src/main/java/org/apache/commons/net/ftp/FTPSClient.java",
                    "full name": "src.main.java.org.apache.commons.net.ftp.FTPSClient.getEnabledProtocols"
                },
                {
                    "function name": "connect",
                    "function params": [
                        "address",
                        "port",
                        "localAddress",
                        "localPort"
                    ],
                    "file name": "FTPSClient.java",
                    "file old path": "src/main/java/org/apache/commons/net/ftp/FTPSClient.java",
                    "file new path": "src/main/java/org/apache/commons/net/ftp/FTPSClient.java",
                    "full name": "src.main.java.org.apache.commons.net.ftp.FTPSClient.connect"
                },
                {
                    "function name": "getAuthValue",
                    "function params": [],
                    "file name": "FTPSClient.java",
                    "file old path": "src/main/java/org/apache/commons/net/ftp/FTPSClient.java",
                    "file new path": "src/main/java/org/apache/commons/net/ftp/FTPSClient.java",
                    "full name": "src.main.java.org.apache.commons.net.ftp.FTPSClient.getAuthValue"
                },
                {
                    "function name": "getEnableSeeionCreation",
                    "function params": [],
                    "file name": "FTPSClient.java",
                    "file old path": "src/main/java/org/apache/commons/net/ftp/FTPSClient.java",
                    "file new path": "src/main/java/org/apache/commons/net/ftp/FTPSClient.java",
                    "full name": "src.main.java.org.apache.commons.net.ftp.FTPSClient.getEnableSeeionCreation"
                },
                {
                    "function name": "checkPROTValue",
                    "function params": [
                        "prot"
                    ],
                    "file name": "FTPSClient.java",
                    "file old path": "src/main/java/org/apache/commons/net/ftp/FTPSClient.java",
                    "file new path": "src/main/java/org/apache/commons/net/ftp/FTPSClient.java",
                    "full name": "src.main.java.org.apache.commons.net.ftp.FTPSClient.checkPROTValue"
                },
                {
                    "function name": "FTPSClient",
                    "function params": [
                        "isImplicit"
                    ],
                    "file name": "FTPSClient.java",
                    "file old path": "src/main/java/org/apache/commons/net/ftp/FTPSClient.java",
                    "file new path": "src/main/java/org/apache/commons/net/ftp/FTPSClient.java",
                    "full name": "src.main.java.org.apache.commons.net.ftp.FTPSClient.FTPSClient"
                },
                {
                    "function name": "sslNegotiation",
                    "function params": [],
                    "file name": "FTPSClient.java",
                    "file old path": "src/main/java/org/apache/commons/net/ftp/FTPSClient.java",
                    "file new path": "src/main/java/org/apache/commons/net/ftp/FTPSClient.java",
                    "full name": "src.main.java.org.apache.commons.net.ftp.FTPSClient.sslNegotiation"
                },
                {
                    "function name": "setAuthValue",
                    "function params": [
                        "auth"
                    ],
                    "file name": "FTPSClient.java",
                    "file old path": "src/main/java/org/apache/commons/net/ftp/FTPSClient.java",
                    "file new path": "src/main/java/org/apache/commons/net/ftp/FTPSClient.java",
                    "full name": "src.main.java.org.apache.commons.net.ftp.FTPSClient.setAuthValue"
                },
                {
                    "function name": "connect",
                    "function params": [
                        "address",
                        "port"
                    ],
                    "file name": "FTPSClient.java",
                    "file old path": "src/main/java/org/apache/commons/net/ftp/FTPSClient.java",
                    "file new path": "src/main/java/org/apache/commons/net/ftp/FTPSClient.java",
                    "full name": "src.main.java.org.apache.commons.net.ftp.FTPSClient.connect"
                },
                {
                    "function name": "FTPSClient",
                    "function params": [
                        "protocol"
                    ],
                    "file name": "FTPSClient.java",
                    "file old path": "src/main/java/org/apache/commons/net/ftp/FTPSClient.java",
                    "file new path": "src/main/java/org/apache/commons/net/ftp/FTPSClient.java",
                    "full name": "src.main.java.org.apache.commons.net.ftp.FTPSClient.FTPSClient"
                },
                {
                    "function name": "FTPSClient",
                    "function params": [
                        "protocol",
                        "isImplicit"
                    ],
                    "file name": "FTPSClient.java",
                    "file old path": "src/main/java/org/apache/commons/net/ftp/FTPSClient.java",
                    "file new path": "src/main/java/org/apache/commons/net/ftp/FTPSClient.java",
                    "full name": "src.main.java.org.apache.commons.net.ftp.FTPSClient.FTPSClient"
                },
                {
                    "function name": "setEnabledProtocols",
                    "function params": [
                        "protocols"
                    ],
                    "file name": "FTPSClient.java",
                    "file old path": "src/main/java/org/apache/commons/net/ftp/FTPSClient.java",
                    "file new path": "src/main/java/org/apache/commons/net/ftp/FTPSClient.java",
                    "full name": "src.main.java.org.apache.commons.net.ftp.FTPSClient.setEnabledProtocols"
                },
                {
                    "function name": "_openDataConnection_",
                    "function params": [
                        "command",
                        "arg"
                    ],
                    "file name": "FTPSClient.java",
                    "file old path": "src/main/java/org/apache/commons/net/ftp/FTPSClient.java",
                    "file new path": "src/main/java/org/apache/commons/net/ftp/FTPSClient.java",
                    "full name": "src.main.java.org.apache.commons.net.ftp.FTPSClient._openDataConnection_"
                },
                {
                    "function name": "setWantClientAuth",
                    "function params": [
                        "isWantClientAuth"
                    ],
                    "file name": "FTPSClient.java",
                    "file old path": "src/main/java/org/apache/commons/net/ftp/FTPSClient.java",
                    "file new path": "src/main/java/org/apache/commons/net/ftp/FTPSClient.java",
                    "full name": "src.main.java.org.apache.commons.net.ftp.FTPSClient.setWantClientAuth"
                },
                {
                    "function name": "FTPSClient",
                    "function params": [],
                    "file name": "FTPSClient.java",
                    "file old path": "src/main/java/org/apache/commons/net/ftp/FTPSClient.java",
                    "file new path": "src/main/java/org/apache/commons/net/ftp/FTPSClient.java",
                    "full name": "src.main.java.org.apache.commons.net.ftp.FTPSClient.FTPSClient"
                },
                {
                    "function name": "createTrustManager",
                    "function params": [
                        "ks"
                    ],
                    "file name": "FTPSClient.java",
                    "file old path": "src/main/java/org/apache/commons/net/ftp/FTPSClient.java",
                    "file new path": "src/main/java/org/apache/commons/net/ftp/FTPSClient.java",
                    "full name": "src.main.java.org.apache.commons.net.ftp.FTPSClient.createTrustManager"
                },
                {
                    "function name": "getCommand",
                    "function params": [
                        "command"
                    ],
                    "file name": "FTPSCommand.java",
                    "file old path": null,
                    "file new path": "src/main/java/org/apache/commons/net/ftp/FTPSCommand.java",
                    "full name": "src.main.java.org.apache.commons.net.ftp.FTPSCommand.getCommand"
                },
                {
                    "function name": "isPositiveIntermediate",
                    "function params": [
                        "reply"
                    ],
                    "file name": "FTPSReply.java",
                    "file old path": null,
                    "file new path": "src/main/java/org/apache/commons/net/ftp/FTPSReply.java",
                    "full name": "src.main.java.org.apache.commons.net.ftp.FTPSReply.isPositiveIntermediate"
                },
                {
                    "function name": "isNegativeTransient",
                    "function params": [
                        "reply"
                    ],
                    "file name": "FTPSReply.java",
                    "file old path": null,
                    "file new path": "src/main/java/org/apache/commons/net/ftp/FTPSReply.java",
                    "full name": "src.main.java.org.apache.commons.net.ftp.FTPSReply.isNegativeTransient"
                },
                {
                    "function name": "isPositivePreliminary",
                    "function params": [
                        "reply"
                    ],
                    "file name": "FTPSReply.java",
                    "file old path": null,
                    "file new path": "src/main/java/org/apache/commons/net/ftp/FTPSReply.java",
                    "full name": "src.main.java.org.apache.commons.net.ftp.FTPSReply.isPositivePreliminary"
                },
                {
                    "function name": "isNegativePermanent",
                    "function params": [
                        "reply"
                    ],
                    "file name": "FTPSReply.java",
                    "file old path": null,
                    "file new path": "src/main/java/org/apache/commons/net/ftp/FTPSReply.java",
                    "full name": "src.main.java.org.apache.commons.net.ftp.FTPSReply.isNegativePermanent"
                },
                {
                    "function name": "isPositiveCompletion",
                    "function params": [
                        "reply"
                    ],
                    "file name": "FTPSReply.java",
                    "file old path": null,
                    "file new path": "src/main/java/org/apache/commons/net/ftp/FTPSReply.java",
                    "full name": "src.main.java.org.apache.commons.net.ftp.FTPSReply.isPositiveCompletion"
                },
                {
                    "function name": "createSocket",
                    "function params": [
                        "address",
                        "port",
                        "localAddress",
                        "localPort"
                    ],
                    "file name": "FTPSSocketFactory.java",
                    "file old path": "src/main/java/org/apache/commons/net/ftp/FTPSSocketFactory.java",
                    "file new path": "src/main/java/org/apache/commons/net/ftp/FTPSSocketFactory.java",
                    "full name": "src.main.java.org.apache.commons.net.ftp.FTPSSocketFactory.createSocket"
                },
                {
                    "function name": "createServerSocket",
                    "function params": [
                        "port",
                        "backlog",
                        "ifAddress"
                    ],
                    "file name": "FTPSSocketFactory.java",
                    "file old path": "src/main/java/org/apache/commons/net/ftp/FTPSSocketFactory.java",
                    "file new path": "src/main/java/org/apache/commons/net/ftp/FTPSSocketFactory.java",
                    "full name": "src.main.java.org.apache.commons.net.ftp.FTPSSocketFactory.createServerSocket"
                },
                {
                    "function name": "init",
                    "function params": [
                        "socket"
                    ],
                    "file name": "FTPSSocketFactory.java",
                    "file old path": "src/main/java/org/apache/commons/net/ftp/FTPSSocketFactory.java",
                    "file new path": "src/main/java/org/apache/commons/net/ftp/FTPSSocketFactory.java",
                    "full name": "src.main.java.org.apache.commons.net.ftp.FTPSSocketFactory.init"
                },
                {
                    "function name": "createSocket",
                    "function params": [
                        "address",
                        "port"
                    ],
                    "file name": "FTPSSocketFactory.java",
                    "file old path": "src/main/java/org/apache/commons/net/ftp/FTPSSocketFactory.java",
                    "file new path": "src/main/java/org/apache/commons/net/ftp/FTPSSocketFactory.java",
                    "full name": "src.main.java.org.apache.commons.net.ftp.FTPSSocketFactory.createSocket"
                },
                {
                    "function name": "createServerSocket",
                    "function params": [
                        "port"
                    ],
                    "file name": "FTPSSocketFactory.java",
                    "file old path": "src/main/java/org/apache/commons/net/ftp/FTPSSocketFactory.java",
                    "file new path": "src/main/java/org/apache/commons/net/ftp/FTPSSocketFactory.java",
                    "full name": "src.main.java.org.apache.commons.net.ftp.FTPSSocketFactory.createServerSocket"
                },
                {
                    "function name": "init",
                    "function params": [
                        "socket"
                    ],
                    "file name": "FTPSSocketFactory.java",
                    "file old path": "src/main/java/org/apache/commons/net/ftp/FTPSSocketFactory.java",
                    "file new path": "src/main/java/org/apache/commons/net/ftp/FTPSSocketFactory.java",
                    "full name": "src.main.java.org.apache.commons.net.ftp.FTPSSocketFactory.init"
                },
                {
                    "function name": "createServerSocket",
                    "function params": [
                        "port",
                        "backlog"
                    ],
                    "file name": "FTPSSocketFactory.java",
                    "file old path": "src/main/java/org/apache/commons/net/ftp/FTPSSocketFactory.java",
                    "file new path": "src/main/java/org/apache/commons/net/ftp/FTPSSocketFactory.java",
                    "full name": "src.main.java.org.apache.commons.net.ftp.FTPSSocketFactory.createServerSocket"
                },
                {
                    "function name": "createSocket",
                    "function params": [
                        "address",
                        "port"
                    ],
                    "file name": "FTPSSocketFactory.java",
                    "file old path": "src/main/java/org/apache/commons/net/ftp/FTPSSocketFactory.java",
                    "file new path": "src/main/java/org/apache/commons/net/ftp/FTPSSocketFactory.java",
                    "full name": "src.main.java.org.apache.commons.net.ftp.FTPSSocketFactory.createSocket"
                },
                {
                    "function name": "FTPSSocketFactory",
                    "function params": [
                        "context"
                    ],
                    "file name": "FTPSSocketFactory.java",
                    "file old path": "src/main/java/org/apache/commons/net/ftp/FTPSSocketFactory.java",
                    "file new path": "src/main/java/org/apache/commons/net/ftp/FTPSSocketFactory.java",
                    "full name": "src.main.java.org.apache.commons.net.ftp.FTPSSocketFactory.FTPSSocketFactory"
                },
                {
                    "function name": "createSocket",
                    "function params": [
                        "address",
                        "port",
                        "localAddress",
                        "localPort"
                    ],
                    "file name": "FTPSSocketFactory.java",
                    "file old path": "src/main/java/org/apache/commons/net/ftp/FTPSSocketFactory.java",
                    "file new path": "src/main/java/org/apache/commons/net/ftp/FTPSSocketFactory.java",
                    "full name": "src.main.java.org.apache.commons.net.ftp.FTPSSocketFactory.createSocket"
                }
            ],
            "files that changed": [
                "src/main/java/org/apache/commons/net/ftp/FTPSClient.java",
                "src/main/java/org/apache/commons/net/ftp/FTPSSocketFactory.java"
            ]
        }
    ]
}