{
    "bugs to commit": [
        {
            "bug index": "1",
            "bug id": "CODEC-305",
            "hexsha": "e57b88ed485b54418b19358328095cd14ea1e742",
            "fix_hash": "7ccbc3d0c39aaf49ff70f19d85f173f98550d0fb",
            "description": "If the read() method of the input stream which is wrapped by a Base16InputStream returns the following three arrays of data it will skip the last character of the second array:\r\n * array with an odd length (e.g. \"010\")\r\n * array with an even length (e.g \"2030\")\r\n * array with an odd length (e.g. \"405\")\r\n\r\nThe above data should result in the following bytes [1, 2, 3, 4, 5], however\r\n * in lenient mode it reads [1, 2, 3, 64]\r\n * in strict mode it throws an IllegalArgumentException\r\n\r\nI have encountered this issue when reading from an java 11 http input stream. In order to test this easier I have created the following class to reproduce the issue:\r\n{code:java}\r\npublic class TestInputStream extends InputStream {\r\n\r\n    public static void main(String[] args) throws IOException {\r\n        final Base16InputStream stream = new Base16InputStream(\r\n                new TestInputStream(),\r\n                false,\r\n                true,\r\n                CodecPolicy.STRICT\r\n        );\r\n        int value;\r\n        while ((value = stream.read()) != -1) {\r\n            System.out.println((byte) value);\r\n        }\r\n    }\r\n\r\n    private int readCount = 0;\r\n\r\n    @Override\r\n    public int read() {\r\n        return 0;\r\n    }\r\n\r\n    @Override\r\n    public int read(byte[] output) {\r\n        switch (readCount++) {\r\n            case 0: return writeBytes(output, \"010\");\r\n            case 1: return writeBytes(output, \"2030\");\r\n            case 2: return writeBytes(output, \"405\");\r\n            default: return -1;\r\n        }\r\n    }\r\n\r\n    private static int writeBytes(byte[] output, String str) {\r\n        final byte[] data = str.getBytes();\r\n        System.arraycopy(data, 0, output, 0, data.length);\r\n        return data.length;\r\n    }\r\n    \r\n} {code}",
            "commit number version hash": 1328,
            "commit number": 1355,
            "function that changed": [
                {
                    "function name": "decode",
                    "function params": [
                        "data",
                        "offset",
                        "length",
                        "context"
                    ],
                    "file name": "Base16.java",
                    "file old path": "src/main/java/org/apache/commons/codec/binary/Base16.java",
                    "file new path": "src/main/java/org/apache/commons/codec/binary/Base16.java",
                    "full name": "src.main.java.org.apache.commons.codec.binary.Base16.decode"
                },
                {
                    "function name": "testOddEvenDecoding",
                    "function params": [],
                    "file name": "Base16Test.java",
                    "file old path": "src/test/java/org/apache/commons/codec/binary/Base16Test.java",
                    "file new path": "src/test/java/org/apache/commons/codec/binary/Base16Test.java",
                    "full name": "src.test.java.org.apache.commons.codec.binary.Base16Test.testOddEvenDecoding"
                }
            ],
            "files that changed": [
                "src/main/java/org/apache/commons/codec/binary/Base16.java",
                "src/test/java/org/apache/commons/codec/binary/Base16Test.java"
            ]
        },
        {
            "bug index": "2",
            "bug id": "CODEC-5",
            "hexsha": "71e7260746a902d1070a190fd78bd560464860b9",
            "fix_hash": "2b32ca08e1097c92d3ee2a1501c43fd8f2b4130d",
            "description": "List:       jakarta-commons-dev\nSubject:    [codec] Proposal for improvement Hex codec\nFrom:       Tom van den Berge <tom.vandenberge () bibit ! com>\nDate:       2004-04-15 8:49:31\nMessage-ID: <407E4C9B.5070701 () bibit ! com>\n[Download message RAW]\n\nI'm using the Hex codec to decode e.g. the string \"qq\". What surprises \nme is that this obviously illegal hex value is decoded into one byte \nvalue 255. In fact all non-hex 'character-pairs' are decoded to value 255.\n\nWouldn't it be better to throw a DecoderException if illegal characters \nare passed in?\n\nThe current implementation decodes values that is is actually not able \nto decode, which is wrong.\n\nCheers,\nTom",
            "commit number version hash": 173,
            "commit number": 1340,
            "function that changed": [
                {
                    "function name": "testUtf16Le",
                    "function params": [],
                    "file name": "CharEncodingTest.java",
                    "file old path": "src/test/java/org/apache/commons/codec/CharEncodingTest.java",
                    "file new path": "src/test/java/org/apache/commons/codec/CharEncodingTest.java",
                    "full name": "src.test.java.org.apache.commons.codec.CharEncodingTest.testUtf16Le"
                },
                {
                    "function name": "testIso8859_1",
                    "function params": [],
                    "file name": "CharEncodingTest.java",
                    "file old path": "src/test/java/org/apache/commons/codec/CharEncodingTest.java",
                    "file new path": "src/test/java/org/apache/commons/codec/CharEncodingTest.java",
                    "full name": "src.test.java.org.apache.commons.codec.CharEncodingTest.testIso8859_1"
                },
                {
                    "function name": "testUtf8",
                    "function params": [],
                    "file name": "CharEncodingTest.java",
                    "file old path": "src/test/java/org/apache/commons/codec/CharEncodingTest.java",
                    "file new path": "src/test/java/org/apache/commons/codec/CharEncodingTest.java",
                    "full name": "src.test.java.org.apache.commons.codec.CharEncodingTest.testUtf8"
                },
                {
                    "function name": "testUtf16",
                    "function params": [],
                    "file name": "CharEncodingTest.java",
                    "file old path": "src/test/java/org/apache/commons/codec/CharEncodingTest.java",
                    "file new path": "src/test/java/org/apache/commons/codec/CharEncodingTest.java",
                    "full name": "src.test.java.org.apache.commons.codec.CharEncodingTest.testUtf16"
                },
                {
                    "function name": "testUtf16Be",
                    "function params": [],
                    "file name": "CharEncodingTest.java",
                    "file old path": "src/test/java/org/apache/commons/codec/CharEncodingTest.java",
                    "file new path": "src/test/java/org/apache/commons/codec/CharEncodingTest.java",
                    "full name": "src.test.java.org.apache.commons.codec.CharEncodingTest.testUtf16Be"
                },
                {
                    "function name": "testUsAscii",
                    "function params": [],
                    "file name": "CharEncodingTest.java",
                    "file old path": "src/test/java/org/apache/commons/codec/CharEncodingTest.java",
                    "file new path": "src/test/java/org/apache/commons/codec/CharEncodingTest.java",
                    "full name": "src.test.java.org.apache.commons.codec.CharEncodingTest.testUsAscii"
                },
                {
                    "function name": "testToCharset",
                    "function params": [],
                    "file name": "CharsetsTest.java",
                    "file old path": "src/test/java/org/apache/commons/codec/CharsetsTest.java",
                    "file new path": "src/test/java/org/apache/commons/codec/CharsetsTest.java",
                    "full name": "src.test.java.org.apache.commons.codec.CharsetsTest.testToCharset"
                },
                {
                    "function name": "testUtf16Le",
                    "function params": [],
                    "file name": "CharsetsTest.java",
                    "file old path": "src/test/java/org/apache/commons/codec/CharsetsTest.java",
                    "file new path": "src/test/java/org/apache/commons/codec/CharsetsTest.java",
                    "full name": "src.test.java.org.apache.commons.codec.CharsetsTest.testUtf16Le"
                },
                {
                    "function name": "testUtf8",
                    "function params": [],
                    "file name": "CharsetsTest.java",
                    "file old path": "src/test/java/org/apache/commons/codec/CharsetsTest.java",
                    "file new path": "src/test/java/org/apache/commons/codec/CharsetsTest.java",
                    "full name": "src.test.java.org.apache.commons.codec.CharsetsTest.testUtf8"
                },
                {
                    "function name": "testUtf16",
                    "function params": [],
                    "file name": "CharsetsTest.java",
                    "file old path": "src/test/java/org/apache/commons/codec/CharsetsTest.java",
                    "file new path": "src/test/java/org/apache/commons/codec/CharsetsTest.java",
                    "full name": "src.test.java.org.apache.commons.codec.CharsetsTest.testUtf16"
                },
                {
                    "function name": "testIso8859_1",
                    "function params": [],
                    "file name": "CharsetsTest.java",
                    "file old path": "src/test/java/org/apache/commons/codec/CharsetsTest.java",
                    "file new path": "src/test/java/org/apache/commons/codec/CharsetsTest.java",
                    "full name": "src.test.java.org.apache.commons.codec.CharsetsTest.testIso8859_1"
                },
                {
                    "function name": "testUtf16Be",
                    "function params": [],
                    "file name": "CharsetsTest.java",
                    "file old path": "src/test/java/org/apache/commons/codec/CharsetsTest.java",
                    "file new path": "src/test/java/org/apache/commons/codec/CharsetsTest.java",
                    "full name": "src.test.java.org.apache.commons.codec.CharsetsTest.testUtf16Be"
                },
                {
                    "function name": "testUsAscii",
                    "function params": [],
                    "file name": "CharsetsTest.java",
                    "file old path": "src/test/java/org/apache/commons/codec/CharsetsTest.java",
                    "file new path": "src/test/java/org/apache/commons/codec/CharsetsTest.java",
                    "full name": "src.test.java.org.apache.commons.codec.CharsetsTest.testUsAscii"
                },
                {
                    "function name": "testLocaleIndependence",
                    "function params": [],
                    "file name": "StringEncoderAbstractTest.java",
                    "file old path": "src/test/java/org/apache/commons/codec/StringEncoderAbstractTest.java",
                    "file new path": "src/test/java/org/apache/commons/codec/StringEncoderAbstractTest.java",
                    "full name": "src.test.java.org.apache.commons.codec.StringEncoderAbstractTest.testLocaleIndependence"
                },
                {
                    "function name": "testEncodeWithInvalidObject",
                    "function params": [],
                    "file name": "StringEncoderAbstractTest.java",
                    "file old path": "src/test/java/org/apache/commons/codec/StringEncoderAbstractTest.java",
                    "file new path": "src/test/java/org/apache/commons/codec/StringEncoderAbstractTest.java",
                    "full name": "src.test.java.org.apache.commons.codec.StringEncoderAbstractTest.testEncodeWithInvalidObject"
                },
                {
                    "function name": "checkEncoding",
                    "function params": [
                        "expected",
                        "source"
                    ],
                    "file name": "StringEncoderAbstractTest.java",
                    "file old path": "src/test/java/org/apache/commons/codec/StringEncoderAbstractTest.java",
                    "file new path": "src/test/java/org/apache/commons/codec/StringEncoderAbstractTest.java",
                    "full name": "src.test.java.org.apache.commons.codec.StringEncoderAbstractTest.checkEncoding"
                },
                {
                    "function name": "testComparatorWithDoubleMetaphone",
                    "function params": [],
                    "file name": "StringEncoderComparatorTest.java",
                    "file old path": "src/test/java/org/apache/commons/codec/StringEncoderComparatorTest.java",
                    "file new path": "src/test/java/org/apache/commons/codec/StringEncoderComparatorTest.java",
                    "full name": "src.test.java.org.apache.commons.codec.StringEncoderComparatorTest.testComparatorWithDoubleMetaphone"
                },
                {
                    "function name": "testComparatorWithDoubleMetaphoneAndInvalidInput",
                    "function params": [],
                    "file name": "StringEncoderComparatorTest.java",
                    "file old path": "src/test/java/org/apache/commons/codec/StringEncoderComparatorTest.java",
                    "file new path": "src/test/java/org/apache/commons/codec/StringEncoderComparatorTest.java",
                    "full name": "src.test.java.org.apache.commons.codec.StringEncoderComparatorTest.testComparatorWithDoubleMetaphoneAndInvalidInput"
                },
                {
                    "function name": "testComparatorWithSoundex",
                    "function params": [],
                    "file name": "StringEncoderComparatorTest.java",
                    "file old path": "src/test/java/org/apache/commons/codec/StringEncoderComparatorTest.java",
                    "file new path": "src/test/java/org/apache/commons/codec/StringEncoderComparatorTest.java",
                    "full name": "src.test.java.org.apache.commons.codec.StringEncoderComparatorTest.testComparatorWithSoundex"
                },
                {
                    "function name": "testRead0",
                    "function params": [],
                    "file name": "Base16InputStreamTest.java",
                    "file old path": "src/test/java/org/apache/commons/codec/binary/Base16InputStreamTest.java",
                    "file new path": "src/test/java/org/apache/commons/codec/binary/Base16InputStreamTest.java",
                    "full name": "src.test.java.org.apache.commons.codec.binary.Base16InputStreamTest.testRead0"
                },
                {
                    "function name": "testMarkSupported",
                    "function params": [],
                    "file name": "Base16InputStreamTest.java",
                    "file old path": "src/test/java/org/apache/commons/codec/binary/Base16InputStreamTest.java",
                    "file new path": "src/test/java/org/apache/commons/codec/binary/Base16InputStreamTest.java",
                    "full name": "src.test.java.org.apache.commons.codec.binary.Base16InputStreamTest.testMarkSupported"
                },
                {
                    "function name": "testByChunk",
                    "function params": [
                        "encoded",
                        "decoded",
                        "lowerCase"
                    ],
                    "file name": "Base16InputStreamTest.java",
                    "file old path": "src/test/java/org/apache/commons/codec/binary/Base16InputStreamTest.java",
                    "file new path": "src/test/java/org/apache/commons/codec/binary/Base16InputStreamTest.java",
                    "full name": "src.test.java.org.apache.commons.codec.binary.Base16InputStreamTest.testByChunk"
                },
                {
                    "function name": "testReadNull",
                    "function params": [],
                    "file name": "Base16InputStreamTest.java",
                    "file old path": "src/test/java/org/apache/commons/codec/binary/Base16InputStreamTest.java",
                    "file new path": "src/test/java/org/apache/commons/codec/binary/Base16InputStreamTest.java",
                    "full name": "src.test.java.org.apache.commons.codec.binary.Base16InputStreamTest.testReadNull"
                },
                {
                    "function name": "testByteByByte",
                    "function params": [
                        "encoded",
                        "decoded",
                        "lowerCase"
                    ],
                    "file name": "Base16InputStreamTest.java",
                    "file old path": "src/test/java/org/apache/commons/codec/binary/Base16InputStreamTest.java",
                    "file new path": "src/test/java/org/apache/commons/codec/binary/Base16InputStreamTest.java",
                    "full name": "src.test.java.org.apache.commons.codec.binary.Base16InputStreamTest.testByteByByte"
                },
                {
                    "function name": "testReadOutOfBounds",
                    "function params": [],
                    "file name": "Base16InputStreamTest.java",
                    "file old path": "src/test/java/org/apache/commons/codec/binary/Base16InputStreamTest.java",
                    "file new path": "src/test/java/org/apache/commons/codec/binary/Base16InputStreamTest.java",
                    "full name": "src.test.java.org.apache.commons.codec.binary.Base16InputStreamTest.testReadOutOfBounds"
                },
                {
                    "function name": "testByteByByte",
                    "function params": [
                        "encoded",
                        "decoded",
                        "lowerCase"
                    ],
                    "file name": "Base16OutputStreamTest.java",
                    "file old path": "src/test/java/org/apache/commons/codec/binary/Base16OutputStreamTest.java",
                    "file new path": "src/test/java/org/apache/commons/codec/binary/Base16OutputStreamTest.java",
                    "full name": "src.test.java.org.apache.commons.codec.binary.Base16OutputStreamTest.testByteByByte"
                },
                {
                    "function name": "testWriteOutOfBounds",
                    "function params": [],
                    "file name": "Base16OutputStreamTest.java",
                    "file old path": "src/test/java/org/apache/commons/codec/binary/Base16OutputStreamTest.java",
                    "file new path": "src/test/java/org/apache/commons/codec/binary/Base16OutputStreamTest.java",
                    "full name": "src.test.java.org.apache.commons.codec.binary.Base16OutputStreamTest.testWriteOutOfBounds"
                },
                {
                    "function name": "testByChunk",
                    "function params": [
                        "encoded",
                        "decoded",
                        "lowerCase"
                    ],
                    "file name": "Base16OutputStreamTest.java",
                    "file old path": "src/test/java/org/apache/commons/codec/binary/Base16OutputStreamTest.java",
                    "file new path": "src/test/java/org/apache/commons/codec/binary/Base16OutputStreamTest.java",
                    "full name": "src.test.java.org.apache.commons.codec.binary.Base16OutputStreamTest.testByChunk"
                },
                {
                    "function name": "testByteToStringVariations",
                    "function params": [],
                    "file name": "Base16Test.java",
                    "file old path": "src/test/java/org/apache/commons/codec/binary/Base16Test.java",
                    "file new path": "src/test/java/org/apache/commons/codec/binary/Base16Test.java",
                    "full name": "src.test.java.org.apache.commons.codec.binary.Base16Test.testByteToStringVariations"
                },
                {
                    "function name": "testStringToByteVariations",
                    "function params": [],
                    "file name": "Base16Test.java",
                    "file old path": "src/test/java/org/apache/commons/codec/binary/Base16Test.java",
                    "file new path": "src/test/java/org/apache/commons/codec/binary/Base16Test.java",
                    "full name": "src.test.java.org.apache.commons.codec.binary.Base16Test.testStringToByteVariations"
                },
                {
                    "function name": "testObjectDecodeWithValidParameter",
                    "function params": [],
                    "file name": "Base16Test.java",
                    "file old path": "src/test/java/org/apache/commons/codec/binary/Base16Test.java",
                    "file new path": "src/test/java/org/apache/commons/codec/binary/Base16Test.java",
                    "full name": "src.test.java.org.apache.commons.codec.binary.Base16Test.testObjectDecodeWithValidParameter"
                },
                {
                    "function name": "testEmptyBase16",
                    "function params": [],
                    "file name": "Base16Test.java",
                    "file old path": "src/test/java/org/apache/commons/codec/binary/Base16Test.java",
                    "file new path": "src/test/java/org/apache/commons/codec/binary/Base16Test.java",
                    "full name": "src.test.java.org.apache.commons.codec.binary.Base16Test.testEmptyBase16"
                },
                {
                    "function name": "testObjectEncodeWithValidParameter",
                    "function params": [],
                    "file name": "Base16Test.java",
                    "file old path": "src/test/java/org/apache/commons/codec/binary/Base16Test.java",
                    "file new path": "src/test/java/org/apache/commons/codec/binary/Base16Test.java",
                    "full name": "src.test.java.org.apache.commons.codec.binary.Base16Test.testObjectEncodeWithValidParameter"
                },
                {
                    "function name": "testBase16",
                    "function params": [],
                    "file name": "Base16Test.java",
                    "file old path": "src/test/java/org/apache/commons/codec/binary/Base16Test.java",
                    "file new path": "src/test/java/org/apache/commons/codec/binary/Base16Test.java",
                    "full name": "src.test.java.org.apache.commons.codec.binary.Base16Test.testBase16"
                },
                {
                    "function name": "testNonBase16Test",
                    "function params": [],
                    "file name": "Base16Test.java",
                    "file old path": "src/test/java/org/apache/commons/codec/binary/Base16Test.java",
                    "file new path": "src/test/java/org/apache/commons/codec/binary/Base16Test.java",
                    "full name": "src.test.java.org.apache.commons.codec.binary.Base16Test.testNonBase16Test"
                },
                {
                    "function name": "testObjectEncode",
                    "function params": [],
                    "file name": "Base16Test.java",
                    "file old path": "src/test/java/org/apache/commons/codec/binary/Base16Test.java",
                    "file new path": "src/test/java/org/apache/commons/codec/binary/Base16Test.java",
                    "full name": "src.test.java.org.apache.commons.codec.binary.Base16Test.testObjectEncode"
                },
                {
                    "function name": "testEncodeDecodeSmall",
                    "function params": [],
                    "file name": "Base16Test.java",
                    "file old path": "src/test/java/org/apache/commons/codec/binary/Base16Test.java",
                    "file new path": "src/test/java/org/apache/commons/codec/binary/Base16Test.java",
                    "full name": "src.test.java.org.apache.commons.codec.binary.Base16Test.testEncodeDecodeSmall"
                },
                {
                    "function name": "testConstructor_LowerCase",
                    "function params": [],
                    "file name": "Base16Test.java",
                    "file old path": "src/test/java/org/apache/commons/codec/binary/Base16Test.java",
                    "file new path": "src/test/java/org/apache/commons/codec/binary/Base16Test.java",
                    "full name": "src.test.java.org.apache.commons.codec.binary.Base16Test.testConstructor_LowerCase"
                },
                {
                    "function name": "testConstructor_LowerCase_DecodingPolicy",
                    "function params": [],
                    "file name": "Base16Test.java",
                    "file old path": "src/test/java/org/apache/commons/codec/binary/Base16Test.java",
                    "file new path": "src/test/java/org/apache/commons/codec/binary/Base16Test.java",
                    "full name": "src.test.java.org.apache.commons.codec.binary.Base16Test.testConstructor_LowerCase_DecodingPolicy"
                },
                {
                    "function name": "testBase16InBuffer",
                    "function params": [
                        "startPasSize",
                        "endPadSize"
                    ],
                    "file name": "Base16Test.java",
                    "file old path": "src/test/java/org/apache/commons/codec/binary/Base16Test.java",
                    "file new path": "src/test/java/org/apache/commons/codec/binary/Base16Test.java",
                    "full name": "src.test.java.org.apache.commons.codec.binary.Base16Test.testBase16InBuffer"
                },
                {
                    "function name": "testByteByByte",
                    "function params": [
                        "encoded",
                        "decoded",
                        "chunkSize",
                        "separator"
                    ],
                    "file name": "Base32InputStreamTest.java",
                    "file old path": "src/test/java/org/apache/commons/codec/binary/Base32InputStreamTest.java",
                    "file new path": "src/test/java/org/apache/commons/codec/binary/Base32InputStreamTest.java",
                    "full name": "src.test.java.org.apache.commons.codec.binary.Base32InputStreamTest.testByteByByte"
                },
                {
                    "function name": "testMarkSupported",
                    "function params": [],
                    "file name": "Base32InputStreamTest.java",
                    "file old path": "src/test/java/org/apache/commons/codec/binary/Base32InputStreamTest.java",
                    "file new path": "src/test/java/org/apache/commons/codec/binary/Base32InputStreamTest.java",
                    "full name": "src.test.java.org.apache.commons.codec.binary.Base32InputStreamTest.testMarkSupported"
                },
                {
                    "function name": "testRead0",
                    "function params": [],
                    "file name": "Base32InputStreamTest.java",
                    "file old path": "src/test/java/org/apache/commons/codec/binary/Base32InputStreamTest.java",
                    "file new path": "src/test/java/org/apache/commons/codec/binary/Base32InputStreamTest.java",
                    "full name": "src.test.java.org.apache.commons.codec.binary.Base32InputStreamTest.testRead0"
                },
                {
                    "function name": "testByChunk",
                    "function params": [
                        "encoded",
                        "decoded",
                        "chunkSize",
                        "separator"
                    ],
                    "file name": "Base32InputStreamTest.java",
                    "file old path": "src/test/java/org/apache/commons/codec/binary/Base32InputStreamTest.java",
                    "file new path": "src/test/java/org/apache/commons/codec/binary/Base32InputStreamTest.java",
                    "full name": "src.test.java.org.apache.commons.codec.binary.Base32InputStreamTest.testByChunk"
                },
                {
                    "function name": "testReadOutOfBounds",
                    "function params": [],
                    "file name": "Base32InputStreamTest.java",
                    "file old path": "src/test/java/org/apache/commons/codec/binary/Base32InputStreamTest.java",
                    "file new path": "src/test/java/org/apache/commons/codec/binary/Base32InputStreamTest.java",
                    "full name": "src.test.java.org.apache.commons.codec.binary.Base32InputStreamTest.testReadOutOfBounds"
                },
                {
                    "function name": "testWriteOutOfBounds",
                    "function params": [],
                    "file name": "Base32OutputStreamTest.java",
                    "file old path": "src/test/java/org/apache/commons/codec/binary/Base32OutputStreamTest.java",
                    "file new path": "src/test/java/org/apache/commons/codec/binary/Base32OutputStreamTest.java",
                    "full name": "src.test.java.org.apache.commons.codec.binary.Base32OutputStreamTest.testWriteOutOfBounds"
                },
                {
                    "function name": "testByteByByte",
                    "function params": [
                        "encoded",
                        "decoded",
                        "chunkSize",
                        "separator"
                    ],
                    "file name": "Base32OutputStreamTest.java",
                    "file old path": "src/test/java/org/apache/commons/codec/binary/Base32OutputStreamTest.java",
                    "file new path": "src/test/java/org/apache/commons/codec/binary/Base32OutputStreamTest.java",
                    "full name": "src.test.java.org.apache.commons.codec.binary.Base32OutputStreamTest.testByteByByte"
                },
                {
                    "function name": "testByChunk",
                    "function params": [
                        "encoded",
                        "decoded",
                        "chunkSize",
                        "separator"
                    ],
                    "file name": "Base32OutputStreamTest.java",
                    "file old path": "src/test/java/org/apache/commons/codec/binary/Base32OutputStreamTest.java",
                    "file new path": "src/test/java/org/apache/commons/codec/binary/Base32OutputStreamTest.java",
                    "full name": "src.test.java.org.apache.commons.codec.binary.Base32OutputStreamTest.testByChunk"
                },
                {
                    "function name": "testRandomBytesHex",
                    "function params": [],
                    "file name": "Base32Test.java",
                    "file old path": "src/test/java/org/apache/commons/codec/binary/Base32Test.java",
                    "file new path": "src/test/java/org/apache/commons/codec/binary/Base32Test.java",
                    "full name": "src.test.java.org.apache.commons.codec.binary.Base32Test.testRandomBytesHex"
                },
                {
                    "function name": "testRandomBytes",
                    "function params": [],
                    "file name": "Base32Test.java",
                    "file old path": "src/test/java/org/apache/commons/codec/binary/Base32Test.java",
                    "file new path": "src/test/java/org/apache/commons/codec/binary/Base32Test.java",
                    "full name": "src.test.java.org.apache.commons.codec.binary.Base32Test.testRandomBytes"
                },
                {
                    "function name": "testEmptyBase32",
                    "function params": [],
                    "file name": "Base32Test.java",
                    "file old path": "src/test/java/org/apache/commons/codec/binary/Base32Test.java",
                    "file new path": "src/test/java/org/apache/commons/codec/binary/Base32Test.java",
                    "full name": "src.test.java.org.apache.commons.codec.binary.Base32Test.testEmptyBase32"
                },
                {
                    "function name": "testRandomBytesChunked",
                    "function params": [],
                    "file name": "Base32Test.java",
                    "file old path": "src/test/java/org/apache/commons/codec/binary/Base32Test.java",
                    "file new path": "src/test/java/org/apache/commons/codec/binary/Base32Test.java",
                    "full name": "src.test.java.org.apache.commons.codec.binary.Base32Test.testRandomBytesChunked"
                },
                {
                    "function name": "testConstructors",
                    "function params": [],
                    "file name": "Base32Test.java",
                    "file old path": "src/test/java/org/apache/commons/codec/binary/Base32Test.java",
                    "file new path": "src/test/java/org/apache/commons/codec/binary/Base32Test.java",
                    "full name": "src.test.java.org.apache.commons.codec.binary.Base32Test.testConstructors"
                },
                {
                    "function name": "assertBase32DecodingOfTrailingBits",
                    "function params": [
                        "nbits"
                    ],
                    "file name": "Base32Test.java",
                    "file old path": "src/test/java/org/apache/commons/codec/binary/Base32Test.java",
                    "file new path": "src/test/java/org/apache/commons/codec/binary/Base32Test.java",
                    "full name": "src.test.java.org.apache.commons.codec.binary.Base32Test.assertBase32DecodingOfTrailingBits"
                },
                {
                    "function name": "testStaticDecodeChunked",
                    "function params": [],
                    "file name": "Base64Codec13Test.java",
                    "file old path": "src/test/java/org/apache/commons/codec/binary/Base64Codec13Test.java",
                    "file new path": "src/test/java/org/apache/commons/codec/binary/Base64Codec13Test.java",
                    "full name": "src.test.java.org.apache.commons.codec.binary.Base64Codec13Test.testStaticDecodeChunked"
                },
                {
                    "function name": "testStaticEncode",
                    "function params": [],
                    "file name": "Base64Codec13Test.java",
                    "file old path": "src/test/java/org/apache/commons/codec/binary/Base64Codec13Test.java",
                    "file new path": "src/test/java/org/apache/commons/codec/binary/Base64Codec13Test.java",
                    "full name": "src.test.java.org.apache.commons.codec.binary.Base64Codec13Test.testStaticEncode"
                },
                {
                    "function name": "testStaticEncodeChunked",
                    "function params": [],
                    "file name": "Base64Codec13Test.java",
                    "file old path": "src/test/java/org/apache/commons/codec/binary/Base64Codec13Test.java",
                    "file new path": "src/test/java/org/apache/commons/codec/binary/Base64Codec13Test.java",
                    "full name": "src.test.java.org.apache.commons.codec.binary.Base64Codec13Test.testStaticEncodeChunked"
                },
                {
                    "function name": "testEncoder",
                    "function params": [],
                    "file name": "Base64Codec13Test.java",
                    "file old path": "src/test/java/org/apache/commons/codec/binary/Base64Codec13Test.java",
                    "file new path": "src/test/java/org/apache/commons/codec/binary/Base64Codec13Test.java",
                    "full name": "src.test.java.org.apache.commons.codec.binary.Base64Codec13Test.testEncoder"
                },
                {
                    "function name": "testBinaryDecoder",
                    "function params": [],
                    "file name": "Base64Codec13Test.java",
                    "file old path": "src/test/java/org/apache/commons/codec/binary/Base64Codec13Test.java",
                    "file new path": "src/test/java/org/apache/commons/codec/binary/Base64Codec13Test.java",
                    "full name": "src.test.java.org.apache.commons.codec.binary.Base64Codec13Test.testBinaryDecoder"
                },
                {
                    "function name": "testDecoder",
                    "function params": [],
                    "file name": "Base64Codec13Test.java",
                    "file old path": "src/test/java/org/apache/commons/codec/binary/Base64Codec13Test.java",
                    "file new path": "src/test/java/org/apache/commons/codec/binary/Base64Codec13Test.java",
                    "full name": "src.test.java.org.apache.commons.codec.binary.Base64Codec13Test.testDecoder"
                },
                {
                    "function name": "testStaticDecode",
                    "function params": [],
                    "file name": "Base64Codec13Test.java",
                    "file old path": "src/test/java/org/apache/commons/codec/binary/Base64Codec13Test.java",
                    "file new path": "src/test/java/org/apache/commons/codec/binary/Base64Codec13Test.java",
                    "full name": "src.test.java.org.apache.commons.codec.binary.Base64Codec13Test.testStaticDecode"
                },
                {
                    "function name": "testBinaryEncoder",
                    "function params": [],
                    "file name": "Base64Codec13Test.java",
                    "file old path": "src/test/java/org/apache/commons/codec/binary/Base64Codec13Test.java",
                    "file new path": "src/test/java/org/apache/commons/codec/binary/Base64Codec13Test.java",
                    "full name": "src.test.java.org.apache.commons.codec.binary.Base64Codec13Test.testBinaryEncoder"
                },
                {
                    "function name": "testCodec101",
                    "function params": [],
                    "file name": "Base64InputStreamTest.java",
                    "file old path": "src/test/java/org/apache/commons/codec/binary/Base64InputStreamTest.java",
                    "file new path": "src/test/java/org/apache/commons/codec/binary/Base64InputStreamTest.java",
                    "full name": "src.test.java.org.apache.commons.codec.binary.Base64InputStreamTest.testCodec101"
                },
                {
                    "function name": "testCodec98NPE",
                    "function params": [],
                    "file name": "Base64InputStreamTest.java",
                    "file old path": "src/test/java/org/apache/commons/codec/binary/Base64InputStreamTest.java",
                    "file new path": "src/test/java/org/apache/commons/codec/binary/Base64InputStreamTest.java",
                    "full name": "src.test.java.org.apache.commons.codec.binary.Base64InputStreamTest.testCodec98NPE"
                },
                {
                    "function name": "testRead0",
                    "function params": [],
                    "file name": "Base64InputStreamTest.java",
                    "file old path": "src/test/java/org/apache/commons/codec/binary/Base64InputStreamTest.java",
                    "file new path": "src/test/java/org/apache/commons/codec/binary/Base64InputStreamTest.java",
                    "full name": "src.test.java.org.apache.commons.codec.binary.Base64InputStreamTest.testRead0"
                },
                {
                    "function name": "testInputStreamReader",
                    "function params": [],
                    "file name": "Base64InputStreamTest.java",
                    "file old path": "src/test/java/org/apache/commons/codec/binary/Base64InputStreamTest.java",
                    "file new path": "src/test/java/org/apache/commons/codec/binary/Base64InputStreamTest.java",
                    "full name": "src.test.java.org.apache.commons.codec.binary.Base64InputStreamTest.testInputStreamReader"
                },
                {
                    "function name": "testReadOutOfBounds",
                    "function params": [],
                    "file name": "Base64InputStreamTest.java",
                    "file old path": "src/test/java/org/apache/commons/codec/binary/Base64InputStreamTest.java",
                    "file new path": "src/test/java/org/apache/commons/codec/binary/Base64InputStreamTest.java",
                    "full name": "src.test.java.org.apache.commons.codec.binary.Base64InputStreamTest.testReadOutOfBounds"
                },
                {
                    "function name": "testByteByByte",
                    "function params": [
                        "encoded",
                        "decoded",
                        "chunkSize",
                        "separator"
                    ],
                    "file name": "Base64InputStreamTest.java",
                    "file old path": "src/test/java/org/apache/commons/codec/binary/Base64InputStreamTest.java",
                    "file new path": "src/test/java/org/apache/commons/codec/binary/Base64InputStreamTest.java",
                    "full name": "src.test.java.org.apache.commons.codec.binary.Base64InputStreamTest.testByteByByte"
                },
                {
                    "function name": "testMarkSupported",
                    "function params": [],
                    "file name": "Base64InputStreamTest.java",
                    "file old path": "src/test/java/org/apache/commons/codec/binary/Base64InputStreamTest.java",
                    "file new path": "src/test/java/org/apache/commons/codec/binary/Base64InputStreamTest.java",
                    "full name": "src.test.java.org.apache.commons.codec.binary.Base64InputStreamTest.testMarkSupported"
                },
                {
                    "function name": "testByChunk",
                    "function params": [
                        "encoded",
                        "decoded",
                        "chunkSize",
                        "separator"
                    ],
                    "file name": "Base64InputStreamTest.java",
                    "file old path": "src/test/java/org/apache/commons/codec/binary/Base64InputStreamTest.java",
                    "file new path": "src/test/java/org/apache/commons/codec/binary/Base64InputStreamTest.java",
                    "full name": "src.test.java.org.apache.commons.codec.binary.Base64InputStreamTest.testByChunk"
                },
                {
                    "function name": "testByChunk",
                    "function params": [
                        "encoded",
                        "decoded",
                        "chunkSize",
                        "separator"
                    ],
                    "file name": "Base64OutputStreamTest.java",
                    "file old path": "src/test/java/org/apache/commons/codec/binary/Base64OutputStreamTest.java",
                    "file new path": "src/test/java/org/apache/commons/codec/binary/Base64OutputStreamTest.java",
                    "full name": "src.test.java.org.apache.commons.codec.binary.Base64OutputStreamTest.testByChunk"
                },
                {
                    "function name": "testWriteOutOfBounds",
                    "function params": [],
                    "file name": "Base64OutputStreamTest.java",
                    "file old path": "src/test/java/org/apache/commons/codec/binary/Base64OutputStreamTest.java",
                    "file new path": "src/test/java/org/apache/commons/codec/binary/Base64OutputStreamTest.java",
                    "full name": "src.test.java.org.apache.commons.codec.binary.Base64OutputStreamTest.testWriteOutOfBounds"
                },
                {
                    "function name": "testStrictDecoding",
                    "function params": [],
                    "file name": "Base64OutputStreamTest.java",
                    "file old path": "src/test/java/org/apache/commons/codec/binary/Base64OutputStreamTest.java",
                    "file new path": "src/test/java/org/apache/commons/codec/binary/Base64OutputStreamTest.java",
                    "full name": "src.test.java.org.apache.commons.codec.binary.Base64OutputStreamTest.testStrictDecoding"
                },
                {
                    "function name": "testCodec98NPE",
                    "function params": [],
                    "file name": "Base64OutputStreamTest.java",
                    "file old path": "src/test/java/org/apache/commons/codec/binary/Base64OutputStreamTest.java",
                    "file new path": "src/test/java/org/apache/commons/codec/binary/Base64OutputStreamTest.java",
                    "full name": "src.test.java.org.apache.commons.codec.binary.Base64OutputStreamTest.testCodec98NPE"
                },
                {
                    "function name": "testByteByByte",
                    "function params": [
                        "encoded",
                        "decoded",
                        "chunkSize",
                        "separator"
                    ],
                    "file name": "Base64OutputStreamTest.java",
                    "file old path": "src/test/java/org/apache/commons/codec/binary/Base64OutputStreamTest.java",
                    "file new path": "src/test/java/org/apache/commons/codec/binary/Base64OutputStreamTest.java",
                    "full name": "src.test.java.org.apache.commons.codec.binary.Base64OutputStreamTest.testByteByByte"
                },
                {
                    "function name": "testBase64",
                    "function params": [],
                    "file name": "Base64Test.java",
                    "file old path": "src/test/java/org/apache/commons/codec/binary/Base64Test.java",
                    "file new path": "src/test/java/org/apache/commons/codec/binary/Base64Test.java",
                    "full name": "src.test.java.org.apache.commons.codec.binary.Base64Test.testBase64"
                },
                {
                    "function name": "testConstructor_Int_ByteArray_Boolean_UrlSafe",
                    "function params": [],
                    "file name": "Base64Test.java",
                    "file old path": "src/test/java/org/apache/commons/codec/binary/Base64Test.java",
                    "file new path": "src/test/java/org/apache/commons/codec/binary/Base64Test.java",
                    "full name": "src.test.java.org.apache.commons.codec.binary.Base64Test.testConstructor_Int_ByteArray_Boolean_UrlSafe"
                },
                {
                    "function name": "testNonBase64Test",
                    "function params": [],
                    "file name": "Base64Test.java",
                    "file old path": "src/test/java/org/apache/commons/codec/binary/Base64Test.java",
                    "file new path": "src/test/java/org/apache/commons/codec/binary/Base64Test.java",
                    "full name": "src.test.java.org.apache.commons.codec.binary.Base64Test.testNonBase64Test"
                },
                {
                    "function name": "testEncodeDecodeSmall",
                    "function params": [],
                    "file name": "Base64Test.java",
                    "file old path": "src/test/java/org/apache/commons/codec/binary/Base64Test.java",
                    "file new path": "src/test/java/org/apache/commons/codec/binary/Base64Test.java",
                    "full name": "src.test.java.org.apache.commons.codec.binary.Base64Test.testEncodeDecodeSmall"
                },
                {
                    "function name": "testConstructors",
                    "function params": [],
                    "file name": "Base64Test.java",
                    "file old path": "src/test/java/org/apache/commons/codec/binary/Base64Test.java",
                    "file new path": "src/test/java/org/apache/commons/codec/binary/Base64Test.java",
                    "full name": "src.test.java.org.apache.commons.codec.binary.Base64Test.testConstructors"
                },
                {
                    "function name": "testBase64InBuffer",
                    "function params": [
                        "startPasSize",
                        "endPadSize"
                    ],
                    "file name": "Base64Test.java",
                    "file old path": "src/test/java/org/apache/commons/codec/binary/Base64Test.java",
                    "file new path": "src/test/java/org/apache/commons/codec/binary/Base64Test.java",
                    "full name": "src.test.java.org.apache.commons.codec.binary.Base64Test.testBase64InBuffer"
                },
                {
                    "function name": "testUUID",
                    "function params": [],
                    "file name": "Base64Test.java",
                    "file old path": "src/test/java/org/apache/commons/codec/binary/Base64Test.java",
                    "file new path": "src/test/java/org/apache/commons/codec/binary/Base64Test.java",
                    "full name": "src.test.java.org.apache.commons.codec.binary.Base64Test.testUUID"
                },
                {
                    "function name": "testStringToByteVariations",
                    "function params": [],
                    "file name": "Base64Test.java",
                    "file old path": "src/test/java/org/apache/commons/codec/binary/Base64Test.java",
                    "file new path": "src/test/java/org/apache/commons/codec/binary/Base64Test.java",
                    "full name": "src.test.java.org.apache.commons.codec.binary.Base64Test.testStringToByteVariations"
                },
                {
                    "function name": "testUrlSafe",
                    "function params": [],
                    "file name": "Base64Test.java",
                    "file old path": "src/test/java/org/apache/commons/codec/binary/Base64Test.java",
                    "file new path": "src/test/java/org/apache/commons/codec/binary/Base64Test.java",
                    "full name": "src.test.java.org.apache.commons.codec.binary.Base64Test.testUrlSafe"
                },
                {
                    "function name": "testObjectDecodeWithValidParameter",
                    "function params": [],
                    "file name": "Base64Test.java",
                    "file old path": "src/test/java/org/apache/commons/codec/binary/Base64Test.java",
                    "file new path": "src/test/java/org/apache/commons/codec/binary/Base64Test.java",
                    "full name": "src.test.java.org.apache.commons.codec.binary.Base64Test.testObjectDecodeWithValidParameter"
                },
                {
                    "function name": "testCodec112",
                    "function params": [],
                    "file name": "Base64Test.java",
                    "file old path": "src/test/java/org/apache/commons/codec/binary/Base64Test.java",
                    "file new path": "src/test/java/org/apache/commons/codec/binary/Base64Test.java",
                    "full name": "src.test.java.org.apache.commons.codec.binary.Base64Test.testCodec112"
                },
                {
                    "function name": "testCodeIntegerNull",
                    "function params": [],
                    "file name": "Base64Test.java",
                    "file old path": "src/test/java/org/apache/commons/codec/binary/Base64Test.java",
                    "file new path": "src/test/java/org/apache/commons/codec/binary/Base64Test.java",
                    "full name": "src.test.java.org.apache.commons.codec.binary.Base64Test.testCodeIntegerNull"
                },
                {
                    "function name": "testObjectDecodeWithInvalidParameter",
                    "function params": [],
                    "file name": "Base64Test.java",
                    "file old path": "src/test/java/org/apache/commons/codec/binary/Base64Test.java",
                    "file new path": "src/test/java/org/apache/commons/codec/binary/Base64Test.java",
                    "full name": "src.test.java.org.apache.commons.codec.binary.Base64Test.testObjectDecodeWithInvalidParameter"
                },
                {
                    "function name": "testCodec265",
                    "function params": [],
                    "file name": "Base64Test.java",
                    "file old path": "src/test/java/org/apache/commons/codec/binary/Base64Test.java",
                    "file new path": "src/test/java/org/apache/commons/codec/binary/Base64Test.java",
                    "full name": "src.test.java.org.apache.commons.codec.binary.Base64Test.testCodec265"
                },
                {
                    "function name": "testChunkedEncodeMultipleOf76",
                    "function params": [],
                    "file name": "Base64Test.java",
                    "file old path": "src/test/java/org/apache/commons/codec/binary/Base64Test.java",
                    "file new path": "src/test/java/org/apache/commons/codec/binary/Base64Test.java",
                    "full name": "src.test.java.org.apache.commons.codec.binary.Base64Test.testChunkedEncodeMultipleOf76"
                },
                {
                    "function name": "testDecodeWithWhitespace",
                    "function params": [],
                    "file name": "Base64Test.java",
                    "file old path": "src/test/java/org/apache/commons/codec/binary/Base64Test.java",
                    "file new path": "src/test/java/org/apache/commons/codec/binary/Base64Test.java",
                    "full name": "src.test.java.org.apache.commons.codec.binary.Base64Test.testDecodeWithWhitespace"
                },
                {
                    "function name": "testObjectEncodeWithValidParameter",
                    "function params": [],
                    "file name": "Base64Test.java",
                    "file old path": "src/test/java/org/apache/commons/codec/binary/Base64Test.java",
                    "file new path": "src/test/java/org/apache/commons/codec/binary/Base64Test.java",
                    "full name": "src.test.java.org.apache.commons.codec.binary.Base64Test.testObjectEncodeWithValidParameter"
                },
                {
                    "function name": "testDecodeWithInnerPad",
                    "function params": [],
                    "file name": "Base64Test.java",
                    "file old path": "src/test/java/org/apache/commons/codec/binary/Base64Test.java",
                    "file new path": "src/test/java/org/apache/commons/codec/binary/Base64Test.java",
                    "full name": "src.test.java.org.apache.commons.codec.binary.Base64Test.testDecodeWithInnerPad"
                },
                {
                    "function name": "testConstructor_Int_ByteArray_Boolean",
                    "function params": [],
                    "file name": "Base64Test.java",
                    "file old path": "src/test/java/org/apache/commons/codec/binary/Base64Test.java",
                    "file new path": "src/test/java/org/apache/commons/codec/binary/Base64Test.java",
                    "full name": "src.test.java.org.apache.commons.codec.binary.Base64Test.testConstructor_Int_ByteArray_Boolean"
                },
                {
                    "function name": "testIsArrayByteBase64",
                    "function params": [],
                    "file name": "Base64Test.java",
                    "file old path": "src/test/java/org/apache/commons/codec/binary/Base64Test.java",
                    "file new path": "src/test/java/org/apache/commons/codec/binary/Base64Test.java",
                    "full name": "src.test.java.org.apache.commons.codec.binary.Base64Test.testIsArrayByteBase64"
                },
                {
                    "function name": "testIsUrlSafe",
                    "function params": [],
                    "file name": "Base64Test.java",
                    "file old path": "src/test/java/org/apache/commons/codec/binary/Base64Test.java",
                    "file new path": "src/test/java/org/apache/commons/codec/binary/Base64Test.java",
                    "full name": "src.test.java.org.apache.commons.codec.binary.Base64Test.testIsUrlSafe"
                },
                {
                    "function name": "testObjectEncodeWithInvalidParameter",
                    "function params": [],
                    "file name": "Base64Test.java",
                    "file old path": "src/test/java/org/apache/commons/codec/binary/Base64Test.java",
                    "file new path": "src/test/java/org/apache/commons/codec/binary/Base64Test.java",
                    "full name": "src.test.java.org.apache.commons.codec.binary.Base64Test.testObjectEncodeWithInvalidParameter"
                },
                {
                    "function name": "testHugeLineSeparator",
                    "function params": [],
                    "file name": "Base64Test.java",
                    "file old path": "src/test/java/org/apache/commons/codec/binary/Base64Test.java",
                    "file new path": "src/test/java/org/apache/commons/codec/binary/Base64Test.java",
                    "full name": "src.test.java.org.apache.commons.codec.binary.Base64Test.testHugeLineSeparator"
                },
                {
                    "function name": "testIsStringBase64",
                    "function params": [],
                    "file name": "Base64Test.java",
                    "file old path": "src/test/java/org/apache/commons/codec/binary/Base64Test.java",
                    "file new path": "src/test/java/org/apache/commons/codec/binary/Base64Test.java",
                    "full name": "src.test.java.org.apache.commons.codec.binary.Base64Test.testIsStringBase64"
                },
                {
                    "function name": "testEmptyBase64",
                    "function params": [],
                    "file name": "Base64Test.java",
                    "file old path": "src/test/java/org/apache/commons/codec/binary/Base64Test.java",
                    "file new path": "src/test/java/org/apache/commons/codec/binary/Base64Test.java",
                    "full name": "src.test.java.org.apache.commons.codec.binary.Base64Test.testEmptyBase64"
                },
                {
                    "function name": "testByteToStringVariations",
                    "function params": [],
                    "file name": "Base64Test.java",
                    "file old path": "src/test/java/org/apache/commons/codec/binary/Base64Test.java",
                    "file new path": "src/test/java/org/apache/commons/codec/binary/Base64Test.java",
                    "full name": "src.test.java.org.apache.commons.codec.binary.Base64Test.testByteToStringVariations"
                },
                {
                    "function name": "assertBase64DecodingOfTrailingBits",
                    "function params": [
                        "nbits"
                    ],
                    "file name": "Base64Test.java",
                    "file old path": "src/test/java/org/apache/commons/codec/binary/Base64Test.java",
                    "file new path": "src/test/java/org/apache/commons/codec/binary/Base64Test.java",
                    "full name": "src.test.java.org.apache.commons.codec.binary.Base64Test.assertBase64DecodingOfTrailingBits"
                },
                {
                    "function name": "testEnsureBufferSize",
                    "function params": [],
                    "file name": "BaseNCodecTest.java",
                    "file old path": "src/test/java/org/apache/commons/codec/binary/BaseNCodecTest.java",
                    "file new path": "src/test/java/org/apache/commons/codec/binary/BaseNCodecTest.java",
                    "full name": "src.test.java.org.apache.commons.codec.binary.BaseNCodecTest.testEnsureBufferSize"
                },
                {
                    "function name": "assertEnsureBufferSizeExpandsToMaxBufferSize",
                    "function params": [
                        "exceedMaxBufferSize"
                    ],
                    "file name": "BaseNCodecTest.java",
                    "file old path": "src/test/java/org/apache/commons/codec/binary/BaseNCodecTest.java",
                    "file new path": "src/test/java/org/apache/commons/codec/binary/BaseNCodecTest.java",
                    "full name": "src.test.java.org.apache.commons.codec.binary.BaseNCodecTest.assertEnsureBufferSizeExpandsToMaxBufferSize"
                },
                {
                    "function name": "testContextToString",
                    "function params": [],
                    "file name": "BaseNCodecTest.java",
                    "file old path": "src/test/java/org/apache/commons/codec/binary/BaseNCodecTest.java",
                    "file new path": "src/test/java/org/apache/commons/codec/binary/BaseNCodecTest.java",
                    "full name": "src.test.java.org.apache.commons.codec.binary.BaseNCodecTest.testContextToString"
                },
                {
                    "function name": "assumeCanAllocateBufferSize",
                    "function params": [
                        "size"
                    ],
                    "file name": "BaseNCodecTest.java",
                    "file old path": "src/test/java/org/apache/commons/codec/binary/BaseNCodecTest.java",
                    "file new path": "src/test/java/org/apache/commons/codec/binary/BaseNCodecTest.java",
                    "full name": "src.test.java.org.apache.commons.codec.binary.BaseNCodecTest.assumeCanAllocateBufferSize"
                },
                {
                    "function name": "RunTest",
                    "function params": [
                        "data",
                        "id"
                    ],
                    "file name": "CharSequenceUtilsTest.java",
                    "file old path": "src/test/java/org/apache/commons/codec/binary/CharSequenceUtilsTest.java",
                    "file new path": "src/test/java/org/apache/commons/codec/binary/CharSequenceUtilsTest.java",
                    "full name": "src.test.java.org.apache.commons.codec.binary.CharSequenceUtilsTest.RunTest"
                },
                {
                    "function name": "testGetCharset",
                    "function params": [],
                    "file name": "HexTest.java",
                    "file old path": "src/test/java/org/apache/commons/codec/binary/HexTest.java",
                    "file new path": "src/test/java/org/apache/commons/codec/binary/HexTest.java",
                    "full name": "src.test.java.org.apache.commons.codec.binary.HexTest.testGetCharset"
                },
                {
                    "function name": "testDecodeHexCharArrayOutBufferUnderSizedByOffset",
                    "function params": [],
                    "file name": "HexTest.java",
                    "file old path": "src/test/java/org/apache/commons/codec/binary/HexTest.java",
                    "file new path": "src/test/java/org/apache/commons/codec/binary/HexTest.java",
                    "full name": "src.test.java.org.apache.commons.codec.binary.HexTest.testDecodeHexCharArrayOutBufferUnderSizedByOffset"
                },
                {
                    "function name": "testDecodeByteArrayOddCharacters",
                    "function params": [],
                    "file name": "HexTest.java",
                    "file old path": "src/test/java/org/apache/commons/codec/binary/HexTest.java",
                    "file new path": "src/test/java/org/apache/commons/codec/binary/HexTest.java",
                    "full name": "src.test.java.org.apache.commons.codec.binary.HexTest.testDecodeByteArrayOddCharacters"
                },
                {
                    "function name": "testGetCharsetName",
                    "function params": [],
                    "file name": "HexTest.java",
                    "file old path": "src/test/java/org/apache/commons/codec/binary/HexTest.java",
                    "file new path": "src/test/java/org/apache/commons/codec/binary/HexTest.java",
                    "full name": "src.test.java.org.apache.commons.codec.binary.HexTest.testGetCharsetName"
                },
                {
                    "function name": "testDecodeClassCastException",
                    "function params": [],
                    "file name": "HexTest.java",
                    "file old path": "src/test/java/org/apache/commons/codec/binary/HexTest.java",
                    "file new path": "src/test/java/org/apache/commons/codec/binary/HexTest.java",
                    "full name": "src.test.java.org.apache.commons.codec.binary.HexTest.testDecodeClassCastException"
                },
                {
                    "function name": "testCustomCharset",
                    "function params": [
                        "name",
                        "parent"
                    ],
                    "file name": "HexTest.java",
                    "file old path": "src/test/java/org/apache/commons/codec/binary/HexTest.java",
                    "file new path": "src/test/java/org/apache/commons/codec/binary/HexTest.java",
                    "full name": "src.test.java.org.apache.commons.codec.binary.HexTest.testCustomCharset"
                },
                {
                    "function name": "testDecodeHexStringOddCharacters",
                    "function params": [],
                    "file name": "HexTest.java",
                    "file old path": "src/test/java/org/apache/commons/codec/binary/HexTest.java",
                    "file new path": "src/test/java/org/apache/commons/codec/binary/HexTest.java",
                    "full name": "src.test.java.org.apache.commons.codec.binary.HexTest.testDecodeHexStringOddCharacters"
                },
                {
                    "function name": "testGetBytesIso8859_1",
                    "function params": [],
                    "file name": "StringUtilsTest.java",
                    "file old path": "src/test/java/org/apache/commons/codec/binary/StringUtilsTest.java",
                    "file new path": "src/test/java/org/apache/commons/codec/binary/StringUtilsTest.java",
                    "full name": "src.test.java.org.apache.commons.codec.binary.StringUtilsTest.testGetBytesIso8859_1"
                },
                {
                    "function name": "testNewStringUtf16",
                    "function params": [],
                    "file name": "StringUtilsTest.java",
                    "file old path": "src/test/java/org/apache/commons/codec/binary/StringUtilsTest.java",
                    "file new path": "src/test/java/org/apache/commons/codec/binary/StringUtilsTest.java",
                    "full name": "src.test.java.org.apache.commons.codec.binary.StringUtilsTest.testNewStringUtf16"
                },
                {
                    "function name": "testGetBytesUtf8",
                    "function params": [],
                    "file name": "StringUtilsTest.java",
                    "file old path": "src/test/java/org/apache/commons/codec/binary/StringUtilsTest.java",
                    "file new path": "src/test/java/org/apache/commons/codec/binary/StringUtilsTest.java",
                    "full name": "src.test.java.org.apache.commons.codec.binary.StringUtilsTest.testGetBytesUtf8"
                },
                {
                    "function name": "testNewString",
                    "function params": [
                        "charsetName"
                    ],
                    "file name": "StringUtilsTest.java",
                    "file old path": "src/test/java/org/apache/commons/codec/binary/StringUtilsTest.java",
                    "file new path": "src/test/java/org/apache/commons/codec/binary/StringUtilsTest.java",
                    "full name": "src.test.java.org.apache.commons.codec.binary.StringUtilsTest.testNewString"
                },
                {
                    "function name": "testNewStringUsAscii",
                    "function params": [],
                    "file name": "StringUtilsTest.java",
                    "file old path": "src/test/java/org/apache/commons/codec/binary/StringUtilsTest.java",
                    "file new path": "src/test/java/org/apache/commons/codec/binary/StringUtilsTest.java",
                    "full name": "src.test.java.org.apache.commons.codec.binary.StringUtilsTest.testNewStringUsAscii"
                },
                {
                    "function name": "testNewStringIso8859_1",
                    "function params": [],
                    "file name": "StringUtilsTest.java",
                    "file old path": "src/test/java/org/apache/commons/codec/binary/StringUtilsTest.java",
                    "file new path": "src/test/java/org/apache/commons/codec/binary/StringUtilsTest.java",
                    "full name": "src.test.java.org.apache.commons.codec.binary.StringUtilsTest.testNewStringIso8859_1"
                },
                {
                    "function name": "testGetBytesUsAscii",
                    "function params": [],
                    "file name": "StringUtilsTest.java",
                    "file old path": "src/test/java/org/apache/commons/codec/binary/StringUtilsTest.java",
                    "file new path": "src/test/java/org/apache/commons/codec/binary/StringUtilsTest.java",
                    "full name": "src.test.java.org.apache.commons.codec.binary.StringUtilsTest.testGetBytesUsAscii"
                },
                {
                    "function name": "testGetBytesUncheckedNullInput",
                    "function params": [],
                    "file name": "StringUtilsTest.java",
                    "file old path": "src/test/java/org/apache/commons/codec/binary/StringUtilsTest.java",
                    "file new path": "src/test/java/org/apache/commons/codec/binary/StringUtilsTest.java",
                    "full name": "src.test.java.org.apache.commons.codec.binary.StringUtilsTest.testGetBytesUncheckedNullInput"
                },
                {
                    "function name": "testNewStringUtf16Le",
                    "function params": [],
                    "file name": "StringUtilsTest.java",
                    "file old path": "src/test/java/org/apache/commons/codec/binary/StringUtilsTest.java",
                    "file new path": "src/test/java/org/apache/commons/codec/binary/StringUtilsTest.java",
                    "full name": "src.test.java.org.apache.commons.codec.binary.StringUtilsTest.testNewStringUtf16Le"
                },
                {
                    "function name": "testEqualsCS2",
                    "function params": [],
                    "file name": "StringUtilsTest.java",
                    "file old path": "src/test/java/org/apache/commons/codec/binary/StringUtilsTest.java",
                    "file new path": "src/test/java/org/apache/commons/codec/binary/StringUtilsTest.java",
                    "full name": "src.test.java.org.apache.commons.codec.binary.StringUtilsTest.testEqualsCS2"
                },
                {
                    "function name": "testGetBytesUtf16Be",
                    "function params": [],
                    "file name": "StringUtilsTest.java",
                    "file old path": "src/test/java/org/apache/commons/codec/binary/StringUtilsTest.java",
                    "file new path": "src/test/java/org/apache/commons/codec/binary/StringUtilsTest.java",
                    "full name": "src.test.java.org.apache.commons.codec.binary.StringUtilsTest.testGetBytesUtf16Be"
                },
                {
                    "function name": "testNewStringUtf16Be",
                    "function params": [],
                    "file name": "StringUtilsTest.java",
                    "file old path": "src/test/java/org/apache/commons/codec/binary/StringUtilsTest.java",
                    "file new path": "src/test/java/org/apache/commons/codec/binary/StringUtilsTest.java",
                    "full name": "src.test.java.org.apache.commons.codec.binary.StringUtilsTest.testNewStringUtf16Be"
                },
                {
                    "function name": "testGetBytesUtf16",
                    "function params": [],
                    "file name": "StringUtilsTest.java",
                    "file old path": "src/test/java/org/apache/commons/codec/binary/StringUtilsTest.java",
                    "file new path": "src/test/java/org/apache/commons/codec/binary/StringUtilsTest.java",
                    "full name": "src.test.java.org.apache.commons.codec.binary.StringUtilsTest.testGetBytesUtf16"
                },
                {
                    "function name": "testNewStringNullInput",
                    "function params": [],
                    "file name": "StringUtilsTest.java",
                    "file old path": "src/test/java/org/apache/commons/codec/binary/StringUtilsTest.java",
                    "file new path": "src/test/java/org/apache/commons/codec/binary/StringUtilsTest.java",
                    "full name": "src.test.java.org.apache.commons.codec.binary.StringUtilsTest.testNewStringNullInput"
                },
                {
                    "function name": "testEqualsString",
                    "function params": [],
                    "file name": "StringUtilsTest.java",
                    "file old path": "src/test/java/org/apache/commons/codec/binary/StringUtilsTest.java",
                    "file new path": "src/test/java/org/apache/commons/codec/binary/StringUtilsTest.java",
                    "full name": "src.test.java.org.apache.commons.codec.binary.StringUtilsTest.testEqualsString"
                },
                {
                    "function name": "testGetBytesUtf16Le",
                    "function params": [],
                    "file name": "StringUtilsTest.java",
                    "file old path": "src/test/java/org/apache/commons/codec/binary/StringUtilsTest.java",
                    "file new path": "src/test/java/org/apache/commons/codec/binary/StringUtilsTest.java",
                    "full name": "src.test.java.org.apache.commons.codec.binary.StringUtilsTest.testGetBytesUtf16Le"
                },
                {
                    "function name": "testGetBytesUnchecked",
                    "function params": [
                        "charsetName"
                    ],
                    "file name": "StringUtilsTest.java",
                    "file old path": "src/test/java/org/apache/commons/codec/binary/StringUtilsTest.java",
                    "file new path": "src/test/java/org/apache/commons/codec/binary/StringUtilsTest.java",
                    "full name": "src.test.java.org.apache.commons.codec.binary.StringUtilsTest.testGetBytesUnchecked"
                },
                {
                    "function name": "testNewStringUtf8",
                    "function params": [],
                    "file name": "StringUtilsTest.java",
                    "file old path": "src/test/java/org/apache/commons/codec/binary/StringUtilsTest.java",
                    "file new path": "src/test/java/org/apache/commons/codec/binary/StringUtilsTest.java",
                    "full name": "src.test.java.org.apache.commons.codec.binary.StringUtilsTest.testNewStringUtf8"
                },
                {
                    "function name": "testNewStringNullInput_CODEC229",
                    "function params": [],
                    "file name": "StringUtilsTest.java",
                    "file old path": "src/test/java/org/apache/commons/codec/binary/StringUtilsTest.java",
                    "file new path": "src/test/java/org/apache/commons/codec/binary/StringUtilsTest.java",
                    "full name": "src.test.java.org.apache.commons.codec.binary.StringUtilsTest.testNewStringNullInput_CODEC229"
                },
                {
                    "function name": "testEqualsCS1",
                    "function params": [],
                    "file name": "StringUtilsTest.java",
                    "file old path": "src/test/java/org/apache/commons/codec/binary/StringUtilsTest.java",
                    "file new path": "src/test/java/org/apache/commons/codec/binary/StringUtilsTest.java",
                    "full name": "src.test.java.org.apache.commons.codec.binary.StringUtilsTest.testEqualsCS1"
                },
                {
                    "function name": "testByteBufferUtf8",
                    "function params": [],
                    "file name": "StringUtilsTest.java",
                    "file old path": "src/test/java/org/apache/commons/codec/binary/StringUtilsTest.java",
                    "file new path": "src/test/java/org/apache/commons/codec/binary/StringUtilsTest.java",
                    "full name": "src.test.java.org.apache.commons.codec.binary.StringUtilsTest.testByteBufferUtf8"
                },
                {
                    "function name": "assertThrowsProperExceptionWithKeySize",
                    "function params": [
                        "keySize"
                    ],
                    "file name": "Blake3Test.java",
                    "file old path": "src/test/java/org/apache/commons/codec/digest/Blake3Test.java",
                    "file new path": "src/test/java/org/apache/commons/codec/digest/Blake3Test.java",
                    "full name": "src.test.java.org.apache.commons.codec.digest.Blake3Test.assertThrowsProperExceptionWithKeySize"
                },
                {
                    "function name": "keyDerivation",
                    "function params": [
                        "inputLength",
                        "hash",
                        "keyedHash",
                        "deriveKey"
                    ],
                    "file name": "Blake3TestVectorsTest.java",
                    "file old path": "src/test/java/org/apache/commons/codec/digest/Blake3TestVectorsTest.java",
                    "file new path": "src/test/java/org/apache/commons/codec/digest/Blake3TestVectorsTest.java",
                    "full name": "src.test.java.org.apache.commons.codec.digest.Blake3TestVectorsTest.keyDerivation"
                },
                {
                    "function name": "keyedHashArbitraryOutputLength",
                    "function params": [],
                    "file name": "Blake3TestVectorsTest.java",
                    "file old path": "src/test/java/org/apache/commons/codec/digest/Blake3TestVectorsTest.java",
                    "file new path": "src/test/java/org/apache/commons/codec/digest/Blake3TestVectorsTest.java",
                    "full name": "src.test.java.org.apache.commons.codec.digest.Blake3TestVectorsTest.keyedHashArbitraryOutputLength"
                },
                {
                    "function name": "keyedHashTruncatedOutput",
                    "function params": [],
                    "file name": "Blake3TestVectorsTest.java",
                    "file old path": "src/test/java/org/apache/commons/codec/digest/Blake3TestVectorsTest.java",
                    "file new path": "src/test/java/org/apache/commons/codec/digest/Blake3TestVectorsTest.java",
                    "full name": "src.test.java.org.apache.commons.codec.digest.Blake3TestVectorsTest.keyedHashTruncatedOutput"
                },
                {
                    "function name": "keyedHashTruncatedOutput",
                    "function params": [
                        "inputLength",
                        "hash",
                        "keyedHash",
                        "deriveKey"
                    ],
                    "file name": "Blake3TestVectorsTest.java",
                    "file old path": "src/test/java/org/apache/commons/codec/digest/Blake3TestVectorsTest.java",
                    "file new path": "src/test/java/org/apache/commons/codec/digest/Blake3TestVectorsTest.java",
                    "full name": "src.test.java.org.apache.commons.codec.digest.Blake3TestVectorsTest.keyedHashTruncatedOutput"
                },
                {
                    "function name": "hashArbitraryOutputLength",
                    "function params": [
                        "inputLength",
                        "hash",
                        "keyedHash",
                        "deriveKey"
                    ],
                    "file name": "Blake3TestVectorsTest.java",
                    "file old path": "src/test/java/org/apache/commons/codec/digest/Blake3TestVectorsTest.java",
                    "file new path": "src/test/java/org/apache/commons/codec/digest/Blake3TestVectorsTest.java",
                    "full name": "src.test.java.org.apache.commons.codec.digest.Blake3TestVectorsTest.hashArbitraryOutputLength"
                },
                {
                    "function name": "hashTruncatedOutput",
                    "function params": [],
                    "file name": "Blake3TestVectorsTest.java",
                    "file old path": "src/test/java/org/apache/commons/codec/digest/Blake3TestVectorsTest.java",
                    "file new path": "src/test/java/org/apache/commons/codec/digest/Blake3TestVectorsTest.java",
                    "full name": "src.test.java.org.apache.commons.codec.digest.Blake3TestVectorsTest.hashTruncatedOutput"
                },
                {
                    "function name": "initData",
                    "function params": [
                        "inputLength",
                        "hash",
                        "keyedHash",
                        "deriveKey"
                    ],
                    "file name": "Blake3TestVectorsTest.java",
                    "file old path": "src/test/java/org/apache/commons/codec/digest/Blake3TestVectorsTest.java",
                    "file new path": "src/test/java/org/apache/commons/codec/digest/Blake3TestVectorsTest.java",
                    "full name": "src.test.java.org.apache.commons.codec.digest.Blake3TestVectorsTest.initData"
                },
                {
                    "function name": "keyedHashArbitraryOutputLength",
                    "function params": [
                        "inputLength",
                        "hash",
                        "keyedHash",
                        "deriveKey"
                    ],
                    "file name": "Blake3TestVectorsTest.java",
                    "file old path": "src/test/java/org/apache/commons/codec/digest/Blake3TestVectorsTest.java",
                    "file new path": "src/test/java/org/apache/commons/codec/digest/Blake3TestVectorsTest.java",
                    "full name": "src.test.java.org.apache.commons.codec.digest.Blake3TestVectorsTest.keyedHashArbitraryOutputLength"
                },
                {
                    "function name": "keyDerivation",
                    "function params": [],
                    "file name": "Blake3TestVectorsTest.java",
                    "file old path": "src/test/java/org/apache/commons/codec/digest/Blake3TestVectorsTest.java",
                    "file new path": "src/test/java/org/apache/commons/codec/digest/Blake3TestVectorsTest.java",
                    "full name": "src.test.java.org.apache.commons.codec.digest.Blake3TestVectorsTest.keyDerivation"
                },
                {
                    "function name": "data",
                    "function params": [],
                    "file name": "Blake3TestVectorsTest.java",
                    "file old path": "src/test/java/org/apache/commons/codec/digest/Blake3TestVectorsTest.java",
                    "file new path": "src/test/java/org/apache/commons/codec/digest/Blake3TestVectorsTest.java",
                    "full name": "src.test.java.org.apache.commons.codec.digest.Blake3TestVectorsTest.data"
                },
                {
                    "function name": "hashTruncatedOutput",
                    "function params": [
                        "inputLength",
                        "hash",
                        "keyedHash",
                        "deriveKey"
                    ],
                    "file name": "Blake3TestVectorsTest.java",
                    "file old path": "src/test/java/org/apache/commons/codec/digest/Blake3TestVectorsTest.java",
                    "file new path": "src/test/java/org/apache/commons/codec/digest/Blake3TestVectorsTest.java",
                    "full name": "src.test.java.org.apache.commons.codec.digest.Blake3TestVectorsTest.hashTruncatedOutput"
                },
                {
                    "function name": "hashArbitraryOutputLength",
                    "function params": [],
                    "file name": "Blake3TestVectorsTest.java",
                    "file old path": "src/test/java/org/apache/commons/codec/digest/Blake3TestVectorsTest.java",
                    "file new path": "src/test/java/org/apache/commons/codec/digest/Blake3TestVectorsTest.java",
                    "full name": "src.test.java.org.apache.commons.codec.digest.Blake3TestVectorsTest.hashArbitraryOutputLength"
                },
                {
                    "function name": "assumeJava9",
                    "function params": [],
                    "file name": "DigestUtilsTest.java",
                    "file old path": "src/test/java/org/apache/commons/codec/digest/DigestUtilsTest.java",
                    "file new path": "src/test/java/org/apache/commons/codec/digest/DigestUtilsTest.java",
                    "full name": "src.test.java.org.apache.commons.codec.digest.DigestUtilsTest.assumeJava9"
                },
                {
                    "function name": "assumeJava8",
                    "function params": [],
                    "file name": "DigestUtilsTest.java",
                    "file old path": "src/test/java/org/apache/commons/codec/digest/DigestUtilsTest.java",
                    "file new path": "src/test/java/org/apache/commons/codec/digest/DigestUtilsTest.java",
                    "full name": "src.test.java.org.apache.commons.codec.digest.DigestUtilsTest.assumeJava8"
                },
                {
                    "function name": "data",
                    "function params": [],
                    "file name": "HmacAlgorithmsTest.java",
                    "file old path": "src/test/java/org/apache/commons/codec/digest/HmacAlgorithmsTest.java",
                    "file new path": "src/test/java/org/apache/commons/codec/digest/HmacAlgorithmsTest.java",
                    "full name": "src.test.java.org.apache.commons.codec.digest.HmacAlgorithmsTest.data"
                },
                {
                    "function name": "testHmacHexFailString",
                    "function params": [],
                    "file name": "HmacAlgorithmsTest.java",
                    "file old path": "src/test/java/org/apache/commons/codec/digest/HmacAlgorithmsTest.java",
                    "file new path": "src/test/java/org/apache/commons/codec/digest/HmacAlgorithmsTest.java",
                    "full name": "src.test.java.org.apache.commons.codec.digest.HmacAlgorithmsTest.testHmacHexFailString"
                },
                {
                    "function name": "testGetHmacEmptyKey",
                    "function params": [
                        "hmacAlgorithm",
                        "standardResultBytes",
                        "standardResultString"
                    ],
                    "file name": "HmacAlgorithmsTest.java",
                    "file old path": "src/test/java/org/apache/commons/codec/digest/HmacAlgorithmsTest.java",
                    "file new path": "src/test/java/org/apache/commons/codec/digest/HmacAlgorithmsTest.java",
                    "full name": "src.test.java.org.apache.commons.codec.digest.HmacAlgorithmsTest.testGetHmacEmptyKey"
                },
                {
                    "function name": "testAlgorithm",
                    "function params": [],
                    "file name": "HmacAlgorithmsTest.java",
                    "file old path": "src/test/java/org/apache/commons/codec/digest/HmacAlgorithmsTest.java",
                    "file new path": "src/test/java/org/apache/commons/codec/digest/HmacAlgorithmsTest.java",
                    "full name": "src.test.java.org.apache.commons.codec.digest.HmacAlgorithmsTest.testAlgorithm"
                },
                {
                    "function name": "testHmacFailString",
                    "function params": [
                        "hmacAlgorithm",
                        "standardResultBytes",
                        "standardResultString"
                    ],
                    "file name": "HmacAlgorithmsTest.java",
                    "file old path": "src/test/java/org/apache/commons/codec/digest/HmacAlgorithmsTest.java",
                    "file new path": "src/test/java/org/apache/commons/codec/digest/HmacAlgorithmsTest.java",
                    "full name": "src.test.java.org.apache.commons.codec.digest.HmacAlgorithmsTest.testHmacFailString"
                },
                {
                    "function name": "testInitializedMac",
                    "function params": [],
                    "file name": "HmacAlgorithmsTest.java",
                    "file old path": "src/test/java/org/apache/commons/codec/digest/HmacAlgorithmsTest.java",
                    "file new path": "src/test/java/org/apache/commons/codec/digest/HmacAlgorithmsTest.java",
                    "full name": "src.test.java.org.apache.commons.codec.digest.HmacAlgorithmsTest.testInitializedMac"
                },
                {
                    "function name": "testMacString",
                    "function params": [],
                    "file name": "HmacAlgorithmsTest.java",
                    "file old path": "src/test/java/org/apache/commons/codec/digest/HmacAlgorithmsTest.java",
                    "file new path": "src/test/java/org/apache/commons/codec/digest/HmacAlgorithmsTest.java",
                    "full name": "src.test.java.org.apache.commons.codec.digest.HmacAlgorithmsTest.testMacString"
                },
                {
                    "function name": "testInitializedMac",
                    "function params": [
                        "hmacAlgorithm",
                        "standardResultBytes",
                        "standardResultString"
                    ],
                    "file name": "HmacAlgorithmsTest.java",
                    "file old path": "src/test/java/org/apache/commons/codec/digest/HmacAlgorithmsTest.java",
                    "file new path": "src/test/java/org/apache/commons/codec/digest/HmacAlgorithmsTest.java",
                    "full name": "src.test.java.org.apache.commons.codec.digest.HmacAlgorithmsTest.testInitializedMac"
                },
                {
                    "function name": "testHmacHexFailByteArray",
                    "function params": [],
                    "file name": "HmacAlgorithmsTest.java",
                    "file old path": "src/test/java/org/apache/commons/codec/digest/HmacAlgorithmsTest.java",
                    "file new path": "src/test/java/org/apache/commons/codec/digest/HmacAlgorithmsTest.java",
                    "full name": "src.test.java.org.apache.commons.codec.digest.HmacAlgorithmsTest.testHmacHexFailByteArray"
                },
                {
                    "function name": "testHmacFailString",
                    "function params": [],
                    "file name": "HmacAlgorithmsTest.java",
                    "file old path": "src/test/java/org/apache/commons/codec/digest/HmacAlgorithmsTest.java",
                    "file new path": "src/test/java/org/apache/commons/codec/digest/HmacAlgorithmsTest.java",
                    "full name": "src.test.java.org.apache.commons.codec.digest.HmacAlgorithmsTest.testHmacFailString"
                },
                {
                    "function name": "testMacByteArary",
                    "function params": [],
                    "file name": "HmacAlgorithmsTest.java",
                    "file old path": "src/test/java/org/apache/commons/codec/digest/HmacAlgorithmsTest.java",
                    "file new path": "src/test/java/org/apache/commons/codec/digest/HmacAlgorithmsTest.java",
                    "full name": "src.test.java.org.apache.commons.codec.digest.HmacAlgorithmsTest.testMacByteArary"
                },
                {
                    "function name": "testMacHexInputStream",
                    "function params": [],
                    "file name": "HmacAlgorithmsTest.java",
                    "file old path": "src/test/java/org/apache/commons/codec/digest/HmacAlgorithmsTest.java",
                    "file new path": "src/test/java/org/apache/commons/codec/digest/HmacAlgorithmsTest.java",
                    "full name": "src.test.java.org.apache.commons.codec.digest.HmacAlgorithmsTest.testMacHexInputStream"
                },
                {
                    "function name": "testGetHmacEmptyKey",
                    "function params": [],
                    "file name": "HmacAlgorithmsTest.java",
                    "file old path": "src/test/java/org/apache/commons/codec/digest/HmacAlgorithmsTest.java",
                    "file new path": "src/test/java/org/apache/commons/codec/digest/HmacAlgorithmsTest.java",
                    "full name": "src.test.java.org.apache.commons.codec.digest.HmacAlgorithmsTest.testGetHmacEmptyKey"
                },
                {
                    "function name": "testHmacHexFailInputStream",
                    "function params": [
                        "hmacAlgorithm",
                        "standardResultBytes",
                        "standardResultString"
                    ],
                    "file name": "HmacAlgorithmsTest.java",
                    "file old path": "src/test/java/org/apache/commons/codec/digest/HmacAlgorithmsTest.java",
                    "file new path": "src/test/java/org/apache/commons/codec/digest/HmacAlgorithmsTest.java",
                    "full name": "src.test.java.org.apache.commons.codec.digest.HmacAlgorithmsTest.testHmacHexFailInputStream"
                },
                {
                    "function name": "testMacHexByteArray",
                    "function params": [
                        "hmacAlgorithm",
                        "standardResultBytes",
                        "standardResultString"
                    ],
                    "file name": "HmacAlgorithmsTest.java",
                    "file old path": "src/test/java/org/apache/commons/codec/digest/HmacAlgorithmsTest.java",
                    "file new path": "src/test/java/org/apache/commons/codec/digest/HmacAlgorithmsTest.java",
                    "full name": "src.test.java.org.apache.commons.codec.digest.HmacAlgorithmsTest.testMacHexByteArray"
                },
                {
                    "function name": "testAlgorithm",
                    "function params": [
                        "hmacAlgorithm",
                        "standardResultBytes",
                        "standardResultString"
                    ],
                    "file name": "HmacAlgorithmsTest.java",
                    "file old path": "src/test/java/org/apache/commons/codec/digest/HmacAlgorithmsTest.java",
                    "file new path": "src/test/java/org/apache/commons/codec/digest/HmacAlgorithmsTest.java",
                    "full name": "src.test.java.org.apache.commons.codec.digest.HmacAlgorithmsTest.testAlgorithm"
                },
                {
                    "function name": "testHmacHexFailByteArray",
                    "function params": [
                        "hmacAlgorithm",
                        "standardResultBytes",
                        "standardResultString"
                    ],
                    "file name": "HmacAlgorithmsTest.java",
                    "file old path": "src/test/java/org/apache/commons/codec/digest/HmacAlgorithmsTest.java",
                    "file new path": "src/test/java/org/apache/commons/codec/digest/HmacAlgorithmsTest.java",
                    "full name": "src.test.java.org.apache.commons.codec.digest.HmacAlgorithmsTest.testHmacHexFailByteArray"
                },
                {
                    "function name": "testHmacFailByteArray",
                    "function params": [
                        "hmacAlgorithm",
                        "standardResultBytes",
                        "standardResultString"
                    ],
                    "file name": "HmacAlgorithmsTest.java",
                    "file old path": "src/test/java/org/apache/commons/codec/digest/HmacAlgorithmsTest.java",
                    "file new path": "src/test/java/org/apache/commons/codec/digest/HmacAlgorithmsTest.java",
                    "full name": "src.test.java.org.apache.commons.codec.digest.HmacAlgorithmsTest.testHmacFailByteArray"
                },
                {
                    "function name": "testMacByteArary",
                    "function params": [
                        "hmacAlgorithm",
                        "standardResultBytes",
                        "standardResultString"
                    ],
                    "file name": "HmacAlgorithmsTest.java",
                    "file old path": "src/test/java/org/apache/commons/codec/digest/HmacAlgorithmsTest.java",
                    "file new path": "src/test/java/org/apache/commons/codec/digest/HmacAlgorithmsTest.java",
                    "full name": "src.test.java.org.apache.commons.codec.digest.HmacAlgorithmsTest.testMacByteArary"
                },
                {
                    "function name": "testMacHexByteArray",
                    "function params": [],
                    "file name": "HmacAlgorithmsTest.java",
                    "file old path": "src/test/java/org/apache/commons/codec/digest/HmacAlgorithmsTest.java",
                    "file new path": "src/test/java/org/apache/commons/codec/digest/HmacAlgorithmsTest.java",
                    "full name": "src.test.java.org.apache.commons.codec.digest.HmacAlgorithmsTest.testMacHexByteArray"
                },
                {
                    "function name": "testMacHexString",
                    "function params": [],
                    "file name": "HmacAlgorithmsTest.java",
                    "file old path": "src/test/java/org/apache/commons/codec/digest/HmacAlgorithmsTest.java",
                    "file new path": "src/test/java/org/apache/commons/codec/digest/HmacAlgorithmsTest.java",
                    "full name": "src.test.java.org.apache.commons.codec.digest.HmacAlgorithmsTest.testMacHexString"
                },
                {
                    "function name": "testMacHexString",
                    "function params": [
                        "hmacAlgorithm",
                        "standardResultBytes",
                        "standardResultString"
                    ],
                    "file name": "HmacAlgorithmsTest.java",
                    "file old path": "src/test/java/org/apache/commons/codec/digest/HmacAlgorithmsTest.java",
                    "file new path": "src/test/java/org/apache/commons/codec/digest/HmacAlgorithmsTest.java",
                    "full name": "src.test.java.org.apache.commons.codec.digest.HmacAlgorithmsTest.testMacHexString"
                },
                {
                    "function name": "testHmacFailInputStream",
                    "function params": [],
                    "file name": "HmacAlgorithmsTest.java",
                    "file old path": "src/test/java/org/apache/commons/codec/digest/HmacAlgorithmsTest.java",
                    "file new path": "src/test/java/org/apache/commons/codec/digest/HmacAlgorithmsTest.java",
                    "full name": "src.test.java.org.apache.commons.codec.digest.HmacAlgorithmsTest.testHmacFailInputStream"
                },
                {
                    "function name": "testHmacHexFailInputStream",
                    "function params": [],
                    "file name": "HmacAlgorithmsTest.java",
                    "file old path": "src/test/java/org/apache/commons/codec/digest/HmacAlgorithmsTest.java",
                    "file new path": "src/test/java/org/apache/commons/codec/digest/HmacAlgorithmsTest.java",
                    "full name": "src.test.java.org.apache.commons.codec.digest.HmacAlgorithmsTest.testHmacHexFailInputStream"
                },
                {
                    "function name": "testHmacFailByteArray",
                    "function params": [],
                    "file name": "HmacAlgorithmsTest.java",
                    "file old path": "src/test/java/org/apache/commons/codec/digest/HmacAlgorithmsTest.java",
                    "file new path": "src/test/java/org/apache/commons/codec/digest/HmacAlgorithmsTest.java",
                    "full name": "src.test.java.org.apache.commons.codec.digest.HmacAlgorithmsTest.testHmacFailByteArray"
                },
                {
                    "function name": "testMacInputStream",
                    "function params": [],
                    "file name": "HmacAlgorithmsTest.java",
                    "file old path": "src/test/java/org/apache/commons/codec/digest/HmacAlgorithmsTest.java",
                    "file new path": "src/test/java/org/apache/commons/codec/digest/HmacAlgorithmsTest.java",
                    "full name": "src.test.java.org.apache.commons.codec.digest.HmacAlgorithmsTest.testMacInputStream"
                },
                {
                    "function name": "testHmacHexFailString",
                    "function params": [
                        "hmacAlgorithm",
                        "standardResultBytes",
                        "standardResultString"
                    ],
                    "file name": "HmacAlgorithmsTest.java",
                    "file old path": "src/test/java/org/apache/commons/codec/digest/HmacAlgorithmsTest.java",
                    "file new path": "src/test/java/org/apache/commons/codec/digest/HmacAlgorithmsTest.java",
                    "full name": "src.test.java.org.apache.commons.codec.digest.HmacAlgorithmsTest.testHmacHexFailString"
                },
                {
                    "function name": "testGetHmacNullKey",
                    "function params": [
                        "hmacAlgorithm",
                        "standardResultBytes",
                        "standardResultString"
                    ],
                    "file name": "HmacAlgorithmsTest.java",
                    "file old path": "src/test/java/org/apache/commons/codec/digest/HmacAlgorithmsTest.java",
                    "file new path": "src/test/java/org/apache/commons/codec/digest/HmacAlgorithmsTest.java",
                    "full name": "src.test.java.org.apache.commons.codec.digest.HmacAlgorithmsTest.testGetHmacNullKey"
                },
                {
                    "function name": "testHmacFailInputStream",
                    "function params": [
                        "hmacAlgorithm",
                        "standardResultBytes",
                        "standardResultString"
                    ],
                    "file name": "HmacAlgorithmsTest.java",
                    "file old path": "src/test/java/org/apache/commons/codec/digest/HmacAlgorithmsTest.java",
                    "file new path": "src/test/java/org/apache/commons/codec/digest/HmacAlgorithmsTest.java",
                    "full name": "src.test.java.org.apache.commons.codec.digest.HmacAlgorithmsTest.testHmacFailInputStream"
                },
                {
                    "function name": "testMacString",
                    "function params": [
                        "hmacAlgorithm",
                        "standardResultBytes",
                        "standardResultString"
                    ],
                    "file name": "HmacAlgorithmsTest.java",
                    "file old path": "src/test/java/org/apache/commons/codec/digest/HmacAlgorithmsTest.java",
                    "file new path": "src/test/java/org/apache/commons/codec/digest/HmacAlgorithmsTest.java",
                    "full name": "src.test.java.org.apache.commons.codec.digest.HmacAlgorithmsTest.testMacString"
                },
                {
                    "function name": "testGetHmacNullKey",
                    "function params": [],
                    "file name": "HmacAlgorithmsTest.java",
                    "file old path": "src/test/java/org/apache/commons/codec/digest/HmacAlgorithmsTest.java",
                    "file new path": "src/test/java/org/apache/commons/codec/digest/HmacAlgorithmsTest.java",
                    "full name": "src.test.java.org.apache.commons.codec.digest.HmacAlgorithmsTest.testGetHmacNullKey"
                },
                {
                    "function name": "testMacInputStream",
                    "function params": [
                        "hmacAlgorithm",
                        "standardResultBytes",
                        "standardResultString"
                    ],
                    "file name": "HmacAlgorithmsTest.java",
                    "file old path": "src/test/java/org/apache/commons/codec/digest/HmacAlgorithmsTest.java",
                    "file new path": "src/test/java/org/apache/commons/codec/digest/HmacAlgorithmsTest.java",
                    "full name": "src.test.java.org.apache.commons.codec.digest.HmacAlgorithmsTest.testMacInputStream"
                },
                {
                    "function name": "testMacHexInputStream",
                    "function params": [
                        "hmacAlgorithm",
                        "standardResultBytes",
                        "standardResultString"
                    ],
                    "file name": "HmacAlgorithmsTest.java",
                    "file old path": "src/test/java/org/apache/commons/codec/digest/HmacAlgorithmsTest.java",
                    "file new path": "src/test/java/org/apache/commons/codec/digest/HmacAlgorithmsTest.java",
                    "full name": "src.test.java.org.apache.commons.codec.digest.HmacAlgorithmsTest.testMacHexInputStream"
                },
                {
                    "function name": "testInitializedMac",
                    "function params": [],
                    "file name": "HmacUtilsTest.java",
                    "file old path": "src/test/java/org/apache/commons/codec/digest/HmacUtilsTest.java",
                    "file new path": "src/test/java/org/apache/commons/codec/digest/HmacUtilsTest.java",
                    "full name": "src.test.java.org.apache.commons.codec.digest.HmacUtilsTest.testInitializedMac"
                },
                {
                    "function name": "testSha384HMac",
                    "function params": [],
                    "file name": "HmacUtilsTest.java",
                    "file old path": "src/test/java/org/apache/commons/codec/digest/HmacUtilsTest.java",
                    "file new path": "src/test/java/org/apache/commons/codec/digest/HmacUtilsTest.java",
                    "full name": "src.test.java.org.apache.commons.codec.digest.HmacUtilsTest.testSha384HMac"
                },
                {
                    "function name": "testMd5HMac",
                    "function params": [],
                    "file name": "HmacUtilsTest.java",
                    "file old path": "src/test/java/org/apache/commons/codec/digest/HmacUtilsTest.java",
                    "file new path": "src/test/java/org/apache/commons/codec/digest/HmacUtilsTest.java",
                    "full name": "src.test.java.org.apache.commons.codec.digest.HmacUtilsTest.testMd5HMac"
                },
                {
                    "function name": "testSha256HMac",
                    "function params": [],
                    "file name": "HmacUtilsTest.java",
                    "file old path": "src/test/java/org/apache/commons/codec/digest/HmacUtilsTest.java",
                    "file new path": "src/test/java/org/apache/commons/codec/digest/HmacUtilsTest.java",
                    "full name": "src.test.java.org.apache.commons.codec.digest.HmacUtilsTest.testSha256HMac"
                },
                {
                    "function name": "testGetHMac",
                    "function params": [],
                    "file name": "HmacUtilsTest.java",
                    "file old path": "src/test/java/org/apache/commons/codec/digest/HmacUtilsTest.java",
                    "file new path": "src/test/java/org/apache/commons/codec/digest/HmacUtilsTest.java",
                    "full name": "src.test.java.org.apache.commons.codec.digest.HmacUtilsTest.testGetHMac"
                },
                {
                    "function name": "testSha1HMac",
                    "function params": [],
                    "file name": "HmacUtilsTest.java",
                    "file old path": "src/test/java/org/apache/commons/codec/digest/HmacUtilsTest.java",
                    "file new path": "src/test/java/org/apache/commons/codec/digest/HmacUtilsTest.java",
                    "full name": "src.test.java.org.apache.commons.codec.digest.HmacUtilsTest.testSha1HMac"
                },
                {
                    "function name": "testSha512HMac",
                    "function params": [],
                    "file name": "HmacUtilsTest.java",
                    "file old path": "src/test/java/org/apache/commons/codec/digest/HmacUtilsTest.java",
                    "file new path": "src/test/java/org/apache/commons/codec/digest/HmacUtilsTest.java",
                    "full name": "src.test.java.org.apache.commons.codec.digest.HmacUtilsTest.testSha512HMac"
                },
                {
                    "function name": "testAlgorithm",
                    "function params": [
                        "messageDigestAlgorithm"
                    ],
                    "file name": "MessageDigestAlgorithmsTest.java",
                    "file old path": "src/test/java/org/apache/commons/codec/digest/MessageDigestAlgorithmsTest.java",
                    "file new path": "src/test/java/org/apache/commons/codec/digest/MessageDigestAlgorithmsTest.java",
                    "full name": "src.test.java.org.apache.commons.codec.digest.MessageDigestAlgorithmsTest.testAlgorithm"
                },
                {
                    "function name": "testDigestByteBuffer",
                    "function params": [
                        "messageDigestAlgorithm"
                    ],
                    "file name": "MessageDigestAlgorithmsTest.java",
                    "file old path": "src/test/java/org/apache/commons/codec/digest/MessageDigestAlgorithmsTest.java",
                    "file new path": "src/test/java/org/apache/commons/codec/digest/MessageDigestAlgorithmsTest.java",
                    "full name": "src.test.java.org.apache.commons.codec.digest.MessageDigestAlgorithmsTest.testDigestByteBuffer"
                },
                {
                    "function name": "testDigestPath",
                    "function params": [
                        "options"
                    ],
                    "file name": "MessageDigestAlgorithmsTest.java",
                    "file old path": "src/test/java/org/apache/commons/codec/digest/MessageDigestAlgorithmsTest.java",
                    "file new path": "src/test/java/org/apache/commons/codec/digest/MessageDigestAlgorithmsTest.java",
                    "full name": "src.test.java.org.apache.commons.codec.digest.MessageDigestAlgorithmsTest.testDigestPath"
                },
                {
                    "function name": "digestTestData",
                    "function params": [
                        "messageDigestAlgorithm"
                    ],
                    "file name": "MessageDigestAlgorithmsTest.java",
                    "file old path": "src/test/java/org/apache/commons/codec/digest/MessageDigestAlgorithmsTest.java",
                    "file new path": "src/test/java/org/apache/commons/codec/digest/MessageDigestAlgorithmsTest.java",
                    "full name": "src.test.java.org.apache.commons.codec.digest.MessageDigestAlgorithmsTest.digestTestData"
                },
                {
                    "function name": "checkValues",
                    "function params": [],
                    "file name": "MessageDigestAlgorithmsTest.java",
                    "file old path": "src/test/java/org/apache/commons/codec/digest/MessageDigestAlgorithmsTest.java",
                    "file new path": "src/test/java/org/apache/commons/codec/digest/MessageDigestAlgorithmsTest.java",
                    "full name": "src.test.java.org.apache.commons.codec.digest.MessageDigestAlgorithmsTest.checkValues"
                },
                {
                    "function name": "testDigestPathStandardOpenOptionRead",
                    "function params": [
                        "messageDigestAlgorithm"
                    ],
                    "file name": "MessageDigestAlgorithmsTest.java",
                    "file old path": "src/test/java/org/apache/commons/codec/digest/MessageDigestAlgorithmsTest.java",
                    "file new path": "src/test/java/org/apache/commons/codec/digest/MessageDigestAlgorithmsTest.java",
                    "full name": "src.test.java.org.apache.commons.codec.digest.MessageDigestAlgorithmsTest.testDigestPathStandardOpenOptionRead"
                },
                {
                    "function name": "testAlgorithm",
                    "function params": [],
                    "file name": "MessageDigestAlgorithmsTest.java",
                    "file old path": "src/test/java/org/apache/commons/codec/digest/MessageDigestAlgorithmsTest.java",
                    "file new path": "src/test/java/org/apache/commons/codec/digest/MessageDigestAlgorithmsTest.java",
                    "full name": "src.test.java.org.apache.commons.codec.digest.MessageDigestAlgorithmsTest.testAlgorithm"
                },
                {
                    "function name": "testDigestByteArray",
                    "function params": [
                        "messageDigestAlgorithm"
                    ],
                    "file name": "MessageDigestAlgorithmsTest.java",
                    "file old path": "src/test/java/org/apache/commons/codec/digest/MessageDigestAlgorithmsTest.java",
                    "file new path": "src/test/java/org/apache/commons/codec/digest/MessageDigestAlgorithmsTest.java",
                    "full name": "src.test.java.org.apache.commons.codec.digest.MessageDigestAlgorithmsTest.testDigestByteArray"
                },
                {
                    "function name": "testDigestFile",
                    "function params": [
                        "messageDigestAlgorithm"
                    ],
                    "file name": "MessageDigestAlgorithmsTest.java",
                    "file old path": "src/test/java/org/apache/commons/codec/digest/MessageDigestAlgorithmsTest.java",
                    "file new path": "src/test/java/org/apache/commons/codec/digest/MessageDigestAlgorithmsTest.java",
                    "full name": "src.test.java.org.apache.commons.codec.digest.MessageDigestAlgorithmsTest.testDigestFile"
                },
                {
                    "function name": "testDigestByteArray",
                    "function params": [],
                    "file name": "MessageDigestAlgorithmsTest.java",
                    "file old path": "src/test/java/org/apache/commons/codec/digest/MessageDigestAlgorithmsTest.java",
                    "file new path": "src/test/java/org/apache/commons/codec/digest/MessageDigestAlgorithmsTest.java",
                    "full name": "src.test.java.org.apache.commons.codec.digest.MessageDigestAlgorithmsTest.testDigestByteArray"
                },
                {
                    "function name": "testNonBlockingDigestRandomAccessFile",
                    "function params": [],
                    "file name": "MessageDigestAlgorithmsTest.java",
                    "file old path": "src/test/java/org/apache/commons/codec/digest/MessageDigestAlgorithmsTest.java",
                    "file new path": "src/test/java/org/apache/commons/codec/digest/MessageDigestAlgorithmsTest.java",
                    "full name": "src.test.java.org.apache.commons.codec.digest.MessageDigestAlgorithmsTest.testNonBlockingDigestRandomAccessFile"
                },
                {
                    "function name": "digestTestData",
                    "function params": [],
                    "file name": "MessageDigestAlgorithmsTest.java",
                    "file old path": "src/test/java/org/apache/commons/codec/digest/MessageDigestAlgorithmsTest.java",
                    "file new path": "src/test/java/org/apache/commons/codec/digest/MessageDigestAlgorithmsTest.java",
                    "full name": "src.test.java.org.apache.commons.codec.digest.MessageDigestAlgorithmsTest.digestTestData"
                },
                {
                    "function name": "testNonBlockingDigestRandomAccessFile",
                    "function params": [
                        "messageDigestAlgorithm"
                    ],
                    "file name": "MessageDigestAlgorithmsTest.java",
                    "file old path": "src/test/java/org/apache/commons/codec/digest/MessageDigestAlgorithmsTest.java",
                    "file new path": "src/test/java/org/apache/commons/codec/digest/MessageDigestAlgorithmsTest.java",
                    "full name": "src.test.java.org.apache.commons.codec.digest.MessageDigestAlgorithmsTest.testNonBlockingDigestRandomAccessFile"
                },
                {
                    "function name": "testDigestPathOpenOptionsEmpty",
                    "function params": [
                        "messageDigestAlgorithm"
                    ],
                    "file name": "MessageDigestAlgorithmsTest.java",
                    "file old path": "src/test/java/org/apache/commons/codec/digest/MessageDigestAlgorithmsTest.java",
                    "file new path": "src/test/java/org/apache/commons/codec/digest/MessageDigestAlgorithmsTest.java",
                    "full name": "src.test.java.org.apache.commons.codec.digest.MessageDigestAlgorithmsTest.testDigestPathOpenOptionsEmpty"
                },
                {
                    "function name": "testGetMessageDigest",
                    "function params": [],
                    "file name": "MessageDigestAlgorithmsTest.java",
                    "file old path": "src/test/java/org/apache/commons/codec/digest/MessageDigestAlgorithmsTest.java",
                    "file new path": "src/test/java/org/apache/commons/codec/digest/MessageDigestAlgorithmsTest.java",
                    "full name": "src.test.java.org.apache.commons.codec.digest.MessageDigestAlgorithmsTest.testGetMessageDigest"
                },
                {
                    "function name": "testDigestFile",
                    "function params": [],
                    "file name": "MessageDigestAlgorithmsTest.java",
                    "file old path": "src/test/java/org/apache/commons/codec/digest/MessageDigestAlgorithmsTest.java",
                    "file new path": "src/test/java/org/apache/commons/codec/digest/MessageDigestAlgorithmsTest.java",
                    "full name": "src.test.java.org.apache.commons.codec.digest.MessageDigestAlgorithmsTest.testDigestFile"
                },
                {
                    "function name": "testDigestPathStandardOpenOptionRead",
                    "function params": [],
                    "file name": "MessageDigestAlgorithmsTest.java",
                    "file old path": "src/test/java/org/apache/commons/codec/digest/MessageDigestAlgorithmsTest.java",
                    "file new path": "src/test/java/org/apache/commons/codec/digest/MessageDigestAlgorithmsTest.java",
                    "full name": "src.test.java.org.apache.commons.codec.digest.MessageDigestAlgorithmsTest.testDigestPathStandardOpenOptionRead"
                },
                {
                    "function name": "data",
                    "function params": [],
                    "file name": "MessageDigestAlgorithmsTest.java",
                    "file old path": "src/test/java/org/apache/commons/codec/digest/MessageDigestAlgorithmsTest.java",
                    "file new path": "src/test/java/org/apache/commons/codec/digest/MessageDigestAlgorithmsTest.java",
                    "full name": "src.test.java.org.apache.commons.codec.digest.MessageDigestAlgorithmsTest.data"
                },
                {
                    "function name": "testDigestPathOpenOptionsEmpty",
                    "function params": [],
                    "file name": "MessageDigestAlgorithmsTest.java",
                    "file old path": "src/test/java/org/apache/commons/codec/digest/MessageDigestAlgorithmsTest.java",
                    "file new path": "src/test/java/org/apache/commons/codec/digest/MessageDigestAlgorithmsTest.java",
                    "full name": "src.test.java.org.apache.commons.codec.digest.MessageDigestAlgorithmsTest.testDigestPathOpenOptionsEmpty"
                },
                {
                    "function name": "testDigestInputStream",
                    "function params": [],
                    "file name": "MessageDigestAlgorithmsTest.java",
                    "file old path": "src/test/java/org/apache/commons/codec/digest/MessageDigestAlgorithmsTest.java",
                    "file new path": "src/test/java/org/apache/commons/codec/digest/MessageDigestAlgorithmsTest.java",
                    "full name": "src.test.java.org.apache.commons.codec.digest.MessageDigestAlgorithmsTest.testDigestInputStream"
                },
                {
                    "function name": "testDigestInputStream",
                    "function params": [
                        "messageDigestAlgorithm"
                    ],
                    "file name": "MessageDigestAlgorithmsTest.java",
                    "file old path": "src/test/java/org/apache/commons/codec/digest/MessageDigestAlgorithmsTest.java",
                    "file new path": "src/test/java/org/apache/commons/codec/digest/MessageDigestAlgorithmsTest.java",
                    "full name": "src.test.java.org.apache.commons.codec.digest.MessageDigestAlgorithmsTest.testDigestInputStream"
                },
                {
                    "function name": "testDigestByteBuffer",
                    "function params": [],
                    "file name": "MessageDigestAlgorithmsTest.java",
                    "file old path": "src/test/java/org/apache/commons/codec/digest/MessageDigestAlgorithmsTest.java",
                    "file new path": "src/test/java/org/apache/commons/codec/digest/MessageDigestAlgorithmsTest.java",
                    "full name": "src.test.java.org.apache.commons.codec.digest.MessageDigestAlgorithmsTest.testDigestByteBuffer"
                },
                {
                    "function name": "testDigestPath",
                    "function params": [
                        "messageDigestAlgorithm",
                        "options"
                    ],
                    "file name": "MessageDigestAlgorithmsTest.java",
                    "file old path": "src/test/java/org/apache/commons/codec/digest/MessageDigestAlgorithmsTest.java",
                    "file new path": "src/test/java/org/apache/commons/codec/digest/MessageDigestAlgorithmsTest.java",
                    "full name": "src.test.java.org.apache.commons.codec.digest.MessageDigestAlgorithmsTest.testDigestPath"
                },
                {
                    "function name": "testGetMessageDigest",
                    "function params": [
                        "messageDigestAlgorithm"
                    ],
                    "file name": "MessageDigestAlgorithmsTest.java",
                    "file old path": "src/test/java/org/apache/commons/codec/digest/MessageDigestAlgorithmsTest.java",
                    "file new path": "src/test/java/org/apache/commons/codec/digest/MessageDigestAlgorithmsTest.java",
                    "full name": "src.test.java.org.apache.commons.codec.digest.MessageDigestAlgorithmsTest.testGetMessageDigest"
                },
                {
                    "function name": "testHash32ByteArrayInt",
                    "function params": [],
                    "file name": "MurmurHash2Test.java",
                    "file old path": "src/test/java/org/apache/commons/codec/digest/MurmurHash2Test.java",
                    "file new path": "src/test/java/org/apache/commons/codec/digest/MurmurHash2Test.java",
                    "full name": "src.test.java.org.apache.commons.codec.digest.MurmurHash2Test.testHash32ByteArrayInt"
                },
                {
                    "function name": "testHash32StringIntInt",
                    "function params": [],
                    "file name": "MurmurHash2Test.java",
                    "file old path": "src/test/java/org/apache/commons/codec/digest/MurmurHash2Test.java",
                    "file new path": "src/test/java/org/apache/commons/codec/digest/MurmurHash2Test.java",
                    "full name": "src.test.java.org.apache.commons.codec.digest.MurmurHash2Test.testHash32StringIntInt"
                },
                {
                    "function name": "testHash64StringIntInt",
                    "function params": [],
                    "file name": "MurmurHash2Test.java",
                    "file old path": "src/test/java/org/apache/commons/codec/digest/MurmurHash2Test.java",
                    "file new path": "src/test/java/org/apache/commons/codec/digest/MurmurHash2Test.java",
                    "full name": "src.test.java.org.apache.commons.codec.digest.MurmurHash2Test.testHash64StringIntInt"
                },
                {
                    "function name": "testHash64ByteArrayIntInt",
                    "function params": [],
                    "file name": "MurmurHash2Test.java",
                    "file old path": "src/test/java/org/apache/commons/codec/digest/MurmurHash2Test.java",
                    "file new path": "src/test/java/org/apache/commons/codec/digest/MurmurHash2Test.java",
                    "full name": "src.test.java.org.apache.commons.codec.digest.MurmurHash2Test.testHash64ByteArrayIntInt"
                },
                {
                    "function name": "testHash64String",
                    "function params": [],
                    "file name": "MurmurHash2Test.java",
                    "file old path": "src/test/java/org/apache/commons/codec/digest/MurmurHash2Test.java",
                    "file new path": "src/test/java/org/apache/commons/codec/digest/MurmurHash2Test.java",
                    "full name": "src.test.java.org.apache.commons.codec.digest.MurmurHash2Test.testHash64String"
                },
                {
                    "function name": "testHash32ByteArrayIntInt",
                    "function params": [],
                    "file name": "MurmurHash2Test.java",
                    "file old path": "src/test/java/org/apache/commons/codec/digest/MurmurHash2Test.java",
                    "file new path": "src/test/java/org/apache/commons/codec/digest/MurmurHash2Test.java",
                    "full name": "src.test.java.org.apache.commons.codec.digest.MurmurHash2Test.testHash32ByteArrayIntInt"
                },
                {
                    "function name": "testHash64ByteArrayInt",
                    "function params": [],
                    "file name": "MurmurHash2Test.java",
                    "file old path": "src/test/java/org/apache/commons/codec/digest/MurmurHash2Test.java",
                    "file new path": "src/test/java/org/apache/commons/codec/digest/MurmurHash2Test.java",
                    "full name": "src.test.java.org.apache.commons.codec.digest.MurmurHash2Test.testHash64ByteArrayInt"
                },
                {
                    "function name": "testHash32String",
                    "function params": [],
                    "file name": "MurmurHash2Test.java",
                    "file old path": "src/test/java/org/apache/commons/codec/digest/MurmurHash2Test.java",
                    "file new path": "src/test/java/org/apache/commons/codec/digest/MurmurHash2Test.java",
                    "full name": "src.test.java.org.apache.commons.codec.digest.MurmurHash2Test.testHash32String"
                },
                {
                    "function name": "testHash32LongLongSeed",
                    "function params": [],
                    "file name": "MurmurHash3Test.java",
                    "file old path": "src/test/java/org/apache/commons/codec/digest/MurmurHash3Test.java",
                    "file new path": "src/test/java/org/apache/commons/codec/digest/MurmurHash3Test.java",
                    "full name": "src.test.java.org.apache.commons.codec.digest.MurmurHash3Test.testHash32LongLongSeed"
                },
                {
                    "function name": "testHash32WithTrailingNegativeSignedBytesIsInvalid",
                    "function params": [],
                    "file name": "MurmurHash3Test.java",
                    "file old path": "src/test/java/org/apache/commons/codec/digest/MurmurHash3Test.java",
                    "file new path": "src/test/java/org/apache/commons/codec/digest/MurmurHash3Test.java",
                    "full name": "src.test.java.org.apache.commons.codec.digest.MurmurHash3Test.testHash32WithTrailingNegativeSignedBytesIsInvalid"
                },
                {
                    "function name": "testHash32LongSeed",
                    "function params": [],
                    "file name": "MurmurHash3Test.java",
                    "file old path": "src/test/java/org/apache/commons/codec/digest/MurmurHash3Test.java",
                    "file new path": "src/test/java/org/apache/commons/codec/digest/MurmurHash3Test.java",
                    "full name": "src.test.java.org.apache.commons.codec.digest.MurmurHash3Test.testHash32LongSeed"
                },
                {
                    "function name": "testHash32Long",
                    "function params": [],
                    "file name": "MurmurHash3Test.java",
                    "file old path": "src/test/java/org/apache/commons/codec/digest/MurmurHash3Test.java",
                    "file new path": "src/test/java/org/apache/commons/codec/digest/MurmurHash3Test.java",
                    "full name": "src.test.java.org.apache.commons.codec.digest.MurmurHash3Test.testHash32Long"
                },
                {
                    "function name": "testHash64",
                    "function params": [],
                    "file name": "MurmurHash3Test.java",
                    "file old path": "src/test/java/org/apache/commons/codec/digest/MurmurHash3Test.java",
                    "file new path": "src/test/java/org/apache/commons/codec/digest/MurmurHash3Test.java",
                    "full name": "src.test.java.org.apache.commons.codec.digest.MurmurHash3Test.testHash64"
                },
                {
                    "function name": "testHash128WithOffsetLengthAndNegativeSeed",
                    "function params": [],
                    "file name": "MurmurHash3Test.java",
                    "file old path": "src/test/java/org/apache/commons/codec/digest/MurmurHash3Test.java",
                    "file new path": "src/test/java/org/apache/commons/codec/digest/MurmurHash3Test.java",
                    "full name": "src.test.java.org.apache.commons.codec.digest.MurmurHash3Test.testHash128WithOffsetLengthAndNegativeSeed"
                },
                {
                    "function name": "testHash64InNotEqualToHash128",
                    "function params": [],
                    "file name": "MurmurHash3Test.java",
                    "file old path": "src/test/java/org/apache/commons/codec/digest/MurmurHash3Test.java",
                    "file new path": "src/test/java/org/apache/commons/codec/digest/MurmurHash3Test.java",
                    "full name": "src.test.java.org.apache.commons.codec.digest.MurmurHash3Test.testHash64InNotEqualToHash128"
                },
                {
                    "function name": "testHash32WithLengthAndSeed",
                    "function params": [],
                    "file name": "MurmurHash3Test.java",
                    "file old path": "src/test/java/org/apache/commons/codec/digest/MurmurHash3Test.java",
                    "file new path": "src/test/java/org/apache/commons/codec/digest/MurmurHash3Test.java",
                    "full name": "src.test.java.org.apache.commons.codec.digest.MurmurHash3Test.testHash32WithLengthAndSeed"
                },
                {
                    "function name": "testHash32WithOffsetLengthAndSeed",
                    "function params": [],
                    "file name": "MurmurHash3Test.java",
                    "file old path": "src/test/java/org/apache/commons/codec/digest/MurmurHash3Test.java",
                    "file new path": "src/test/java/org/apache/commons/codec/digest/MurmurHash3Test.java",
                    "full name": "src.test.java.org.apache.commons.codec.digest.MurmurHash3Test.testHash32WithOffsetLengthAndSeed"
                },
                {
                    "function name": "testHash32x86WithOffsetLengthAndSeed",
                    "function params": [],
                    "file name": "MurmurHash3Test.java",
                    "file old path": "src/test/java/org/apache/commons/codec/digest/MurmurHash3Test.java",
                    "file new path": "src/test/java/org/apache/commons/codec/digest/MurmurHash3Test.java",
                    "full name": "src.test.java.org.apache.commons.codec.digest.MurmurHash3Test.testHash32x86WithOffsetLengthAndSeed"
                },
                {
                    "function name": "testHash32",
                    "function params": [],
                    "file name": "MurmurHash3Test.java",
                    "file old path": "src/test/java/org/apache/commons/codec/digest/MurmurHash3Test.java",
                    "file new path": "src/test/java/org/apache/commons/codec/digest/MurmurHash3Test.java",
                    "full name": "src.test.java.org.apache.commons.codec.digest.MurmurHash3Test.testHash32"
                },
                {
                    "function name": "testHash32WithLength",
                    "function params": [],
                    "file name": "MurmurHash3Test.java",
                    "file old path": "src/test/java/org/apache/commons/codec/digest/MurmurHash3Test.java",
                    "file new path": "src/test/java/org/apache/commons/codec/digest/MurmurHash3Test.java",
                    "full name": "src.test.java.org.apache.commons.codec.digest.MurmurHash3Test.testHash32WithLength"
                },
                {
                    "function name": "testHash64WithOffsetAndLength",
                    "function params": [],
                    "file name": "MurmurHash3Test.java",
                    "file old path": "src/test/java/org/apache/commons/codec/digest/MurmurHash3Test.java",
                    "file new path": "src/test/java/org/apache/commons/codec/digest/MurmurHash3Test.java",
                    "full name": "src.test.java.org.apache.commons.codec.digest.MurmurHash3Test.testHash64WithOffsetAndLength"
                },
                {
                    "function name": "testHash32String",
                    "function params": [],
                    "file name": "MurmurHash3Test.java",
                    "file old path": "src/test/java/org/apache/commons/codec/digest/MurmurHash3Test.java",
                    "file new path": "src/test/java/org/apache/commons/codec/digest/MurmurHash3Test.java",
                    "full name": "src.test.java.org.apache.commons.codec.digest.MurmurHash3Test.testHash32String"
                },
                {
                    "function name": "testIncrementalHashWithUnprocessedBytesAndHugeLengthArray",
                    "function params": [],
                    "file name": "MurmurHash3Test.java",
                    "file old path": "src/test/java/org/apache/commons/codec/digest/MurmurHash3Test.java",
                    "file new path": "src/test/java/org/apache/commons/codec/digest/MurmurHash3Test.java",
                    "full name": "src.test.java.org.apache.commons.codec.digest.MurmurHash3Test.testIncrementalHashWithUnprocessedBytesAndHugeLengthArray"
                },
                {
                    "function name": "assertIncrementalHash32",
                    "function params": [],
                    "file name": "MurmurHash3Test.java",
                    "file old path": "src/test/java/org/apache/commons/codec/digest/MurmurHash3Test.java",
                    "file new path": "src/test/java/org/apache/commons/codec/digest/MurmurHash3Test.java",
                    "full name": "src.test.java.org.apache.commons.codec.digest.MurmurHash3Test.assertIncrementalHash32"
                },
                {
                    "function name": "testHash128x64",
                    "function params": [],
                    "file name": "MurmurHash3Test.java",
                    "file old path": "src/test/java/org/apache/commons/codec/digest/MurmurHash3Test.java",
                    "file new path": "src/test/java/org/apache/commons/codec/digest/MurmurHash3Test.java",
                    "full name": "src.test.java.org.apache.commons.codec.digest.MurmurHash3Test.testHash128x64"
                },
                {
                    "function name": "testHash32x86",
                    "function params": [],
                    "file name": "MurmurHash3Test.java",
                    "file old path": "src/test/java/org/apache/commons/codec/digest/MurmurHash3Test.java",
                    "file new path": "src/test/java/org/apache/commons/codec/digest/MurmurHash3Test.java",
                    "full name": "src.test.java.org.apache.commons.codec.digest.MurmurHash3Test.testHash32x86"
                },
                {
                    "function name": "testHash32x86WithTrailingNegativeSignedBytes",
                    "function params": [],
                    "file name": "MurmurHash3Test.java",
                    "file old path": "src/test/java/org/apache/commons/codec/digest/MurmurHash3Test.java",
                    "file new path": "src/test/java/org/apache/commons/codec/digest/MurmurHash3Test.java",
                    "full name": "src.test.java.org.apache.commons.codec.digest.MurmurHash3Test.testHash32x86WithTrailingNegativeSignedBytes"
                },
                {
                    "function name": "testHash128x64WithOffsetLengthAndSeed",
                    "function params": [],
                    "file name": "MurmurHash3Test.java",
                    "file old path": "src/test/java/org/apache/commons/codec/digest/MurmurHash3Test.java",
                    "file new path": "src/test/java/org/apache/commons/codec/digest/MurmurHash3Test.java",
                    "full name": "src.test.java.org.apache.commons.codec.digest.MurmurHash3Test.testHash128x64WithOffsetLengthAndSeed"
                },
                {
                    "function name": "testHash128",
                    "function params": [],
                    "file name": "MurmurHash3Test.java",
                    "file old path": "src/test/java/org/apache/commons/codec/digest/MurmurHash3Test.java",
                    "file new path": "src/test/java/org/apache/commons/codec/digest/MurmurHash3Test.java",
                    "full name": "src.test.java.org.apache.commons.codec.digest.MurmurHash3Test.testHash128"
                },
                {
                    "function name": "testHash32LongLong",
                    "function params": [],
                    "file name": "MurmurHash3Test.java",
                    "file old path": "src/test/java/org/apache/commons/codec/digest/MurmurHash3Test.java",
                    "file new path": "src/test/java/org/apache/commons/codec/digest/MurmurHash3Test.java",
                    "full name": "src.test.java.org.apache.commons.codec.digest.MurmurHash3Test.testHash32LongLong"
                },
                {
                    "function name": "testHash128x64WithOffsetLengthAndNegativeSeed",
                    "function params": [],
                    "file name": "MurmurHash3Test.java",
                    "file old path": "src/test/java/org/apache/commons/codec/digest/MurmurHash3Test.java",
                    "file new path": "src/test/java/org/apache/commons/codec/digest/MurmurHash3Test.java",
                    "full name": "src.test.java.org.apache.commons.codec.digest.MurmurHash3Test.testHash128x64WithOffsetLengthAndNegativeSeed"
                },
                {
                    "function name": "testHash128WithOffsetLengthAndSeed",
                    "function params": [],
                    "file name": "MurmurHash3Test.java",
                    "file old path": "src/test/java/org/apache/commons/codec/digest/MurmurHash3Test.java",
                    "file new path": "src/test/java/org/apache/commons/codec/digest/MurmurHash3Test.java",
                    "full name": "src.test.java.org.apache.commons.codec.digest.MurmurHash3Test.testHash128WithOffsetLengthAndSeed"
                },
                {
                    "function name": "testHash64WithPrimitives",
                    "function params": [],
                    "file name": "MurmurHash3Test.java",
                    "file old path": "src/test/java/org/apache/commons/codec/digest/MurmurHash3Test.java",
                    "file new path": "src/test/java/org/apache/commons/codec/digest/MurmurHash3Test.java",
                    "full name": "src.test.java.org.apache.commons.codec.digest.MurmurHash3Test.testHash64WithPrimitives"
                },
                {
                    "function name": "assertIncrementalHash32x86",
                    "function params": [],
                    "file name": "MurmurHash3Test.java",
                    "file old path": "src/test/java/org/apache/commons/codec/digest/MurmurHash3Test.java",
                    "file new path": "src/test/java/org/apache/commons/codec/digest/MurmurHash3Test.java",
                    "full name": "src.test.java.org.apache.commons.codec.digest.MurmurHash3Test.assertIncrementalHash32x86"
                },
                {
                    "function name": "testHash128String",
                    "function params": [],
                    "file name": "MurmurHash3Test.java",
                    "file old path": "src/test/java/org/apache/commons/codec/digest/MurmurHash3Test.java",
                    "file new path": "src/test/java/org/apache/commons/codec/digest/MurmurHash3Test.java",
                    "full name": "src.test.java.org.apache.commons.codec.digest.MurmurHash3Test.testHash128String"
                },
                {
                    "function name": "check",
                    "function params": [
                        "expected"
                    ],
                    "file name": "PureJavaCrc32CTest.java",
                    "file old path": "src/test/java/org/apache/commons/codec/digest/PureJavaCrc32CTest.java",
                    "file new path": "src/test/java/org/apache/commons/codec/digest/PureJavaCrc32CTest.java",
                    "full name": "src.test.java.org.apache.commons.codec.digest.PureJavaCrc32CTest.check"
                },
                {
                    "function name": "checkSame",
                    "function params": [],
                    "file name": "PureJavaCrc32Test.java",
                    "file old path": "src/test/java/org/apache/commons/codec/digest/PureJavaCrc32Test.java",
                    "file new path": "src/test/java/org/apache/commons/codec/digest/PureJavaCrc32Test.java",
                    "full name": "src.test.java.org.apache.commons.codec.digest.PureJavaCrc32Test.checkSame"
                },
                {
                    "function name": "testIncrementalHashWithUnprocessedBytesAndHugeLengthArray",
                    "function params": [],
                    "file name": "XXHash32OverflowTest.java",
                    "file old path": "src/test/java/org/apache/commons/codec/digest/XXHash32OverflowTest.java",
                    "file new path": "src/test/java/org/apache/commons/codec/digest/XXHash32OverflowTest.java",
                    "full name": "src.test.java.org.apache.commons.codec.digest.XXHash32OverflowTest.testIncrementalHashWithUnprocessedBytesAndHugeLengthArray"
                },
                {
                    "function name": "verifyIncrementalChecksum",
                    "function params": [],
                    "file name": "XXHash32Test.java",
                    "file old path": "src/test/java/org/apache/commons/codec/digest/XXHash32Test.java",
                    "file new path": "src/test/java/org/apache/commons/codec/digest/XXHash32Test.java",
                    "full name": "src.test.java.org.apache.commons.codec.digest.XXHash32Test.verifyIncrementalChecksum"
                },
                {
                    "function name": "initData",
                    "function params": [
                        "path",
                        "c"
                    ],
                    "file name": "XXHash32Test.java",
                    "file old path": "src/test/java/org/apache/commons/codec/digest/XXHash32Test.java",
                    "file new path": "src/test/java/org/apache/commons/codec/digest/XXHash32Test.java",
                    "full name": "src.test.java.org.apache.commons.codec.digest.XXHash32Test.initData"
                },
                {
                    "function name": "verifyIncrementalChecksum",
                    "function params": [
                        "path",
                        "c"
                    ],
                    "file name": "XXHash32Test.java",
                    "file old path": "src/test/java/org/apache/commons/codec/digest/XXHash32Test.java",
                    "file new path": "src/test/java/org/apache/commons/codec/digest/XXHash32Test.java",
                    "full name": "src.test.java.org.apache.commons.codec.digest.XXHash32Test.verifyIncrementalChecksum"
                },
                {
                    "function name": "verifyChecksum",
                    "function params": [
                        "path",
                        "c"
                    ],
                    "file name": "XXHash32Test.java",
                    "file old path": "src/test/java/org/apache/commons/codec/digest/XXHash32Test.java",
                    "file new path": "src/test/java/org/apache/commons/codec/digest/XXHash32Test.java",
                    "full name": "src.test.java.org.apache.commons.codec.digest.XXHash32Test.verifyChecksum"
                },
                {
                    "function name": "data",
                    "function params": [],
                    "file name": "XXHash32Test.java",
                    "file old path": "src/test/java/org/apache/commons/codec/digest/XXHash32Test.java",
                    "file new path": "src/test/java/org/apache/commons/codec/digest/XXHash32Test.java",
                    "full name": "src.test.java.org.apache.commons.codec.digest.XXHash32Test.data"
                },
                {
                    "function name": "verifyChecksum",
                    "function params": [],
                    "file name": "XXHash32Test.java",
                    "file old path": "src/test/java/org/apache/commons/codec/digest/XXHash32Test.java",
                    "file new path": "src/test/java/org/apache/commons/codec/digest/XXHash32Test.java",
                    "full name": "src.test.java.org.apache.commons.codec.digest.XXHash32Test.verifyChecksum"
                },
                {
                    "function name": "testIsCaverphoneEquals",
                    "function params": [],
                    "file name": "Caverphone1Test.java",
                    "file old path": "src/test/java/org/apache/commons/codec/language/Caverphone1Test.java",
                    "file new path": "src/test/java/org/apache/commons/codec/language/Caverphone1Test.java",
                    "full name": "src.test.java.org.apache.commons.codec.language.Caverphone1Test.testIsCaverphoneEquals"
                },
                {
                    "function name": "testIsCaverphoneEquals",
                    "function params": [],
                    "file name": "Caverphone2Test.java",
                    "file old path": "src/test/java/org/apache/commons/codec/language/Caverphone2Test.java",
                    "file new path": "src/test/java/org/apache/commons/codec/language/Caverphone2Test.java",
                    "full name": "src.test.java.org.apache.commons.codec.language.Caverphone2Test.testIsCaverphoneEquals"
                },
                {
                    "function name": "testIsEncodeEquals",
                    "function params": [],
                    "file name": "ColognePhoneticTest.java",
                    "file old path": "src/test/java/org/apache/commons/codec/language/ColognePhoneticTest.java",
                    "file new path": "src/test/java/org/apache/commons/codec/language/ColognePhoneticTest.java",
                    "full name": "src.test.java.org.apache.commons.codec.language.ColognePhoneticTest.testIsEncodeEquals"
                },
                {
                    "function name": "testCanFail",
                    "function params": [],
                    "file name": "ColognePhoneticTest.java",
                    "file old path": "src/test/java/org/apache/commons/codec/language/ColognePhoneticTest.java",
                    "file new path": "src/test/java/org/apache/commons/codec/language/ColognePhoneticTest.java",
                    "full name": "src.test.java.org.apache.commons.codec.language.ColognePhoneticTest.testCanFail"
                },
                {
                    "function name": "finishTests",
                    "function params": [],
                    "file name": "ColognePhoneticTest.java",
                    "file old path": "src/test/java/org/apache/commons/codec/language/ColognePhoneticTest.java",
                    "file new path": "src/test/java/org/apache/commons/codec/language/ColognePhoneticTest.java",
                    "full name": "src.test.java.org.apache.commons.codec.language.ColognePhoneticTest.finishTests"
                },
                {
                    "function name": "testSoundexBasic",
                    "function params": [],
                    "file name": "DaitchMokotoffSoundexTest.java",
                    "file old path": "src/test/java/org/apache/commons/codec/language/DaitchMokotoffSoundexTest.java",
                    "file new path": "src/test/java/org/apache/commons/codec/language/DaitchMokotoffSoundexTest.java",
                    "full name": "src.test.java.org.apache.commons.codec.language.DaitchMokotoffSoundexTest.testSoundexBasic"
                },
                {
                    "function name": "testEncodeBasic",
                    "function params": [],
                    "file name": "DaitchMokotoffSoundexTest.java",
                    "file old path": "src/test/java/org/apache/commons/codec/language/DaitchMokotoffSoundexTest.java",
                    "file new path": "src/test/java/org/apache/commons/codec/language/DaitchMokotoffSoundexTest.java",
                    "full name": "src.test.java.org.apache.commons.codec.language.DaitchMokotoffSoundexTest.testEncodeBasic"
                },
                {
                    "function name": "testEncodeIgnoreTrimmable",
                    "function params": [],
                    "file name": "DaitchMokotoffSoundexTest.java",
                    "file old path": "src/test/java/org/apache/commons/codec/language/DaitchMokotoffSoundexTest.java",
                    "file new path": "src/test/java/org/apache/commons/codec/language/DaitchMokotoffSoundexTest.java",
                    "full name": "src.test.java.org.apache.commons.codec.language.DaitchMokotoffSoundexTest.testEncodeIgnoreTrimmable"
                },
                {
                    "function name": "testAccentedCharacterFolding",
                    "function params": [],
                    "file name": "DaitchMokotoffSoundexTest.java",
                    "file old path": "src/test/java/org/apache/commons/codec/language/DaitchMokotoffSoundexTest.java",
                    "file new path": "src/test/java/org/apache/commons/codec/language/DaitchMokotoffSoundexTest.java",
                    "full name": "src.test.java.org.apache.commons.codec.language.DaitchMokotoffSoundexTest.testAccentedCharacterFolding"
                },
                {
                    "function name": "testSpecialRomanianCharacters",
                    "function params": [],
                    "file name": "DaitchMokotoffSoundexTest.java",
                    "file old path": "src/test/java/org/apache/commons/codec/language/DaitchMokotoffSoundexTest.java",
                    "file new path": "src/test/java/org/apache/commons/codec/language/DaitchMokotoffSoundexTest.java",
                    "full name": "src.test.java.org.apache.commons.codec.language.DaitchMokotoffSoundexTest.testSpecialRomanianCharacters"
                },
                {
                    "function name": "testAdjacentCodes",
                    "function params": [],
                    "file name": "DaitchMokotoffSoundexTest.java",
                    "file old path": "src/test/java/org/apache/commons/codec/language/DaitchMokotoffSoundexTest.java",
                    "file new path": "src/test/java/org/apache/commons/codec/language/DaitchMokotoffSoundexTest.java",
                    "full name": "src.test.java.org.apache.commons.codec.language.DaitchMokotoffSoundexTest.testAdjacentCodes"
                },
                {
                    "function name": "testSoundexBasic3",
                    "function params": [],
                    "file name": "DaitchMokotoffSoundexTest.java",
                    "file old path": "src/test/java/org/apache/commons/codec/language/DaitchMokotoffSoundexTest.java",
                    "file new path": "src/test/java/org/apache/commons/codec/language/DaitchMokotoffSoundexTest.java",
                    "full name": "src.test.java.org.apache.commons.codec.language.DaitchMokotoffSoundexTest.testSoundexBasic3"
                },
                {
                    "function name": "testSoundexBasic2",
                    "function params": [],
                    "file name": "DaitchMokotoffSoundexTest.java",
                    "file old path": "src/test/java/org/apache/commons/codec/language/DaitchMokotoffSoundexTest.java",
                    "file new path": "src/test/java/org/apache/commons/codec/language/DaitchMokotoffSoundexTest.java",
                    "full name": "src.test.java.org.apache.commons.codec.language.DaitchMokotoffSoundexTest.testSoundexBasic2"
                },
                {
                    "function name": "checkDoubleMetaphone",
                    "function params": [
                        "typeIndex",
                        "alternate"
                    ],
                    "file name": "DoubleMetaphone2Test.java",
                    "file old path": "src/test/java/org/apache/commons/codec/language/DoubleMetaphone2Test.java",
                    "file new path": "src/test/java/org/apache/commons/codec/language/DoubleMetaphone2Test.java",
                    "full name": "src.test.java.org.apache.commons.codec.language.DoubleMetaphone2Test.checkDoubleMetaphone"
                },
                {
                    "function name": "assertDoubleMetaphone",
                    "function params": [
                        "expected",
                        "source"
                    ],
                    "file name": "DoubleMetaphoneTest.java",
                    "file old path": "src/test/java/org/apache/commons/codec/language/DoubleMetaphoneTest.java",
                    "file new path": "src/test/java/org/apache/commons/codec/language/DoubleMetaphoneTest.java",
                    "full name": "src.test.java.org.apache.commons.codec.language.DoubleMetaphoneTest.assertDoubleMetaphone"
                },
                {
                    "function name": "testSetMaxCodeLength",
                    "function params": [],
                    "file name": "DoubleMetaphoneTest.java",
                    "file old path": "src/test/java/org/apache/commons/codec/language/DoubleMetaphoneTest.java",
                    "file new path": "src/test/java/org/apache/commons/codec/language/DoubleMetaphoneTest.java",
                    "full name": "src.test.java.org.apache.commons.codec.language.DoubleMetaphoneTest.testSetMaxCodeLength"
                },
                {
                    "function name": "doubleMetaphoneEqualTest",
                    "function params": [
                        "pairs",
                        "useAlternate"
                    ],
                    "file name": "DoubleMetaphoneTest.java",
                    "file old path": "src/test/java/org/apache/commons/codec/language/DoubleMetaphoneTest.java",
                    "file new path": "src/test/java/org/apache/commons/codec/language/DoubleMetaphoneTest.java",
                    "full name": "src.test.java.org.apache.commons.codec.language.DoubleMetaphoneTest.doubleMetaphoneEqualTest"
                },
                {
                    "function name": "assertIsMetaphoneEqual",
                    "function params": [
                        "source",
                        "matches"
                    ],
                    "file name": "MetaphoneTest.java",
                    "file old path": "src/test/java/org/apache/commons/codec/language/MetaphoneTest.java",
                    "file new path": "src/test/java/org/apache/commons/codec/language/MetaphoneTest.java",
                    "full name": "src.test.java.org.apache.commons.codec.language.MetaphoneTest.assertIsMetaphoneEqual"
                },
                {
                    "function name": "assertMetaphoneEqual",
                    "function params": [
                        "pairs"
                    ],
                    "file name": "MetaphoneTest.java",
                    "file old path": "src/test/java/org/apache/commons/codec/language/MetaphoneTest.java",
                    "file new path": "src/test/java/org/apache/commons/codec/language/MetaphoneTest.java",
                    "full name": "src.test.java.org.apache.commons.codec.language.MetaphoneTest.assertMetaphoneEqual"
                },
                {
                    "function name": "assertEncodings",
                    "function params": [
                        "testValues"
                    ],
                    "file name": "NysiisTest.java",
                    "file old path": "src/test/java/org/apache/commons/codec/language/NysiisTest.java",
                    "file new path": "src/test/java/org/apache/commons/codec/language/NysiisTest.java",
                    "full name": "src.test.java.org.apache.commons.codec.language.NysiisTest.assertEncodings"
                },
                {
                    "function name": "testTrueVariant",
                    "function params": [],
                    "file name": "NysiisTest.java",
                    "file old path": "src/test/java/org/apache/commons/codec/language/NysiisTest.java",
                    "file new path": "src/test/java/org/apache/commons/codec/language/NysiisTest.java",
                    "full name": "src.test.java.org.apache.commons.codec.language.NysiisTest.testTrueVariant"
                },
                {
                    "function name": "encodeAll",
                    "function params": [
                        "strings",
                        "expectedEncoding"
                    ],
                    "file name": "NysiisTest.java",
                    "file old path": "src/test/java/org/apache/commons/codec/language/NysiisTest.java",
                    "file new path": "src/test/java/org/apache/commons/codec/language/NysiisTest.java",
                    "full name": "src.test.java.org.apache.commons.codec.language.NysiisTest.encodeAll"
                },
                {
                    "function name": "testGetMappingCodeNonLetter",
                    "function params": [],
                    "file name": "RefinedSoundexTest.java",
                    "file old path": "src/test/java/org/apache/commons/codec/language/RefinedSoundexTest.java",
                    "file new path": "src/test/java/org/apache/commons/codec/language/RefinedSoundexTest.java",
                    "full name": "src.test.java.org.apache.commons.codec.language.RefinedSoundexTest.testGetMappingCodeNonLetter"
                },
                {
                    "function name": "testHWRuleEx2",
                    "function params": [],
                    "file name": "SoundexTest.java",
                    "file old path": "src/test/java/org/apache/commons/codec/language/SoundexTest.java",
                    "file new path": "src/test/java/org/apache/commons/codec/language/SoundexTest.java",
                    "full name": "src.test.java.org.apache.commons.codec.language.SoundexTest.testHWRuleEx2"
                },
                {
                    "function name": "testHWRuleEx3",
                    "function params": [],
                    "file name": "SoundexTest.java",
                    "file old path": "src/test/java/org/apache/commons/codec/language/SoundexTest.java",
                    "file new path": "src/test/java/org/apache/commons/codec/language/SoundexTest.java",
                    "full name": "src.test.java.org.apache.commons.codec.language.SoundexTest.testHWRuleEx3"
                },
                {
                    "function name": "testEncodeBatch4",
                    "function params": [],
                    "file name": "SoundexTest.java",
                    "file old path": "src/test/java/org/apache/commons/codec/language/SoundexTest.java",
                    "file new path": "src/test/java/org/apache/commons/codec/language/SoundexTest.java",
                    "full name": "src.test.java.org.apache.commons.codec.language.SoundexTest.testEncodeBatch4"
                },
                {
                    "function name": "testDifference",
                    "function params": [],
                    "file name": "SoundexTest.java",
                    "file old path": "src/test/java/org/apache/commons/codec/language/SoundexTest.java",
                    "file new path": "src/test/java/org/apache/commons/codec/language/SoundexTest.java",
                    "full name": "src.test.java.org.apache.commons.codec.language.SoundexTest.testDifference"
                },
                {
                    "function name": "testGenealogy",
                    "function params": [],
                    "file name": "SoundexTest.java",
                    "file old path": "src/test/java/org/apache/commons/codec/language/SoundexTest.java",
                    "file new path": "src/test/java/org/apache/commons/codec/language/SoundexTest.java",
                    "full name": "src.test.java.org.apache.commons.codec.language.SoundexTest.testGenealogy"
                },
                {
                    "function name": "testUsEnglishStatic",
                    "function params": [],
                    "file name": "SoundexTest.java",
                    "file old path": "src/test/java/org/apache/commons/codec/language/SoundexTest.java",
                    "file new path": "src/test/java/org/apache/commons/codec/language/SoundexTest.java",
                    "full name": "src.test.java.org.apache.commons.codec.language.SoundexTest.testUsEnglishStatic"
                },
                {
                    "function name": "testWikipediaAmericanSoundex",
                    "function params": [],
                    "file name": "SoundexTest.java",
                    "file old path": "src/test/java/org/apache/commons/codec/language/SoundexTest.java",
                    "file new path": "src/test/java/org/apache/commons/codec/language/SoundexTest.java",
                    "full name": "src.test.java.org.apache.commons.codec.language.SoundexTest.testWikipediaAmericanSoundex"
                },
                {
                    "function name": "testSimplifiedSoundex",
                    "function params": [],
                    "file name": "SoundexTest.java",
                    "file old path": "src/test/java/org/apache/commons/codec/language/SoundexTest.java",
                    "file new path": "src/test/java/org/apache/commons/codec/language/SoundexTest.java",
                    "full name": "src.test.java.org.apache.commons.codec.language.SoundexTest.testSimplifiedSoundex"
                },
                {
                    "function name": "testUsMappingOWithDiaeresis",
                    "function params": [],
                    "file name": "SoundexTest.java",
                    "file old path": "src/test/java/org/apache/commons/codec/language/SoundexTest.java",
                    "file new path": "src/test/java/org/apache/commons/codec/language/SoundexTest.java",
                    "full name": "src.test.java.org.apache.commons.codec.language.SoundexTest.testUsMappingOWithDiaeresis"
                },
                {
                    "function name": "testNewInstance3",
                    "function params": [],
                    "file name": "SoundexTest.java",
                    "file old path": "src/test/java/org/apache/commons/codec/language/SoundexTest.java",
                    "file new path": "src/test/java/org/apache/commons/codec/language/SoundexTest.java",
                    "full name": "src.test.java.org.apache.commons.codec.language.SoundexTest.testNewInstance3"
                },
                {
                    "function name": "testNewInstance2",
                    "function params": [],
                    "file name": "SoundexTest.java",
                    "file old path": "src/test/java/org/apache/commons/codec/language/SoundexTest.java",
                    "file new path": "src/test/java/org/apache/commons/codec/language/SoundexTest.java",
                    "full name": "src.test.java.org.apache.commons.codec.language.SoundexTest.testNewInstance2"
                },
                {
                    "function name": "testSoundexUtilsNullBehaviour",
                    "function params": [],
                    "file name": "SoundexTest.java",
                    "file old path": "src/test/java/org/apache/commons/codec/language/SoundexTest.java",
                    "file new path": "src/test/java/org/apache/commons/codec/language/SoundexTest.java",
                    "full name": "src.test.java.org.apache.commons.codec.language.SoundexTest.testSoundexUtilsNullBehaviour"
                },
                {
                    "function name": "testMsSqlServer3",
                    "function params": [],
                    "file name": "SoundexTest.java",
                    "file old path": "src/test/java/org/apache/commons/codec/language/SoundexTest.java",
                    "file new path": "src/test/java/org/apache/commons/codec/language/SoundexTest.java",
                    "full name": "src.test.java.org.apache.commons.codec.language.SoundexTest.testMsSqlServer3"
                },
                {
                    "function name": "testHWRuleEx1",
                    "function params": [],
                    "file name": "SoundexTest.java",
                    "file old path": "src/test/java/org/apache/commons/codec/language/SoundexTest.java",
                    "file new path": "src/test/java/org/apache/commons/codec/language/SoundexTest.java",
                    "full name": "src.test.java.org.apache.commons.codec.language.SoundexTest.testHWRuleEx1"
                },
                {
                    "function name": "testEncodeBasic",
                    "function params": [],
                    "file name": "SoundexTest.java",
                    "file old path": "src/test/java/org/apache/commons/codec/language/SoundexTest.java",
                    "file new path": "src/test/java/org/apache/commons/codec/language/SoundexTest.java",
                    "full name": "src.test.java.org.apache.commons.codec.language.SoundexTest.testEncodeBasic"
                },
                {
                    "function name": "testEncodeBatch2",
                    "function params": [],
                    "file name": "SoundexTest.java",
                    "file old path": "src/test/java/org/apache/commons/codec/language/SoundexTest.java",
                    "file new path": "src/test/java/org/apache/commons/codec/language/SoundexTest.java",
                    "full name": "src.test.java.org.apache.commons.codec.language.SoundexTest.testEncodeBatch2"
                },
                {
                    "function name": "testBadCharacters",
                    "function params": [],
                    "file name": "SoundexTest.java",
                    "file old path": "src/test/java/org/apache/commons/codec/language/SoundexTest.java",
                    "file new path": "src/test/java/org/apache/commons/codec/language/SoundexTest.java",
                    "full name": "src.test.java.org.apache.commons.codec.language.SoundexTest.testBadCharacters"
                },
                {
                    "function name": "testEncodeIgnoreTrimmable",
                    "function params": [],
                    "file name": "SoundexTest.java",
                    "file old path": "src/test/java/org/apache/commons/codec/language/SoundexTest.java",
                    "file new path": "src/test/java/org/apache/commons/codec/language/SoundexTest.java",
                    "full name": "src.test.java.org.apache.commons.codec.language.SoundexTest.testEncodeIgnoreTrimmable"
                },
                {
                    "function name": "testEncodeBatch3",
                    "function params": [],
                    "file name": "SoundexTest.java",
                    "file old path": "src/test/java/org/apache/commons/codec/language/SoundexTest.java",
                    "file new path": "src/test/java/org/apache/commons/codec/language/SoundexTest.java",
                    "full name": "src.test.java.org.apache.commons.codec.language.SoundexTest.testEncodeBatch3"
                },
                {
                    "function name": "testNewInstance",
                    "function params": [],
                    "file name": "SoundexTest.java",
                    "file old path": "src/test/java/org/apache/commons/codec/language/SoundexTest.java",
                    "file new path": "src/test/java/org/apache/commons/codec/language/SoundexTest.java",
                    "full name": "src.test.java.org.apache.commons.codec.language.SoundexTest.testNewInstance"
                },
                {
                    "function name": "testUsMappingEWithAcute",
                    "function params": [],
                    "file name": "SoundexTest.java",
                    "file old path": "src/test/java/org/apache/commons/codec/language/SoundexTest.java",
                    "file new path": "src/test/java/org/apache/commons/codec/language/SoundexTest.java",
                    "full name": "src.test.java.org.apache.commons.codec.language.SoundexTest.testUsMappingEWithAcute"
                },
                {
                    "function name": "testMsSqlServer1",
                    "function params": [],
                    "file name": "SoundexTest.java",
                    "file old path": "src/test/java/org/apache/commons/codec/language/SoundexTest.java",
                    "file new path": "src/test/java/org/apache/commons/codec/language/SoundexTest.java",
                    "full name": "src.test.java.org.apache.commons.codec.language.SoundexTest.testMsSqlServer1"
                },
                {
                    "function name": "assertNotEmpty",
                    "function params": [
                        "bmpm",
                        "value"
                    ],
                    "file name": "BeiderMorseEncoderTest.java",
                    "file old path": "src/test/java/org/apache/commons/codec/language/bm/BeiderMorseEncoderTest.java",
                    "file new path": "src/test/java/org/apache/commons/codec/language/bm/BeiderMorseEncoderTest.java",
                    "full name": "src.test.java.org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.assertNotEmpty"
                },
                {
                    "function name": "testSetConcat",
                    "function params": [],
                    "file name": "BeiderMorseEncoderTest.java",
                    "file old path": "src/test/java/org/apache/commons/codec/language/bm/BeiderMorseEncoderTest.java",
                    "file new path": "src/test/java/org/apache/commons/codec/language/bm/BeiderMorseEncoderTest.java",
                    "full name": "src.test.java.org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testSetConcat"
                },
                {
                    "function name": "testSetRuleTypeExact",
                    "function params": [],
                    "file name": "BeiderMorseEncoderTest.java",
                    "file old path": "src/test/java/org/apache/commons/codec/language/bm/BeiderMorseEncoderTest.java",
                    "file new path": "src/test/java/org/apache/commons/codec/language/bm/BeiderMorseEncoderTest.java",
                    "full name": "src.test.java.org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testSetRuleTypeExact"
                },
                {
                    "function name": "testSetNameTypeAsh",
                    "function params": [],
                    "file name": "BeiderMorseEncoderTest.java",
                    "file old path": "src/test/java/org/apache/commons/codec/language/bm/BeiderMorseEncoderTest.java",
                    "file new path": "src/test/java/org/apache/commons/codec/language/bm/BeiderMorseEncoderTest.java",
                    "full name": "src.test.java.org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testSetNameTypeAsh"
                },
                {
                    "function name": "testLongestEnglishSurname",
                    "function params": [],
                    "file name": "BeiderMorseEncoderTest.java",
                    "file old path": "src/test/java/org/apache/commons/codec/language/bm/BeiderMorseEncoderTest.java",
                    "file new path": "src/test/java/org/apache/commons/codec/language/bm/BeiderMorseEncoderTest.java",
                    "full name": "src.test.java.org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testLongestEnglishSurname"
                },
                {
                    "function name": "testLanguageGuessing",
                    "function params": [
                        "name",
                        "language"
                    ],
                    "file name": "LanguageGuessingTest.java",
                    "file old path": "src/test/java/org/apache/commons/codec/language/bm/LanguageGuessingTest.java",
                    "file new path": "src/test/java/org/apache/commons/codec/language/bm/LanguageGuessingTest.java",
                    "full name": "src.test.java.org.apache.commons.codec.language.bm.LanguageGuessingTest.testLanguageGuessing"
                },
                {
                    "function name": "testLanguageGuessing",
                    "function params": [],
                    "file name": "LanguageGuessingTest.java",
                    "file old path": "src/test/java/org/apache/commons/codec/language/bm/LanguageGuessingTest.java",
                    "file new path": "src/test/java/org/apache/commons/codec/language/bm/LanguageGuessingTest.java",
                    "full name": "src.test.java.org.apache.commons.codec.language.bm.LanguageGuessingTest.testLanguageGuessing"
                },
                {
                    "function name": "data",
                    "function params": [],
                    "file name": "LanguageGuessingTest.java",
                    "file old path": "src/test/java/org/apache/commons/codec/language/bm/LanguageGuessingTest.java",
                    "file new path": "src/test/java/org/apache/commons/codec/language/bm/LanguageGuessingTest.java",
                    "full name": "src.test.java.org.apache.commons.codec.language.bm.LanguageGuessingTest.data"
                },
                {
                    "function name": "testSolrGENERIC",
                    "function params": [],
                    "file name": "PhoneticEngineRegressionTest.java",
                    "file old path": "src/test/java/org/apache/commons/codec/language/bm/PhoneticEngineRegressionTest.java",
                    "file new path": "src/test/java/org/apache/commons/codec/language/bm/PhoneticEngineRegressionTest.java",
                    "full name": "src.test.java.org.apache.commons.codec.language.bm.PhoneticEngineRegressionTest.testSolrGENERIC"
                },
                {
                    "function name": "testSolrSEPHARDIC",
                    "function params": [],
                    "file name": "PhoneticEngineRegressionTest.java",
                    "file old path": "src/test/java/org/apache/commons/codec/language/bm/PhoneticEngineRegressionTest.java",
                    "file new path": "src/test/java/org/apache/commons/codec/language/bm/PhoneticEngineRegressionTest.java",
                    "full name": "src.test.java.org.apache.commons.codec.language.bm.PhoneticEngineRegressionTest.testSolrSEPHARDIC"
                },
                {
                    "function name": "testSolrASHKENAZI",
                    "function params": [],
                    "file name": "PhoneticEngineRegressionTest.java",
                    "file old path": "src/test/java/org/apache/commons/codec/language/bm/PhoneticEngineRegressionTest.java",
                    "file new path": "src/test/java/org/apache/commons/codec/language/bm/PhoneticEngineRegressionTest.java",
                    "full name": "src.test.java.org.apache.commons.codec.language.bm.PhoneticEngineRegressionTest.testSolrASHKENAZI"
                },
                {
                    "function name": "testCompatibilityWithOriginalVersion",
                    "function params": [],
                    "file name": "PhoneticEngineRegressionTest.java",
                    "file old path": "src/test/java/org/apache/commons/codec/language/bm/PhoneticEngineRegressionTest.java",
                    "file new path": "src/test/java/org/apache/commons/codec/language/bm/PhoneticEngineRegressionTest.java",
                    "full name": "src.test.java.org.apache.commons.codec.language.bm.PhoneticEngineRegressionTest.testCompatibilityWithOriginalVersion"
                },
                {
                    "function name": "testEncode",
                    "function params": [
                        "name",
                        "phoneticExpected",
                        "nameType",
                        "ruleType",
                        "concat",
                        "maxPhonemes"
                    ],
                    "file name": "PhoneticEngineTest.java",
                    "file old path": "src/test/java/org/apache/commons/codec/language/bm/PhoneticEngineTest.java",
                    "file new path": "src/test/java/org/apache/commons/codec/language/bm/PhoneticEngineTest.java",
                    "full name": "src.test.java.org.apache.commons.codec.language.bm.PhoneticEngineTest.testEncode"
                },
                {
                    "function name": "testEncode",
                    "function params": [],
                    "file name": "PhoneticEngineTest.java",
                    "file old path": "src/test/java/org/apache/commons/codec/language/bm/PhoneticEngineTest.java",
                    "file new path": "src/test/java/org/apache/commons/codec/language/bm/PhoneticEngineTest.java",
                    "full name": "src.test.java.org.apache.commons.codec.language.bm.PhoneticEngineTest.testEncode"
                },
                {
                    "function name": "data",
                    "function params": [],
                    "file name": "PhoneticEngineTest.java",
                    "file old path": "src/test/java/org/apache/commons/codec/language/bm/PhoneticEngineTest.java",
                    "file new path": "src/test/java/org/apache/commons/codec/language/bm/PhoneticEngineTest.java",
                    "full name": "src.test.java.org.apache.commons.codec.language.bm.PhoneticEngineTest.data"
                },
                {
                    "function name": "testPhonemeComparedToLaterIsNegative",
                    "function params": [],
                    "file name": "RuleTest.java",
                    "file old path": "src/test/java/org/apache/commons/codec/language/bm/RuleTest.java",
                    "file new path": "src/test/java/org/apache/commons/codec/language/bm/RuleTest.java",
                    "full name": "src.test.java.org.apache.commons.codec.language.bm.RuleTest.testPhonemeComparedToLaterIsNegative"
                },
                {
                    "function name": "testPhonemeComparedToSelfIsZero",
                    "function params": [],
                    "file name": "RuleTest.java",
                    "file old path": "src/test/java/org/apache/commons/codec/language/bm/RuleTest.java",
                    "file new path": "src/test/java/org/apache/commons/codec/language/bm/RuleTest.java",
                    "full name": "src.test.java.org.apache.commons.codec.language.bm.RuleTest.testPhonemeComparedToSelfIsZero"
                },
                {
                    "function name": "testDecodeStringWithNull",
                    "function params": [],
                    "file name": "BCodecTest.java",
                    "file old path": "src/test/java/org/apache/commons/codec/net/BCodecTest.java",
                    "file new path": "src/test/java/org/apache/commons/codec/net/BCodecTest.java",
                    "full name": "src.test.java.org.apache.commons.codec.net.BCodecTest.testDecodeStringWithNull"
                },
                {
                    "function name": "testEncodeStringWithNull",
                    "function params": [],
                    "file name": "BCodecTest.java",
                    "file old path": "src/test/java/org/apache/commons/codec/net/BCodecTest.java",
                    "file new path": "src/test/java/org/apache/commons/codec/net/BCodecTest.java",
                    "full name": "src.test.java.org.apache.commons.codec.net.BCodecTest.testEncodeStringWithNull"
                },
                {
                    "function name": "testDecodeObjects",
                    "function params": [],
                    "file name": "BCodecTest.java",
                    "file old path": "src/test/java/org/apache/commons/codec/net/BCodecTest.java",
                    "file new path": "src/test/java/org/apache/commons/codec/net/BCodecTest.java",
                    "full name": "src.test.java.org.apache.commons.codec.net.BCodecTest.testDecodeObjects"
                },
                {
                    "function name": "testBase64ImpossibleSamplesStrict",
                    "function params": [],
                    "file name": "BCodecTest.java",
                    "file old path": "src/test/java/org/apache/commons/codec/net/BCodecTest.java",
                    "file new path": "src/test/java/org/apache/commons/codec/net/BCodecTest.java",
                    "full name": "src.test.java.org.apache.commons.codec.net.BCodecTest.testBase64ImpossibleSamplesStrict"
                },
                {
                    "function name": "testEncodeDecodeNull",
                    "function params": [],
                    "file name": "BCodecTest.java",
                    "file old path": "src/test/java/org/apache/commons/codec/net/BCodecTest.java",
                    "file new path": "src/test/java/org/apache/commons/codec/net/BCodecTest.java",
                    "full name": "src.test.java.org.apache.commons.codec.net.BCodecTest.testEncodeDecodeNull"
                },
                {
                    "function name": "testBase64ImpossibleSamplesLenient",
                    "function params": [],
                    "file name": "BCodecTest.java",
                    "file old path": "src/test/java/org/apache/commons/codec/net/BCodecTest.java",
                    "file new path": "src/test/java/org/apache/commons/codec/net/BCodecTest.java",
                    "full name": "src.test.java.org.apache.commons.codec.net.BCodecTest.testBase64ImpossibleSamplesLenient"
                },
                {
                    "function name": "testBase64ImpossibleSamplesDefault",
                    "function params": [],
                    "file name": "BCodecTest.java",
                    "file old path": "src/test/java/org/apache/commons/codec/net/BCodecTest.java",
                    "file new path": "src/test/java/org/apache/commons/codec/net/BCodecTest.java",
                    "full name": "src.test.java.org.apache.commons.codec.net.BCodecTest.testBase64ImpossibleSamplesDefault"
                },
                {
                    "function name": "testEncodeObjects",
                    "function params": [],
                    "file name": "BCodecTest.java",
                    "file old path": "src/test/java/org/apache/commons/codec/net/BCodecTest.java",
                    "file new path": "src/test/java/org/apache/commons/codec/net/BCodecTest.java",
                    "full name": "src.test.java.org.apache.commons.codec.net.BCodecTest.testEncodeObjects"
                },
                {
                    "function name": "testBasicEncodeDecode",
                    "function params": [],
                    "file name": "BCodecTest.java",
                    "file old path": "src/test/java/org/apache/commons/codec/net/BCodecTest.java",
                    "file new path": "src/test/java/org/apache/commons/codec/net/BCodecTest.java",
                    "full name": "src.test.java.org.apache.commons.codec.net.BCodecTest.testBasicEncodeDecode"
                },
                {
                    "function name": "testSafeCharEncodeDecodeObject",
                    "function params": [],
                    "file name": "PercentCodecTest.java",
                    "file old path": "src/test/java/org/apache/commons/codec/net/PercentCodecTest.java",
                    "file new path": "src/test/java/org/apache/commons/codec/net/PercentCodecTest.java",
                    "full name": "src.test.java.org.apache.commons.codec.net.PercentCodecTest.testSafeCharEncodeDecodeObject"
                },
                {
                    "function name": "testPercentEncoderDecoderWithNullOrEmptyInput",
                    "function params": [],
                    "file name": "PercentCodecTest.java",
                    "file old path": "src/test/java/org/apache/commons/codec/net/PercentCodecTest.java",
                    "file new path": "src/test/java/org/apache/commons/codec/net/PercentCodecTest.java",
                    "full name": "src.test.java.org.apache.commons.codec.net.PercentCodecTest.testPercentEncoderDecoderWithNullOrEmptyInput"
                },
                {
                    "function name": "testConfigurablePercentEncoder",
                    "function params": [],
                    "file name": "PercentCodecTest.java",
                    "file old path": "src/test/java/org/apache/commons/codec/net/PercentCodecTest.java",
                    "file new path": "src/test/java/org/apache/commons/codec/net/PercentCodecTest.java",
                    "full name": "src.test.java.org.apache.commons.codec.net.PercentCodecTest.testConfigurablePercentEncoder"
                },
                {
                    "function name": "testUnsafeCharEncodeDecode",
                    "function params": [],
                    "file name": "PercentCodecTest.java",
                    "file old path": "src/test/java/org/apache/commons/codec/net/PercentCodecTest.java",
                    "file new path": "src/test/java/org/apache/commons/codec/net/PercentCodecTest.java",
                    "full name": "src.test.java.org.apache.commons.codec.net.PercentCodecTest.testUnsafeCharEncodeDecode"
                },
                {
                    "function name": "testBasicEncodeDecode",
                    "function params": [],
                    "file name": "PercentCodecTest.java",
                    "file old path": "src/test/java/org/apache/commons/codec/net/PercentCodecTest.java",
                    "file new path": "src/test/java/org/apache/commons/codec/net/PercentCodecTest.java",
                    "full name": "src.test.java.org.apache.commons.codec.net.PercentCodecTest.testBasicEncodeDecode"
                },
                {
                    "function name": "testPercentEncoderDecoderWithPlusForSpace",
                    "function params": [],
                    "file name": "PercentCodecTest.java",
                    "file old path": "src/test/java/org/apache/commons/codec/net/PercentCodecTest.java",
                    "file new path": "src/test/java/org/apache/commons/codec/net/PercentCodecTest.java",
                    "full name": "src.test.java.org.apache.commons.codec.net.PercentCodecTest.testPercentEncoderDecoderWithPlusForSpace"
                },
                {
                    "function name": "testBasicSpace",
                    "function params": [],
                    "file name": "PercentCodecTest.java",
                    "file old path": "src/test/java/org/apache/commons/codec/net/PercentCodecTest.java",
                    "file new path": "src/test/java/org/apache/commons/codec/net/PercentCodecTest.java",
                    "full name": "src.test.java.org.apache.commons.codec.net.PercentCodecTest.testBasicSpace"
                },
                {
                    "function name": "testBasicEncodeDecode",
                    "function params": [],
                    "file name": "QCodecTest.java",
                    "file old path": "src/test/java/org/apache/commons/codec/net/QCodecTest.java",
                    "file new path": "src/test/java/org/apache/commons/codec/net/QCodecTest.java",
                    "full name": "src.test.java.org.apache.commons.codec.net.QCodecTest.testBasicEncodeDecode"
                },
                {
                    "function name": "testUnsafeEncodeDecode",
                    "function params": [],
                    "file name": "QCodecTest.java",
                    "file old path": "src/test/java/org/apache/commons/codec/net/QCodecTest.java",
                    "file new path": "src/test/java/org/apache/commons/codec/net/QCodecTest.java",
                    "full name": "src.test.java.org.apache.commons.codec.net.QCodecTest.testUnsafeEncodeDecode"
                },
                {
                    "function name": "testEncodeDecodeBlanks",
                    "function params": [],
                    "file name": "QCodecTest.java",
                    "file old path": "src/test/java/org/apache/commons/codec/net/QCodecTest.java",
                    "file new path": "src/test/java/org/apache/commons/codec/net/QCodecTest.java",
                    "full name": "src.test.java.org.apache.commons.codec.net.QCodecTest.testEncodeDecodeBlanks"
                },
                {
                    "function name": "testDecodeObjects",
                    "function params": [],
                    "file name": "QCodecTest.java",
                    "file old path": "src/test/java/org/apache/commons/codec/net/QCodecTest.java",
                    "file new path": "src/test/java/org/apache/commons/codec/net/QCodecTest.java",
                    "full name": "src.test.java.org.apache.commons.codec.net.QCodecTest.testDecodeObjects"
                },
                {
                    "function name": "testEncodeDecodeNull",
                    "function params": [],
                    "file name": "QCodecTest.java",
                    "file old path": "src/test/java/org/apache/commons/codec/net/QCodecTest.java",
                    "file new path": "src/test/java/org/apache/commons/codec/net/QCodecTest.java",
                    "full name": "src.test.java.org.apache.commons.codec.net.QCodecTest.testEncodeDecodeNull"
                },
                {
                    "function name": "testEncodeObjects",
                    "function params": [],
                    "file name": "QCodecTest.java",
                    "file old path": "src/test/java/org/apache/commons/codec/net/QCodecTest.java",
                    "file new path": "src/test/java/org/apache/commons/codec/net/QCodecTest.java",
                    "full name": "src.test.java.org.apache.commons.codec.net.QCodecTest.testEncodeObjects"
                },
                {
                    "function name": "testDecodeStringWithNull",
                    "function params": [],
                    "file name": "QCodecTest.java",
                    "file old path": "src/test/java/org/apache/commons/codec/net/QCodecTest.java",
                    "file new path": "src/test/java/org/apache/commons/codec/net/QCodecTest.java",
                    "full name": "src.test.java.org.apache.commons.codec.net.QCodecTest.testDecodeStringWithNull"
                },
                {
                    "function name": "testEncodeStringWithNull",
                    "function params": [],
                    "file name": "QCodecTest.java",
                    "file old path": "src/test/java/org/apache/commons/codec/net/QCodecTest.java",
                    "file new path": "src/test/java/org/apache/commons/codec/net/QCodecTest.java",
                    "full name": "src.test.java.org.apache.commons.codec.net.QCodecTest.testEncodeStringWithNull"
                },
                {
                    "function name": "testEncodeObjects",
                    "function params": [],
                    "file name": "QuotedPrintableCodecTest.java",
                    "file old path": "src/test/java/org/apache/commons/codec/net/QuotedPrintableCodecTest.java",
                    "file new path": "src/test/java/org/apache/commons/codec/net/QuotedPrintableCodecTest.java",
                    "full name": "src.test.java.org.apache.commons.codec.net.QuotedPrintableCodecTest.testEncodeObjects"
                },
                {
                    "function name": "testUnsafeEncodeDecode",
                    "function params": [],
                    "file name": "QuotedPrintableCodecTest.java",
                    "file old path": "src/test/java/org/apache/commons/codec/net/QuotedPrintableCodecTest.java",
                    "file new path": "src/test/java/org/apache/commons/codec/net/QuotedPrintableCodecTest.java",
                    "full name": "src.test.java.org.apache.commons.codec.net.QuotedPrintableCodecTest.testUnsafeEncodeDecode"
                },
                {
                    "function name": "testSafeCharEncodeDecode",
                    "function params": [],
                    "file name": "QuotedPrintableCodecTest.java",
                    "file old path": "src/test/java/org/apache/commons/codec/net/QuotedPrintableCodecTest.java",
                    "file new path": "src/test/java/org/apache/commons/codec/net/QuotedPrintableCodecTest.java",
                    "full name": "src.test.java.org.apache.commons.codec.net.QuotedPrintableCodecTest.testSafeCharEncodeDecode"
                },
                {
                    "function name": "testDecodeInvalid",
                    "function params": [],
                    "file name": "QuotedPrintableCodecTest.java",
                    "file old path": "src/test/java/org/apache/commons/codec/net/QuotedPrintableCodecTest.java",
                    "file new path": "src/test/java/org/apache/commons/codec/net/QuotedPrintableCodecTest.java",
                    "full name": "src.test.java.org.apache.commons.codec.net.QuotedPrintableCodecTest.testDecodeInvalid"
                },
                {
                    "function name": "testDecodeObjects",
                    "function params": [],
                    "file name": "QuotedPrintableCodecTest.java",
                    "file old path": "src/test/java/org/apache/commons/codec/net/QuotedPrintableCodecTest.java",
                    "file new path": "src/test/java/org/apache/commons/codec/net/QuotedPrintableCodecTest.java",
                    "full name": "src.test.java.org.apache.commons.codec.net.QuotedPrintableCodecTest.testDecodeObjects"
                },
                {
                    "function name": "testEncodeDecodeNull",
                    "function params": [],
                    "file name": "QuotedPrintableCodecTest.java",
                    "file old path": "src/test/java/org/apache/commons/codec/net/QuotedPrintableCodecTest.java",
                    "file new path": "src/test/java/org/apache/commons/codec/net/QuotedPrintableCodecTest.java",
                    "full name": "src.test.java.org.apache.commons.codec.net.QuotedPrintableCodecTest.testEncodeDecodeNull"
                },
                {
                    "function name": "testEncodeNull",
                    "function params": [],
                    "file name": "QuotedPrintableCodecTest.java",
                    "file old path": "src/test/java/org/apache/commons/codec/net/QuotedPrintableCodecTest.java",
                    "file new path": "src/test/java/org/apache/commons/codec/net/QuotedPrintableCodecTest.java",
                    "full name": "src.test.java.org.apache.commons.codec.net.QuotedPrintableCodecTest.testEncodeNull"
                },
                {
                    "function name": "testDecodeWithNullArray",
                    "function params": [],
                    "file name": "QuotedPrintableCodecTest.java",
                    "file old path": "src/test/java/org/apache/commons/codec/net/QuotedPrintableCodecTest.java",
                    "file new path": "src/test/java/org/apache/commons/codec/net/QuotedPrintableCodecTest.java",
                    "full name": "src.test.java.org.apache.commons.codec.net.QuotedPrintableCodecTest.testDecodeWithNullArray"
                },
                {
                    "function name": "testDecodeStringWithNull",
                    "function params": [],
                    "file name": "QuotedPrintableCodecTest.java",
                    "file old path": "src/test/java/org/apache/commons/codec/net/QuotedPrintableCodecTest.java",
                    "file new path": "src/test/java/org/apache/commons/codec/net/QuotedPrintableCodecTest.java",
                    "full name": "src.test.java.org.apache.commons.codec.net.QuotedPrintableCodecTest.testDecodeStringWithNull"
                },
                {
                    "function name": "testEncodeUrlWithNullBitSet",
                    "function params": [],
                    "file name": "QuotedPrintableCodecTest.java",
                    "file old path": "src/test/java/org/apache/commons/codec/net/QuotedPrintableCodecTest.java",
                    "file new path": "src/test/java/org/apache/commons/codec/net/QuotedPrintableCodecTest.java",
                    "full name": "src.test.java.org.apache.commons.codec.net.QuotedPrintableCodecTest.testEncodeUrlWithNullBitSet"
                },
                {
                    "function name": "testBasicEncodeDecode",
                    "function params": [],
                    "file name": "QuotedPrintableCodecTest.java",
                    "file old path": "src/test/java/org/apache/commons/codec/net/QuotedPrintableCodecTest.java",
                    "file new path": "src/test/java/org/apache/commons/codec/net/QuotedPrintableCodecTest.java",
                    "full name": "src.test.java.org.apache.commons.codec.net.QuotedPrintableCodecTest.testBasicEncodeDecode"
                },
                {
                    "function name": "testEncodeStringWithNull",
                    "function params": [],
                    "file name": "QuotedPrintableCodecTest.java",
                    "file old path": "src/test/java/org/apache/commons/codec/net/QuotedPrintableCodecTest.java",
                    "file new path": "src/test/java/org/apache/commons/codec/net/QuotedPrintableCodecTest.java",
                    "full name": "src.test.java.org.apache.commons.codec.net.QuotedPrintableCodecTest.testEncodeStringWithNull"
                },
                {
                    "function name": "testSafeCharEncodeDecode",
                    "function params": [],
                    "file name": "URLCodecTest.java",
                    "file old path": "src/test/java/org/apache/commons/codec/net/URLCodecTest.java",
                    "file new path": "src/test/java/org/apache/commons/codec/net/URLCodecTest.java",
                    "full name": "src.test.java.org.apache.commons.codec.net.URLCodecTest.testSafeCharEncodeDecode"
                },
                {
                    "function name": "testInvalidEncoding",
                    "function params": [],
                    "file name": "URLCodecTest.java",
                    "file old path": "src/test/java/org/apache/commons/codec/net/URLCodecTest.java",
                    "file new path": "src/test/java/org/apache/commons/codec/net/URLCodecTest.java",
                    "full name": "src.test.java.org.apache.commons.codec.net.URLCodecTest.testInvalidEncoding"
                },
                {
                    "function name": "testEncodeObjects",
                    "function params": [],
                    "file name": "URLCodecTest.java",
                    "file old path": "src/test/java/org/apache/commons/codec/net/URLCodecTest.java",
                    "file new path": "src/test/java/org/apache/commons/codec/net/URLCodecTest.java",
                    "full name": "src.test.java.org.apache.commons.codec.net.URLCodecTest.testEncodeObjects"
                },
                {
                    "function name": "testDecodeObjects",
                    "function params": [],
                    "file name": "URLCodecTest.java",
                    "file old path": "src/test/java/org/apache/commons/codec/net/URLCodecTest.java",
                    "file new path": "src/test/java/org/apache/commons/codec/net/URLCodecTest.java",
                    "full name": "src.test.java.org.apache.commons.codec.net.URLCodecTest.testDecodeObjects"
                },
                {
                    "function name": "testDecodeInvalid",
                    "function params": [],
                    "file name": "URLCodecTest.java",
                    "file old path": "src/test/java/org/apache/commons/codec/net/URLCodecTest.java",
                    "file new path": "src/test/java/org/apache/commons/codec/net/URLCodecTest.java",
                    "full name": "src.test.java.org.apache.commons.codec.net.URLCodecTest.testDecodeInvalid"
                },
                {
                    "function name": "testUnsafeEncodeDecode",
                    "function params": [],
                    "file name": "URLCodecTest.java",
                    "file old path": "src/test/java/org/apache/commons/codec/net/URLCodecTest.java",
                    "file new path": "src/test/java/org/apache/commons/codec/net/URLCodecTest.java",
                    "full name": "src.test.java.org.apache.commons.codec.net.URLCodecTest.testUnsafeEncodeDecode"
                },
                {
                    "function name": "testDecodeStringWithNull",
                    "function params": [],
                    "file name": "URLCodecTest.java",
                    "file old path": "src/test/java/org/apache/commons/codec/net/URLCodecTest.java",
                    "file new path": "src/test/java/org/apache/commons/codec/net/URLCodecTest.java",
                    "full name": "src.test.java.org.apache.commons.codec.net.URLCodecTest.testDecodeStringWithNull"
                },
                {
                    "function name": "testEncodeDecodeNull",
                    "function params": [],
                    "file name": "URLCodecTest.java",
                    "file old path": "src/test/java/org/apache/commons/codec/net/URLCodecTest.java",
                    "file new path": "src/test/java/org/apache/commons/codec/net/URLCodecTest.java",
                    "full name": "src.test.java.org.apache.commons.codec.net.URLCodecTest.testEncodeDecodeNull"
                },
                {
                    "function name": "testBasicEncodeDecode",
                    "function params": [],
                    "file name": "URLCodecTest.java",
                    "file old path": "src/test/java/org/apache/commons/codec/net/URLCodecTest.java",
                    "file new path": "src/test/java/org/apache/commons/codec/net/URLCodecTest.java",
                    "full name": "src.test.java.org.apache.commons.codec.net.URLCodecTest.testBasicEncodeDecode"
                },
                {
                    "function name": "testEncodeStringWithNull",
                    "function params": [],
                    "file name": "URLCodecTest.java",
                    "file old path": "src/test/java/org/apache/commons/codec/net/URLCodecTest.java",
                    "file new path": "src/test/java/org/apache/commons/codec/net/URLCodecTest.java",
                    "full name": "src.test.java.org.apache.commons.codec.net.URLCodecTest.testEncodeStringWithNull"
                },
                {
                    "function name": "testEncodeUrlWithNullBitSet",
                    "function params": [],
                    "file name": "URLCodecTest.java",
                    "file old path": "src/test/java/org/apache/commons/codec/net/URLCodecTest.java",
                    "file new path": "src/test/java/org/apache/commons/codec/net/URLCodecTest.java",
                    "full name": "src.test.java.org.apache.commons.codec.net.URLCodecTest.testEncodeUrlWithNullBitSet"
                },
                {
                    "function name": "testDecodeWithNullArray",
                    "function params": [],
                    "file name": "URLCodecTest.java",
                    "file old path": "src/test/java/org/apache/commons/codec/net/URLCodecTest.java",
                    "file new path": "src/test/java/org/apache/commons/codec/net/URLCodecTest.java",
                    "full name": "src.test.java.org.apache.commons.codec.net.URLCodecTest.testDecodeWithNullArray"
                },
                {
                    "function name": "testEncodeNull",
                    "function params": [],
                    "file name": "URLCodecTest.java",
                    "file old path": "src/test/java/org/apache/commons/codec/net/URLCodecTest.java",
                    "file new path": "src/test/java/org/apache/commons/codec/net/URLCodecTest.java",
                    "full name": "src.test.java.org.apache.commons.codec.net.URLCodecTest.testEncodeNull"
                }
            ],
            "files that changed": [
                "src/test/java/org/apache/commons/codec/BinaryEncoderAbstractTest.java",
                "src/test/java/org/apache/commons/codec/CharEncodingTest.java",
                "src/test/java/org/apache/commons/codec/CharsetsTest.java",
                "src/test/java/org/apache/commons/codec/DecoderExceptionTest.java",
                "src/test/java/org/apache/commons/codec/EncoderExceptionTest.java",
                "src/test/java/org/apache/commons/codec/StringEncoderAbstractTest.java",
                "src/test/java/org/apache/commons/codec/StringEncoderComparatorTest.java",
                "src/test/java/org/apache/commons/codec/binary/Base16InputStreamTest.java",
                "src/test/java/org/apache/commons/codec/binary/Base16OutputStreamTest.java",
                "src/test/java/org/apache/commons/codec/binary/Base16Test.java",
                "src/test/java/org/apache/commons/codec/binary/Base32InputStreamTest.java",
                "src/test/java/org/apache/commons/codec/binary/Base32OutputStreamTest.java",
                "src/test/java/org/apache/commons/codec/binary/Base32Test.java",
                "src/test/java/org/apache/commons/codec/binary/Base64Codec13Test.java",
                "src/test/java/org/apache/commons/codec/binary/Base64InputStreamTest.java",
                "src/test/java/org/apache/commons/codec/binary/Base64OutputStreamTest.java",
                "src/test/java/org/apache/commons/codec/binary/Base64Test.java",
                "src/test/java/org/apache/commons/codec/binary/BaseNCodecTest.java",
                "src/test/java/org/apache/commons/codec/binary/BinaryCodecTest.java",
                "src/test/java/org/apache/commons/codec/binary/CharSequenceUtilsTest.java",
                "src/test/java/org/apache/commons/codec/binary/HexTest.java",
                "src/test/java/org/apache/commons/codec/binary/StringUtilsTest.java",
                "src/test/java/org/apache/commons/codec/cli/DigestTest.java",
                "src/test/java/org/apache/commons/codec/digest/Apr1CryptTest.java",
                "src/test/java/org/apache/commons/codec/digest/B64Test.java",
                "src/test/java/org/apache/commons/codec/digest/Blake3Test.java",
                "src/test/java/org/apache/commons/codec/digest/Blake3TestVectorsTest.java",
                "src/test/java/org/apache/commons/codec/digest/CryptTest.java",
                "src/test/java/org/apache/commons/codec/digest/DigestUtilsTest.java",
                "src/test/java/org/apache/commons/codec/digest/HmacAlgorithmsTest.java",
                "src/test/java/org/apache/commons/codec/digest/HmacUtilsTest.java",
                "src/test/java/org/apache/commons/codec/digest/Md5CryptTest.java",
                "src/test/java/org/apache/commons/codec/digest/MessageDigestAlgorithmsTest.java",
                "src/test/java/org/apache/commons/codec/digest/MurmurHash2Test.java",
                "src/test/java/org/apache/commons/codec/digest/MurmurHash3Test.java",
                "src/test/java/org/apache/commons/codec/digest/PureJavaCrc32CTest.java",
                "src/test/java/org/apache/commons/codec/digest/PureJavaCrc32Test.java",
                "src/test/java/org/apache/commons/codec/digest/Sha256CryptTest.java",
                "src/test/java/org/apache/commons/codec/digest/Sha2CryptTest.java",
                "src/test/java/org/apache/commons/codec/digest/Sha512CryptTest.java",
                "src/test/java/org/apache/commons/codec/digest/UnixCryptTest.java",
                "src/test/java/org/apache/commons/codec/digest/XXHash32OverflowTest.java",
                "src/test/java/org/apache/commons/codec/digest/XXHash32Test.java",
                "src/test/java/org/apache/commons/codec/language/Caverphone1Test.java",
                "src/test/java/org/apache/commons/codec/language/Caverphone2Test.java",
                "src/test/java/org/apache/commons/codec/language/ColognePhoneticTest.java",
                "src/test/java/org/apache/commons/codec/language/DaitchMokotoffSoundexTest.java",
                "src/test/java/org/apache/commons/codec/language/DoubleMetaphone2Test.java",
                "src/test/java/org/apache/commons/codec/language/DoubleMetaphoneTest.java",
                "src/test/java/org/apache/commons/codec/language/MatchRatingApproachEncoderTest.java",
                "src/test/java/org/apache/commons/codec/language/MetaphoneTest.java",
                "src/test/java/org/apache/commons/codec/language/NysiisTest.java",
                "src/test/java/org/apache/commons/codec/language/RefinedSoundexTest.java",
                "src/test/java/org/apache/commons/codec/language/SoundexTest.java",
                "src/test/java/org/apache/commons/codec/language/bm/BeiderMorseEncoderTest.java",
                "src/test/java/org/apache/commons/codec/language/bm/CacheSubSequencePerformanceTest.java",
                "src/test/java/org/apache/commons/codec/language/bm/LanguageGuessingTest.java",
                "src/test/java/org/apache/commons/codec/language/bm/PhoneticEnginePerformanceTest.java",
                "src/test/java/org/apache/commons/codec/language/bm/PhoneticEngineRegressionTest.java",
                "src/test/java/org/apache/commons/codec/language/bm/PhoneticEngineTest.java",
                "src/test/java/org/apache/commons/codec/language/bm/RuleTest.java",
                "src/test/java/org/apache/commons/codec/net/BCodecTest.java",
                "src/test/java/org/apache/commons/codec/net/PercentCodecTest.java",
                "src/test/java/org/apache/commons/codec/net/QCodecTest.java",
                "src/test/java/org/apache/commons/codec/net/QuotedPrintableCodecTest.java",
                "src/test/java/org/apache/commons/codec/net/RFC1522CodecTest.java",
                "src/test/java/org/apache/commons/codec/net/URLCodecTest.java",
                "src/test/java/org/apache/commons/codec/net/UtilsTest.java"
            ]
        },
        {
            "bug index": "3",
            "bug id": "CODEC-108",
            "hexsha": "f3db0de1fe8c429bd3c869108074fed4bdf25b3a",
            "fix_hash": "27c6dde7bd54169f41ada76e6709bcc9e0e5bf8f",
            "description": "I am using base64.encode/decode for xml files..it works fine with smaller files. But, when i try to encode larger avi files using Base64 encoder..it reduces file size. \n\nCould you please tell me, why its happening ??\n",
            "commit number version hash": 549,
            "commit number": 1336,
            "function that changed": [
                {
                    "function name": "read",
                    "function params": [
                        "offset",
                        "len"
                    ],
                    "file name": "BaseNCodecInputStream.java",
                    "file old path": "src/main/java/org/apache/commons/codec/binary/BaseNCodecInputStream.java",
                    "file new path": "src/main/java/org/apache/commons/codec/binary/BaseNCodecInputStream.java",
                    "full name": "src.main.java.org.apache.commons.codec.binary.BaseNCodecInputStream.read"
                },
                {
                    "function name": "read",
                    "function params": [
                        "array",
                        "offset",
                        "len"
                    ],
                    "file name": "BaseNCodecInputStream.java",
                    "file old path": "src/main/java/org/apache/commons/codec/binary/BaseNCodecInputStream.java",
                    "file new path": "src/main/java/org/apache/commons/codec/binary/BaseNCodecInputStream.java",
                    "full name": "src.main.java.org.apache.commons.codec.binary.BaseNCodecInputStream.read"
                },
                {
                    "function name": "write",
                    "function params": [
                        "array",
                        "offset",
                        "len"
                    ],
                    "file name": "BaseNCodecOutputStream.java",
                    "file old path": "src/main/java/org/apache/commons/codec/binary/BaseNCodecOutputStream.java",
                    "file new path": "src/main/java/org/apache/commons/codec/binary/BaseNCodecOutputStream.java",
                    "full name": "src.main.java.org.apache.commons.codec.binary.BaseNCodecOutputStream.write"
                },
                {
                    "function name": "write",
                    "function params": [
                        "offset",
                        "len"
                    ],
                    "file name": "BaseNCodecOutputStream.java",
                    "file old path": "src/main/java/org/apache/commons/codec/binary/BaseNCodecOutputStream.java",
                    "file new path": "src/main/java/org/apache/commons/codec/binary/BaseNCodecOutputStream.java",
                    "full name": "src.main.java.org.apache.commons.codec.binary.BaseNCodecOutputStream.write"
                },
                {
                    "function name": "dEncrypt",
                    "function params": [
                        "el",
                        "r",
                        "s",
                        "e0",
                        "e1",
                        "sArr"
                    ],
                    "file name": "UnixCrypt.java",
                    "file old path": "src/main/java/org/apache/commons/codec/digest/UnixCrypt.java",
                    "file new path": "src/main/java/org/apache/commons/codec/digest/UnixCrypt.java",
                    "full name": "src.main.java.org.apache.commons.codec.digest.UnixCrypt.dEncrypt"
                },
                {
                    "function name": "fourBytesToInt",
                    "function params": [
                        "b",
                        "offset"
                    ],
                    "file name": "UnixCrypt.java",
                    "file old path": "src/main/java/org/apache/commons/codec/digest/UnixCrypt.java",
                    "file new path": "src/main/java/org/apache/commons/codec/digest/UnixCrypt.java",
                    "full name": "src.main.java.org.apache.commons.codec.digest.UnixCrypt.fourBytesToInt"
                },
                {
                    "function name": "dEncrypt",
                    "function params": [
                        "el",
                        "r",
                        "s",
                        "e0",
                        "e1"
                    ],
                    "file name": "UnixCrypt.java",
                    "file old path": "src/main/java/org/apache/commons/codec/digest/UnixCrypt.java",
                    "file new path": "src/main/java/org/apache/commons/codec/digest/UnixCrypt.java",
                    "full name": "src.main.java.org.apache.commons.codec.digest.UnixCrypt.dEncrypt"
                },
                {
                    "function name": "permOp",
                    "function params": [
                        "a",
                        "b",
                        "n",
                        "m",
                        "results"
                    ],
                    "file name": "UnixCrypt.java",
                    "file old path": "src/main/java/org/apache/commons/codec/digest/UnixCrypt.java",
                    "file new path": "src/main/java/org/apache/commons/codec/digest/UnixCrypt.java",
                    "full name": "src.main.java.org.apache.commons.codec.digest.UnixCrypt.permOp"
                },
                {
                    "function name": "crypt",
                    "function params": [
                        "original",
                        "salt"
                    ],
                    "file name": "UnixCrypt.java",
                    "file old path": "src/main/java/org/apache/commons/codec/digest/UnixCrypt.java",
                    "file new path": "src/main/java/org/apache/commons/codec/digest/UnixCrypt.java",
                    "full name": "src.main.java.org.apache.commons.codec.digest.UnixCrypt.crypt"
                },
                {
                    "function name": "intToFourBytes",
                    "function params": [
                        "iValue",
                        "b",
                        "offset"
                    ],
                    "file name": "UnixCrypt.java",
                    "file old path": "src/main/java/org/apache/commons/codec/digest/UnixCrypt.java",
                    "file new path": "src/main/java/org/apache/commons/codec/digest/UnixCrypt.java",
                    "full name": "src.main.java.org.apache.commons.codec.digest.UnixCrypt.intToFourBytes"
                },
                {
                    "function name": "body",
                    "function params": [
                        "schedule",
                        "eSwap0",
                        "eSwap1"
                    ],
                    "file name": "UnixCrypt.java",
                    "file old path": "src/main/java/org/apache/commons/codec/digest/UnixCrypt.java",
                    "file new path": "src/main/java/org/apache/commons/codec/digest/UnixCrypt.java",
                    "full name": "src.main.java.org.apache.commons.codec.digest.UnixCrypt.body"
                },
                {
                    "function name": "desSetKey",
                    "function params": [
                        "key"
                    ],
                    "file name": "UnixCrypt.java",
                    "file old path": "src/main/java/org/apache/commons/codec/digest/UnixCrypt.java",
                    "file new path": "src/main/java/org/apache/commons/codec/digest/UnixCrypt.java",
                    "full name": "src.main.java.org.apache.commons.codec.digest.UnixCrypt.desSetKey"
                },
                {
                    "function name": "body",
                    "function params": [
                        "eSwap0",
                        "eSwap1"
                    ],
                    "file name": "UnixCrypt.java",
                    "file old path": "src/main/java/org/apache/commons/codec/digest/UnixCrypt.java",
                    "file new path": "src/main/java/org/apache/commons/codec/digest/UnixCrypt.java",
                    "full name": "src.main.java.org.apache.commons.codec.digest.UnixCrypt.body"
                },
                {
                    "function name": "permOp",
                    "function params": [
                        "a",
                        "b",
                        "n",
                        "m"
                    ],
                    "file name": "UnixCrypt.java",
                    "file old path": "src/main/java/org/apache/commons/codec/digest/UnixCrypt.java",
                    "file new path": "src/main/java/org/apache/commons/codec/digest/UnixCrypt.java",
                    "full name": "src.main.java.org.apache.commons.codec.digest.UnixCrypt.permOp"
                },
                {
                    "function name": "fourBytesToInt",
                    "function params": [
                        "offset"
                    ],
                    "file name": "UnixCrypt.java",
                    "file old path": "src/main/java/org/apache/commons/codec/digest/UnixCrypt.java",
                    "file new path": "src/main/java/org/apache/commons/codec/digest/UnixCrypt.java",
                    "full name": "src.main.java.org.apache.commons.codec.digest.UnixCrypt.fourBytesToInt"
                },
                {
                    "function name": "intToFourBytes",
                    "function params": [
                        "iValue",
                        "offset"
                    ],
                    "file name": "UnixCrypt.java",
                    "file old path": "src/main/java/org/apache/commons/codec/digest/UnixCrypt.java",
                    "file new path": "src/main/java/org/apache/commons/codec/digest/UnixCrypt.java",
                    "full name": "src.main.java.org.apache.commons.codec.digest.UnixCrypt.intToFourBytes"
                },
                {
                    "function name": "desSetKey",
                    "function params": [],
                    "file name": "UnixCrypt.java",
                    "file old path": "src/main/java/org/apache/commons/codec/digest/UnixCrypt.java",
                    "file new path": "src/main/java/org/apache/commons/codec/digest/UnixCrypt.java",
                    "full name": "src.main.java.org.apache.commons.codec.digest.UnixCrypt.desSetKey"
                },
                {
                    "function name": "soundex",
                    "function params": [
                        "str"
                    ],
                    "file name": "Soundex.java",
                    "file old path": "src/main/java/org/apache/commons/codec/language/Soundex.java",
                    "file new path": "src/main/java/org/apache/commons/codec/language/Soundex.java",
                    "full name": "src.main.java.org.apache.commons.codec.language.Soundex.soundex"
                }
            ],
            "files that changed": [
                "src/main/java/org/apache/commons/codec/binary/BaseNCodecInputStream.java",
                "src/main/java/org/apache/commons/codec/binary/BaseNCodecOutputStream.java",
                "src/main/java/org/apache/commons/codec/digest/UnixCrypt.java",
                "src/main/java/org/apache/commons/codec/language/Soundex.java"
            ]
        },
        {
            "bug index": "4",
            "bug id": "CODEC-5",
            "hexsha": "71e7260746a902d1070a190fd78bd560464860b9",
            "fix_hash": "5a03f5a493240f26f27ccabe6b8ac7b701c2d5c5",
            "description": "List:       jakarta-commons-dev\nSubject:    [codec] Proposal for improvement Hex codec\nFrom:       Tom van den Berge <tom.vandenberge () bibit ! com>\nDate:       2004-04-15 8:49:31\nMessage-ID: <407E4C9B.5070701 () bibit ! com>\n[Download message RAW]\n\nI'm using the Hex codec to decode e.g. the string \"qq\". What surprises \nme is that this obviously illegal hex value is decoded into one byte \nvalue 255. In fact all non-hex 'character-pairs' are decoded to value 255.\n\nWouldn't it be better to throw a DecoderException if illegal characters \nare passed in?\n\nThe current implementation decodes values that is is actually not able \nto decode, which is wrong.\n\nCheers,\nTom",
            "commit number version hash": 173,
            "commit number": 1332,
            "function that changed": [
                {
                    "function name": "testEncodeNull",
                    "function params": [],
                    "file name": "BinaryEncoderAbstractTest.java",
                    "file old path": "src/test/java/org/apache/commons/codec/BinaryEncoderAbstractTest.java",
                    "file new path": "src/test/java/org/apache/commons/codec/BinaryEncoderAbstractTest.java",
                    "full name": "src.test.java.org.apache.commons.codec.BinaryEncoderAbstractTest.testEncodeNull"
                },
                {
                    "function name": "testReadNull",
                    "function params": [],
                    "file name": "Base16InputStreamTest.java",
                    "file old path": "src/test/java/org/apache/commons/codec/binary/Base16InputStreamTest.java",
                    "file new path": "src/test/java/org/apache/commons/codec/binary/Base16InputStreamTest.java",
                    "full name": "src.test.java.org.apache.commons.codec.binary.Base16InputStreamTest.testReadNull"
                },
                {
                    "function name": "testReadOutOfBounds",
                    "function params": [],
                    "file name": "Base16InputStreamTest.java",
                    "file old path": "src/test/java/org/apache/commons/codec/binary/Base16InputStreamTest.java",
                    "file new path": "src/test/java/org/apache/commons/codec/binary/Base16InputStreamTest.java",
                    "full name": "src.test.java.org.apache.commons.codec.binary.Base16InputStreamTest.testReadOutOfBounds"
                },
                {
                    "function name": "testWriteToNullCoverage",
                    "function params": [],
                    "file name": "Base16OutputStreamTest.java",
                    "file old path": "src/test/java/org/apache/commons/codec/binary/Base16OutputStreamTest.java",
                    "file new path": "src/test/java/org/apache/commons/codec/binary/Base16OutputStreamTest.java",
                    "full name": "src.test.java.org.apache.commons.codec.binary.Base16OutputStreamTest.testWriteToNullCoverage"
                },
                {
                    "function name": "testWriteOutOfBounds",
                    "function params": [],
                    "file name": "Base16OutputStreamTest.java",
                    "file old path": "src/test/java/org/apache/commons/codec/binary/Base16OutputStreamTest.java",
                    "file new path": "src/test/java/org/apache/commons/codec/binary/Base16OutputStreamTest.java",
                    "full name": "src.test.java.org.apache.commons.codec.binary.Base16OutputStreamTest.testWriteOutOfBounds"
                },
                {
                    "function name": "testNonBase16Test",
                    "function params": [],
                    "file name": "Base16Test.java",
                    "file old path": "src/test/java/org/apache/commons/codec/binary/Base16Test.java",
                    "file new path": "src/test/java/org/apache/commons/codec/binary/Base16Test.java",
                    "full name": "src.test.java.org.apache.commons.codec.binary.Base16Test.testNonBase16Test"
                },
                {
                    "function name": "testObjectEncodeWithInvalidParameter",
                    "function params": [],
                    "file name": "Base16Test.java",
                    "file old path": "src/test/java/org/apache/commons/codec/binary/Base16Test.java",
                    "file new path": "src/test/java/org/apache/commons/codec/binary/Base16Test.java",
                    "full name": "src.test.java.org.apache.commons.codec.binary.Base16Test.testObjectEncodeWithInvalidParameter"
                },
                {
                    "function name": "testObjectDecodeWithInvalidParameter",
                    "function params": [],
                    "file name": "Base16Test.java",
                    "file old path": "src/test/java/org/apache/commons/codec/binary/Base16Test.java",
                    "file new path": "src/test/java/org/apache/commons/codec/binary/Base16Test.java",
                    "full name": "src.test.java.org.apache.commons.codec.binary.Base16Test.testObjectDecodeWithInvalidParameter"
                },
                {
                    "function name": "testStrictDecoding",
                    "function params": [],
                    "file name": "Base32InputStreamTest.java",
                    "file old path": "src/test/java/org/apache/commons/codec/binary/Base32InputStreamTest.java",
                    "file new path": "src/test/java/org/apache/commons/codec/binary/Base32InputStreamTest.java",
                    "full name": "src.test.java.org.apache.commons.codec.binary.Base32InputStreamTest.testStrictDecoding"
                },
                {
                    "function name": "testReadOutOfBounds",
                    "function params": [],
                    "file name": "Base32InputStreamTest.java",
                    "file old path": "src/test/java/org/apache/commons/codec/binary/Base32InputStreamTest.java",
                    "file new path": "src/test/java/org/apache/commons/codec/binary/Base32InputStreamTest.java",
                    "full name": "src.test.java.org.apache.commons.codec.binary.Base32InputStreamTest.testReadOutOfBounds"
                },
                {
                    "function name": "testReadNull",
                    "function params": [],
                    "file name": "Base32InputStreamTest.java",
                    "file old path": "src/test/java/org/apache/commons/codec/binary/Base32InputStreamTest.java",
                    "file new path": "src/test/java/org/apache/commons/codec/binary/Base32InputStreamTest.java",
                    "full name": "src.test.java.org.apache.commons.codec.binary.Base32InputStreamTest.testReadNull"
                },
                {
                    "function name": "testWriteToNullCoverage",
                    "function params": [],
                    "file name": "Base32OutputStreamTest.java",
                    "file old path": "src/test/java/org/apache/commons/codec/binary/Base32OutputStreamTest.java",
                    "file new path": "src/test/java/org/apache/commons/codec/binary/Base32OutputStreamTest.java",
                    "full name": "src.test.java.org.apache.commons.codec.binary.Base32OutputStreamTest.testWriteToNullCoverage"
                },
                {
                    "function name": "testWriteOutOfBounds",
                    "function params": [],
                    "file name": "Base32OutputStreamTest.java",
                    "file old path": "src/test/java/org/apache/commons/codec/binary/Base32OutputStreamTest.java",
                    "file new path": "src/test/java/org/apache/commons/codec/binary/Base32OutputStreamTest.java",
                    "full name": "src.test.java.org.apache.commons.codec.binary.Base32OutputStreamTest.testWriteOutOfBounds"
                },
                {
                    "function name": "testStrictDecoding",
                    "function params": [],
                    "file name": "Base32OutputStreamTest.java",
                    "file old path": "src/test/java/org/apache/commons/codec/binary/Base32OutputStreamTest.java",
                    "file new path": "src/test/java/org/apache/commons/codec/binary/Base32OutputStreamTest.java",
                    "full name": "src.test.java.org.apache.commons.codec.binary.Base32OutputStreamTest.testStrictDecoding"
                },
                {
                    "function name": "testConstructors",
                    "function params": [],
                    "file name": "Base32Test.java",
                    "file old path": "src/test/java/org/apache/commons/codec/binary/Base32Test.java",
                    "file new path": "src/test/java/org/apache/commons/codec/binary/Base32Test.java",
                    "full name": "src.test.java.org.apache.commons.codec.binary.Base32Test.testConstructors"
                },
                {
                    "function name": "testImpossibleCases",
                    "function params": [
                        "codec",
                        "impossible_cases"
                    ],
                    "file name": "Base32Test.java",
                    "file old path": "src/test/java/org/apache/commons/codec/binary/Base32Test.java",
                    "file new path": "src/test/java/org/apache/commons/codec/binary/Base32Test.java",
                    "full name": "src.test.java.org.apache.commons.codec.binary.Base32Test.testImpossibleCases"
                },
                {
                    "function name": "assertBase32DecodingOfTrailingBits",
                    "function params": [
                        "nbits"
                    ],
                    "file name": "Base32Test.java",
                    "file old path": "src/test/java/org/apache/commons/codec/binary/Base32Test.java",
                    "file new path": "src/test/java/org/apache/commons/codec/binary/Base32Test.java",
                    "full name": "src.test.java.org.apache.commons.codec.binary.Base32Test.assertBase32DecodingOfTrailingBits"
                },
                {
                    "function name": "testReadNull",
                    "function params": [],
                    "file name": "Base64InputStreamTest.java",
                    "file old path": "src/test/java/org/apache/commons/codec/binary/Base64InputStreamTest.java",
                    "file new path": "src/test/java/org/apache/commons/codec/binary/Base64InputStreamTest.java",
                    "full name": "src.test.java.org.apache.commons.codec.binary.Base64InputStreamTest.testReadNull"
                },
                {
                    "function name": "testReadOutOfBounds",
                    "function params": [],
                    "file name": "Base64InputStreamTest.java",
                    "file old path": "src/test/java/org/apache/commons/codec/binary/Base64InputStreamTest.java",
                    "file new path": "src/test/java/org/apache/commons/codec/binary/Base64InputStreamTest.java",
                    "full name": "src.test.java.org.apache.commons.codec.binary.Base64InputStreamTest.testReadOutOfBounds"
                },
                {
                    "function name": "testStrictDecoding",
                    "function params": [],
                    "file name": "Base64InputStreamTest.java",
                    "file old path": "src/test/java/org/apache/commons/codec/binary/Base64InputStreamTest.java",
                    "file new path": "src/test/java/org/apache/commons/codec/binary/Base64InputStreamTest.java",
                    "full name": "src.test.java.org.apache.commons.codec.binary.Base64InputStreamTest.testStrictDecoding"
                },
                {
                    "function name": "testWriteToNullCoverage",
                    "function params": [],
                    "file name": "Base64OutputStreamTest.java",
                    "file old path": "src/test/java/org/apache/commons/codec/binary/Base64OutputStreamTest.java",
                    "file new path": "src/test/java/org/apache/commons/codec/binary/Base64OutputStreamTest.java",
                    "full name": "src.test.java.org.apache.commons.codec.binary.Base64OutputStreamTest.testWriteToNullCoverage"
                },
                {
                    "function name": "testWriteOutOfBounds",
                    "function params": [],
                    "file name": "Base64OutputStreamTest.java",
                    "file old path": "src/test/java/org/apache/commons/codec/binary/Base64OutputStreamTest.java",
                    "file new path": "src/test/java/org/apache/commons/codec/binary/Base64OutputStreamTest.java",
                    "full name": "src.test.java.org.apache.commons.codec.binary.Base64OutputStreamTest.testWriteOutOfBounds"
                },
                {
                    "function name": "testStrictDecoding",
                    "function params": [],
                    "file name": "Base64OutputStreamTest.java",
                    "file old path": "src/test/java/org/apache/commons/codec/binary/Base64OutputStreamTest.java",
                    "file new path": "src/test/java/org/apache/commons/codec/binary/Base64OutputStreamTest.java",
                    "full name": "src.test.java.org.apache.commons.codec.binary.Base64OutputStreamTest.testStrictDecoding"
                },
                {
                    "function name": "testEncodeOverMaxSize",
                    "function params": [
                        "maxSize"
                    ],
                    "file name": "Base64Test.java",
                    "file old path": "src/test/java/org/apache/commons/codec/binary/Base64Test.java",
                    "file new path": "src/test/java/org/apache/commons/codec/binary/Base64Test.java",
                    "full name": "src.test.java.org.apache.commons.codec.binary.Base64Test.testEncodeOverMaxSize"
                },
                {
                    "function name": "testObjectEncodeWithInvalidParameter",
                    "function params": [],
                    "file name": "Base64Test.java",
                    "file old path": "src/test/java/org/apache/commons/codec/binary/Base64Test.java",
                    "file new path": "src/test/java/org/apache/commons/codec/binary/Base64Test.java",
                    "full name": "src.test.java.org.apache.commons.codec.binary.Base64Test.testObjectEncodeWithInvalidParameter"
                },
                {
                    "function name": "testCodeIntegerNull",
                    "function params": [],
                    "file name": "Base64Test.java",
                    "file old path": "src/test/java/org/apache/commons/codec/binary/Base64Test.java",
                    "file new path": "src/test/java/org/apache/commons/codec/binary/Base64Test.java",
                    "full name": "src.test.java.org.apache.commons.codec.binary.Base64Test.testCodeIntegerNull"
                },
                {
                    "function name": "testObjectDecodeWithInvalidParameter",
                    "function params": [],
                    "file name": "Base64Test.java",
                    "file old path": "src/test/java/org/apache/commons/codec/binary/Base64Test.java",
                    "file new path": "src/test/java/org/apache/commons/codec/binary/Base64Test.java",
                    "full name": "src.test.java.org.apache.commons.codec.binary.Base64Test.testObjectDecodeWithInvalidParameter"
                },
                {
                    "function name": "testIsStringBase64",
                    "function params": [],
                    "file name": "Base64Test.java",
                    "file old path": "src/test/java/org/apache/commons/codec/binary/Base64Test.java",
                    "file new path": "src/test/java/org/apache/commons/codec/binary/Base64Test.java",
                    "full name": "src.test.java.org.apache.commons.codec.binary.Base64Test.testIsStringBase64"
                },
                {
                    "function name": "assertBase64DecodingOfTrailingBits",
                    "function params": [
                        "nbits"
                    ],
                    "file name": "Base64Test.java",
                    "file old path": "src/test/java/org/apache/commons/codec/binary/Base64Test.java",
                    "file new path": "src/test/java/org/apache/commons/codec/binary/Base64Test.java",
                    "full name": "src.test.java.org.apache.commons.codec.binary.Base64Test.assertBase64DecodingOfTrailingBits"
                },
                {
                    "function name": "testConstructors",
                    "function params": [],
                    "file name": "Base64Test.java",
                    "file old path": "src/test/java/org/apache/commons/codec/binary/Base64Test.java",
                    "file new path": "src/test/java/org/apache/commons/codec/binary/Base64Test.java",
                    "full name": "src.test.java.org.apache.commons.codec.binary.Base64Test.testConstructors"
                },
                {
                    "function name": "testBase64ImpossibleSamples",
                    "function params": [],
                    "file name": "Base64Test.java",
                    "file old path": "src/test/java/org/apache/commons/codec/binary/Base64Test.java",
                    "file new path": "src/test/java/org/apache/commons/codec/binary/Base64Test.java",
                    "full name": "src.test.java.org.apache.commons.codec.binary.Base64Test.testBase64ImpossibleSamples"
                },
                {
                    "function name": "testDecodeBadCharacterPos0",
                    "function params": [],
                    "file name": "HexTest.java",
                    "file old path": "src/test/java/org/apache/commons/codec/binary/HexTest.java",
                    "file new path": "src/test/java/org/apache/commons/codec/binary/HexTest.java",
                    "full name": "src.test.java.org.apache.commons.codec.binary.HexTest.testDecodeBadCharacterPos0"
                },
                {
                    "function name": "checkDecodeHexByteBufferOddCharacters",
                    "function params": [
                        "data"
                    ],
                    "file name": "HexTest.java",
                    "file old path": "src/test/java/org/apache/commons/codec/binary/HexTest.java",
                    "file new path": "src/test/java/org/apache/commons/codec/binary/HexTest.java",
                    "full name": "src.test.java.org.apache.commons.codec.binary.HexTest.checkDecodeHexByteBufferOddCharacters"
                },
                {
                    "function name": "testEncodeClassCastException",
                    "function params": [],
                    "file name": "HexTest.java",
                    "file old path": "src/test/java/org/apache/commons/codec/binary/HexTest.java",
                    "file new path": "src/test/java/org/apache/commons/codec/binary/HexTest.java",
                    "full name": "src.test.java.org.apache.commons.codec.binary.HexTest.testEncodeClassCastException"
                },
                {
                    "function name": "testDecodeByteArrayOddCharacters",
                    "function params": [],
                    "file name": "HexTest.java",
                    "file old path": "src/test/java/org/apache/commons/codec/binary/HexTest.java",
                    "file new path": "src/test/java/org/apache/commons/codec/binary/HexTest.java",
                    "full name": "src.test.java.org.apache.commons.codec.binary.HexTest.testDecodeByteArrayOddCharacters"
                },
                {
                    "function name": "checkDecodeHexCharArrayOddCharacters",
                    "function params": [
                        "data"
                    ],
                    "file name": "HexTest.java",
                    "file old path": "src/test/java/org/apache/commons/codec/binary/HexTest.java",
                    "file new path": "src/test/java/org/apache/commons/codec/binary/HexTest.java",
                    "full name": "src.test.java.org.apache.commons.codec.binary.HexTest.checkDecodeHexCharArrayOddCharacters"
                },
                {
                    "function name": "checkDecodeHexCharArrayOddCharacters",
                    "function params": [
                        "data"
                    ],
                    "file name": "HexTest.java",
                    "file old path": "src/test/java/org/apache/commons/codec/binary/HexTest.java",
                    "file new path": "src/test/java/org/apache/commons/codec/binary/HexTest.java",
                    "full name": "src.test.java.org.apache.commons.codec.binary.HexTest.checkDecodeHexCharArrayOddCharacters"
                },
                {
                    "function name": "testDecodeBadCharacterPos1",
                    "function params": [],
                    "file name": "HexTest.java",
                    "file old path": "src/test/java/org/apache/commons/codec/binary/HexTest.java",
                    "file new path": "src/test/java/org/apache/commons/codec/binary/HexTest.java",
                    "full name": "src.test.java.org.apache.commons.codec.binary.HexTest.testDecodeBadCharacterPos1"
                },
                {
                    "function name": "testDecodeClassCastException",
                    "function params": [],
                    "file name": "HexTest.java",
                    "file old path": "src/test/java/org/apache/commons/codec/binary/HexTest.java",
                    "file new path": "src/test/java/org/apache/commons/codec/binary/HexTest.java",
                    "full name": "src.test.java.org.apache.commons.codec.binary.HexTest.testDecodeClassCastException"
                },
                {
                    "function name": "testDecodeHexStringOddCharacters",
                    "function params": [],
                    "file name": "HexTest.java",
                    "file old path": "src/test/java/org/apache/commons/codec/binary/HexTest.java",
                    "file new path": "src/test/java/org/apache/commons/codec/binary/HexTest.java",
                    "full name": "src.test.java.org.apache.commons.codec.binary.HexTest.testDecodeHexStringOddCharacters"
                },
                {
                    "function name": "testGetBytesUncheckedBadName",
                    "function params": [],
                    "file name": "StringUtilsTest.java",
                    "file old path": "src/test/java/org/apache/commons/codec/binary/StringUtilsTest.java",
                    "file new path": "src/test/java/org/apache/commons/codec/binary/StringUtilsTest.java",
                    "full name": "src.test.java.org.apache.commons.codec.binary.StringUtilsTest.testGetBytesUncheckedBadName"
                },
                {
                    "function name": "testNewStringBadEnc",
                    "function params": [],
                    "file name": "StringUtilsTest.java",
                    "file old path": "src/test/java/org/apache/commons/codec/binary/StringUtilsTest.java",
                    "file new path": "src/test/java/org/apache/commons/codec/binary/StringUtilsTest.java",
                    "full name": "src.test.java.org.apache.commons.codec.binary.StringUtilsTest.testNewStringBadEnc"
                },
                {
                    "function name": "assertThrowsProperExceptionWithKeySize",
                    "function params": [
                        "keySize"
                    ],
                    "file name": "Blake3Test.java",
                    "file old path": "src/test/java/org/apache/commons/codec/digest/Blake3Test.java",
                    "file new path": "src/test/java/org/apache/commons/codec/digest/Blake3Test.java",
                    "full name": "src.test.java.org.apache.commons.codec.digest.Blake3Test.assertThrowsProperExceptionWithKeySize"
                },
                {
                    "function name": "testUsMappingEWithAcute",
                    "function params": [],
                    "file name": "SoundexTest.java",
                    "file old path": "src/test/java/org/apache/commons/codec/language/SoundexTest.java",
                    "file new path": "src/test/java/org/apache/commons/codec/language/SoundexTest.java",
                    "full name": "src.test.java.org.apache.commons.codec.language.SoundexTest.testUsMappingEWithAcute"
                },
                {
                    "function name": "testUsMappingOWithDiaeresis",
                    "function params": [],
                    "file name": "SoundexTest.java",
                    "file old path": "src/test/java/org/apache/commons/codec/language/SoundexTest.java",
                    "file new path": "src/test/java/org/apache/commons/codec/language/SoundexTest.java",
                    "full name": "src.test.java.org.apache.commons.codec.language.SoundexTest.testUsMappingOWithDiaeresis"
                },
                {
                    "function name": "testBase64ImpossibleSamplesStrict",
                    "function params": [],
                    "file name": "BCodecTest.java",
                    "file old path": "src/test/java/org/apache/commons/codec/net/BCodecTest.java",
                    "file new path": "src/test/java/org/apache/commons/codec/net/BCodecTest.java",
                    "full name": "src.test.java.org.apache.commons.codec.net.BCodecTest.testBase64ImpossibleSamplesStrict"
                },
                {
                    "function name": "testEncodeObjects",
                    "function params": [],
                    "file name": "BCodecTest.java",
                    "file old path": "src/test/java/org/apache/commons/codec/net/BCodecTest.java",
                    "file new path": "src/test/java/org/apache/commons/codec/net/BCodecTest.java",
                    "full name": "src.test.java.org.apache.commons.codec.net.BCodecTest.testEncodeObjects"
                },
                {
                    "function name": "testDecodeObjects",
                    "function params": [],
                    "file name": "BCodecTest.java",
                    "file old path": "src/test/java/org/apache/commons/codec/net/BCodecTest.java",
                    "file new path": "src/test/java/org/apache/commons/codec/net/BCodecTest.java",
                    "full name": "src.test.java.org.apache.commons.codec.net.BCodecTest.testDecodeObjects"
                },
                {
                    "function name": "testDecodeObjects",
                    "function params": [],
                    "file name": "QCodecTest.java",
                    "file old path": "src/test/java/org/apache/commons/codec/net/QCodecTest.java",
                    "file new path": "src/test/java/org/apache/commons/codec/net/QCodecTest.java",
                    "full name": "src.test.java.org.apache.commons.codec.net.QCodecTest.testDecodeObjects"
                },
                {
                    "function name": "testEncodeObjects",
                    "function params": [],
                    "file name": "QCodecTest.java",
                    "file old path": "src/test/java/org/apache/commons/codec/net/QCodecTest.java",
                    "file new path": "src/test/java/org/apache/commons/codec/net/QCodecTest.java",
                    "full name": "src.test.java.org.apache.commons.codec.net.QCodecTest.testEncodeObjects"
                },
                {
                    "function name": "testDecodeInvalid",
                    "function params": [],
                    "file name": "QuotedPrintableCodecTest.java",
                    "file old path": "src/test/java/org/apache/commons/codec/net/QuotedPrintableCodecTest.java",
                    "file new path": "src/test/java/org/apache/commons/codec/net/QuotedPrintableCodecTest.java",
                    "full name": "src.test.java.org.apache.commons.codec.net.QuotedPrintableCodecTest.testDecodeInvalid"
                },
                {
                    "function name": "testEncodeObjects",
                    "function params": [],
                    "file name": "QuotedPrintableCodecTest.java",
                    "file old path": "src/test/java/org/apache/commons/codec/net/QuotedPrintableCodecTest.java",
                    "file new path": "src/test/java/org/apache/commons/codec/net/QuotedPrintableCodecTest.java",
                    "full name": "src.test.java.org.apache.commons.codec.net.QuotedPrintableCodecTest.testEncodeObjects"
                },
                {
                    "function name": "testDecodeObjects",
                    "function params": [],
                    "file name": "QuotedPrintableCodecTest.java",
                    "file old path": "src/test/java/org/apache/commons/codec/net/QuotedPrintableCodecTest.java",
                    "file new path": "src/test/java/org/apache/commons/codec/net/QuotedPrintableCodecTest.java",
                    "full name": "src.test.java.org.apache.commons.codec.net.QuotedPrintableCodecTest.testDecodeObjects"
                },
                {
                    "function name": "assertExpectedDecoderException",
                    "function params": [
                        "s"
                    ],
                    "file name": "RFC1522CodecTest.java",
                    "file old path": "src/test/java/org/apache/commons/codec/net/RFC1522CodecTest.java",
                    "file new path": "src/test/java/org/apache/commons/codec/net/RFC1522CodecTest.java",
                    "full name": "src.test.java.org.apache.commons.codec.net.RFC1522CodecTest.assertExpectedDecoderException"
                },
                {
                    "function name": "testInvalidEncoding",
                    "function params": [],
                    "file name": "URLCodecTest.java",
                    "file old path": "src/test/java/org/apache/commons/codec/net/URLCodecTest.java",
                    "file new path": "src/test/java/org/apache/commons/codec/net/URLCodecTest.java",
                    "full name": "src.test.java.org.apache.commons.codec.net.URLCodecTest.testInvalidEncoding"
                },
                {
                    "function name": "testEncodeObjects",
                    "function params": [],
                    "file name": "URLCodecTest.java",
                    "file old path": "src/test/java/org/apache/commons/codec/net/URLCodecTest.java",
                    "file new path": "src/test/java/org/apache/commons/codec/net/URLCodecTest.java",
                    "full name": "src.test.java.org.apache.commons.codec.net.URLCodecTest.testEncodeObjects"
                },
                {
                    "function name": "testDecodeObjects",
                    "function params": [],
                    "file name": "URLCodecTest.java",
                    "file old path": "src/test/java/org/apache/commons/codec/net/URLCodecTest.java",
                    "file new path": "src/test/java/org/apache/commons/codec/net/URLCodecTest.java",
                    "full name": "src.test.java.org.apache.commons.codec.net.URLCodecTest.testDecodeObjects"
                },
                {
                    "function name": "testDecodeInvalid",
                    "function params": [],
                    "file name": "URLCodecTest.java",
                    "file old path": "src/test/java/org/apache/commons/codec/net/URLCodecTest.java",
                    "file new path": "src/test/java/org/apache/commons/codec/net/URLCodecTest.java",
                    "full name": "src.test.java.org.apache.commons.codec.net.URLCodecTest.testDecodeInvalid"
                }
            ],
            "files that changed": [
                "src/test/java/org/apache/commons/codec/BinaryEncoderAbstractTest.java",
                "src/test/java/org/apache/commons/codec/binary/Base16InputStreamTest.java",
                "src/test/java/org/apache/commons/codec/binary/Base16OutputStreamTest.java",
                "src/test/java/org/apache/commons/codec/binary/Base16Test.java",
                "src/test/java/org/apache/commons/codec/binary/Base32InputStreamTest.java",
                "src/test/java/org/apache/commons/codec/binary/Base32OutputStreamTest.java",
                "src/test/java/org/apache/commons/codec/binary/Base32Test.java",
                "src/test/java/org/apache/commons/codec/binary/Base64InputStreamTest.java",
                "src/test/java/org/apache/commons/codec/binary/Base64OutputStreamTest.java",
                "src/test/java/org/apache/commons/codec/binary/Base64Test.java",
                "src/test/java/org/apache/commons/codec/binary/HexTest.java",
                "src/test/java/org/apache/commons/codec/binary/StringUtilsTest.java",
                "src/test/java/org/apache/commons/codec/digest/Blake3Test.java",
                "src/test/java/org/apache/commons/codec/language/SoundexTest.java",
                "src/test/java/org/apache/commons/codec/net/BCodecTest.java",
                "src/test/java/org/apache/commons/codec/net/QCodecTest.java",
                "src/test/java/org/apache/commons/codec/net/QuotedPrintableCodecTest.java",
                "src/test/java/org/apache/commons/codec/net/RFC1522CodecTest.java",
                "src/test/java/org/apache/commons/codec/net/URLCodecTest.java"
            ]
        },
        {
            "bug index": "5",
            "bug id": "CODEC-101",
            "hexsha": "36e7620574736400941c5154bf663b198abafa7c",
            "fix_hash": "738b50de4d72083a93b8ff57c83b112f5ecd882f",
            "description": "Using new InputStreamReader(new Base64InputStream(in, true)) sometimes fails with \"java.io.IOException: Underlying input stream returned zero bytes\".\n\nThis is been tracked down that Base64InputStream#read(byte[]) incorrectly returns 0 at end of any stream which is multiple of 3 bytes long.",
            "commit number version hash": 449,
            "commit number": 1286,
            "function that changed": [
                {
                    "function name": "testInputStreamReader",
                    "function params": [],
                    "file name": "Base64InputStreamTest.java",
                    "file old path": "src/test/java/org/apache/commons/codec/binary/Base64InputStreamTest.java",
                    "file new path": "src/test/java/org/apache/commons/codec/binary/Base64InputStreamTest.java",
                    "full name": "src.test.java.org.apache.commons.codec.binary.Base64InputStreamTest.testInputStreamReader"
                },
                {
                    "function name": "testCodec101",
                    "function params": [],
                    "file name": "Base64InputStreamTest.java",
                    "file old path": "src/test/java/org/apache/commons/codec/binary/Base64InputStreamTest.java",
                    "file new path": "src/test/java/org/apache/commons/codec/binary/Base64InputStreamTest.java",
                    "full name": "src.test.java.org.apache.commons.codec.binary.Base64InputStreamTest.testCodec101"
                }
            ],
            "files that changed": [
                "src/test/java/org/apache/commons/codec/binary/Base64InputStreamTest.java",
                "src/test/java/org/apache/commons/codec/binary/Base64TestData.java"
            ]
        },
        {
            "bug index": "6",
            "bug id": "CODEC-1",
            "hexsha": "71e7260746a902d1070a190fd78bd560464860b9",
            "fix_hash": "fab180b25ed319261de0024cd1a736af284d039c",
            "description": "URLCodec causes an IndexOutOfBoundsException in BitSet when encoding non-ASCII\ncharacters.",
            "commit number version hash": 173,
            "commit number": 1277,
            "function that changed": [],
            "files that changed": [
                "src/main/java/org/apache/commons/codec/binary/Base32.java",
                "src/main/java/org/apache/commons/codec/binary/BaseNCodec.java",
                "src/main/java/org/apache/commons/codec/binary/Hex.java"
            ]
        },
        {
            "bug index": "7",
            "bug id": "CODEC-1",
            "hexsha": "71e7260746a902d1070a190fd78bd560464860b9",
            "fix_hash": "9f1b740a17f0d54366edfb45df0636b8e302666a",
            "description": "URLCodec causes an IndexOutOfBoundsException in BitSet when encoding non-ASCII\ncharacters.",
            "commit number version hash": 173,
            "commit number": 1243,
            "function that changed": [
                {
                    "function name": "Base32",
                    "function params": [
                        "lineLength",
                        "lineSeparator",
                        "useHex",
                        "padding"
                    ],
                    "file name": "Base32.java",
                    "file old path": "src/main/java/org/apache/commons/codec/binary/Base32.java",
                    "file new path": "src/main/java/org/apache/commons/codec/binary/Base32.java",
                    "full name": "src.main.java.org.apache.commons.codec.binary.Base32.Base32"
                },
                {
                    "function name": "Base32",
                    "function params": [
                        "useHex",
                        "pad"
                    ],
                    "file name": "Base32.java",
                    "file old path": "src/main/java/org/apache/commons/codec/binary/Base32.java",
                    "file new path": "src/main/java/org/apache/commons/codec/binary/Base32.java",
                    "full name": "src.main.java.org.apache.commons.codec.binary.Base32.Base32"
                },
                {
                    "function name": "encode",
                    "function params": [
                        "input",
                        "inPos",
                        "inAvail",
                        "context"
                    ],
                    "file name": "Base32.java",
                    "file old path": "src/main/java/org/apache/commons/codec/binary/Base32.java",
                    "file new path": "src/main/java/org/apache/commons/codec/binary/Base32.java",
                    "full name": "src.main.java.org.apache.commons.codec.binary.Base32.encode"
                },
                {
                    "function name": "Base32",
                    "function params": [
                        "lineLength",
                        "lineSeparator",
                        "useHex",
                        "pad"
                    ],
                    "file name": "Base32.java",
                    "file old path": "src/main/java/org/apache/commons/codec/binary/Base32.java",
                    "file new path": "src/main/java/org/apache/commons/codec/binary/Base32.java",
                    "full name": "src.main.java.org.apache.commons.codec.binary.Base32.Base32"
                },
                {
                    "function name": "decode",
                    "function params": [
                        "input",
                        "inPos",
                        "inAvail",
                        "context"
                    ],
                    "file name": "Base32.java",
                    "file old path": "src/main/java/org/apache/commons/codec/binary/Base32.java",
                    "file new path": "src/main/java/org/apache/commons/codec/binary/Base32.java",
                    "full name": "src.main.java.org.apache.commons.codec.binary.Base32.decode"
                },
                {
                    "function name": "Base32",
                    "function params": [
                        "lineLength",
                        "lineSeparator",
                        "useHex",
                        "padding",
                        "decodingPolicy"
                    ],
                    "file name": "Base32.java",
                    "file old path": "src/main/java/org/apache/commons/codec/binary/Base32.java",
                    "file new path": "src/main/java/org/apache/commons/codec/binary/Base32.java",
                    "full name": "src.main.java.org.apache.commons.codec.binary.Base32.Base32"
                },
                {
                    "function name": "Base32",
                    "function params": [
                        "useHex",
                        "padding"
                    ],
                    "file name": "Base32.java",
                    "file old path": "src/main/java/org/apache/commons/codec/binary/Base32.java",
                    "file new path": "src/main/java/org/apache/commons/codec/binary/Base32.java",
                    "full name": "src.main.java.org.apache.commons.codec.binary.Base32.Base32"
                },
                {
                    "function name": "Base32InputStream",
                    "function params": [
                        "input",
                        "doEncode",
                        "lineLength",
                        "lineSeparator",
                        "decodingPolicy"
                    ],
                    "file name": "Base32InputStream.java",
                    "file old path": "src/main/java/org/apache/commons/codec/binary/Base32InputStream.java",
                    "file new path": "src/main/java/org/apache/commons/codec/binary/Base32InputStream.java",
                    "full name": "src.main.java.org.apache.commons.codec.binary.Base32InputStream.Base32InputStream"
                },
                {
                    "function name": "Base32OutputStream",
                    "function params": [
                        "ouput",
                        "doEncode",
                        "lineLength",
                        "lineSeparator",
                        "decodingPolicy"
                    ],
                    "file name": "Base32OutputStream.java",
                    "file old path": "src/main/java/org/apache/commons/codec/binary/Base32OutputStream.java",
                    "file new path": "src/main/java/org/apache/commons/codec/binary/Base32OutputStream.java",
                    "full name": "src.main.java.org.apache.commons.codec.binary.Base32OutputStream.Base32OutputStream"
                },
                {
                    "function name": "encode",
                    "function params": [
                        "in",
                        "inPos",
                        "inAvail",
                        "context"
                    ],
                    "file name": "Base64.java",
                    "file old path": "src/main/java/org/apache/commons/codec/binary/Base64.java",
                    "file new path": "src/main/java/org/apache/commons/codec/binary/Base64.java",
                    "full name": "src.main.java.org.apache.commons.codec.binary.Base64.encode"
                },
                {
                    "function name": "Base64",
                    "function params": [
                        "lineLength",
                        "lineSeparator",
                        "urlSafe",
                        "decodingPolicy"
                    ],
                    "file name": "Base64.java",
                    "file old path": "src/main/java/org/apache/commons/codec/binary/Base64.java",
                    "file new path": "src/main/java/org/apache/commons/codec/binary/Base64.java",
                    "full name": "src.main.java.org.apache.commons.codec.binary.Base64.Base64"
                },
                {
                    "function name": "Base64",
                    "function params": [
                        "lineLength",
                        "lineSeparator",
                        "urlSafe"
                    ],
                    "file name": "Base64.java",
                    "file old path": "src/main/java/org/apache/commons/codec/binary/Base64.java",
                    "file new path": "src/main/java/org/apache/commons/codec/binary/Base64.java",
                    "full name": "src.main.java.org.apache.commons.codec.binary.Base64.Base64"
                },
                {
                    "function name": "decode",
                    "function params": [
                        "in",
                        "inPos",
                        "inAvail",
                        "context"
                    ],
                    "file name": "Base64.java",
                    "file old path": "src/main/java/org/apache/commons/codec/binary/Base64.java",
                    "file new path": "src/main/java/org/apache/commons/codec/binary/Base64.java",
                    "full name": "src.main.java.org.apache.commons.codec.binary.Base64.decode"
                },
                {
                    "function name": "Base64InputStream",
                    "function params": [
                        "in",
                        "doEncode",
                        "lineLength",
                        "lineSeparator",
                        "decodingPolicy"
                    ],
                    "file name": "Base64InputStream.java",
                    "file old path": "src/main/java/org/apache/commons/codec/binary/Base64InputStream.java",
                    "file new path": "src/main/java/org/apache/commons/codec/binary/Base64InputStream.java",
                    "full name": "src.main.java.org.apache.commons.codec.binary.Base64InputStream.Base64InputStream"
                },
                {
                    "function name": "Base64OutputStream",
                    "function params": [
                        "out",
                        "doEncode",
                        "lineLength",
                        "lineSeparator",
                        "decodingPolicy"
                    ],
                    "file name": "Base64OutputStream.java",
                    "file old path": "src/main/java/org/apache/commons/codec/binary/Base64OutputStream.java",
                    "file new path": "src/main/java/org/apache/commons/codec/binary/Base64OutputStream.java",
                    "full name": "src.main.java.org.apache.commons.codec.binary.Base64OutputStream.Base64OutputStream"
                },
                {
                    "function name": "getCodecPolicy",
                    "function params": [],
                    "file name": "BaseNCodec.java",
                    "file old path": "src/main/java/org/apache/commons/codec/binary/BaseNCodec.java",
                    "file new path": "src/main/java/org/apache/commons/codec/binary/BaseNCodec.java",
                    "full name": "src.main.java.org.apache.commons.codec.binary.BaseNCodec.getCodecPolicy"
                },
                {
                    "function name": "getChunkSeparator",
                    "function params": [],
                    "file name": "BaseNCodec.java",
                    "file old path": "src/main/java/org/apache/commons/codec/binary/BaseNCodec.java",
                    "file new path": "src/main/java/org/apache/commons/codec/binary/BaseNCodec.java",
                    "full name": "src.main.java.org.apache.commons.codec.binary.BaseNCodec.getChunkSeparator"
                },
                {
                    "function name": "BaseNCodec",
                    "function params": [
                        "unencodedBlockSize",
                        "encodedBlockSize",
                        "lineLength",
                        "chunkSeparatorLength",
                        "pad"
                    ],
                    "file name": "BaseNCodec.java",
                    "file old path": "src/main/java/org/apache/commons/codec/binary/BaseNCodec.java",
                    "file new path": "src/main/java/org/apache/commons/codec/binary/BaseNCodec.java",
                    "full name": "src.main.java.org.apache.commons.codec.binary.BaseNCodec.BaseNCodec"
                },
                {
                    "function name": "BaseNCodec",
                    "function params": [
                        "unencodedBlockSize",
                        "encodedBlockSize",
                        "lineLength",
                        "chunkSeparatorLength",
                        "pad",
                        "decodingPolicy"
                    ],
                    "file name": "BaseNCodec.java",
                    "file old path": "src/main/java/org/apache/commons/codec/binary/BaseNCodec.java",
                    "file new path": "src/main/java/org/apache/commons/codec/binary/BaseNCodec.java",
                    "full name": "src.main.java.org.apache.commons.codec.binary.BaseNCodec.BaseNCodec"
                },
                {
                    "function name": "isStrictDecoding",
                    "function params": [],
                    "file name": "BaseNCodec.java",
                    "file old path": "src/main/java/org/apache/commons/codec/binary/BaseNCodec.java",
                    "file new path": "src/main/java/org/apache/commons/codec/binary/BaseNCodec.java",
                    "full name": "src.main.java.org.apache.commons.codec.binary.BaseNCodec.isStrictDecoding"
                },
                {
                    "function name": "doDecoding",
                    "function params": [
                        "bytes"
                    ],
                    "file name": "BCodec.java",
                    "file old path": "src/main/java/org/apache/commons/codec/net/BCodec.java",
                    "file new path": "src/main/java/org/apache/commons/codec/net/BCodec.java",
                    "full name": "src.main.java.org.apache.commons.codec.net.BCodec.doDecoding"
                },
                {
                    "function name": "isStrictDecoding",
                    "function params": [],
                    "file name": "BCodec.java",
                    "file old path": "src/main/java/org/apache/commons/codec/net/BCodec.java",
                    "file new path": "src/main/java/org/apache/commons/codec/net/BCodec.java",
                    "full name": "src.main.java.org.apache.commons.codec.net.BCodec.isStrictDecoding"
                },
                {
                    "function name": "BCodec",
                    "function params": [
                        "charset"
                    ],
                    "file name": "BCodec.java",
                    "file old path": "src/main/java/org/apache/commons/codec/net/BCodec.java",
                    "file new path": "src/main/java/org/apache/commons/codec/net/BCodec.java",
                    "full name": "src.main.java.org.apache.commons.codec.net.BCodec.BCodec"
                },
                {
                    "function name": "BCodec",
                    "function params": [
                        "charset",
                        "decodingPolicy"
                    ],
                    "file name": "BCodec.java",
                    "file old path": "src/main/java/org/apache/commons/codec/net/BCodec.java",
                    "file new path": "src/main/java/org/apache/commons/codec/net/BCodec.java",
                    "full name": "src.main.java.org.apache.commons.codec.net.BCodec.BCodec"
                },
                {
                    "function name": "testStrictDecoding",
                    "function params": [],
                    "file name": "Base32InputStreamTest.java",
                    "file old path": "src/test/java/org/apache/commons/codec/binary/Base32InputStreamTest.java",
                    "file new path": "src/test/java/org/apache/commons/codec/binary/Base32InputStreamTest.java",
                    "full name": "src.test.java.org.apache.commons.codec.binary.Base32InputStreamTest.testStrictDecoding"
                },
                {
                    "function name": "testStrictDecoding",
                    "function params": [],
                    "file name": "Base32OutputStreamTest.java",
                    "file old path": "src/test/java/org/apache/commons/codec/binary/Base32OutputStreamTest.java",
                    "file new path": "src/test/java/org/apache/commons/codec/binary/Base32OutputStreamTest.java",
                    "full name": "src.test.java.org.apache.commons.codec.binary.Base32OutputStreamTest.testStrictDecoding"
                },
                {
                    "function name": "testBase32OutputStreamByteByByte",
                    "function params": [],
                    "file name": "Base32OutputStreamTest.java",
                    "file old path": "src/test/java/org/apache/commons/codec/binary/Base32OutputStreamTest.java",
                    "file new path": "src/test/java/org/apache/commons/codec/binary/Base32OutputStreamTest.java",
                    "full name": "src.test.java.org.apache.commons.codec.binary.Base32OutputStreamTest.testBase32OutputStreamByteByByte"
                },
                {
                    "function name": "testBase32OutputStreamByChunk",
                    "function params": [],
                    "file name": "Base32OutputStreamTest.java",
                    "file old path": "src/test/java/org/apache/commons/codec/binary/Base32OutputStreamTest.java",
                    "file new path": "src/test/java/org/apache/commons/codec/binary/Base32OutputStreamTest.java",
                    "full name": "src.test.java.org.apache.commons.codec.binary.Base32OutputStreamTest.testBase32OutputStreamByChunk"
                },
                {
                    "function name": "testBase32EmptyOutputStream",
                    "function params": [
                        "chunkSize"
                    ],
                    "file name": "Base32OutputStreamTest.java",
                    "file old path": "src/test/java/org/apache/commons/codec/binary/Base32OutputStreamTest.java",
                    "file new path": "src/test/java/org/apache/commons/codec/binary/Base32OutputStreamTest.java",
                    "full name": "src.test.java.org.apache.commons.codec.binary.Base32OutputStreamTest.testBase32EmptyOutputStream"
                },
                {
                    "function name": "testBase32ImpossibleSamples",
                    "function params": [],
                    "file name": "Base32Test.java",
                    "file old path": "src/test/java/org/apache/commons/codec/binary/Base32Test.java",
                    "file new path": "src/test/java/org/apache/commons/codec/binary/Base32Test.java",
                    "full name": "src.test.java.org.apache.commons.codec.binary.Base32Test.testBase32ImpossibleSamples"
                },
                {
                    "function name": "testBase32ImpossibleChunked",
                    "function params": [],
                    "file name": "Base32Test.java",
                    "file old path": "src/test/java/org/apache/commons/codec/binary/Base32Test.java",
                    "file new path": "src/test/java/org/apache/commons/codec/binary/Base32Test.java",
                    "full name": "src.test.java.org.apache.commons.codec.binary.Base32Test.testBase32ImpossibleChunked"
                },
                {
                    "function name": "testImpossibleCases",
                    "function params": [
                        "codec",
                        "impossible_cases"
                    ],
                    "file name": "Base32Test.java",
                    "file old path": "src/test/java/org/apache/commons/codec/binary/Base32Test.java",
                    "file new path": "src/test/java/org/apache/commons/codec/binary/Base32Test.java",
                    "full name": "src.test.java.org.apache.commons.codec.binary.Base32Test.testImpossibleCases"
                },
                {
                    "function name": "assertBase32DecodingOfTrailingBits",
                    "function params": [
                        "nbits"
                    ],
                    "file name": "Base32Test.java",
                    "file old path": "src/test/java/org/apache/commons/codec/binary/Base32Test.java",
                    "file new path": "src/test/java/org/apache/commons/codec/binary/Base32Test.java",
                    "full name": "src.test.java.org.apache.commons.codec.binary.Base32Test.assertBase32DecodingOfTrailingBits"
                },
                {
                    "function name": "testBase32HexImpossibleSamples",
                    "function params": [],
                    "file name": "Base32Test.java",
                    "file old path": "src/test/java/org/apache/commons/codec/binary/Base32Test.java",
                    "file new path": "src/test/java/org/apache/commons/codec/binary/Base32Test.java",
                    "full name": "src.test.java.org.apache.commons.codec.binary.Base32Test.testBase32HexImpossibleSamples"
                },
                {
                    "function name": "testStrictDecoding",
                    "function params": [],
                    "file name": "Base64InputStreamTest.java",
                    "file old path": "src/test/java/org/apache/commons/codec/binary/Base64InputStreamTest.java",
                    "file new path": "src/test/java/org/apache/commons/codec/binary/Base64InputStreamTest.java",
                    "full name": "src.test.java.org.apache.commons.codec.binary.Base64InputStreamTest.testStrictDecoding"
                },
                {
                    "function name": "testBase64EmptyOutputStream",
                    "function params": [
                        "chunkSize"
                    ],
                    "file name": "Base64OutputStreamTest.java",
                    "file old path": "src/test/java/org/apache/commons/codec/binary/Base64OutputStreamTest.java",
                    "file new path": "src/test/java/org/apache/commons/codec/binary/Base64OutputStreamTest.java",
                    "full name": "src.test.java.org.apache.commons.codec.binary.Base64OutputStreamTest.testBase64EmptyOutputStream"
                },
                {
                    "function name": "testBase64OutputStreamByteByByte",
                    "function params": [],
                    "file name": "Base64OutputStreamTest.java",
                    "file old path": "src/test/java/org/apache/commons/codec/binary/Base64OutputStreamTest.java",
                    "file new path": "src/test/java/org/apache/commons/codec/binary/Base64OutputStreamTest.java",
                    "full name": "src.test.java.org.apache.commons.codec.binary.Base64OutputStreamTest.testBase64OutputStreamByteByByte"
                },
                {
                    "function name": "testBase64OutputStreamByChunk",
                    "function params": [],
                    "file name": "Base64OutputStreamTest.java",
                    "file old path": "src/test/java/org/apache/commons/codec/binary/Base64OutputStreamTest.java",
                    "file new path": "src/test/java/org/apache/commons/codec/binary/Base64OutputStreamTest.java",
                    "full name": "src.test.java.org.apache.commons.codec.binary.Base64OutputStreamTest.testBase64OutputStreamByChunk"
                },
                {
                    "function name": "testStrictDecoding",
                    "function params": [],
                    "file name": "Base64OutputStreamTest.java",
                    "file old path": "src/test/java/org/apache/commons/codec/binary/Base64OutputStreamTest.java",
                    "file new path": "src/test/java/org/apache/commons/codec/binary/Base64OutputStreamTest.java",
                    "full name": "src.test.java.org.apache.commons.codec.binary.Base64OutputStreamTest.testStrictDecoding"
                },
                {
                    "function name": "assertBase64DecodingOfTrailingBits",
                    "function params": [
                        "nbits"
                    ],
                    "file name": "Base64Test.java",
                    "file old path": "src/test/java/org/apache/commons/codec/binary/Base64Test.java",
                    "file new path": "src/test/java/org/apache/commons/codec/binary/Base64Test.java",
                    "full name": "src.test.java.org.apache.commons.codec.binary.Base64Test.assertBase64DecodingOfTrailingBits"
                },
                {
                    "function name": "testBase64ImpossibleSamples",
                    "function params": [],
                    "file name": "Base64Test.java",
                    "file old path": "src/test/java/org/apache/commons/codec/binary/Base64Test.java",
                    "file new path": "src/test/java/org/apache/commons/codec/binary/Base64Test.java",
                    "full name": "src.test.java.org.apache.commons.codec.binary.Base64Test.testBase64ImpossibleSamples"
                },
                {
                    "function name": "testBase64ImpossibleSamplesStrict",
                    "function params": [],
                    "file name": "BCodecTest.java",
                    "file old path": "src/test/java/org/apache/commons/codec/net/BCodecTest.java",
                    "file new path": "src/test/java/org/apache/commons/codec/net/BCodecTest.java",
                    "full name": "src.test.java.org.apache.commons.codec.net.BCodecTest.testBase64ImpossibleSamplesStrict"
                },
                {
                    "function name": "testBase64ImpossibleSamplesLenient",
                    "function params": [],
                    "file name": "BCodecTest.java",
                    "file old path": "src/test/java/org/apache/commons/codec/net/BCodecTest.java",
                    "file new path": "src/test/java/org/apache/commons/codec/net/BCodecTest.java",
                    "full name": "src.test.java.org.apache.commons.codec.net.BCodecTest.testBase64ImpossibleSamplesLenient"
                },
                {
                    "function name": "testBase64ImpossibleSamplesDefault",
                    "function params": [],
                    "file name": "BCodecTest.java",
                    "file old path": "src/test/java/org/apache/commons/codec/net/BCodecTest.java",
                    "file new path": "src/test/java/org/apache/commons/codec/net/BCodecTest.java",
                    "full name": "src.test.java.org.apache.commons.codec.net.BCodecTest.testBase64ImpossibleSamplesDefault"
                }
            ],
            "files that changed": [
                "src/main/java/org/apache/commons/codec/binary/Base32.java",
                "src/main/java/org/apache/commons/codec/binary/Base32InputStream.java",
                "src/main/java/org/apache/commons/codec/binary/Base32OutputStream.java",
                "src/main/java/org/apache/commons/codec/binary/Base64.java",
                "src/main/java/org/apache/commons/codec/binary/Base64InputStream.java",
                "src/main/java/org/apache/commons/codec/binary/Base64OutputStream.java",
                "src/main/java/org/apache/commons/codec/binary/BaseNCodec.java",
                "src/main/java/org/apache/commons/codec/binary/BaseNCodecInputStream.java",
                "src/main/java/org/apache/commons/codec/binary/BaseNCodecOutputStream.java",
                "src/main/java/org/apache/commons/codec/net/BCodec.java",
                "src/test/java/org/apache/commons/codec/binary/Base32InputStreamTest.java",
                "src/test/java/org/apache/commons/codec/binary/Base32OutputStreamTest.java",
                "src/test/java/org/apache/commons/codec/binary/Base32Test.java",
                "src/test/java/org/apache/commons/codec/binary/Base64InputStreamTest.java",
                "src/test/java/org/apache/commons/codec/binary/Base64OutputStreamTest.java",
                "src/test/java/org/apache/commons/codec/binary/Base64Test.java",
                "src/test/java/org/apache/commons/codec/net/BCodecTest.java"
            ]
        },
        {
            "bug index": "8",
            "bug id": "CODEC-264",
            "hexsha": "f5a61f0cd029f18666163f414f848ba0e1b39976",
            "fix_hash": "f5a61f0cd029f18666163f414f848ba0e1b39976",
            "description": "The original murmur3_x64_128 code used unsigned int for seed arguments.  Using the equivalent bit patterns in the commons codec version does not yield the same results.\r\n\r\nI believe this is because the commons version does not account for sign extension etc.\r\n\r\nYonic Seeley [~yonik] has explains the issue in his implementation https://github.com/yonik/java_util/blob/master/src/util/hash/MurmurHash3.java\r\n\r\nHe provides a test case to show that his code returns the same answers as the original C/C++ code.  I modified that test to call the codec version to show the error.\r\n\r\nI have attached that test case.\r\n\r\nGiven that the original code is in the wild I am uncertain how to fix this issue.\r\n",
            "commit number version hash": 1237,
            "commit number": 1237,
            "function that changed": [
                {
                    "function name": "hash128x64Internal",
                    "function params": [
                        "data",
                        "offset",
                        "length",
                        "seed"
                    ],
                    "file name": "MurmurHash3.java",
                    "file old path": "src/main/java/org/apache/commons/codec/digest/MurmurHash3.java",
                    "file new path": "src/main/java/org/apache/commons/codec/digest/MurmurHash3.java",
                    "full name": "src.main.java.org.apache.commons.codec.digest.MurmurHash3.hash128x64Internal"
                },
                {
                    "function name": "hash128",
                    "function params": [
                        "data",
                        "offset",
                        "length",
                        "seed"
                    ],
                    "file name": "MurmurHash3.java",
                    "file old path": "src/main/java/org/apache/commons/codec/digest/MurmurHash3.java",
                    "file new path": "src/main/java/org/apache/commons/codec/digest/MurmurHash3.java",
                    "full name": "src.main.java.org.apache.commons.codec.digest.MurmurHash3.hash128"
                },
                {
                    "function name": "hash128x64",
                    "function params": [
                        "data",
                        "offset",
                        "length",
                        "seed"
                    ],
                    "file name": "MurmurHash3.java",
                    "file old path": "src/main/java/org/apache/commons/codec/digest/MurmurHash3.java",
                    "file new path": "src/main/java/org/apache/commons/codec/digest/MurmurHash3.java",
                    "full name": "src.main.java.org.apache.commons.codec.digest.MurmurHash3.hash128x64"
                },
                {
                    "function name": "hash128x64",
                    "function params": [
                        "data",
                        "offset",
                        "length",
                        "seed"
                    ],
                    "file name": "MurmurHash3.java",
                    "file old path": "src/main/java/org/apache/commons/codec/digest/MurmurHash3.java",
                    "file new path": "src/main/java/org/apache/commons/codec/digest/MurmurHash3.java",
                    "full name": "src.main.java.org.apache.commons.codec.digest.MurmurHash3.hash128x64"
                },
                {
                    "function name": "testHash128",
                    "function params": [],
                    "file name": "MurmurHash3Test.java",
                    "file old path": "src/test/java/org/apache/commons/codec/digest/MurmurHash3Test.java",
                    "file new path": "src/test/java/org/apache/commons/codec/digest/MurmurHash3Test.java",
                    "full name": "src.test.java.org.apache.commons.codec.digest.MurmurHash3Test.testHash128"
                },
                {
                    "function name": "testHash128WithOffsetLengthAndNegativeSeed",
                    "function params": [],
                    "file name": "MurmurHash3Test.java",
                    "file old path": "src/test/java/org/apache/commons/codec/digest/MurmurHash3Test.java",
                    "file new path": "src/test/java/org/apache/commons/codec/digest/MurmurHash3Test.java",
                    "full name": "src.test.java.org.apache.commons.codec.digest.MurmurHash3Test.testHash128WithOffsetLengthAndNegativeSeed"
                }
            ],
            "files that changed": [
                "src/main/java/org/apache/commons/codec/digest/MurmurHash3.java",
                "src/test/java/org/apache/commons/codec/digest/MurmurHash3Test.java"
            ]
        },
        {
            "bug index": "9",
            "bug id": "CODEC-4",
            "hexsha": "71e7260746a902d1070a190fd78bd560464860b9",
            "fix_hash": "bc82d82d2a70200f5c7a084908f3587fbe8cc204",
            "description": "You get a ClassCastException in Hex.decode(Object) if you pass in a String object.",
            "commit number version hash": 173,
            "commit number": 1232,
            "function that changed": [
                {
                    "function name": "getInt",
                    "function params": [
                        "buffer",
                        "idx"
                    ],
                    "file name": "XXHash32.java",
                    "file old path": "src/main/java/org/apache/commons/codec/digest/XXHash32.java",
                    "file new path": "src/main/java/org/apache/commons/codec/digest/XXHash32.java",
                    "full name": "src.main.java.org.apache.commons.codec.digest.XXHash32.getInt"
                }
            ],
            "files that changed": [
                "src/main/java/org/apache/commons/codec/digest/XXHash32.java"
            ]
        },
        {
            "bug index": "10",
            "bug id": "CODEC-34",
            "hexsha": "71e7260746a902d1070a190fd78bd560464860b9",
            "fix_hash": "e91852735aae750523ab6e425c3b31e9653d6934",
            "description": "In Codec 1.3,\nBinaryCodec.toAsciiString outputs answer in reverse byte order.  For example:\nbyte [0,1,2] becomes [00000010,00000001,00000000].\n\nBeanShell output:\n\nBinaryCodec.toAsciiString reverses the input byte array.\nbsh % hex = \"0077FF\";\n<0077FF>\nbsh % bytes = Hex.decodeHex(hex.toCharArray());\n<[B@1d520c4>\nbsh % bytes[0];\n<0>\nbsh % bytes[1];\n<119>\nbsh % bytes[2];\n<-1>\nbsh % BinaryCodec.toAsciiString(bytes);\n<111111110111011100000000>",
            "commit number version hash": 173,
            "commit number": 1217,
            "function that changed": [],
            "files that changed": [
                "src/main/java/org/apache/commons/codec/digest/MurmurHash3.java"
            ]
        },
        {
            "bug index": "11",
            "bug id": "CODEC-9",
            "hexsha": "71e7260746a902d1070a190fd78bd560464860b9",
            "fix_hash": "01b69110b181aa30406d18f1a689d07780c3b4a8",
            "description": "This patch deprecates URLCodec#getEncoding method and replaces it with\nURLCodec#getCharSet method, because the term encoding is used in RFC1522 to\nrefer to the encoding/decoding algorithm, whereas charset is used to refer to\nthe character set associated with the unencoded text. \n\nLet me know if you agree/disagree\n\nOleg",
            "commit number version hash": 173,
            "commit number": 1206,
            "function that changed": [
                {
                    "function name": "sha512_224Hex",
                    "function params": [
                        "data"
                    ],
                    "file name": "DigestUtils.java",
                    "file old path": "src/main/java/org/apache/commons/codec/digest/DigestUtils.java",
                    "file new path": "src/main/java/org/apache/commons/codec/digest/DigestUtils.java",
                    "full name": "src.main.java.org.apache.commons.codec.digest.DigestUtils.sha512_224Hex"
                },
                {
                    "function name": "sha512_256",
                    "function params": [
                        "data"
                    ],
                    "file name": "DigestUtils.java",
                    "file old path": "src/main/java/org/apache/commons/codec/digest/DigestUtils.java",
                    "file new path": "src/main/java/org/apache/commons/codec/digest/DigestUtils.java",
                    "full name": "src.main.java.org.apache.commons.codec.digest.DigestUtils.sha512_256"
                },
                {
                    "function name": "sha512_224Hex",
                    "function params": [
                        "data"
                    ],
                    "file name": "DigestUtils.java",
                    "file old path": "src/main/java/org/apache/commons/codec/digest/DigestUtils.java",
                    "file new path": "src/main/java/org/apache/commons/codec/digest/DigestUtils.java",
                    "full name": "src.main.java.org.apache.commons.codec.digest.DigestUtils.sha512_224Hex"
                },
                {
                    "function name": "sha512_224Hex",
                    "function params": [
                        "data"
                    ],
                    "file name": "DigestUtils.java",
                    "file old path": "src/main/java/org/apache/commons/codec/digest/DigestUtils.java",
                    "file new path": "src/main/java/org/apache/commons/codec/digest/DigestUtils.java",
                    "full name": "src.main.java.org.apache.commons.codec.digest.DigestUtils.sha512_224Hex"
                },
                {
                    "function name": "getSha512_256Digest",
                    "function params": [],
                    "file name": "DigestUtils.java",
                    "file old path": "src/main/java/org/apache/commons/codec/digest/DigestUtils.java",
                    "file new path": "src/main/java/org/apache/commons/codec/digest/DigestUtils.java",
                    "full name": "src.main.java.org.apache.commons.codec.digest.DigestUtils.getSha512_256Digest"
                },
                {
                    "function name": "sha512_256",
                    "function params": [
                        "data"
                    ],
                    "file name": "DigestUtils.java",
                    "file old path": "src/main/java/org/apache/commons/codec/digest/DigestUtils.java",
                    "file new path": "src/main/java/org/apache/commons/codec/digest/DigestUtils.java",
                    "full name": "src.main.java.org.apache.commons.codec.digest.DigestUtils.sha512_256"
                },
                {
                    "function name": "sha512_256Hex",
                    "function params": [
                        "data"
                    ],
                    "file name": "DigestUtils.java",
                    "file old path": "src/main/java/org/apache/commons/codec/digest/DigestUtils.java",
                    "file new path": "src/main/java/org/apache/commons/codec/digest/DigestUtils.java",
                    "full name": "src.main.java.org.apache.commons.codec.digest.DigestUtils.sha512_256Hex"
                },
                {
                    "function name": "sha512_224",
                    "function params": [
                        "data"
                    ],
                    "file name": "DigestUtils.java",
                    "file old path": "src/main/java/org/apache/commons/codec/digest/DigestUtils.java",
                    "file new path": "src/main/java/org/apache/commons/codec/digest/DigestUtils.java",
                    "full name": "src.main.java.org.apache.commons.codec.digest.DigestUtils.sha512_224"
                },
                {
                    "function name": "sha512_256Hex",
                    "function params": [
                        "data"
                    ],
                    "file name": "DigestUtils.java",
                    "file old path": "src/main/java/org/apache/commons/codec/digest/DigestUtils.java",
                    "file new path": "src/main/java/org/apache/commons/codec/digest/DigestUtils.java",
                    "full name": "src.main.java.org.apache.commons.codec.digest.DigestUtils.sha512_256Hex"
                },
                {
                    "function name": "sha512_256Hex",
                    "function params": [
                        "data"
                    ],
                    "file name": "DigestUtils.java",
                    "file old path": "src/main/java/org/apache/commons/codec/digest/DigestUtils.java",
                    "file new path": "src/main/java/org/apache/commons/codec/digest/DigestUtils.java",
                    "full name": "src.main.java.org.apache.commons.codec.digest.DigestUtils.sha512_256Hex"
                },
                {
                    "function name": "sha512_256",
                    "function params": [
                        "data"
                    ],
                    "file name": "DigestUtils.java",
                    "file old path": "src/main/java/org/apache/commons/codec/digest/DigestUtils.java",
                    "file new path": "src/main/java/org/apache/commons/codec/digest/DigestUtils.java",
                    "full name": "src.main.java.org.apache.commons.codec.digest.DigestUtils.sha512_256"
                },
                {
                    "function name": "sha512_224",
                    "function params": [
                        "data"
                    ],
                    "file name": "DigestUtils.java",
                    "file old path": "src/main/java/org/apache/commons/codec/digest/DigestUtils.java",
                    "file new path": "src/main/java/org/apache/commons/codec/digest/DigestUtils.java",
                    "full name": "src.main.java.org.apache.commons.codec.digest.DigestUtils.sha512_224"
                },
                {
                    "function name": "sha512_224",
                    "function params": [
                        "data"
                    ],
                    "file name": "DigestUtils.java",
                    "file old path": "src/main/java/org/apache/commons/codec/digest/DigestUtils.java",
                    "file new path": "src/main/java/org/apache/commons/codec/digest/DigestUtils.java",
                    "full name": "src.main.java.org.apache.commons.codec.digest.DigestUtils.sha512_224"
                },
                {
                    "function name": "getSha512_224Digest",
                    "function params": [],
                    "file name": "DigestUtils.java",
                    "file old path": "src/main/java/org/apache/commons/codec/digest/DigestUtils.java",
                    "file new path": "src/main/java/org/apache/commons/codec/digest/DigestUtils.java",
                    "full name": "src.main.java.org.apache.commons.codec.digest.DigestUtils.getSha512_224Digest"
                },
                {
                    "function name": "values",
                    "function params": [],
                    "file name": "MessageDigestAlgorithms.java",
                    "file old path": "src/main/java/org/apache/commons/codec/digest/MessageDigestAlgorithms.java",
                    "file new path": "src/main/java/org/apache/commons/codec/digest/MessageDigestAlgorithms.java",
                    "full name": "src.main.java.org.apache.commons.codec.digest.MessageDigestAlgorithms.values"
                },
                {
                    "function name": "testSha512_224",
                    "function params": [],
                    "file name": "DigestUtilsTest.java",
                    "file old path": "src/test/java/org/apache/commons/codec/digest/DigestUtilsTest.java",
                    "file new path": "src/test/java/org/apache/commons/codec/digest/DigestUtilsTest.java",
                    "full name": "src.test.java.org.apache.commons.codec.digest.DigestUtilsTest.testSha512_224"
                },
                {
                    "function name": "testSha512_256",
                    "function params": [],
                    "file name": "DigestUtilsTest.java",
                    "file old path": "src/test/java/org/apache/commons/codec/digest/DigestUtilsTest.java",
                    "file new path": "src/test/java/org/apache/commons/codec/digest/DigestUtilsTest.java",
                    "full name": "src.test.java.org.apache.commons.codec.digest.DigestUtilsTest.testSha512_256"
                }
            ],
            "files that changed": [
                "src/main/java/org/apache/commons/codec/digest/DigestUtils.java",
                "src/main/java/org/apache/commons/codec/digest/MessageDigestAlgorithms.java",
                "src/test/java/org/apache/commons/codec/digest/DigestUtilsTest.java"
            ]
        },
        {
            "bug index": "12",
            "bug id": "CODEC-6",
            "hexsha": "f3db0de1fe8c429bd3c869108074fed4bdf25b3a",
            "fix_hash": "b436b6d95473b468c66d7814db086a4d8a83b154",
            "description": "The packaging is incorrect. The files in the src tarball should\nall be underneath a directory like \"commons-codec-1.3-src\", as is done\nfor the other packages.\n\nInstead we see:\n\n$ tar tzf commons-codec-1.3-src.tar.gz\n\nsrc/\nsrc/conf/\nsrc/java/\nsrc/java/org/\nsrc/java/org/apache/\nsrc/java/org/apache/commons/\nsrc/java/org/apache/commons/codec/\nsrc/java/org/apache/commons/codec/binary/\nsrc/java/org/apache/commons/codec/digest/\nsrc/java/org/apache/commons/codec/language/\nsrc/java/org/apache/commons/codec/net/\nsrc/media/\nsrc/test/\nsrc/test/org/\nsrc/test/org/apache/\nsrc/test/org/apache/commons/\nsrc/test/org/apache/commons/codec/\nsrc/test/org/apache/commons/codec/binary/\nsrc/test/org/apache/commons/codec/digest/\nsrc/test/org/apache/commons/codec/language/\nsrc/test/org/apache/commons/codec/net/\nLICENSE-header.txt\nLICENSE.txt\nNOTICE.txt\nPROPOSAL.html\nRELEASE-NOTES-1.0-dev.txt\nRELEASE-NOTES-1.1.txt\nRELEASE-NOTES-1.2.txt\nRELEASE-NOTES.txt\nRELEASE-PLAN\nTODO\nbuild.properties.sample\nbuild.xml\n....\n\nNaughty!!",
            "commit number version hash": 549,
            "commit number": 1205,
            "function that changed": [],
            "files that changed": [
                "src/main/java/org/apache/commons/codec/digest/MessageDigestAlgorithms.java"
            ]
        },
        {
            "bug index": "13",
            "bug id": "CODEC-261",
            "hexsha": "f5a61f0cd029f18666163f414f848ba0e1b39976",
            "fix_hash": "d7a4a0290ecaf06be09c1a0c9c35c0a38994c63d",
            "description": "A read-only array-backed {{ByteBuffer}} fails to encode, because the backing array is not accessible.\r\n\r\n{code:java}\r\nHex.encodeHex(ByteBuffer.wrap(new byte[]{1}).asReadOnlyBuffer())\r\n{code}\r\n{noformat}\r\njava.nio.ReadOnlyBufferException\r\n    at java.nio.ByteBuffer.array(ByteBuffer.java:996)\r\n    at org.apache.commons.codec.binary.Hex.encodeHex(Hex.java:213)\r\n    at org.apache.commons.codec.binary.Hex.encodeHex(Hex.java:172)\r\n    at org.apache.commons.codec.binary.Hex.encodeHex(Hex.java:140)\r\n{noformat}",
            "commit number version hash": 1237,
            "commit number": 1196,
            "function that changed": [
                {
                    "function name": "testEncodeHexReadOnlyByteBuffer",
                    "function params": [],
                    "file name": "HexTest.java",
                    "file old path": "src/test/java/org/apache/commons/codec/binary/HexTest.java",
                    "file new path": "src/test/java/org/apache/commons/codec/binary/HexTest.java",
                    "full name": "src.test.java.org.apache.commons.codec.binary.HexTest.testEncodeHexReadOnlyByteBuffer"
                }
            ],
            "files that changed": [
                "src/test/java/org/apache/commons/codec/binary/HexTest.java"
            ]
        },
        {
            "bug index": "14",
            "bug id": "CODEC-259",
            "hexsha": "f5a61f0cd029f18666163f414f848ba0e1b39976",
            "fix_hash": "6cf348211a23835128465a22c9148138fb99c060",
            "description": "java.nio.ByteBuffer support in org.apache.commons.codec.binary.Hex does not work properly for direct ByteBuffer created by ByteBuffer.allocateDirect\u00a0method and for heap ByteBuffers which arrayOffset() or byteBuffer.position() greater than zero or byteBuffer.remaining() is not equal byteBuffer.array().{color:#660e7a}length{color}:\r\n\r\nThis test will produce java.lang.UnsupportedOperationException\r\n{code:java}\r\n@Test\r\npublic void testEncodeHexByteBufferEmpty() {\r\n    assertTrue(Arrays.equals(new char[0], Hex.encodeHex(ByteBuffer.allocateDirect(0))));\r\n}\r\n{code}\r\nThis one will fail\r\n{code:java}\r\n@Test\r\npublic void testEncodeHexByteBufferHelloWorldLowerCaseHex() {\r\n    final ByteBuffer b = ByteBuffer.wrap(StringUtils.getBytesUtf8(\"[Hello World]\"), 1, 11);\r\n    final String expected = \"48656c6c6f20576f726c64\";\r\n    char[] actual;\r\n    actual = Hex.encodeHex(b);\r\n    assertEquals(expected, new String(actual));\r\n    actual = Hex.encodeHex(b, true);\r\n    assertEquals(expected, new String(actual));\r\n    actual = Hex.encodeHex(b, false);\r\n    assertFalse(expected.equals(new String(actual)));\r\n}\r\n{code}",
            "commit number version hash": 1237,
            "commit number": 1195,
            "function that changed": [
                {
                    "function name": "testByteBufferUtf8",
                    "function params": [],
                    "file name": "StringUtilsTest.java",
                    "file old path": "src/test/java/org/apache/commons/codec/binary/StringUtilsTest.java",
                    "file new path": "src/test/java/org/apache/commons/codec/binary/StringUtilsTest.java",
                    "full name": "src.test.java.org.apache.commons.codec.binary.StringUtilsTest.testByteBufferUtf8"
                }
            ],
            "files that changed": [
                "src/test/java/org/apache/commons/codec/binary/StringUtilsTest.java"
            ]
        },
        {
            "bug index": "15",
            "bug id": "CODEC-259",
            "hexsha": "f5a61f0cd029f18666163f414f848ba0e1b39976",
            "fix_hash": "a9e682daaa528ff66465de557cb70c107a196302",
            "description": "java.nio.ByteBuffer support in org.apache.commons.codec.binary.Hex does not work properly for direct ByteBuffer created by ByteBuffer.allocateDirect\u00a0method and for heap ByteBuffers which arrayOffset() or byteBuffer.position() greater than zero or byteBuffer.remaining() is not equal byteBuffer.array().{color:#660e7a}length{color}:\r\n\r\nThis test will produce java.lang.UnsupportedOperationException\r\n{code:java}\r\n@Test\r\npublic void testEncodeHexByteBufferEmpty() {\r\n    assertTrue(Arrays.equals(new char[0], Hex.encodeHex(ByteBuffer.allocateDirect(0))));\r\n}\r\n{code}\r\nThis one will fail\r\n{code:java}\r\n@Test\r\npublic void testEncodeHexByteBufferHelloWorldLowerCaseHex() {\r\n    final ByteBuffer b = ByteBuffer.wrap(StringUtils.getBytesUtf8(\"[Hello World]\"), 1, 11);\r\n    final String expected = \"48656c6c6f20576f726c64\";\r\n    char[] actual;\r\n    actual = Hex.encodeHex(b);\r\n    assertEquals(expected, new String(actual));\r\n    actual = Hex.encodeHex(b, true);\r\n    assertEquals(expected, new String(actual));\r\n    actual = Hex.encodeHex(b, false);\r\n    assertFalse(expected.equals(new String(actual)));\r\n}\r\n{code}",
            "commit number version hash": 1237,
            "commit number": 1194,
            "function that changed": [
                {
                    "function name": "testEncodeHexByteBufferHelloWorldUpperCaseHex",
                    "function params": [],
                    "file name": "HexTest.java",
                    "file old path": "src/test/java/org/apache/commons/codec/binary/HexTest.java",
                    "file new path": "src/test/java/org/apache/commons/codec/binary/HexTest.java",
                    "full name": "src.test.java.org.apache.commons.codec.binary.HexTest.testEncodeHexByteBufferHelloWorldUpperCaseHex"
                },
                {
                    "function name": "testEncodeHexByteBufferHelloWorldLowerCaseHex",
                    "function params": [],
                    "file name": "HexTest.java",
                    "file old path": "src/test/java/org/apache/commons/codec/binary/HexTest.java",
                    "file new path": "src/test/java/org/apache/commons/codec/binary/HexTest.java",
                    "full name": "src.test.java.org.apache.commons.codec.binary.HexTest.testEncodeHexByteBufferHelloWorldLowerCaseHex"
                },
                {
                    "function name": "testDecodeByteBufferWithLimit",
                    "function params": [],
                    "file name": "HexTest.java",
                    "file old path": "src/test/java/org/apache/commons/codec/binary/HexTest.java",
                    "file new path": "src/test/java/org/apache/commons/codec/binary/HexTest.java",
                    "full name": "src.test.java.org.apache.commons.codec.binary.HexTest.testDecodeByteBufferWithLimit"
                },
                {
                    "function name": "getByteBufferUtf8",
                    "function params": [
                        "string"
                    ],
                    "file name": "HexTest.java",
                    "file old path": "src/test/java/org/apache/commons/codec/binary/HexTest.java",
                    "file new path": "src/test/java/org/apache/commons/codec/binary/HexTest.java",
                    "full name": "src.test.java.org.apache.commons.codec.binary.HexTest.getByteBufferUtf8"
                }
            ],
            "files that changed": [
                "src/test/java/org/apache/commons/codec/binary/HexTest.java"
            ]
        },
        {
            "bug index": "16",
            "bug id": "CODEC-259",
            "hexsha": "f5a61f0cd029f18666163f414f848ba0e1b39976",
            "fix_hash": "2311c5e58e6922825d7ecb53ef596b7a8c156bf1",
            "description": "java.nio.ByteBuffer support in org.apache.commons.codec.binary.Hex does not work properly for direct ByteBuffer created by ByteBuffer.allocateDirect\u00a0method and for heap ByteBuffers which arrayOffset() or byteBuffer.position() greater than zero or byteBuffer.remaining() is not equal byteBuffer.array().{color:#660e7a}length{color}:\r\n\r\nThis test will produce java.lang.UnsupportedOperationException\r\n{code:java}\r\n@Test\r\npublic void testEncodeHexByteBufferEmpty() {\r\n    assertTrue(Arrays.equals(new char[0], Hex.encodeHex(ByteBuffer.allocateDirect(0))));\r\n}\r\n{code}\r\nThis one will fail\r\n{code:java}\r\n@Test\r\npublic void testEncodeHexByteBufferHelloWorldLowerCaseHex() {\r\n    final ByteBuffer b = ByteBuffer.wrap(StringUtils.getBytesUtf8(\"[Hello World]\"), 1, 11);\r\n    final String expected = \"48656c6c6f20576f726c64\";\r\n    char[] actual;\r\n    actual = Hex.encodeHex(b);\r\n    assertEquals(expected, new String(actual));\r\n    actual = Hex.encodeHex(b, true);\r\n    assertEquals(expected, new String(actual));\r\n    actual = Hex.encodeHex(b, false);\r\n    assertFalse(expected.equals(new String(actual)));\r\n}\r\n{code}",
            "commit number version hash": 1237,
            "commit number": 1193,
            "function that changed": [
                {
                    "function name": "toByteArray",
                    "function params": [
                        "byteBuffer"
                    ],
                    "file name": "Hex.java",
                    "file old path": "src/main/java/org/apache/commons/codec/binary/Hex.java",
                    "file new path": "src/main/java/org/apache/commons/codec/binary/Hex.java",
                    "full name": "src.main.java.org.apache.commons.codec.binary.Hex.toByteArray"
                },
                {
                    "function name": "testEncodeHexByteString_ByteBufferBoolean_ToLowerCase",
                    "function params": [],
                    "file name": "HexTest.java",
                    "file old path": "src/test/java/org/apache/commons/codec/binary/HexTest.java",
                    "file new path": "src/test/java/org/apache/commons/codec/binary/HexTest.java",
                    "full name": "src.test.java.org.apache.commons.codec.binary.HexTest.testEncodeHexByteString_ByteBufferBoolean_ToLowerCase"
                },
                {
                    "function name": "testDecodeByteBufferWithLimit",
                    "function params": [],
                    "file name": "HexTest.java",
                    "file old path": "src/test/java/org/apache/commons/codec/binary/HexTest.java",
                    "file new path": "src/test/java/org/apache/commons/codec/binary/HexTest.java",
                    "full name": "src.test.java.org.apache.commons.codec.binary.HexTest.testDecodeByteBufferWithLimit"
                },
                {
                    "function name": "testEncodeHexByteString_ByteBufferWithLimitBoolean_ToLowerCase",
                    "function params": [],
                    "file name": "HexTest.java",
                    "file old path": "src/test/java/org/apache/commons/codec/binary/HexTest.java",
                    "file new path": "src/test/java/org/apache/commons/codec/binary/HexTest.java",
                    "full name": "src.test.java.org.apache.commons.codec.binary.HexTest.testEncodeHexByteString_ByteBufferWithLimitBoolean_ToLowerCase"
                },
                {
                    "function name": "testDecodeByteBufferWithLimitOddCharacters",
                    "function params": [],
                    "file name": "HexTest.java",
                    "file old path": "src/test/java/org/apache/commons/codec/binary/HexTest.java",
                    "file new path": "src/test/java/org/apache/commons/codec/binary/HexTest.java",
                    "full name": "src.test.java.org.apache.commons.codec.binary.HexTest.testDecodeByteBufferWithLimitOddCharacters"
                },
                {
                    "function name": "testEncodeHexByteString_ByteBufferBoolean_ToUpperCase",
                    "function params": [],
                    "file name": "HexTest.java",
                    "file old path": "src/test/java/org/apache/commons/codec/binary/HexTest.java",
                    "file new path": "src/test/java/org/apache/commons/codec/binary/HexTest.java",
                    "full name": "src.test.java.org.apache.commons.codec.binary.HexTest.testEncodeHexByteString_ByteBufferBoolean_ToUpperCase"
                },
                {
                    "function name": "testEncodeHexByteBufferHelloWorldUpperCaseHex",
                    "function params": [],
                    "file name": "HexTest.java",
                    "file old path": "src/test/java/org/apache/commons/codec/binary/HexTest.java",
                    "file new path": "src/test/java/org/apache/commons/codec/binary/HexTest.java",
                    "full name": "src.test.java.org.apache.commons.codec.binary.HexTest.testEncodeHexByteBufferHelloWorldUpperCaseHex"
                },
                {
                    "function name": "testEncodeHexByteString_ByteBufferOfZeroesWithLimit",
                    "function params": [],
                    "file name": "HexTest.java",
                    "file old path": "src/test/java/org/apache/commons/codec/binary/HexTest.java",
                    "file new path": "src/test/java/org/apache/commons/codec/binary/HexTest.java",
                    "full name": "src.test.java.org.apache.commons.codec.binary.HexTest.testEncodeHexByteString_ByteBufferOfZeroesWithLimit"
                },
                {
                    "function name": "testEncodeHex_ByteBufferWithLimit",
                    "function params": [],
                    "file name": "HexTest.java",
                    "file old path": "src/test/java/org/apache/commons/codec/binary/HexTest.java",
                    "file new path": "src/test/java/org/apache/commons/codec/binary/HexTest.java",
                    "full name": "src.test.java.org.apache.commons.codec.binary.HexTest.testEncodeHex_ByteBufferWithLimit"
                },
                {
                    "function name": "testEncodeHexByteBufferHelloWorldLowerCaseHex",
                    "function params": [],
                    "file name": "HexTest.java",
                    "file old path": "src/test/java/org/apache/commons/codec/binary/HexTest.java",
                    "file new path": "src/test/java/org/apache/commons/codec/binary/HexTest.java",
                    "full name": "src.test.java.org.apache.commons.codec.binary.HexTest.testEncodeHexByteBufferHelloWorldLowerCaseHex"
                },
                {
                    "function name": "testDecodeByteBufferOddCharacters",
                    "function params": [],
                    "file name": "HexTest.java",
                    "file old path": "src/test/java/org/apache/commons/codec/binary/HexTest.java",
                    "file new path": "src/test/java/org/apache/commons/codec/binary/HexTest.java",
                    "full name": "src.test.java.org.apache.commons.codec.binary.HexTest.testDecodeByteBufferOddCharacters"
                },
                {
                    "function name": "testEncodeByteBufferAllocatedButEmpty",
                    "function params": [],
                    "file name": "HexTest.java",
                    "file old path": "src/test/java/org/apache/commons/codec/binary/HexTest.java",
                    "file new path": "src/test/java/org/apache/commons/codec/binary/HexTest.java",
                    "full name": "src.test.java.org.apache.commons.codec.binary.HexTest.testEncodeByteBufferAllocatedButEmpty"
                },
                {
                    "function name": "testDecodeByteBufferAllocatedButEmpty",
                    "function params": [],
                    "file name": "HexTest.java",
                    "file old path": "src/test/java/org/apache/commons/codec/binary/HexTest.java",
                    "file new path": "src/test/java/org/apache/commons/codec/binary/HexTest.java",
                    "full name": "src.test.java.org.apache.commons.codec.binary.HexTest.testDecodeByteBufferAllocatedButEmpty"
                },
                {
                    "function name": "testEncodeHexByteString_ByteBufferWithLimitBoolean_ToUpperCase",
                    "function params": [],
                    "file name": "HexTest.java",
                    "file old path": "src/test/java/org/apache/commons/codec/binary/HexTest.java",
                    "file new path": "src/test/java/org/apache/commons/codec/binary/HexTest.java",
                    "full name": "src.test.java.org.apache.commons.codec.binary.HexTest.testEncodeHexByteString_ByteBufferWithLimitBoolean_ToUpperCase"
                }
            ],
            "files that changed": [
                "src/main/java/org/apache/commons/codec/binary/Hex.java",
                "src/test/java/org/apache/commons/codec/binary/HexTest.java"
            ]
        },
        {
            "bug index": "17",
            "bug id": "CODEC-259",
            "hexsha": "f5a61f0cd029f18666163f414f848ba0e1b39976",
            "fix_hash": "a84f53d38f93504036fed5cf3fd42f57a8637b16",
            "description": "java.nio.ByteBuffer support in org.apache.commons.codec.binary.Hex does not work properly for direct ByteBuffer created by ByteBuffer.allocateDirect\u00a0method and for heap ByteBuffers which arrayOffset() or byteBuffer.position() greater than zero or byteBuffer.remaining() is not equal byteBuffer.array().{color:#660e7a}length{color}:\r\n\r\nThis test will produce java.lang.UnsupportedOperationException\r\n{code:java}\r\n@Test\r\npublic void testEncodeHexByteBufferEmpty() {\r\n    assertTrue(Arrays.equals(new char[0], Hex.encodeHex(ByteBuffer.allocateDirect(0))));\r\n}\r\n{code}\r\nThis one will fail\r\n{code:java}\r\n@Test\r\npublic void testEncodeHexByteBufferHelloWorldLowerCaseHex() {\r\n    final ByteBuffer b = ByteBuffer.wrap(StringUtils.getBytesUtf8(\"[Hello World]\"), 1, 11);\r\n    final String expected = \"48656c6c6f20576f726c64\";\r\n    char[] actual;\r\n    actual = Hex.encodeHex(b);\r\n    assertEquals(expected, new String(actual));\r\n    actual = Hex.encodeHex(b, true);\r\n    assertEquals(expected, new String(actual));\r\n    actual = Hex.encodeHex(b, false);\r\n    assertFalse(expected.equals(new String(actual)));\r\n}\r\n{code}",
            "commit number version hash": 1237,
            "commit number": 1192,
            "function that changed": [
                {
                    "function name": "toByteArray",
                    "function params": [
                        "byteBuffer"
                    ],
                    "file name": "Hex.java",
                    "file old path": "src/main/java/org/apache/commons/codec/binary/Hex.java",
                    "file new path": "src/main/java/org/apache/commons/codec/binary/Hex.java",
                    "full name": "src.main.java.org.apache.commons.codec.binary.Hex.toByteArray"
                },
                {
                    "function name": "testDecodeByteBufferWithLimit",
                    "function params": [],
                    "file name": "HexTest.java",
                    "file old path": "src/test/java/org/apache/commons/codec/binary/HexTest.java",
                    "file new path": "src/test/java/org/apache/commons/codec/binary/HexTest.java",
                    "full name": "src.test.java.org.apache.commons.codec.binary.HexTest.testDecodeByteBufferWithLimit"
                },
                {
                    "function name": "testEncodeHexByteString_ByteBufferWithLimitBoolean_ToLowerCase",
                    "function params": [],
                    "file name": "HexTest.java",
                    "file old path": "src/test/java/org/apache/commons/codec/binary/HexTest.java",
                    "file new path": "src/test/java/org/apache/commons/codec/binary/HexTest.java",
                    "full name": "src.test.java.org.apache.commons.codec.binary.HexTest.testEncodeHexByteString_ByteBufferWithLimitBoolean_ToLowerCase"
                },
                {
                    "function name": "checkDecodeHexByteBufferOddCharacters",
                    "function params": [
                        "data"
                    ],
                    "file name": "HexTest.java",
                    "file old path": "src/test/java/org/apache/commons/codec/binary/HexTest.java",
                    "file new path": "src/test/java/org/apache/commons/codec/binary/HexTest.java",
                    "full name": "src.test.java.org.apache.commons.codec.binary.HexTest.checkDecodeHexByteBufferOddCharacters"
                },
                {
                    "function name": "testEncodeHexByteString_ByteBufferOfZeroesWithLimit",
                    "function params": [],
                    "file name": "HexTest.java",
                    "file old path": "src/test/java/org/apache/commons/codec/binary/HexTest.java",
                    "file new path": "src/test/java/org/apache/commons/codec/binary/HexTest.java",
                    "full name": "src.test.java.org.apache.commons.codec.binary.HexTest.testEncodeHexByteString_ByteBufferOfZeroesWithLimit"
                },
                {
                    "function name": "testDecodeByteBufferWithLimitOddCharacters",
                    "function params": [],
                    "file name": "HexTest.java",
                    "file old path": "src/test/java/org/apache/commons/codec/binary/HexTest.java",
                    "file new path": "src/test/java/org/apache/commons/codec/binary/HexTest.java",
                    "full name": "src.test.java.org.apache.commons.codec.binary.HexTest.testDecodeByteBufferWithLimitOddCharacters"
                },
                {
                    "function name": "testEncodeHex_ByteBufferWithLimit",
                    "function params": [],
                    "file name": "HexTest.java",
                    "file old path": "src/test/java/org/apache/commons/codec/binary/HexTest.java",
                    "file new path": "src/test/java/org/apache/commons/codec/binary/HexTest.java",
                    "full name": "src.test.java.org.apache.commons.codec.binary.HexTest.testEncodeHex_ByteBufferWithLimit"
                },
                {
                    "function name": "testDecodeByteBufferOddCharacters",
                    "function params": [],
                    "file name": "HexTest.java",
                    "file old path": "src/test/java/org/apache/commons/codec/binary/HexTest.java",
                    "file new path": "src/test/java/org/apache/commons/codec/binary/HexTest.java",
                    "full name": "src.test.java.org.apache.commons.codec.binary.HexTest.testDecodeByteBufferOddCharacters"
                },
                {
                    "function name": "testEncodeByteBufferAllocatedButEmpty",
                    "function params": [],
                    "file name": "HexTest.java",
                    "file old path": "src/test/java/org/apache/commons/codec/binary/HexTest.java",
                    "file new path": "src/test/java/org/apache/commons/codec/binary/HexTest.java",
                    "full name": "src.test.java.org.apache.commons.codec.binary.HexTest.testEncodeByteBufferAllocatedButEmpty"
                },
                {
                    "function name": "testDecodeByteBufferAllocatedButEmpty",
                    "function params": [],
                    "file name": "HexTest.java",
                    "file old path": "src/test/java/org/apache/commons/codec/binary/HexTest.java",
                    "file new path": "src/test/java/org/apache/commons/codec/binary/HexTest.java",
                    "full name": "src.test.java.org.apache.commons.codec.binary.HexTest.testDecodeByteBufferAllocatedButEmpty"
                },
                {
                    "function name": "testEncodeHexByteString_ByteBufferWithLimitBoolean_ToUpperCase",
                    "function params": [],
                    "file name": "HexTest.java",
                    "file old path": "src/test/java/org/apache/commons/codec/binary/HexTest.java",
                    "file new path": "src/test/java/org/apache/commons/codec/binary/HexTest.java",
                    "full name": "src.test.java.org.apache.commons.codec.binary.HexTest.testEncodeHexByteString_ByteBufferWithLimitBoolean_ToUpperCase"
                }
            ],
            "files that changed": [
                "src/main/java/org/apache/commons/codec/binary/Hex.java",
                "src/test/java/org/apache/commons/codec/binary/HexTest.java"
            ]
        },
        {
            "bug index": "18",
            "bug id": "CODEC-31",
            "hexsha": "71e7260746a902d1070a190fd78bd560464860b9",
            "fix_hash": "625cedf140f383f3f5c4f992906a4bb6b809dfd7",
            "description": "Base64 chunked encoding not compliant with RFC 2045 section 2.1 CRLF. We use\n\"\\n\" instead of CRLF or \"\\r\\n\".",
            "commit number version hash": 173,
            "commit number": 1190,
            "function that changed": [
                {
                    "function name": "sha3_224Hex",
                    "function params": [
                        "data"
                    ],
                    "file name": "DigestUtils.java",
                    "file old path": "src/main/java/org/apache/commons/codec/digest/DigestUtils.java",
                    "file new path": "src/main/java/org/apache/commons/codec/digest/DigestUtils.java",
                    "full name": "src.main.java.org.apache.commons.codec.digest.DigestUtils.sha3_224Hex"
                },
                {
                    "function name": "sha3_384Hex",
                    "function params": [
                        "data"
                    ],
                    "file name": "DigestUtils.java",
                    "file old path": "src/main/java/org/apache/commons/codec/digest/DigestUtils.java",
                    "file new path": "src/main/java/org/apache/commons/codec/digest/DigestUtils.java",
                    "full name": "src.main.java.org.apache.commons.codec.digest.DigestUtils.sha3_384Hex"
                },
                {
                    "function name": "sha3_512Hex",
                    "function params": [
                        "data"
                    ],
                    "file name": "DigestUtils.java",
                    "file old path": "src/main/java/org/apache/commons/codec/digest/DigestUtils.java",
                    "file new path": "src/main/java/org/apache/commons/codec/digest/DigestUtils.java",
                    "full name": "src.main.java.org.apache.commons.codec.digest.DigestUtils.sha3_512Hex"
                },
                {
                    "function name": "updateDigest",
                    "function params": [
                        "digest",
                        "data"
                    ],
                    "file name": "DigestUtils.java",
                    "file old path": "src/main/java/org/apache/commons/codec/digest/DigestUtils.java",
                    "file new path": "src/main/java/org/apache/commons/codec/digest/DigestUtils.java",
                    "full name": "src.main.java.org.apache.commons.codec.digest.DigestUtils.updateDigest"
                },
                {
                    "function name": "sha3_224Hex",
                    "function params": [
                        "data"
                    ],
                    "file name": "DigestUtils.java",
                    "file old path": "src/main/java/org/apache/commons/codec/digest/DigestUtils.java",
                    "file new path": "src/main/java/org/apache/commons/codec/digest/DigestUtils.java",
                    "full name": "src.main.java.org.apache.commons.codec.digest.DigestUtils.sha3_224Hex"
                },
                {
                    "function name": "digest",
                    "function params": [
                        "messageDigest",
                        "data"
                    ],
                    "file name": "DigestUtils.java",
                    "file old path": "src/main/java/org/apache/commons/codec/digest/DigestUtils.java",
                    "file new path": "src/main/java/org/apache/commons/codec/digest/DigestUtils.java",
                    "full name": "src.main.java.org.apache.commons.codec.digest.DigestUtils.digest"
                },
                {
                    "function name": "sha3_256Hex",
                    "function params": [
                        "data"
                    ],
                    "file name": "DigestUtils.java",
                    "file old path": "src/main/java/org/apache/commons/codec/digest/DigestUtils.java",
                    "file new path": "src/main/java/org/apache/commons/codec/digest/DigestUtils.java",
                    "full name": "src.main.java.org.apache.commons.codec.digest.DigestUtils.sha3_256Hex"
                },
                {
                    "function name": "sha3_384Hex",
                    "function params": [
                        "data"
                    ],
                    "file name": "DigestUtils.java",
                    "file old path": "src/main/java/org/apache/commons/codec/digest/DigestUtils.java",
                    "file new path": "src/main/java/org/apache/commons/codec/digest/DigestUtils.java",
                    "full name": "src.main.java.org.apache.commons.codec.digest.DigestUtils.sha3_384Hex"
                },
                {
                    "function name": "sha3_256Hex",
                    "function params": [
                        "data"
                    ],
                    "file name": "DigestUtils.java",
                    "file old path": "src/main/java/org/apache/commons/codec/digest/DigestUtils.java",
                    "file new path": "src/main/java/org/apache/commons/codec/digest/DigestUtils.java",
                    "full name": "src.main.java.org.apache.commons.codec.digest.DigestUtils.sha3_256Hex"
                },
                {
                    "function name": "updateDigest",
                    "function params": [
                        "digest",
                        "data"
                    ],
                    "file name": "DigestUtils.java",
                    "file old path": "src/main/java/org/apache/commons/codec/digest/DigestUtils.java",
                    "file new path": "src/main/java/org/apache/commons/codec/digest/DigestUtils.java",
                    "full name": "src.main.java.org.apache.commons.codec.digest.DigestUtils.updateDigest"
                },
                {
                    "function name": "sha3_512Hex",
                    "function params": [
                        "data"
                    ],
                    "file name": "DigestUtils.java",
                    "file old path": "src/main/java/org/apache/commons/codec/digest/DigestUtils.java",
                    "file new path": "src/main/java/org/apache/commons/codec/digest/DigestUtils.java",
                    "full name": "src.main.java.org.apache.commons.codec.digest.DigestUtils.sha3_512Hex"
                },
                {
                    "function name": "setUp",
                    "function params": [],
                    "file name": "DigestUtilsTest.java",
                    "file old path": "src/test/java/org/apache/commons/codec/digest/DigestUtilsTest.java",
                    "file new path": "src/test/java/org/apache/commons/codec/digest/DigestUtilsTest.java",
                    "full name": "src.test.java.org.apache.commons.codec.digest.DigestUtilsTest.setUp"
                },
                {
                    "function name": "tearDown",
                    "function params": [],
                    "file name": "DigestUtilsTest.java",
                    "file old path": "src/test/java/org/apache/commons/codec/digest/DigestUtilsTest.java",
                    "file new path": "src/test/java/org/apache/commons/codec/digest/DigestUtilsTest.java",
                    "full name": "src.test.java.org.apache.commons.codec.digest.DigestUtilsTest.tearDown"
                },
                {
                    "function name": "getTestRandomAccessFile",
                    "function params": [],
                    "file name": "DigestUtilsTest.java",
                    "file old path": "src/test/java/org/apache/commons/codec/digest/DigestUtilsTest.java",
                    "file new path": "src/test/java/org/apache/commons/codec/digest/DigestUtilsTest.java",
                    "full name": "src.test.java.org.apache.commons.codec.digest.DigestUtilsTest.getTestRandomAccessFile"
                },
                {
                    "function name": "getTestRandomAccessFile",
                    "function params": [],
                    "file name": "MessageDigestAlgorithmsTest.java",
                    "file old path": "src/test/java/org/apache/commons/codec/digest/MessageDigestAlgorithmsTest.java",
                    "file new path": "src/test/java/org/apache/commons/codec/digest/MessageDigestAlgorithmsTest.java",
                    "full name": "src.test.java.org.apache.commons.codec.digest.MessageDigestAlgorithmsTest.getTestRandomAccessFile"
                },
                {
                    "function name": "testNonBlockingDigestRandomAccessFile",
                    "function params": [],
                    "file name": "MessageDigestAlgorithmsTest.java",
                    "file old path": "src/test/java/org/apache/commons/codec/digest/MessageDigestAlgorithmsTest.java",
                    "file new path": "src/test/java/org/apache/commons/codec/digest/MessageDigestAlgorithmsTest.java",
                    "full name": "src.test.java.org.apache.commons.codec.digest.MessageDigestAlgorithmsTest.testNonBlockingDigestRandomAccessFile"
                }
            ],
            "files that changed": [
                "src/main/java/org/apache/commons/codec/digest/DigestUtils.java",
                "src/test/java/org/apache/commons/codec/digest/DigestUtilsTest.java",
                "src/test/java/org/apache/commons/codec/digest/MessageDigestAlgorithmsTest.java"
            ]
        },
        {
            "bug index": "19",
            "bug id": "CODEC-265",
            "hexsha": "f5a61f0cd029f18666163f414f848ba0e1b39976",
            "fix_hash": "9a84b3a53b37204c6ae9549ba41037c60f15479b",
            "description": "Hi,\r\n\r\ntrying to encode a file that is 1GB of size.\r\n\r\n( linux :\r\n{code:java}\r\nfallocate -l 1GB 1gb.zip{code}\r\n)\r\n\r\nI want to post that file to a RESTful-service, package in JSON.\r\n\r\n*here is the code* \r\n\r\n\u00a0\r\n\r\n\u00a0\r\n{code:java}\r\nString filePath = \"/tmp/1gb.zip\";\r\nSystem.out.println(\"\\t Post to\u00a0 : \".concat(URL));\r\n System.out.println(\"\\t file : \".concat(filePath));\r\nPath path = Paths.get(filePath);\r\n byte[] bArray = Files.readAllBytes(path);\r\n// testing commons codec 1.16 (2019-11-05)\r\n byte[] encodeBase64 = Base64.encodeBase64(bArray);\r\nfinal String contentToBeSaved = new String(encodeBase64);\r\nHttpClient client = HttpClientBuilder.create().build();\r\n HttpResponse response = null;\r\nJSONObject metadata = new JSONObject();\r\n metadata.put(\"owner\", \"Ingo\");\r\n metadata.put(\"access\", \"public\");\r\n metadata.put(\"licenseType\", \"CC BY\");\r\n metadata.put(\"fileName\", \"fileName\");\r\n metadata.put(\"fileDataBase64\", contentToBeSaved);\r\nString metadataFormatted = StringEscapeUtils.unescapeJavaScript(metadata.toString());\r\nStringEntity entity = new StringEntity(metadataFormatted, ContentType.APPLICATION_JSON);\r\nHttpPost post = new HttpPost(URL);\r\n post.setEntity(entity);\r\n response = client.execute(post);\r\n HttpEntity responseEntity = response.getEntity();\r\nString responseFromMediaserver = EntityUtils.toString(responseEntity, \"UTF-8\");\r\n System.out.println(\"\\n****\");\r\n System.out.println(\"Response is : \" + responseFromMediaserver);\r\nJSONObject json = new JSONObject(responseFromMediaserver);\r\n String uuid = json.getString(\"uuid\");\r\n System.out.println(\"UUID is \" + uuid);\r\n{code}\r\n\u00a0\r\n\r\n\u00a0\r\n # mvn clean package\r\n # \u00a0 java -Xms512m -Xmx20480m -jar target/mediaClient.jar\u00a0\r\n\r\nThe crasch is in\r\n\r\n\u00a0\r\n{code:java}\r\nbyte[] encodeBase64 = Base64.encodeBase64(bArray);{code}\r\n\u00a0\r\n\r\nthe stacktrace is :\r\n{code:java}\r\n\u00a0\r\nStarting NewClientEncodePost\r\n Post to : http://127.0.0.1:8080/MediaServerResteasy/media\r\n file : /tmp/1gb.zip\r\nException in thread \"main\" java.lang.NegativeArraySizeException\r\n at org.apache.commons.codec.binary.BaseNCodec.resizeBuffer(BaseNCodec.java:253)\r\n at org.apache.commons.codec.binary.BaseNCodec.ensureBufferSize(BaseNCodec.java:269)\r\n at org.apache.commons.codec.binary.Base64.encode(Base64.java:380)\r\n at org.apache.commons.codec.binary.BaseNCodec.encode(BaseNCodec.java:451)\r\n at org.apache.commons.codec.binary.BaseNCodec.encode(BaseNCodec.java:430)\r\n at org.apache.commons.codec.binary.Base64.encodeBase64(Base64.java:679)\r\n at org.apache.commons.codec.binary.Base64.encodeBase64(Base64.java:642)\r\n at org.apache.commons.codec.binary.Base64.encodeBase64(Base64.java:623)\r\n at org.apache.commons.codec.binary.Base64.encodeBase64(Base64.java:556)\r\n at se.nrm.bio.mediaserver.testing.base64.NewClientEncodePost.posting(NewClientEncodePost.java:55)\r\n at se.nrm.bio.mediaserver.testing.base64.NewClientEncodePost.main(NewClientEncodePost.java:38)\r\n\u00a0\r\n{code}\r\n\u00a0\r\n\r\n\u00a0",
            "commit number version hash": 1237,
            "commit number": 1183,
            "function that changed": [],
            "files that changed": [
                "src/test/java/org/apache/commons/codec/binary/Base64Test.java"
            ]
        },
        {
            "bug index": "20",
            "bug id": "CODEC-265",
            "hexsha": "f5a61f0cd029f18666163f414f848ba0e1b39976",
            "fix_hash": "0956493bcb3fe40ca37d66768ec7817f8a1f410b",
            "description": "Hi,\r\n\r\ntrying to encode a file that is 1GB of size.\r\n\r\n( linux :\r\n{code:java}\r\nfallocate -l 1GB 1gb.zip{code}\r\n)\r\n\r\nI want to post that file to a RESTful-service, package in JSON.\r\n\r\n*here is the code* \r\n\r\n\u00a0\r\n\r\n\u00a0\r\n{code:java}\r\nString filePath = \"/tmp/1gb.zip\";\r\nSystem.out.println(\"\\t Post to\u00a0 : \".concat(URL));\r\n System.out.println(\"\\t file : \".concat(filePath));\r\nPath path = Paths.get(filePath);\r\n byte[] bArray = Files.readAllBytes(path);\r\n// testing commons codec 1.16 (2019-11-05)\r\n byte[] encodeBase64 = Base64.encodeBase64(bArray);\r\nfinal String contentToBeSaved = new String(encodeBase64);\r\nHttpClient client = HttpClientBuilder.create().build();\r\n HttpResponse response = null;\r\nJSONObject metadata = new JSONObject();\r\n metadata.put(\"owner\", \"Ingo\");\r\n metadata.put(\"access\", \"public\");\r\n metadata.put(\"licenseType\", \"CC BY\");\r\n metadata.put(\"fileName\", \"fileName\");\r\n metadata.put(\"fileDataBase64\", contentToBeSaved);\r\nString metadataFormatted = StringEscapeUtils.unescapeJavaScript(metadata.toString());\r\nStringEntity entity = new StringEntity(metadataFormatted, ContentType.APPLICATION_JSON);\r\nHttpPost post = new HttpPost(URL);\r\n post.setEntity(entity);\r\n response = client.execute(post);\r\n HttpEntity responseEntity = response.getEntity();\r\nString responseFromMediaserver = EntityUtils.toString(responseEntity, \"UTF-8\");\r\n System.out.println(\"\\n****\");\r\n System.out.println(\"Response is : \" + responseFromMediaserver);\r\nJSONObject json = new JSONObject(responseFromMediaserver);\r\n String uuid = json.getString(\"uuid\");\r\n System.out.println(\"UUID is \" + uuid);\r\n{code}\r\n\u00a0\r\n\r\n\u00a0\r\n # mvn clean package\r\n # \u00a0 java -Xms512m -Xmx20480m -jar target/mediaClient.jar\u00a0\r\n\r\nThe crasch is in\r\n\r\n\u00a0\r\n{code:java}\r\nbyte[] encodeBase64 = Base64.encodeBase64(bArray);{code}\r\n\u00a0\r\n\r\nthe stacktrace is :\r\n{code:java}\r\n\u00a0\r\nStarting NewClientEncodePost\r\n Post to : http://127.0.0.1:8080/MediaServerResteasy/media\r\n file : /tmp/1gb.zip\r\nException in thread \"main\" java.lang.NegativeArraySizeException\r\n at org.apache.commons.codec.binary.BaseNCodec.resizeBuffer(BaseNCodec.java:253)\r\n at org.apache.commons.codec.binary.BaseNCodec.ensureBufferSize(BaseNCodec.java:269)\r\n at org.apache.commons.codec.binary.Base64.encode(Base64.java:380)\r\n at org.apache.commons.codec.binary.BaseNCodec.encode(BaseNCodec.java:451)\r\n at org.apache.commons.codec.binary.BaseNCodec.encode(BaseNCodec.java:430)\r\n at org.apache.commons.codec.binary.Base64.encodeBase64(Base64.java:679)\r\n at org.apache.commons.codec.binary.Base64.encodeBase64(Base64.java:642)\r\n at org.apache.commons.codec.binary.Base64.encodeBase64(Base64.java:623)\r\n at org.apache.commons.codec.binary.Base64.encodeBase64(Base64.java:556)\r\n at se.nrm.bio.mediaserver.testing.base64.NewClientEncodePost.posting(NewClientEncodePost.java:55)\r\n at se.nrm.bio.mediaserver.testing.base64.NewClientEncodePost.main(NewClientEncodePost.java:38)\r\n\u00a0\r\n{code}\r\n\u00a0\r\n\r\n\u00a0",
            "commit number version hash": 1237,
            "commit number": 1182,
            "function that changed": [
                {
                    "function name": "resizeBuffer",
                    "function params": [
                        "context",
                        "minCapacity"
                    ],
                    "file name": "BaseNCodec.java",
                    "file old path": "src/main/java/org/apache/commons/codec/binary/BaseNCodec.java",
                    "file new path": "src/main/java/org/apache/commons/codec/binary/BaseNCodec.java",
                    "full name": "src.main.java.org.apache.commons.codec.binary.BaseNCodec.resizeBuffer"
                },
                {
                    "function name": "resizeBuffer",
                    "function params": [
                        "context"
                    ],
                    "file name": "BaseNCodec.java",
                    "file old path": "src/main/java/org/apache/commons/codec/binary/BaseNCodec.java",
                    "file new path": "src/main/java/org/apache/commons/codec/binary/BaseNCodec.java",
                    "full name": "src.main.java.org.apache.commons.codec.binary.BaseNCodec.resizeBuffer"
                },
                {
                    "function name": "createPositiveCapacity",
                    "function params": [
                        "minCapacity"
                    ],
                    "file name": "BaseNCodec.java",
                    "file old path": "src/main/java/org/apache/commons/codec/binary/BaseNCodec.java",
                    "file new path": "src/main/java/org/apache/commons/codec/binary/BaseNCodec.java",
                    "full name": "src.main.java.org.apache.commons.codec.binary.BaseNCodec.createPositiveCapacity"
                },
                {
                    "function name": "compareUnsigned",
                    "function params": [
                        "x",
                        "y"
                    ],
                    "file name": "BaseNCodec.java",
                    "file old path": "src/main/java/org/apache/commons/codec/binary/BaseNCodec.java",
                    "file new path": "src/main/java/org/apache/commons/codec/binary/BaseNCodec.java",
                    "full name": "src.main.java.org.apache.commons.codec.binary.BaseNCodec.compareUnsigned"
                },
                {
                    "function name": "ensureBufferSize",
                    "function params": [
                        "size",
                        "context"
                    ],
                    "file name": "BaseNCodec.java",
                    "file old path": "src/main/java/org/apache/commons/codec/binary/BaseNCodec.java",
                    "file new path": "src/main/java/org/apache/commons/codec/binary/BaseNCodec.java",
                    "full name": "src.main.java.org.apache.commons.codec.binary.BaseNCodec.ensureBufferSize"
                },
                {
                    "function name": "testCodec265",
                    "function params": [],
                    "file name": "Base64Test.java",
                    "file old path": "src/test/java/org/apache/commons/codec/binary/Base64Test.java",
                    "file new path": "src/test/java/org/apache/commons/codec/binary/Base64Test.java",
                    "full name": "src.test.java.org.apache.commons.codec.binary.Base64Test.testCodec265"
                },
                {
                    "function name": "assumeCanAllocateBufferSize",
                    "function params": [
                        "size"
                    ],
                    "file name": "BaseNCodecTest.java",
                    "file old path": "src/test/java/org/apache/commons/codec/binary/BaseNCodecTest.java",
                    "file new path": "src/test/java/org/apache/commons/codec/binary/BaseNCodecTest.java",
                    "full name": "src.test.java.org.apache.commons.codec.binary.BaseNCodecTest.assumeCanAllocateBufferSize"
                },
                {
                    "function name": "NoOpBaseNCodec",
                    "function params": [],
                    "file name": "BaseNCodecTest.java",
                    "file old path": "src/test/java/org/apache/commons/codec/binary/BaseNCodecTest.java",
                    "file new path": "src/test/java/org/apache/commons/codec/binary/BaseNCodecTest.java",
                    "full name": "src.test.java.org.apache.commons.codec.binary.BaseNCodecTest.NoOpBaseNCodec"
                },
                {
                    "function name": "NoOpBaseNCodec",
                    "function params": [
                        "pArray",
                        "i",
                        "length",
                        "context"
                    ],
                    "file name": "BaseNCodecTest.java",
                    "file old path": "src/test/java/org/apache/commons/codec/binary/BaseNCodecTest.java",
                    "file new path": "src/test/java/org/apache/commons/codec/binary/BaseNCodecTest.java",
                    "full name": "src.test.java.org.apache.commons.codec.binary.BaseNCodecTest.NoOpBaseNCodec"
                },
                {
                    "function name": "testEnsureBufferSize",
                    "function params": [],
                    "file name": "BaseNCodecTest.java",
                    "file old path": "src/test/java/org/apache/commons/codec/binary/BaseNCodecTest.java",
                    "file new path": "src/test/java/org/apache/commons/codec/binary/BaseNCodecTest.java",
                    "full name": "src.test.java.org.apache.commons.codec.binary.BaseNCodecTest.testEnsureBufferSize"
                },
                {
                    "function name": "NoOpBaseNCodec",
                    "function params": [
                        "pArray",
                        "i",
                        "length",
                        "context"
                    ],
                    "file name": "BaseNCodecTest.java",
                    "file old path": "src/test/java/org/apache/commons/codec/binary/BaseNCodecTest.java",
                    "file new path": "src/test/java/org/apache/commons/codec/binary/BaseNCodecTest.java",
                    "full name": "src.test.java.org.apache.commons.codec.binary.BaseNCodecTest.NoOpBaseNCodec"
                },
                {
                    "function name": "getPresumableFreeMemory",
                    "function params": [],
                    "file name": "BaseNCodecTest.java",
                    "file old path": "src/test/java/org/apache/commons/codec/binary/BaseNCodecTest.java",
                    "file new path": "src/test/java/org/apache/commons/codec/binary/BaseNCodecTest.java",
                    "full name": "src.test.java.org.apache.commons.codec.binary.BaseNCodecTest.getPresumableFreeMemory"
                },
                {
                    "function name": "assertEnsureBufferSizeExpandsToMaxBufferSize",
                    "function params": [
                        "exceedMaxBufferSize"
                    ],
                    "file name": "BaseNCodecTest.java",
                    "file old path": "src/test/java/org/apache/commons/codec/binary/BaseNCodecTest.java",
                    "file new path": "src/test/java/org/apache/commons/codec/binary/BaseNCodecTest.java",
                    "full name": "src.test.java.org.apache.commons.codec.binary.BaseNCodecTest.assertEnsureBufferSizeExpandsToMaxBufferSize"
                },
                {
                    "function name": "testEnsureBufferSizeExpandsToMaxBufferSize",
                    "function params": [],
                    "file name": "BaseNCodecTest.java",
                    "file old path": "src/test/java/org/apache/commons/codec/binary/BaseNCodecTest.java",
                    "file new path": "src/test/java/org/apache/commons/codec/binary/BaseNCodecTest.java",
                    "full name": "src.test.java.org.apache.commons.codec.binary.BaseNCodecTest.testEnsureBufferSizeExpandsToMaxBufferSize"
                },
                {
                    "function name": "NoOpBaseNCodec",
                    "function params": [
                        "value"
                    ],
                    "file name": "BaseNCodecTest.java",
                    "file old path": "src/test/java/org/apache/commons/codec/binary/BaseNCodecTest.java",
                    "file new path": "src/test/java/org/apache/commons/codec/binary/BaseNCodecTest.java",
                    "full name": "src.test.java.org.apache.commons.codec.binary.BaseNCodecTest.NoOpBaseNCodec"
                },
                {
                    "function name": "testEnsureBufferSizeExpandsToBeyondMaxBufferSize",
                    "function params": [],
                    "file name": "BaseNCodecTest.java",
                    "file old path": "src/test/java/org/apache/commons/codec/binary/BaseNCodecTest.java",
                    "file new path": "src/test/java/org/apache/commons/codec/binary/BaseNCodecTest.java",
                    "full name": "src.test.java.org.apache.commons.codec.binary.BaseNCodecTest.testEnsureBufferSizeExpandsToBeyondMaxBufferSize"
                },
                {
                    "function name": "testEnsureBufferSizeThrowsOnOverflow",
                    "function params": [],
                    "file name": "BaseNCodecTest.java",
                    "file old path": "src/test/java/org/apache/commons/codec/binary/BaseNCodecTest.java",
                    "file new path": "src/test/java/org/apache/commons/codec/binary/BaseNCodecTest.java",
                    "full name": "src.test.java.org.apache.commons.codec.binary.BaseNCodecTest.testEnsureBufferSizeThrowsOnOverflow"
                }
            ],
            "files that changed": [
                "src/main/java/org/apache/commons/codec/binary/BaseNCodec.java",
                "src/test/java/org/apache/commons/codec/binary/Base64Test.java",
                "src/test/java/org/apache/commons/codec/binary/BaseNCodecTest.java"
            ]
        },
        {
            "bug index": "21",
            "bug id": "CODEC-270",
            "hexsha": "f5a61f0cd029f18666163f414f848ba0e1b39976",
            "fix_hash": "52396f8136b0328b17afd715b1c3f5a1f7e94608",
            "description": "Both Base32 and Base64 check that the final bits from the trailing digit that will be discarded are zero.\r\n\r\nThe test for the trailing bits in the final digits in Base64 is:\r\n{code:java}\r\nprivate long validateCharacter(final int numBitsToDrop, final Context context) {\r\n    if ((context.ibitWorkArea & numBitsToDrop) != 0) {\r\n{code}\r\n\r\nIt should be:\r\n{code:java}\r\nprivate long validateCharacter(final int numBitsToDrop, final Context context) {\r\n    int mask = (1 << numBitsToDrop) - 1;\r\n    if ((context.ibitWorkArea & mask) != 0) {\r\n{code}\r\n\r\nLikewise in Base32.\r\n\r\nThe following base64 is illegal but is still decoded:\r\n\r\n{noformat}\r\nAB==\r\n\r\nA : 000000\r\nB : 000001\r\n\r\nbyte = 00000000 + 0001 discarded \r\n{noformat}\r\n\r\nHere the check for the 4 trailing bits to drop in this case checks only bit 3 and ignores bit 1 which is set.\r\n\r\nSame for Base32, this is illegal:\r\n\r\n{noformat}\r\nAB======\r\n\r\nA : 00000\r\nB : 00001\r\n\r\nbyte = 00000000 + 01 discarded\r\n{noformat}\r\n\r\nBut the check for the 2 trailing bits to drop in this case checks bit 2 and ignores bit 1 which is set.\r\n\r\nNote: The test cases using \"AC\" has bit 2 set and so is flagged as invalid.\r\n\r\n",
            "commit number version hash": 1237,
            "commit number": 1178,
            "function that changed": [
                {
                    "function name": "validateCharacter",
                    "function params": [
                        "numBits",
                        "context"
                    ],
                    "file name": "Base32.java",
                    "file old path": "src/main/java/org/apache/commons/codec/binary/Base32.java",
                    "file new path": "src/main/java/org/apache/commons/codec/binary/Base32.java",
                    "full name": "src.main.java.org.apache.commons.codec.binary.Base32.validateCharacter"
                },
                {
                    "function name": "decode",
                    "function params": [
                        "in",
                        "inPos",
                        "inAvail",
                        "context"
                    ],
                    "file name": "Base32.java",
                    "file old path": "src/main/java/org/apache/commons/codec/binary/Base32.java",
                    "file new path": "src/main/java/org/apache/commons/codec/binary/Base32.java",
                    "full name": "src.main.java.org.apache.commons.codec.binary.Base32.decode"
                },
                {
                    "function name": "validateCharacter",
                    "function params": [
                        "emptyBitsMask",
                        "context"
                    ],
                    "file name": "Base32.java",
                    "file old path": "src/main/java/org/apache/commons/codec/binary/Base32.java",
                    "file new path": "src/main/java/org/apache/commons/codec/binary/Base32.java",
                    "full name": "src.main.java.org.apache.commons.codec.binary.Base32.validateCharacter"
                },
                {
                    "function name": "decode",
                    "function params": [
                        "in",
                        "inPos",
                        "inAvail",
                        "context"
                    ],
                    "file name": "Base64.java",
                    "file old path": "src/main/java/org/apache/commons/codec/binary/Base64.java",
                    "file new path": "src/main/java/org/apache/commons/codec/binary/Base64.java",
                    "full name": "src.main.java.org.apache.commons.codec.binary.Base64.decode"
                },
                {
                    "function name": "validateCharacter",
                    "function params": [
                        "emptyBitsMask",
                        "context"
                    ],
                    "file name": "Base64.java",
                    "file old path": "src/main/java/org/apache/commons/codec/binary/Base64.java",
                    "file new path": "src/main/java/org/apache/commons/codec/binary/Base64.java",
                    "full name": "src.main.java.org.apache.commons.codec.binary.Base64.validateCharacter"
                },
                {
                    "function name": "validateCharacter",
                    "function params": [
                        "numBitsToDrop",
                        "context"
                    ],
                    "file name": "Base64.java",
                    "file old path": "src/main/java/org/apache/commons/codec/binary/Base64.java",
                    "file new path": "src/main/java/org/apache/commons/codec/binary/Base64.java",
                    "full name": "src.main.java.org.apache.commons.codec.binary.Base64.validateCharacter"
                },
                {
                    "function name": "testBase32DecodingOfTrailing35Bits",
                    "function params": [],
                    "file name": "Base32Test.java",
                    "file old path": "src/test/java/org/apache/commons/codec/binary/Base32Test.java",
                    "file new path": "src/test/java/org/apache/commons/codec/binary/Base32Test.java",
                    "full name": "src.test.java.org.apache.commons.codec.binary.Base32Test.testBase32DecodingOfTrailing35Bits"
                },
                {
                    "function name": "testBase32DecodingOfTrailing10Bits",
                    "function params": [],
                    "file name": "Base32Test.java",
                    "file old path": "src/test/java/org/apache/commons/codec/binary/Base32Test.java",
                    "file new path": "src/test/java/org/apache/commons/codec/binary/Base32Test.java",
                    "full name": "src.test.java.org.apache.commons.codec.binary.Base32Test.testBase32DecodingOfTrailing10Bits"
                },
                {
                    "function name": "testBase32DecodingOfTrailing25Bits",
                    "function params": [],
                    "file name": "Base32Test.java",
                    "file old path": "src/test/java/org/apache/commons/codec/binary/Base32Test.java",
                    "file new path": "src/test/java/org/apache/commons/codec/binary/Base32Test.java",
                    "full name": "src.test.java.org.apache.commons.codec.binary.Base32Test.testBase32DecodingOfTrailing25Bits"
                },
                {
                    "function name": "assertBase32DecodingOfTrailingBits",
                    "function params": [
                        "nbits"
                    ],
                    "file name": "Base32Test.java",
                    "file old path": "src/test/java/org/apache/commons/codec/binary/Base32Test.java",
                    "file new path": "src/test/java/org/apache/commons/codec/binary/Base32Test.java",
                    "full name": "src.test.java.org.apache.commons.codec.binary.Base32Test.assertBase32DecodingOfTrailingBits"
                },
                {
                    "function name": "testBase32DecodingOfTrailing15Bits",
                    "function params": [],
                    "file name": "Base32Test.java",
                    "file old path": "src/test/java/org/apache/commons/codec/binary/Base32Test.java",
                    "file new path": "src/test/java/org/apache/commons/codec/binary/Base32Test.java",
                    "full name": "src.test.java.org.apache.commons.codec.binary.Base32Test.testBase32DecodingOfTrailing15Bits"
                },
                {
                    "function name": "testBase32DecodingOfTrailing20Bits",
                    "function params": [],
                    "file name": "Base32Test.java",
                    "file old path": "src/test/java/org/apache/commons/codec/binary/Base32Test.java",
                    "file new path": "src/test/java/org/apache/commons/codec/binary/Base32Test.java",
                    "full name": "src.test.java.org.apache.commons.codec.binary.Base32Test.testBase32DecodingOfTrailing20Bits"
                },
                {
                    "function name": "testBase32DecodingOfTrailing30Bits",
                    "function params": [],
                    "file name": "Base32Test.java",
                    "file old path": "src/test/java/org/apache/commons/codec/binary/Base32Test.java",
                    "file new path": "src/test/java/org/apache/commons/codec/binary/Base32Test.java",
                    "full name": "src.test.java.org.apache.commons.codec.binary.Base32Test.testBase32DecodingOfTrailing30Bits"
                },
                {
                    "function name": "assertBase64DecodingOfTrailingBits",
                    "function params": [
                        "nbits"
                    ],
                    "file name": "Base64Test.java",
                    "file old path": "src/test/java/org/apache/commons/codec/binary/Base64Test.java",
                    "file new path": "src/test/java/org/apache/commons/codec/binary/Base64Test.java",
                    "full name": "src.test.java.org.apache.commons.codec.binary.Base64Test.assertBase64DecodingOfTrailingBits"
                },
                {
                    "function name": "testBase64DecodingOfTrailing18Bits",
                    "function params": [],
                    "file name": "Base64Test.java",
                    "file old path": "src/test/java/org/apache/commons/codec/binary/Base64Test.java",
                    "file new path": "src/test/java/org/apache/commons/codec/binary/Base64Test.java",
                    "full name": "src.test.java.org.apache.commons.codec.binary.Base64Test.testBase64DecodingOfTrailing18Bits"
                },
                {
                    "function name": "testBase64DecodingOfTrailing12Bits",
                    "function params": [],
                    "file name": "Base64Test.java",
                    "file old path": "src/test/java/org/apache/commons/codec/binary/Base64Test.java",
                    "file new path": "src/test/java/org/apache/commons/codec/binary/Base64Test.java",
                    "full name": "src.test.java.org.apache.commons.codec.binary.Base64Test.testBase64DecodingOfTrailing12Bits"
                }
            ],
            "files that changed": [
                "src/main/java/org/apache/commons/codec/binary/Base32.java",
                "src/main/java/org/apache/commons/codec/binary/Base64.java",
                "src/test/java/org/apache/commons/codec/binary/Base32Test.java",
                "src/test/java/org/apache/commons/codec/binary/Base64Test.java"
            ]
        },
        {
            "bug index": "22",
            "bug id": "CODEC-270",
            "hexsha": "f5a61f0cd029f18666163f414f848ba0e1b39976",
            "fix_hash": "7b1961506509391ec847bb1dc3783a87f8069057",
            "description": "Both Base32 and Base64 check that the final bits from the trailing digit that will be discarded are zero.\r\n\r\nThe test for the trailing bits in the final digits in Base64 is:\r\n{code:java}\r\nprivate long validateCharacter(final int numBitsToDrop, final Context context) {\r\n    if ((context.ibitWorkArea & numBitsToDrop) != 0) {\r\n{code}\r\n\r\nIt should be:\r\n{code:java}\r\nprivate long validateCharacter(final int numBitsToDrop, final Context context) {\r\n    int mask = (1 << numBitsToDrop) - 1;\r\n    if ((context.ibitWorkArea & mask) != 0) {\r\n{code}\r\n\r\nLikewise in Base32.\r\n\r\nThe following base64 is illegal but is still decoded:\r\n\r\n{noformat}\r\nAB==\r\n\r\nA : 000000\r\nB : 000001\r\n\r\nbyte = 00000000 + 0001 discarded \r\n{noformat}\r\n\r\nHere the check for the 4 trailing bits to drop in this case checks only bit 3 and ignores bit 1 which is set.\r\n\r\nSame for Base32, this is illegal:\r\n\r\n{noformat}\r\nAB======\r\n\r\nA : 00000\r\nB : 00001\r\n\r\nbyte = 00000000 + 01 discarded\r\n{noformat}\r\n\r\nBut the check for the 2 trailing bits to drop in this case checks bit 2 and ignores bit 1 which is set.\r\n\r\nNote: The test cases using \"AC\" has bit 2 set and so is flagged as invalid.\r\n\r\n",
            "commit number version hash": 1237,
            "commit number": 1177,
            "function that changed": [],
            "files that changed": [
                "src/test/java/org/apache/commons/codec/binary/Base32Test.java",
                "src/test/java/org/apache/commons/codec/binary/Base64Test.java",
                "src/test/java/org/apache/commons/codec/net/BCodecTest.java"
            ]
        },
        {
            "bug index": "23",
            "bug id": "CODEC-32",
            "hexsha": "71e7260746a902d1070a190fd78bd560464860b9",
            "fix_hash": "31e094ab90d238cfbd98b9ed8c715d997f58123a",
            "description": "RFC 2045 stipulates that any unknown byte encountered during decoding should be \ndisregarded. All negative bytes sent to the decoder will produce the following \nerror though:\n\n\n\njava.lang.ArrayIndexOutOfBoundsException: -62\n\tat org.apache.commons.codec.binary.Base64.isBase64(Base64.java:137)\n\tat org.apache.commons.codec.binary.Base64.discardNonBase64(Base64.java:478)\n\tat org.apache.commons.codec.binary.Base64.decodeBase64(Base64.java:374)\n\tat TestCase.main(Unknown Source)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:\n39)\n\tat sun.reflect.DelegatingMethodAccessorImpl.\ninvoke(DelegatingMethodAccessorImpl.java:25)\n\tat java.lang.reflect.Method.invoke(Method.java:324)\n\tat com.intellij.rt.execution.application.AppMain.main(AppMain.java:78)\n\n\nCuurent method:\n\n    private static boolean isBase64(byte octect) {\n        if (octect == PAD) {\n            return true;\n        } else if (base64Alphabet[octect] == -1) {\n            return false;\n        } else {\n            return true;\n        }\n    }\n\nFixed method:\n    private static boolean isBase64(byte octect) {\n        if (octect == PAD) {\n            return true;\n        } else if (octect < 0 || base64Alphabet[octect] == -1) {\n            return false;\n        } else {\n            return true;\n        }\n    }",
            "commit number version hash": 173,
            "commit number": 1174,
            "function that changed": [],
            "files that changed": [
                "src/main/java/org/apache/commons/codec/digest/MurmurHash2.java"
            ]
        },
        {
            "bug index": "24",
            "bug id": "CODEC-1",
            "hexsha": "71e7260746a902d1070a190fd78bd560464860b9",
            "fix_hash": "03e54974626c4abc6004eeecb5db600222389eb9",
            "description": "URLCodec causes an IndexOutOfBoundsException in BitSet when encoding non-ASCII\ncharacters.",
            "commit number version hash": 173,
            "commit number": 1173,
            "function that changed": [],
            "files that changed": [
                "src/main/java/org/apache/commons/codec/digest/MurmurHash3.java"
            ]
        },
        {
            "bug index": "25",
            "bug id": "CODEC-264",
            "hexsha": "f5a61f0cd029f18666163f414f848ba0e1b39976",
            "fix_hash": "82b108f3df4b8db2a2ce56afce19a2b0a97c5539",
            "description": "The original murmur3_x64_128 code used unsigned int for seed arguments.  Using the equivalent bit patterns in the commons codec version does not yield the same results.\r\n\r\nI believe this is because the commons version does not account for sign extension etc.\r\n\r\nYonic Seeley [~yonik] has explains the issue in his implementation https://github.com/yonik/java_util/blob/master/src/util/hash/MurmurHash3.java\r\n\r\nHe provides a test case to show that his code returns the same answers as the original C/C++ code.  I modified that test to call the codec version to show the error.\r\n\r\nI have attached that test case.\r\n\r\nGiven that the original code is in the wild I am uncertain how to fix this issue.\r\n",
            "commit number version hash": 1237,
            "commit number": 1165,
            "function that changed": [
                {
                    "function name": "hash128",
                    "function params": [
                        "data",
                        "offset",
                        "length",
                        "seed"
                    ],
                    "file name": "MurmurHash3.java",
                    "file old path": "src/main/java/org/apache/commons/codec/digest/MurmurHash3.java",
                    "file new path": "src/main/java/org/apache/commons/codec/digest/MurmurHash3.java",
                    "full name": "src.main.java.org.apache.commons.codec.digest.MurmurHash3.hash128"
                },
                {
                    "function name": "hash128x64",
                    "function params": [
                        "data",
                        "offset",
                        "length",
                        "seed"
                    ],
                    "file name": "MurmurHash3.java",
                    "file old path": "src/main/java/org/apache/commons/codec/digest/MurmurHash3.java",
                    "file new path": "src/main/java/org/apache/commons/codec/digest/MurmurHash3.java",
                    "full name": "src.main.java.org.apache.commons.codec.digest.MurmurHash3.hash128x64"
                },
                {
                    "function name": "hash128x64",
                    "function params": [
                        "data"
                    ],
                    "file name": "MurmurHash3.java",
                    "file old path": "src/main/java/org/apache/commons/codec/digest/MurmurHash3.java",
                    "file new path": "src/main/java/org/apache/commons/codec/digest/MurmurHash3.java",
                    "full name": "src.main.java.org.apache.commons.codec.digest.MurmurHash3.hash128x64"
                },
                {
                    "function name": "hash128x64",
                    "function params": [
                        "data",
                        "offset",
                        "length",
                        "seed"
                    ],
                    "file name": "MurmurHash3.java",
                    "file old path": "src/main/java/org/apache/commons/codec/digest/MurmurHash3.java",
                    "file new path": "src/main/java/org/apache/commons/codec/digest/MurmurHash3.java",
                    "full name": "src.main.java.org.apache.commons.codec.digest.MurmurHash3.hash128x64"
                },
                {
                    "function name": "testHash128x64WithOffsetLengthAndSeed",
                    "function params": [],
                    "file name": "MurmurHash3Test.java",
                    "file old path": "src/test/java/org/apache/commons/codec/digest/MurmurHash3Test.java",
                    "file new path": "src/test/java/org/apache/commons/codec/digest/MurmurHash3Test.java",
                    "full name": "src.test.java.org.apache.commons.codec.digest.MurmurHash3Test.testHash128x64WithOffsetLengthAndSeed"
                },
                {
                    "function name": "testHash128x64",
                    "function params": [],
                    "file name": "MurmurHash3Test.java",
                    "file old path": "src/test/java/org/apache/commons/codec/digest/MurmurHash3Test.java",
                    "file new path": "src/test/java/org/apache/commons/codec/digest/MurmurHash3Test.java",
                    "full name": "src.test.java.org.apache.commons.codec.digest.MurmurHash3Test.testHash128x64"
                }
            ],
            "files that changed": [
                "src/main/java/org/apache/commons/codec/digest/MurmurHash3.java",
                "src/test/java/org/apache/commons/codec/digest/MurmurHash3Test.java"
            ]
        },
        {
            "bug index": "26",
            "bug id": "CODEC-267",
            "hexsha": "f5a61f0cd029f18666163f414f848ba0e1b39976",
            "fix_hash": "1645ab953ce98bffaff2424cd0b3d2501e21b04f",
            "description": "The hash32() algorithm processes blocks of 4 bytes. Trailing bytes of 1, 2 or 3 that are negative are not masked to unsigned leading to an error.\r\n\r\nThis test passes using data generated from the Python mmh3 library which calls the MurmurHash3 c++ code (modified for Python):\r\n{code:java}\r\n/**\r\n * Test to demonstrate the errors in\r\n * {@link MurmurHash3#hash32(byte[], int, int, int)}\r\n * if the final 1, 2, or 3 bytes are negative.\r\n */\r\n@Test\r\npublic void testHash32With1TrailingSignedByteIsInvalid() {\r\n    // Generate test data:\r\n    // import mmh3\r\n    // import numpy as np\r\n    // mmh3.hash(np.uint8([-1]))\r\n    // mmh3.hash(np.uint8([0, -1]))\r\n    // mmh3.hash(np.uint8([0, 0, -1]))\r\n    // mmh3.hash(np.uint8([-1, 0]))\r\n    // mmh3.hash(np.uint8([-1, 0, 0]))\r\n    // mmh3.hash(np.uint8([0, -1, 0]))\r\n    Assert.assertNotEquals(-43192051, MurmurHash3.hash32(new byte[] {-1}, 0, 1, 0));\r\n    Assert.assertNotEquals(-582037868, MurmurHash3.hash32(new byte[] {0, -1}, 0, 1, 0));\r\n    Assert.assertNotEquals(922088087, MurmurHash3.hash32(new byte[] {0, 0, -1}, 0, 1, 0));\r\n    Assert.assertNotEquals(-1309567588, MurmurHash3.hash32(new byte[] {-1, 0}, 0, 1, 0));\r\n    Assert.assertNotEquals(-363779670, MurmurHash3.hash32(new byte[] {-1, 0, 0}, 0, 1, 0));\r\n    Assert.assertNotEquals(-225068062, MurmurHash3.hash32(new byte[] {0, -1, 0}, 0, 1, 0));\r\n}\r\n{code}\r\nThis test passes with {{assertEquals}}\u00a0when the code is fixed to apply masking to the final 3 bytes:\r\n{code:java}\r\n        case 3:\r\n            k1 ^= (data[index + 2] & 0xff) << 16;\r\n        case 2:\r\n            k1 ^= (data[index + 1] & 0xff) << 8;\r\n        case 1:\r\n            k1 ^= (data[index] & 0xff);\r\n{code}\r\nFixing this error will be a behavioural change.\r\n\r\nIt is recommended to leave this method alone and implement a new hash32x86 method that should match the {{MurmurHash3_x86_32}} method from the c++ source code.\r\n\r\n\u00a0",
            "commit number version hash": 1237,
            "commit number": 1164,
            "function that changed": [
                {
                    "function name": "IncrementalHash32",
                    "function params": [
                        "hash",
                        "unprocessedLength",
                        "unprocessed",
                        "totalLen"
                    ],
                    "file name": "MurmurHash3.java",
                    "file old path": "src/main/java/org/apache/commons/codec/digest/MurmurHash3.java",
                    "file new path": "src/main/java/org/apache/commons/codec/digest/MurmurHash3.java",
                    "full name": "src.main.java.org.apache.commons.codec.digest.MurmurHash3.IncrementalHash32"
                },
                {
                    "function name": "IncrementalHash32x86",
                    "function params": [],
                    "file name": "MurmurHash3.java",
                    "file old path": "src/main/java/org/apache/commons/codec/digest/MurmurHash3.java",
                    "file new path": "src/main/java/org/apache/commons/codec/digest/MurmurHash3.java",
                    "full name": "src.main.java.org.apache.commons.codec.digest.MurmurHash3.IncrementalHash32x86"
                },
                {
                    "function name": "IncrementalHash32x86",
                    "function params": [
                        "hash",
                        "unprocessedLength",
                        "unprocessed",
                        "totalLen"
                    ],
                    "file name": "MurmurHash3.java",
                    "file old path": "src/main/java/org/apache/commons/codec/digest/MurmurHash3.java",
                    "file new path": "src/main/java/org/apache/commons/codec/digest/MurmurHash3.java",
                    "full name": "src.main.java.org.apache.commons.codec.digest.MurmurHash3.IncrementalHash32x86"
                },
                {
                    "function name": "hash32x86",
                    "function params": [
                        "data"
                    ],
                    "file name": "MurmurHash3.java",
                    "file old path": "src/main/java/org/apache/commons/codec/digest/MurmurHash3.java",
                    "file new path": "src/main/java/org/apache/commons/codec/digest/MurmurHash3.java",
                    "full name": "src.main.java.org.apache.commons.codec.digest.MurmurHash3.hash32x86"
                },
                {
                    "function name": "hash32x86",
                    "function params": [
                        "data",
                        "offset",
                        "length",
                        "seed"
                    ],
                    "file name": "MurmurHash3.java",
                    "file old path": "src/main/java/org/apache/commons/codec/digest/MurmurHash3.java",
                    "file new path": "src/main/java/org/apache/commons/codec/digest/MurmurHash3.java",
                    "full name": "src.main.java.org.apache.commons.codec.digest.MurmurHash3.hash32x86"
                },
                {
                    "function name": "testHash32x86WithTrailingNegativeSignedBytes",
                    "function params": [],
                    "file name": "MurmurHash3Test.java",
                    "file old path": "src/test/java/org/apache/commons/codec/digest/MurmurHash3Test.java",
                    "file new path": "src/test/java/org/apache/commons/codec/digest/MurmurHash3Test.java",
                    "full name": "src.test.java.org.apache.commons.codec.digest.MurmurHash3Test.testHash32x86WithTrailingNegativeSignedBytes"
                },
                {
                    "function name": "testhash32x86",
                    "function params": [],
                    "file name": "MurmurHash3Test.java",
                    "file old path": "src/test/java/org/apache/commons/codec/digest/MurmurHash3Test.java",
                    "file new path": "src/test/java/org/apache/commons/codec/digest/MurmurHash3Test.java",
                    "full name": "src.test.java.org.apache.commons.codec.digest.MurmurHash3Test.testhash32x86"
                },
                {
                    "function name": "testHash32WithTrailingNegativeSignedBytesIsInvalid",
                    "function params": [],
                    "file name": "MurmurHash3Test.java",
                    "file old path": "src/test/java/org/apache/commons/codec/digest/MurmurHash3Test.java",
                    "file new path": "src/test/java/org/apache/commons/codec/digest/MurmurHash3Test.java",
                    "full name": "src.test.java.org.apache.commons.codec.digest.MurmurHash3Test.testHash32WithTrailingNegativeSignedBytesIsInvalid"
                },
                {
                    "function name": "testHash32x86WithOffsetLengthAndSeed",
                    "function params": [],
                    "file name": "MurmurHash3Test.java",
                    "file old path": "src/test/java/org/apache/commons/codec/digest/MurmurHash3Test.java",
                    "file new path": "src/test/java/org/apache/commons/codec/digest/MurmurHash3Test.java",
                    "full name": "src.test.java.org.apache.commons.codec.digest.MurmurHash3Test.testHash32x86WithOffsetLengthAndSeed"
                },
                {
                    "function name": "assertIncrementalHash32x86",
                    "function params": [],
                    "file name": "MurmurHash3Test.java",
                    "file old path": "src/test/java/org/apache/commons/codec/digest/MurmurHash3Test.java",
                    "file new path": "src/test/java/org/apache/commons/codec/digest/MurmurHash3Test.java",
                    "full name": "src.test.java.org.apache.commons.codec.digest.MurmurHash3Test.assertIncrementalHash32x86"
                },
                {
                    "function name": "testIncrementalHash32x86",
                    "function params": [],
                    "file name": "MurmurHash3Test.java",
                    "file old path": "src/test/java/org/apache/commons/codec/digest/MurmurHash3Test.java",
                    "file new path": "src/test/java/org/apache/commons/codec/digest/MurmurHash3Test.java",
                    "full name": "src.test.java.org.apache.commons.codec.digest.MurmurHash3Test.testIncrementalHash32x86"
                }
            ],
            "files that changed": [
                "src/main/java/org/apache/commons/codec/digest/MurmurHash3.java",
                "src/test/java/org/apache/commons/codec/digest/MurmurHash3Test.java"
            ]
        },
        {
            "bug index": "27",
            "bug id": "CODEC-269",
            "hexsha": "f5a61f0cd029f18666163f414f848ba0e1b39976",
            "fix_hash": "1490fbf959fc0e7bc5d8be43250689ebf625942d",
            "description": "The\u00a0MurmurHash3.IncrementalHash32 end() method alters the current state of the running hash. Thus if called twice it returns different numbers.\r\n\r\nThis can be fixed using:\r\n{code:java}\r\npublic final int end() {\r\n    // Allow calling end() again after adding no data to return the same result.\r\n    int result = hash;\r\n    // ************\r\n    // Note: This fails to apply masking using 0xff to the 3 remaining bytes.\r\n    // ************\r\n    int k1 = 0;\r\n    switch (unprocessedLength) {\r\n    case 3:\r\n        k1 ^= unprocessed[2] << 16;\r\n    case 2:\r\n        k1 ^= unprocessed[1] << 8;\r\n    case 1:\r\n        k1 ^= unprocessed[0];\r\n\r\n        // mix functions\r\n        k1 *= C1_32;\r\n        k1 = Integer.rotateLeft(k1, R1_32);\r\n        k1 *= C2_32;\r\n        result ^= k1;\r\n    }\r\n\r\n    // finalization\r\n    result ^= totalLen;\r\n    return fmix32(result);\r\n}\r\n{code}",
            "commit number version hash": 1237,
            "commit number": 1163,
            "function that changed": [
                {
                    "function name": "IncrementalHash32",
                    "function params": [],
                    "file name": "MurmurHash3.java",
                    "file old path": "src/main/java/org/apache/commons/codec/digest/MurmurHash3.java",
                    "file new path": "src/main/java/org/apache/commons/codec/digest/MurmurHash3.java",
                    "full name": "src.main.java.org.apache.commons.codec.digest.MurmurHash3.IncrementalHash32"
                },
                {
                    "function name": "assertIncrementalHash32",
                    "function params": [],
                    "file name": "MurmurHash3Test.java",
                    "file old path": "src/test/java/org/apache/commons/codec/digest/MurmurHash3Test.java",
                    "file new path": "src/test/java/org/apache/commons/codec/digest/MurmurHash3Test.java",
                    "full name": "src.test.java.org.apache.commons.codec.digest.MurmurHash3Test.assertIncrementalHash32"
                }
            ],
            "files that changed": [
                "src/main/java/org/apache/commons/codec/digest/MurmurHash3.java",
                "src/test/java/org/apache/commons/codec/digest/MurmurHash3Test.java"
            ]
        },
        {
            "bug index": "29",
            "bug id": "CODEC-4",
            "hexsha": "71e7260746a902d1070a190fd78bd560464860b9",
            "fix_hash": "40be3f770c8a1e87342d14a6b730b7d99fef8e71",
            "description": "You get a ClassCastException in Hex.decode(Object) if you pass in a String object.",
            "commit number version hash": 173,
            "commit number": 1160,
            "function that changed": [
                {
                    "function name": "hash32",
                    "function params": [
                        "text"
                    ],
                    "file name": "MurmurHash2.java",
                    "file old path": "src/main/java/org/apache/commons/codec/digest/MurmurHash2.java",
                    "file new path": "src/main/java/org/apache/commons/codec/digest/MurmurHash2.java",
                    "full name": "src.main.java.org.apache.commons.codec.digest.MurmurHash2.hash32"
                },
                {
                    "function name": "MurmurHash2",
                    "function params": [],
                    "file name": "MurmurHash2.java",
                    "file old path": "src/main/java/org/apache/commons/codec/digest/MurmurHash2.java",
                    "file new path": "src/main/java/org/apache/commons/codec/digest/MurmurHash2.java",
                    "full name": "src.main.java.org.apache.commons.codec.digest.MurmurHash2.MurmurHash2"
                },
                {
                    "function name": "hash64",
                    "function params": [
                        "text"
                    ],
                    "file name": "MurmurHash2.java",
                    "file old path": "src/main/java/org/apache/commons/codec/digest/MurmurHash2.java",
                    "file new path": "src/main/java/org/apache/commons/codec/digest/MurmurHash2.java",
                    "full name": "src.main.java.org.apache.commons.codec.digest.MurmurHash2.hash64"
                },
                {
                    "function name": "hash64",
                    "function params": [
                        "data",
                        "length"
                    ],
                    "file name": "MurmurHash2.java",
                    "file old path": "src/main/java/org/apache/commons/codec/digest/MurmurHash2.java",
                    "file new path": "src/main/java/org/apache/commons/codec/digest/MurmurHash2.java",
                    "full name": "src.main.java.org.apache.commons.codec.digest.MurmurHash2.hash64"
                },
                {
                    "function name": "hash64",
                    "function params": [
                        "data",
                        "length",
                        "seed"
                    ],
                    "file name": "MurmurHash2.java",
                    "file old path": "src/main/java/org/apache/commons/codec/digest/MurmurHash2.java",
                    "file new path": "src/main/java/org/apache/commons/codec/digest/MurmurHash2.java",
                    "full name": "src.main.java.org.apache.commons.codec.digest.MurmurHash2.hash64"
                },
                {
                    "function name": "hash32",
                    "function params": [
                        "text",
                        "from",
                        "length"
                    ],
                    "file name": "MurmurHash2.java",
                    "file old path": "src/main/java/org/apache/commons/codec/digest/MurmurHash2.java",
                    "file new path": "src/main/java/org/apache/commons/codec/digest/MurmurHash2.java",
                    "full name": "src.main.java.org.apache.commons.codec.digest.MurmurHash2.hash32"
                },
                {
                    "function name": "hash32",
                    "function params": [
                        "data",
                        "length",
                        "seed"
                    ],
                    "file name": "MurmurHash2.java",
                    "file old path": "src/main/java/org/apache/commons/codec/digest/MurmurHash2.java",
                    "file new path": "src/main/java/org/apache/commons/codec/digest/MurmurHash2.java",
                    "full name": "src.main.java.org.apache.commons.codec.digest.MurmurHash2.hash32"
                },
                {
                    "function name": "hash32",
                    "function params": [
                        "data",
                        "length"
                    ],
                    "file name": "MurmurHash2.java",
                    "file old path": "src/main/java/org/apache/commons/codec/digest/MurmurHash2.java",
                    "file new path": "src/main/java/org/apache/commons/codec/digest/MurmurHash2.java",
                    "full name": "src.main.java.org.apache.commons.codec.digest.MurmurHash2.hash32"
                },
                {
                    "function name": "hash64",
                    "function params": [
                        "text",
                        "from",
                        "length"
                    ],
                    "file name": "MurmurHash2.java",
                    "file old path": "src/main/java/org/apache/commons/codec/digest/MurmurHash2.java",
                    "file new path": "src/main/java/org/apache/commons/codec/digest/MurmurHash2.java",
                    "full name": "src.main.java.org.apache.commons.codec.digest.MurmurHash2.hash64"
                },
                {
                    "function name": "fmix32",
                    "function params": [
                        "length",
                        "hash"
                    ],
                    "file name": "MurmurHash3.java",
                    "file old path": "src/main/java/org/apache/commons/codec/digest/MurmurHash3.java",
                    "file new path": "src/main/java/org/apache/commons/codec/digest/MurmurHash3.java",
                    "full name": "src.main.java.org.apache.commons.codec.digest.MurmurHash3.fmix32"
                },
                {
                    "function name": "hash32",
                    "function params": [
                        "l0",
                        "l1",
                        "seed"
                    ],
                    "file name": "MurmurHash3.java",
                    "file old path": "src/main/java/org/apache/commons/codec/digest/MurmurHash3.java",
                    "file new path": "src/main/java/org/apache/commons/codec/digest/MurmurHash3.java",
                    "full name": "src.main.java.org.apache.commons.codec.digest.MurmurHash3.hash32"
                },
                {
                    "function name": "hash128",
                    "function params": [
                        "data"
                    ],
                    "file name": "MurmurHash3.java",
                    "file old path": "src/main/java/org/apache/commons/codec/digest/MurmurHash3.java",
                    "file new path": "src/main/java/org/apache/commons/codec/digest/MurmurHash3.java",
                    "full name": "src.main.java.org.apache.commons.codec.digest.MurmurHash3.hash128"
                },
                {
                    "function name": "hash64",
                    "function params": [
                        "data"
                    ],
                    "file name": "MurmurHash3.java",
                    "file old path": "src/main/java/org/apache/commons/codec/digest/MurmurHash3.java",
                    "file new path": "src/main/java/org/apache/commons/codec/digest/MurmurHash3.java",
                    "full name": "src.main.java.org.apache.commons.codec.digest.MurmurHash3.hash64"
                },
                {
                    "function name": "mix32",
                    "function params": [
                        "k",
                        "hash"
                    ],
                    "file name": "MurmurHash3.java",
                    "file old path": "src/main/java/org/apache/commons/codec/digest/MurmurHash3.java",
                    "file new path": "src/main/java/org/apache/commons/codec/digest/MurmurHash3.java",
                    "full name": "src.main.java.org.apache.commons.codec.digest.MurmurHash3.mix32"
                },
                {
                    "function name": "hash32",
                    "function params": [
                        "l0",
                        "l1"
                    ],
                    "file name": "MurmurHash3.java",
                    "file old path": "src/main/java/org/apache/commons/codec/digest/MurmurHash3.java",
                    "file new path": "src/main/java/org/apache/commons/codec/digest/MurmurHash3.java",
                    "full name": "src.main.java.org.apache.commons.codec.digest.MurmurHash3.hash32"
                },
                {
                    "function name": "hash32",
                    "function params": [
                        "data",
                        "offset",
                        "length",
                        "seed"
                    ],
                    "file name": "MurmurHash3.java",
                    "file old path": "src/main/java/org/apache/commons/codec/digest/MurmurHash3.java",
                    "file new path": "src/main/java/org/apache/commons/codec/digest/MurmurHash3.java",
                    "full name": "src.main.java.org.apache.commons.codec.digest.MurmurHash3.hash32"
                },
                {
                    "function name": "orBytes",
                    "function params": [
                        "b1",
                        "b2",
                        "b3",
                        "b4"
                    ],
                    "file name": "MurmurHash3.java",
                    "file old path": "src/main/java/org/apache/commons/codec/digest/MurmurHash3.java",
                    "file new path": "src/main/java/org/apache/commons/codec/digest/MurmurHash3.java",
                    "full name": "src.main.java.org.apache.commons.codec.digest.MurmurHash3.orBytes"
                },
                {
                    "function name": "hash64",
                    "function params": [
                        "data"
                    ],
                    "file name": "MurmurHash3.java",
                    "file old path": "src/main/java/org/apache/commons/codec/digest/MurmurHash3.java",
                    "file new path": "src/main/java/org/apache/commons/codec/digest/MurmurHash3.java",
                    "full name": "src.main.java.org.apache.commons.codec.digest.MurmurHash3.hash64"
                },
                {
                    "function name": "hash64",
                    "function params": [
                        "data",
                        "offset",
                        "length",
                        "seed"
                    ],
                    "file name": "MurmurHash3.java",
                    "file old path": "src/main/java/org/apache/commons/codec/digest/MurmurHash3.java",
                    "file new path": "src/main/java/org/apache/commons/codec/digest/MurmurHash3.java",
                    "full name": "src.main.java.org.apache.commons.codec.digest.MurmurHash3.hash64"
                },
                {
                    "function name": "hash32",
                    "function params": [
                        "data"
                    ],
                    "file name": "MurmurHash3.java",
                    "file old path": "src/main/java/org/apache/commons/codec/digest/MurmurHash3.java",
                    "file new path": "src/main/java/org/apache/commons/codec/digest/MurmurHash3.java",
                    "full name": "src.main.java.org.apache.commons.codec.digest.MurmurHash3.hash32"
                },
                {
                    "function name": "hash128",
                    "function params": [
                        "data",
                        "offset",
                        "length",
                        "seed"
                    ],
                    "file name": "MurmurHash3.java",
                    "file old path": "src/main/java/org/apache/commons/codec/digest/MurmurHash3.java",
                    "file new path": "src/main/java/org/apache/commons/codec/digest/MurmurHash3.java",
                    "full name": "src.main.java.org.apache.commons.codec.digest.MurmurHash3.hash128"
                },
                {
                    "function name": "hash32",
                    "function params": [
                        "l0",
                        "seed"
                    ],
                    "file name": "MurmurHash3.java",
                    "file old path": "src/main/java/org/apache/commons/codec/digest/MurmurHash3.java",
                    "file new path": "src/main/java/org/apache/commons/codec/digest/MurmurHash3.java",
                    "full name": "src.main.java.org.apache.commons.codec.digest.MurmurHash3.hash32"
                },
                {
                    "function name": "IncrementalHash32",
                    "function params": [
                        "data",
                        "offset",
                        "length"
                    ],
                    "file name": "MurmurHash3.java",
                    "file old path": "src/main/java/org/apache/commons/codec/digest/MurmurHash3.java",
                    "file new path": "src/main/java/org/apache/commons/codec/digest/MurmurHash3.java",
                    "full name": "src.main.java.org.apache.commons.codec.digest.MurmurHash3.IncrementalHash32"
                },
                {
                    "function name": "hash64",
                    "function params": [
                        "data"
                    ],
                    "file name": "MurmurHash3.java",
                    "file old path": "src/main/java/org/apache/commons/codec/digest/MurmurHash3.java",
                    "file new path": "src/main/java/org/apache/commons/codec/digest/MurmurHash3.java",
                    "full name": "src.main.java.org.apache.commons.codec.digest.MurmurHash3.hash64"
                },
                {
                    "function name": "hash32",
                    "function params": [
                        "data",
                        "length"
                    ],
                    "file name": "MurmurHash3.java",
                    "file old path": "src/main/java/org/apache/commons/codec/digest/MurmurHash3.java",
                    "file new path": "src/main/java/org/apache/commons/codec/digest/MurmurHash3.java",
                    "full name": "src.main.java.org.apache.commons.codec.digest.MurmurHash3.hash32"
                },
                {
                    "function name": "hash32",
                    "function params": [
                        "l0"
                    ],
                    "file name": "MurmurHash3.java",
                    "file old path": "src/main/java/org/apache/commons/codec/digest/MurmurHash3.java",
                    "file new path": "src/main/java/org/apache/commons/codec/digest/MurmurHash3.java",
                    "full name": "src.main.java.org.apache.commons.codec.digest.MurmurHash3.hash32"
                },
                {
                    "function name": "IncrementalHash32",
                    "function params": [],
                    "file name": "MurmurHash3.java",
                    "file old path": "src/main/java/org/apache/commons/codec/digest/MurmurHash3.java",
                    "file new path": "src/main/java/org/apache/commons/codec/digest/MurmurHash3.java",
                    "full name": "src.main.java.org.apache.commons.codec.digest.MurmurHash3.IncrementalHash32"
                },
                {
                    "function name": "hash128",
                    "function params": [
                        "data"
                    ],
                    "file name": "MurmurHash3.java",
                    "file old path": "src/main/java/org/apache/commons/codec/digest/MurmurHash3.java",
                    "file new path": "src/main/java/org/apache/commons/codec/digest/MurmurHash3.java",
                    "full name": "src.main.java.org.apache.commons.codec.digest.MurmurHash3.hash128"
                },
                {
                    "function name": "fmix64",
                    "function params": [
                        "h"
                    ],
                    "file name": "MurmurHash3.java",
                    "file old path": "src/main/java/org/apache/commons/codec/digest/MurmurHash3.java",
                    "file new path": "src/main/java/org/apache/commons/codec/digest/MurmurHash3.java",
                    "full name": "src.main.java.org.apache.commons.codec.digest.MurmurHash3.fmix64"
                },
                {
                    "function name": "hash32",
                    "function params": [
                        "data"
                    ],
                    "file name": "MurmurHash3.java",
                    "file old path": "src/main/java/org/apache/commons/codec/digest/MurmurHash3.java",
                    "file new path": "src/main/java/org/apache/commons/codec/digest/MurmurHash3.java",
                    "full name": "src.main.java.org.apache.commons.codec.digest.MurmurHash3.hash32"
                },
                {
                    "function name": "MurmurHash3",
                    "function params": [],
                    "file name": "MurmurHash3.java",
                    "file old path": "src/main/java/org/apache/commons/codec/digest/MurmurHash3.java",
                    "file new path": "src/main/java/org/apache/commons/codec/digest/MurmurHash3.java",
                    "full name": "src.main.java.org.apache.commons.codec.digest.MurmurHash3.MurmurHash3"
                },
                {
                    "function name": "IncrementalHash32",
                    "function params": [
                        "hash"
                    ],
                    "file name": "MurmurHash3.java",
                    "file old path": "src/main/java/org/apache/commons/codec/digest/MurmurHash3.java",
                    "file new path": "src/main/java/org/apache/commons/codec/digest/MurmurHash3.java",
                    "full name": "src.main.java.org.apache.commons.codec.digest.MurmurHash3.IncrementalHash32"
                },
                {
                    "function name": "hash32",
                    "function params": [
                        "data",
                        "length",
                        "seed"
                    ],
                    "file name": "MurmurHash3.java",
                    "file old path": "src/main/java/org/apache/commons/codec/digest/MurmurHash3.java",
                    "file new path": "src/main/java/org/apache/commons/codec/digest/MurmurHash3.java",
                    "full name": "src.main.java.org.apache.commons.codec.digest.MurmurHash3.hash32"
                },
                {
                    "function name": "hash64",
                    "function params": [
                        "data",
                        "offset",
                        "length"
                    ],
                    "file name": "MurmurHash3.java",
                    "file old path": "src/main/java/org/apache/commons/codec/digest/MurmurHash3.java",
                    "file new path": "src/main/java/org/apache/commons/codec/digest/MurmurHash3.java",
                    "full name": "src.main.java.org.apache.commons.codec.digest.MurmurHash3.hash64"
                },
                {
                    "function name": "hash64",
                    "function params": [
                        "data"
                    ],
                    "file name": "MurmurHash3.java",
                    "file old path": "src/main/java/org/apache/commons/codec/digest/MurmurHash3.java",
                    "file new path": "src/main/java/org/apache/commons/codec/digest/MurmurHash3.java",
                    "full name": "src.main.java.org.apache.commons.codec.digest.MurmurHash3.hash64"
                },
                {
                    "function name": "testHash32ByteArrayInt",
                    "function params": [],
                    "file name": "MurmurHash2Test.java",
                    "file old path": "src/test/java/org/apache/commons/codec/digest/MurmurHash2Test.java",
                    "file new path": "src/test/java/org/apache/commons/codec/digest/MurmurHash2Test.java",
                    "full name": "src.test.java.org.apache.commons.codec.digest.MurmurHash2Test.testHash32ByteArrayInt"
                },
                {
                    "function name": "testHash32StringIntInt",
                    "function params": [],
                    "file name": "MurmurHash2Test.java",
                    "file old path": "src/test/java/org/apache/commons/codec/digest/MurmurHash2Test.java",
                    "file new path": "src/test/java/org/apache/commons/codec/digest/MurmurHash2Test.java",
                    "full name": "src.test.java.org.apache.commons.codec.digest.MurmurHash2Test.testHash32StringIntInt"
                },
                {
                    "function name": "testHash64StringIntInt",
                    "function params": [],
                    "file name": "MurmurHash2Test.java",
                    "file old path": "src/test/java/org/apache/commons/codec/digest/MurmurHash2Test.java",
                    "file new path": "src/test/java/org/apache/commons/codec/digest/MurmurHash2Test.java",
                    "full name": "src.test.java.org.apache.commons.codec.digest.MurmurHash2Test.testHash64StringIntInt"
                },
                {
                    "function name": "testHash64ByteArrayIntInt",
                    "function params": [],
                    "file name": "MurmurHash2Test.java",
                    "file old path": "src/test/java/org/apache/commons/codec/digest/MurmurHash2Test.java",
                    "file new path": "src/test/java/org/apache/commons/codec/digest/MurmurHash2Test.java",
                    "full name": "src.test.java.org.apache.commons.codec.digest.MurmurHash2Test.testHash64ByteArrayIntInt"
                },
                {
                    "function name": "testHash64String",
                    "function params": [],
                    "file name": "MurmurHash2Test.java",
                    "file old path": "src/test/java/org/apache/commons/codec/digest/MurmurHash2Test.java",
                    "file new path": "src/test/java/org/apache/commons/codec/digest/MurmurHash2Test.java",
                    "full name": "src.test.java.org.apache.commons.codec.digest.MurmurHash2Test.testHash64String"
                },
                {
                    "function name": "testHash32ByteArrayIntInt",
                    "function params": [],
                    "file name": "MurmurHash2Test.java",
                    "file old path": "src/test/java/org/apache/commons/codec/digest/MurmurHash2Test.java",
                    "file new path": "src/test/java/org/apache/commons/codec/digest/MurmurHash2Test.java",
                    "full name": "src.test.java.org.apache.commons.codec.digest.MurmurHash2Test.testHash32ByteArrayIntInt"
                },
                {
                    "function name": "testHash64ByteArrayInt",
                    "function params": [],
                    "file name": "MurmurHash2Test.java",
                    "file old path": "src/test/java/org/apache/commons/codec/digest/MurmurHash2Test.java",
                    "file new path": "src/test/java/org/apache/commons/codec/digest/MurmurHash2Test.java",
                    "full name": "src.test.java.org.apache.commons.codec.digest.MurmurHash2Test.testHash64ByteArrayInt"
                },
                {
                    "function name": "testHash32String",
                    "function params": [],
                    "file name": "MurmurHash2Test.java",
                    "file old path": "src/test/java/org/apache/commons/codec/digest/MurmurHash2Test.java",
                    "file new path": "src/test/java/org/apache/commons/codec/digest/MurmurHash2Test.java",
                    "full name": "src.test.java.org.apache.commons.codec.digest.MurmurHash2Test.testHash32String"
                },
                {
                    "function name": "testTwoLongOrdered",
                    "function params": [],
                    "file name": "MurmurHash3Test.java",
                    "file old path": "src/test/java/org/apache/commons/codec/digest/MurmurHash3Test.java",
                    "file new path": "src/test/java/org/apache/commons/codec/digest/MurmurHash3Test.java",
                    "full name": "src.test.java.org.apache.commons.codec.digest.MurmurHash3Test.testTwoLongOrdered"
                },
                {
                    "function name": "testIncremental",
                    "function params": [],
                    "file name": "MurmurHash3Test.java",
                    "file old path": "src/test/java/org/apache/commons/codec/digest/MurmurHash3Test.java",
                    "file new path": "src/test/java/org/apache/commons/codec/digest/MurmurHash3Test.java",
                    "full name": "src.test.java.org.apache.commons.codec.digest.MurmurHash3Test.testIncremental"
                },
                {
                    "function name": "testSingleLongOrdered",
                    "function params": [],
                    "file name": "MurmurHash3Test.java",
                    "file old path": "src/test/java/org/apache/commons/codec/digest/MurmurHash3Test.java",
                    "file new path": "src/test/java/org/apache/commons/codec/digest/MurmurHash3Test.java",
                    "full name": "src.test.java.org.apache.commons.codec.digest.MurmurHash3Test.testSingleLongOrdered"
                },
                {
                    "function name": "test64",
                    "function params": [],
                    "file name": "MurmurHash3Test.java",
                    "file old path": "src/test/java/org/apache/commons/codec/digest/MurmurHash3Test.java",
                    "file new path": "src/test/java/org/apache/commons/codec/digest/MurmurHash3Test.java",
                    "full name": "src.test.java.org.apache.commons.codec.digest.MurmurHash3Test.test64"
                },
                {
                    "function name": "testHashCodeM3_64",
                    "function params": [],
                    "file name": "MurmurHash3Test.java",
                    "file old path": "src/test/java/org/apache/commons/codec/digest/MurmurHash3Test.java",
                    "file new path": "src/test/java/org/apache/commons/codec/digest/MurmurHash3Test.java",
                    "full name": "src.test.java.org.apache.commons.codec.digest.MurmurHash3Test.testHashCodeM3_64"
                },
                {
                    "function name": "test128_Short",
                    "function params": [],
                    "file name": "MurmurHash3Test.java",
                    "file old path": "src/test/java/org/apache/commons/codec/digest/MurmurHash3Test.java",
                    "file new path": "src/test/java/org/apache/commons/codec/digest/MurmurHash3Test.java",
                    "full name": "src.test.java.org.apache.commons.codec.digest.MurmurHash3Test.test128_Short"
                },
                {
                    "function name": "test128_Long",
                    "function params": [],
                    "file name": "MurmurHash3Test.java",
                    "file old path": "src/test/java/org/apache/commons/codec/digest/MurmurHash3Test.java",
                    "file new path": "src/test/java/org/apache/commons/codec/digest/MurmurHash3Test.java",
                    "full name": "src.test.java.org.apache.commons.codec.digest.MurmurHash3Test.test128_Long"
                },
                {
                    "function name": "test32_String",
                    "function params": [],
                    "file name": "MurmurHash3Test.java",
                    "file old path": "src/test/java/org/apache/commons/codec/digest/MurmurHash3Test.java",
                    "file new path": "src/test/java/org/apache/commons/codec/digest/MurmurHash3Test.java",
                    "full name": "src.test.java.org.apache.commons.codec.digest.MurmurHash3Test.test32_String"
                },
                {
                    "function name": "testTwoLongRandom",
                    "function params": [],
                    "file name": "MurmurHash3Test.java",
                    "file old path": "src/test/java/org/apache/commons/codec/digest/MurmurHash3Test.java",
                    "file new path": "src/test/java/org/apache/commons/codec/digest/MurmurHash3Test.java",
                    "full name": "src.test.java.org.apache.commons.codec.digest.MurmurHash3Test.testTwoLongRandom"
                },
                {
                    "function name": "test128_Int",
                    "function params": [],
                    "file name": "MurmurHash3Test.java",
                    "file old path": "src/test/java/org/apache/commons/codec/digest/MurmurHash3Test.java",
                    "file new path": "src/test/java/org/apache/commons/codec/digest/MurmurHash3Test.java",
                    "full name": "src.test.java.org.apache.commons.codec.digest.MurmurHash3Test.test128_Int"
                },
                {
                    "function name": "testSingleLongRandom",
                    "function params": [],
                    "file name": "MurmurHash3Test.java",
                    "file old path": "src/test/java/org/apache/commons/codec/digest/MurmurHash3Test.java",
                    "file new path": "src/test/java/org/apache/commons/codec/digest/MurmurHash3Test.java",
                    "full name": "src.test.java.org.apache.commons.codec.digest.MurmurHash3Test.testSingleLongRandom"
                },
                {
                    "function name": "test128_Double",
                    "function params": [],
                    "file name": "MurmurHash3Test.java",
                    "file old path": "src/test/java/org/apache/commons/codec/digest/MurmurHash3Test.java",
                    "file new path": "src/test/java/org/apache/commons/codec/digest/MurmurHash3Test.java",
                    "full name": "src.test.java.org.apache.commons.codec.digest.MurmurHash3Test.test128_Double"
                },
                {
                    "function name": "test128_String",
                    "function params": [],
                    "file name": "MurmurHash3Test.java",
                    "file old path": "src/test/java/org/apache/commons/codec/digest/MurmurHash3Test.java",
                    "file new path": "src/test/java/org/apache/commons/codec/digest/MurmurHash3Test.java",
                    "full name": "src.test.java.org.apache.commons.codec.digest.MurmurHash3Test.test128_String"
                }
            ],
            "files that changed": [
                "src/main/java/org/apache/commons/codec/digest/MurmurHash2.java",
                "src/main/java/org/apache/commons/codec/digest/MurmurHash3.java",
                "src/test/java/org/apache/commons/codec/digest/MurmurHash2Test.java",
                "src/test/java/org/apache/commons/codec/digest/MurmurHash3Test.java"
            ]
        },
        {
            "bug index": "30",
            "bug id": "CODEC-10",
            "hexsha": "f3db0de1fe8c429bd3c869108074fed4bdf25b3a",
            "fix_hash": "eaf9ae1465d4d8298601c7f605bfca5e28e602d3",
            "description": "If I generate a soundex like so:\n  Soundex.US_ENGLISH.soundex( \"Williams\" )\nI get a NullPointerException.\n\nBut if I use the following:\n  new Soundex().soundex( \"Williams\" )\neverything works fine.\n\nI think the order of initialization of statics may be to blame.  I'll attach a\ntest case.",
            "commit number version hash": 549,
            "commit number": 1151,
            "function that changed": [],
            "files that changed": [
                "src/main/java/org/apache/commons/codec/digest/MessageDigestAlgorithms.java"
            ]
        },
        {
            "bug index": "31",
            "bug id": "CODEC-255",
            "hexsha": "c74ed13a8b14421a5eb1bdc83430d413545682dd",
            "fix_hash": "79722429dad5256ac0d3871d4ef2977b4e7a383d",
            "description": "In the ColognePhonetic the letter x is coded as 48. This is solved in the implementation in adding a 's' in the string.\r\n\r\nWith this a string 'xch' ist coded as 48 instead of the correct 484.\r\n\r\nA solution is to store the added 'S' in the next loop not in the lastChar.",
            "commit number version hash": 1124,
            "commit number": 1144,
            "function that changed": [
                {
                    "function name": "CologneOutputBuffer",
                    "function params": [
                        "buffSize"
                    ],
                    "file name": "ColognePhonetic.java",
                    "file old path": "src/main/java/org/apache/commons/codec/language/ColognePhonetic.java",
                    "file new path": "src/main/java/org/apache/commons/codec/language/ColognePhonetic.java",
                    "full name": "src.main.java.org.apache.commons.codec.language.ColognePhonetic.CologneOutputBuffer"
                },
                {
                    "function name": "colognePhonetic",
                    "function params": [
                        "text"
                    ],
                    "file name": "ColognePhonetic.java",
                    "file old path": "src/main/java/org/apache/commons/codec/language/ColognePhonetic.java",
                    "file new path": "src/main/java/org/apache/commons/codec/language/ColognePhonetic.java",
                    "full name": "src.main.java.org.apache.commons.codec.language.ColognePhonetic.colognePhonetic"
                },
                {
                    "function name": "CologneOutputBuffer",
                    "function params": [
                        "code"
                    ],
                    "file name": "ColognePhonetic.java",
                    "file old path": "src/main/java/org/apache/commons/codec/language/ColognePhonetic.java",
                    "file new path": "src/main/java/org/apache/commons/codec/language/ColognePhonetic.java",
                    "full name": "src.main.java.org.apache.commons.codec.language.ColognePhonetic.CologneOutputBuffer"
                },
                {
                    "function name": "testExamples",
                    "function params": [],
                    "file name": "ColognePhoneticTest.java",
                    "file old path": "src/test/java/org/apache/commons/codec/language/ColognePhoneticTest.java",
                    "file new path": "src/test/java/org/apache/commons/codec/language/ColognePhoneticTest.java",
                    "full name": "src.test.java.org.apache.commons.codec.language.ColognePhoneticTest.testExamples"
                }
            ],
            "files that changed": [
                "src/main/java/org/apache/commons/codec/language/ColognePhonetic.java",
                "src/test/java/org/apache/commons/codec/language/ColognePhoneticTest.java"
            ]
        },
        {
            "bug index": "32",
            "bug id": "CODEC-254",
            "hexsha": "c74ed13a8b14421a5eb1bdc83430d413545682dd",
            "fix_hash": "4f8662a758688b845d741a932e28cc8d4fc11b96",
            "description": "With the fix in CODEC-250 the letter H is not treaten correct any more.\r\n\r\nA String 'shch' is coded as 8 and not as 84. (This string is sometimes in foreign surnames)\r\n\r\nThe reasen is the letter h is ignored completely and not stored in the lastChar anymore.",
            "commit number version hash": 1124,
            "commit number": 1142,
            "function that changed": [
                {
                    "function name": "colognePhonetic",
                    "function params": [
                        "text"
                    ],
                    "file name": "ColognePhonetic.java",
                    "file old path": "src/main/java/org/apache/commons/codec/language/ColognePhonetic.java",
                    "file new path": "src/main/java/org/apache/commons/codec/language/ColognePhonetic.java",
                    "full name": "src.main.java.org.apache.commons.codec.language.ColognePhonetic.colognePhonetic"
                },
                {
                    "function name": "testExamples",
                    "function params": [],
                    "file name": "ColognePhoneticTest.java",
                    "file old path": "src/test/java/org/apache/commons/codec/language/ColognePhoneticTest.java",
                    "file new path": "src/test/java/org/apache/commons/codec/language/ColognePhoneticTest.java",
                    "full name": "src.test.java.org.apache.commons.codec.language.ColognePhoneticTest.testExamples"
                },
                {
                    "function name": "testIsEncodeEquals",
                    "function params": [],
                    "file name": "ColognePhoneticTest.java",
                    "file old path": "src/test/java/org/apache/commons/codec/language/ColognePhoneticTest.java",
                    "file new path": "src/test/java/org/apache/commons/codec/language/ColognePhoneticTest.java",
                    "full name": "src.test.java.org.apache.commons.codec.language.ColognePhoneticTest.testIsEncodeEquals"
                },
                {
                    "function name": "testAabjoe",
                    "function params": [],
                    "file name": "ColognePhoneticTest.java",
                    "file old path": "src/test/java/org/apache/commons/codec/language/ColognePhoneticTest.java",
                    "file new path": "src/test/java/org/apache/commons/codec/language/ColognePhoneticTest.java",
                    "full name": "src.test.java.org.apache.commons.codec.language.ColognePhoneticTest.testAabjoe"
                },
                {
                    "function name": "testCanFail",
                    "function params": [],
                    "file name": "ColognePhoneticTest.java",
                    "file old path": "src/test/java/org/apache/commons/codec/language/ColognePhoneticTest.java",
                    "file new path": "src/test/java/org/apache/commons/codec/language/ColognePhoneticTest.java",
                    "full name": "src.test.java.org.apache.commons.codec.language.ColognePhoneticTest.testCanFail"
                },
                {
                    "function name": "main",
                    "function params": [],
                    "file name": "ColognePhoneticTest.java",
                    "file old path": "src/test/java/org/apache/commons/codec/language/ColognePhoneticTest.java",
                    "file new path": "src/test/java/org/apache/commons/codec/language/ColognePhoneticTest.java",
                    "full name": "src.test.java.org.apache.commons.codec.language.ColognePhoneticTest.main"
                },
                {
                    "function name": "testSpecialCharsBetweenSameLetters",
                    "function params": [],
                    "file name": "ColognePhoneticTest.java",
                    "file old path": "src/test/java/org/apache/commons/codec/language/ColognePhoneticTest.java",
                    "file new path": "src/test/java/org/apache/commons/codec/language/ColognePhoneticTest.java",
                    "full name": "src.test.java.org.apache.commons.codec.language.ColognePhoneticTest.testSpecialCharsBetweenSameLetters"
                },
                {
                    "function name": "testAychlmajrForCodec122",
                    "function params": [],
                    "file name": "ColognePhoneticTest.java",
                    "file old path": "src/test/java/org/apache/commons/codec/language/ColognePhoneticTest.java",
                    "file new path": "src/test/java/org/apache/commons/codec/language/ColognePhoneticTest.java",
                    "full name": "src.test.java.org.apache.commons.codec.language.ColognePhoneticTest.testAychlmajrForCodec122"
                },
                {
                    "function name": "createStringEncoder",
                    "function params": [],
                    "file name": "ColognePhoneticTest.java",
                    "file old path": "src/test/java/org/apache/commons/codec/language/ColognePhoneticTest.java",
                    "file new path": "src/test/java/org/apache/commons/codec/language/ColognePhoneticTest.java",
                    "full name": "src.test.java.org.apache.commons.codec.language.ColognePhoneticTest.createStringEncoder"
                },
                {
                    "function name": "testVariationsMeyer",
                    "function params": [],
                    "file name": "ColognePhoneticTest.java",
                    "file old path": "src/test/java/org/apache/commons/codec/language/ColognePhoneticTest.java",
                    "file new path": "src/test/java/org/apache/commons/codec/language/ColognePhoneticTest.java",
                    "full name": "src.test.java.org.apache.commons.codec.language.ColognePhoneticTest.testVariationsMeyer"
                },
                {
                    "function name": "testAaclan",
                    "function params": [],
                    "file name": "ColognePhoneticTest.java",
                    "file old path": "src/test/java/org/apache/commons/codec/language/ColognePhoneticTest.java",
                    "file new path": "src/test/java/org/apache/commons/codec/language/ColognePhoneticTest.java",
                    "full name": "src.test.java.org.apache.commons.codec.language.ColognePhoneticTest.testAaclan"
                },
                {
                    "function name": "testHyphen",
                    "function params": [],
                    "file name": "ColognePhoneticTest.java",
                    "file old path": "src/test/java/org/apache/commons/codec/language/ColognePhoneticTest.java",
                    "file new path": "src/test/java/org/apache/commons/codec/language/ColognePhoneticTest.java",
                    "full name": "src.test.java.org.apache.commons.codec.language.ColognePhoneticTest.testHyphen"
                },
                {
                    "function name": "finishTests",
                    "function params": [],
                    "file name": "ColognePhoneticTest.java",
                    "file old path": "src/test/java/org/apache/commons/codec/language/ColognePhoneticTest.java",
                    "file new path": "src/test/java/org/apache/commons/codec/language/ColognePhoneticTest.java",
                    "full name": "src.test.java.org.apache.commons.codec.language.ColognePhoneticTest.finishTests"
                },
                {
                    "function name": "hasTestCase",
                    "function params": [
                        "re"
                    ],
                    "file name": "ColognePhoneticTest.java",
                    "file old path": "src/test/java/org/apache/commons/codec/language/ColognePhoneticTest.java",
                    "file new path": "src/test/java/org/apache/commons/codec/language/ColognePhoneticTest.java",
                    "full name": "src.test.java.org.apache.commons.codec.language.ColognePhoneticTest.hasTestCase"
                },
                {
                    "function name": "checkEncoding",
                    "function params": [
                        "expected",
                        "source"
                    ],
                    "file name": "ColognePhoneticTest.java",
                    "file old path": "src/test/java/org/apache/commons/codec/language/ColognePhoneticTest.java",
                    "file new path": "src/test/java/org/apache/commons/codec/language/ColognePhoneticTest.java",
                    "full name": "src.test.java.org.apache.commons.codec.language.ColognePhoneticTest.checkEncoding"
                },
                {
                    "function name": "testVariationsMella",
                    "function params": [],
                    "file name": "ColognePhoneticTest.java",
                    "file old path": "src/test/java/org/apache/commons/codec/language/ColognePhoneticTest.java",
                    "file new path": "src/test/java/org/apache/commons/codec/language/ColognePhoneticTest.java",
                    "full name": "src.test.java.org.apache.commons.codec.language.ColognePhoneticTest.testVariationsMella"
                },
                {
                    "function name": "testEdgeCases",
                    "function params": [],
                    "file name": "ColognePhoneticTest.java",
                    "file old path": "src/test/java/org/apache/commons/codec/language/ColognePhoneticTest.java",
                    "file new path": "src/test/java/org/apache/commons/codec/language/ColognePhoneticTest.java",
                    "full name": "src.test.java.org.apache.commons.codec.language.ColognePhoneticTest.testEdgeCases"
                }
            ],
            "files that changed": [
                "src/main/java/org/apache/commons/codec/language/ColognePhonetic.java",
                "src/test/java/org/apache/commons/codec/language/ColognePhoneticTest.java"
            ]
        },
        {
            "bug index": "33",
            "bug id": "CODEC-134",
            "hexsha": "3ebef4ad92e31697fb52ca7cc71904c68654c2c8",
            "fix_hash": "48b615756d1d770091ea3322eefc08011ee8b113",
            "description": "Example, there is no byte array value that can be encoded into the string \"C5CYMIHWQUUZMKUGZHGEOSJSQDE4L===\", but the existing Base32 implementation would not reject it but decode it into an arbitrary value which if re-encoded again using the same implementation would result in the string \"C5CYMIHWQUUZMKUGZHGEOSJSQDE4K===\".\n\nInstead of blindly decoding the invalid string, the Base32 codec should reject it (eg by throwing IlleglArgumentException) to avoid security exploitation (such as tunneling additional information via seemingly valid base 32 strings).",
            "commit number version hash": 1159,
            "commit number": 1137,
            "function that changed": [
                {
                    "function name": "validateCharacter",
                    "function params": [
                        "numBits",
                        "context"
                    ],
                    "file name": "Base32.java",
                    "file old path": "src/main/java/org/apache/commons/codec/binary/Base32.java",
                    "file new path": "src/main/java/org/apache/commons/codec/binary/Base32.java",
                    "full name": "src.main.java.org.apache.commons.codec.binary.Base32.validateCharacter"
                },
                {
                    "function name": "decode",
                    "function params": [
                        "in",
                        "inPos",
                        "inAvail",
                        "context"
                    ],
                    "file name": "Base32.java",
                    "file old path": "src/main/java/org/apache/commons/codec/binary/Base32.java",
                    "file new path": "src/main/java/org/apache/commons/codec/binary/Base32.java",
                    "full name": "src.main.java.org.apache.commons.codec.binary.Base32.decode"
                },
                {
                    "function name": "decode",
                    "function params": [
                        "in",
                        "inPos",
                        "inAvail",
                        "context"
                    ],
                    "file name": "Base64.java",
                    "file old path": "src/main/java/org/apache/commons/codec/binary/Base64.java",
                    "file new path": "src/main/java/org/apache/commons/codec/binary/Base64.java",
                    "full name": "src.main.java.org.apache.commons.codec.binary.Base64.decode"
                },
                {
                    "function name": "validateCharacter",
                    "function params": [
                        "numBitsToDrop",
                        "context"
                    ],
                    "file name": "Base64.java",
                    "file old path": "src/main/java/org/apache/commons/codec/binary/Base64.java",
                    "file new path": "src/main/java/org/apache/commons/codec/binary/Base64.java",
                    "full name": "src.main.java.org.apache.commons.codec.binary.Base64.validateCharacter"
                },
                {
                    "function name": "decode",
                    "function params": [
                        "value"
                    ],
                    "file name": "BCodec.java",
                    "file old path": "src/main/java/org/apache/commons/codec/net/BCodec.java",
                    "file new path": "src/main/java/org/apache/commons/codec/net/BCodec.java",
                    "full name": "src.main.java.org.apache.commons.codec.net.BCodec.decode"
                },
                {
                    "function name": "testImpossibleCases",
                    "function params": [
                        "codec",
                        "impossible_cases"
                    ],
                    "file name": "Base32Test.java",
                    "file old path": "src/test/java/org/apache/commons/codec/binary/Base32Test.java",
                    "file new path": "src/test/java/org/apache/commons/codec/binary/Base32Test.java",
                    "full name": "src.test.java.org.apache.commons.codec.binary.Base32Test.testImpossibleCases"
                },
                {
                    "function name": "testBase32HexImpossibleSamples",
                    "function params": [],
                    "file name": "Base32Test.java",
                    "file old path": "src/test/java/org/apache/commons/codec/binary/Base32Test.java",
                    "file new path": "src/test/java/org/apache/commons/codec/binary/Base32Test.java",
                    "full name": "src.test.java.org.apache.commons.codec.binary.Base32Test.testBase32HexImpossibleSamples"
                },
                {
                    "function name": "testBase32ImpossibleSamples",
                    "function params": [],
                    "file name": "Base32Test.java",
                    "file old path": "src/test/java/org/apache/commons/codec/binary/Base32Test.java",
                    "file new path": "src/test/java/org/apache/commons/codec/binary/Base32Test.java",
                    "full name": "src.test.java.org.apache.commons.codec.binary.Base32Test.testBase32ImpossibleSamples"
                },
                {
                    "function name": "testBase32ImpossibleChunked",
                    "function params": [],
                    "file name": "Base32Test.java",
                    "file old path": "src/test/java/org/apache/commons/codec/binary/Base32Test.java",
                    "file new path": "src/test/java/org/apache/commons/codec/binary/Base32Test.java",
                    "full name": "src.test.java.org.apache.commons.codec.binary.Base32Test.testBase32ImpossibleChunked"
                },
                {
                    "function name": "testBase64ImpossibleSamples",
                    "function params": [],
                    "file name": "Base64Test.java",
                    "file old path": "src/test/java/org/apache/commons/codec/binary/Base64Test.java",
                    "file new path": "src/test/java/org/apache/commons/codec/binary/Base64Test.java",
                    "full name": "src.test.java.org.apache.commons.codec.binary.Base64Test.testBase64ImpossibleSamples"
                },
                {
                    "function name": "testBase64ImpossibleSamples",
                    "function params": [],
                    "file name": "BCodecTest.java",
                    "file old path": "src/test/java/org/apache/commons/codec/net/BCodecTest.java",
                    "file new path": "src/test/java/org/apache/commons/codec/net/BCodecTest.java",
                    "full name": "src.test.java.org.apache.commons.codec.net.BCodecTest.testBase64ImpossibleSamples"
                }
            ],
            "files that changed": [
                "src/main/java/org/apache/commons/codec/binary/Base32.java",
                "src/main/java/org/apache/commons/codec/binary/Base64.java",
                "src/main/java/org/apache/commons/codec/net/BCodec.java",
                "src/test/java/org/apache/commons/codec/binary/Base32Test.java",
                "src/test/java/org/apache/commons/codec/binary/Base64Test.java",
                "src/test/java/org/apache/commons/codec/binary/Base64TestData.java",
                "src/test/java/org/apache/commons/codec/net/BCodecTest.java"
            ]
        },
        {
            "bug index": "35",
            "bug id": "CODEC-1",
            "hexsha": "71e7260746a902d1070a190fd78bd560464860b9",
            "fix_hash": "c74ed13a8b14421a5eb1bdc83430d413545682dd",
            "description": "URLCodec causes an IndexOutOfBoundsException in BitSet when encoding non-ASCII\ncharacters.",
            "commit number version hash": 173,
            "commit number": 1124,
            "function that changed": [],
            "files that changed": [
                "src/main/java/org/apache/commons/codec/digest/Md5Crypt.java",
                "src/main/java/org/apache/commons/codec/digest/Sha2Crypt.java"
            ]
        },
        {
            "bug index": "36",
            "bug id": "CODEC-11",
            "hexsha": "71e7260746a902d1070a190fd78bd560464860b9",
            "fix_hash": "163d643d1176e0dc9334ee83e21b9ce21d24fc1a",
            "description": "Henri posted an interesting class to the list,\nhttp://www.osjava.org/genjava-core/xref/com/generationjava/security/Securer.html\n\nWondering if this has anything that might be of general interest to add to the\nDigestUtil or a supplemental class.",
            "commit number version hash": 173,
            "commit number": 1115,
            "function that changed": [],
            "files that changed": [
                "src/main/java/org/apache/commons/codec/language/ColognePhonetic.java"
            ]
        },
        {
            "bug index": "37",
            "bug id": "CODEC-250",
            "hexsha": "c74ed13a8b14421a5eb1bdc83430d413545682dd",
            "fix_hash": "36fccb4325f924bf46babd4d8d60226f8dd3f154",
            "description": "The algorith for cologne phonetic is (simpilied):\r\n # Encode letter by letter from left to right according to the conversion table.\r\n # Remove all digits occurring more than once next to each other.\r\n # Remove all code \"0\" except at the beginning.\r\n\r\nCharacters which are not specified in conversion table (such as hyphens) are ignored. See https://en.wikipedia.org/wiki/Cologne_phonetics\r\n\r\nIf the input is \"test-test\" the step results will be:\r\n # 20822082\r\n # 2082082\r\n # 28282\r\n\r\nThe expected result for \"test-test\" is therefor 28282.\r\n\r\nThe actual result for \"test-test\" is 282{color:#FF0000}2{color}82.\r\n\r\nThis bug is caused by the fix from\r\n\r\n[https://github.com/apache/commons-codec/commit/72c8759a22c6552a2dfcdf61b29729f981752879]\r\n\r\nand is present since 1.5",
            "commit number version hash": 1124,
            "commit number": 1112,
            "function that changed": [
                {
                    "function name": "colognePhonetic",
                    "function params": [
                        "text"
                    ],
                    "file name": "ColognePhonetic.java",
                    "file old path": "src/main/java/org/apache/commons/codec/language/ColognePhonetic.java",
                    "file new path": "src/main/java/org/apache/commons/codec/language/ColognePhonetic.java",
                    "full name": "src.main.java.org.apache.commons.codec.language.ColognePhonetic.colognePhonetic"
                },
                {
                    "function name": "testSpecialCharsBetweenSameLetters",
                    "function params": [],
                    "file name": "ColognePhoneticTest.java",
                    "file old path": "src/test/java/org/apache/commons/codec/language/ColognePhoneticTest.java",
                    "file new path": "src/test/java/org/apache/commons/codec/language/ColognePhoneticTest.java",
                    "full name": "src.test.java.org.apache.commons.codec.language.ColognePhoneticTest.testSpecialCharsBetweenSameLetters"
                }
            ],
            "files that changed": [
                "src/main/java/org/apache/commons/codec/language/ColognePhonetic.java",
                "src/test/java/org/apache/commons/codec/language/ColognePhoneticTest.java"
            ]
        },
        {
            "bug index": "38",
            "bug id": "CODEC-9",
            "hexsha": "71e7260746a902d1070a190fd78bd560464860b9",
            "fix_hash": "fc4ce44a1021192bc3d818038cbeb1d3e65938f3",
            "description": "This patch deprecates URLCodec#getEncoding method and replaces it with\nURLCodec#getCharSet method, because the term encoding is used in RFC1522 to\nrefer to the encoding/decoding algorithm, whereas charset is used to refer to\nthe character set associated with the unencoded text. \n\nLet me know if you agree/disagree\n\nOleg",
            "commit number version hash": 173,
            "commit number": 1099,
            "function that changed": [],
            "files that changed": [
                "src/main/java/org/apache/commons/codec/digest/MessageDigestAlgorithms.java"
            ]
        },
        {
            "bug index": "39",
            "bug id": "CODEC-12",
            "hexsha": "71e7260746a902d1070a190fd78bd560464860b9",
            "fix_hash": "8bc1d8d383f7cf4d829eca6112830f201246685d",
            "description": "[junit] Running org.apache.commons.codec.language.SoundexTest\n    [junit] Tests run: 19, Failures: 1, Errors: 0, Time elapsed: 0.06 sec\n\n\nIn jpackage.org we run \"ant (...) test jar javadoc\" and if a test fails we get a:\n\nBUILD FAILED\n/home/fnasser/topdir/BUILD/jakarta-commons-codec-1.3/build.xml:180: Test\norg.apache.commons.codec.language.SoundexTest failed\n\nand the RPMs are not generated.  Can this be fixed?  A patch that we can apply\nto the 1.3 sources perhaps?  I've excluded the Soundex tests altogether so we\ncould build but the ideal would be to run and pass the tests as a sanity test of\nthe build process.\n\nWe noticed that there are deprecated calls in this test:\n\ncompile.tests:\n    [javac] Compiling 17 source files to\n/home/fnasser/topdir/BUILD/jakarta-commons-codec-1.3/build/tests\n    [javac]\n/home/fnasser/topdir/BUILD/jakarta-commons-codec-1.3/src/test/org/apache/commons/codec/language/SoundexTest.java:298:\nwarning: getMaxLength() in org.apache.commons.codec.language.Soundex has been\ndeprecated\n    [javac]         soundex.setMaxLength(soundex.getMaxLength());\n    [javac]                                     ^\n    [javac]\n/home/fnasser/topdir/BUILD/jakarta-commons-codec-1.3/src/test/org/apache/commons/codec/language/SoundexTest.java:298:\nwarning: setMaxLength(int) in org.apache.commons.codec.language.Soundex has been\ndeprecated\n    [javac]         soundex.setMaxLength(soundex.getMaxLength());\n    [javac]                ^\n    [javac]\n/home/fnasser/topdir/BUILD/jakarta-commons-codec-1.3/src/test/org/apache/commons/codec/language/SoundexTest.java:304:\nwarning: setMaxLength(int) in org.apache.commons.codec.language.Soundex has been\ndeprecated\n    [javac]         soundex.setMaxLength(2);\n    [javac]                ^\n    [javac]\n/home/fnasser/topdir/BUILD/jakarta-commons-codec-1.3/src/test/org/apache/commons/codec/net/URLCodecTest.java:44:\nwarning: getEncoding() in org.apache.commons.codec.net.URLCodec has been deprecated\n    [javac]         assertEquals(urlCodec.getEncoding(),\nurlCodec.getDefaultCharset());\n    [javac]                              ^\n    [javac] 4 warnings\n\n\nThanks for your attention.",
            "commit number version hash": 173,
            "commit number": 1094,
            "function that changed": [
                {
                    "function name": "encode",
                    "function params": [
                        "source"
                    ],
                    "file name": "Caverphone1.java",
                    "file old path": "src/main/java/org/apache/commons/codec/language/Caverphone1.java",
                    "file new path": "src/main/java/org/apache/commons/codec/language/Caverphone1.java",
                    "full name": "src.main.java.org.apache.commons.codec.language.Caverphone1.encode"
                }
            ],
            "files that changed": [
                "src/main/java/org/apache/commons/codec/language/Caverphone1.java"
            ]
        },
        {
            "bug index": "40",
            "bug id": "CODEC-1",
            "hexsha": "71e7260746a902d1070a190fd78bd560464860b9",
            "fix_hash": "5e6b2cedbb6137c556f66db09285aa2cffd3cf0a",
            "description": "URLCodec causes an IndexOutOfBoundsException in BitSet when encoding non-ASCII\ncharacters.",
            "commit number version hash": 173,
            "commit number": 1093,
            "function that changed": [],
            "files that changed": [
                "src/main/java/org/apache/commons/codec/digest/DigestUtils.java"
            ]
        },
        {
            "bug index": "41",
            "bug id": "CODEC-9",
            "hexsha": "71e7260746a902d1070a190fd78bd560464860b9",
            "fix_hash": "8765c05ded1a3ed31bb3da780203e84c3e6c7203",
            "description": "This patch deprecates URLCodec#getEncoding method and replaces it with\nURLCodec#getCharSet method, because the term encoding is used in RFC1522 to\nrefer to the encoding/decoding algorithm, whereas charset is used to refer to\nthe character set associated with the unencoded text. \n\nLet me know if you agree/disagree\n\nOleg",
            "commit number version hash": 173,
            "commit number": 1058,
            "function that changed": [],
            "files that changed": [
                "src/main/java/org/apache/commons/codec/digest/HmacAlgorithms.java"
            ]
        },
        {
            "bug index": "42",
            "bug id": "CODEC-199",
            "hexsha": "28910eec203524b002f0dfeb8a391b88f835a7c0",
            "fix_hash": "29a7e67999568a5c86b32ef513a90d5d090ad2b2",
            "description": "The Soundex algorithm says that if two characters that map to the same code are separated by H or W, the second one is not encoded.\nHowever, in the implementation (in Soundex.getMappingCode() line 191), a character that is preceded by two characters that are either H or W, is not encoded, regardless of what the last consonant was.\nSource: http://en.wikipedia.org/wiki/Soundex#American_Soundex\n",
            "commit number version hash": 1060,
            "commit number": 1045,
            "function that changed": [
                {
                    "function name": "soundex",
                    "function params": [
                        "str"
                    ],
                    "file name": "Soundex.java",
                    "file old path": "src/main/java/org/apache/commons/codec/language/Soundex.java",
                    "file new path": "src/main/java/org/apache/commons/codec/language/Soundex.java",
                    "full name": "src.main.java.org.apache.commons.codec.language.Soundex.soundex"
                },
                {
                    "function name": "map",
                    "function params": [
                        "ch"
                    ],
                    "file name": "Soundex.java",
                    "file old path": "src/main/java/org/apache/commons/codec/language/Soundex.java",
                    "file new path": "src/main/java/org/apache/commons/codec/language/Soundex.java",
                    "full name": "src.main.java.org.apache.commons.codec.language.Soundex.map"
                }
            ],
            "files that changed": [
                "src/main/java/org/apache/commons/codec/language/Soundex.java"
            ]
        },
        {
            "bug index": "43",
            "bug id": "CODEC-145",
            "hexsha": "28910eec203524b002f0dfeb8a391b88f835a7c0",
            "fix_hash": "484698c5415bb578cb480845e2dfa930d3d49d9c",
            "description": "{{org.apache.commons.codec.binary.Base64.encodeBase64String}} currently uses {{StringUtils.newStringUtf8}}. But the text should be in fact be in ASCII, so {{newStringUsAscii}} would be clearer and perhaps faster.",
            "commit number version hash": 1060,
            "commit number": 1040,
            "function that changed": [
                {
                    "function name": "encodeBase64String",
                    "function params": [
                        "binaryData"
                    ],
                    "file name": "Base64.java",
                    "file old path": "src/main/java/org/apache/commons/codec/binary/Base64.java",
                    "file new path": "src/main/java/org/apache/commons/codec/binary/Base64.java",
                    "full name": "src.main.java.org.apache.commons.codec.binary.Base64.encodeBase64String"
                },
                {
                    "function name": "encodeBase64URLSafeString",
                    "function params": [
                        "binaryData"
                    ],
                    "file name": "Base64.java",
                    "file old path": "src/main/java/org/apache/commons/codec/binary/Base64.java",
                    "file new path": "src/main/java/org/apache/commons/codec/binary/Base64.java",
                    "full name": "src.main.java.org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString"
                }
            ],
            "files that changed": [
                "src/main/java/org/apache/commons/codec/binary/Base64.java"
            ]
        },
        {
            "bug index": "44",
            "bug id": "CODEC-144",
            "hexsha": "28910eec203524b002f0dfeb8a391b88f835a7c0",
            "fix_hash": "ae83747b2b049ba37605622116579e8186dd3422",
            "description": "The BaseNCodec: encodeToString and encodeAsString methods are identical.\n\nNot quite sure how that happened (possibly as part of the refactoring of the subclasses).\n\nOptions are:\n* document and ignore (i.e. keep both)\n* deprecate one method for removal in 2.0",
            "commit number version hash": 1060,
            "commit number": 1039,
            "function that changed": [],
            "files that changed": [
                "src/main/java/org/apache/commons/codec/binary/BaseNCodec.java"
            ]
        },
        {
            "bug index": "45",
            "bug id": "CODEC-232",
            "hexsha": "28910eec203524b002f0dfeb8a391b88f835a7c0",
            "fix_hash": "8c5c6b936ee6d1afb75cc2cbc151887937dbcca5",
            "description": "URLCodec Javadoc says the class is immutable and threadsafe.\n\nHowever it is not immutable, because of the fields:\n\nprotected static final BitSet WWW_FORM_URL;\nprotected String charset;\n\nNor is it threadsafe, because external code can change the charset field; changes to the field are not safely published across threads.\n\n(The WWW_FORM_URL field is no longer used internally).\n\nThe class could be made effectively immutable (and threadsafe) by also saving the initial charset name in a private final field and only using the private field.\n\nOr the charset field could be made volatile.\nThis would preserve the behaviour for subclasses that rely on changing the charset field.",
            "commit number version hash": 1060,
            "commit number": 1038,
            "function that changed": [],
            "files that changed": [
                "src/main/java/org/apache/commons/codec/net/URLCodec.java"
            ]
        },
        {
            "bug index": "46",
            "bug id": "CODEC-231",
            "hexsha": "28910eec203524b002f0dfeb8a391b88f835a7c0",
            "fix_hash": "5ef5bd199a4e3df74479b4b363fa29b0b3092547",
            "description": "StringUtils.equals(CharSequence cs1, CharSequence cs2) fails with String Index OBE if the two sequences are different lengths.",
            "commit number version hash": 1060,
            "commit number": 1035,
            "function that changed": [
                {
                    "function name": "equals",
                    "function params": [
                        "cs1",
                        "cs2"
                    ],
                    "file name": "StringUtils.java",
                    "file old path": "src/main/java/org/apache/commons/codec/binary/StringUtils.java",
                    "file new path": "src/main/java/org/apache/commons/codec/binary/StringUtils.java",
                    "full name": "src.main.java.org.apache.commons.codec.binary.StringUtils.equals"
                },
                {
                    "function name": "testEqualsCS1",
                    "function params": [],
                    "file name": "StringUtilsTest.java",
                    "file old path": "src/test/java/org/apache/commons/codec/binary/StringUtilsTest.java",
                    "file new path": "src/test/java/org/apache/commons/codec/binary/StringUtilsTest.java",
                    "full name": "src.test.java.org.apache.commons.codec.binary.StringUtilsTest.testEqualsCS1"
                },
                {
                    "function name": "testEqualsString",
                    "function params": [],
                    "file name": "StringUtilsTest.java",
                    "file old path": "src/test/java/org/apache/commons/codec/binary/StringUtilsTest.java",
                    "file new path": "src/test/java/org/apache/commons/codec/binary/StringUtilsTest.java",
                    "full name": "src.test.java.org.apache.commons.codec.binary.StringUtilsTest.testEqualsString"
                },
                {
                    "function name": "testEqualsCS2",
                    "function params": [],
                    "file name": "StringUtilsTest.java",
                    "file old path": "src/test/java/org/apache/commons/codec/binary/StringUtilsTest.java",
                    "file new path": "src/test/java/org/apache/commons/codec/binary/StringUtilsTest.java",
                    "full name": "src.test.java.org.apache.commons.codec.binary.StringUtilsTest.testEqualsCS2"
                }
            ],
            "files that changed": [
                "src/main/java/org/apache/commons/codec/binary/StringUtils.java",
                "src/test/java/org/apache/commons/codec/binary/StringUtilsTest.java"
            ]
        },
        {
            "bug index": "47",
            "bug id": "CODEC-230",
            "hexsha": "28910eec203524b002f0dfeb8a391b88f835a7c0",
            "fix_hash": "ca30fae3acb59a5caef3c3c21eecae7c928827e0",
            "description": "URLCodec.WWW_FORM_URL is mutable and should be made private.\nOtherwise subclasses can change the array accidentally or deliberately.\n\nHowever this would change the API for sub-classes.\n\nA work-round would be to create a parallel private field and keep WWW_FORM_URL as a copy, but marked deprecated.",
            "commit number version hash": 1060,
            "commit number": 1034,
            "function that changed": [
                {
                    "function name": "encode",
                    "function params": [
                        "bytes"
                    ],
                    "file name": "URLCodec.java",
                    "file old path": "src/main/java/org/apache/commons/codec/net/URLCodec.java",
                    "file new path": "src/main/java/org/apache/commons/codec/net/URLCodec.java",
                    "full name": "src.main.java.org.apache.commons.codec.net.URLCodec.encode"
                },
                {
                    "function name": "for",
                    "function params": [
                        "i"
                    ],
                    "file name": "URLCodec.java",
                    "file old path": "src/main/java/org/apache/commons/codec/net/URLCodec.java",
                    "file new path": "src/main/java/org/apache/commons/codec/net/URLCodec.java",
                    "full name": "src.main.java.org.apache.commons.codec.net.URLCodec.for"
                },
                {
                    "function name": "for",
                    "function params": [
                        "i"
                    ],
                    "file name": "URLCodec.java",
                    "file old path": "src/main/java/org/apache/commons/codec/net/URLCodec.java",
                    "file new path": "src/main/java/org/apache/commons/codec/net/URLCodec.java",
                    "full name": "src.main.java.org.apache.commons.codec.net.URLCodec.for"
                },
                {
                    "function name": "encodeUrl",
                    "function params": [
                        "urlsafe",
                        "bytes"
                    ],
                    "file name": "URLCodec.java",
                    "file old path": "src/main/java/org/apache/commons/codec/net/URLCodec.java",
                    "file new path": "src/main/java/org/apache/commons/codec/net/URLCodec.java",
                    "full name": "src.main.java.org.apache.commons.codec.net.URLCodec.encodeUrl"
                },
                {
                    "function name": "for",
                    "function params": [
                        "i"
                    ],
                    "file name": "URLCodec.java",
                    "file old path": "src/main/java/org/apache/commons/codec/net/URLCodec.java",
                    "file new path": "src/main/java/org/apache/commons/codec/net/URLCodec.java",
                    "full name": "src.main.java.org.apache.commons.codec.net.URLCodec.for"
                }
            ],
            "files that changed": [
                "src/main/java/org/apache/commons/codec/net/URLCodec.java"
            ]
        },
        {
            "bug index": "48",
            "bug id": "CODEC-229",
            "hexsha": "28910eec203524b002f0dfeb8a391b88f835a7c0",
            "fix_hash": "d2f27093d7d95a07da901902f894d88b4ecc3e95",
            "description": "Method calls such as StringUtils.newStringIso8859_1(null) should return null, not NPE.\n\nIt looks like this capability was lost with the fix for CODEC-136, i.e.\nhttp://svn.apache.org/viewvc?rev=1306366&view=rev\n\nSeveral methods were changed from\n\n{code}\nreturn StringUtils.newString(bytes, CharEncoding.xxx);\nto\nreturn new String(bytes, Charsets.xxx);\n{code}\n\nThe new code should have been:\n\n{code}\nreturn newString(bytes, Charsets.xxx);\n{code}\n\nThe newString method handles null input.\n\nThere were no tests for null input so the change in behaviour was missed.\n",
            "commit number version hash": 1060,
            "commit number": 1030,
            "function that changed": [
                {
                    "function name": "newStringUsAscii",
                    "function params": [
                        "bytes"
                    ],
                    "file name": "StringUtils.java",
                    "file old path": "src/main/java/org/apache/commons/codec/binary/StringUtils.java",
                    "file new path": "src/main/java/org/apache/commons/codec/binary/StringUtils.java",
                    "full name": "src.main.java.org.apache.commons.codec.binary.StringUtils.newStringUsAscii"
                },
                {
                    "function name": "newStringUtf16Be",
                    "function params": [
                        "bytes"
                    ],
                    "file name": "StringUtils.java",
                    "file old path": "src/main/java/org/apache/commons/codec/binary/StringUtils.java",
                    "file new path": "src/main/java/org/apache/commons/codec/binary/StringUtils.java",
                    "full name": "src.main.java.org.apache.commons.codec.binary.StringUtils.newStringUtf16Be"
                },
                {
                    "function name": "newStringIso8859_1",
                    "function params": [
                        "bytes"
                    ],
                    "file name": "StringUtils.java",
                    "file old path": "src/main/java/org/apache/commons/codec/binary/StringUtils.java",
                    "file new path": "src/main/java/org/apache/commons/codec/binary/StringUtils.java",
                    "full name": "src.main.java.org.apache.commons.codec.binary.StringUtils.newStringIso8859_1"
                },
                {
                    "function name": "newStringUtf16Le",
                    "function params": [
                        "bytes"
                    ],
                    "file name": "StringUtils.java",
                    "file old path": "src/main/java/org/apache/commons/codec/binary/StringUtils.java",
                    "file new path": "src/main/java/org/apache/commons/codec/binary/StringUtils.java",
                    "full name": "src.main.java.org.apache.commons.codec.binary.StringUtils.newStringUtf16Le"
                },
                {
                    "function name": "newStringUtf16",
                    "function params": [
                        "bytes"
                    ],
                    "file name": "StringUtils.java",
                    "file old path": "src/main/java/org/apache/commons/codec/binary/StringUtils.java",
                    "file new path": "src/main/java/org/apache/commons/codec/binary/StringUtils.java",
                    "full name": "src.main.java.org.apache.commons.codec.binary.StringUtils.newStringUtf16"
                },
                {
                    "function name": "testNewStringNullInput_CODEC229",
                    "function params": [],
                    "file name": "StringUtilsTest.java",
                    "file old path": "src/test/java/org/apache/commons/codec/binary/StringUtilsTest.java",
                    "file new path": "src/test/java/org/apache/commons/codec/binary/StringUtilsTest.java",
                    "full name": "src.test.java.org.apache.commons.codec.binary.StringUtilsTest.testNewStringNullInput_CODEC229"
                }
            ],
            "files that changed": [
                "src/main/java/org/apache/commons/codec/binary/StringUtils.java",
                "src/test/java/org/apache/commons/codec/binary/StringUtilsTest.java"
            ]
        },
        {
            "bug index": "49",
            "bug id": "CODEC-225",
            "hexsha": "28910eec203524b002f0dfeb8a391b88f835a7c0",
            "fix_hash": "efe3699122699151984e8499da9d42673a42851a",
            "description": "After running static code analysis on common codecs we discovered that it leaks file descriptors. The relevant locations are:\n\n* DaitchMokotoffSoundex -> the static initializer on line 229 \n* Rule -> the static initializer on line 212 and the parseRules() method on line 438.\n\npatch provided via github pull request.\n\nThis issue is relevant for web app deployments on OSes (like windows) that lock the files if ther eare open streams to them, and will prevent application undeployment.",
            "commit number version hash": 1060,
            "commit number": 1029,
            "function that changed": [
                {
                    "function name": "for",
                    "function params": [
                        "s"
                    ],
                    "file name": "Rule.java",
                    "file old path": "src/main/java/org/apache/commons/codec/language/bm/Rule.java",
                    "file new path": "src/main/java/org/apache/commons/codec/language/bm/Rule.java",
                    "full name": "src.main.java.org.apache.commons.codec.language.bm.Rule.for"
                },
                {
                    "function name": "parseRules",
                    "function params": [
                        "scanner",
                        "location"
                    ],
                    "file name": "Rule.java",
                    "file old path": "src/main/java/org/apache/commons/codec/language/bm/Rule.java",
                    "file new path": "src/main/java/org/apache/commons/codec/language/bm/Rule.java",
                    "full name": "src.main.java.org.apache.commons.codec.language.bm.Rule.parseRules"
                }
            ],
            "files that changed": [
                "src/main/java/org/apache/commons/codec/language/DaitchMokotoffSoundex.java",
                "src/main/java/org/apache/commons/codec/language/bm/Rule.java"
            ]
        },
        {
            "bug index": "51",
            "bug id": "CODEC-221",
            "hexsha": "28910eec203524b002f0dfeb8a391b88f835a7c0",
            "fix_hash": "8bac2b6a1bd110cd171c89e75f68cd9a69624315",
            "description": "The HmacUtils.updateHmac() methods call reset().\nThis means that it's not possible to build up a digest using multiple such calls.\n\nThe only useful operation that can be performed afterwards is to call one of the Mac.doFinal() methods.\n\nUnfortunately it's probably too late to change this.\nHowever it should at least be documented.",
            "commit number version hash": 1060,
            "commit number": 984,
            "function that changed": [],
            "files that changed": [
                "src/main/java/org/apache/commons/codec/digest/HmacUtils.java"
            ]
        },
        {
            "bug index": "53",
            "bug id": "CODEC-219",
            "hexsha": "28910eec203524b002f0dfeb8a391b88f835a7c0",
            "fix_hash": "c48289b1457f825240043b942ab621b59c5d2490",
            "description": "Don't deprecate Charsets Charset constants in favor of Java 7's java.nio.charset.StandardCharsets. \n\nSince we still require Java 6, we should not deprecate.\n\nOffer better comments.",
            "commit number version hash": 1060,
            "commit number": 939,
            "function that changed": [],
            "files that changed": [
                "src/main/java/org/apache/commons/codec/Charsets.java"
            ]
        },
        {
            "bug index": "55",
            "bug id": "CODEC-217",
            "hexsha": "28910eec203524b002f0dfeb8a391b88f835a7c0",
            "fix_hash": "e7b0dde346e610fa273bd4ff2c82f6cf8e6de6c2",
            "description": "Add HmacAlgorithms.HMAC_SHA_224 (Java 8 only).",
            "commit number version hash": 1060,
            "commit number": 926,
            "function that changed": [],
            "files that changed": [
                "src/main/java/org/apache/commons/codec/digest/HmacAlgorithms.java"
            ]
        },
        {
            "bug index": "56",
            "bug id": "CODEC-209",
            "hexsha": "28910eec203524b002f0dfeb8a391b88f835a7c0",
            "fix_hash": "263fc1987ee6bfe8c09fdcb0f7339f49508978ad",
            "description": "Javadoc for SHA-224 DigestUtils should mention Java 1.8.0 restriction instead of 1.4.0.",
            "commit number version hash": 1060,
            "commit number": 913,
            "function that changed": [],
            "files that changed": [
                "src/main/java/org/apache/commons/codec/digest/DigestUtils.java"
            ]
        },
        {
            "bug index": "57",
            "bug id": "CODEC-207",
            "hexsha": "28910eec203524b002f0dfeb8a391b88f835a7c0",
            "fix_hash": "edb4ce323e9aad278d707be09fe1ef24fdba630d",
            "description": "Some Javadocs in {{Charsets}} use a period instead of a hash to separate class and field in {{@link}} references.\n\nSpecifically:\n\n{noformat}\n[INFO] ------------------------------------------------------------------------\n[INFO] BUILD FAILURE\n[INFO] ------------------------------------------------------------------------\n[INFO] Total time: 40.598 s\n[INFO] Finished at: 2016-05-13T13:33:29-07:00\n[INFO] Final Memory: 67M/658M\n[INFO] ------------------------------------------------------------------------\n[ERROR] Failed to execute goal org.apache.maven.plugins:maven-site-plugin:3.4:site (default-site) on project commons-codec: Error generating maven-javadoc-plugin:2.10.3:javadoc:\n[ERROR] Exit code: 1 - E:\\vcs\\svn\\apache\\commons\\trunks-proper\\codec\\src\\main\\java\\org\\apache\\commons\\codec\\Charsets.java:96: error: reference not found\n[ERROR] * @deprecated Use Java 7's {@link java.nio.charset.StandardCharsets.ISO_8859_1} instead\n[ERROR] ^\n[ERROR] E:\\vcs\\svn\\apache\\commons\\trunks-proper\\codec\\src\\main\\java\\org\\apache\\commons\\codec\\Charsets.java:107: error: reference not found\n[ERROR] * @deprecated Use Java 7's {@link java.nio.charset.StandardCharsets.US_ASCII} instead\n[ERROR] ^\n[ERROR] E:\\vcs\\svn\\apache\\commons\\trunks-proper\\codec\\src\\main\\java\\org\\apache\\commons\\codec\\Charsets.java:119: error: reference not found\n[ERROR] * @deprecated Use Java 7's {@link java.nio.charset.StandardCharsets.UTF_16} instead\n[ERROR] ^\n[ERROR] E:\\vcs\\svn\\apache\\commons\\trunks-proper\\codec\\src\\main\\java\\org\\apache\\commons\\codec\\Charsets.java:130: error: reference not found\n[ERROR] * @deprecated Use Java 7's {@link java.nio.charset.StandardCharsets.UTF_16BE} instead\n[ERROR] ^\n[ERROR] E:\\vcs\\svn\\apache\\commons\\trunks-proper\\codec\\src\\main\\java\\org\\apache\\commons\\codec\\Charsets.java:141: error: reference not found\n[ERROR] * @deprecated Use Java 7's {@link java.nio.charset.StandardCharsets.UTF_16LE} instead\n[ERROR] ^\n[ERROR] E:\\vcs\\svn\\apache\\commons\\trunks-proper\\codec\\src\\main\\java\\org\\apache\\commons\\codec\\Charsets.java:152: error: reference not found\n[ERROR] * @deprecated Use Java 7's {@link java.nio.charset.StandardCharsets.UTF_8}\n[ERROR] ^\n[ERROR]\n[ERROR] Command line was: \"C:\\Program Files\\Java\\jdk1.8.0_91\\jre\\..\\bin\\javadoc.exe\" @options @packages\n[ERROR]\n[ERROR] Refer to the generated Javadoc files in 'E:\\vcs\\svn\\apache\\commons\\trunks-proper\\codec\\target\\site\\apidocs' dir.\n[ERROR] -> [Help 1]\n[ERROR]\n[ERROR] To see the full stack trace of the errors, re-run Maven with the -e switch.\n[ERROR] Re-run Maven using the -X switch to enable full debug logging.\n[ERROR]\n[ERROR] For more information about the errors and possible solutions, please read the following articles:\n[ERROR] [Help 1] http://cwiki.apache.org/confluence/display/MAVEN/MojoExecutionException\n{noformat}",
            "commit number version hash": 1060,
            "commit number": 910,
            "function that changed": [],
            "files that changed": [
                "src/main/java/org/apache/commons/codec/Charsets.java"
            ]
        },
        {
            "bug index": "58",
            "bug id": "CODEC-16",
            "hexsha": "71e7260746a902d1070a190fd78bd560464860b9",
            "fix_hash": "158d178c58e892ba87d782ecf436d30c038d464e",
            "description": "Added two new methods for encoding to Strings in\nBase64.  Forgot to add the dual methods for decoding...\nlater...",
            "commit number version hash": 173,
            "commit number": 898,
            "function that changed": [],
            "files that changed": [
                "src/main/java/org/apache/commons/codec/binary/Base64.java"
            ]
        },
        {
            "bug index": "59",
            "bug id": "CODEC-200",
            "hexsha": "28910eec203524b002f0dfeb8a391b88f835a7c0",
            "fix_hash": "c82fe35c48bd0082c16644d16d82d1be79d6b9d1",
            "description": "At line 99:\n\n            25, 26, 27, 28, 29, 30, 31, 32,                                 // 50-57 O-V\n\nthe value 32 should not be included. That disallows to use 'W' as padding with hex table.",
            "commit number version hash": 1060,
            "commit number": 895,
            "function that changed": [
                {
                    "function name": "testCodec200",
                    "function params": [],
                    "file name": "Base32Test.java",
                    "file old path": "src/test/java/org/apache/commons/codec/binary/Base32Test.java",
                    "file new path": "src/test/java/org/apache/commons/codec/binary/Base32Test.java",
                    "full name": "src.test.java.org.apache.commons.codec.binary.Base32Test.testCodec200"
                }
            ],
            "files that changed": [
                "src/main/java/org/apache/commons/codec/binary/Base32.java",
                "src/test/java/org/apache/commons/codec/binary/Base32Test.java"
            ]
        },
        {
            "bug index": "60",
            "bug id": "CODEC-199",
            "hexsha": "28910eec203524b002f0dfeb8a391b88f835a7c0",
            "fix_hash": "9c881675d214b95fcf861b69b4204bcd7932f66b",
            "description": "The Soundex algorithm says that if two characters that map to the same code are separated by H or W, the second one is not encoded.\nHowever, in the implementation (in Soundex.getMappingCode() line 191), a character that is preceded by two characters that are either H or W, is not encoded, regardless of what the last consonant was.\nSource: http://en.wikipedia.org/wiki/Soundex#American_Soundex\n",
            "commit number version hash": 1060,
            "commit number": 893,
            "function that changed": [
                {
                    "function name": "soundex",
                    "function params": [
                        "str"
                    ],
                    "file name": "Soundex.java",
                    "file old path": "src/main/java/org/apache/commons/codec/language/Soundex.java",
                    "file new path": "src/main/java/org/apache/commons/codec/language/Soundex.java",
                    "full name": "src.main.java.org.apache.commons.codec.language.Soundex.soundex"
                }
            ],
            "files that changed": [
                "src/main/java/org/apache/commons/codec/language/Soundex.java"
            ]
        },
        {
            "bug index": "61",
            "bug id": "CODEC-199",
            "hexsha": "28910eec203524b002f0dfeb8a391b88f835a7c0",
            "fix_hash": "28b7b958d39730fc278fd1919bf335c52133a1a2",
            "description": "The Soundex algorithm says that if two characters that map to the same code are separated by H or W, the second one is not encoded.\nHowever, in the implementation (in Soundex.getMappingCode() line 191), a character that is preceded by two characters that are either H or W, is not encoded, regardless of what the last consonant was.\nSource: http://en.wikipedia.org/wiki/Soundex#American_Soundex\n",
            "commit number version hash": 1060,
            "commit number": 892,
            "function that changed": [
                {
                    "function name": "getMappingCode",
                    "function params": [
                        "str",
                        "index"
                    ],
                    "file name": "Soundex.java",
                    "file old path": "src/main/java/org/apache/commons/codec/language/Soundex.java",
                    "file new path": "src/main/java/org/apache/commons/codec/language/Soundex.java",
                    "full name": "src.main.java.org.apache.commons.codec.language.Soundex.getMappingCode"
                },
                {
                    "function name": "testHWRuleEx1",
                    "function params": [],
                    "file name": "SoundexTest.java",
                    "file old path": "src/test/java/org/apache/commons/codec/language/SoundexTest.java",
                    "file new path": "src/test/java/org/apache/commons/codec/language/SoundexTest.java",
                    "full name": "src.test.java.org.apache.commons.codec.language.SoundexTest.testHWRuleEx1"
                },
                {
                    "function name": "testWikipediaAmericanSoundex",
                    "function params": [],
                    "file name": "SoundexTest.java",
                    "file old path": "src/test/java/org/apache/commons/codec/language/SoundexTest.java",
                    "file new path": "src/test/java/org/apache/commons/codec/language/SoundexTest.java",
                    "full name": "src.test.java.org.apache.commons.codec.language.SoundexTest.testWikipediaAmericanSoundex"
                }
            ],
            "files that changed": [
                "src/main/java/org/apache/commons/codec/language/Soundex.java",
                "src/test/java/org/apache/commons/codec/language/SoundexTest.java"
            ]
        },
        {
            "bug index": "62",
            "bug id": "CODEC-183",
            "hexsha": "28910eec203524b002f0dfeb8a391b88f835a7c0",
            "fix_hash": "b515228199914ea1767d707bf861b3e8efbaa41e",
            "description": "The only way to add the EOF marker when encoding or decoding with the BaseNCodecOutputStream is via the close() function.  The flush() function does not perform this logic, and it is questionable whether or not it should.\n\nThe problem is that I want to write to a Base64OutputStream in the middle of writing to another stream.  That is, I will write some content to a stream, then wrap that stream with a Base64OutputStream to write some more (encoded) content, and then finish writing directly to the original stream (and so not encoded).  Calling flush() on the Base64OutputStream will not write the EOF marker, which means bytes can be lost.  I do not want to call close() on the Base64OutputStream as that will propagate to my original stream, which I need to leave open.\n\nIdeas for resolving this include the following:\n* Adding a separate function for writing the final (EOF) bytes without an explicit close (hacky solution).\n* Changing the visibility of various functions and members so that I can write my own descendant that provides the functionality I want.  Note that the encode() and decode() functions on BaseNCodec used in the close() routine are package-private, and so I cannot call them within a descendant.",
            "commit number version hash": 1060,
            "commit number": 889,
            "function that changed": [],
            "files that changed": [
                "src/main/java/org/apache/commons/codec/binary/BaseNCodecOutputStream.java"
            ]
        },
        {
            "bug index": "63",
            "bug id": "CODEC-183",
            "hexsha": "28910eec203524b002f0dfeb8a391b88f835a7c0",
            "fix_hash": "fb09a1d1244fe0331a05418f5ccd32b62f2200e7",
            "description": "The only way to add the EOF marker when encoding or decoding with the BaseNCodecOutputStream is via the close() function.  The flush() function does not perform this logic, and it is questionable whether or not it should.\n\nThe problem is that I want to write to a Base64OutputStream in the middle of writing to another stream.  That is, I will write some content to a stream, then wrap that stream with a Base64OutputStream to write some more (encoded) content, and then finish writing directly to the original stream (and so not encoded).  Calling flush() on the Base64OutputStream will not write the EOF marker, which means bytes can be lost.  I do not want to call close() on the Base64OutputStream as that will propagate to my original stream, which I need to leave open.\n\nIdeas for resolving this include the following:\n* Adding a separate function for writing the final (EOF) bytes without an explicit close (hacky solution).\n* Changing the visibility of various functions and members so that I can write my own descendant that provides the functionality I want.  Note that the encode() and decode() functions on BaseNCodec used in the close() routine are package-private, and so I cannot call them within a descendant.",
            "commit number version hash": 1060,
            "commit number": 888,
            "function that changed": [
                {
                    "function name": "close",
                    "function params": [],
                    "file name": "BaseNCodecOutputStream.java",
                    "file old path": "src/main/java/org/apache/commons/codec/binary/BaseNCodecOutputStream.java",
                    "file new path": "src/main/java/org/apache/commons/codec/binary/BaseNCodecOutputStream.java",
                    "full name": "src.main.java.org.apache.commons.codec.binary.BaseNCodecOutputStream.close"
                },
                {
                    "function name": "eof",
                    "function params": [],
                    "file name": "BaseNCodecOutputStream.java",
                    "file old path": "src/main/java/org/apache/commons/codec/binary/BaseNCodecOutputStream.java",
                    "file new path": "src/main/java/org/apache/commons/codec/binary/BaseNCodecOutputStream.java",
                    "full name": "src.main.java.org.apache.commons.codec.binary.BaseNCodecOutputStream.eof"
                }
            ],
            "files that changed": [
                "src/main/java/org/apache/commons/codec/binary/BaseNCodecOutputStream.java"
            ]
        },
        {
            "bug index": "64",
            "bug id": "CODEC-2",
            "hexsha": "71e7260746a902d1070a190fd78bd560464860b9",
            "fix_hash": "1596d05f667f0eaee70f3c8478fcaf67eed55002",
            "description": "The net subpackage does not have adequate JavaDoc.  A package.html needs to be\ncreated which acts as a usage guide for the codec in that package.",
            "commit number version hash": 173,
            "commit number": 886,
            "function that changed": [],
            "files that changed": [
                "src/main/java/org/apache/commons/codec/digest/MessageDigestAlgorithms.java"
            ]
        },
        {
            "bug index": "65",
            "bug id": "CODEC-121",
            "hexsha": "0929762d9dc10ccc62c7a227f69cd831e2bfb1b8",
            "fix_hash": "bdc77f1b289f349e09051b482d7b4efbc6cd9f6f",
            "description": "Writing a unit test I discovered that the example Wikipedia uses for quoted-printable data does not decode but instead throws an exception.  \nTheir example is here:  http://en.wikipedia.org/wiki/Quoted-printable#Example\n\ntest:\n\n  String qpdata   = \"If you believe that truth=3Dbeauty, then surely=20=\\r\\n\" +\n\t\t    \"mathematics is the most beautiful branch of philosophy.\";\n\n  String expected = \"If you believe that truth=beauty, then surely \" +\n\t\t    \"mathematics is the most beautiful branch of philosophy.\";\n\n  assertEquals( expected,  new QuotedPrintableCodec().decode(qpdata) );\n\nI suppose I could fix if you like but currently I'm not a registered developer.  \n\n\n",
            "commit number version hash": 871,
            "commit number": 869,
            "function that changed": [
                {
                    "function name": "isWhitespace",
                    "function params": [
                        "b"
                    ],
                    "file name": "QuotedPrintableCodec.java",
                    "file old path": "src/main/java/org/apache/commons/codec/net/QuotedPrintableCodec.java",
                    "file new path": "src/main/java/org/apache/commons/codec/net/QuotedPrintableCodec.java",
                    "full name": "src.main.java.org.apache.commons.codec.net.QuotedPrintableCodec.isWhitespace"
                },
                {
                    "function name": "QuotedPrintableCodec",
                    "function params": [
                        "charset",
                        "strict"
                    ],
                    "file name": "QuotedPrintableCodec.java",
                    "file old path": "src/main/java/org/apache/commons/codec/net/QuotedPrintableCodec.java",
                    "file new path": "src/main/java/org/apache/commons/codec/net/QuotedPrintableCodec.java",
                    "full name": "src.main.java.org.apache.commons.codec.net.QuotedPrintableCodec.QuotedPrintableCodec"
                },
                {
                    "function name": "QuotedPrintableCodec",
                    "function params": [
                        "charsetName"
                    ],
                    "file name": "QuotedPrintableCodec.java",
                    "file old path": "src/main/java/org/apache/commons/codec/net/QuotedPrintableCodec.java",
                    "file new path": "src/main/java/org/apache/commons/codec/net/QuotedPrintableCodec.java",
                    "full name": "src.main.java.org.apache.commons.codec.net.QuotedPrintableCodec.QuotedPrintableCodec"
                },
                {
                    "function name": "QuotedPrintableCodec",
                    "function params": [
                        "strict"
                    ],
                    "file name": "QuotedPrintableCodec.java",
                    "file old path": "src/main/java/org/apache/commons/codec/net/QuotedPrintableCodec.java",
                    "file new path": "src/main/java/org/apache/commons/codec/net/QuotedPrintableCodec.java",
                    "full name": "src.main.java.org.apache.commons.codec.net.QuotedPrintableCodec.QuotedPrintableCodec"
                },
                {
                    "function name": "QuotedPrintableCodec",
                    "function params": [],
                    "file name": "QuotedPrintableCodec.java",
                    "file old path": "src/main/java/org/apache/commons/codec/net/QuotedPrintableCodec.java",
                    "file new path": "src/main/java/org/apache/commons/codec/net/QuotedPrintableCodec.java",
                    "full name": "src.main.java.org.apache.commons.codec.net.QuotedPrintableCodec.QuotedPrintableCodec"
                },
                {
                    "function name": "decodeQuotedPrintable",
                    "function params": [
                        "bytes"
                    ],
                    "file name": "QuotedPrintableCodec.java",
                    "file old path": "src/main/java/org/apache/commons/codec/net/QuotedPrintableCodec.java",
                    "file new path": "src/main/java/org/apache/commons/codec/net/QuotedPrintableCodec.java",
                    "full name": "src.main.java.org.apache.commons.codec.net.QuotedPrintableCodec.decodeQuotedPrintable"
                },
                {
                    "function name": "getUnsignedOctet",
                    "function params": [
                        "index",
                        "bytes"
                    ],
                    "file name": "QuotedPrintableCodec.java",
                    "file old path": "src/main/java/org/apache/commons/codec/net/QuotedPrintableCodec.java",
                    "file new path": "src/main/java/org/apache/commons/codec/net/QuotedPrintableCodec.java",
                    "full name": "src.main.java.org.apache.commons.codec.net.QuotedPrintableCodec.getUnsignedOctet"
                },
                {
                    "function name": "QuotedPrintableCodec",
                    "function params": [
                        "charset"
                    ],
                    "file name": "QuotedPrintableCodec.java",
                    "file old path": "src/main/java/org/apache/commons/codec/net/QuotedPrintableCodec.java",
                    "file new path": "src/main/java/org/apache/commons/codec/net/QuotedPrintableCodec.java",
                    "full name": "src.main.java.org.apache.commons.codec.net.QuotedPrintableCodec.QuotedPrintableCodec"
                },
                {
                    "function name": "encodeQuotedPrintable",
                    "function params": [
                        "printable",
                        "bytes",
                        "strict"
                    ],
                    "file name": "QuotedPrintableCodec.java",
                    "file old path": "src/main/java/org/apache/commons/codec/net/QuotedPrintableCodec.java",
                    "file new path": "src/main/java/org/apache/commons/codec/net/QuotedPrintableCodec.java",
                    "full name": "src.main.java.org.apache.commons.codec.net.QuotedPrintableCodec.encodeQuotedPrintable"
                },
                {
                    "function name": "encodeQuotedPrintable",
                    "function params": [
                        "printable",
                        "bytes"
                    ],
                    "file name": "QuotedPrintableCodec.java",
                    "file old path": "src/main/java/org/apache/commons/codec/net/QuotedPrintableCodec.java",
                    "file new path": "src/main/java/org/apache/commons/codec/net/QuotedPrintableCodec.java",
                    "full name": "src.main.java.org.apache.commons.codec.net.QuotedPrintableCodec.encodeQuotedPrintable"
                },
                {
                    "function name": "encodeByte",
                    "function params": [
                        "b",
                        "encode",
                        "buffer"
                    ],
                    "file name": "QuotedPrintableCodec.java",
                    "file old path": "src/main/java/org/apache/commons/codec/net/QuotedPrintableCodec.java",
                    "file new path": "src/main/java/org/apache/commons/codec/net/QuotedPrintableCodec.java",
                    "full name": "src.main.java.org.apache.commons.codec.net.QuotedPrintableCodec.encodeByte"
                },
                {
                    "function name": "encodeQuotedPrintable",
                    "function params": [
                        "b",
                        "buffer"
                    ],
                    "file name": "QuotedPrintableCodec.java",
                    "file old path": "src/main/java/org/apache/commons/codec/net/QuotedPrintableCodec.java",
                    "file new path": "src/main/java/org/apache/commons/codec/net/QuotedPrintableCodec.java",
                    "full name": "src.main.java.org.apache.commons.codec.net.QuotedPrintableCodec.encodeQuotedPrintable"
                },
                {
                    "function name": "encode",
                    "function params": [
                        "bytes"
                    ],
                    "file name": "QuotedPrintableCodec.java",
                    "file old path": "src/main/java/org/apache/commons/codec/net/QuotedPrintableCodec.java",
                    "file new path": "src/main/java/org/apache/commons/codec/net/QuotedPrintableCodec.java",
                    "full name": "src.main.java.org.apache.commons.codec.net.QuotedPrintableCodec.encode"
                },
                {
                    "function name": "testSoftLineBreakEncode",
                    "function params": [],
                    "file name": "QuotedPrintableCodecTest.java",
                    "file old path": "src/test/java/org/apache/commons/codec/net/QuotedPrintableCodecTest.java",
                    "file new path": "src/test/java/org/apache/commons/codec/net/QuotedPrintableCodecTest.java",
                    "full name": "src.test.java.org.apache.commons.codec.net.QuotedPrintableCodecTest.testSoftLineBreakEncode"
                },
                {
                    "function name": "testSoftLineBreakDecode",
                    "function params": [],
                    "file name": "QuotedPrintableCodecTest.java",
                    "file old path": "src/test/java/org/apache/commons/codec/net/QuotedPrintableCodecTest.java",
                    "file new path": "src/test/java/org/apache/commons/codec/net/QuotedPrintableCodecTest.java",
                    "full name": "src.test.java.org.apache.commons.codec.net.QuotedPrintableCodecTest.testSoftLineBreakDecode"
                },
                {
                    "function name": "testSkipNotEncodedCRLF",
                    "function params": [],
                    "file name": "QuotedPrintableCodecTest.java",
                    "file old path": "src/test/java/org/apache/commons/codec/net/QuotedPrintableCodecTest.java",
                    "file new path": "src/test/java/org/apache/commons/codec/net/QuotedPrintableCodecTest.java",
                    "full name": "src.test.java.org.apache.commons.codec.net.QuotedPrintableCodecTest.testSkipNotEncodedCRLF"
                },
                {
                    "function name": "testTrailingSpecial",
                    "function params": [],
                    "file name": "QuotedPrintableCodecTest.java",
                    "file old path": "src/test/java/org/apache/commons/codec/net/QuotedPrintableCodecTest.java",
                    "file new path": "src/test/java/org/apache/commons/codec/net/QuotedPrintableCodecTest.java",
                    "full name": "src.test.java.org.apache.commons.codec.net.QuotedPrintableCodecTest.testTrailingSpecial"
                },
                {
                    "function name": "testUltimateSoftBreak",
                    "function params": [],
                    "file name": "QuotedPrintableCodecTest.java",
                    "file old path": "src/test/java/org/apache/commons/codec/net/QuotedPrintableCodecTest.java",
                    "file new path": "src/test/java/org/apache/commons/codec/net/QuotedPrintableCodecTest.java",
                    "full name": "src.test.java.org.apache.commons.codec.net.QuotedPrintableCodecTest.testUltimateSoftBreak"
                },
                {
                    "function name": "testFinalBytes",
                    "function params": [],
                    "file name": "QuotedPrintableCodecTest.java",
                    "file old path": "src/test/java/org/apache/commons/codec/net/QuotedPrintableCodecTest.java",
                    "file new path": "src/test/java/org/apache/commons/codec/net/QuotedPrintableCodecTest.java",
                    "full name": "src.test.java.org.apache.commons.codec.net.QuotedPrintableCodecTest.testFinalBytes"
                }
            ],
            "files that changed": [
                "src/main/java/org/apache/commons/codec/net/QuotedPrintableCodec.java",
                "src/test/java/org/apache/commons/codec/net/QuotedPrintableCodecTest.java"
            ]
        },
        {
            "bug index": "66",
            "bug id": "CODEC-187",
            "hexsha": "0929762d9dc10ccc62c7a227f69cd831e2bfb1b8",
            "fix_hash": "0110214af6a802b2c7abc4f7151eab7595036478",
            "description": "I believe the Beider Morse Phonetic Matching algorithm was added in Commons Codec 1.6\n\nThe BMPM algorithm is an EVOLVING algorithm that is currently on version 3.02 though it had been static since version 3.01 dated 19 Dec 2011 (it was first available as opensource as version 1.00 on 6 May 2009).\n\nI can see nothing in the Commons Codec Docs to say which version of BMPM was implemented so I am not sure if the problem with the algorithm as coded in the Codec is simply an old version or whether there are more basic problems with the implementation.\n\nHow do I determine the version of the algorithm that was implemented in the Commons Codec?\n\nHow do we ensure that the algorithm is updated if/when the BMPM algorithm changes?\n\nHow do we ensure that the algorithm as coded in the Commons Codec is accurate and working as expected?",
            "commit number version hash": 871,
            "commit number": 868,
            "function that changed": [
                {
                    "function name": "data",
                    "function params": [],
                    "file name": "PhoneticEngineTest.java",
                    "file old path": "src/test/java/org/apache/commons/codec/language/bm/PhoneticEngineTest.java",
                    "file new path": "src/test/java/org/apache/commons/codec/language/bm/PhoneticEngineTest.java",
                    "full name": "src.test.java.org.apache.commons.codec.language.bm.PhoneticEngineTest.data"
                }
            ],
            "files that changed": [
                "src/main/java/org/apache/commons/codec/language/bm/BeiderMorseEncoder.java",
                "src/test/java/org/apache/commons/codec/language/bm/PhoneticEngineTest.java"
            ]
        },
        {
            "bug index": "67",
            "bug id": "CODEC-185",
            "hexsha": "0929762d9dc10ccc62c7a227f69cd831e2bfb1b8",
            "fix_hash": "2cb32b82b22da4e36cd12778ba98637843bbcf06",
            "description": "Base64 has static methods specific to doing URLSafe encoding, but has no corresponding URLSafe decoding method.\n\nThis is be cause the decoding table transparently handles both URLSafe and standard alphabets. Unfortunately this is only documented as a javadoc on a private member.\n\nThere should be a mention of it\n\n* In the class javadocs\n* on the static decode methods\n* on the static URLSafe encode methods",
            "commit number version hash": 871,
            "commit number": 861,
            "function that changed": [],
            "files that changed": [
                "src/main/java/org/apache/commons/codec/binary/Base64.java"
            ]
        },
        {
            "bug index": "68",
            "bug id": "CODEC-191",
            "hexsha": "0929762d9dc10ccc62c7a227f69cd831e2bfb1b8",
            "fix_hash": "d2d757416ed62f48afc65e570c08f7c08315a98f",
            "description": "In case Base64OutputStream is used for encoding byte array produced from some strings, an incomplete result (that is inconsistent with both other Base64 implementations and Base64InputStream implementation) is produced. It appears that \"s\" character is getting omitted if it's in the end of the string to be encoded; there may be other cases as well.\n\nHere is the test that allows to reproduce the problem: http://kiberion.net/kibertoad/temp/codec-base64-error.zip",
            "commit number version hash": 871,
            "commit number": 860,
            "function that changed": [],
            "files that changed": [
                "src/main/java/org/apache/commons/codec/binary/Base32OutputStream.java",
                "src/main/java/org/apache/commons/codec/binary/Base64OutputStream.java"
            ]
        },
        {
            "bug index": "69",
            "bug id": "CODEC-187",
            "hexsha": "0929762d9dc10ccc62c7a227f69cd831e2bfb1b8",
            "fix_hash": "39d5df29fb768fd257f9d328b99f00bc69ec864a",
            "description": "I believe the Beider Morse Phonetic Matching algorithm was added in Commons Codec 1.6\n\nThe BMPM algorithm is an EVOLVING algorithm that is currently on version 3.02 though it had been static since version 3.01 dated 19 Dec 2011 (it was first available as opensource as version 1.00 on 6 May 2009).\n\nI can see nothing in the Commons Codec Docs to say which version of BMPM was implemented so I am not sure if the problem with the algorithm as coded in the Codec is simply an old version or whether there are more basic problems with the implementation.\n\nHow do I determine the version of the algorithm that was implemented in the Commons Codec?\n\nHow do we ensure that the algorithm is updated if/when the BMPM algorithm changes?\n\nHow do we ensure that the algorithm as coded in the Commons Codec is accurate and working as expected?",
            "commit number version hash": 871,
            "commit number": 830,
            "function that changed": [
                {
                    "function name": "for",
                    "function params": [
                        "s"
                    ],
                    "file name": "Lang.java",
                    "file old path": "src/main/java/org/apache/commons/codec/language/bm/Lang.java",
                    "file new path": "src/main/java/org/apache/commons/codec/language/bm/Lang.java",
                    "full name": "src.main.java.org.apache.commons.codec.language.bm.Lang.for"
                },
                {
                    "function name": "LanguageSet",
                    "function params": [],
                    "file name": "Languages.java",
                    "file old path": "src/main/java/org/apache/commons/codec/language/bm/Languages.java",
                    "file new path": "src/main/java/org/apache/commons/codec/language/bm/Languages.java",
                    "full name": "src.main.java.org.apache.commons.codec.language.bm.Languages.LanguageSet"
                },
                {
                    "function name": "SomeLanguages",
                    "function params": [
                        "other"
                    ],
                    "file name": "Languages.java",
                    "file old path": "src/main/java/org/apache/commons/codec/language/bm/Languages.java",
                    "file new path": "src/main/java/org/apache/commons/codec/language/bm/Languages.java",
                    "full name": "src.main.java.org.apache.commons.codec.language.bm.Languages.SomeLanguages"
                },
                {
                    "function name": "applyFinalRules",
                    "function params": [
                        "phonemeBuilder",
                        "finalRules"
                    ],
                    "file name": "PhoneticEngine.java",
                    "file old path": "src/main/java/org/apache/commons/codec/language/bm/PhoneticEngine.java",
                    "file new path": "src/main/java/org/apache/commons/codec/language/bm/PhoneticEngine.java",
                    "full name": "src.main.java.org.apache.commons.codec.language.bm.PhoneticEngine.applyFinalRules"
                },
                {
                    "function name": "Phoneme",
                    "function params": [],
                    "file name": "Rule.java",
                    "file old path": "src/main/java/org/apache/commons/codec/language/bm/Rule.java",
                    "file new path": "src/main/java/org/apache/commons/codec/language/bm/Rule.java",
                    "full name": "src.main.java.org.apache.commons.codec.language.bm.Rule.Phoneme"
                },
                {
                    "function name": "Phoneme",
                    "function params": [
                        "lang"
                    ],
                    "file name": "Rule.java",
                    "file old path": "src/main/java/org/apache/commons/codec/language/bm/Rule.java",
                    "file new path": "src/main/java/org/apache/commons/codec/language/bm/Rule.java",
                    "full name": "src.main.java.org.apache.commons.codec.language.bm.Rule.Phoneme"
                },
                {
                    "function name": "parseRules",
                    "function params": [
                        "scanner",
                        "location"
                    ],
                    "file name": "Rule.java",
                    "file old path": "src/main/java/org/apache/commons/codec/language/bm/Rule.java",
                    "file new path": "src/main/java/org/apache/commons/codec/language/bm/Rule.java",
                    "full name": "src.main.java.org.apache.commons.codec.language.bm.Rule.parseRules"
                },
                {
                    "function name": "testCompatibilityWithOriginalVersion",
                    "function params": [],
                    "file name": "PhoneticEngineRegressionTest.java",
                    "file old path": "src/test/java/org/apache/commons/codec/language/bm/PhoneticEngineRegressionTest.java",
                    "file new path": "src/test/java/org/apache/commons/codec/language/bm/PhoneticEngineRegressionTest.java",
                    "full name": "src.test.java.org.apache.commons.codec.language.bm.PhoneticEngineRegressionTest.testCompatibilityWithOriginalVersion"
                },
                {
                    "function name": "data",
                    "function params": [],
                    "file name": "PhoneticEngineTest.java",
                    "file old path": "src/test/java/org/apache/commons/codec/language/bm/PhoneticEngineTest.java",
                    "file new path": "src/test/java/org/apache/commons/codec/language/bm/PhoneticEngineTest.java",
                    "full name": "src.test.java.org.apache.commons.codec.language.bm.PhoneticEngineTest.data"
                }
            ],
            "files that changed": [
                "src/main/java/org/apache/commons/codec/language/bm/BeiderMorseEncoder.java",
                "src/main/java/org/apache/commons/codec/language/bm/Lang.java",
                "src/main/java/org/apache/commons/codec/language/bm/Languages.java",
                "src/main/java/org/apache/commons/codec/language/bm/PhoneticEngine.java",
                "src/main/java/org/apache/commons/codec/language/bm/Rule.java",
                "src/test/java/org/apache/commons/codec/language/bm/PhoneticEngineRegressionTest.java",
                "src/test/java/org/apache/commons/codec/language/bm/PhoneticEngineTest.java"
            ]
        },
        {
            "bug index": "70",
            "bug id": "CODEC-187",
            "hexsha": "0929762d9dc10ccc62c7a227f69cd831e2bfb1b8",
            "fix_hash": "711c2e1aff80dc3205e7a3608a2ac391894d6711",
            "description": "I believe the Beider Morse Phonetic Matching algorithm was added in Commons Codec 1.6\n\nThe BMPM algorithm is an EVOLVING algorithm that is currently on version 3.02 though it had been static since version 3.01 dated 19 Dec 2011 (it was first available as opensource as version 1.00 on 6 May 2009).\n\nI can see nothing in the Commons Codec Docs to say which version of BMPM was implemented so I am not sure if the problem with the algorithm as coded in the Codec is simply an old version or whether there are more basic problems with the implementation.\n\nHow do I determine the version of the algorithm that was implemented in the Commons Codec?\n\nHow do we ensure that the algorithm is updated if/when the BMPM algorithm changes?\n\nHow do we ensure that the algorithm as coded in the Commons Codec is accurate and working as expected?",
            "commit number version hash": 871,
            "commit number": 829,
            "function that changed": [
                {
                    "function name": "testSolrASHKENAZI",
                    "function params": [],
                    "file name": "PhoneticEngineRegressionTest.java",
                    "file old path": "src/test/java/org/apache/commons/codec/language/bm/PhoneticEngineRegressionTest.java",
                    "file new path": "src/test/java/org/apache/commons/codec/language/bm/PhoneticEngineRegressionTest.java",
                    "full name": "src.test.java.org.apache.commons.codec.language.bm.PhoneticEngineRegressionTest.testSolrASHKENAZI"
                },
                {
                    "function name": "testCompatibilityWithOriginalVersion",
                    "function params": [],
                    "file name": "PhoneticEngineRegressionTest.java",
                    "file old path": "src/test/java/org/apache/commons/codec/language/bm/PhoneticEngineRegressionTest.java",
                    "file new path": "src/test/java/org/apache/commons/codec/language/bm/PhoneticEngineRegressionTest.java",
                    "full name": "src.test.java.org.apache.commons.codec.language.bm.PhoneticEngineRegressionTest.testCompatibilityWithOriginalVersion"
                }
            ],
            "files that changed": [
                "src/test/java/org/apache/commons/codec/language/bm/PhoneticEngineRegressionTest.java"
            ]
        },
        {
            "bug index": "71",
            "bug id": "CODEC-187",
            "hexsha": "0929762d9dc10ccc62c7a227f69cd831e2bfb1b8",
            "fix_hash": "1189e1b201e0234b54df551804098df18bd9f445",
            "description": "I believe the Beider Morse Phonetic Matching algorithm was added in Commons Codec 1.6\n\nThe BMPM algorithm is an EVOLVING algorithm that is currently on version 3.02 though it had been static since version 3.01 dated 19 Dec 2011 (it was first available as opensource as version 1.00 on 6 May 2009).\n\nI can see nothing in the Commons Codec Docs to say which version of BMPM was implemented so I am not sure if the problem with the algorithm as coded in the Codec is simply an old version or whether there are more basic problems with the implementation.\n\nHow do I determine the version of the algorithm that was implemented in the Commons Codec?\n\nHow do we ensure that the algorithm is updated if/when the BMPM algorithm changes?\n\nHow do we ensure that the algorithm as coded in the Commons Codec is accurate and working as expected?",
            "commit number version hash": 871,
            "commit number": 828,
            "function that changed": [
                {
                    "function name": "testCompatibilityWithOriginalVersion",
                    "function params": [],
                    "file name": "PhoneticEngineRegressionTest.java",
                    "file old path": "src/test/java/org/apache/commons/codec/language/bm/PhoneticEngineRegressionTest.java",
                    "file new path": "src/test/java/org/apache/commons/codec/language/bm/PhoneticEngineRegressionTest.java",
                    "full name": "src.test.java.org.apache.commons.codec.language.bm.PhoneticEngineRegressionTest.testCompatibilityWithOriginalVersion"
                }
            ],
            "files that changed": [
                "src/test/java/org/apache/commons/codec/language/bm/PhoneticEngineRegressionTest.java"
            ]
        },
        {
            "bug index": "72",
            "bug id": "CODEC-187",
            "hexsha": "0929762d9dc10ccc62c7a227f69cd831e2bfb1b8",
            "fix_hash": "570431c8502a6705e749b62ebf5519930946a776",
            "description": "I believe the Beider Morse Phonetic Matching algorithm was added in Commons Codec 1.6\n\nThe BMPM algorithm is an EVOLVING algorithm that is currently on version 3.02 though it had been static since version 3.01 dated 19 Dec 2011 (it was first available as opensource as version 1.00 on 6 May 2009).\n\nI can see nothing in the Commons Codec Docs to say which version of BMPM was implemented so I am not sure if the problem with the algorithm as coded in the Codec is simply an old version or whether there are more basic problems with the implementation.\n\nHow do I determine the version of the algorithm that was implemented in the Commons Codec?\n\nHow do we ensure that the algorithm is updated if/when the BMPM algorithm changes?\n\nHow do we ensure that the algorithm as coded in the Commons Codec is accurate and working as expected?",
            "commit number version hash": 871,
            "commit number": 827,
            "function that changed": [
                {
                    "function name": "testCompatibilityWithOriginalVersion",
                    "function params": [],
                    "file name": "PhoneticEngineRegressionTest.java",
                    "file old path": "src/test/java/org/apache/commons/codec/language/bm/PhoneticEngineRegressionTest.java",
                    "file new path": "src/test/java/org/apache/commons/codec/language/bm/PhoneticEngineRegressionTest.java",
                    "full name": "src.test.java.org.apache.commons.codec.language.bm.PhoneticEngineRegressionTest.testCompatibilityWithOriginalVersion"
                }
            ],
            "files that changed": [
                "src/test/java/org/apache/commons/codec/language/bm/PhoneticEngineRegressionTest.java"
            ]
        },
        {
            "bug index": "73",
            "bug id": "CODEC-187",
            "hexsha": "0929762d9dc10ccc62c7a227f69cd831e2bfb1b8",
            "fix_hash": "5dd9e60cb226c571e13832023489e8bc366ce69c",
            "description": "I believe the Beider Morse Phonetic Matching algorithm was added in Commons Codec 1.6\n\nThe BMPM algorithm is an EVOLVING algorithm that is currently on version 3.02 though it had been static since version 3.01 dated 19 Dec 2011 (it was first available as opensource as version 1.00 on 6 May 2009).\n\nI can see nothing in the Commons Codec Docs to say which version of BMPM was implemented so I am not sure if the problem with the algorithm as coded in the Codec is simply an old version or whether there are more basic problems with the implementation.\n\nHow do I determine the version of the algorithm that was implemented in the Commons Codec?\n\nHow do we ensure that the algorithm is updated if/when the BMPM algorithm changes?\n\nHow do we ensure that the algorithm as coded in the Commons Codec is accurate and working as expected?",
            "commit number version hash": 871,
            "commit number": 826,
            "function that changed": [
                {
                    "function name": "testCompatibilityWithOriginalVersion",
                    "function params": [],
                    "file name": "PhoneticEngineRegressionTest.java",
                    "file old path": "src/test/java/org/apache/commons/codec/language/bm/PhoneticEngineRegressionTest.java",
                    "file new path": "src/test/java/org/apache/commons/codec/language/bm/PhoneticEngineRegressionTest.java",
                    "full name": "src.test.java.org.apache.commons.codec.language.bm.PhoneticEngineRegressionTest.testCompatibilityWithOriginalVersion"
                },
                {
                    "function name": "testSolrGENERIC",
                    "function params": [],
                    "file name": "PhoneticEngineRegressionTest.java",
                    "file old path": "src/test/java/org/apache/commons/codec/language/bm/PhoneticEngineRegressionTest.java",
                    "file new path": "src/test/java/org/apache/commons/codec/language/bm/PhoneticEngineRegressionTest.java",
                    "full name": "src.test.java.org.apache.commons.codec.language.bm.PhoneticEngineRegressionTest.testSolrGENERIC"
                }
            ],
            "files that changed": [
                "src/main/java/org/apache/commons/codec/language/bm/BeiderMorseEncoder.java",
                "src/test/java/org/apache/commons/codec/language/bm/PhoneticEngineRegressionTest.java"
            ]
        },
        {
            "bug index": "74",
            "bug id": "CODEC-184",
            "hexsha": "0929762d9dc10ccc62c7a227f69cd831e2bfb1b8",
            "fix_hash": "37ba197e62d6b60037d18afc33801e6221f1b8c6",
            "description": "{{isDoubleMetaphoneEqual}} does not work with empty strings: The following test throws a {{NullPointerException}}:\n\n{code:java}\n  public void test1() throws Throwable {\n    org.apache.commons.codec.language.DoubleMetaphone var0 = new org.apache.commons.codec.language.DoubleMetaphone();\n    boolean var3 = var0.isDoubleMetaphoneEqual(\"\", \"\", false);\n  }\n{code}",
            "commit number version hash": 871,
            "commit number": 824,
            "function that changed": [
                {
                    "function name": "regionMatches",
                    "function params": [
                        "cs",
                        "ignoreCase",
                        "thisStart",
                        "substring",
                        "start",
                        "length"
                    ],
                    "file name": "CharSequenceUtils.java",
                    "file old path": null,
                    "file new path": "src/main/java/org/apache/commons/codec/binary/CharSequenceUtils.java",
                    "full name": "src.main.java.org.apache.commons.codec.binary.CharSequenceUtils.regionMatches"
                },
                {
                    "function name": "equals",
                    "function params": [
                        "cs1",
                        "cs2"
                    ],
                    "file name": "StringUtils.java",
                    "file old path": "src/main/java/org/apache/commons/codec/binary/StringUtils.java",
                    "file new path": "src/main/java/org/apache/commons/codec/binary/StringUtils.java",
                    "full name": "src.main.java.org.apache.commons.codec.binary.StringUtils.equals"
                },
                {
                    "function name": "isDoubleMetaphoneEqual",
                    "function params": [
                        "value1",
                        "value2",
                        "alternate"
                    ],
                    "file name": "DoubleMetaphone.java",
                    "file old path": "src/main/java/org/apache/commons/codec/language/DoubleMetaphone.java",
                    "file new path": "src/main/java/org/apache/commons/codec/language/DoubleMetaphone.java",
                    "full name": "src.main.java.org.apache.commons.codec.language.DoubleMetaphone.isDoubleMetaphoneEqual"
                },
                {
                    "function name": "testCodec184",
                    "function params": [],
                    "file name": "DoubleMetaphoneTest.java",
                    "file old path": "src/test/java/org/apache/commons/codec/language/DoubleMetaphoneTest.java",
                    "file new path": "src/test/java/org/apache/commons/codec/language/DoubleMetaphoneTest.java",
                    "full name": "src.test.java.org.apache.commons.codec.language.DoubleMetaphoneTest.testCodec184"
                },
                {
                    "function name": "testIsDoubleMetaphoneEqualBasic",
                    "function params": [],
                    "file name": "DoubleMetaphoneTest.java",
                    "file old path": "src/test/java/org/apache/commons/codec/language/DoubleMetaphoneTest.java",
                    "file new path": "src/test/java/org/apache/commons/codec/language/DoubleMetaphoneTest.java",
                    "full name": "src.test.java.org.apache.commons.codec.language.DoubleMetaphoneTest.testIsDoubleMetaphoneEqualBasic"
                }
            ],
            "files that changed": [
                "src/main/java/org/apache/commons/codec/binary/StringUtils.java",
                "src/main/java/org/apache/commons/codec/language/DoubleMetaphone.java",
                "src/test/java/org/apache/commons/codec/language/DoubleMetaphoneTest.java"
            ]
        },
        {
            "bug index": "75",
            "bug id": "CODEC-180",
            "hexsha": "0929762d9dc10ccc62c7a227f69cd831e2bfb1b8",
            "fix_hash": "cfd44eb99719bf045bf78b1e35dba231f98f5a45",
            "description": null,
            "commit number version hash": 871,
            "commit number": 815,
            "function that changed": [],
            "files that changed": [
                "src/main/java/org/apache/commons/codec/CharEncoding.java",
                "src/main/java/org/apache/commons/codec/Charsets.java",
                "src/main/java/org/apache/commons/codec/binary/Base32.java",
                "src/main/java/org/apache/commons/codec/binary/Base32InputStream.java",
                "src/main/java/org/apache/commons/codec/binary/Base32OutputStream.java",
                "src/main/java/org/apache/commons/codec/binary/Base64.java",
                "src/main/java/org/apache/commons/codec/binary/Base64InputStream.java",
                "src/main/java/org/apache/commons/codec/binary/Base64OutputStream.java",
                "src/main/java/org/apache/commons/codec/binary/BaseNCodec.java",
                "src/main/java/org/apache/commons/codec/digest/Crypt.java",
                "src/main/java/org/apache/commons/codec/digest/DigestUtils.java",
                "src/main/java/org/apache/commons/codec/digest/Md5Crypt.java",
                "src/main/java/org/apache/commons/codec/language/ColognePhonetic.java",
                "src/main/java/org/apache/commons/codec/language/MatchRatingApproachEncoder.java",
                "src/main/java/org/apache/commons/codec/language/Nysiis.java",
                "src/main/java/org/apache/commons/codec/net/URLCodec.java"
            ]
        },
        {
            "bug index": "76",
            "bug id": "CODEC-170",
            "hexsha": "03aa0776df745abd944666731e8859ec5ed487ba",
            "fix_hash": "7fb904ff9e0d5903fa91d967543aed54d97cfe36",
            "description": "\n\n---------- Forwarded message ----------\nFrom: Henri Yandell <flamefew@gmail.com>\nDate: Tue, Apr 30, 2013 at 3:33 AM\nSubject: Re: Bad link in the javadocs\nTo: Commons Developers List <dev@commons.apache.org>\n\n\nI'm not sure if metacpan is fine, but it has a working link for the package:\n\nhttps://metacpan.org/source/MSCHWERN/Text-Metaphone-1.96/\n\nHen\n\nOn Mon, Apr 29, 2013 at 3:42 AM, Gary Gregory <garydgregory@gmail.com>wrote:\n\n> Hi Ron,\n>\n> Thank you for the report. Can you create a JIRA for this please? Do\n> you have a fix perchance?\n>\n> Gary\n>\n> On Apr 29, 2013, at 1:53, Ron Wheeler <rwheeler@artifact-software.com>\n> wrote:\n>\n> >\n> http://commons.apache.org/proper/commons-codec/apidocs/org/apache/commons/codec/language/Metaphone.html\n> >\n> > \"Note, that this does not match the algorithm that ships with PHP, or\n> the algorithm found in the Perl Text:Metaphone-1.96 <\n> http://search.cpan.org/%7Emschwern/Text-Metaphone-1.96/Metaphone.pm>. \"\n> > references a missing page -\n> http://search.cpan.org/~mschwern/Text-Metaphone-1.96/Metaphone.pm\n> >\n> > Ron\n> >\n> > --\n> > Ron Wheeler\n> > President\n> > Artifact Software Inc\n> > email: rwheeler@artifact-software.com\n> > skype: ronaldmwheeler\n> > phone: 866-970-2435, ext 102\n> >\n>\n> ---------------------------------------------------------------------\n> To unsubscribe, e-mail: dev-unsubscribe@commons.apache.org\n> For additional commands, e-mail: dev-help@commons.apache.org\n>\n>\n\n\n\n-- \nE-Mail: garydgregory@gmail.com | ggregory@apache.org\nJava Persistence with Hibernate, Second Edition\nJUnit in Action, Second Edition\nSpring Batch in Action\nBlog: http://garygregory.wordpress.com\nHome: http://garygregory.com/\nTweet! http://twitter.com/GaryGregory\n",
            "commit number version hash": 770,
            "commit number": 774,
            "function that changed": [],
            "files that changed": [
                "src/main/java/org/apache/commons/codec/binary/Base32.java"
            ]
        },
        {
            "bug index": "77",
            "bug id": "CODEC-170",
            "hexsha": "03aa0776df745abd944666731e8859ec5ed487ba",
            "fix_hash": "9e7c59dfd25b087cc56e13e406ab1124b0d28829",
            "description": "\n\n---------- Forwarded message ----------\nFrom: Henri Yandell <flamefew@gmail.com>\nDate: Tue, Apr 30, 2013 at 3:33 AM\nSubject: Re: Bad link in the javadocs\nTo: Commons Developers List <dev@commons.apache.org>\n\n\nI'm not sure if metacpan is fine, but it has a working link for the package:\n\nhttps://metacpan.org/source/MSCHWERN/Text-Metaphone-1.96/\n\nHen\n\nOn Mon, Apr 29, 2013 at 3:42 AM, Gary Gregory <garydgregory@gmail.com>wrote:\n\n> Hi Ron,\n>\n> Thank you for the report. Can you create a JIRA for this please? Do\n> you have a fix perchance?\n>\n> Gary\n>\n> On Apr 29, 2013, at 1:53, Ron Wheeler <rwheeler@artifact-software.com>\n> wrote:\n>\n> >\n> http://commons.apache.org/proper/commons-codec/apidocs/org/apache/commons/codec/language/Metaphone.html\n> >\n> > \"Note, that this does not match the algorithm that ships with PHP, or\n> the algorithm found in the Perl Text:Metaphone-1.96 <\n> http://search.cpan.org/%7Emschwern/Text-Metaphone-1.96/Metaphone.pm>. \"\n> > references a missing page -\n> http://search.cpan.org/~mschwern/Text-Metaphone-1.96/Metaphone.pm\n> >\n> > Ron\n> >\n> > --\n> > Ron Wheeler\n> > President\n> > Artifact Software Inc\n> > email: rwheeler@artifact-software.com\n> > skype: ronaldmwheeler\n> > phone: 866-970-2435, ext 102\n> >\n>\n> ---------------------------------------------------------------------\n> To unsubscribe, e-mail: dev-unsubscribe@commons.apache.org\n> For additional commands, e-mail: dev-help@commons.apache.org\n>\n>\n\n\n\n-- \nE-Mail: garydgregory@gmail.com | ggregory@apache.org\nJava Persistence with Hibernate, Second Edition\nJUnit in Action, Second Edition\nSpring Batch in Action\nBlog: http://garygregory.wordpress.com\nHome: http://garygregory.com/\nTweet! http://twitter.com/GaryGregory\n",
            "commit number version hash": 770,
            "commit number": 771,
            "function that changed": [],
            "files that changed": [
                "src/main/java/org/apache/commons/codec/language/Metaphone.java"
            ]
        },
        {
            "bug index": "78",
            "bug id": "CODEC-160",
            "hexsha": "03aa0776df745abd944666731e8859ec5ed487ba",
            "fix_hash": "bedf8732cf2d09f4d5fd1360e2f23e7891af48aa",
            "description": "If the url safe method is used the padding characters are missing, resulting in a too short string as output.",
            "commit number version hash": 770,
            "commit number": 732,
            "function that changed": [],
            "files that changed": [
                "src/main/java/org/apache/commons/codec/binary/Base64.java"
            ]
        },
        {
            "bug index": "79",
            "bug id": "CODEC-1",
            "hexsha": "71e7260746a902d1070a190fd78bd560464860b9",
            "fix_hash": "04955ba87e328cd639d7248bf8d72b413613679c",
            "description": "URLCodec causes an IndexOutOfBoundsException in BitSet when encoding non-ASCII\ncharacters.",
            "commit number version hash": 173,
            "commit number": 727,
            "function that changed": [
                {
                    "function name": "testNewStringUtf16Be",
                    "function params": [],
                    "file name": "StringUtilsTest.java",
                    "file old path": "src/test/java/org/apache/commons/codec/binary/StringUtilsTest.java",
                    "file new path": "src/test/java/org/apache/commons/codec/binary/StringUtilsTest.java",
                    "full name": "src.test.java.org.apache.commons.codec.binary.StringUtilsTest.testNewStringUtf16Be"
                },
                {
                    "function name": "testNewStringUtf16Le",
                    "function params": [],
                    "file name": "StringUtilsTest.java",
                    "file old path": "src/test/java/org/apache/commons/codec/binary/StringUtilsTest.java",
                    "file new path": "src/test/java/org/apache/commons/codec/binary/StringUtilsTest.java",
                    "full name": "src.test.java.org.apache.commons.codec.binary.StringUtilsTest.testNewStringUtf16Le"
                }
            ],
            "files that changed": [
                "src/test/java/org/apache/commons/codec/binary/StringUtilsTest.java"
            ]
        },
        {
            "bug index": "80",
            "bug id": "CODEC-1",
            "hexsha": "71e7260746a902d1070a190fd78bd560464860b9",
            "fix_hash": "914185bab8af0db467219526b7f04f9c8934bae0",
            "description": "URLCodec causes an IndexOutOfBoundsException in BitSet when encoding non-ASCII\ncharacters.",
            "commit number version hash": 173,
            "commit number": 715,
            "function that changed": [
                {
                    "function name": "sha",
                    "function params": [
                        "data"
                    ],
                    "file name": "DigestUtils.java",
                    "file old path": "src/main/java/org/apache/commons/codec/digest/DigestUtils.java",
                    "file new path": "src/main/java/org/apache/commons/codec/digest/DigestUtils.java",
                    "full name": "src.main.java.org.apache.commons.codec.digest.DigestUtils.sha"
                },
                {
                    "function name": "shaHex",
                    "function params": [
                        "data"
                    ],
                    "file name": "DigestUtils.java",
                    "file old path": "src/main/java/org/apache/commons/codec/digest/DigestUtils.java",
                    "file new path": "src/main/java/org/apache/commons/codec/digest/DigestUtils.java",
                    "full name": "src.main.java.org.apache.commons.codec.digest.DigestUtils.shaHex"
                },
                {
                    "function name": "getShaDigest",
                    "function params": [],
                    "file name": "DigestUtils.java",
                    "file old path": "src/main/java/org/apache/commons/codec/digest/DigestUtils.java",
                    "file new path": "src/main/java/org/apache/commons/codec/digest/DigestUtils.java",
                    "full name": "src.main.java.org.apache.commons.codec.digest.DigestUtils.getShaDigest"
                },
                {
                    "function name": "sha",
                    "function params": [
                        "data"
                    ],
                    "file name": "DigestUtils.java",
                    "file old path": "src/main/java/org/apache/commons/codec/digest/DigestUtils.java",
                    "file new path": "src/main/java/org/apache/commons/codec/digest/DigestUtils.java",
                    "full name": "src.main.java.org.apache.commons.codec.digest.DigestUtils.sha"
                },
                {
                    "function name": "shaHex",
                    "function params": [
                        "data"
                    ],
                    "file name": "DigestUtils.java",
                    "file old path": "src/main/java/org/apache/commons/codec/digest/DigestUtils.java",
                    "file new path": "src/main/java/org/apache/commons/codec/digest/DigestUtils.java",
                    "full name": "src.main.java.org.apache.commons.codec.digest.DigestUtils.shaHex"
                },
                {
                    "function name": "sha",
                    "function params": [
                        "data"
                    ],
                    "file name": "DigestUtils.java",
                    "file old path": "src/main/java/org/apache/commons/codec/digest/DigestUtils.java",
                    "file new path": "src/main/java/org/apache/commons/codec/digest/DigestUtils.java",
                    "full name": "src.main.java.org.apache.commons.codec.digest.DigestUtils.sha"
                },
                {
                    "function name": "shaHex",
                    "function params": [
                        "data"
                    ],
                    "file name": "DigestUtils.java",
                    "file old path": "src/main/java/org/apache/commons/codec/digest/DigestUtils.java",
                    "file new path": "src/main/java/org/apache/commons/codec/digest/DigestUtils.java",
                    "full name": "src.main.java.org.apache.commons.codec.digest.DigestUtils.shaHex"
                }
            ],
            "files that changed": [
                "src/main/java/org/apache/commons/codec/digest/DigestUtils.java"
            ]
        },
        {
            "bug index": "81",
            "bug id": "CODEC-1",
            "hexsha": "71e7260746a902d1070a190fd78bd560464860b9",
            "fix_hash": "b8e9258ae55a83f35f90f6a333dd167dee014675",
            "description": "URLCodec causes an IndexOutOfBoundsException in BitSet when encoding non-ASCII\ncharacters.",
            "commit number version hash": 173,
            "commit number": 714,
            "function that changed": [],
            "files that changed": [
                "src/main/java/org/apache/commons/codec/digest/DigestUtils.java"
            ]
        },
        {
            "bug index": "82",
            "bug id": "CODEC-1",
            "hexsha": "71e7260746a902d1070a190fd78bd560464860b9",
            "fix_hash": "81a9aa634ad54c424c958595e73151395fe34ab7",
            "description": "URLCodec causes an IndexOutOfBoundsException in BitSet when encoding non-ASCII\ncharacters.",
            "commit number version hash": 173,
            "commit number": 713,
            "function that changed": [],
            "files that changed": [
                "src/main/java/org/apache/commons/codec/digest/DigestUtils.java"
            ]
        },
        {
            "bug index": "83",
            "bug id": "CODEC-1",
            "hexsha": "71e7260746a902d1070a190fd78bd560464860b9",
            "fix_hash": "5d758fa487d0eeea19fec8209a72dd2744207e3b",
            "description": "URLCodec causes an IndexOutOfBoundsException in BitSet when encoding non-ASCII\ncharacters.",
            "commit number version hash": 173,
            "commit number": 706,
            "function that changed": [],
            "files that changed": [
                "src/main/java/org/apache/commons/codec/digest/DigestUtils.java"
            ]
        },
        {
            "bug index": "84",
            "bug id": "CODEC-156",
            "hexsha": "55a0c64a1d75cab8930bcaad6fee3d62c10ac916",
            "fix_hash": "1f5240e5f0a7c18e93dc68ee53c4a4ff9b6dfd69",
            "description": "DigestUtils already has SHA APIs but they use the \"SHA\" algorithm name which is not on the standard name list here: http://docs.oracle.com/javase/6/docs/technotes/guides/security/StandardNames.html. \n\nSHA-1 is on the list though, so use that for SHA-1 APIs.",
            "commit number version hash": 728,
            "commit number": 704,
            "function that changed": [
                {
                    "function name": "testSha1Hex",
                    "function params": [],
                    "file name": "DigestUtilsTest.java",
                    "file old path": "src/test/java/org/apache/commons/codec/digest/DigestUtilsTest.java",
                    "file new path": "src/test/java/org/apache/commons/codec/digest/DigestUtilsTest.java",
                    "full name": "src.test.java.org.apache.commons.codec.digest.DigestUtilsTest.testSha1Hex"
                }
            ],
            "files that changed": [
                "src/test/java/org/apache/commons/codec/digest/DigestUtilsTest.java"
            ]
        },
        {
            "bug index": "85",
            "bug id": "CODEC-155",
            "hexsha": "55a0c64a1d75cab8930bcaad6fee3d62c10ac916",
            "fix_hash": "5912d28fa0116ed7a284b6f550630a0ac054e33a",
            "description": "DigestUtils.getDigest(String) should throw IllegalArgumentException instead of RuntimeException",
            "commit number version hash": 728,
            "commit number": 702,
            "function that changed": [
                {
                    "function name": "testInternalNoSuchAlgorithmException",
                    "function params": [],
                    "file name": "DigestUtilsTest.java",
                    "file old path": "src/test/java/org/apache/commons/codec/digest/DigestUtilsTest.java",
                    "file new path": "src/test/java/org/apache/commons/codec/digest/DigestUtilsTest.java",
                    "full name": "src.test.java.org.apache.commons.codec.digest.DigestUtilsTest.testInternalNoSuchAlgorithmException"
                }
            ],
            "files that changed": [
                "src/test/java/org/apache/commons/codec/digest/DigestUtilsTest.java"
            ]
        },
        {
            "bug index": "86",
            "bug id": "CODEC-156",
            "hexsha": "55a0c64a1d75cab8930bcaad6fee3d62c10ac916",
            "fix_hash": "c45a7d3ac48e5e10551b9c98a73b6cd8e1a06958",
            "description": "DigestUtils already has SHA APIs but they use the \"SHA\" algorithm name which is not on the standard name list here: http://docs.oracle.com/javase/6/docs/technotes/guides/security/StandardNames.html. \n\nSHA-1 is on the list though, so use that for SHA-1 APIs.",
            "commit number version hash": 728,
            "commit number": 700,
            "function that changed": [
                {
                    "function name": "sha1Hex",
                    "function params": [
                        "data"
                    ],
                    "file name": "DigestUtils.java",
                    "file old path": "src/main/java/org/apache/commons/codec/digest/DigestUtils.java",
                    "file new path": "src/main/java/org/apache/commons/codec/digest/DigestUtils.java",
                    "full name": "src.main.java.org.apache.commons.codec.digest.DigestUtils.sha1Hex"
                },
                {
                    "function name": "sha1Hex",
                    "function params": [
                        "data"
                    ],
                    "file name": "DigestUtils.java",
                    "file old path": "src/main/java/org/apache/commons/codec/digest/DigestUtils.java",
                    "file new path": "src/main/java/org/apache/commons/codec/digest/DigestUtils.java",
                    "full name": "src.main.java.org.apache.commons.codec.digest.DigestUtils.sha1Hex"
                },
                {
                    "function name": "sha1Hex",
                    "function params": [
                        "data"
                    ],
                    "file name": "DigestUtils.java",
                    "file old path": "src/main/java/org/apache/commons/codec/digest/DigestUtils.java",
                    "file new path": "src/main/java/org/apache/commons/codec/digest/DigestUtils.java",
                    "full name": "src.main.java.org.apache.commons.codec.digest.DigestUtils.sha1Hex"
                },
                {
                    "function name": "sha1",
                    "function params": [
                        "data"
                    ],
                    "file name": "DigestUtils.java",
                    "file old path": "src/main/java/org/apache/commons/codec/digest/DigestUtils.java",
                    "file new path": "src/main/java/org/apache/commons/codec/digest/DigestUtils.java",
                    "full name": "src.main.java.org.apache.commons.codec.digest.DigestUtils.sha1"
                },
                {
                    "function name": "testSha1Hex",
                    "function params": [],
                    "file name": "DigestUtilsTest.java",
                    "file old path": "src/test/java/org/apache/commons/codec/digest/DigestUtilsTest.java",
                    "file new path": "src/test/java/org/apache/commons/codec/digest/DigestUtilsTest.java",
                    "full name": "src.test.java.org.apache.commons.codec.digest.DigestUtilsTest.testSha1Hex"
                }
            ],
            "files that changed": [
                "src/main/java/org/apache/commons/codec/digest/DigestUtils.java",
                "src/test/java/org/apache/commons/codec/digest/DigestUtilsTest.java"
            ]
        },
        {
            "bug index": "87",
            "bug id": "CODEC-157",
            "hexsha": "55a0c64a1d75cab8930bcaad6fee3d62c10ac916",
            "fix_hash": "fdb6743af113595cde1a722305ca571f27d03d41",
            "description": "Add MD2 support. It is a standard algorithm per http://docs.oracle.com/javase/6/docs/technotes/guides/security/StandardNames.html",
            "commit number version hash": 728,
            "commit number": 698,
            "function that changed": [
                {
                    "function name": "md2Hex",
                    "function params": [
                        "data"
                    ],
                    "file name": "DigestUtils.java",
                    "file old path": "src/main/java/org/apache/commons/codec/digest/DigestUtils.java",
                    "file new path": "src/main/java/org/apache/commons/codec/digest/DigestUtils.java",
                    "full name": "src.main.java.org.apache.commons.codec.digest.DigestUtils.md2Hex"
                },
                {
                    "function name": "md2",
                    "function params": [
                        "data"
                    ],
                    "file name": "DigestUtils.java",
                    "file old path": "src/main/java/org/apache/commons/codec/digest/DigestUtils.java",
                    "file new path": "src/main/java/org/apache/commons/codec/digest/DigestUtils.java",
                    "full name": "src.main.java.org.apache.commons.codec.digest.DigestUtils.md2"
                },
                {
                    "function name": "getMd2Digest",
                    "function params": [],
                    "file name": "DigestUtils.java",
                    "file old path": "src/main/java/org/apache/commons/codec/digest/DigestUtils.java",
                    "file new path": "src/main/java/org/apache/commons/codec/digest/DigestUtils.java",
                    "full name": "src.main.java.org.apache.commons.codec.digest.DigestUtils.getMd2Digest"
                },
                {
                    "function name": "md2Hex",
                    "function params": [
                        "data"
                    ],
                    "file name": "DigestUtils.java",
                    "file old path": "src/main/java/org/apache/commons/codec/digest/DigestUtils.java",
                    "file new path": "src/main/java/org/apache/commons/codec/digest/DigestUtils.java",
                    "full name": "src.main.java.org.apache.commons.codec.digest.DigestUtils.md2Hex"
                },
                {
                    "function name": "sha1",
                    "function params": [
                        "data"
                    ],
                    "file name": "DigestUtils.java",
                    "file old path": "src/main/java/org/apache/commons/codec/digest/DigestUtils.java",
                    "file new path": "src/main/java/org/apache/commons/codec/digest/DigestUtils.java",
                    "full name": "src.main.java.org.apache.commons.codec.digest.DigestUtils.sha1"
                },
                {
                    "function name": "sha1",
                    "function params": [
                        "data"
                    ],
                    "file name": "DigestUtils.java",
                    "file old path": "src/main/java/org/apache/commons/codec/digest/DigestUtils.java",
                    "file new path": "src/main/java/org/apache/commons/codec/digest/DigestUtils.java",
                    "full name": "src.main.java.org.apache.commons.codec.digest.DigestUtils.sha1"
                },
                {
                    "function name": "sha",
                    "function params": [
                        "data"
                    ],
                    "file name": "DigestUtils.java",
                    "file old path": "src/main/java/org/apache/commons/codec/digest/DigestUtils.java",
                    "file new path": "src/main/java/org/apache/commons/codec/digest/DigestUtils.java",
                    "full name": "src.main.java.org.apache.commons.codec.digest.DigestUtils.sha"
                },
                {
                    "function name": "md2",
                    "function params": [
                        "data"
                    ],
                    "file name": "DigestUtils.java",
                    "file old path": "src/main/java/org/apache/commons/codec/digest/DigestUtils.java",
                    "file new path": "src/main/java/org/apache/commons/codec/digest/DigestUtils.java",
                    "full name": "src.main.java.org.apache.commons.codec.digest.DigestUtils.md2"
                },
                {
                    "function name": "md2",
                    "function params": [
                        "data"
                    ],
                    "file name": "DigestUtils.java",
                    "file old path": "src/main/java/org/apache/commons/codec/digest/DigestUtils.java",
                    "file new path": "src/main/java/org/apache/commons/codec/digest/DigestUtils.java",
                    "full name": "src.main.java.org.apache.commons.codec.digest.DigestUtils.md2"
                },
                {
                    "function name": "sha",
                    "function params": [
                        "data"
                    ],
                    "file name": "DigestUtils.java",
                    "file old path": "src/main/java/org/apache/commons/codec/digest/DigestUtils.java",
                    "file new path": "src/main/java/org/apache/commons/codec/digest/DigestUtils.java",
                    "full name": "src.main.java.org.apache.commons.codec.digest.DigestUtils.sha"
                },
                {
                    "function name": "md2Hex",
                    "function params": [
                        "data"
                    ],
                    "file name": "DigestUtils.java",
                    "file old path": "src/main/java/org/apache/commons/codec/digest/DigestUtils.java",
                    "file new path": "src/main/java/org/apache/commons/codec/digest/DigestUtils.java",
                    "full name": "src.main.java.org.apache.commons.codec.digest.DigestUtils.md2Hex"
                },
                {
                    "function name": "testMd2HexLength",
                    "function params": [],
                    "file name": "DigestUtilsTest.java",
                    "file old path": "src/test/java/org/apache/commons/codec/digest/DigestUtilsTest.java",
                    "file new path": "src/test/java/org/apache/commons/codec/digest/DigestUtilsTest.java",
                    "full name": "src.test.java.org.apache.commons.codec.digest.DigestUtilsTest.testMd2HexLength"
                },
                {
                    "function name": "testMd2Hex",
                    "function params": [],
                    "file name": "DigestUtilsTest.java",
                    "file old path": "src/test/java/org/apache/commons/codec/digest/DigestUtilsTest.java",
                    "file new path": "src/test/java/org/apache/commons/codec/digest/DigestUtilsTest.java",
                    "full name": "src.test.java.org.apache.commons.codec.digest.DigestUtilsTest.testMd2Hex"
                },
                {
                    "function name": "testMd2Length",
                    "function params": [],
                    "file name": "DigestUtilsTest.java",
                    "file old path": "src/test/java/org/apache/commons/codec/digest/DigestUtilsTest.java",
                    "file new path": "src/test/java/org/apache/commons/codec/digest/DigestUtilsTest.java",
                    "full name": "src.test.java.org.apache.commons.codec.digest.DigestUtilsTest.testMd2Length"
                }
            ],
            "files that changed": [
                "src/main/java/org/apache/commons/codec/digest/DigestUtils.java",
                "src/test/java/org/apache/commons/codec/digest/DigestUtilsTest.java"
            ]
        },
        {
            "bug index": "88",
            "bug id": "CODEC-156",
            "hexsha": "55a0c64a1d75cab8930bcaad6fee3d62c10ac916",
            "fix_hash": "531b5dcb45b80f1d72a305603e32105962b14ce7",
            "description": "DigestUtils already has SHA APIs but they use the \"SHA\" algorithm name which is not on the standard name list here: http://docs.oracle.com/javase/6/docs/technotes/guides/security/StandardNames.html. \n\nSHA-1 is on the list though, so use that for SHA-1 APIs.",
            "commit number version hash": 728,
            "commit number": 697,
            "function that changed": [
                {
                    "function name": "getSha1Digest",
                    "function params": [],
                    "file name": "DigestUtils.java",
                    "file old path": "src/main/java/org/apache/commons/codec/digest/DigestUtils.java",
                    "file new path": "src/main/java/org/apache/commons/codec/digest/DigestUtils.java",
                    "full name": "src.main.java.org.apache.commons.codec.digest.DigestUtils.getSha1Digest"
                },
                {
                    "function name": "updateDigest",
                    "function params": [
                        "messageDigest",
                        "valueToDigest"
                    ],
                    "file name": "DigestUtils.java",
                    "file old path": "src/main/java/org/apache/commons/codec/digest/DigestUtils.java",
                    "file new path": "src/main/java/org/apache/commons/codec/digest/DigestUtils.java",
                    "full name": "src.main.java.org.apache.commons.codec.digest.DigestUtils.updateDigest"
                },
                {
                    "function name": "updateDigest",
                    "function params": [
                        "messageDigest",
                        "valueToDigest"
                    ],
                    "file name": "DigestUtils.java",
                    "file old path": "src/main/java/org/apache/commons/codec/digest/DigestUtils.java",
                    "file new path": "src/main/java/org/apache/commons/codec/digest/DigestUtils.java",
                    "full name": "src.main.java.org.apache.commons.codec.digest.DigestUtils.updateDigest"
                },
                {
                    "function name": "sha1",
                    "function params": [
                        "data"
                    ],
                    "file name": "DigestUtils.java",
                    "file old path": "src/main/java/org/apache/commons/codec/digest/DigestUtils.java",
                    "file new path": "src/main/java/org/apache/commons/codec/digest/DigestUtils.java",
                    "full name": "src.main.java.org.apache.commons.codec.digest.DigestUtils.sha1"
                },
                {
                    "function name": "sha1",
                    "function params": [
                        "data"
                    ],
                    "file name": "DigestUtils.java",
                    "file old path": "src/main/java/org/apache/commons/codec/digest/DigestUtils.java",
                    "file new path": "src/main/java/org/apache/commons/codec/digest/DigestUtils.java",
                    "full name": "src.main.java.org.apache.commons.codec.digest.DigestUtils.sha1"
                },
                {
                    "function name": "testSha1UpdateWithString",
                    "function params": [],
                    "file name": "DigestUtilsTest.java",
                    "file old path": "src/test/java/org/apache/commons/codec/digest/DigestUtilsTest.java",
                    "file new path": "src/test/java/org/apache/commons/codec/digest/DigestUtilsTest.java",
                    "full name": "src.test.java.org.apache.commons.codec.digest.DigestUtilsTest.testSha1UpdateWithString"
                },
                {
                    "function name": "testSha1UpdateWithByteArray",
                    "function params": [],
                    "file name": "DigestUtilsTest.java",
                    "file old path": "src/test/java/org/apache/commons/codec/digest/DigestUtilsTest.java",
                    "file new path": "src/test/java/org/apache/commons/codec/digest/DigestUtilsTest.java",
                    "full name": "src.test.java.org.apache.commons.codec.digest.DigestUtilsTest.testSha1UpdateWithByteArray"
                },
                {
                    "function name": "testShaUpdateWithString",
                    "function params": [],
                    "file name": "DigestUtilsTest.java",
                    "file old path": "src/test/java/org/apache/commons/codec/digest/DigestUtilsTest.java",
                    "file new path": "src/test/java/org/apache/commons/codec/digest/DigestUtilsTest.java",
                    "full name": "src.test.java.org.apache.commons.codec.digest.DigestUtilsTest.testShaUpdateWithString"
                },
                {
                    "function name": "testShaUpdateWithByteArray",
                    "function params": [],
                    "file name": "DigestUtilsTest.java",
                    "file old path": "src/test/java/org/apache/commons/codec/digest/DigestUtilsTest.java",
                    "file new path": "src/test/java/org/apache/commons/codec/digest/DigestUtilsTest.java",
                    "full name": "src.test.java.org.apache.commons.codec.digest.DigestUtilsTest.testShaUpdateWithByteArray"
                }
            ],
            "files that changed": [
                "src/main/java/org/apache/commons/codec/digest/DigestUtils.java",
                "src/test/java/org/apache/commons/codec/digest/DigestUtilsTest.java"
            ]
        },
        {
            "bug index": "89",
            "bug id": "CODEC-155",
            "hexsha": "55a0c64a1d75cab8930bcaad6fee3d62c10ac916",
            "fix_hash": "f2e7938365b6256e6f1a323602aa63d5df346ab1",
            "description": "DigestUtils.getDigest(String) should throw IllegalArgumentException instead of RuntimeException",
            "commit number version hash": 728,
            "commit number": 693,
            "function that changed": [
                {
                    "function name": "getDigest",
                    "function params": [
                        "algorithm"
                    ],
                    "file name": "DigestUtils.java",
                    "file old path": "src/main/java/org/apache/commons/codec/digest/DigestUtils.java",
                    "file new path": "src/main/java/org/apache/commons/codec/digest/DigestUtils.java",
                    "full name": "src.main.java.org.apache.commons.codec.digest.DigestUtils.getDigest"
                }
            ],
            "files that changed": [
                "src/main/java/org/apache/commons/codec/digest/DigestUtils.java",
                "src/main/java/org/apache/commons/codec/digest/Sha2Crypt.java"
            ]
        },
        {
            "bug index": "90",
            "bug id": "CODEC-152",
            "hexsha": "55a0c64a1d75cab8930bcaad6fee3d62c10ac916",
            "fix_hash": "a5aba02f5ff8a1b53147488324bdb11c2dad561f",
            "description": "DigestUtils.getDigest(String) looses the orginal exception. It should pass the checked exception it catches into the constructor of the new unchecked exception.",
            "commit number version hash": 728,
            "commit number": 684,
            "function that changed": [
                {
                    "function name": "getDigest",
                    "function params": [
                        "algorithm"
                    ],
                    "file name": "DigestUtils.java",
                    "file old path": "src/main/java/org/apache/commons/codec/digest/DigestUtils.java",
                    "file new path": "src/main/java/org/apache/commons/codec/digest/DigestUtils.java",
                    "full name": "src.main.java.org.apache.commons.codec.digest.DigestUtils.getDigest"
                }
            ],
            "files that changed": [
                "src/main/java/org/apache/commons/codec/digest/DigestUtils.java"
            ]
        },
        {
            "bug index": "91",
            "bug id": "CODEC-1",
            "hexsha": "71e7260746a902d1070a190fd78bd560464860b9",
            "fix_hash": "3976e6d39ec139267175324f6ebbabb9b2ecb619",
            "description": "URLCodec causes an IndexOutOfBoundsException in BitSet when encoding non-ASCII\ncharacters.",
            "commit number version hash": 173,
            "commit number": 621,
            "function that changed": [],
            "files that changed": [
                "src/main/java/org/apache/commons/codec/binary/BaseNCodec.java",
                "src/main/java/org/apache/commons/codec/binary/BinaryCodec.java"
            ]
        },
        {
            "bug index": "92",
            "bug id": "CODEC-96",
            "hexsha": "55a0c64a1d75cab8930bcaad6fee3d62c10ac916",
            "fix_hash": "c683f14ef654ac62480d6f5bce9609106e09d5e2",
            "description": "Streaming support was added to Base64 in commons-codec 1.4 with CODEC-69. This introduced instance variables to Base64 which means the class can no longer be used as a shared BinaryEncoder instance.\n\nFor example, BinaryEncoder has an interface which could be (and was) used like this with Base64:\n\n{code:java}\nclass Example {\n    private BinaryEncoder encoder = new Base64();\n\n    byte[] someMethod(byte[] data) {\n        try {\n            return encoder.encode(data);\n        }\n        catch (EncoderException e) {\n            throw new RuntimeException(e);\n        }\n    } \n}\n{code}\n\nBase64 is no longer thread-safe in commons-codec 1.4, so code like the above which is accessed by multiple threads can throw NullPointerException:\n\n{noformat}\njava.lang.NullPointerException\n\tat org.apache.commons.codec.binary.Base64.encode(Base64.java:469)\n\tat org.apache.commons.codec.binary.Base64.encode(Base64.java:937)\n\tat ... (application code)\n{noformat}\n\nLooking at the implementation of Base64, I think making it thread-safe for this kind of usage would be quite tricky. I haven't attempted to prepare a patch.\n\nI would be happy if it was indicated in the Javadoc that Base64 is not thread-safe and should not be shared. However, some other users of commons-codec might be more worried about this regression.\n",
            "commit number version hash": 728,
            "commit number": 617,
            "function that changed": [],
            "files that changed": [
                "src/main/java/org/apache/commons/codec/binary/BaseNCodecInputStream.java",
                "src/main/java/org/apache/commons/codec/binary/BaseNCodecOutputStream.java"
            ]
        },
        {
            "bug index": "93",
            "bug id": "CODEC-96",
            "hexsha": "55a0c64a1d75cab8930bcaad6fee3d62c10ac916",
            "fix_hash": "3f41cf1609fae7c8848beb0655bcf67132c7a277",
            "description": "Streaming support was added to Base64 in commons-codec 1.4 with CODEC-69. This introduced instance variables to Base64 which means the class can no longer be used as a shared BinaryEncoder instance.\n\nFor example, BinaryEncoder has an interface which could be (and was) used like this with Base64:\n\n{code:java}\nclass Example {\n    private BinaryEncoder encoder = new Base64();\n\n    byte[] someMethod(byte[] data) {\n        try {\n            return encoder.encode(data);\n        }\n        catch (EncoderException e) {\n            throw new RuntimeException(e);\n        }\n    } \n}\n{code}\n\nBase64 is no longer thread-safe in commons-codec 1.4, so code like the above which is accessed by multiple threads can throw NullPointerException:\n\n{noformat}\njava.lang.NullPointerException\n\tat org.apache.commons.codec.binary.Base64.encode(Base64.java:469)\n\tat org.apache.commons.codec.binary.Base64.encode(Base64.java:937)\n\tat ... (application code)\n{noformat}\n\nLooking at the implementation of Base64, I think making it thread-safe for this kind of usage would be quite tricky. I haven't attempted to prepare a patch.\n\nI would be happy if it was indicated in the Javadoc that Base64 is not thread-safe and should not be shared. However, some other users of commons-codec might be more worried about this regression.\n",
            "commit number version hash": 728,
            "commit number": 615,
            "function that changed": [
                {
                    "function name": "encode",
                    "function params": [
                        "in",
                        "inPos",
                        "inAvail"
                    ],
                    "file name": "Base32.java",
                    "file old path": "src/main/java/org/apache/commons/codec/binary/Base32.java",
                    "file new path": "src/main/java/org/apache/commons/codec/binary/Base32.java",
                    "full name": "src.main.java.org.apache.commons.codec.binary.Base32.encode"
                },
                {
                    "function name": "encode",
                    "function params": [
                        "in",
                        "inPos",
                        "inAvail",
                        "context"
                    ],
                    "file name": "Base32.java",
                    "file old path": "src/main/java/org/apache/commons/codec/binary/Base32.java",
                    "file new path": "src/main/java/org/apache/commons/codec/binary/Base32.java",
                    "full name": "src.main.java.org.apache.commons.codec.binary.Base32.encode"
                },
                {
                    "function name": "decode",
                    "function params": [
                        "in",
                        "inPos",
                        "inAvail"
                    ],
                    "file name": "Base32.java",
                    "file old path": "src/main/java/org/apache/commons/codec/binary/Base32.java",
                    "file new path": "src/main/java/org/apache/commons/codec/binary/Base32.java",
                    "full name": "src.main.java.org.apache.commons.codec.binary.Base32.decode"
                },
                {
                    "function name": "decode",
                    "function params": [
                        "in",
                        "inPos",
                        "inAvail",
                        "context"
                    ],
                    "file name": "Base32.java",
                    "file old path": "src/main/java/org/apache/commons/codec/binary/Base32.java",
                    "file new path": "src/main/java/org/apache/commons/codec/binary/Base32.java",
                    "full name": "src.main.java.org.apache.commons.codec.binary.Base32.decode"
                },
                {
                    "function name": "encode",
                    "function params": [
                        "in",
                        "inPos",
                        "inAvail",
                        "context"
                    ],
                    "file name": "Base64.java",
                    "file old path": "src/main/java/org/apache/commons/codec/binary/Base64.java",
                    "file new path": "src/main/java/org/apache/commons/codec/binary/Base64.java",
                    "full name": "src.main.java.org.apache.commons.codec.binary.Base64.encode"
                },
                {
                    "function name": "decode",
                    "function params": [
                        "in",
                        "inPos",
                        "inAvail"
                    ],
                    "file name": "Base64.java",
                    "file old path": "src/main/java/org/apache/commons/codec/binary/Base64.java",
                    "file new path": "src/main/java/org/apache/commons/codec/binary/Base64.java",
                    "full name": "src.main.java.org.apache.commons.codec.binary.Base64.decode"
                },
                {
                    "function name": "encode",
                    "function params": [
                        "in",
                        "inPos",
                        "inAvail"
                    ],
                    "file name": "Base64.java",
                    "file old path": "src/main/java/org/apache/commons/codec/binary/Base64.java",
                    "file new path": "src/main/java/org/apache/commons/codec/binary/Base64.java",
                    "full name": "src.main.java.org.apache.commons.codec.binary.Base64.encode"
                },
                {
                    "function name": "decode",
                    "function params": [
                        "in",
                        "inPos",
                        "inAvail",
                        "context"
                    ],
                    "file name": "Base64.java",
                    "file old path": "src/main/java/org/apache/commons/codec/binary/Base64.java",
                    "file new path": "src/main/java/org/apache/commons/codec/binary/Base64.java",
                    "full name": "src.main.java.org.apache.commons.codec.binary.Base64.decode"
                },
                {
                    "function name": "resizeBuffer",
                    "function params": [],
                    "file name": "BaseNCodec.java",
                    "file old path": "src/main/java/org/apache/commons/codec/binary/BaseNCodec.java",
                    "file new path": "src/main/java/org/apache/commons/codec/binary/BaseNCodec.java",
                    "full name": "src.main.java.org.apache.commons.codec.binary.BaseNCodec.resizeBuffer"
                },
                {
                    "function name": "encode",
                    "function params": [
                        "pArray"
                    ],
                    "file name": "BaseNCodec.java",
                    "file old path": "src/main/java/org/apache/commons/codec/binary/BaseNCodec.java",
                    "file new path": "src/main/java/org/apache/commons/codec/binary/BaseNCodec.java",
                    "full name": "src.main.java.org.apache.commons.codec.binary.BaseNCodec.encode"
                },
                {
                    "function name": "readResults",
                    "function params": [
                        "b",
                        "bPos",
                        "bAvail"
                    ],
                    "file name": "BaseNCodec.java",
                    "file old path": "src/main/java/org/apache/commons/codec/binary/BaseNCodec.java",
                    "file new path": "src/main/java/org/apache/commons/codec/binary/BaseNCodec.java",
                    "full name": "src.main.java.org.apache.commons.codec.binary.BaseNCodec.readResults"
                },
                {
                    "function name": "resizeBuffer",
                    "function params": [
                        "context"
                    ],
                    "file name": "BaseNCodec.java",
                    "file old path": "src/main/java/org/apache/commons/codec/binary/BaseNCodec.java",
                    "file new path": "src/main/java/org/apache/commons/codec/binary/BaseNCodec.java",
                    "full name": "src.main.java.org.apache.commons.codec.binary.BaseNCodec.resizeBuffer"
                },
                {
                    "function name": "hasData",
                    "function params": [
                        "context"
                    ],
                    "file name": "BaseNCodec.java",
                    "file old path": "src/main/java/org/apache/commons/codec/binary/BaseNCodec.java",
                    "file new path": "src/main/java/org/apache/commons/codec/binary/BaseNCodec.java",
                    "full name": "src.main.java.org.apache.commons.codec.binary.BaseNCodec.hasData"
                },
                {
                    "function name": "ensureBufferSize",
                    "function params": [
                        "size"
                    ],
                    "file name": "BaseNCodec.java",
                    "file old path": "src/main/java/org/apache/commons/codec/binary/BaseNCodec.java",
                    "file new path": "src/main/java/org/apache/commons/codec/binary/BaseNCodec.java",
                    "full name": "src.main.java.org.apache.commons.codec.binary.BaseNCodec.ensureBufferSize"
                },
                {
                    "function name": "hasData",
                    "function params": [],
                    "file name": "BaseNCodec.java",
                    "file old path": "src/main/java/org/apache/commons/codec/binary/BaseNCodec.java",
                    "file new path": "src/main/java/org/apache/commons/codec/binary/BaseNCodec.java",
                    "full name": "src.main.java.org.apache.commons.codec.binary.BaseNCodec.hasData"
                },
                {
                    "function name": "decode",
                    "function params": [
                        "pArray"
                    ],
                    "file name": "BaseNCodec.java",
                    "file old path": "src/main/java/org/apache/commons/codec/binary/BaseNCodec.java",
                    "file new path": "src/main/java/org/apache/commons/codec/binary/BaseNCodec.java",
                    "full name": "src.main.java.org.apache.commons.codec.binary.BaseNCodec.decode"
                },
                {
                    "function name": "available",
                    "function params": [
                        "context"
                    ],
                    "file name": "BaseNCodec.java",
                    "file old path": "src/main/java/org/apache/commons/codec/binary/BaseNCodec.java",
                    "file new path": "src/main/java/org/apache/commons/codec/binary/BaseNCodec.java",
                    "full name": "src.main.java.org.apache.commons.codec.binary.BaseNCodec.available"
                },
                {
                    "function name": "ensureBufferSize",
                    "function params": [
                        "size",
                        "context"
                    ],
                    "file name": "BaseNCodec.java",
                    "file old path": "src/main/java/org/apache/commons/codec/binary/BaseNCodec.java",
                    "file new path": "src/main/java/org/apache/commons/codec/binary/BaseNCodec.java",
                    "full name": "src.main.java.org.apache.commons.codec.binary.BaseNCodec.ensureBufferSize"
                },
                {
                    "function name": "Context",
                    "function params": [],
                    "file name": "BaseNCodec.java",
                    "file old path": "src/main/java/org/apache/commons/codec/binary/BaseNCodec.java",
                    "file new path": "src/main/java/org/apache/commons/codec/binary/BaseNCodec.java",
                    "full name": "src.main.java.org.apache.commons.codec.binary.BaseNCodec.Context"
                },
                {
                    "function name": "readResults",
                    "function params": [
                        "b",
                        "bPos",
                        "bAvail",
                        "context"
                    ],
                    "file name": "BaseNCodec.java",
                    "file old path": "src/main/java/org/apache/commons/codec/binary/BaseNCodec.java",
                    "file new path": "src/main/java/org/apache/commons/codec/binary/BaseNCodec.java",
                    "full name": "src.main.java.org.apache.commons.codec.binary.BaseNCodec.readResults"
                },
                {
                    "function name": "available",
                    "function params": [],
                    "file name": "BaseNCodec.java",
                    "file old path": "src/main/java/org/apache/commons/codec/binary/BaseNCodec.java",
                    "file new path": "src/main/java/org/apache/commons/codec/binary/BaseNCodec.java",
                    "full name": "src.main.java.org.apache.commons.codec.binary.BaseNCodec.available"
                },
                {
                    "function name": "available",
                    "function params": [],
                    "file name": "BaseNCodecInputStream.java",
                    "file old path": "src/main/java/org/apache/commons/codec/binary/BaseNCodecInputStream.java",
                    "file new path": "src/main/java/org/apache/commons/codec/binary/BaseNCodecInputStream.java",
                    "full name": "src.main.java.org.apache.commons.codec.binary.BaseNCodecInputStream.available"
                },
                {
                    "function name": "read",
                    "function params": [
                        "offset",
                        "len"
                    ],
                    "file name": "BaseNCodecInputStream.java",
                    "file old path": "src/main/java/org/apache/commons/codec/binary/BaseNCodecInputStream.java",
                    "file new path": "src/main/java/org/apache/commons/codec/binary/BaseNCodecInputStream.java",
                    "full name": "src.main.java.org.apache.commons.codec.binary.BaseNCodecInputStream.read"
                },
                {
                    "function name": "close",
                    "function params": [],
                    "file name": "BaseNCodecOutputStream.java",
                    "file old path": "src/main/java/org/apache/commons/codec/binary/BaseNCodecOutputStream.java",
                    "file new path": "src/main/java/org/apache/commons/codec/binary/BaseNCodecOutputStream.java",
                    "full name": "src.main.java.org.apache.commons.codec.binary.BaseNCodecOutputStream.close"
                },
                {
                    "function name": "write",
                    "function params": [
                        "offset",
                        "len"
                    ],
                    "file name": "BaseNCodecOutputStream.java",
                    "file old path": "src/main/java/org/apache/commons/codec/binary/BaseNCodecOutputStream.java",
                    "file new path": "src/main/java/org/apache/commons/codec/binary/BaseNCodecOutputStream.java",
                    "full name": "src.main.java.org.apache.commons.codec.binary.BaseNCodecOutputStream.write"
                },
                {
                    "function name": "flush",
                    "function params": [
                        "propogate"
                    ],
                    "file name": "BaseNCodecOutputStream.java",
                    "file old path": "src/main/java/org/apache/commons/codec/binary/BaseNCodecOutputStream.java",
                    "file new path": "src/main/java/org/apache/commons/codec/binary/BaseNCodecOutputStream.java",
                    "full name": "src.main.java.org.apache.commons.codec.binary.BaseNCodecOutputStream.flush"
                },
                {
                    "function name": "testSingleCharEncoding",
                    "function params": [],
                    "file name": "Base32Test.java",
                    "file old path": "src/test/java/org/apache/commons/codec/binary/Base32Test.java",
                    "file new path": "src/test/java/org/apache/commons/codec/binary/Base32Test.java",
                    "full name": "src.test.java.org.apache.commons.codec.binary.Base32Test.testSingleCharEncoding"
                },
                {
                    "function name": "setUp",
                    "function params": [],
                    "file name": "BaseNCodecTest.java",
                    "file old path": "src/test/java/org/apache/commons/codec/binary/BaseNCodecTest.java",
                    "file new path": "src/test/java/org/apache/commons/codec/binary/BaseNCodecTest.java",
                    "full name": "src.test.java.org.apache.commons.codec.binary.BaseNCodecTest.setUp"
                }
            ],
            "files that changed": [
                "src/main/java/org/apache/commons/codec/binary/Base32.java",
                "src/main/java/org/apache/commons/codec/binary/Base64.java",
                "src/main/java/org/apache/commons/codec/binary/BaseNCodec.java",
                "src/main/java/org/apache/commons/codec/binary/BaseNCodecInputStream.java",
                "src/main/java/org/apache/commons/codec/binary/BaseNCodecOutputStream.java",
                "src/test/java/org/apache/commons/codec/binary/Base32Test.java",
                "src/test/java/org/apache/commons/codec/binary/BaseNCodecTest.java"
            ]
        },
        {
            "bug index": "94",
            "bug id": "CODEC-1",
            "hexsha": "71e7260746a902d1070a190fd78bd560464860b9",
            "fix_hash": "5819f2dbf638dd4befb1803e0e99dfe48a84f73d",
            "description": "URLCodec causes an IndexOutOfBoundsException in BitSet when encoding non-ASCII\ncharacters.",
            "commit number version hash": 173,
            "commit number": 607,
            "function that changed": [
                {
                    "function name": "cacheSubSequence",
                    "function params": [
                        "cached"
                    ],
                    "file name": "PhoneticEngine.java",
                    "file old path": "src/main/java/org/apache/commons/codec/language/bm/PhoneticEngine.java",
                    "file new path": "src/main/java/org/apache/commons/codec/language/bm/PhoneticEngine.java",
                    "full name": "src.main.java.org.apache.commons.codec.language.bm.PhoneticEngine.cacheSubSequence"
                },
                {
                    "function name": "Phoneme",
                    "function params": [],
                    "file name": "Rule.java",
                    "file old path": "src/main/java/org/apache/commons/codec/language/bm/Rule.java",
                    "file new path": "src/main/java/org/apache/commons/codec/language/bm/Rule.java",
                    "full name": "src.main.java.org.apache.commons.codec.language.bm.Rule.Phoneme"
                },
                {
                    "function name": "RPattern",
                    "function params": [],
                    "file name": "Rule.java",
                    "file old path": "src/main/java/org/apache/commons/codec/language/bm/Rule.java",
                    "file new path": "src/main/java/org/apache/commons/codec/language/bm/Rule.java",
                    "full name": "src.main.java.org.apache.commons.codec.language.bm.Rule.RPattern"
                },
                {
                    "function name": "pattern",
                    "function params": [
                        "regex"
                    ],
                    "file name": "Rule.java",
                    "file old path": "src/main/java/org/apache/commons/codec/language/bm/Rule.java",
                    "file new path": "src/main/java/org/apache/commons/codec/language/bm/Rule.java",
                    "full name": "src.main.java.org.apache.commons.codec.language.bm.Rule.pattern"
                }
            ],
            "files that changed": [
                "src/main/java/org/apache/commons/codec/StringEncoderComparator.java",
                "src/main/java/org/apache/commons/codec/binary/Hex.java",
                "src/main/java/org/apache/commons/codec/language/AbstractCaverphone.java",
                "src/main/java/org/apache/commons/codec/language/Caverphone.java",
                "src/main/java/org/apache/commons/codec/language/Caverphone1.java",
                "src/main/java/org/apache/commons/codec/language/Caverphone2.java",
                "src/main/java/org/apache/commons/codec/language/ColognePhonetic.java",
                "src/main/java/org/apache/commons/codec/language/DoubleMetaphone.java",
                "src/main/java/org/apache/commons/codec/language/Metaphone.java",
                "src/main/java/org/apache/commons/codec/language/Nysiis.java",
                "src/main/java/org/apache/commons/codec/language/RefinedSoundex.java",
                "src/main/java/org/apache/commons/codec/language/Soundex.java",
                "src/main/java/org/apache/commons/codec/language/bm/BeiderMorseEncoder.java",
                "src/main/java/org/apache/commons/codec/language/bm/PhoneticEngine.java",
                "src/main/java/org/apache/commons/codec/language/bm/Rule.java",
                "src/main/java/org/apache/commons/codec/net/BCodec.java",
                "src/main/java/org/apache/commons/codec/net/QCodec.java",
                "src/main/java/org/apache/commons/codec/net/QuotedPrintableCodec.java",
                "src/main/java/org/apache/commons/codec/net/URLCodec.java",
                "src/test/java/org/apache/commons/codec/language/bm/RuleTest.java"
            ]
        },
        {
            "bug index": "95",
            "bug id": "CODEC-5",
            "hexsha": "71e7260746a902d1070a190fd78bd560464860b9",
            "fix_hash": "9f7dffd9b9addc7999a01ba4378ea347bf6718f1",
            "description": "List:       jakarta-commons-dev\nSubject:    [codec] Proposal for improvement Hex codec\nFrom:       Tom van den Berge <tom.vandenberge () bibit ! com>\nDate:       2004-04-15 8:49:31\nMessage-ID: <407E4C9B.5070701 () bibit ! com>\n[Download message RAW]\n\nI'm using the Hex codec to decode e.g. the string \"qq\". What surprises \nme is that this obviously illegal hex value is decoded into one byte \nvalue 255. In fact all non-hex 'character-pairs' are decoded to value 255.\n\nWouldn't it be better to throw a DecoderException if illegal characters \nare passed in?\n\nThe current implementation decodes values that is is actually not able \nto decode, which is wrong.\n\nCheers,\nTom",
            "commit number version hash": 173,
            "commit number": 606,
            "function that changed": [
                {
                    "function name": "encodeAll",
                    "function params": [
                        "strings",
                        "expectedEncoding"
                    ],
                    "file name": "NysiisTest.java",
                    "file old path": "src/test/java/org/apache/commons/codec/language/NysiisTest.java",
                    "file new path": "src/test/java/org/apache/commons/codec/language/NysiisTest.java",
                    "full name": "src.test.java.org.apache.commons.codec.language.NysiisTest.encodeAll"
                }
            ],
            "files that changed": [
                "src/test/java/org/apache/commons/codec/language/NysiisTest.java"
            ]
        },
        {
            "bug index": "96",
            "bug id": "CODEC-5",
            "hexsha": "71e7260746a902d1070a190fd78bd560464860b9",
            "fix_hash": "d66b439c93f7d370d42b21b0d9b86446919880a8",
            "description": "List:       jakarta-commons-dev\nSubject:    [codec] Proposal for improvement Hex codec\nFrom:       Tom van den Berge <tom.vandenberge () bibit ! com>\nDate:       2004-04-15 8:49:31\nMessage-ID: <407E4C9B.5070701 () bibit ! com>\n[Download message RAW]\n\nI'm using the Hex codec to decode e.g. the string \"qq\". What surprises \nme is that this obviously illegal hex value is decoded into one byte \nvalue 255. In fact all non-hex 'character-pairs' are decoded to value 255.\n\nWouldn't it be better to throw a DecoderException if illegal characters \nare passed in?\n\nThe current implementation decodes values that is is actually not able \nto decode, which is wrong.\n\nCheers,\nTom",
            "commit number version hash": 173,
            "commit number": 595,
            "function that changed": [],
            "files that changed": [
                "src/main/java/org/apache/commons/codec/CharEncoding.java",
                "src/main/java/org/apache/commons/codec/binary/StringUtils.java",
                "src/main/java/org/apache/commons/codec/net/BCodec.java",
                "src/main/java/org/apache/commons/codec/net/QCodec.java",
                "src/main/java/org/apache/commons/codec/net/RFC1522Codec.java"
            ]
        },
        {
            "bug index": "97",
            "bug id": "CODEC-130",
            "hexsha": "55a0c64a1d75cab8930bcaad6fee3d62c10ac916",
            "fix_hash": "c4b947d96eb273089b6753534f673640efa77703",
            "description": "Base64InputStream.skip() skips within underlying stream, leading to unexpected behaviour.\n\nThe following code will reproduce the issue:\n\n@Test\npublic void testSkip() throws Throwable {\n    InputStream ins =\n            new ByteArrayInputStream(\"AAAA////\".getBytes(\"ISO-8859-1\"));//should decode to {0, 0, 0, 255, 255, 255}\n    Base64InputStream instance = new Base64InputStream(ins);\n    assertEquals(3L, instance.skip(3L)); //should skip 3 decoded characters, or 4 encoded characters\n    assertEquals(255, instance.read()); //Currently returns 3, as it is decoding \"A/\", not \"//\" \n}\n\nThe following code, if added to Base64InputStream, or (BaseNCodecInputStream in the dev build) would resolve the issue:\n\n@Override\npublic long skip(long n) throws IOException {\n    //delegate to read()\n    long bytesRead = 0;\n    while ((bytesRead < n) && (read() != -1)) {\n        bytesRead++;\n    }\n    return bytesRead;\n}\n\nMore efficient code may be possible.",
            "commit number version hash": 728,
            "commit number": 584,
            "function that changed": [
                {
                    "function name": "skip",
                    "function params": [
                        "n"
                    ],
                    "file name": "BaseNCodecInputStream.java",
                    "file old path": "src/main/java/org/apache/commons/codec/binary/BaseNCodecInputStream.java",
                    "file new path": "src/main/java/org/apache/commons/codec/binary/BaseNCodecInputStream.java",
                    "full name": "src.main.java.org.apache.commons.codec.binary.BaseNCodecInputStream.skip"
                }
            ],
            "files that changed": [
                "src/main/java/org/apache/commons/codec/binary/BaseNCodecInputStream.java"
            ]
        },
        {
            "bug index": "98",
            "bug id": "CODEC-121",
            "hexsha": "0929762d9dc10ccc62c7a227f69cd831e2bfb1b8",
            "fix_hash": "29220884e616c750cf8bed06ad939d1c366b8c94",
            "description": "Writing a unit test I discovered that the example Wikipedia uses for quoted-printable data does not decode but instead throws an exception.  \nTheir example is here:  http://en.wikipedia.org/wiki/Quoted-printable#Example\n\ntest:\n\n  String qpdata   = \"If you believe that truth=3Dbeauty, then surely=20=\\r\\n\" +\n\t\t    \"mathematics is the most beautiful branch of philosophy.\";\n\n  String expected = \"If you believe that truth=beauty, then surely \" +\n\t\t    \"mathematics is the most beautiful branch of philosophy.\";\n\n  assertEquals( expected,  new QuotedPrintableCodec().decode(qpdata) );\n\nI suppose I could fix if you like but currently I'm not a registered developer.  \n\n\n",
            "commit number version hash": 871,
            "commit number": 582,
            "function that changed": [
                {
                    "function name": "decodeQuotedPrintable",
                    "function params": [
                        "bytes"
                    ],
                    "file name": "QuotedPrintableCodec.java",
                    "file old path": "src/main/java/org/apache/commons/codec/net/QuotedPrintableCodec.java",
                    "file new path": "src/main/java/org/apache/commons/codec/net/QuotedPrintableCodec.java",
                    "full name": "src.main.java.org.apache.commons.codec.net.QuotedPrintableCodec.decodeQuotedPrintable"
                },
                {
                    "function name": "encodeQuotedPrintable",
                    "function params": [
                        "b",
                        "buffer"
                    ],
                    "file name": "QuotedPrintableCodec.java",
                    "file old path": "src/main/java/org/apache/commons/codec/net/QuotedPrintableCodec.java",
                    "file new path": "src/main/java/org/apache/commons/codec/net/QuotedPrintableCodec.java",
                    "full name": "src.main.java.org.apache.commons.codec.net.QuotedPrintableCodec.encodeQuotedPrintable"
                },
                {
                    "function name": "encodeQuotedPrintable",
                    "function params": [
                        "printable",
                        "bytes"
                    ],
                    "file name": "QuotedPrintableCodec.java",
                    "file old path": "src/main/java/org/apache/commons/codec/net/QuotedPrintableCodec.java",
                    "file new path": "src/main/java/org/apache/commons/codec/net/QuotedPrintableCodec.java",
                    "full name": "src.main.java.org.apache.commons.codec.net.QuotedPrintableCodec.encodeQuotedPrintable"
                },
                {
                    "function name": "testSoftLineBreakEncode",
                    "function params": [],
                    "file name": "QuotedPrintableCodecTest.java",
                    "file old path": "src/test/java/org/apache/commons/codec/net/QuotedPrintableCodecTest.java",
                    "file new path": "src/test/java/org/apache/commons/codec/net/QuotedPrintableCodecTest.java",
                    "full name": "src.test.java.org.apache.commons.codec.net.QuotedPrintableCodecTest.testSoftLineBreakEncode"
                },
                {
                    "function name": "testSoftLineBreakDecode",
                    "function params": [],
                    "file name": "QuotedPrintableCodecTest.java",
                    "file old path": "src/test/java/org/apache/commons/codec/net/QuotedPrintableCodecTest.java",
                    "file new path": "src/test/java/org/apache/commons/codec/net/QuotedPrintableCodecTest.java",
                    "full name": "src.test.java.org.apache.commons.codec.net.QuotedPrintableCodecTest.testSoftLineBreakDecode"
                }
            ],
            "files that changed": [
                "src/main/java/org/apache/commons/codec/net/QuotedPrintableCodec.java",
                "src/test/java/org/apache/commons/codec/net/QuotedPrintableCodecTest.java"
            ]
        },
        {
            "bug index": "99",
            "bug id": "CODEC-130",
            "hexsha": "55a0c64a1d75cab8930bcaad6fee3d62c10ac916",
            "fix_hash": "fe56886f6d4c6f872caa23faa4b94e34b0b221a1",
            "description": "Base64InputStream.skip() skips within underlying stream, leading to unexpected behaviour.\n\nThe following code will reproduce the issue:\n\n@Test\npublic void testSkip() throws Throwable {\n    InputStream ins =\n            new ByteArrayInputStream(\"AAAA////\".getBytes(\"ISO-8859-1\"));//should decode to {0, 0, 0, 255, 255, 255}\n    Base64InputStream instance = new Base64InputStream(ins);\n    assertEquals(3L, instance.skip(3L)); //should skip 3 decoded characters, or 4 encoded characters\n    assertEquals(255, instance.read()); //Currently returns 3, as it is decoding \"A/\", not \"//\" \n}\n\nThe following code, if added to Base64InputStream, or (BaseNCodecInputStream in the dev build) would resolve the issue:\n\n@Override\npublic long skip(long n) throws IOException {\n    //delegate to read()\n    long bytesRead = 0;\n    while ((bytesRead < n) && (read() != -1)) {\n        bytesRead++;\n    }\n    return bytesRead;\n}\n\nMore efficient code may be possible.",
            "commit number version hash": 728,
            "commit number": 581,
            "function that changed": [
                {
                    "function name": "skip",
                    "function params": [
                        "n"
                    ],
                    "file name": "BaseNCodecInputStream.java",
                    "file old path": "src/main/java/org/apache/commons/codec/binary/BaseNCodecInputStream.java",
                    "file new path": "src/main/java/org/apache/commons/codec/binary/BaseNCodecInputStream.java",
                    "full name": "src.main.java.org.apache.commons.codec.binary.BaseNCodecInputStream.skip"
                },
                {
                    "function name": "markSupported",
                    "function params": [],
                    "file name": "BaseNCodecInputStream.java",
                    "file old path": "src/main/java/org/apache/commons/codec/binary/BaseNCodecInputStream.java",
                    "file new path": "src/main/java/org/apache/commons/codec/binary/BaseNCodecInputStream.java",
                    "full name": "src.main.java.org.apache.commons.codec.binary.BaseNCodecInputStream.markSupported"
                },
                {
                    "function name": "available",
                    "function params": [],
                    "file name": "BaseNCodecInputStream.java",
                    "file old path": "src/main/java/org/apache/commons/codec/binary/BaseNCodecInputStream.java",
                    "file new path": "src/main/java/org/apache/commons/codec/binary/BaseNCodecInputStream.java",
                    "full name": "src.main.java.org.apache.commons.codec.binary.BaseNCodecInputStream.available"
                }
            ],
            "files that changed": [
                "src/main/java/org/apache/commons/codec/binary/BaseNCodecInputStream.java"
            ]
        },
        {
            "bug index": "100",
            "bug id": "CODEC-130",
            "hexsha": "55a0c64a1d75cab8930bcaad6fee3d62c10ac916",
            "fix_hash": "1fc451c79779bdbf788e8bfbec6dc031a47495d8",
            "description": "Base64InputStream.skip() skips within underlying stream, leading to unexpected behaviour.\n\nThe following code will reproduce the issue:\n\n@Test\npublic void testSkip() throws Throwable {\n    InputStream ins =\n            new ByteArrayInputStream(\"AAAA////\".getBytes(\"ISO-8859-1\"));//should decode to {0, 0, 0, 255, 255, 255}\n    Base64InputStream instance = new Base64InputStream(ins);\n    assertEquals(3L, instance.skip(3L)); //should skip 3 decoded characters, or 4 encoded characters\n    assertEquals(255, instance.read()); //Currently returns 3, as it is decoding \"A/\", not \"//\" \n}\n\nThe following code, if added to Base64InputStream, or (BaseNCodecInputStream in the dev build) would resolve the issue:\n\n@Override\npublic long skip(long n) throws IOException {\n    //delegate to read()\n    long bytesRead = 0;\n    while ((bytesRead < n) && (read() != -1)) {\n        bytesRead++;\n    }\n    return bytesRead;\n}\n\nMore efficient code may be possible.",
            "commit number version hash": 728,
            "commit number": 580,
            "function that changed": [
                {
                    "function name": "available",
                    "function params": [],
                    "file name": "BaseNCodecInputStream.java",
                    "file old path": "src/main/java/org/apache/commons/codec/binary/BaseNCodecInputStream.java",
                    "file new path": "src/main/java/org/apache/commons/codec/binary/BaseNCodecInputStream.java",
                    "full name": "src.main.java.org.apache.commons.codec.binary.BaseNCodecInputStream.available"
                },
                {
                    "function name": "skip",
                    "function params": [
                        "n"
                    ],
                    "file name": "BaseNCodecInputStream.java",
                    "file old path": "src/main/java/org/apache/commons/codec/binary/BaseNCodecInputStream.java",
                    "file new path": "src/main/java/org/apache/commons/codec/binary/BaseNCodecInputStream.java",
                    "full name": "src.main.java.org.apache.commons.codec.binary.BaseNCodecInputStream.skip"
                },
                {
                    "function name": "testSkipBig",
                    "function params": [],
                    "file name": "Base32InputStreamTest.java",
                    "file old path": "src/test/java/org/apache/commons/codec/binary/Base32InputStreamTest.java",
                    "file new path": "src/test/java/org/apache/commons/codec/binary/Base32InputStreamTest.java",
                    "full name": "src.test.java.org.apache.commons.codec.binary.Base32InputStreamTest.testSkipBig"
                },
                {
                    "function name": "testSkipWrongArgument",
                    "function params": [],
                    "file name": "Base32InputStreamTest.java",
                    "file old path": "src/test/java/org/apache/commons/codec/binary/Base32InputStreamTest.java",
                    "file new path": "src/test/java/org/apache/commons/codec/binary/Base32InputStreamTest.java",
                    "full name": "src.test.java.org.apache.commons.codec.binary.Base32InputStreamTest.testSkipWrongArgument"
                },
                {
                    "function name": "testSkipPastEnd",
                    "function params": [],
                    "file name": "Base32InputStreamTest.java",
                    "file old path": "src/test/java/org/apache/commons/codec/binary/Base32InputStreamTest.java",
                    "file new path": "src/test/java/org/apache/commons/codec/binary/Base32InputStreamTest.java",
                    "full name": "src.test.java.org.apache.commons.codec.binary.Base32InputStreamTest.testSkipPastEnd"
                },
                {
                    "function name": "testAvailable",
                    "function params": [],
                    "file name": "Base32InputStreamTest.java",
                    "file old path": "src/test/java/org/apache/commons/codec/binary/Base32InputStreamTest.java",
                    "file new path": "src/test/java/org/apache/commons/codec/binary/Base32InputStreamTest.java",
                    "full name": "src.test.java.org.apache.commons.codec.binary.Base32InputStreamTest.testAvailable"
                },
                {
                    "function name": "testSkipToEnd",
                    "function params": [],
                    "file name": "Base32InputStreamTest.java",
                    "file old path": "src/test/java/org/apache/commons/codec/binary/Base32InputStreamTest.java",
                    "file new path": "src/test/java/org/apache/commons/codec/binary/Base32InputStreamTest.java",
                    "full name": "src.test.java.org.apache.commons.codec.binary.Base32InputStreamTest.testSkipToEnd"
                },
                {
                    "function name": "testSkipPastEnd",
                    "function params": [],
                    "file name": "Base64InputStreamTest.java",
                    "file old path": "src/test/java/org/apache/commons/codec/binary/Base64InputStreamTest.java",
                    "file new path": "src/test/java/org/apache/commons/codec/binary/Base64InputStreamTest.java",
                    "full name": "src.test.java.org.apache.commons.codec.binary.Base64InputStreamTest.testSkipPastEnd"
                },
                {
                    "function name": "testSkipBig",
                    "function params": [],
                    "file name": "Base64InputStreamTest.java",
                    "file old path": "src/test/java/org/apache/commons/codec/binary/Base64InputStreamTest.java",
                    "file new path": "src/test/java/org/apache/commons/codec/binary/Base64InputStreamTest.java",
                    "full name": "src.test.java.org.apache.commons.codec.binary.Base64InputStreamTest.testSkipBig"
                },
                {
                    "function name": "testSkipToEnd",
                    "function params": [],
                    "file name": "Base64InputStreamTest.java",
                    "file old path": "src/test/java/org/apache/commons/codec/binary/Base64InputStreamTest.java",
                    "file new path": "src/test/java/org/apache/commons/codec/binary/Base64InputStreamTest.java",
                    "full name": "src.test.java.org.apache.commons.codec.binary.Base64InputStreamTest.testSkipToEnd"
                },
                {
                    "function name": "testSkipWrongArgument",
                    "function params": [],
                    "file name": "Base64InputStreamTest.java",
                    "file old path": "src/test/java/org/apache/commons/codec/binary/Base64InputStreamTest.java",
                    "file new path": "src/test/java/org/apache/commons/codec/binary/Base64InputStreamTest.java",
                    "full name": "src.test.java.org.apache.commons.codec.binary.Base64InputStreamTest.testSkipWrongArgument"
                },
                {
                    "function name": "testAvailable",
                    "function params": [],
                    "file name": "Base64InputStreamTest.java",
                    "file old path": "src/test/java/org/apache/commons/codec/binary/Base64InputStreamTest.java",
                    "file new path": "src/test/java/org/apache/commons/codec/binary/Base64InputStreamTest.java",
                    "full name": "src.test.java.org.apache.commons.codec.binary.Base64InputStreamTest.testAvailable"
                }
            ],
            "files that changed": [
                "src/main/java/org/apache/commons/codec/binary/BaseNCodecInputStream.java",
                "src/test/java/org/apache/commons/codec/binary/Base32InputStreamTest.java",
                "src/test/java/org/apache/commons/codec/binary/Base64InputStreamTest.java"
            ]
        },
        {
            "bug index": "101",
            "bug id": "CODEC-130",
            "hexsha": "55a0c64a1d75cab8930bcaad6fee3d62c10ac916",
            "fix_hash": "caa142d0399f10ce3ec6fb843e679e2d8c07c43f",
            "description": "Base64InputStream.skip() skips within underlying stream, leading to unexpected behaviour.\n\nThe following code will reproduce the issue:\n\n@Test\npublic void testSkip() throws Throwable {\n    InputStream ins =\n            new ByteArrayInputStream(\"AAAA////\".getBytes(\"ISO-8859-1\"));//should decode to {0, 0, 0, 255, 255, 255}\n    Base64InputStream instance = new Base64InputStream(ins);\n    assertEquals(3L, instance.skip(3L)); //should skip 3 decoded characters, or 4 encoded characters\n    assertEquals(255, instance.read()); //Currently returns 3, as it is decoding \"A/\", not \"//\" \n}\n\nThe following code, if added to Base64InputStream, or (BaseNCodecInputStream in the dev build) would resolve the issue:\n\n@Override\npublic long skip(long n) throws IOException {\n    //delegate to read()\n    long bytesRead = 0;\n    while ((bytesRead < n) && (read() != -1)) {\n        bytesRead++;\n    }\n    return bytesRead;\n}\n\nMore efficient code may be possible.",
            "commit number version hash": 728,
            "commit number": 579,
            "function that changed": [
                {
                    "function name": "testCodec130",
                    "function params": [],
                    "file name": "Base32InputStreamTest.java",
                    "file old path": "src/test/java/org/apache/commons/codec/binary/Base32InputStreamTest.java",
                    "file new path": "src/test/java/org/apache/commons/codec/binary/Base32InputStreamTest.java",
                    "full name": "src.test.java.org.apache.commons.codec.binary.Base32InputStreamTest.testCodec130"
                },
                {
                    "function name": "testCodec130",
                    "function params": [],
                    "file name": "Base64InputStreamTest.java",
                    "file old path": "src/test/java/org/apache/commons/codec/binary/Base64InputStreamTest.java",
                    "file new path": "src/test/java/org/apache/commons/codec/binary/Base64InputStreamTest.java",
                    "full name": "src.test.java.org.apache.commons.codec.binary.Base64InputStreamTest.testCodec130"
                }
            ],
            "files that changed": [
                "src/test/java/org/apache/commons/codec/binary/Base32InputStreamTest.java",
                "src/test/java/org/apache/commons/codec/binary/Base64InputStreamTest.java"
            ]
        },
        {
            "bug index": "102",
            "bug id": "CODEC-132",
            "hexsha": "55a0c64a1d75cab8930bcaad6fee3d62c10ac916",
            "fix_hash": "403a784b81c5fb845aef1b34aefd56d0d3056964",
            "description": "In Lucene/Solr, we integrated this encoder into the latest release.\n\nOur tests use a variety of random strings, and we have recent jenkins failures\nfrom some input streams (of length <= 10), using huge amounts of memory (e.g. > 64MB),\nresulting in OOM.\n\nI've created a test case (length is 30 here) that will OOM with -Xmx256M. \n\nI haven't dug into this much as to what's causing it, but I suspect there might be a bug\nrevolving around certain punctuation characters: we didn't see this happening until\nwe beefed up our random string generation to start producing \"html-like\" strings.",
            "commit number version hash": 728,
            "commit number": 577,
            "function that changed": [
                {
                    "function name": "PhonemeBuilder",
                    "function params": [
                        "str"
                    ],
                    "file name": "PhoneticEngine.java",
                    "file old path": "src/main/java/org/apache/commons/codec/language/bm/PhoneticEngine.java",
                    "file new path": "src/main/java/org/apache/commons/codec/language/bm/PhoneticEngine.java",
                    "full name": "src.main.java.org.apache.commons.codec.language.bm.PhoneticEngine.PhonemeBuilder"
                },
                {
                    "function name": "PhonemeBuilder",
                    "function params": [
                        "phonemeExpr",
                        "maxPhonemes"
                    ],
                    "file name": "PhoneticEngine.java",
                    "file old path": "src/main/java/org/apache/commons/codec/language/bm/PhoneticEngine.java",
                    "file new path": "src/main/java/org/apache/commons/codec/language/bm/PhoneticEngine.java",
                    "full name": "src.main.java.org.apache.commons.codec.language.bm.PhoneticEngine.PhonemeBuilder"
                }
            ],
            "files that changed": [
                "src/main/java/org/apache/commons/codec/language/bm/PhoneticEngine.java"
            ]
        },
        {
            "bug index": "103",
            "bug id": "CODEC-130",
            "hexsha": "55a0c64a1d75cab8930bcaad6fee3d62c10ac916",
            "fix_hash": "2697108cc9f1c7b089053143097c9f8843185462",
            "description": "Base64InputStream.skip() skips within underlying stream, leading to unexpected behaviour.\n\nThe following code will reproduce the issue:\n\n@Test\npublic void testSkip() throws Throwable {\n    InputStream ins =\n            new ByteArrayInputStream(\"AAAA////\".getBytes(\"ISO-8859-1\"));//should decode to {0, 0, 0, 255, 255, 255}\n    Base64InputStream instance = new Base64InputStream(ins);\n    assertEquals(3L, instance.skip(3L)); //should skip 3 decoded characters, or 4 encoded characters\n    assertEquals(255, instance.read()); //Currently returns 3, as it is decoding \"A/\", not \"//\" \n}\n\nThe following code, if added to Base64InputStream, or (BaseNCodecInputStream in the dev build) would resolve the issue:\n\n@Override\npublic long skip(long n) throws IOException {\n    //delegate to read()\n    long bytesRead = 0;\n    while ((bytesRead < n) && (read() != -1)) {\n        bytesRead++;\n    }\n    return bytesRead;\n}\n\nMore efficient code may be possible.",
            "commit number version hash": 728,
            "commit number": 575,
            "function that changed": [
                {
                    "function name": "testCodec130",
                    "function params": [],
                    "file name": "Base64InputStreamTest.java",
                    "file old path": "src/test/java/org/apache/commons/codec/binary/Base64InputStreamTest.java",
                    "file new path": "src/test/java/org/apache/commons/codec/binary/Base64InputStreamTest.java",
                    "full name": "src.test.java.org.apache.commons.codec.binary.Base64InputStreamTest.testCodec130"
                }
            ],
            "files that changed": [
                "src/test/java/org/apache/commons/codec/binary/Base64InputStreamTest.java"
            ]
        },
        {
            "bug index": "104",
            "bug id": "CODEC-1",
            "hexsha": "71e7260746a902d1070a190fd78bd560464860b9",
            "fix_hash": "fb78cbb077f6b0b6405ab0c7d74c7c3cce29bf9b",
            "description": "URLCodec causes an IndexOutOfBoundsException in BitSet when encoding non-ASCII\ncharacters.",
            "commit number version hash": 173,
            "commit number": 574,
            "function that changed": [],
            "files that changed": [
                "src/main/java/org/apache/commons/codec/binary/BaseNCodec.java"
            ]
        },
        {
            "bug index": "105",
            "bug id": "CODEC-1",
            "hexsha": "71e7260746a902d1070a190fd78bd560464860b9",
            "fix_hash": "1e2151c26bccea33125da79e7c616c2c55edc855",
            "description": "URLCodec causes an IndexOutOfBoundsException in BitSet when encoding non-ASCII\ncharacters.",
            "commit number version hash": 173,
            "commit number": 573,
            "function that changed": [
                {
                    "function name": "decode",
                    "function params": [
                        "pArray"
                    ],
                    "file name": "BaseNCodec.java",
                    "file old path": "src/main/java/org/apache/commons/codec/binary/BaseNCodec.java",
                    "file new path": "src/main/java/org/apache/commons/codec/binary/BaseNCodec.java",
                    "full name": "src.main.java.org.apache.commons.codec.binary.BaseNCodec.decode"
                },
                {
                    "function name": "readResults",
                    "function params": [
                        "b",
                        "bPos",
                        "bAvail"
                    ],
                    "file name": "BaseNCodec.java",
                    "file old path": "src/main/java/org/apache/commons/codec/binary/BaseNCodec.java",
                    "file new path": "src/main/java/org/apache/commons/codec/binary/BaseNCodec.java",
                    "full name": "src.main.java.org.apache.commons.codec.binary.BaseNCodec.readResults"
                },
                {
                    "function name": "encode",
                    "function params": [
                        "pArray"
                    ],
                    "file name": "BaseNCodec.java",
                    "file old path": "src/main/java/org/apache/commons/codec/binary/BaseNCodec.java",
                    "file new path": "src/main/java/org/apache/commons/codec/binary/BaseNCodec.java",
                    "full name": "src.main.java.org.apache.commons.codec.binary.BaseNCodec.encode"
                },
                {
                    "function name": "read",
                    "function params": [],
                    "file name": "BaseNCodecInputStream.java",
                    "file old path": "src/main/java/org/apache/commons/codec/binary/BaseNCodecInputStream.java",
                    "file new path": "src/main/java/org/apache/commons/codec/binary/BaseNCodecInputStream.java",
                    "full name": "src.main.java.org.apache.commons.codec.binary.BaseNCodecInputStream.read"
                },
                {
                    "function name": "close",
                    "function params": [],
                    "file name": "BaseNCodecOutputStream.java",
                    "file old path": "src/main/java/org/apache/commons/codec/binary/BaseNCodecOutputStream.java",
                    "file new path": "src/main/java/org/apache/commons/codec/binary/BaseNCodecOutputStream.java",
                    "full name": "src.main.java.org.apache.commons.codec.binary.BaseNCodecOutputStream.close"
                }
            ],
            "files that changed": [
                "src/main/java/org/apache/commons/codec/binary/BaseNCodec.java",
                "src/main/java/org/apache/commons/codec/binary/BaseNCodecInputStream.java",
                "src/main/java/org/apache/commons/codec/binary/BaseNCodecOutputStream.java"
            ]
        },
        {
            "bug index": "106",
            "bug id": "CODEC-1",
            "hexsha": "71e7260746a902d1070a190fd78bd560464860b9",
            "fix_hash": "1471bc37d5db8921ba044cc150d49a05890b50e6",
            "description": "URLCodec causes an IndexOutOfBoundsException in BitSet when encoding non-ASCII\ncharacters.",
            "commit number version hash": 173,
            "commit number": 571,
            "function that changed": [],
            "files that changed": [
                "src/main/java/org/apache/commons/codec/language/Nysiis.java",
                "src/test/java/org/apache/commons/codec/language/NysiisTest.java"
            ]
        },
        {
            "bug index": "107",
            "bug id": "CODEC-4",
            "hexsha": "71e7260746a902d1070a190fd78bd560464860b9",
            "fix_hash": "60cd70bcee64829c4756e0e7403f43fb385f99e6",
            "description": "You get a ClassCastException in Hex.decode(Object) if you pass in a String object.",
            "commit number version hash": 173,
            "commit number": 562,
            "function that changed": [
                {
                    "function name": "testRule4Dot2",
                    "function params": [],
                    "file name": "NysiisTest.java",
                    "file old path": "src/test/java/org/apache/commons/codec/language/NysiisTest.java",
                    "file new path": "src/test/java/org/apache/commons/codec/language/NysiisTest.java",
                    "full name": "src.test.java.org.apache.commons.codec.language.NysiisTest.testRule4Dot2"
                }
            ],
            "files that changed": [
                "src/test/java/org/apache/commons/codec/language/NysiisTest.java"
            ]
        },
        {
            "bug index": "108",
            "bug id": "CODEC-131",
            "hexsha": "55a0c64a1d75cab8930bcaad6fee3d62c10ac916",
            "fix_hash": "75cba401aebe256ccea215674cfe403bbe4a1a75",
            "description": "DoubleMetaphone documentation points to dead links in the domain cuj.com:\n\n   Original Article: http://www.cuj.com/documents/s=8038/cuj0006philips/\n   Original Source Code: ftp://ftp.cuj.com/pub/2000/1806/philips.zip",
            "commit number version hash": 728,
            "commit number": 552,
            "function that changed": [],
            "files that changed": [
                "src/main/java/org/apache/commons/codec/language/DoubleMetaphone.java"
            ]
        },
        {
            "bug index": "109",
            "bug id": "CODEC-132",
            "hexsha": "55a0c64a1d75cab8930bcaad6fee3d62c10ac916",
            "fix_hash": "facbc3a39c5eb2ce190c1ec597015da47c51b2c8",
            "description": "In Lucene/Solr, we integrated this encoder into the latest release.\n\nOur tests use a variety of random strings, and we have recent jenkins failures\nfrom some input streams (of length <= 10), using huge amounts of memory (e.g. > 64MB),\nresulting in OOM.\n\nI've created a test case (length is 30 here) that will OOM with -Xmx256M. \n\nI haven't dug into this much as to what's causing it, but I suspect there might be a bug\nrevolving around certain punctuation characters: we didn't see this happening until\nwe beefed up our random string generation to start producing \"html-like\" strings.",
            "commit number version hash": 728,
            "commit number": 551,
            "function that changed": [
                {
                    "function name": "setMaxPhonemes",
                    "function params": [
                        "maxPhonemes"
                    ],
                    "file name": "BeiderMorseEncoder.java",
                    "file old path": "src/main/java/org/apache/commons/codec/language/bm/BeiderMorseEncoder.java",
                    "file new path": "src/main/java/org/apache/commons/codec/language/bm/BeiderMorseEncoder.java",
                    "full name": "src.main.java.org.apache.commons.codec.language.bm.BeiderMorseEncoder.setMaxPhonemes"
                },
                {
                    "function name": "setNameType",
                    "function params": [
                        "nameType"
                    ],
                    "file name": "BeiderMorseEncoder.java",
                    "file old path": "src/main/java/org/apache/commons/codec/language/bm/BeiderMorseEncoder.java",
                    "file new path": "src/main/java/org/apache/commons/codec/language/bm/BeiderMorseEncoder.java",
                    "full name": "src.main.java.org.apache.commons.codec.language.bm.BeiderMorseEncoder.setNameType"
                },
                {
                    "function name": "setRuleType",
                    "function params": [
                        "ruleType"
                    ],
                    "file name": "BeiderMorseEncoder.java",
                    "file old path": "src/main/java/org/apache/commons/codec/language/bm/BeiderMorseEncoder.java",
                    "file new path": "src/main/java/org/apache/commons/codec/language/bm/BeiderMorseEncoder.java",
                    "full name": "src.main.java.org.apache.commons.codec.language.bm.BeiderMorseEncoder.setRuleType"
                },
                {
                    "function name": "setConcat",
                    "function params": [
                        "concat"
                    ],
                    "file name": "BeiderMorseEncoder.java",
                    "file old path": "src/main/java/org/apache/commons/codec/language/bm/BeiderMorseEncoder.java",
                    "file new path": "src/main/java/org/apache/commons/codec/language/bm/BeiderMorseEncoder.java",
                    "full name": "src.main.java.org.apache.commons.codec.language.bm.BeiderMorseEncoder.setConcat"
                },
                {
                    "function name": "RulesApplication",
                    "function params": [
                        "finalRules",
                        "input",
                        "phonemeBuilder",
                        "i",
                        "maxPhonemes"
                    ],
                    "file name": "PhoneticEngine.java",
                    "file old path": "src/main/java/org/apache/commons/codec/language/bm/PhoneticEngine.java",
                    "file new path": "src/main/java/org/apache/commons/codec/language/bm/PhoneticEngine.java",
                    "full name": "src.main.java.org.apache.commons.codec.language.bm.PhoneticEngine.RulesApplication"
                },
                {
                    "function name": "PhoneticEngine",
                    "function params": [
                        "nameType",
                        "ruleType",
                        "concat",
                        "maxPhonemes"
                    ],
                    "file name": "PhoneticEngine.java",
                    "file old path": "src/main/java/org/apache/commons/codec/language/bm/PhoneticEngine.java",
                    "file new path": "src/main/java/org/apache/commons/codec/language/bm/PhoneticEngine.java",
                    "full name": "src.main.java.org.apache.commons.codec.language.bm.PhoneticEngine.PhoneticEngine"
                },
                {
                    "function name": "RulesApplication",
                    "function params": [
                        "finalRules",
                        "input",
                        "phonemeBuilder",
                        "i"
                    ],
                    "file name": "PhoneticEngine.java",
                    "file old path": "src/main/java/org/apache/commons/codec/language/bm/PhoneticEngine.java",
                    "file new path": "src/main/java/org/apache/commons/codec/language/bm/PhoneticEngine.java",
                    "full name": "src.main.java.org.apache.commons.codec.language.bm.PhoneticEngine.RulesApplication"
                },
                {
                    "function name": "PhonemeBuilder",
                    "function params": [
                        "phonemeExpr"
                    ],
                    "file name": "PhoneticEngine.java",
                    "file old path": "src/main/java/org/apache/commons/codec/language/bm/PhoneticEngine.java",
                    "file new path": "src/main/java/org/apache/commons/codec/language/bm/PhoneticEngine.java",
                    "full name": "src.main.java.org.apache.commons.codec.language.bm.PhoneticEngine.PhonemeBuilder"
                },
                {
                    "function name": "encode",
                    "function params": [
                        "input",
                        "languageSet"
                    ],
                    "file name": "PhoneticEngine.java",
                    "file old path": "src/main/java/org/apache/commons/codec/language/bm/PhoneticEngine.java",
                    "file new path": "src/main/java/org/apache/commons/codec/language/bm/PhoneticEngine.java",
                    "full name": "src.main.java.org.apache.commons.codec.language.bm.PhoneticEngine.encode"
                },
                {
                    "function name": "getMaxPhonemes",
                    "function params": [],
                    "file name": "PhoneticEngine.java",
                    "file old path": "src/main/java/org/apache/commons/codec/language/bm/PhoneticEngine.java",
                    "file new path": "src/main/java/org/apache/commons/codec/language/bm/PhoneticEngine.java",
                    "full name": "src.main.java.org.apache.commons.codec.language.bm.PhoneticEngine.getMaxPhonemes"
                },
                {
                    "function name": "PhonemeBuilder",
                    "function params": [
                        "phonemeExpr",
                        "maxPhonemes"
                    ],
                    "file name": "PhoneticEngine.java",
                    "file old path": "src/main/java/org/apache/commons/codec/language/bm/PhoneticEngine.java",
                    "file new path": "src/main/java/org/apache/commons/codec/language/bm/PhoneticEngine.java",
                    "full name": "src.main.java.org.apache.commons.codec.language.bm.PhoneticEngine.PhonemeBuilder"
                },
                {
                    "function name": "applyFinalRules",
                    "function params": [
                        "phonemeBuilder",
                        "finalRules"
                    ],
                    "file name": "PhoneticEngine.java",
                    "file old path": "src/main/java/org/apache/commons/codec/language/bm/PhoneticEngine.java",
                    "file new path": "src/main/java/org/apache/commons/codec/language/bm/PhoneticEngine.java",
                    "full name": "src.main.java.org.apache.commons.codec.language.bm.PhoneticEngine.applyFinalRules"
                },
                {
                    "function name": "PhoneticEngine",
                    "function params": [
                        "nameType",
                        "ruleType",
                        "concat"
                    ],
                    "file name": "PhoneticEngine.java",
                    "file old path": "src/main/java/org/apache/commons/codec/language/bm/PhoneticEngine.java",
                    "file new path": "src/main/java/org/apache/commons/codec/language/bm/PhoneticEngine.java",
                    "full name": "src.main.java.org.apache.commons.codec.language.bm.PhoneticEngine.PhoneticEngine"
                },
                {
                    "function name": "RulesApplication",
                    "function params": [],
                    "file name": "PhoneticEngine.java",
                    "file old path": "src/main/java/org/apache/commons/codec/language/bm/PhoneticEngine.java",
                    "file new path": "src/main/java/org/apache/commons/codec/language/bm/PhoneticEngine.java",
                    "full name": "src.main.java.org.apache.commons.codec.language.bm.PhoneticEngine.RulesApplication"
                },
                {
                    "function name": "testAsciiEncodeNotEmpty1Letter",
                    "function params": [],
                    "file name": "BeiderMorseEncoderTest.java",
                    "file old path": "src/test/java/org/apache/commons/codec/language/bm/BeiderMorseEncoderTest.java",
                    "file new path": "src/test/java/org/apache/commons/codec/language/bm/BeiderMorseEncoderTest.java",
                    "full name": "src.test.java.org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testAsciiEncodeNotEmpty1Letter"
                },
                {
                    "function name": "testOOM",
                    "function params": [],
                    "file name": "BeiderMorseEncoderTest.java",
                    "file old path": "src/test/java/org/apache/commons/codec/language/bm/BeiderMorseEncoderTest.java",
                    "file new path": "src/test/java/org/apache/commons/codec/language/bm/BeiderMorseEncoderTest.java",
                    "full name": "src.test.java.org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testOOM"
                },
                {
                    "function name": "testAllChars",
                    "function params": [],
                    "file name": "BeiderMorseEncoderTest.java",
                    "file old path": "src/test/java/org/apache/commons/codec/language/bm/BeiderMorseEncoderTest.java",
                    "file new path": "src/test/java/org/apache/commons/codec/language/bm/BeiderMorseEncoderTest.java",
                    "full name": "src.test.java.org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testAllChars"
                },
                {
                    "function name": "testEncode",
                    "function params": [],
                    "file name": "PhoneticEngineTest.java",
                    "file old path": "src/test/java/org/apache/commons/codec/language/bm/PhoneticEngineTest.java",
                    "file new path": "src/test/java/org/apache/commons/codec/language/bm/PhoneticEngineTest.java",
                    "full name": "src.test.java.org.apache.commons.codec.language.bm.PhoneticEngineTest.testEncode"
                },
                {
                    "function name": "PhoneticEngineTest",
                    "function params": [
                        "name",
                        "phoneticExpected",
                        "nameType",
                        "ruleType",
                        "concat",
                        "maxPhonemes"
                    ],
                    "file name": "PhoneticEngineTest.java",
                    "file old path": "src/test/java/org/apache/commons/codec/language/bm/PhoneticEngineTest.java",
                    "file new path": "src/test/java/org/apache/commons/codec/language/bm/PhoneticEngineTest.java",
                    "full name": "src.test.java.org.apache.commons.codec.language.bm.PhoneticEngineTest.PhoneticEngineTest"
                },
                {
                    "function name": "PhoneticEngineTest",
                    "function params": [
                        "name",
                        "phoneticExpected",
                        "nameType",
                        "ruleType",
                        "concat"
                    ],
                    "file name": "PhoneticEngineTest.java",
                    "file old path": "src/test/java/org/apache/commons/codec/language/bm/PhoneticEngineTest.java",
                    "file new path": "src/test/java/org/apache/commons/codec/language/bm/PhoneticEngineTest.java",
                    "full name": "src.test.java.org.apache.commons.codec.language.bm.PhoneticEngineTest.PhoneticEngineTest"
                },
                {
                    "function name": "data",
                    "function params": [],
                    "file name": "PhoneticEngineTest.java",
                    "file old path": "src/test/java/org/apache/commons/codec/language/bm/PhoneticEngineTest.java",
                    "file new path": "src/test/java/org/apache/commons/codec/language/bm/PhoneticEngineTest.java",
                    "full name": "src.test.java.org.apache.commons.codec.language.bm.PhoneticEngineTest.data"
                }
            ],
            "files that changed": [
                "src/main/java/org/apache/commons/codec/language/bm/BeiderMorseEncoder.java",
                "src/main/java/org/apache/commons/codec/language/bm/PhoneticEngine.java",
                "src/test/java/org/apache/commons/codec/language/bm/BeiderMorseEncoderTest.java",
                "src/test/java/org/apache/commons/codec/language/bm/PhoneticEngineTest.java"
            ]
        },
        {
            "bug index": "110",
            "bug id": "CODEC-121",
            "hexsha": "0929762d9dc10ccc62c7a227f69cd831e2bfb1b8",
            "fix_hash": "7e8c20bd1b0593c3496a168be573aed40609a433",
            "description": "Writing a unit test I discovered that the example Wikipedia uses for quoted-printable data does not decode but instead throws an exception.  \nTheir example is here:  http://en.wikipedia.org/wiki/Quoted-printable#Example\n\ntest:\n\n  String qpdata   = \"If you believe that truth=3Dbeauty, then surely=20=\\r\\n\" +\n\t\t    \"mathematics is the most beautiful branch of philosophy.\";\n\n  String expected = \"If you believe that truth=beauty, then surely \" +\n\t\t    \"mathematics is the most beautiful branch of philosophy.\";\n\n  assertEquals( expected,  new QuotedPrintableCodec().decode(qpdata) );\n\nI suppose I could fix if you like but currently I'm not a registered developer.  \n\n\n",
            "commit number version hash": 871,
            "commit number": 550,
            "function that changed": [
                {
                    "function name": "isWhitespace",
                    "function params": [
                        "b"
                    ],
                    "file name": "QuotedPrintableCodec.java",
                    "file old path": "src/main/java/org/apache/commons/codec/net/QuotedPrintableCodec.java",
                    "file new path": "src/main/java/org/apache/commons/codec/net/QuotedPrintableCodec.java",
                    "full name": "src.main.java.org.apache.commons.codec.net.QuotedPrintableCodec.isWhitespace"
                },
                {
                    "function name": "getUnsignedOctet",
                    "function params": [
                        "index",
                        "bytes"
                    ],
                    "file name": "QuotedPrintableCodec.java",
                    "file old path": "src/main/java/org/apache/commons/codec/net/QuotedPrintableCodec.java",
                    "file new path": "src/main/java/org/apache/commons/codec/net/QuotedPrintableCodec.java",
                    "full name": "src.main.java.org.apache.commons.codec.net.QuotedPrintableCodec.getUnsignedOctet"
                },
                {
                    "function name": "decodeQuotedPrintable",
                    "function params": [
                        "bytes"
                    ],
                    "file name": "QuotedPrintableCodec.java",
                    "file old path": "src/main/java/org/apache/commons/codec/net/QuotedPrintableCodec.java",
                    "file new path": "src/main/java/org/apache/commons/codec/net/QuotedPrintableCodec.java",
                    "full name": "src.main.java.org.apache.commons.codec.net.QuotedPrintableCodec.decodeQuotedPrintable"
                },
                {
                    "function name": "encodeByte",
                    "function params": [
                        "b",
                        "encode",
                        "buffer"
                    ],
                    "file name": "QuotedPrintableCodec.java",
                    "file old path": "src/main/java/org/apache/commons/codec/net/QuotedPrintableCodec.java",
                    "file new path": "src/main/java/org/apache/commons/codec/net/QuotedPrintableCodec.java",
                    "full name": "src.main.java.org.apache.commons.codec.net.QuotedPrintableCodec.encodeByte"
                },
                {
                    "function name": "encodeQuotedPrintable",
                    "function params": [
                        "b",
                        "buffer"
                    ],
                    "file name": "QuotedPrintableCodec.java",
                    "file old path": "src/main/java/org/apache/commons/codec/net/QuotedPrintableCodec.java",
                    "file new path": "src/main/java/org/apache/commons/codec/net/QuotedPrintableCodec.java",
                    "full name": "src.main.java.org.apache.commons.codec.net.QuotedPrintableCodec.encodeQuotedPrintable"
                },
                {
                    "function name": "encodeQuotedPrintable",
                    "function params": [
                        "printable",
                        "bytes"
                    ],
                    "file name": "QuotedPrintableCodec.java",
                    "file old path": "src/main/java/org/apache/commons/codec/net/QuotedPrintableCodec.java",
                    "file new path": "src/main/java/org/apache/commons/codec/net/QuotedPrintableCodec.java",
                    "full name": "src.main.java.org.apache.commons.codec.net.QuotedPrintableCodec.encodeQuotedPrintable"
                },
                {
                    "function name": "testSoftLineBreakEncode",
                    "function params": [],
                    "file name": "QuotedPrintableCodecTest.java",
                    "file old path": "src/test/java/org/apache/commons/codec/net/QuotedPrintableCodecTest.java",
                    "file new path": "src/test/java/org/apache/commons/codec/net/QuotedPrintableCodecTest.java",
                    "full name": "src.test.java.org.apache.commons.codec.net.QuotedPrintableCodecTest.testSoftLineBreakEncode"
                },
                {
                    "function name": "testSoftLineBreakDecode",
                    "function params": [],
                    "file name": "QuotedPrintableCodecTest.java",
                    "file old path": "src/test/java/org/apache/commons/codec/net/QuotedPrintableCodecTest.java",
                    "file new path": "src/test/java/org/apache/commons/codec/net/QuotedPrintableCodecTest.java",
                    "full name": "src.test.java.org.apache.commons.codec.net.QuotedPrintableCodecTest.testSoftLineBreakDecode"
                },
                {
                    "function name": "testSkipNotEncodedCRLF",
                    "function params": [],
                    "file name": "QuotedPrintableCodecTest.java",
                    "file old path": "src/test/java/org/apache/commons/codec/net/QuotedPrintableCodecTest.java",
                    "file new path": "src/test/java/org/apache/commons/codec/net/QuotedPrintableCodecTest.java",
                    "full name": "src.test.java.org.apache.commons.codec.net.QuotedPrintableCodecTest.testSkipNotEncodedCRLF"
                },
                {
                    "function name": "testTrailingSpecial",
                    "function params": [],
                    "file name": "QuotedPrintableCodecTest.java",
                    "file old path": "src/test/java/org/apache/commons/codec/net/QuotedPrintableCodecTest.java",
                    "file new path": "src/test/java/org/apache/commons/codec/net/QuotedPrintableCodecTest.java",
                    "full name": "src.test.java.org.apache.commons.codec.net.QuotedPrintableCodecTest.testTrailingSpecial"
                },
                {
                    "function name": "testUltimateSoftBreak",
                    "function params": [],
                    "file name": "QuotedPrintableCodecTest.java",
                    "file old path": "src/test/java/org/apache/commons/codec/net/QuotedPrintableCodecTest.java",
                    "file new path": "src/test/java/org/apache/commons/codec/net/QuotedPrintableCodecTest.java",
                    "full name": "src.test.java.org.apache.commons.codec.net.QuotedPrintableCodecTest.testUltimateSoftBreak"
                },
                {
                    "function name": "testFinalBytes",
                    "function params": [],
                    "file name": "QuotedPrintableCodecTest.java",
                    "file old path": "src/test/java/org/apache/commons/codec/net/QuotedPrintableCodecTest.java",
                    "file new path": "src/test/java/org/apache/commons/codec/net/QuotedPrintableCodecTest.java",
                    "full name": "src.test.java.org.apache.commons.codec.net.QuotedPrintableCodecTest.testFinalBytes"
                }
            ],
            "files that changed": [
                "src/main/java/org/apache/commons/codec/net/QuotedPrintableCodec.java",
                "src/test/java/org/apache/commons/codec/net/QuotedPrintableCodecTest.java"
            ]
        },
        {
            "bug index": "111",
            "bug id": "CODEC-1",
            "hexsha": "71e7260746a902d1070a190fd78bd560464860b9",
            "fix_hash": "bdf8e5c049a7f6bbe706c6d35bff55a79bba1e65",
            "description": "URLCodec causes an IndexOutOfBoundsException in BitSet when encoding non-ASCII\ncharacters.",
            "commit number version hash": 173,
            "commit number": 547,
            "function that changed": [
                {
                    "function name": "isArrayByteBase64",
                    "function params": [
                        "arrayOctet"
                    ],
                    "file name": "Base64.java",
                    "file old path": "src/main/java/org/apache/commons/codec/binary/Base64.java",
                    "file new path": "src/main/java/org/apache/commons/codec/binary/Base64.java",
                    "full name": "src.main.java.org.apache.commons.codec.binary.Base64.isArrayByteBase64"
                },
                {
                    "function name": "caverphone",
                    "function params": [
                        "source"
                    ],
                    "file name": "Caverphone.java",
                    "file old path": null,
                    "file new path": "src/main/java/org/apache/commons/codec/language/Caverphone.java",
                    "full name": "src.main.java.org.apache.commons.codec.language.Caverphone.caverphone"
                },
                {
                    "function name": "encode",
                    "function params": [
                        "pString"
                    ],
                    "file name": "Caverphone.java",
                    "file old path": null,
                    "file new path": "src/main/java/org/apache/commons/codec/language/Caverphone.java",
                    "full name": "src.main.java.org.apache.commons.codec.language.Caverphone.encode"
                },
                {
                    "function name": "isCaverphoneEqual",
                    "function params": [
                        "str1",
                        "str2"
                    ],
                    "file name": "Caverphone.java",
                    "file old path": null,
                    "file new path": "src/main/java/org/apache/commons/codec/language/Caverphone.java",
                    "full name": "src.main.java.org.apache.commons.codec.language.Caverphone.isCaverphoneEqual"
                },
                {
                    "function name": "encode",
                    "function params": [
                        "pObject"
                    ],
                    "file name": "Caverphone.java",
                    "file old path": null,
                    "file new path": "src/main/java/org/apache/commons/codec/language/Caverphone.java",
                    "full name": "src.main.java.org.apache.commons.codec.language.Caverphone.encode"
                },
                {
                    "function name": "Caverphone",
                    "function params": [],
                    "file name": "Caverphone.java",
                    "file old path": null,
                    "file new path": "src/main/java/org/apache/commons/codec/language/Caverphone.java",
                    "full name": "src.main.java.org.apache.commons.codec.language.Caverphone.Caverphone"
                },
                {
                    "function name": "setMaxLength",
                    "function params": [
                        "maxLength"
                    ],
                    "file name": "Soundex.java",
                    "file old path": "src/main/java/org/apache/commons/codec/language/Soundex.java",
                    "file new path": "src/main/java/org/apache/commons/codec/language/Soundex.java",
                    "full name": "src.main.java.org.apache.commons.codec.language.Soundex.setMaxLength"
                },
                {
                    "function name": "difference",
                    "function params": [
                        "s1",
                        "s2"
                    ],
                    "file name": "Soundex.java",
                    "file old path": "src/main/java/org/apache/commons/codec/language/Soundex.java",
                    "file new path": "src/main/java/org/apache/commons/codec/language/Soundex.java",
                    "full name": "src.main.java.org.apache.commons.codec.language.Soundex.difference"
                },
                {
                    "function name": "getMaxLength",
                    "function params": [],
                    "file name": "Soundex.java",
                    "file old path": "src/main/java/org/apache/commons/codec/language/Soundex.java",
                    "file new path": "src/main/java/org/apache/commons/codec/language/Soundex.java",
                    "full name": "src.main.java.org.apache.commons.codec.language.Soundex.getMaxLength"
                },
                {
                    "function name": "getEncoding",
                    "function params": [],
                    "file name": "URLCodec.java",
                    "file old path": "src/main/java/org/apache/commons/codec/net/URLCodec.java",
                    "file new path": "src/main/java/org/apache/commons/codec/net/URLCodec.java",
                    "full name": "src.main.java.org.apache.commons.codec.net.URLCodec.getEncoding"
                }
            ],
            "files that changed": [
                "src/main/java/org/apache/commons/codec/binary/Base64.java",
                "src/main/java/org/apache/commons/codec/language/Soundex.java",
                "src/main/java/org/apache/commons/codec/net/URLCodec.java"
            ]
        },
        {
            "bug index": "112",
            "bug id": "CODEC-1",
            "hexsha": "71e7260746a902d1070a190fd78bd560464860b9",
            "fix_hash": "d44dc8b805a7b8a99b264c5bd3f7acf8371247ef",
            "description": "URLCodec causes an IndexOutOfBoundsException in BitSet when encoding non-ASCII\ncharacters.",
            "commit number version hash": 173,
            "commit number": 545,
            "function that changed": [
                {
                    "function name": "StringEncoderComparator",
                    "function params": [],
                    "file name": "StringEncoderComparator.java",
                    "file old path": "src/main/java/org/apache/commons/codec/StringEncoderComparator.java",
                    "file new path": "src/main/java/org/apache/commons/codec/StringEncoderComparator.java",
                    "full name": "src.main.java.org.apache.commons.codec.StringEncoderComparator.StringEncoderComparator"
                }
            ],
            "files that changed": [
                "src/main/java/org/apache/commons/codec/StringEncoderComparator.java"
            ]
        },
        {
            "bug index": "113",
            "bug id": "CODEC-130",
            "hexsha": "55a0c64a1d75cab8930bcaad6fee3d62c10ac916",
            "fix_hash": "21015931d11bae2a37e390ff70ae55606a692ac1",
            "description": "Base64InputStream.skip() skips within underlying stream, leading to unexpected behaviour.\n\nThe following code will reproduce the issue:\n\n@Test\npublic void testSkip() throws Throwable {\n    InputStream ins =\n            new ByteArrayInputStream(\"AAAA////\".getBytes(\"ISO-8859-1\"));//should decode to {0, 0, 0, 255, 255, 255}\n    Base64InputStream instance = new Base64InputStream(ins);\n    assertEquals(3L, instance.skip(3L)); //should skip 3 decoded characters, or 4 encoded characters\n    assertEquals(255, instance.read()); //Currently returns 3, as it is decoding \"A/\", not \"//\" \n}\n\nThe following code, if added to Base64InputStream, or (BaseNCodecInputStream in the dev build) would resolve the issue:\n\n@Override\npublic long skip(long n) throws IOException {\n    //delegate to read()\n    long bytesRead = 0;\n    while ((bytesRead < n) && (read() != -1)) {\n        bytesRead++;\n    }\n    return bytesRead;\n}\n\nMore efficient code may be possible.",
            "commit number version hash": 728,
            "commit number": 542,
            "function that changed": [
                {
                    "function name": "testSkipNone",
                    "function params": [],
                    "file name": "Base32InputStreamTest.java",
                    "file old path": "src/test/java/org/apache/commons/codec/binary/Base32InputStreamTest.java",
                    "file new path": "src/test/java/org/apache/commons/codec/binary/Base32InputStreamTest.java",
                    "full name": "src.test.java.org.apache.commons.codec.binary.Base32InputStreamTest.testSkipNone"
                },
                {
                    "function name": "testMarkSupported",
                    "function params": [],
                    "file name": "Base32InputStreamTest.java",
                    "file old path": "src/test/java/org/apache/commons/codec/binary/Base32InputStreamTest.java",
                    "file new path": "src/test/java/org/apache/commons/codec/binary/Base32InputStreamTest.java",
                    "full name": "src.test.java.org.apache.commons.codec.binary.Base32InputStreamTest.testMarkSupported"
                },
                {
                    "function name": "testSkipPastEnd",
                    "function params": [],
                    "file name": "Base32InputStreamTest.java",
                    "file old path": "src/test/java/org/apache/commons/codec/binary/Base32InputStreamTest.java",
                    "file new path": "src/test/java/org/apache/commons/codec/binary/Base32InputStreamTest.java",
                    "full name": "src.test.java.org.apache.commons.codec.binary.Base32InputStreamTest.testSkipPastEnd"
                },
                {
                    "function name": "testRead0",
                    "function params": [],
                    "file name": "Base32InputStreamTest.java",
                    "file old path": "src/test/java/org/apache/commons/codec/binary/Base32InputStreamTest.java",
                    "file new path": "src/test/java/org/apache/commons/codec/binary/Base32InputStreamTest.java",
                    "full name": "src.test.java.org.apache.commons.codec.binary.Base32InputStreamTest.testRead0"
                },
                {
                    "function name": "testReadNull",
                    "function params": [],
                    "file name": "Base32InputStreamTest.java",
                    "file old path": "src/test/java/org/apache/commons/codec/binary/Base32InputStreamTest.java",
                    "file new path": "src/test/java/org/apache/commons/codec/binary/Base32InputStreamTest.java",
                    "full name": "src.test.java.org.apache.commons.codec.binary.Base32InputStreamTest.testReadNull"
                },
                {
                    "function name": "testSkipToEnd",
                    "function params": [],
                    "file name": "Base32InputStreamTest.java",
                    "file old path": "src/test/java/org/apache/commons/codec/binary/Base32InputStreamTest.java",
                    "file new path": "src/test/java/org/apache/commons/codec/binary/Base32InputStreamTest.java",
                    "full name": "src.test.java.org.apache.commons.codec.binary.Base32InputStreamTest.testSkipToEnd"
                },
                {
                    "function name": "testBase32InputStreamByChunk",
                    "function params": [],
                    "file name": "Base32InputStreamTest.java",
                    "file old path": "src/test/java/org/apache/commons/codec/binary/Base32InputStreamTest.java",
                    "file new path": "src/test/java/org/apache/commons/codec/binary/Base32InputStreamTest.java",
                    "full name": "src.test.java.org.apache.commons.codec.binary.Base32InputStreamTest.testBase32InputStreamByChunk"
                },
                {
                    "function name": "testBase32InputStreamByteByByte",
                    "function params": [],
                    "file name": "Base32InputStreamTest.java",
                    "file old path": "src/test/java/org/apache/commons/codec/binary/Base32InputStreamTest.java",
                    "file new path": "src/test/java/org/apache/commons/codec/binary/Base32InputStreamTest.java",
                    "full name": "src.test.java.org.apache.commons.codec.binary.Base32InputStreamTest.testBase32InputStreamByteByByte"
                },
                {
                    "function name": "testReadOutOfBounds",
                    "function params": [],
                    "file name": "Base32InputStreamTest.java",
                    "file old path": "src/test/java/org/apache/commons/codec/binary/Base32InputStreamTest.java",
                    "file new path": "src/test/java/org/apache/commons/codec/binary/Base32InputStreamTest.java",
                    "full name": "src.test.java.org.apache.commons.codec.binary.Base32InputStreamTest.testReadOutOfBounds"
                }
            ],
            "files that changed": [
                "src/test/java/org/apache/commons/codec/binary/Base32InputStreamTest.java"
            ]
        },
        {
            "bug index": "114",
            "bug id": "CODEC-130",
            "hexsha": "55a0c64a1d75cab8930bcaad6fee3d62c10ac916",
            "fix_hash": "034c04194dba4a3d8b7282940f3f99ade6bf9a95",
            "description": "Base64InputStream.skip() skips within underlying stream, leading to unexpected behaviour.\n\nThe following code will reproduce the issue:\n\n@Test\npublic void testSkip() throws Throwable {\n    InputStream ins =\n            new ByteArrayInputStream(\"AAAA////\".getBytes(\"ISO-8859-1\"));//should decode to {0, 0, 0, 255, 255, 255}\n    Base64InputStream instance = new Base64InputStream(ins);\n    assertEquals(3L, instance.skip(3L)); //should skip 3 decoded characters, or 4 encoded characters\n    assertEquals(255, instance.read()); //Currently returns 3, as it is decoding \"A/\", not \"//\" \n}\n\nThe following code, if added to Base64InputStream, or (BaseNCodecInputStream in the dev build) would resolve the issue:\n\n@Override\npublic long skip(long n) throws IOException {\n    //delegate to read()\n    long bytesRead = 0;\n    while ((bytesRead < n) && (read() != -1)) {\n        bytesRead++;\n    }\n    return bytesRead;\n}\n\nMore efficient code may be possible.",
            "commit number version hash": 728,
            "commit number": 541,
            "function that changed": [
                {
                    "function name": "testReadNull",
                    "function params": [],
                    "file name": "Base64InputStreamTest.java",
                    "file old path": "src/test/java/org/apache/commons/codec/binary/Base64InputStreamTest.java",
                    "file new path": "src/test/java/org/apache/commons/codec/binary/Base64InputStreamTest.java",
                    "full name": "src.test.java.org.apache.commons.codec.binary.Base64InputStreamTest.testReadNull"
                },
                {
                    "function name": "testBase64InputStreamByteByByte",
                    "function params": [],
                    "file name": "Base64InputStreamTest.java",
                    "file old path": "src/test/java/org/apache/commons/codec/binary/Base64InputStreamTest.java",
                    "file new path": "src/test/java/org/apache/commons/codec/binary/Base64InputStreamTest.java",
                    "full name": "src.test.java.org.apache.commons.codec.binary.Base64InputStreamTest.testBase64InputStreamByteByByte"
                },
                {
                    "function name": "testSkipToEnd",
                    "function params": [],
                    "file name": "Base64InputStreamTest.java",
                    "file old path": "src/test/java/org/apache/commons/codec/binary/Base64InputStreamTest.java",
                    "file new path": "src/test/java/org/apache/commons/codec/binary/Base64InputStreamTest.java",
                    "full name": "src.test.java.org.apache.commons.codec.binary.Base64InputStreamTest.testSkipToEnd"
                },
                {
                    "function name": "testRead0",
                    "function params": [],
                    "file name": "Base64InputStreamTest.java",
                    "file old path": "src/test/java/org/apache/commons/codec/binary/Base64InputStreamTest.java",
                    "file new path": "src/test/java/org/apache/commons/codec/binary/Base64InputStreamTest.java",
                    "full name": "src.test.java.org.apache.commons.codec.binary.Base64InputStreamTest.testRead0"
                },
                {
                    "function name": "testCodec98NPE",
                    "function params": [],
                    "file name": "Base64InputStreamTest.java",
                    "file old path": "src/test/java/org/apache/commons/codec/binary/Base64InputStreamTest.java",
                    "file new path": "src/test/java/org/apache/commons/codec/binary/Base64InputStreamTest.java",
                    "full name": "src.test.java.org.apache.commons.codec.binary.Base64InputStreamTest.testCodec98NPE"
                },
                {
                    "function name": "testSkipNone",
                    "function params": [],
                    "file name": "Base64InputStreamTest.java",
                    "file old path": "src/test/java/org/apache/commons/codec/binary/Base64InputStreamTest.java",
                    "file new path": "src/test/java/org/apache/commons/codec/binary/Base64InputStreamTest.java",
                    "full name": "src.test.java.org.apache.commons.codec.binary.Base64InputStreamTest.testSkipNone"
                },
                {
                    "function name": "testReadOutOfBounds",
                    "function params": [],
                    "file name": "Base64InputStreamTest.java",
                    "file old path": "src/test/java/org/apache/commons/codec/binary/Base64InputStreamTest.java",
                    "file new path": "src/test/java/org/apache/commons/codec/binary/Base64InputStreamTest.java",
                    "full name": "src.test.java.org.apache.commons.codec.binary.Base64InputStreamTest.testReadOutOfBounds"
                },
                {
                    "function name": "testSkipPastEnd",
                    "function params": [],
                    "file name": "Base64InputStreamTest.java",
                    "file old path": "src/test/java/org/apache/commons/codec/binary/Base64InputStreamTest.java",
                    "file new path": "src/test/java/org/apache/commons/codec/binary/Base64InputStreamTest.java",
                    "full name": "src.test.java.org.apache.commons.codec.binary.Base64InputStreamTest.testSkipPastEnd"
                },
                {
                    "function name": "testBase64InputStreamByChunk",
                    "function params": [],
                    "file name": "Base64InputStreamTest.java",
                    "file old path": "src/test/java/org/apache/commons/codec/binary/Base64InputStreamTest.java",
                    "file new path": "src/test/java/org/apache/commons/codec/binary/Base64InputStreamTest.java",
                    "full name": "src.test.java.org.apache.commons.codec.binary.Base64InputStreamTest.testBase64InputStreamByChunk"
                },
                {
                    "function name": "testMarkSupported",
                    "function params": [],
                    "file name": "Base64InputStreamTest.java",
                    "file old path": "src/test/java/org/apache/commons/codec/binary/Base64InputStreamTest.java",
                    "file new path": "src/test/java/org/apache/commons/codec/binary/Base64InputStreamTest.java",
                    "full name": "src.test.java.org.apache.commons.codec.binary.Base64InputStreamTest.testMarkSupported"
                }
            ],
            "files that changed": [
                "src/test/java/org/apache/commons/codec/binary/Base64InputStreamTest.java"
            ]
        },
        {
            "bug index": "115",
            "bug id": "CODEC-128",
            "hexsha": "7e8c20bd1b0593c3496a168be573aed40609a433",
            "fix_hash": "919d3ec4adbaf64cb6b7e9f40f82432b2159d510",
            "description": null,
            "commit number version hash": 550,
            "commit number": 539,
            "function that changed": [],
            "files that changed": [
                "src/java/org/apache/commons/codec/CharEncoding.java",
                "src/java/org/apache/commons/codec/Encoder.java",
                "src/java/org/apache/commons/codec/StringEncoder.java",
                "src/java/org/apache/commons/codec/binary/StringUtils.java",
                "src/java/org/apache/commons/codec/language/ColognePhonetic.java",
                "src/java/org/apache/commons/codec/language/RefinedSoundex.java",
                "src/java/org/apache/commons/codec/net/QCodec.java",
                "src/java/org/apache/commons/codec/net/RFC1522Codec.java"
            ]
        },
        {
            "bug index": "116",
            "bug id": "CODEC-127",
            "hexsha": "7e8c20bd1b0593c3496a168be573aed40609a433",
            "fix_hash": "7211918f48e27560e523727beff689ff8545ecd2",
            "description": "Some of the test cases include characters in a native encoding (possibly UTF-8), rather than using Unicode escapes.\n\nThis can cause a problem for IDEs if they don't know the encoding (e.g. cause compilation errors, which is how I found the issue), and possibly some transformations may corrupt the contents, e.g. fixing EOL.\n\nI think we should have a rule of using Unicode escapes for all such non-ascii characters.\nIt's particularly important for non-ISO-8859-1 characters.\n\nSome example classes with non-ascii characters:\n\n{code}\nbinary\\Base64Test.java:96         byte[] decode = b64.decode(\"SGVsbG{\u00b4\u2510\u00a2\u00b4\u2510\u00a2\u00b4\u2510\u00a2\u00b4\u2510\u00a2\u00b4\u2510\u00a2\u00b4\u2510\u00a2}8gV29ybGQ=\");\nlanguage\\ColognePhoneticTest.java:110             {\"m\u251c\u00c2nchengladbach\", \"664645214\"},\nlanguage\\ColognePhoneticTest.java:130         String[][] data = {{\"bergisch-gladbach\", \"174845214\"}, {\"M\u251c\u255dller-L\u251c\u255ddenscheidt\", \"65752682\"}};\nlanguage\\ColognePhoneticTest.java:137             {\"Meyer\", \"M\u251c\u255dller\"},\nlanguage\\ColognePhoneticTest.java:143             {\"ganz\", \"G\u251c\u00f1nse\"},\nlanguage\\DoubleMetaphoneTest.java:1222         this.getDoubleMetaphone().isDoubleMetaphoneEqual(\"\u00b4\u2510\u00a2\", \"S\");\nlanguage\\DoubleMetaphoneTest.java:1227         this.getDoubleMetaphone().isDoubleMetaphoneEqual(\"\u00b4\u2510\u00a2\", \"N\");\nlanguage\\SoundexTest.java:367         if (Character.isLetter('\u00b4\u2510\u00a2')) {\nlanguage\\SoundexTest.java:369                 Assert.assertEquals(\"\u00b4\u2510\u00a2000\", this.getSoundexEncoder().encode(\"\u00b4\u2510\u00a2\"));\nlanguage\\SoundexTest.java:375             Assert.assertEquals(\"\", this.getSoundexEncoder().encode(\"\u00b4\u2510\u00a2\"));\nlanguage\\SoundexTest.java:387         if (Character.isLetter('\u00b4\u2510\u00a2')) {\nlanguage\\SoundexTest.java:389                 Assert.assertEquals(\"\u00b4\u2510\u00a2000\", this.getSoundexEncoder().encode(\"\u00b4\u2510\u00a2\"));\nlanguage\\SoundexTest.java:395             Assert.assertEquals(\"\", this.getSoundexEncoder().encode(\"\u00b4\u2510\u00a2\"));\n{code}\n\nThe characters are probably not correct above, because I used a crude perl script to find them:\n\n{code}\nperl -ne \"$.=1 if $s ne $ARGV;print qq($ARGV:$. $_) if m/\\P{ASCII}/;$s=$ARGV;\" xxxx.java\n{code}\n\nlanguage\\SoundexTest.java:367 in particular is incorrect, because it's supposed to be a single character.\n\nNow one might think that native2ascii -encoding UTF-8 would fix that, but it gives:\n\nif (Character.isLetter('\\ufffd'))\n\nwhich is an \"unknown\" character.\n\nSimilarly for binary\\Base64Test.java:96.\n\nIt's not all that clear what the Unicode escapes should be in these cases, but probably not the unknown character.\n\n[Possibly the characters got mangled at some point, or maybe they have always been wrong]\n\nThe ColognePhoneticTest.java cases are less serious, as the characters are valid ISO-8859-1 (accented German), but given that the rest of the file uses unicode escaps, I think they should be changed too (but add comments to say what they are, e.g. o-umlaut, u-umlaut)",
            "commit number version hash": 550,
            "commit number": 536,
            "function that changed": [
                {
                    "function name": "data",
                    "function params": [],
                    "file name": "LanguageGuessingTest.java",
                    "file old path": "src/test/org/apache/commons/codec/language/bm/LanguageGuessingTest.java",
                    "file new path": "src/test/org/apache/commons/codec/language/bm/LanguageGuessingTest.java",
                    "full name": "src.test.org.apache.commons.codec.language.bm.LanguageGuessingTest.data"
                }
            ],
            "files that changed": [
                "src/test/org/apache/commons/codec/language/bm/LanguageGuessingTest.java"
            ]
        },
        {
            "bug index": "117",
            "bug id": "CODEC-127",
            "hexsha": "7e8c20bd1b0593c3496a168be573aed40609a433",
            "fix_hash": "6f73fb162af41879fa801d86ae2772a9ac14121c",
            "description": "Some of the test cases include characters in a native encoding (possibly UTF-8), rather than using Unicode escapes.\n\nThis can cause a problem for IDEs if they don't know the encoding (e.g. cause compilation errors, which is how I found the issue), and possibly some transformations may corrupt the contents, e.g. fixing EOL.\n\nI think we should have a rule of using Unicode escapes for all such non-ascii characters.\nIt's particularly important for non-ISO-8859-1 characters.\n\nSome example classes with non-ascii characters:\n\n{code}\nbinary\\Base64Test.java:96         byte[] decode = b64.decode(\"SGVsbG{\u00b4\u2510\u00a2\u00b4\u2510\u00a2\u00b4\u2510\u00a2\u00b4\u2510\u00a2\u00b4\u2510\u00a2\u00b4\u2510\u00a2}8gV29ybGQ=\");\nlanguage\\ColognePhoneticTest.java:110             {\"m\u251c\u00c2nchengladbach\", \"664645214\"},\nlanguage\\ColognePhoneticTest.java:130         String[][] data = {{\"bergisch-gladbach\", \"174845214\"}, {\"M\u251c\u255dller-L\u251c\u255ddenscheidt\", \"65752682\"}};\nlanguage\\ColognePhoneticTest.java:137             {\"Meyer\", \"M\u251c\u255dller\"},\nlanguage\\ColognePhoneticTest.java:143             {\"ganz\", \"G\u251c\u00f1nse\"},\nlanguage\\DoubleMetaphoneTest.java:1222         this.getDoubleMetaphone().isDoubleMetaphoneEqual(\"\u00b4\u2510\u00a2\", \"S\");\nlanguage\\DoubleMetaphoneTest.java:1227         this.getDoubleMetaphone().isDoubleMetaphoneEqual(\"\u00b4\u2510\u00a2\", \"N\");\nlanguage\\SoundexTest.java:367         if (Character.isLetter('\u00b4\u2510\u00a2')) {\nlanguage\\SoundexTest.java:369                 Assert.assertEquals(\"\u00b4\u2510\u00a2000\", this.getSoundexEncoder().encode(\"\u00b4\u2510\u00a2\"));\nlanguage\\SoundexTest.java:375             Assert.assertEquals(\"\", this.getSoundexEncoder().encode(\"\u00b4\u2510\u00a2\"));\nlanguage\\SoundexTest.java:387         if (Character.isLetter('\u00b4\u2510\u00a2')) {\nlanguage\\SoundexTest.java:389                 Assert.assertEquals(\"\u00b4\u2510\u00a2000\", this.getSoundexEncoder().encode(\"\u00b4\u2510\u00a2\"));\nlanguage\\SoundexTest.java:395             Assert.assertEquals(\"\", this.getSoundexEncoder().encode(\"\u00b4\u2510\u00a2\"));\n{code}\n\nThe characters are probably not correct above, because I used a crude perl script to find them:\n\n{code}\nperl -ne \"$.=1 if $s ne $ARGV;print qq($ARGV:$. $_) if m/\\P{ASCII}/;$s=$ARGV;\" xxxx.java\n{code}\n\nlanguage\\SoundexTest.java:367 in particular is incorrect, because it's supposed to be a single character.\n\nNow one might think that native2ascii -encoding UTF-8 would fix that, but it gives:\n\nif (Character.isLetter('\\ufffd'))\n\nwhich is an \"unknown\" character.\n\nSimilarly for binary\\Base64Test.java:96.\n\nIt's not all that clear what the Unicode escapes should be in these cases, but probably not the unknown character.\n\n[Possibly the characters got mangled at some point, or maybe they have always been wrong]\n\nThe ColognePhoneticTest.java cases are less serious, as the characters are valid ISO-8859-1 (accented German), but given that the rest of the file uses unicode escaps, I think they should be changed too (but add comments to say what they are, e.g. o-umlaut, u-umlaut)",
            "commit number version hash": 550,
            "commit number": 535,
            "function that changed": [
                {
                    "function name": "testSetConcat",
                    "function params": [],
                    "file name": "BeiderMorseEncoderTest.java",
                    "file old path": "src/test/org/apache/commons/codec/language/bm/BeiderMorseEncoderTest.java",
                    "file new path": "src/test/org/apache/commons/codec/language/bm/BeiderMorseEncoderTest.java",
                    "full name": "src.test.org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testSetConcat"
                },
                {
                    "function name": "testEncodeAtzNotEmpty",
                    "function params": [],
                    "file name": "BeiderMorseEncoderTest.java",
                    "file old path": "src/test/org/apache/commons/codec/language/bm/BeiderMorseEncoderTest.java",
                    "file new path": "src/test/org/apache/commons/codec/language/bm/BeiderMorseEncoderTest.java",
                    "full name": "src.test.org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testEncodeAtzNotEmpty"
                }
            ],
            "files that changed": [
                "src/test/org/apache/commons/codec/language/bm/BeiderMorseEncoderTest.java"
            ]
        },
        {
            "bug index": "118",
            "bug id": "CODEC-127",
            "hexsha": "7e8c20bd1b0593c3496a168be573aed40609a433",
            "fix_hash": "6db3ec307d73d1f80391e593789d2175b668d761",
            "description": "Some of the test cases include characters in a native encoding (possibly UTF-8), rather than using Unicode escapes.\n\nThis can cause a problem for IDEs if they don't know the encoding (e.g. cause compilation errors, which is how I found the issue), and possibly some transformations may corrupt the contents, e.g. fixing EOL.\n\nI think we should have a rule of using Unicode escapes for all such non-ascii characters.\nIt's particularly important for non-ISO-8859-1 characters.\n\nSome example classes with non-ascii characters:\n\n{code}\nbinary\\Base64Test.java:96         byte[] decode = b64.decode(\"SGVsbG{\u00b4\u2510\u00a2\u00b4\u2510\u00a2\u00b4\u2510\u00a2\u00b4\u2510\u00a2\u00b4\u2510\u00a2\u00b4\u2510\u00a2}8gV29ybGQ=\");\nlanguage\\ColognePhoneticTest.java:110             {\"m\u251c\u00c2nchengladbach\", \"664645214\"},\nlanguage\\ColognePhoneticTest.java:130         String[][] data = {{\"bergisch-gladbach\", \"174845214\"}, {\"M\u251c\u255dller-L\u251c\u255ddenscheidt\", \"65752682\"}};\nlanguage\\ColognePhoneticTest.java:137             {\"Meyer\", \"M\u251c\u255dller\"},\nlanguage\\ColognePhoneticTest.java:143             {\"ganz\", \"G\u251c\u00f1nse\"},\nlanguage\\DoubleMetaphoneTest.java:1222         this.getDoubleMetaphone().isDoubleMetaphoneEqual(\"\u00b4\u2510\u00a2\", \"S\");\nlanguage\\DoubleMetaphoneTest.java:1227         this.getDoubleMetaphone().isDoubleMetaphoneEqual(\"\u00b4\u2510\u00a2\", \"N\");\nlanguage\\SoundexTest.java:367         if (Character.isLetter('\u00b4\u2510\u00a2')) {\nlanguage\\SoundexTest.java:369                 Assert.assertEquals(\"\u00b4\u2510\u00a2000\", this.getSoundexEncoder().encode(\"\u00b4\u2510\u00a2\"));\nlanguage\\SoundexTest.java:375             Assert.assertEquals(\"\", this.getSoundexEncoder().encode(\"\u00b4\u2510\u00a2\"));\nlanguage\\SoundexTest.java:387         if (Character.isLetter('\u00b4\u2510\u00a2')) {\nlanguage\\SoundexTest.java:389                 Assert.assertEquals(\"\u00b4\u2510\u00a2000\", this.getSoundexEncoder().encode(\"\u00b4\u2510\u00a2\"));\nlanguage\\SoundexTest.java:395             Assert.assertEquals(\"\", this.getSoundexEncoder().encode(\"\u00b4\u2510\u00a2\"));\n{code}\n\nThe characters are probably not correct above, because I used a crude perl script to find them:\n\n{code}\nperl -ne \"$.=1 if $s ne $ARGV;print qq($ARGV:$. $_) if m/\\P{ASCII}/;$s=$ARGV;\" xxxx.java\n{code}\n\nlanguage\\SoundexTest.java:367 in particular is incorrect, because it's supposed to be a single character.\n\nNow one might think that native2ascii -encoding UTF-8 would fix that, but it gives:\n\nif (Character.isLetter('\\ufffd'))\n\nwhich is an \"unknown\" character.\n\nSimilarly for binary\\Base64Test.java:96.\n\nIt's not all that clear what the Unicode escapes should be in these cases, but probably not the unknown character.\n\n[Possibly the characters got mangled at some point, or maybe they have always been wrong]\n\nThe ColognePhoneticTest.java cases are less serious, as the characters are valid ISO-8859-1 (accented German), but given that the rest of the file uses unicode escaps, I think they should be changed too (but add comments to say what they are, e.g. o-umlaut, u-umlaut)",
            "commit number version hash": 550,
            "commit number": 534,
            "function that changed": [
                {
                    "function name": "testNTilde",
                    "function params": [],
                    "file name": "DoubleMetaphoneTest.java",
                    "file old path": "src/test/org/apache/commons/codec/language/DoubleMetaphoneTest.java",
                    "file new path": "src/test/org/apache/commons/codec/language/DoubleMetaphoneTest.java",
                    "full name": "src.test.org.apache.commons.codec.language.DoubleMetaphoneTest.testNTilde"
                },
                {
                    "function name": "testCCedilla",
                    "function params": [],
                    "file name": "DoubleMetaphoneTest.java",
                    "file old path": "src/test/org/apache/commons/codec/language/DoubleMetaphoneTest.java",
                    "file new path": "src/test/org/apache/commons/codec/language/DoubleMetaphoneTest.java",
                    "full name": "src.test.org.apache.commons.codec.language.DoubleMetaphoneTest.testCCedilla"
                }
            ],
            "files that changed": [
                "src/test/org/apache/commons/codec/language/DoubleMetaphoneTest.java"
            ]
        },
        {
            "bug index": "119",
            "bug id": "CODEC-127",
            "hexsha": "7e8c20bd1b0593c3496a168be573aed40609a433",
            "fix_hash": "dace53f5b2dc2791fc6a0c6981fe2756be405cec",
            "description": "Some of the test cases include characters in a native encoding (possibly UTF-8), rather than using Unicode escapes.\n\nThis can cause a problem for IDEs if they don't know the encoding (e.g. cause compilation errors, which is how I found the issue), and possibly some transformations may corrupt the contents, e.g. fixing EOL.\n\nI think we should have a rule of using Unicode escapes for all such non-ascii characters.\nIt's particularly important for non-ISO-8859-1 characters.\n\nSome example classes with non-ascii characters:\n\n{code}\nbinary\\Base64Test.java:96         byte[] decode = b64.decode(\"SGVsbG{\u00b4\u2510\u00a2\u00b4\u2510\u00a2\u00b4\u2510\u00a2\u00b4\u2510\u00a2\u00b4\u2510\u00a2\u00b4\u2510\u00a2}8gV29ybGQ=\");\nlanguage\\ColognePhoneticTest.java:110             {\"m\u251c\u00c2nchengladbach\", \"664645214\"},\nlanguage\\ColognePhoneticTest.java:130         String[][] data = {{\"bergisch-gladbach\", \"174845214\"}, {\"M\u251c\u255dller-L\u251c\u255ddenscheidt\", \"65752682\"}};\nlanguage\\ColognePhoneticTest.java:137             {\"Meyer\", \"M\u251c\u255dller\"},\nlanguage\\ColognePhoneticTest.java:143             {\"ganz\", \"G\u251c\u00f1nse\"},\nlanguage\\DoubleMetaphoneTest.java:1222         this.getDoubleMetaphone().isDoubleMetaphoneEqual(\"\u00b4\u2510\u00a2\", \"S\");\nlanguage\\DoubleMetaphoneTest.java:1227         this.getDoubleMetaphone().isDoubleMetaphoneEqual(\"\u00b4\u2510\u00a2\", \"N\");\nlanguage\\SoundexTest.java:367         if (Character.isLetter('\u00b4\u2510\u00a2')) {\nlanguage\\SoundexTest.java:369                 Assert.assertEquals(\"\u00b4\u2510\u00a2000\", this.getSoundexEncoder().encode(\"\u00b4\u2510\u00a2\"));\nlanguage\\SoundexTest.java:375             Assert.assertEquals(\"\", this.getSoundexEncoder().encode(\"\u00b4\u2510\u00a2\"));\nlanguage\\SoundexTest.java:387         if (Character.isLetter('\u00b4\u2510\u00a2')) {\nlanguage\\SoundexTest.java:389                 Assert.assertEquals(\"\u00b4\u2510\u00a2000\", this.getSoundexEncoder().encode(\"\u00b4\u2510\u00a2\"));\nlanguage\\SoundexTest.java:395             Assert.assertEquals(\"\", this.getSoundexEncoder().encode(\"\u00b4\u2510\u00a2\"));\n{code}\n\nThe characters are probably not correct above, because I used a crude perl script to find them:\n\n{code}\nperl -ne \"$.=1 if $s ne $ARGV;print qq($ARGV:$. $_) if m/\\P{ASCII}/;$s=$ARGV;\" xxxx.java\n{code}\n\nlanguage\\SoundexTest.java:367 in particular is incorrect, because it's supposed to be a single character.\n\nNow one might think that native2ascii -encoding UTF-8 would fix that, but it gives:\n\nif (Character.isLetter('\\ufffd'))\n\nwhich is an \"unknown\" character.\n\nSimilarly for binary\\Base64Test.java:96.\n\nIt's not all that clear what the Unicode escapes should be in these cases, but probably not the unknown character.\n\n[Possibly the characters got mangled at some point, or maybe they have always been wrong]\n\nThe ColognePhoneticTest.java cases are less serious, as the characters are valid ISO-8859-1 (accented German), but given that the rest of the file uses unicode escaps, I think they should be changed too (but add comments to say what they are, e.g. o-umlaut, u-umlaut)",
            "commit number version hash": 550,
            "commit number": 533,
            "function that changed": [
                {
                    "function name": "testNTilde",
                    "function params": [],
                    "file name": "DoubleMetaphoneTest.java",
                    "file old path": "src/test/org/apache/commons/codec/language/DoubleMetaphoneTest.java",
                    "file new path": "src/test/org/apache/commons/codec/language/DoubleMetaphoneTest.java",
                    "full name": "src.test.org.apache.commons.codec.language.DoubleMetaphoneTest.testNTilde"
                },
                {
                    "function name": "testCCedilla",
                    "function params": [],
                    "file name": "DoubleMetaphoneTest.java",
                    "file old path": "src/test/org/apache/commons/codec/language/DoubleMetaphoneTest.java",
                    "file new path": "src/test/org/apache/commons/codec/language/DoubleMetaphoneTest.java",
                    "full name": "src.test.org.apache.commons.codec.language.DoubleMetaphoneTest.testCCedilla"
                }
            ],
            "files that changed": [
                "src/test/org/apache/commons/codec/language/DoubleMetaphoneTest.java"
            ]
        },
        {
            "bug index": "120",
            "bug id": "CODEC-127",
            "hexsha": "7e8c20bd1b0593c3496a168be573aed40609a433",
            "fix_hash": "300d24e65b215b1e8278286bc8b1d7a0a9a871d6",
            "description": "Some of the test cases include characters in a native encoding (possibly UTF-8), rather than using Unicode escapes.\n\nThis can cause a problem for IDEs if they don't know the encoding (e.g. cause compilation errors, which is how I found the issue), and possibly some transformations may corrupt the contents, e.g. fixing EOL.\n\nI think we should have a rule of using Unicode escapes for all such non-ascii characters.\nIt's particularly important for non-ISO-8859-1 characters.\n\nSome example classes with non-ascii characters:\n\n{code}\nbinary\\Base64Test.java:96         byte[] decode = b64.decode(\"SGVsbG{\u00b4\u2510\u00a2\u00b4\u2510\u00a2\u00b4\u2510\u00a2\u00b4\u2510\u00a2\u00b4\u2510\u00a2\u00b4\u2510\u00a2}8gV29ybGQ=\");\nlanguage\\ColognePhoneticTest.java:110             {\"m\u251c\u00c2nchengladbach\", \"664645214\"},\nlanguage\\ColognePhoneticTest.java:130         String[][] data = {{\"bergisch-gladbach\", \"174845214\"}, {\"M\u251c\u255dller-L\u251c\u255ddenscheidt\", \"65752682\"}};\nlanguage\\ColognePhoneticTest.java:137             {\"Meyer\", \"M\u251c\u255dller\"},\nlanguage\\ColognePhoneticTest.java:143             {\"ganz\", \"G\u251c\u00f1nse\"},\nlanguage\\DoubleMetaphoneTest.java:1222         this.getDoubleMetaphone().isDoubleMetaphoneEqual(\"\u00b4\u2510\u00a2\", \"S\");\nlanguage\\DoubleMetaphoneTest.java:1227         this.getDoubleMetaphone().isDoubleMetaphoneEqual(\"\u00b4\u2510\u00a2\", \"N\");\nlanguage\\SoundexTest.java:367         if (Character.isLetter('\u00b4\u2510\u00a2')) {\nlanguage\\SoundexTest.java:369                 Assert.assertEquals(\"\u00b4\u2510\u00a2000\", this.getSoundexEncoder().encode(\"\u00b4\u2510\u00a2\"));\nlanguage\\SoundexTest.java:375             Assert.assertEquals(\"\", this.getSoundexEncoder().encode(\"\u00b4\u2510\u00a2\"));\nlanguage\\SoundexTest.java:387         if (Character.isLetter('\u00b4\u2510\u00a2')) {\nlanguage\\SoundexTest.java:389                 Assert.assertEquals(\"\u00b4\u2510\u00a2000\", this.getSoundexEncoder().encode(\"\u00b4\u2510\u00a2\"));\nlanguage\\SoundexTest.java:395             Assert.assertEquals(\"\", this.getSoundexEncoder().encode(\"\u00b4\u2510\u00a2\"));\n{code}\n\nThe characters are probably not correct above, because I used a crude perl script to find them:\n\n{code}\nperl -ne \"$.=1 if $s ne $ARGV;print qq($ARGV:$. $_) if m/\\P{ASCII}/;$s=$ARGV;\" xxxx.java\n{code}\n\nlanguage\\SoundexTest.java:367 in particular is incorrect, because it's supposed to be a single character.\n\nNow one might think that native2ascii -encoding UTF-8 would fix that, but it gives:\n\nif (Character.isLetter('\\ufffd'))\n\nwhich is an \"unknown\" character.\n\nSimilarly for binary\\Base64Test.java:96.\n\nIt's not all that clear what the Unicode escapes should be in these cases, but probably not the unknown character.\n\n[Possibly the characters got mangled at some point, or maybe they have always been wrong]\n\nThe ColognePhoneticTest.java cases are less serious, as the characters are valid ISO-8859-1 (accented German), but given that the rest of the file uses unicode escaps, I think they should be changed too (but add comments to say what they are, e.g. o-umlaut, u-umlaut)",
            "commit number version hash": 550,
            "commit number": 532,
            "function that changed": [
                {
                    "function name": "testExamples",
                    "function params": [],
                    "file name": "ColognePhoneticTest.java",
                    "file old path": "src/test/org/apache/commons/codec/language/ColognePhoneticTest.java",
                    "file new path": "src/test/org/apache/commons/codec/language/ColognePhoneticTest.java",
                    "full name": "src.test.org.apache.commons.codec.language.ColognePhoneticTest.testExamples"
                },
                {
                    "function name": "testIsEncodeEquals",
                    "function params": [],
                    "file name": "ColognePhoneticTest.java",
                    "file old path": "src/test/org/apache/commons/codec/language/ColognePhoneticTest.java",
                    "file new path": "src/test/org/apache/commons/codec/language/ColognePhoneticTest.java",
                    "full name": "src.test.org.apache.commons.codec.language.ColognePhoneticTest.testIsEncodeEquals"
                },
                {
                    "function name": "testHyphen",
                    "function params": [],
                    "file name": "ColognePhoneticTest.java",
                    "file old path": "src/test/org/apache/commons/codec/language/ColognePhoneticTest.java",
                    "file new path": "src/test/org/apache/commons/codec/language/ColognePhoneticTest.java",
                    "full name": "src.test.org.apache.commons.codec.language.ColognePhoneticTest.testHyphen"
                },
                {
                    "function name": "testEdgeCases",
                    "function params": [],
                    "file name": "ColognePhoneticTest.java",
                    "file old path": "src/test/org/apache/commons/codec/language/ColognePhoneticTest.java",
                    "file new path": "src/test/org/apache/commons/codec/language/ColognePhoneticTest.java",
                    "full name": "src.test.org.apache.commons.codec.language.ColognePhoneticTest.testEdgeCases"
                }
            ],
            "files that changed": [
                "src/test/org/apache/commons/codec/language/ColognePhoneticTest.java"
            ]
        },
        {
            "bug index": "121",
            "bug id": "CODEC-127",
            "hexsha": "7e8c20bd1b0593c3496a168be573aed40609a433",
            "fix_hash": "b472b1742ad55d0cdef007f10f6062990300eaf8",
            "description": "Some of the test cases include characters in a native encoding (possibly UTF-8), rather than using Unicode escapes.\n\nThis can cause a problem for IDEs if they don't know the encoding (e.g. cause compilation errors, which is how I found the issue), and possibly some transformations may corrupt the contents, e.g. fixing EOL.\n\nI think we should have a rule of using Unicode escapes for all such non-ascii characters.\nIt's particularly important for non-ISO-8859-1 characters.\n\nSome example classes with non-ascii characters:\n\n{code}\nbinary\\Base64Test.java:96         byte[] decode = b64.decode(\"SGVsbG{\u00b4\u2510\u00a2\u00b4\u2510\u00a2\u00b4\u2510\u00a2\u00b4\u2510\u00a2\u00b4\u2510\u00a2\u00b4\u2510\u00a2}8gV29ybGQ=\");\nlanguage\\ColognePhoneticTest.java:110             {\"m\u251c\u00c2nchengladbach\", \"664645214\"},\nlanguage\\ColognePhoneticTest.java:130         String[][] data = {{\"bergisch-gladbach\", \"174845214\"}, {\"M\u251c\u255dller-L\u251c\u255ddenscheidt\", \"65752682\"}};\nlanguage\\ColognePhoneticTest.java:137             {\"Meyer\", \"M\u251c\u255dller\"},\nlanguage\\ColognePhoneticTest.java:143             {\"ganz\", \"G\u251c\u00f1nse\"},\nlanguage\\DoubleMetaphoneTest.java:1222         this.getDoubleMetaphone().isDoubleMetaphoneEqual(\"\u00b4\u2510\u00a2\", \"S\");\nlanguage\\DoubleMetaphoneTest.java:1227         this.getDoubleMetaphone().isDoubleMetaphoneEqual(\"\u00b4\u2510\u00a2\", \"N\");\nlanguage\\SoundexTest.java:367         if (Character.isLetter('\u00b4\u2510\u00a2')) {\nlanguage\\SoundexTest.java:369                 Assert.assertEquals(\"\u00b4\u2510\u00a2000\", this.getSoundexEncoder().encode(\"\u00b4\u2510\u00a2\"));\nlanguage\\SoundexTest.java:375             Assert.assertEquals(\"\", this.getSoundexEncoder().encode(\"\u00b4\u2510\u00a2\"));\nlanguage\\SoundexTest.java:387         if (Character.isLetter('\u00b4\u2510\u00a2')) {\nlanguage\\SoundexTest.java:389                 Assert.assertEquals(\"\u00b4\u2510\u00a2000\", this.getSoundexEncoder().encode(\"\u00b4\u2510\u00a2\"));\nlanguage\\SoundexTest.java:395             Assert.assertEquals(\"\", this.getSoundexEncoder().encode(\"\u00b4\u2510\u00a2\"));\n{code}\n\nThe characters are probably not correct above, because I used a crude perl script to find them:\n\n{code}\nperl -ne \"$.=1 if $s ne $ARGV;print qq($ARGV:$. $_) if m/\\P{ASCII}/;$s=$ARGV;\" xxxx.java\n{code}\n\nlanguage\\SoundexTest.java:367 in particular is incorrect, because it's supposed to be a single character.\n\nNow one might think that native2ascii -encoding UTF-8 would fix that, but it gives:\n\nif (Character.isLetter('\\ufffd'))\n\nwhich is an \"unknown\" character.\n\nSimilarly for binary\\Base64Test.java:96.\n\nIt's not all that clear what the Unicode escapes should be in these cases, but probably not the unknown character.\n\n[Possibly the characters got mangled at some point, or maybe they have always been wrong]\n\nThe ColognePhoneticTest.java cases are less serious, as the characters are valid ISO-8859-1 (accented German), but given that the rest of the file uses unicode escaps, I think they should be changed too (but add comments to say what they are, e.g. o-umlaut, u-umlaut)",
            "commit number version hash": 550,
            "commit number": 531,
            "function that changed": [
                {
                    "function name": "testUsMappingEWithAcute",
                    "function params": [],
                    "file name": "SoundexTest.java",
                    "file old path": "src/test/org/apache/commons/codec/language/SoundexTest.java",
                    "file new path": "src/test/org/apache/commons/codec/language/SoundexTest.java",
                    "full name": "src.test.org.apache.commons.codec.language.SoundexTest.testUsMappingEWithAcute"
                },
                {
                    "function name": "testUsMappingOWithDiaeresis",
                    "function params": [],
                    "file name": "SoundexTest.java",
                    "file old path": "src/test/org/apache/commons/codec/language/SoundexTest.java",
                    "file new path": "src/test/org/apache/commons/codec/language/SoundexTest.java",
                    "full name": "src.test.org.apache.commons.codec.language.SoundexTest.testUsMappingOWithDiaeresis"
                }
            ],
            "files that changed": [
                "src/test/org/apache/commons/codec/language/SoundexTest.java"
            ]
        },
        {
            "bug index": "122",
            "bug id": "CODEC-127",
            "hexsha": "7e8c20bd1b0593c3496a168be573aed40609a433",
            "fix_hash": "45c71b732ee51851882898bfa331d0563b7291d6",
            "description": "Some of the test cases include characters in a native encoding (possibly UTF-8), rather than using Unicode escapes.\n\nThis can cause a problem for IDEs if they don't know the encoding (e.g. cause compilation errors, which is how I found the issue), and possibly some transformations may corrupt the contents, e.g. fixing EOL.\n\nI think we should have a rule of using Unicode escapes for all such non-ascii characters.\nIt's particularly important for non-ISO-8859-1 characters.\n\nSome example classes with non-ascii characters:\n\n{code}\nbinary\\Base64Test.java:96         byte[] decode = b64.decode(\"SGVsbG{\u00b4\u2510\u00a2\u00b4\u2510\u00a2\u00b4\u2510\u00a2\u00b4\u2510\u00a2\u00b4\u2510\u00a2\u00b4\u2510\u00a2}8gV29ybGQ=\");\nlanguage\\ColognePhoneticTest.java:110             {\"m\u251c\u00c2nchengladbach\", \"664645214\"},\nlanguage\\ColognePhoneticTest.java:130         String[][] data = {{\"bergisch-gladbach\", \"174845214\"}, {\"M\u251c\u255dller-L\u251c\u255ddenscheidt\", \"65752682\"}};\nlanguage\\ColognePhoneticTest.java:137             {\"Meyer\", \"M\u251c\u255dller\"},\nlanguage\\ColognePhoneticTest.java:143             {\"ganz\", \"G\u251c\u00f1nse\"},\nlanguage\\DoubleMetaphoneTest.java:1222         this.getDoubleMetaphone().isDoubleMetaphoneEqual(\"\u00b4\u2510\u00a2\", \"S\");\nlanguage\\DoubleMetaphoneTest.java:1227         this.getDoubleMetaphone().isDoubleMetaphoneEqual(\"\u00b4\u2510\u00a2\", \"N\");\nlanguage\\SoundexTest.java:367         if (Character.isLetter('\u00b4\u2510\u00a2')) {\nlanguage\\SoundexTest.java:369                 Assert.assertEquals(\"\u00b4\u2510\u00a2000\", this.getSoundexEncoder().encode(\"\u00b4\u2510\u00a2\"));\nlanguage\\SoundexTest.java:375             Assert.assertEquals(\"\", this.getSoundexEncoder().encode(\"\u00b4\u2510\u00a2\"));\nlanguage\\SoundexTest.java:387         if (Character.isLetter('\u00b4\u2510\u00a2')) {\nlanguage\\SoundexTest.java:389                 Assert.assertEquals(\"\u00b4\u2510\u00a2000\", this.getSoundexEncoder().encode(\"\u00b4\u2510\u00a2\"));\nlanguage\\SoundexTest.java:395             Assert.assertEquals(\"\", this.getSoundexEncoder().encode(\"\u00b4\u2510\u00a2\"));\n{code}\n\nThe characters are probably not correct above, because I used a crude perl script to find them:\n\n{code}\nperl -ne \"$.=1 if $s ne $ARGV;print qq($ARGV:$. $_) if m/\\P{ASCII}/;$s=$ARGV;\" xxxx.java\n{code}\n\nlanguage\\SoundexTest.java:367 in particular is incorrect, because it's supposed to be a single character.\n\nNow one might think that native2ascii -encoding UTF-8 would fix that, but it gives:\n\nif (Character.isLetter('\\ufffd'))\n\nwhich is an \"unknown\" character.\n\nSimilarly for binary\\Base64Test.java:96.\n\nIt's not all that clear what the Unicode escapes should be in these cases, but probably not the unknown character.\n\n[Possibly the characters got mangled at some point, or maybe they have always been wrong]\n\nThe ColognePhoneticTest.java cases are less serious, as the characters are valid ISO-8859-1 (accented German), but given that the rest of the file uses unicode escaps, I think they should be changed too (but add comments to say what they are, e.g. o-umlaut, u-umlaut)",
            "commit number version hash": 550,
            "commit number": 528,
            "function that changed": [],
            "files that changed": [
                "src/java/org/apache/commons/codec/language/ColognePhonetic.java"
            ]
        },
        {
            "bug index": "123",
            "bug id": "CODEC-127",
            "hexsha": "7e8c20bd1b0593c3496a168be573aed40609a433",
            "fix_hash": "2e94c832384093901692765f901f510115bfed79",
            "description": "Some of the test cases include characters in a native encoding (possibly UTF-8), rather than using Unicode escapes.\n\nThis can cause a problem for IDEs if they don't know the encoding (e.g. cause compilation errors, which is how I found the issue), and possibly some transformations may corrupt the contents, e.g. fixing EOL.\n\nI think we should have a rule of using Unicode escapes for all such non-ascii characters.\nIt's particularly important for non-ISO-8859-1 characters.\n\nSome example classes with non-ascii characters:\n\n{code}\nbinary\\Base64Test.java:96         byte[] decode = b64.decode(\"SGVsbG{\u00b4\u2510\u00a2\u00b4\u2510\u00a2\u00b4\u2510\u00a2\u00b4\u2510\u00a2\u00b4\u2510\u00a2\u00b4\u2510\u00a2}8gV29ybGQ=\");\nlanguage\\ColognePhoneticTest.java:110             {\"m\u251c\u00c2nchengladbach\", \"664645214\"},\nlanguage\\ColognePhoneticTest.java:130         String[][] data = {{\"bergisch-gladbach\", \"174845214\"}, {\"M\u251c\u255dller-L\u251c\u255ddenscheidt\", \"65752682\"}};\nlanguage\\ColognePhoneticTest.java:137             {\"Meyer\", \"M\u251c\u255dller\"},\nlanguage\\ColognePhoneticTest.java:143             {\"ganz\", \"G\u251c\u00f1nse\"},\nlanguage\\DoubleMetaphoneTest.java:1222         this.getDoubleMetaphone().isDoubleMetaphoneEqual(\"\u00b4\u2510\u00a2\", \"S\");\nlanguage\\DoubleMetaphoneTest.java:1227         this.getDoubleMetaphone().isDoubleMetaphoneEqual(\"\u00b4\u2510\u00a2\", \"N\");\nlanguage\\SoundexTest.java:367         if (Character.isLetter('\u00b4\u2510\u00a2')) {\nlanguage\\SoundexTest.java:369                 Assert.assertEquals(\"\u00b4\u2510\u00a2000\", this.getSoundexEncoder().encode(\"\u00b4\u2510\u00a2\"));\nlanguage\\SoundexTest.java:375             Assert.assertEquals(\"\", this.getSoundexEncoder().encode(\"\u00b4\u2510\u00a2\"));\nlanguage\\SoundexTest.java:387         if (Character.isLetter('\u00b4\u2510\u00a2')) {\nlanguage\\SoundexTest.java:389                 Assert.assertEquals(\"\u00b4\u2510\u00a2000\", this.getSoundexEncoder().encode(\"\u00b4\u2510\u00a2\"));\nlanguage\\SoundexTest.java:395             Assert.assertEquals(\"\", this.getSoundexEncoder().encode(\"\u00b4\u2510\u00a2\"));\n{code}\n\nThe characters are probably not correct above, because I used a crude perl script to find them:\n\n{code}\nperl -ne \"$.=1 if $s ne $ARGV;print qq($ARGV:$. $_) if m/\\P{ASCII}/;$s=$ARGV;\" xxxx.java\n{code}\n\nlanguage\\SoundexTest.java:367 in particular is incorrect, because it's supposed to be a single character.\n\nNow one might think that native2ascii -encoding UTF-8 would fix that, but it gives:\n\nif (Character.isLetter('\\ufffd'))\n\nwhich is an \"unknown\" character.\n\nSimilarly for binary\\Base64Test.java:96.\n\nIt's not all that clear what the Unicode escapes should be in these cases, but probably not the unknown character.\n\n[Possibly the characters got mangled at some point, or maybe they have always been wrong]\n\nThe ColognePhoneticTest.java cases are less serious, as the characters are valid ISO-8859-1 (accented German), but given that the rest of the file uses unicode escaps, I think they should be changed too (but add comments to say what they are, e.g. o-umlaut, u-umlaut)",
            "commit number version hash": 550,
            "commit number": 527,
            "function that changed": [],
            "files that changed": [
                "src/java/org/apache/commons/codec/language/ColognePhonetic.java"
            ]
        },
        {
            "bug index": "124",
            "bug id": "CODEC-2",
            "hexsha": "71e7260746a902d1070a190fd78bd560464860b9",
            "fix_hash": "d905bc98e372c13c1c43ccc60bfa688bf7531e07",
            "description": "The net subpackage does not have adequate JavaDoc.  A package.html needs to be\ncreated which acts as a usage guide for the codec in that package.",
            "commit number version hash": 173,
            "commit number": 525,
            "function that changed": [],
            "files that changed": []
        },
        {
            "bug index": "125",
            "bug id": "CODEC-5",
            "hexsha": "71e7260746a902d1070a190fd78bd560464860b9",
            "fix_hash": "acf70b38d27bf6063d76cd9897beafef8040ff02",
            "description": "List:       jakarta-commons-dev\nSubject:    [codec] Proposal for improvement Hex codec\nFrom:       Tom van den Berge <tom.vandenberge () bibit ! com>\nDate:       2004-04-15 8:49:31\nMessage-ID: <407E4C9B.5070701 () bibit ! com>\n[Download message RAW]\n\nI'm using the Hex codec to decode e.g. the string \"qq\". What surprises \nme is that this obviously illegal hex value is decoded into one byte \nvalue 255. In fact all non-hex 'character-pairs' are decoded to value 255.\n\nWouldn't it be better to throw a DecoderException if illegal characters \nare passed in?\n\nThe current implementation decodes values that is is actually not able \nto decode, which is wrong.\n\nCheers,\nTom",
            "commit number version hash": 173,
            "commit number": 461,
            "function that changed": [
                {
                    "function name": "containsAlphabetOrPad",
                    "function params": [
                        "arrayOctet"
                    ],
                    "file name": "BaseNCodec.java",
                    "file old path": "src/java/org/apache/commons/codec/binary/BaseNCodec.java",
                    "file new path": "src/java/org/apache/commons/codec/binary/BaseNCodec.java",
                    "full name": "src.java.org.apache.commons.codec.binary.BaseNCodec.containsAlphabetOrPad"
                },
                {
                    "function name": "arrayContains",
                    "function params": [
                        "arr",
                        "key"
                    ],
                    "file name": "ColognePhonetic.java",
                    "file old path": "src/java/org/apache/commons/codec/language/ColognePhonetic.java",
                    "file new path": "src/java/org/apache/commons/codec/language/ColognePhonetic.java",
                    "full name": "src.java.org.apache.commons.codec.language.ColognePhonetic.arrayContains"
                },
                {
                    "function name": "preprocess",
                    "function params": [
                        "text"
                    ],
                    "file name": "ColognePhonetic.java",
                    "file old path": "src/java/org/apache/commons/codec/language/ColognePhonetic.java",
                    "file new path": "src/java/org/apache/commons/codec/language/ColognePhonetic.java",
                    "full name": "src.java.org.apache.commons.codec.language.ColognePhonetic.preprocess"
                },
                {
                    "function name": "contains",
                    "function params": [
                        "value",
                        "start",
                        "length",
                        "criteria"
                    ],
                    "file name": "DoubleMetaphone.java",
                    "file old path": "src/java/org/apache/commons/codec/language/DoubleMetaphone.java",
                    "file new path": "src/java/org/apache/commons/codec/language/DoubleMetaphone.java",
                    "full name": "src.java.org.apache.commons.codec.language.DoubleMetaphone.contains"
                },
                {
                    "function name": "isSilentStart",
                    "function params": [
                        "value"
                    ],
                    "file name": "DoubleMetaphone.java",
                    "file old path": "src/java/org/apache/commons/codec/language/DoubleMetaphone.java",
                    "file new path": "src/java/org/apache/commons/codec/language/DoubleMetaphone.java",
                    "full name": "src.java.org.apache.commons.codec.language.DoubleMetaphone.isSilentStart"
                },
                {
                    "function name": "doDecoding",
                    "function params": [
                        "bytes"
                    ],
                    "file name": "QCodec.java",
                    "file old path": "src/java/org/apache/commons/codec/net/QCodec.java",
                    "file new path": "src/java/org/apache/commons/codec/net/QCodec.java",
                    "full name": "src.java.org.apache.commons.codec.net.QCodec.doDecoding"
                },
                {
                    "function name": "encodeQuotedPrintable",
                    "function params": [
                        "printable",
                        "bytes"
                    ],
                    "file name": "QuotedPrintableCodec.java",
                    "file old path": "src/java/org/apache/commons/codec/net/QuotedPrintableCodec.java",
                    "file new path": "src/java/org/apache/commons/codec/net/QuotedPrintableCodec.java",
                    "full name": "src.java.org.apache.commons.codec.net.QuotedPrintableCodec.encodeQuotedPrintable"
                },
                {
                    "function name": "encodeUrl",
                    "function params": [
                        "urlsafe",
                        "bytes"
                    ],
                    "file name": "URLCodec.java",
                    "file old path": "src/java/org/apache/commons/codec/net/URLCodec.java",
                    "file new path": "src/java/org/apache/commons/codec/net/URLCodec.java",
                    "full name": "src.java.org.apache.commons.codec.net.URLCodec.encodeUrl"
                },
                {
                    "function name": "testLocaleIndependence",
                    "function params": [],
                    "file name": "StringEncoderAbstractTest.java",
                    "file old path": "src/test/org/apache/commons/codec/StringEncoderAbstractTest.java",
                    "file new path": "src/test/org/apache/commons/codec/StringEncoderAbstractTest.java",
                    "full name": "src.test.org.apache.commons.codec.StringEncoderAbstractTest.testLocaleIndependence"
                },
                {
                    "function name": "checkEncodingVariations",
                    "function params": [
                        "expected"
                    ],
                    "file name": "StringEncoderAbstractTest.java",
                    "file old path": "src/test/org/apache/commons/codec/StringEncoderAbstractTest.java",
                    "file new path": "src/test/org/apache/commons/codec/StringEncoderAbstractTest.java",
                    "full name": "src.test.org.apache.commons.codec.StringEncoderAbstractTest.checkEncodingVariations"
                },
                {
                    "function name": "checkEncodings",
                    "function params": [
                        "data"
                    ],
                    "file name": "StringEncoderAbstractTest.java",
                    "file old path": "src/test/org/apache/commons/codec/StringEncoderAbstractTest.java",
                    "file new path": "src/test/org/apache/commons/codec/StringEncoderAbstractTest.java",
                    "full name": "src.test.org.apache.commons.codec.StringEncoderAbstractTest.checkEncodings"
                },
                {
                    "function name": "testByteByByte",
                    "function params": [
                        "encoded",
                        "decoded",
                        "chunkSize",
                        "seperator"
                    ],
                    "file name": "Base32OutputStreamTest.java",
                    "file old path": "src/test/org/apache/commons/codec/binary/Base32OutputStreamTest.java",
                    "file new path": "src/test/org/apache/commons/codec/binary/Base32OutputStreamTest.java",
                    "full name": "src.test.org.apache.commons.codec.binary.Base32OutputStreamTest.testByteByByte"
                },
                {
                    "function name": "testBase32Samples",
                    "function params": [],
                    "file name": "Base32Test.java",
                    "file old path": "src/test/org/apache/commons/codec/binary/Base32Test.java",
                    "file new path": "src/test/org/apache/commons/codec/binary/Base32Test.java",
                    "full name": "src.test.org.apache.commons.codec.binary.Base32Test.testBase32Samples"
                },
                {
                    "function name": "testBase32HexSamples",
                    "function params": [],
                    "file name": "Base32Test.java",
                    "file old path": "src/test/org/apache/commons/codec/binary/Base32Test.java",
                    "file new path": "src/test/org/apache/commons/codec/binary/Base32Test.java",
                    "full name": "src.test.org.apache.commons.codec.binary.Base32Test.testBase32HexSamples"
                },
                {
                    "function name": "testBase32Chunked",
                    "function params": [],
                    "file name": "Base32Test.java",
                    "file old path": "src/test/org/apache/commons/codec/binary/Base32Test.java",
                    "file new path": "src/test/org/apache/commons/codec/binary/Base32Test.java",
                    "full name": "src.test.org.apache.commons.codec.binary.Base32Test.testBase32Chunked"
                },
                {
                    "function name": "bytesContain",
                    "function params": [
                        "bytes",
                        "c"
                    ],
                    "file name": "Base32TestData.java",
                    "file old path": "src/test/org/apache/commons/codec/binary/Base32TestData.java",
                    "file new path": "src/test/org/apache/commons/codec/binary/Base32TestData.java",
                    "full name": "src.test.org.apache.commons.codec.binary.Base32TestData.bytesContain"
                },
                {
                    "function name": "testByteByByte",
                    "function params": [
                        "encoded",
                        "decoded",
                        "chunkSize",
                        "seperator"
                    ],
                    "file name": "Base64OutputStreamTest.java",
                    "file old path": "src/test/org/apache/commons/codec/binary/Base64OutputStreamTest.java",
                    "file new path": "src/test/org/apache/commons/codec/binary/Base64OutputStreamTest.java",
                    "full name": "src.test.org.apache.commons.codec.binary.Base64OutputStreamTest.testByteByByte"
                },
                {
                    "function name": "bytesContain",
                    "function params": [
                        "bytes",
                        "c"
                    ],
                    "file name": "Base64TestData.java",
                    "file old path": "src/test/org/apache/commons/codec/binary/Base64TestData.java",
                    "file new path": "src/test/org/apache/commons/codec/binary/Base64TestData.java",
                    "full name": "src.test.org.apache.commons.codec.binary.Base64TestData.bytesContain"
                },
                {
                    "function name": "testIsEncodeEquals",
                    "function params": [],
                    "file name": "ColognePhoneticTest.java",
                    "file old path": "src/test/org/apache/commons/codec/language/ColognePhoneticTest.java",
                    "file new path": "src/test/org/apache/commons/codec/language/ColognePhoneticTest.java",
                    "full name": "src.test.org.apache.commons.codec.language.ColognePhoneticTest.testIsEncodeEquals"
                },
                {
                    "function name": "doubleMetaphoneEqualTest",
                    "function params": [
                        "pairs",
                        "useAlternate"
                    ],
                    "file name": "DoubleMetaphoneTest.java",
                    "file old path": "src/test/org/apache/commons/codec/language/DoubleMetaphoneTest.java",
                    "file new path": "src/test/org/apache/commons/codec/language/DoubleMetaphoneTest.java",
                    "full name": "src.test.org.apache.commons.codec.language.DoubleMetaphoneTest.doubleMetaphoneEqualTest"
                },
                {
                    "function name": "assertMetaphoneEqual",
                    "function params": [
                        "pairs"
                    ],
                    "file name": "MetaphoneTest.java",
                    "file old path": "src/test/org/apache/commons/codec/language/MetaphoneTest.java",
                    "file new path": "src/test/org/apache/commons/codec/language/MetaphoneTest.java",
                    "full name": "src.test.org.apache.commons.codec.language.MetaphoneTest.assertMetaphoneEqual"
                },
                {
                    "function name": "assertIsMetaphoneEqual",
                    "function params": [
                        "source",
                        "matches"
                    ],
                    "file name": "MetaphoneTest.java",
                    "file old path": "src/test/org/apache/commons/codec/language/MetaphoneTest.java",
                    "file new path": "src/test/org/apache/commons/codec/language/MetaphoneTest.java",
                    "full name": "src.test.org.apache.commons.codec.language.MetaphoneTest.assertIsMetaphoneEqual"
                },
                {
                    "function name": "constructString",
                    "function params": [
                        "unicodeChars"
                    ],
                    "file name": "BCodecTest.java",
                    "file old path": "src/test/org/apache/commons/codec/net/BCodecTest.java",
                    "file new path": "src/test/org/apache/commons/codec/net/BCodecTest.java",
                    "full name": "src.test.org.apache.commons.codec.net.BCodecTest.constructString"
                },
                {
                    "function name": "constructString",
                    "function params": [
                        "unicodeChars"
                    ],
                    "file name": "QCodecTest.java",
                    "file old path": "src/test/org/apache/commons/codec/net/QCodecTest.java",
                    "file new path": "src/test/org/apache/commons/codec/net/QCodecTest.java",
                    "full name": "src.test.org.apache.commons.codec.net.QCodecTest.constructString"
                },
                {
                    "function name": "constructString",
                    "function params": [
                        "unicodeChars"
                    ],
                    "file name": "QuotedPrintableCodecTest.java",
                    "file old path": "src/test/org/apache/commons/codec/net/QuotedPrintableCodecTest.java",
                    "file new path": "src/test/org/apache/commons/codec/net/QuotedPrintableCodecTest.java",
                    "full name": "src.test.org.apache.commons.codec.net.QuotedPrintableCodecTest.constructString"
                },
                {
                    "function name": "constructString",
                    "function params": [
                        "unicodeChars"
                    ],
                    "file name": "URLCodecTest.java",
                    "file old path": "src/test/org/apache/commons/codec/net/URLCodecTest.java",
                    "file new path": "src/test/org/apache/commons/codec/net/URLCodecTest.java",
                    "full name": "src.test.org.apache.commons.codec.net.URLCodecTest.constructString"
                }
            ],
            "files that changed": [
                "src/java/org/apache/commons/codec/binary/BaseNCodec.java",
                "src/java/org/apache/commons/codec/language/ColognePhonetic.java",
                "src/java/org/apache/commons/codec/language/DoubleMetaphone.java",
                "src/java/org/apache/commons/codec/net/QCodec.java",
                "src/java/org/apache/commons/codec/net/QuotedPrintableCodec.java",
                "src/java/org/apache/commons/codec/net/URLCodec.java",
                "src/test/org/apache/commons/codec/StringEncoderAbstractTest.java",
                "src/test/org/apache/commons/codec/binary/Base32OutputStreamTest.java",
                "src/test/org/apache/commons/codec/binary/Base32Test.java",
                "src/test/org/apache/commons/codec/binary/Base32TestData.java",
                "src/test/org/apache/commons/codec/binary/Base64OutputStreamTest.java",
                "src/test/org/apache/commons/codec/binary/Base64TestData.java",
                "src/test/org/apache/commons/codec/language/ColognePhoneticTest.java",
                "src/test/org/apache/commons/codec/language/DoubleMetaphoneTest.java",
                "src/test/org/apache/commons/codec/language/MetaphoneTest.java",
                "src/test/org/apache/commons/codec/net/BCodecTest.java",
                "src/test/org/apache/commons/codec/net/QCodecTest.java",
                "src/test/org/apache/commons/codec/net/QuotedPrintableCodecTest.java",
                "src/test/org/apache/commons/codec/net/URLCodecTest.java"
            ]
        },
        {
            "bug index": "126",
            "bug id": "CODEC-122",
            "hexsha": "36e7620574736400941c5154bf663b198abafa7c",
            "fix_hash": "2d76aa8e140c5c5eba12a7513aad7340ec84bf13",
            "description": "During the use of org.apache.commons.codec.language.ColognePhonetic I recognized an error in method public String colognePhonetic(String text). The method does not handle the character 'J'. Thus Strings containig a J will not completely by calculated to the phonetic code. The characters 'J' will remain.",
            "commit number version hash": 449,
            "commit number": 457,
            "function that changed": [
                {
                    "function name": "testAychlmajrForCodec122",
                    "function params": [],
                    "file name": "ColognePhoneticTest.java",
                    "file old path": "src/test/org/apache/commons/codec/language/ColognePhoneticTest.java",
                    "file new path": "src/test/org/apache/commons/codec/language/ColognePhoneticTest.java",
                    "full name": "src.test.org.apache.commons.codec.language.ColognePhoneticTest.testAychlmajrForCodec122"
                }
            ],
            "files that changed": [
                "src/test/org/apache/commons/codec/language/ColognePhoneticTest.java"
            ]
        },
        {
            "bug index": "127",
            "bug id": "CODEC-123",
            "hexsha": "7e8c20bd1b0593c3496a168be573aed40609a433",
            "fix_hash": "10920798d1133fd5a4f89061b679c2eaa6de09cb",
            "description": "The ColognePhonetic class contains Javadoc with umlauts and other characters that do not always play well in editors. Change these characters to HTML entities. This means we should also be able to remove the UTF-8 settings in the POM for Javadoc.",
            "commit number version hash": 550,
            "commit number": 456,
            "function that changed": [],
            "files that changed": [
                "src/java/org/apache/commons/codec/language/ColognePhonetic.java"
            ]
        },
        {
            "bug index": "128",
            "bug id": "CODEC-121",
            "hexsha": "0929762d9dc10ccc62c7a227f69cd831e2bfb1b8",
            "fix_hash": "94a565c045b28e66d8477656f82b55221eb96590",
            "description": "Writing a unit test I discovered that the example Wikipedia uses for quoted-printable data does not decode but instead throws an exception.  \nTheir example is here:  http://en.wikipedia.org/wiki/Quoted-printable#Example\n\ntest:\n\n  String qpdata   = \"If you believe that truth=3Dbeauty, then surely=20=\\r\\n\" +\n\t\t    \"mathematics is the most beautiful branch of philosophy.\";\n\n  String expected = \"If you believe that truth=beauty, then surely \" +\n\t\t    \"mathematics is the most beautiful branch of philosophy.\";\n\n  assertEquals( expected,  new QuotedPrintableCodec().decode(qpdata) );\n\nI suppose I could fix if you like but currently I'm not a registered developer.  \n\n\n",
            "commit number version hash": 871,
            "commit number": 455,
            "function that changed": [
                {
                    "function name": "testSoftLineBreakEncode",
                    "function params": [],
                    "file name": "QuotedPrintableCodecTest.java",
                    "file old path": "src/test/org/apache/commons/codec/net/QuotedPrintableCodecTest.java",
                    "file new path": "src/test/org/apache/commons/codec/net/QuotedPrintableCodecTest.java",
                    "full name": "src.test.org.apache.commons.codec.net.QuotedPrintableCodecTest.testSoftLineBreakEncode"
                },
                {
                    "function name": "testSoftLineBreakDecode",
                    "function params": [],
                    "file name": "QuotedPrintableCodecTest.java",
                    "file old path": "src/test/org/apache/commons/codec/net/QuotedPrintableCodecTest.java",
                    "file new path": "src/test/org/apache/commons/codec/net/QuotedPrintableCodecTest.java",
                    "full name": "src.test.org.apache.commons.codec.net.QuotedPrintableCodecTest.testSoftLineBreakDecode"
                }
            ],
            "files that changed": [
                "src/test/org/apache/commons/codec/net/QuotedPrintableCodecTest.java"
            ]
        },
        {
            "bug index": "129",
            "bug id": "CODEC-5",
            "hexsha": "71e7260746a902d1070a190fd78bd560464860b9",
            "fix_hash": "a9ec5099cfd269c8530ebbb641d7e3d20eae147c",
            "description": "List:       jakarta-commons-dev\nSubject:    [codec] Proposal for improvement Hex codec\nFrom:       Tom van den Berge <tom.vandenberge () bibit ! com>\nDate:       2004-04-15 8:49:31\nMessage-ID: <407E4C9B.5070701 () bibit ! com>\n[Download message RAW]\n\nI'm using the Hex codec to decode e.g. the string \"qq\". What surprises \nme is that this obviously illegal hex value is decoded into one byte \nvalue 255. In fact all non-hex 'character-pairs' are decoded to value 255.\n\nWouldn't it be better to throw a DecoderException if illegal characters \nare passed in?\n\nThe current implementation decodes values that is is actually not able \nto decode, which is wrong.\n\nCheers,\nTom",
            "commit number version hash": 173,
            "commit number": 453,
            "function that changed": [
                {
                    "function name": "testComparatorWithDoubleMetaphone",
                    "function params": [],
                    "file name": "StringEncoderComparatorTest.java",
                    "file old path": "src/test/org/apache/commons/codec/StringEncoderComparatorTest.java",
                    "file new path": "src/test/org/apache/commons/codec/StringEncoderComparatorTest.java",
                    "full name": "src.test.org.apache.commons.codec.StringEncoderComparatorTest.testComparatorWithDoubleMetaphone"
                },
                {
                    "function name": "testCustomCharset",
                    "function params": [],
                    "file name": "HexTest.java",
                    "file old path": "src/test/org/apache/commons/codec/binary/HexTest.java",
                    "file new path": "src/test/org/apache/commons/codec/binary/HexTest.java",
                    "full name": "src.test.org.apache.commons.codec.binary.HexTest.testCustomCharset"
                }
            ],
            "files that changed": [
                "src/test/org/apache/commons/codec/StringEncoderComparatorTest.java",
                "src/test/org/apache/commons/codec/binary/HexTest.java"
            ]
        },
        {
            "bug index": "130",
            "bug id": "CODEC-4",
            "hexsha": "71e7260746a902d1070a190fd78bd560464860b9",
            "fix_hash": "8ffb4fb5e09446845f520fa8e759e9b8566d633e",
            "description": "You get a ClassCastException in Hex.decode(Object) if you pass in a String object.",
            "commit number version hash": 173,
            "commit number": 450,
            "function that changed": [
                {
                    "function name": "testEncodeNull",
                    "function params": [],
                    "file name": "BinaryEncoderAbstractTest.java",
                    "file old path": "src/test/org/apache/commons/codec/BinaryEncoderAbstractTest.java",
                    "file new path": "src/test/org/apache/commons/codec/BinaryEncoderAbstractTest.java",
                    "full name": "src.test.org.apache.commons.codec.BinaryEncoderAbstractTest.testEncodeNull"
                },
                {
                    "function name": "testEncodeEmpty",
                    "function params": [],
                    "file name": "BinaryEncoderAbstractTest.java",
                    "file old path": "src/test/org/apache/commons/codec/BinaryEncoderAbstractTest.java",
                    "file new path": "src/test/org/apache/commons/codec/BinaryEncoderAbstractTest.java",
                    "full name": "src.test.org.apache.commons.codec.BinaryEncoderAbstractTest.testEncodeEmpty"
                },
                {
                    "function name": "testEncodeWithInvalidObject",
                    "function params": [],
                    "file name": "StringEncoderAbstractTest.java",
                    "file old path": "src/test/org/apache/commons/codec/StringEncoderAbstractTest.java",
                    "file new path": "src/test/org/apache/commons/codec/StringEncoderAbstractTest.java",
                    "full name": "src.test.org.apache.commons.codec.StringEncoderAbstractTest.testEncodeWithInvalidObject"
                },
                {
                    "function name": "testComparatorWithDoubleMetaphoneAndInvalidInput",
                    "function params": [],
                    "file name": "StringEncoderComparatorTest.java",
                    "file old path": "src/test/org/apache/commons/codec/StringEncoderComparatorTest.java",
                    "file new path": "src/test/org/apache/commons/codec/StringEncoderComparatorTest.java",
                    "full name": "src.test.org.apache.commons.codec.StringEncoderComparatorTest.testComparatorWithDoubleMetaphoneAndInvalidInput"
                },
                {
                    "function name": "setUp",
                    "function params": [],
                    "file name": "BaseNCodecTest.java",
                    "file old path": "src/test/org/apache/commons/codec/binary/BaseNCodecTest.java",
                    "file new path": "src/test/org/apache/commons/codec/binary/BaseNCodecTest.java",
                    "full name": "src.test.org.apache.commons.codec.binary.BaseNCodecTest.setUp"
                },
                {
                    "function name": "tearDown",
                    "function params": [],
                    "file name": "BinaryCodecTest.java",
                    "file old path": "src/test/org/apache/commons/codec/binary/BinaryCodecTest.java",
                    "file new path": "src/test/org/apache/commons/codec/binary/BinaryCodecTest.java",
                    "full name": "src.test.org.apache.commons.codec.binary.BinaryCodecTest.tearDown"
                },
                {
                    "function name": "setUp",
                    "function params": [],
                    "file name": "BinaryCodecTest.java",
                    "file old path": "src/test/org/apache/commons/codec/binary/BinaryCodecTest.java",
                    "file new path": "src/test/org/apache/commons/codec/binary/BinaryCodecTest.java",
                    "full name": "src.test.org.apache.commons.codec.binary.BinaryCodecTest.setUp"
                }
            ],
            "files that changed": [
                "src/test/org/apache/commons/codec/BinaryEncoderAbstractTest.java",
                "src/test/org/apache/commons/codec/CharEncodingTest.java",
                "src/test/org/apache/commons/codec/DecoderExceptionTest.java",
                "src/test/org/apache/commons/codec/EncoderExceptionTest.java",
                "src/test/org/apache/commons/codec/StringEncoderAbstractTest.java",
                "src/test/org/apache/commons/codec/StringEncoderComparatorTest.java",
                "src/test/org/apache/commons/codec/binary/Base32InputStreamTest.java",
                "src/test/org/apache/commons/codec/binary/Base32OutputStreamTest.java",
                "src/test/org/apache/commons/codec/binary/Base32Test.java",
                "src/test/org/apache/commons/codec/binary/Base64Codec13Test.java",
                "src/test/org/apache/commons/codec/binary/Base64InputStreamTest.java",
                "src/test/org/apache/commons/codec/binary/Base64OutputStreamTest.java",
                "src/test/org/apache/commons/codec/binary/Base64Test.java",
                "src/test/org/apache/commons/codec/binary/BaseNCodecTest.java",
                "src/test/org/apache/commons/codec/binary/BinaryCodecTest.java",
                "src/test/org/apache/commons/codec/binary/HexTest.java",
                "src/test/org/apache/commons/codec/binary/StringUtilsTest.java",
                "src/test/org/apache/commons/codec/digest/DigestUtilsTest.java",
                "src/test/org/apache/commons/codec/language/Caverphone1Test.java",
                "src/test/org/apache/commons/codec/language/Caverphone2Test.java",
                "src/test/org/apache/commons/codec/language/CaverphoneTest.java",
                "src/test/org/apache/commons/codec/language/ColognePhoneticTest.java",
                "src/test/org/apache/commons/codec/language/DoubleMetaphone2Test.java",
                "src/test/org/apache/commons/codec/language/DoubleMetaphoneTest.java",
                "src/test/org/apache/commons/codec/language/MetaphoneTest.java",
                "src/test/org/apache/commons/codec/language/RefinedSoundexTest.java",
                "src/test/org/apache/commons/codec/language/SoundexTest.java",
                "src/test/org/apache/commons/codec/net/BCodecTest.java",
                "src/test/org/apache/commons/codec/net/QCodecTest.java",
                "src/test/org/apache/commons/codec/net/QuotedPrintableCodecTest.java",
                "src/test/org/apache/commons/codec/net/RFC1522CodecTest.java",
                "src/test/org/apache/commons/codec/net/URLCodecTest.java",
                "src/test/org/apache/commons/codec/net/UtilsTest.java"
            ]
        },
        {
            "bug index": "131",
            "bug id": "CODEC-117",
            "hexsha": "36e7620574736400941c5154bf663b198abafa7c",
            "fix_hash": "41c68e9ef470696009d72133c7f05a20e2728e34",
            "description": "Caverphone encode names starting and ending with \"mb\" incorrectly.\n\nAccording to the spec:\n\"If the name ends with mb make it m2\".\n\nThis has been coded as:\n\"If the name _starts_ with mb make it m2\".",
            "commit number version hash": 449,
            "commit number": 434,
            "function that changed": [
                {
                    "function name": "caverphone",
                    "function params": [
                        "txt"
                    ],
                    "file name": "Caverphone.java",
                    "file old path": "src/java/org/apache/commons/codec/language/Caverphone.java",
                    "file new path": "src/java/org/apache/commons/codec/language/Caverphone.java",
                    "full name": "src.java.org.apache.commons.codec.language.Caverphone.caverphone"
                },
                {
                    "function name": "testEndMb",
                    "function params": [],
                    "file name": "CaverphoneTest.java",
                    "file old path": "src/test/org/apache/commons/codec/language/CaverphoneTest.java",
                    "file new path": "src/test/org/apache/commons/codec/language/CaverphoneTest.java",
                    "full name": "src.test.org.apache.commons.codec.language.CaverphoneTest.testEndMb"
                },
                {
                    "function name": "testDavidHoodRevisitedRandomNameTTA1111111",
                    "function params": [],
                    "file name": "CaverphoneTest.java",
                    "file old path": "src/test/org/apache/commons/codec/language/CaverphoneTest.java",
                    "file new path": "src/test/org/apache/commons/codec/language/CaverphoneTest.java",
                    "full name": "src.test.org.apache.commons.codec.language.CaverphoneTest.testDavidHoodRevisitedRandomNameTTA1111111"
                }
            ],
            "files that changed": [
                "src/java/org/apache/commons/codec/language/Caverphone.java",
                "src/test/org/apache/commons/codec/language/CaverphoneTest.java"
            ]
        },
        {
            "bug index": "132",
            "bug id": "CODEC-1",
            "hexsha": "71e7260746a902d1070a190fd78bd560464860b9",
            "fix_hash": "2a8fd84f1f380fc472ecf415b771cb5fd789719b",
            "description": "URLCodec causes an IndexOutOfBoundsException in BitSet when encoding non-ASCII\ncharacters.",
            "commit number version hash": 173,
            "commit number": 433,
            "function that changed": [],
            "files that changed": [
                "src/test/org/apache/commons/codec/language/CaverphoneTest.java"
            ]
        },
        {
            "bug index": "133",
            "bug id": "CODEC-28",
            "hexsha": "71e7260746a902d1070a190fd78bd560464860b9",
            "fix_hash": "d9ee65ed9be0e537e61324322ad8e1ee522ae064",
            "description": "Kyle Burton submitted a Test for DoubleMetaphone when he submitted a version of \nDoubleMetaphone from CPAN.  This code was copied from CPAN, and at the time, I\nwasn't interested in opening up a can of worms by even broaching the subject of\nlicense compatibility (at the time there was a civil war on community@\nsurrounding the LGPL) - We removed that implementation of DoubleMetaphone\nshortly before promotion from the sandbox.  Here is a link to his test:\n\nhttp://www.bgw.org/projects/java/phonetic/jakarta-commons-codec/TestDoubleMetaphone.java",
            "commit number version hash": 173,
            "commit number": 409,
            "function that changed": [
                {
                    "function name": "testPhpData",
                    "function params": [],
                    "file name": "ColognePhoneticTest.java",
                    "file old path": "src/test/org/apache/commons/codec/language/ColognePhoneticTest.java",
                    "file new path": "src/test/org/apache/commons/codec/language/ColognePhoneticTest.java",
                    "full name": "src.test.org.apache.commons.codec.language.ColognePhoneticTest.testPhpData"
                }
            ],
            "files that changed": [
                "src/test/org/apache/commons/codec/language/ColognePhoneticTest.java"
            ]
        },
        {
            "bug index": "134",
            "bug id": "CODEC-2",
            "hexsha": "71e7260746a902d1070a190fd78bd560464860b9",
            "fix_hash": "f1994bd1aebbd9fe53917c67b3b89b6725fec385",
            "description": "The net subpackage does not have adequate JavaDoc.  A package.html needs to be\ncreated which acts as a usage guide for the codec in that package.",
            "commit number version hash": 173,
            "commit number": 406,
            "function that changed": [
                {
                    "function name": "testExamples",
                    "function params": [],
                    "file name": "ColognePhoneticTest.java",
                    "file old path": "src/test/org/apache/commons/codec/language/ColognePhoneticTest.java",
                    "file new path": "src/test/org/apache/commons/codec/language/ColognePhoneticTest.java",
                    "full name": "src.test.org.apache.commons.codec.language.ColognePhoneticTest.testExamples"
                },
                {
                    "function name": "testIsCologneEqualsPhpData",
                    "function params": [],
                    "file name": "ColognePhoneticTest.java",
                    "file old path": "src/test/org/apache/commons/codec/language/ColognePhoneticTest.java",
                    "file new path": "src/test/org/apache/commons/codec/language/ColognePhoneticTest.java",
                    "full name": "src.test.org.apache.commons.codec.language.ColognePhoneticTest.testIsCologneEqualsPhpData"
                },
                {
                    "function name": "testPhpData",
                    "function params": [],
                    "file name": "ColognePhoneticTest.java",
                    "file old path": "src/test/org/apache/commons/codec/language/ColognePhoneticTest.java",
                    "file new path": "src/test/org/apache/commons/codec/language/ColognePhoneticTest.java",
                    "full name": "src.test.org.apache.commons.codec.language.ColognePhoneticTest.testPhpData"
                },
                {
                    "function name": "testIsCologneEquals",
                    "function params": [],
                    "file name": "ColognePhoneticTest.java",
                    "file old path": "src/test/org/apache/commons/codec/language/ColognePhoneticTest.java",
                    "file new path": "src/test/org/apache/commons/codec/language/ColognePhoneticTest.java",
                    "full name": "src.test.org.apache.commons.codec.language.ColognePhoneticTest.testIsCologneEquals"
                },
                {
                    "function name": "testAabjoe",
                    "function params": [],
                    "file name": "ColognePhoneticTest.java",
                    "file old path": "src/test/org/apache/commons/codec/language/ColognePhoneticTest.java",
                    "file new path": "src/test/org/apache/commons/codec/language/ColognePhoneticTest.java",
                    "full name": "src.test.org.apache.commons.codec.language.ColognePhoneticTest.testAabjoe"
                },
                {
                    "function name": "testAaclan",
                    "function params": [],
                    "file name": "ColognePhoneticTest.java",
                    "file old path": "src/test/org/apache/commons/codec/language/ColognePhoneticTest.java",
                    "file new path": "src/test/org/apache/commons/codec/language/ColognePhoneticTest.java",
                    "full name": "src.test.org.apache.commons.codec.language.ColognePhoneticTest.testAaclan"
                },
                {
                    "function name": "testHyphen",
                    "function params": [],
                    "file name": "ColognePhoneticTest.java",
                    "file old path": "src/test/org/apache/commons/codec/language/ColognePhoneticTest.java",
                    "file new path": "src/test/org/apache/commons/codec/language/ColognePhoneticTest.java",
                    "full name": "src.test.org.apache.commons.codec.language.ColognePhoneticTest.testHyphen"
                },
                {
                    "function name": "checkEncoding",
                    "function params": [
                        "expected",
                        "source"
                    ],
                    "file name": "ColognePhoneticTest.java",
                    "file old path": "src/test/org/apache/commons/codec/language/ColognePhoneticTest.java",
                    "file new path": "src/test/org/apache/commons/codec/language/ColognePhoneticTest.java",
                    "full name": "src.test.org.apache.commons.codec.language.ColognePhoneticTest.checkEncoding"
                },
                {
                    "function name": "testEdgeCases",
                    "function params": [],
                    "file name": "ColognePhoneticTest.java",
                    "file old path": "src/test/org/apache/commons/codec/language/ColognePhoneticTest.java",
                    "file new path": "src/test/org/apache/commons/codec/language/ColognePhoneticTest.java",
                    "full name": "src.test.org.apache.commons.codec.language.ColognePhoneticTest.testEdgeCases"
                }
            ],
            "files that changed": [
                "src/test/org/apache/commons/codec/language/ColognePhoneticTest.java"
            ]
        },
        {
            "bug index": "135",
            "bug id": "CODEC-115",
            "hexsha": "36e7620574736400941c5154bf663b198abafa7c",
            "fix_hash": "fbdf624565c02a0a3266c6b29cdba53c2408c890",
            "description": "DoubleMetaphone.maxCodeLen should probably be private - it has public getter and setter anyway.",
            "commit number version hash": 449,
            "commit number": 386,
            "function that changed": [],
            "files that changed": [
                "src/java/org/apache/commons/codec/language/DoubleMetaphone.java"
            ]
        },
        {
            "bug index": "136",
            "bug id": "CODEC-113",
            "hexsha": "36e7620574736400941c5154bf663b198abafa7c",
            "fix_hash": "395b4d902fe83f39581198ebf276079b07bdd442",
            "description": "Findbugs says:\n\norg.apache.commons.codec.language.RefinedSoundex.US_ENGLISH_MAPPING should be package protected\tMALICIOUS_CODE\thttp://findbugs.sourceforge.net/bugDescriptions.html#MS_PKGPROTECT",
            "commit number version hash": 449,
            "commit number": 385,
            "function that changed": [],
            "files that changed": [
                "src/java/org/apache/commons/codec/language/RefinedSoundex.java"
            ]
        },
        {
            "bug index": "137",
            "bug id": "CODEC-114",
            "hexsha": "36e7620574736400941c5154bf663b198abafa7c",
            "fix_hash": "2af0444758f487699201a2b0e451e83837a5daac",
            "description": "Findbugs says:\n\norg.apache.commons.codec.language.Soundex.US_ENGLISH_MAPPING should be package protected MALICIOUS_CODE http://findbugs.sourceforge.net/bugDescriptions.html#MS_PKGPROTECT",
            "commit number version hash": 449,
            "commit number": 384,
            "function that changed": [],
            "files that changed": [
                "src/java/org/apache/commons/codec/language/Soundex.java"
            ]
        },
        {
            "bug index": "138",
            "bug id": "CODEC-114",
            "hexsha": "36e7620574736400941c5154bf663b198abafa7c",
            "fix_hash": "1221af62021d2be25cd161dd8678368b6d785a72",
            "description": "Findbugs says:\n\norg.apache.commons.codec.language.Soundex.US_ENGLISH_MAPPING should be package protected MALICIOUS_CODE http://findbugs.sourceforge.net/bugDescriptions.html#MS_PKGPROTECT",
            "commit number version hash": 449,
            "commit number": 373,
            "function that changed": [],
            "files that changed": [
                "src/java/org/apache/commons/codec/language/Soundex.java"
            ]
        },
        {
            "bug index": "139",
            "bug id": "CODEC-113",
            "hexsha": "36e7620574736400941c5154bf663b198abafa7c",
            "fix_hash": "b0117669677f27a448c8fcafcd1430e2e0a5c3db",
            "description": "Findbugs says:\n\norg.apache.commons.codec.language.RefinedSoundex.US_ENGLISH_MAPPING should be package protected\tMALICIOUS_CODE\thttp://findbugs.sourceforge.net/bugDescriptions.html#MS_PKGPROTECT",
            "commit number version hash": 449,
            "commit number": 372,
            "function that changed": [],
            "files that changed": [
                "src/java/org/apache/commons/codec/language/RefinedSoundex.java"
            ]
        },
        {
            "bug index": "140",
            "bug id": "CODEC-112",
            "hexsha": "36e7620574736400941c5154bf663b198abafa7c",
            "fix_hash": "c5291ab1ca4d4d7a041874a66b1c05b7d5c02ccb",
            "description": "If isChunked is false, Base64.encodeBase64(byte[] binaryData, boolean isChunked, boolean urlSafe, int maxResultSize) throws IAE for valid maxResultSize.\n\nTest case and fix will be applied shortly.",
            "commit number version hash": 449,
            "commit number": 365,
            "function that changed": [
                {
                    "function name": "encodeBase64",
                    "function params": [
                        "binaryData",
                        "isChunked",
                        "urlSafe",
                        "maxResultSize"
                    ],
                    "file name": "Base64.java",
                    "file old path": "src/java/org/apache/commons/codec/binary/Base64.java",
                    "file new path": "src/java/org/apache/commons/codec/binary/Base64.java",
                    "full name": "src.java.org.apache.commons.codec.binary.Base64.encodeBase64"
                },
                {
                    "function name": "testEncodeOverMaxSize",
                    "function params": [
                        "maxSize"
                    ],
                    "file name": "Base64Test.java",
                    "file old path": "src/test/org/apache/commons/codec/binary/Base64Test.java",
                    "file new path": "src/test/org/apache/commons/codec/binary/Base64Test.java",
                    "full name": "src.test.org.apache.commons.codec.binary.Base64Test.testEncodeOverMaxSize"
                },
                {
                    "function name": "testCodec112",
                    "function params": [],
                    "file name": "Base64Test.java",
                    "file old path": "src/test/org/apache/commons/codec/binary/Base64Test.java",
                    "file new path": "src/test/org/apache/commons/codec/binary/Base64Test.java",
                    "full name": "src.test.org.apache.commons.codec.binary.Base64Test.testCodec112"
                }
            ],
            "files that changed": [
                "src/java/org/apache/commons/codec/binary/Base64.java",
                "src/test/org/apache/commons/codec/binary/Base64Test.java"
            ]
        },
        {
            "bug index": "141",
            "bug id": "CODEC-99",
            "hexsha": "36e7620574736400941c5154bf663b198abafa7c",
            "fix_hash": "eabb90925568f9e4b04754918840db8156e5444a",
            "description": "Base64.encodeBase64String() shouldn't chunk.\n\nChange this:\n\n{code}\npublic static String encodeBase64String(byte[] binaryData) {\n    return StringUtils.newStringUtf8(encodeBase64(binaryData, true));\n}\n{code}\n\nTo this:\n\n{code}\npublic static String encodeBase64String(byte[] binaryData) {\n    return StringUtils.newStringUtf8(encodeBase64(binaryData, false));\n}\n{code}\n\n\n\nThis will fix the following tests ggregory added a few minutes ago:\n\n        //assertEquals(\"Zg==\", Base64.encodeBase64String(StringUtils.getBytesUtf8(\"f\")));\n        //assertEquals(\"Zm8=\", Base64.encodeBase64String(StringUtils.getBytesUtf8(\"fo\")));\n        //assertEquals(\"Zm9v\", Base64.encodeBase64String(StringUtils.getBytesUtf8(\"foo\")));\n        //assertEquals(\"Zm9vYg==\", Base64.encodeBase64String(StringUtils.getBytesUtf8(\"foob\")));\n        //assertEquals(\"Zm9vYmE=\", Base64.encodeBase64String(StringUtils.getBytesUtf8(\"fooba\")));\n        //assertEquals(\"Zm9vYmFy\", Base64.encodeBase64String(StringUtils.getBytesUtf8(\"foobar\")));\n\n",
            "commit number version hash": 449,
            "commit number": 341,
            "function that changed": [],
            "files that changed": [
                "src/java/org/apache/commons/codec/binary/Base64.java"
            ]
        },
        {
            "bug index": "142",
            "bug id": "CODEC-111",
            "hexsha": "36e7620574736400941c5154bf663b198abafa7c",
            "fix_hash": "8269f17bdb90ebfbfc498503a601e085c7b458aa",
            "description": "org.apache.commons.codec.net.URLCodec.ESCAPE_CHAR isn't final but should be",
            "commit number version hash": 449,
            "commit number": 338,
            "function that changed": [],
            "files that changed": [
                "src/java/org/apache/commons/codec/net/URLCodec.java"
            ]
        },
        {
            "bug index": "143",
            "bug id": "CODEC-105",
            "hexsha": "36e7620574736400941c5154bf663b198abafa7c",
            "fix_hash": "2c13032a16e37b7bc9e0272d25fc185b5c82b42e",
            "description": "When encoding a sizable stream byte by byte (so, just calling Base64InputStream.read()), after 10920 successful read()s, this happens: \n\njava.lang.ArrayIndexOutOfBoundsException: 2\n        at org.apache.commons.codec.binary.Base64.encode(Base64.java:502)\n        at org.apache.commons.codec.binary.Base64InputStream.read(Base64InputStream.java:157)\n        at org.apache.commons.codec.binary.Base64InputStream.read(Base64InputStream.java:109)\n\nBased on this, the necessary conditions seem to be that buffer = null and modulus = 2. Then, if a read() is done, a single-byte buffer is used, whose length is doubled by resizeBuffer(), but that still doesn't make it big enough to hold the 4 bytes written to it because modulus was just incremented to 0. \n\nHere's some sample code:\n\nimport org.apache.commons.codec.binary.Base64InputStream;\n\npublic class TestReads {\n    public static void main(String[] args) {\n        Base64InputStream b64stream = new Base64InputStream(System.in, true, 0, null);\n        int n = 0;\n        try {\n            while (b64stream.read() != -1) n++;\n        } catch (Exception x) {\n            System.out.println(n);\n            x.printStackTrace();\n        }\n    }\n}\n",
            "commit number version hash": 449,
            "commit number": 337,
            "function that changed": [
                {
                    "function name": "encode",
                    "function params": [
                        "pArray"
                    ],
                    "file name": "Base64.java",
                    "file old path": "src/java/org/apache/commons/codec/binary/Base64.java",
                    "file new path": "src/java/org/apache/commons/codec/binary/Base64.java",
                    "full name": "src.java.org.apache.commons.codec.binary.Base64.encode"
                },
                {
                    "function name": "readResults",
                    "function params": [
                        "b",
                        "bPos",
                        "bAvail"
                    ],
                    "file name": "Base64.java",
                    "file old path": "src/java/org/apache/commons/codec/binary/Base64.java",
                    "file new path": "src/java/org/apache/commons/codec/binary/Base64.java",
                    "full name": "src.java.org.apache.commons.codec.binary.Base64.readResults"
                },
                {
                    "function name": "encode",
                    "function params": [
                        "in",
                        "inPos",
                        "inAvail"
                    ],
                    "file name": "Base64.java",
                    "file old path": "src/java/org/apache/commons/codec/binary/Base64.java",
                    "file new path": "src/java/org/apache/commons/codec/binary/Base64.java",
                    "full name": "src.java.org.apache.commons.codec.binary.Base64.encode"
                },
                {
                    "function name": "decode",
                    "function params": [
                        "pArray"
                    ],
                    "file name": "Base64.java",
                    "file old path": "src/java/org/apache/commons/codec/binary/Base64.java",
                    "file new path": "src/java/org/apache/commons/codec/binary/Base64.java",
                    "full name": "src.java.org.apache.commons.codec.binary.Base64.decode"
                },
                {
                    "function name": "read",
                    "function params": [
                        "offset",
                        "len"
                    ],
                    "file name": "Base64InputStream.java",
                    "file old path": "src/java/org/apache/commons/codec/binary/Base64InputStream.java",
                    "file new path": "src/java/org/apache/commons/codec/binary/Base64InputStream.java",
                    "full name": "src.java.org.apache.commons.codec.binary.Base64InputStream.read"
                },
                {
                    "function name": "testCodec105",
                    "function params": [],
                    "file name": "Base64InputStreamTest.java",
                    "file old path": "src/test/org/apache/commons/codec/binary/Base64InputStreamTest.java",
                    "file new path": "src/test/org/apache/commons/codec/binary/Base64InputStreamTest.java",
                    "full name": "src.test.org.apache.commons.codec.binary.Base64InputStreamTest.testCodec105"
                },
                {
                    "function name": "read",
                    "function params": [
                        "pos",
                        "len"
                    ],
                    "file name": "Codec105ErrorInputStream.java",
                    "file old path": null,
                    "file new path": "src/test/org/apache/commons/codec/binary/Codec105ErrorInputStream.java",
                    "full name": "src.test.org.apache.commons.codec.binary.Codec105ErrorInputStream.read"
                },
                {
                    "function name": "read",
                    "function params": [],
                    "file name": "Codec105ErrorInputStream.java",
                    "file old path": null,
                    "file new path": "src/test/org/apache/commons/codec/binary/Codec105ErrorInputStream.java",
                    "full name": "src.test.org.apache.commons.codec.binary.Codec105ErrorInputStream.read"
                }
            ],
            "files that changed": [
                "src/java/org/apache/commons/codec/binary/Base64.java",
                "src/java/org/apache/commons/codec/binary/Base64InputStream.java",
                "src/test/org/apache/commons/codec/binary/Base64InputStreamTest.java"
            ]
        },
        {
            "bug index": "144",
            "bug id": "CODEC-1",
            "hexsha": "71e7260746a902d1070a190fd78bd560464860b9",
            "fix_hash": "931e25921dc0ec705a0055655aa2b2237a0888d7",
            "description": "URLCodec causes an IndexOutOfBoundsException in BitSet when encoding non-ASCII\ncharacters.",
            "commit number version hash": 173,
            "commit number": 336,
            "function that changed": [],
            "files that changed": [
                "src/java/org/apache/commons/codec/language/ColognePhonetic.java"
            ]
        },
        {
            "bug index": "145",
            "bug id": "CODEC-99",
            "hexsha": "36e7620574736400941c5154bf663b198abafa7c",
            "fix_hash": "954d995c5603b616c3c4a9ffb1823f36dd7ebcb0",
            "description": "Base64.encodeBase64String() shouldn't chunk.\n\nChange this:\n\n{code}\npublic static String encodeBase64String(byte[] binaryData) {\n    return StringUtils.newStringUtf8(encodeBase64(binaryData, true));\n}\n{code}\n\nTo this:\n\n{code}\npublic static String encodeBase64String(byte[] binaryData) {\n    return StringUtils.newStringUtf8(encodeBase64(binaryData, false));\n}\n{code}\n\n\n\nThis will fix the following tests ggregory added a few minutes ago:\n\n        //assertEquals(\"Zg==\", Base64.encodeBase64String(StringUtils.getBytesUtf8(\"f\")));\n        //assertEquals(\"Zm8=\", Base64.encodeBase64String(StringUtils.getBytesUtf8(\"fo\")));\n        //assertEquals(\"Zm9v\", Base64.encodeBase64String(StringUtils.getBytesUtf8(\"foo\")));\n        //assertEquals(\"Zm9vYg==\", Base64.encodeBase64String(StringUtils.getBytesUtf8(\"foob\")));\n        //assertEquals(\"Zm9vYmE=\", Base64.encodeBase64String(StringUtils.getBytesUtf8(\"fooba\")));\n        //assertEquals(\"Zm9vYmFy\", Base64.encodeBase64String(StringUtils.getBytesUtf8(\"foobar\")));\n\n",
            "commit number version hash": 449,
            "commit number": 334,
            "function that changed": [
                {
                    "function name": "encodeBase64String",
                    "function params": [
                        "binaryData"
                    ],
                    "file name": "Base64.java",
                    "file old path": "src/java/org/apache/commons/codec/binary/Base64.java",
                    "file new path": "src/java/org/apache/commons/codec/binary/Base64.java",
                    "full name": "src.java.org.apache.commons.codec.binary.Base64.encodeBase64String"
                },
                {
                    "function name": "testRfc4648Section10Encode",
                    "function params": [],
                    "file name": "Base64Test.java",
                    "file old path": "src/test/org/apache/commons/codec/binary/Base64Test.java",
                    "file new path": "src/test/org/apache/commons/codec/binary/Base64Test.java",
                    "full name": "src.test.org.apache.commons.codec.binary.Base64Test.testRfc4648Section10Encode"
                },
                {
                    "function name": "testByteToStringVariations",
                    "function params": [],
                    "file name": "Base64Test.java",
                    "file old path": "src/test/org/apache/commons/codec/binary/Base64Test.java",
                    "file new path": "src/test/org/apache/commons/codec/binary/Base64Test.java",
                    "full name": "src.test.org.apache.commons.codec.binary.Base64Test.testByteToStringVariations"
                }
            ],
            "files that changed": [
                "src/java/org/apache/commons/codec/binary/Base64.java",
                "src/test/org/apache/commons/codec/binary/Base64Test.java"
            ]
        },
        {
            "bug index": "146",
            "bug id": "CODEC-101",
            "hexsha": "36e7620574736400941c5154bf663b198abafa7c",
            "fix_hash": "b57a1aec395cff5156812295c9dbaf9b7edbddcf",
            "description": "Using new InputStreamReader(new Base64InputStream(in, true)) sometimes fails with \"java.io.IOException: Underlying input stream returned zero bytes\".\n\nThis is been tracked down that Base64InputStream#read(byte[]) incorrectly returns 0 at end of any stream which is multiple of 3 bytes long.",
            "commit number version hash": 449,
            "commit number": 333,
            "function that changed": [
                {
                    "function name": "testInputStreamReader",
                    "function params": [],
                    "file name": "Base64InputStreamTest.java",
                    "file old path": "src/test/org/apache/commons/codec/binary/Base64InputStreamTest.java",
                    "file new path": "src/test/org/apache/commons/codec/binary/Base64InputStreamTest.java",
                    "full name": "src.test.org.apache.commons.codec.binary.Base64InputStreamTest.testInputStreamReader"
                }
            ],
            "files that changed": [
                "src/test/org/apache/commons/codec/binary/Base64InputStreamTest.java"
            ]
        },
        {
            "bug index": "147",
            "bug id": "CODEC-101",
            "hexsha": "36e7620574736400941c5154bf663b198abafa7c",
            "fix_hash": "d74fc31604c805a47c44d7853f63a3b06ad6c016",
            "description": "Using new InputStreamReader(new Base64InputStream(in, true)) sometimes fails with \"java.io.IOException: Underlying input stream returned zero bytes\".\n\nThis is been tracked down that Base64InputStream#read(byte[]) incorrectly returns 0 at end of any stream which is multiple of 3 bytes long.",
            "commit number version hash": 449,
            "commit number": 332,
            "function that changed": [
                {
                    "function name": "read",
                    "function params": [
                        "offset",
                        "len"
                    ],
                    "file name": "Base64InputStream.java",
                    "file old path": "src/java/org/apache/commons/codec/binary/Base64InputStream.java",
                    "file new path": "src/java/org/apache/commons/codec/binary/Base64InputStream.java",
                    "full name": "src.java.org.apache.commons.codec.binary.Base64InputStream.read"
                },
                {
                    "function name": "testCodec101",
                    "function params": [],
                    "file name": "Base64InputStreamTest.java",
                    "file old path": "src/test/org/apache/commons/codec/binary/Base64InputStreamTest.java",
                    "file new path": "src/test/org/apache/commons/codec/binary/Base64InputStreamTest.java",
                    "full name": "src.test.org.apache.commons.codec.binary.Base64InputStreamTest.testCodec101"
                }
            ],
            "files that changed": [
                "src/java/org/apache/commons/codec/binary/Base64InputStream.java",
                "src/test/org/apache/commons/codec/binary/Base64InputStreamTest.java",
                "src/test/org/apache/commons/codec/binary/Base64TestData.java"
            ]
        },
        {
            "bug index": "149",
            "bug id": "CODEC-99",
            "hexsha": "36e7620574736400941c5154bf663b198abafa7c",
            "fix_hash": "bbe1346da2c2cf95a1aea114f6116b37f2ad3d95",
            "description": "Base64.encodeBase64String() shouldn't chunk.\n\nChange this:\n\n{code}\npublic static String encodeBase64String(byte[] binaryData) {\n    return StringUtils.newStringUtf8(encodeBase64(binaryData, true));\n}\n{code}\n\nTo this:\n\n{code}\npublic static String encodeBase64String(byte[] binaryData) {\n    return StringUtils.newStringUtf8(encodeBase64(binaryData, false));\n}\n{code}\n\n\n\nThis will fix the following tests ggregory added a few minutes ago:\n\n        //assertEquals(\"Zg==\", Base64.encodeBase64String(StringUtils.getBytesUtf8(\"f\")));\n        //assertEquals(\"Zm8=\", Base64.encodeBase64String(StringUtils.getBytesUtf8(\"fo\")));\n        //assertEquals(\"Zm9v\", Base64.encodeBase64String(StringUtils.getBytesUtf8(\"foo\")));\n        //assertEquals(\"Zm9vYg==\", Base64.encodeBase64String(StringUtils.getBytesUtf8(\"foob\")));\n        //assertEquals(\"Zm9vYmE=\", Base64.encodeBase64String(StringUtils.getBytesUtf8(\"fooba\")));\n        //assertEquals(\"Zm9vYmFy\", Base64.encodeBase64String(StringUtils.getBytesUtf8(\"foobar\")));\n\n",
            "commit number version hash": 449,
            "commit number": 324,
            "function that changed": [
                {
                    "function name": "testRfc4648Section10EncodeDecode",
                    "function params": [],
                    "file name": "Base64Test.java",
                    "file old path": "src/test/org/apache/commons/codec/binary/Base64Test.java",
                    "file new path": "src/test/org/apache/commons/codec/binary/Base64Test.java",
                    "full name": "src.test.org.apache.commons.codec.binary.Base64Test.testRfc4648Section10EncodeDecode"
                },
                {
                    "function name": "testRfc4648Section10DecodeEncode",
                    "function params": [],
                    "file name": "Base64Test.java",
                    "file old path": "src/test/org/apache/commons/codec/binary/Base64Test.java",
                    "file new path": "src/test/org/apache/commons/codec/binary/Base64Test.java",
                    "full name": "src.test.org.apache.commons.codec.binary.Base64Test.testRfc4648Section10DecodeEncode"
                },
                {
                    "function name": "testEncodeDecode",
                    "function params": [
                        "plainText"
                    ],
                    "file name": "Base64Test.java",
                    "file old path": "src/test/org/apache/commons/codec/binary/Base64Test.java",
                    "file new path": "src/test/org/apache/commons/codec/binary/Base64Test.java",
                    "full name": "src.test.org.apache.commons.codec.binary.Base64Test.testEncodeDecode"
                },
                {
                    "function name": "testRfc4648Section10DecodeWithCrLf",
                    "function params": [],
                    "file name": "Base64Test.java",
                    "file old path": "src/test/org/apache/commons/codec/binary/Base64Test.java",
                    "file new path": "src/test/org/apache/commons/codec/binary/Base64Test.java",
                    "full name": "src.test.org.apache.commons.codec.binary.Base64Test.testRfc4648Section10DecodeWithCrLf"
                },
                {
                    "function name": "testDecodeEncode",
                    "function params": [
                        "encodedText"
                    ],
                    "file name": "Base64Test.java",
                    "file old path": "src/test/org/apache/commons/codec/binary/Base64Test.java",
                    "file new path": "src/test/org/apache/commons/codec/binary/Base64Test.java",
                    "full name": "src.test.org.apache.commons.codec.binary.Base64Test.testDecodeEncode"
                }
            ],
            "files that changed": [
                "src/test/org/apache/commons/codec/binary/Base64Test.java"
            ]
        },
        {
            "bug index": "150",
            "bug id": "CODEC-97",
            "hexsha": "36e7620574736400941c5154bf663b198abafa7c",
            "fix_hash": "9535a94f6934edc9f3cc16d74621ca61429ebf8f",
            "description": "The following test passes in commons-codec 1.3 but fails in 1.4:\n\n{code}\npublic void testObjectEncode() throws Exception {\n    Base64 b64 = new Base64();\n    assertEquals(\"SGVsbG8gV29ybGQ=\", new String(b64.encode(\"Hello World\".getBytes())));\n}\n{code}\n\nCommons-codec 1.3 returns \"SGVsbG8gV29ybGQ=\".\n\nCommons-codec 1.4 returns \"SGVsbG8gV29ybGQ=\\r\\n\".\n\nI'd understand if you want to close this as \"Won't Fix\", since the behaviour wasn't documented before (the constructor wasn't even present!) and now it is. \n\nHowever, there is still no test for this behaviour on trunk as far as I can tell, so it would be good to add one so it doesn't change again in the future. I'll attach a patch for Base64Test which you can apply on trunk which will do so.\n",
            "commit number version hash": 449,
            "commit number": 319,
            "function that changed": [
                {
                    "function name": "testObjectEncode",
                    "function params": [],
                    "file name": "Base64Test.java",
                    "file old path": "src/test/org/apache/commons/codec/binary/Base64Test.java",
                    "file new path": "src/test/org/apache/commons/codec/binary/Base64Test.java",
                    "full name": "src.test.org.apache.commons.codec.binary.Base64Test.testObjectEncode"
                }
            ],
            "files that changed": [
                "src/test/org/apache/commons/codec/binary/Base64Codec13Test.java",
                "src/test/org/apache/commons/codec/binary/Base64Test.java"
            ]
        },
        {
            "bug index": "151",
            "bug id": "CODEC-97",
            "hexsha": "36e7620574736400941c5154bf663b198abafa7c",
            "fix_hash": "c10f11cf583e8e59bdc146d3a9d25bd53fc97ecc",
            "description": "The following test passes in commons-codec 1.3 but fails in 1.4:\n\n{code}\npublic void testObjectEncode() throws Exception {\n    Base64 b64 = new Base64();\n    assertEquals(\"SGVsbG8gV29ybGQ=\", new String(b64.encode(\"Hello World\".getBytes())));\n}\n{code}\n\nCommons-codec 1.3 returns \"SGVsbG8gV29ybGQ=\".\n\nCommons-codec 1.4 returns \"SGVsbG8gV29ybGQ=\\r\\n\".\n\nI'd understand if you want to close this as \"Won't Fix\", since the behaviour wasn't documented before (the constructor wasn't even present!) and now it is. \n\nHowever, there is still no test for this behaviour on trunk as far as I can tell, so it would be good to add one so it doesn't change again in the future. I'll attach a patch for Base64Test which you can apply on trunk which will do so.\n",
            "commit number version hash": 449,
            "commit number": 318,
            "function that changed": [
                {
                    "function name": "testObjectEncode",
                    "function params": [],
                    "file name": "Base64Codec13Test.java",
                    "file old path": "src/test/org/apache/commons/codec/binary/Base64Codec13Test.java",
                    "file new path": "src/test/org/apache/commons/codec/binary/Base64Codec13Test.java",
                    "full name": "src.test.org.apache.commons.codec.binary.Base64Codec13Test.testObjectEncode"
                }
            ],
            "files that changed": [
                "src/test/org/apache/commons/codec/binary/Base64Codec13Test.java"
            ]
        },
        {
            "bug index": "152",
            "bug id": "CODEC-89",
            "hexsha": "36e7620574736400941c5154bf663b198abafa7c",
            "fix_hash": "bcfef8906931a7929a6db14b9d82d387fd3f17f6",
            "description": "The instance encode() method (e.g. new Base64().encode()) appends a CRLF.  Actually it's fully chunking the output into 76 character lines.  Commons-Codec-1.3 did not do this.  The static Base64.encodeBase64() method behaves the same in both 1.3 and 1.4, so this problem only affects the instance encode() method.\n\n\n{code}\nimport org.apache.commons.codec.binary.*;\n\npublic class B64 {\n\n  public static void main(String[] args) throws Exception {\n    Base64 b64 = new Base64();\n\n    String s1 = \"aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa\";\n    String s2 = \"aaaaaaaaaa\";\n    String s3 = \"a\";\n    \n    byte[] b1 = s1.getBytes(\"UTF-8\");\n    byte[] b2 = s2.getBytes(\"UTF-8\");\n    byte[] b3 = s3.getBytes(\"UTF-8\");\n\n    byte[] result;\n    result = Base64.encodeBase64(b1);\n    System.out.println(\"[\" + new String(result, \"UTF-8\") + \"]\");\n    result = b64.encode(b1);\n    System.out.println(\"[\" + new String(result, \"UTF-8\") + \"]\");\n\n    result = Base64.encodeBase64(b2);\n    System.out.println(\"[\" + new String(result, \"UTF-8\") + \"]\");\n    result = b64.encode(b2);\n    System.out.println(\"[\" + new String(result, \"UTF-8\") + \"]\");\n\n    result = Base64.encodeBase64(b3);\n    System.out.println(\"[\" + new String(result, \"UTF-8\") + \"]\");\n    result = b64.encode(b3);\n    System.out.println(\"[\" + new String(result, \"UTF-8\") + \"]\");\n\n  }\n}\n{code}\n\n\nHere's my output:\n\n{noformat}\n$ java -cp commons-codec-1.3.jar:. B64\n[YWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYQ==]\n[YWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYQ==]\n[YWFhYWFhYWFhYQ==]\n[YWFhYWFhYWFhYQ==]\n[YQ==]\n[YQ==]\n\n\n$ java -cp commons-codec-1.4.jar:. B64\n[YWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYQ==]\n[YWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFh\nYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYQ==\n]\n[YWFhYWFhYWFhYQ==]\n[YWFhYWFhYWFhYQ==\n]\n[YQ==]\n[YQ==\n]\n{noformat}\n",
            "commit number version hash": 449,
            "commit number": 317,
            "function that changed": [
                {
                    "function name": "Base64",
                    "function params": [],
                    "file name": "Base64.java",
                    "file old path": "src/java/org/apache/commons/codec/binary/Base64.java",
                    "file new path": "src/java/org/apache/commons/codec/binary/Base64.java",
                    "full name": "src.java.org.apache.commons.codec.binary.Base64.Base64"
                },
                {
                    "function name": "Base64InputStream",
                    "function params": [
                        "in",
                        "doEncode"
                    ],
                    "file name": "Base64InputStream.java",
                    "file old path": "src/java/org/apache/commons/codec/binary/Base64InputStream.java",
                    "file new path": "src/java/org/apache/commons/codec/binary/Base64InputStream.java",
                    "full name": "src.java.org.apache.commons.codec.binary.Base64InputStream.Base64InputStream"
                },
                {
                    "function name": "Base64OutputStream",
                    "function params": [
                        "out",
                        "doEncode"
                    ],
                    "file name": "Base64OutputStream.java",
                    "file old path": "src/java/org/apache/commons/codec/binary/Base64OutputStream.java",
                    "file new path": "src/java/org/apache/commons/codec/binary/Base64OutputStream.java",
                    "full name": "src.java.org.apache.commons.codec.binary.Base64OutputStream.Base64OutputStream"
                }
            ],
            "files that changed": [
                "src/java/org/apache/commons/codec/binary/Base64.java",
                "src/java/org/apache/commons/codec/binary/Base64InputStream.java",
                "src/java/org/apache/commons/codec/binary/Base64OutputStream.java"
            ]
        },
        {
            "bug index": "153",
            "bug id": "CODEC-1",
            "hexsha": "71e7260746a902d1070a190fd78bd560464860b9",
            "fix_hash": "357223247fb76e442d38353332755305cc9d0c05",
            "description": "URLCodec causes an IndexOutOfBoundsException in BitSet when encoding non-ASCII\ncharacters.",
            "commit number version hash": 173,
            "commit number": 315,
            "function that changed": [
                {
                    "function name": "utf8",
                    "function params": [
                        "s"
                    ],
                    "file name": "Base64Codec13Test.java",
                    "file old path": "src/test/org/apache/commons/codec/binary/Base64Codec13Test.java",
                    "file new path": "src/test/org/apache/commons/codec/binary/Base64Codec13Test.java",
                    "full name": "src.test.org.apache.commons.codec.binary.Base64Codec13Test.utf8"
                }
            ],
            "files that changed": [
                "src/test/org/apache/commons/codec/binary/Base64Codec13Test.java"
            ]
        },
        {
            "bug index": "154",
            "bug id": "CODEC-1",
            "hexsha": "71e7260746a902d1070a190fd78bd560464860b9",
            "fix_hash": "1bd7cc40cf99af2a44ebebe9eef1a7de32f7031a",
            "description": "URLCodec causes an IndexOutOfBoundsException in BitSet when encoding non-ASCII\ncharacters.",
            "commit number version hash": 173,
            "commit number": 308,
            "function that changed": [],
            "files that changed": [
                "src/java/org/apache/commons/codec/binary/Hex.java"
            ]
        },
        {
            "bug index": "155",
            "bug id": "CODEC-73",
            "hexsha": "f3db0de1fe8c429bd3c869108074fed4bdf25b3a",
            "fix_hash": "d89939d5d56b0b2dfabdcf7af2bc83ad32884cce",
            "description": "Both the library itself and many of its tests are utterly dependent on the JVM's default charset. For example, {{DigestUtils}} calls {{String.getBytes()}} to convert an input string to a byte array, happily delivering different digests for the same input string if run on different platforms.\n\nIf you want to try out the havor yourself, just run the unit tests in a JVM with UTF-16, e.g. by adding the line\n{code:xml}\n<argLine>-Dfile.encoding=UTF-16</argLine>\n{code}\nto the configuration of the Surefire Plugin in the POM.",
            "commit number version hash": 549,
            "commit number": 300,
            "function that changed": [
                {
                    "function name": "log",
                    "function params": [
                        "s"
                    ],
                    "file name": "HexTest.java",
                    "file old path": "src/test/org/apache/commons/codec/binary/HexTest.java",
                    "file new path": "src/test/org/apache/commons/codec/binary/HexTest.java",
                    "full name": "src.test.org.apache.commons.codec.binary.HexTest.log"
                },
                {
                    "function name": "testCustomCharset",
                    "function params": [
                        "name",
                        "parent"
                    ],
                    "file name": "HexTest.java",
                    "file old path": "src/test/org/apache/commons/codec/binary/HexTest.java",
                    "file new path": "src/test/org/apache/commons/codec/binary/HexTest.java",
                    "full name": "src.test.org.apache.commons.codec.binary.HexTest.testCustomCharset"
                },
                {
                    "function name": "log",
                    "function params": [
                        "t"
                    ],
                    "file name": "HexTest.java",
                    "file old path": "src/test/org/apache/commons/codec/binary/HexTest.java",
                    "file new path": "src/test/org/apache/commons/codec/binary/HexTest.java",
                    "full name": "src.test.org.apache.commons.codec.binary.HexTest.log"
                },
                {
                    "function name": "charsetSanityCheck",
                    "function params": [
                        "name"
                    ],
                    "file name": "HexTest.java",
                    "file old path": "src/test/org/apache/commons/codec/binary/HexTest.java",
                    "file new path": "src/test/org/apache/commons/codec/binary/HexTest.java",
                    "full name": "src.test.org.apache.commons.codec.binary.HexTest.charsetSanityCheck"
                }
            ],
            "files that changed": [
                "src/test/org/apache/commons/codec/binary/HexTest.java"
            ]
        },
        {
            "bug index": "156",
            "bug id": "CODEC-73",
            "hexsha": "f3db0de1fe8c429bd3c869108074fed4bdf25b3a",
            "fix_hash": "b3607d8b91c7f164cb3b2aa67035bd5c468fcc56",
            "description": "Both the library itself and many of its tests are utterly dependent on the JVM's default charset. For example, {{DigestUtils}} calls {{String.getBytes()}} to convert an input string to a byte array, happily delivering different digests for the same input string if run on different platforms.\n\nIf you want to try out the havor yourself, just run the unit tests in a JVM with UTF-16, e.g. by adding the line\n{code:xml}\n<argLine>-Dfile.encoding=UTF-16</argLine>\n{code}\nto the configuration of the Surefire Plugin in the POM.",
            "commit number version hash": 549,
            "commit number": 299,
            "function that changed": [
                {
                    "function name": "Hex",
                    "function params": [
                        "csName"
                    ],
                    "file name": "Hex.java",
                    "file old path": "src/java/org/apache/commons/codec/binary/Hex.java",
                    "file new path": "src/java/org/apache/commons/codec/binary/Hex.java",
                    "full name": "src.java.org.apache.commons.codec.binary.Hex.Hex"
                },
                {
                    "function name": "encode",
                    "function params": [
                        "object"
                    ],
                    "file name": "Hex.java",
                    "file old path": "src/java/org/apache/commons/codec/binary/Hex.java",
                    "file new path": "src/java/org/apache/commons/codec/binary/Hex.java",
                    "full name": "src.java.org.apache.commons.codec.binary.Hex.encode"
                },
                {
                    "function name": "decode",
                    "function params": [
                        "array"
                    ],
                    "file name": "Hex.java",
                    "file old path": "src/java/org/apache/commons/codec/binary/Hex.java",
                    "file new path": "src/java/org/apache/commons/codec/binary/Hex.java",
                    "full name": "src.java.org.apache.commons.codec.binary.Hex.decode"
                },
                {
                    "function name": "setCharsetName",
                    "function params": [
                        "charsetName"
                    ],
                    "file name": "Hex.java",
                    "file old path": "src/java/org/apache/commons/codec/binary/Hex.java",
                    "file new path": "src/java/org/apache/commons/codec/binary/Hex.java",
                    "full name": "src.java.org.apache.commons.codec.binary.Hex.setCharsetName"
                },
                {
                    "function name": "toString",
                    "function params": [],
                    "file name": "Hex.java",
                    "file old path": "src/java/org/apache/commons/codec/binary/Hex.java",
                    "file new path": "src/java/org/apache/commons/codec/binary/Hex.java",
                    "full name": "src.java.org.apache.commons.codec.binary.Hex.toString"
                },
                {
                    "function name": "encodeHexString",
                    "function params": [
                        "data"
                    ],
                    "file name": "Hex.java",
                    "file old path": "src/java/org/apache/commons/codec/binary/Hex.java",
                    "file new path": "src/java/org/apache/commons/codec/binary/Hex.java",
                    "full name": "src.java.org.apache.commons.codec.binary.Hex.encodeHexString"
                },
                {
                    "function name": "getCharsetName",
                    "function params": [],
                    "file name": "Hex.java",
                    "file old path": "src/java/org/apache/commons/codec/binary/Hex.java",
                    "file new path": "src/java/org/apache/commons/codec/binary/Hex.java",
                    "full name": "src.java.org.apache.commons.codec.binary.Hex.getCharsetName"
                },
                {
                    "function name": "toDigit",
                    "function params": [
                        "ch",
                        "index"
                    ],
                    "file name": "Hex.java",
                    "file old path": "src/java/org/apache/commons/codec/binary/Hex.java",
                    "file new path": "src/java/org/apache/commons/codec/binary/Hex.java",
                    "full name": "src.java.org.apache.commons.codec.binary.Hex.toDigit"
                },
                {
                    "function name": "encode",
                    "function params": [
                        "array"
                    ],
                    "file name": "Hex.java",
                    "file old path": "src/java/org/apache/commons/codec/binary/Hex.java",
                    "file new path": "src/java/org/apache/commons/codec/binary/Hex.java",
                    "full name": "src.java.org.apache.commons.codec.binary.Hex.encode"
                },
                {
                    "function name": "Hex",
                    "function params": [],
                    "file name": "Hex.java",
                    "file old path": "src/java/org/apache/commons/codec/binary/Hex.java",
                    "file new path": "src/java/org/apache/commons/codec/binary/Hex.java",
                    "full name": "src.java.org.apache.commons.codec.binary.Hex.Hex"
                },
                {
                    "function name": "getBytesUnchecked",
                    "function params": [
                        "string",
                        "charsetName"
                    ],
                    "file name": "StringUtils.java",
                    "file old path": "src/java/org/apache/commons/codec/binary/StringUtils.java",
                    "file new path": "src/java/org/apache/commons/codec/binary/StringUtils.java",
                    "full name": "src.java.org.apache.commons.codec.binary.StringUtils.getBytesUnchecked"
                },
                {
                    "function name": "getBytesUsAscii",
                    "function params": [
                        "string"
                    ],
                    "file name": "StringUtils.java",
                    "file old path": "src/java/org/apache/commons/codec/binary/StringUtils.java",
                    "file new path": "src/java/org/apache/commons/codec/binary/StringUtils.java",
                    "full name": "src.java.org.apache.commons.codec.binary.StringUtils.getBytesUsAscii"
                },
                {
                    "function name": "getBytesUtf16Be",
                    "function params": [
                        "string"
                    ],
                    "file name": "StringUtils.java",
                    "file old path": "src/java/org/apache/commons/codec/binary/StringUtils.java",
                    "file new path": "src/java/org/apache/commons/codec/binary/StringUtils.java",
                    "full name": "src.java.org.apache.commons.codec.binary.StringUtils.getBytesUtf16Be"
                },
                {
                    "function name": "getBytesUtf16Le",
                    "function params": [
                        "string"
                    ],
                    "file name": "StringUtils.java",
                    "file old path": "src/java/org/apache/commons/codec/binary/StringUtils.java",
                    "file new path": "src/java/org/apache/commons/codec/binary/StringUtils.java",
                    "full name": "src.java.org.apache.commons.codec.binary.StringUtils.getBytesUtf16Le"
                },
                {
                    "function name": "getBytesIso8859_1",
                    "function params": [
                        "string"
                    ],
                    "file name": "StringUtils.java",
                    "file old path": "src/java/org/apache/commons/codec/binary/StringUtils.java",
                    "file new path": "src/java/org/apache/commons/codec/binary/StringUtils.java",
                    "full name": "src.java.org.apache.commons.codec.binary.StringUtils.getBytesIso8859_1"
                },
                {
                    "function name": "getBytesUtf8",
                    "function params": [
                        "string"
                    ],
                    "file name": "StringUtils.java",
                    "file old path": "src/java/org/apache/commons/codec/binary/StringUtils.java",
                    "file new path": "src/java/org/apache/commons/codec/binary/StringUtils.java",
                    "full name": "src.java.org.apache.commons.codec.binary.StringUtils.getBytesUtf8"
                },
                {
                    "function name": "getBytesUtf16",
                    "function params": [
                        "string"
                    ],
                    "file name": "StringUtils.java",
                    "file old path": "src/java/org/apache/commons/codec/binary/StringUtils.java",
                    "file new path": "src/java/org/apache/commons/codec/binary/StringUtils.java",
                    "full name": "src.java.org.apache.commons.codec.binary.StringUtils.getBytesUtf16"
                },
                {
                    "function name": "sha384Hex",
                    "function params": [
                        "data"
                    ],
                    "file name": "DigestUtils.java",
                    "file old path": "src/java/org/apache/commons/codec/digest/DigestUtils.java",
                    "file new path": "src/java/org/apache/commons/codec/digest/DigestUtils.java",
                    "full name": "src.java.org.apache.commons.codec.digest.DigestUtils.sha384Hex"
                },
                {
                    "function name": "sha384Hex",
                    "function params": [
                        "data"
                    ],
                    "file name": "DigestUtils.java",
                    "file old path": "src/java/org/apache/commons/codec/digest/DigestUtils.java",
                    "file new path": "src/java/org/apache/commons/codec/digest/DigestUtils.java",
                    "full name": "src.java.org.apache.commons.codec.digest.DigestUtils.sha384Hex"
                },
                {
                    "function name": "sha256Hex",
                    "function params": [
                        "data"
                    ],
                    "file name": "DigestUtils.java",
                    "file old path": "src/java/org/apache/commons/codec/digest/DigestUtils.java",
                    "file new path": "src/java/org/apache/commons/codec/digest/DigestUtils.java",
                    "full name": "src.java.org.apache.commons.codec.digest.DigestUtils.sha256Hex"
                },
                {
                    "function name": "sha384Hex",
                    "function params": [
                        "data"
                    ],
                    "file name": "DigestUtils.java",
                    "file old path": "src/java/org/apache/commons/codec/digest/DigestUtils.java",
                    "file new path": "src/java/org/apache/commons/codec/digest/DigestUtils.java",
                    "full name": "src.java.org.apache.commons.codec.digest.DigestUtils.sha384Hex"
                },
                {
                    "function name": "sha512Hex",
                    "function params": [
                        "data"
                    ],
                    "file name": "DigestUtils.java",
                    "file old path": "src/java/org/apache/commons/codec/digest/DigestUtils.java",
                    "file new path": "src/java/org/apache/commons/codec/digest/DigestUtils.java",
                    "full name": "src.java.org.apache.commons.codec.digest.DigestUtils.sha512Hex"
                },
                {
                    "function name": "sha512Hex",
                    "function params": [
                        "data"
                    ],
                    "file name": "DigestUtils.java",
                    "file old path": "src/java/org/apache/commons/codec/digest/DigestUtils.java",
                    "file new path": "src/java/org/apache/commons/codec/digest/DigestUtils.java",
                    "full name": "src.java.org.apache.commons.codec.digest.DigestUtils.sha512Hex"
                },
                {
                    "function name": "md5Hex",
                    "function params": [
                        "data"
                    ],
                    "file name": "DigestUtils.java",
                    "file old path": "src/java/org/apache/commons/codec/digest/DigestUtils.java",
                    "file new path": "src/java/org/apache/commons/codec/digest/DigestUtils.java",
                    "full name": "src.java.org.apache.commons.codec.digest.DigestUtils.md5Hex"
                },
                {
                    "function name": "md5Hex",
                    "function params": [
                        "data"
                    ],
                    "file name": "DigestUtils.java",
                    "file old path": "src/java/org/apache/commons/codec/digest/DigestUtils.java",
                    "file new path": "src/java/org/apache/commons/codec/digest/DigestUtils.java",
                    "full name": "src.java.org.apache.commons.codec.digest.DigestUtils.md5Hex"
                },
                {
                    "function name": "sha256Hex",
                    "function params": [
                        "data"
                    ],
                    "file name": "DigestUtils.java",
                    "file old path": "src/java/org/apache/commons/codec/digest/DigestUtils.java",
                    "file new path": "src/java/org/apache/commons/codec/digest/DigestUtils.java",
                    "full name": "src.java.org.apache.commons.codec.digest.DigestUtils.sha256Hex"
                },
                {
                    "function name": "shaHex",
                    "function params": [
                        "data"
                    ],
                    "file name": "DigestUtils.java",
                    "file old path": "src/java/org/apache/commons/codec/digest/DigestUtils.java",
                    "file new path": "src/java/org/apache/commons/codec/digest/DigestUtils.java",
                    "full name": "src.java.org.apache.commons.codec.digest.DigestUtils.shaHex"
                },
                {
                    "function name": "sha256Hex",
                    "function params": [
                        "data"
                    ],
                    "file name": "DigestUtils.java",
                    "file old path": "src/java/org/apache/commons/codec/digest/DigestUtils.java",
                    "file new path": "src/java/org/apache/commons/codec/digest/DigestUtils.java",
                    "full name": "src.java.org.apache.commons.codec.digest.DigestUtils.sha256Hex"
                },
                {
                    "function name": "sha512Hex",
                    "function params": [
                        "data"
                    ],
                    "file name": "DigestUtils.java",
                    "file old path": "src/java/org/apache/commons/codec/digest/DigestUtils.java",
                    "file new path": "src/java/org/apache/commons/codec/digest/DigestUtils.java",
                    "full name": "src.java.org.apache.commons.codec.digest.DigestUtils.sha512Hex"
                },
                {
                    "function name": "shaHex",
                    "function params": [
                        "data"
                    ],
                    "file name": "DigestUtils.java",
                    "file old path": "src/java/org/apache/commons/codec/digest/DigestUtils.java",
                    "file new path": "src/java/org/apache/commons/codec/digest/DigestUtils.java",
                    "full name": "src.java.org.apache.commons.codec.digest.DigestUtils.shaHex"
                },
                {
                    "function name": "md5Hex",
                    "function params": [
                        "data"
                    ],
                    "file name": "DigestUtils.java",
                    "file old path": "src/java/org/apache/commons/codec/digest/DigestUtils.java",
                    "file new path": "src/java/org/apache/commons/codec/digest/DigestUtils.java",
                    "full name": "src.java.org.apache.commons.codec.digest.DigestUtils.md5Hex"
                },
                {
                    "function name": "shaHex",
                    "function params": [
                        "data"
                    ],
                    "file name": "DigestUtils.java",
                    "file old path": "src/java/org/apache/commons/codec/digest/DigestUtils.java",
                    "file new path": "src/java/org/apache/commons/codec/digest/DigestUtils.java",
                    "full name": "src.java.org.apache.commons.codec.digest.DigestUtils.shaHex"
                },
                {
                    "function name": "testUUID",
                    "function params": [],
                    "file name": "Base64Test.java",
                    "file old path": "src/test/org/apache/commons/codec/binary/Base64Test.java",
                    "file new path": "src/test/org/apache/commons/codec/binary/Base64Test.java",
                    "full name": "src.test.org.apache.commons.codec.binary.Base64Test.testUUID"
                },
                {
                    "function name": "testCustomCharset",
                    "function params": [],
                    "file name": "HexTest.java",
                    "file old path": "src/test/org/apache/commons/codec/binary/HexTest.java",
                    "file new path": "src/test/org/apache/commons/codec/binary/HexTest.java",
                    "full name": "src.test.org.apache.commons.codec.binary.HexTest.testCustomCharset"
                },
                {
                    "function name": "testDecodeBadCharacterPos0",
                    "function params": [],
                    "file name": "HexTest.java",
                    "file old path": "src/test/org/apache/commons/codec/binary/HexTest.java",
                    "file new path": "src/test/org/apache/commons/codec/binary/HexTest.java",
                    "full name": "src.test.org.apache.commons.codec.binary.HexTest.testDecodeBadCharacterPos0"
                },
                {
                    "function name": "testDencodeEmpty",
                    "function params": [],
                    "file name": "HexTest.java",
                    "file old path": "src/test/org/apache/commons/codec/binary/HexTest.java",
                    "file new path": "src/test/org/apache/commons/codec/binary/HexTest.java",
                    "full name": "src.test.org.apache.commons.codec.binary.HexTest.testDencodeEmpty"
                },
                {
                    "function name": "testHelloWorldUpperCaseHex",
                    "function params": [],
                    "file name": "HexTest.java",
                    "file old path": "src/test/org/apache/commons/codec/binary/HexTest.java",
                    "file new path": "src/test/org/apache/commons/codec/binary/HexTest.java",
                    "full name": "src.test.org.apache.commons.codec.binary.HexTest.testHelloWorldUpperCaseHex"
                },
                {
                    "function name": "charsetSanityCheck",
                    "function params": [
                        "name"
                    ],
                    "file name": "HexTest.java",
                    "file old path": "src/test/org/apache/commons/codec/binary/HexTest.java",
                    "file new path": "src/test/org/apache/commons/codec/binary/HexTest.java",
                    "full name": "src.test.org.apache.commons.codec.binary.HexTest.charsetSanityCheck"
                },
                {
                    "function name": "testDecodeArrayOddCharacters",
                    "function params": [],
                    "file name": "HexTest.java",
                    "file old path": "src/test/org/apache/commons/codec/binary/HexTest.java",
                    "file new path": "src/test/org/apache/commons/codec/binary/HexTest.java",
                    "full name": "src.test.org.apache.commons.codec.binary.HexTest.testDecodeArrayOddCharacters"
                },
                {
                    "function name": "log",
                    "function params": [
                        "s"
                    ],
                    "file name": "HexTest.java",
                    "file old path": "src/test/org/apache/commons/codec/binary/HexTest.java",
                    "file new path": "src/test/org/apache/commons/codec/binary/HexTest.java",
                    "full name": "src.test.org.apache.commons.codec.binary.HexTest.log"
                },
                {
                    "function name": "testDecodeBadCharacterPos1",
                    "function params": [],
                    "file name": "HexTest.java",
                    "file old path": "src/test/org/apache/commons/codec/binary/HexTest.java",
                    "file new path": "src/test/org/apache/commons/codec/binary/HexTest.java",
                    "full name": "src.test.org.apache.commons.codec.binary.HexTest.testDecodeBadCharacterPos1"
                },
                {
                    "function name": "testRequiredCharset",
                    "function params": [],
                    "file name": "HexTest.java",
                    "file old path": "src/test/org/apache/commons/codec/binary/HexTest.java",
                    "file new path": "src/test/org/apache/commons/codec/binary/HexTest.java",
                    "full name": "src.test.org.apache.commons.codec.binary.HexTest.testRequiredCharset"
                },
                {
                    "function name": "testDecodeClassCastException",
                    "function params": [],
                    "file name": "HexTest.java",
                    "file old path": "src/test/org/apache/commons/codec/binary/HexTest.java",
                    "file new path": "src/test/org/apache/commons/codec/binary/HexTest.java",
                    "full name": "src.test.org.apache.commons.codec.binary.HexTest.testDecodeClassCastException"
                },
                {
                    "function name": "testDecodeHexOddCharacters1",
                    "function params": [],
                    "file name": "HexTest.java",
                    "file old path": "src/test/org/apache/commons/codec/binary/HexTest.java",
                    "file new path": "src/test/org/apache/commons/codec/binary/HexTest.java",
                    "full name": "src.test.org.apache.commons.codec.binary.HexTest.testDecodeHexOddCharacters1"
                },
                {
                    "function name": "testEncodeDecodeRandom",
                    "function params": [],
                    "file name": "HexTest.java",
                    "file old path": "src/test/org/apache/commons/codec/binary/HexTest.java",
                    "file new path": "src/test/org/apache/commons/codec/binary/HexTest.java",
                    "full name": "src.test.org.apache.commons.codec.binary.HexTest.testEncodeDecodeRandom"
                },
                {
                    "function name": "testDecodeHexOddCharacters5",
                    "function params": [],
                    "file name": "HexTest.java",
                    "file old path": "src/test/org/apache/commons/codec/binary/HexTest.java",
                    "file new path": "src/test/org/apache/commons/codec/binary/HexTest.java",
                    "full name": "src.test.org.apache.commons.codec.binary.HexTest.testDecodeHexOddCharacters5"
                },
                {
                    "function name": "checkDecodeHexOddCharacters",
                    "function params": [
                        "data"
                    ],
                    "file name": "HexTest.java",
                    "file old path": "src/test/org/apache/commons/codec/binary/HexTest.java",
                    "file new path": "src/test/org/apache/commons/codec/binary/HexTest.java",
                    "full name": "src.test.org.apache.commons.codec.binary.HexTest.checkDecodeHexOddCharacters"
                },
                {
                    "function name": "testEncodeClassCastException",
                    "function params": [],
                    "file name": "HexTest.java",
                    "file old path": "src/test/org/apache/commons/codec/binary/HexTest.java",
                    "file new path": "src/test/org/apache/commons/codec/binary/HexTest.java",
                    "full name": "src.test.org.apache.commons.codec.binary.HexTest.testEncodeClassCastException"
                },
                {
                    "function name": "testEncodeZeroes",
                    "function params": [],
                    "file name": "HexTest.java",
                    "file old path": "src/test/org/apache/commons/codec/binary/HexTest.java",
                    "file new path": "src/test/org/apache/commons/codec/binary/HexTest.java",
                    "full name": "src.test.org.apache.commons.codec.binary.HexTest.testEncodeZeroes"
                },
                {
                    "function name": "testHelloWorldLowerCaseHex",
                    "function params": [],
                    "file name": "HexTest.java",
                    "file old path": "src/test/org/apache/commons/codec/binary/HexTest.java",
                    "file new path": "src/test/org/apache/commons/codec/binary/HexTest.java",
                    "full name": "src.test.org.apache.commons.codec.binary.HexTest.testHelloWorldLowerCaseHex"
                },
                {
                    "function name": "testDecodeStringOddCharacters",
                    "function params": [],
                    "file name": "HexTest.java",
                    "file old path": "src/test/org/apache/commons/codec/binary/HexTest.java",
                    "file new path": "src/test/org/apache/commons/codec/binary/HexTest.java",
                    "full name": "src.test.org.apache.commons.codec.binary.HexTest.testDecodeStringOddCharacters"
                },
                {
                    "function name": "testEncodeEmpty",
                    "function params": [],
                    "file name": "HexTest.java",
                    "file old path": "src/test/org/apache/commons/codec/binary/HexTest.java",
                    "file new path": "src/test/org/apache/commons/codec/binary/HexTest.java",
                    "full name": "src.test.org.apache.commons.codec.binary.HexTest.testEncodeEmpty"
                },
                {
                    "function name": "testCustomCharset",
                    "function params": [
                        "name",
                        "parent"
                    ],
                    "file name": "HexTest.java",
                    "file old path": "src/test/org/apache/commons/codec/binary/HexTest.java",
                    "file new path": "src/test/org/apache/commons/codec/binary/HexTest.java",
                    "full name": "src.test.org.apache.commons.codec.binary.HexTest.testCustomCharset"
                },
                {
                    "function name": "testDecodeHexOddCharacters3",
                    "function params": [],
                    "file name": "HexTest.java",
                    "file old path": "src/test/org/apache/commons/codec/binary/HexTest.java",
                    "file new path": "src/test/org/apache/commons/codec/binary/HexTest.java",
                    "full name": "src.test.org.apache.commons.codec.binary.HexTest.testDecodeHexOddCharacters3"
                },
                {
                    "function name": "testGetBytesUnchecked",
                    "function params": [
                        "charsetName"
                    ],
                    "file name": "StringUtilsTest.java",
                    "file old path": "src/test/org/apache/commons/codec/binary/StringUtilsTest.java",
                    "file new path": "src/test/org/apache/commons/codec/binary/StringUtilsTest.java",
                    "full name": "src.test.org.apache.commons.codec.binary.StringUtilsTest.testGetBytesUnchecked"
                },
                {
                    "function name": "testGetBytesUtf16Le",
                    "function params": [],
                    "file name": "StringUtilsTest.java",
                    "file old path": "src/test/org/apache/commons/codec/binary/StringUtilsTest.java",
                    "file new path": "src/test/org/apache/commons/codec/binary/StringUtilsTest.java",
                    "full name": "src.test.org.apache.commons.codec.binary.StringUtilsTest.testGetBytesUtf16Le"
                },
                {
                    "function name": "testGetBytesIso8859_1",
                    "function params": [],
                    "file name": "StringUtilsTest.java",
                    "file old path": "src/test/org/apache/commons/codec/binary/StringUtilsTest.java",
                    "file new path": "src/test/org/apache/commons/codec/binary/StringUtilsTest.java",
                    "full name": "src.test.org.apache.commons.codec.binary.StringUtilsTest.testGetBytesIso8859_1"
                },
                {
                    "function name": "testGetBytesUncheckedBadName",
                    "function params": [],
                    "file name": "StringUtilsTest.java",
                    "file old path": "src/test/org/apache/commons/codec/binary/StringUtilsTest.java",
                    "file new path": "src/test/org/apache/commons/codec/binary/StringUtilsTest.java",
                    "full name": "src.test.org.apache.commons.codec.binary.StringUtilsTest.testGetBytesUncheckedBadName"
                },
                {
                    "function name": "testGetBytesUsAscii",
                    "function params": [],
                    "file name": "StringUtilsTest.java",
                    "file old path": "src/test/org/apache/commons/codec/binary/StringUtilsTest.java",
                    "file new path": "src/test/org/apache/commons/codec/binary/StringUtilsTest.java",
                    "full name": "src.test.org.apache.commons.codec.binary.StringUtilsTest.testGetBytesUsAscii"
                },
                {
                    "function name": "testGetBytesUtf16Be",
                    "function params": [],
                    "file name": "StringUtilsTest.java",
                    "file old path": "src/test/org/apache/commons/codec/binary/StringUtilsTest.java",
                    "file new path": "src/test/org/apache/commons/codec/binary/StringUtilsTest.java",
                    "full name": "src.test.org.apache.commons.codec.binary.StringUtilsTest.testGetBytesUtf16Be"
                },
                {
                    "function name": "testGetBytesUtf8",
                    "function params": [],
                    "file name": "StringUtilsTest.java",
                    "file old path": "src/test/org/apache/commons/codec/binary/StringUtilsTest.java",
                    "file new path": "src/test/org/apache/commons/codec/binary/StringUtilsTest.java",
                    "full name": "src.test.org.apache.commons.codec.binary.StringUtilsTest.testGetBytesUtf8"
                },
                {
                    "function name": "testGetBytesUtf16",
                    "function params": [],
                    "file name": "StringUtilsTest.java",
                    "file old path": "src/test/org/apache/commons/codec/binary/StringUtilsTest.java",
                    "file new path": "src/test/org/apache/commons/codec/binary/StringUtilsTest.java",
                    "full name": "src.test.org.apache.commons.codec.binary.StringUtilsTest.testGetBytesUtf16"
                }
            ],
            "files that changed": [
                "src/java/org/apache/commons/codec/binary/Hex.java",
                "src/java/org/apache/commons/codec/binary/StringUtils.java",
                "src/java/org/apache/commons/codec/digest/DigestUtils.java",
                "src/test/org/apache/commons/codec/binary/Base64Test.java",
                "src/test/org/apache/commons/codec/binary/HexTest.java",
                "src/test/org/apache/commons/codec/binary/StringUtilsTest.java"
            ]
        },
        {
            "bug index": "157",
            "bug id": "CODEC-1",
            "hexsha": "71e7260746a902d1070a190fd78bd560464860b9",
            "fix_hash": "60cff9d95843e30169b826bc1a2c1888952937c9",
            "description": "URLCodec causes an IndexOutOfBoundsException in BitSet when encoding non-ASCII\ncharacters.",
            "commit number version hash": 173,
            "commit number": 298,
            "function that changed": [],
            "files that changed": [
                "src/java/org/apache/commons/codec/binary/Base64.java",
                "src/java/org/apache/commons/codec/digest/DigestUtils.java"
            ]
        },
        {
            "bug index": "158",
            "bug id": "CODEC-73",
            "hexsha": "f3db0de1fe8c429bd3c869108074fed4bdf25b3a",
            "fix_hash": "25ad9f824aef478b61a774ed9402068ad215b23b",
            "description": "Both the library itself and many of its tests are utterly dependent on the JVM's default charset. For example, {{DigestUtils}} calls {{String.getBytes()}} to convert an input string to a byte array, happily delivering different digests for the same input string if run on different platforms.\n\nIf you want to try out the havor yourself, just run the unit tests in a JVM with UTF-16, e.g. by adding the line\n{code:xml}\n<argLine>-Dfile.encoding=UTF-16</argLine>\n{code}\nto the configuration of the Surefire Plugin in the POM.",
            "commit number version hash": 549,
            "commit number": 297,
            "function that changed": [
                {
                    "function name": "sha256",
                    "function params": [
                        "data"
                    ],
                    "file name": "DigestUtils.java",
                    "file old path": "src/java/org/apache/commons/codec/digest/DigestUtils.java",
                    "file new path": "src/java/org/apache/commons/codec/digest/DigestUtils.java",
                    "full name": "src.java.org.apache.commons.codec.digest.DigestUtils.sha256"
                },
                {
                    "function name": "sha512",
                    "function params": [
                        "data"
                    ],
                    "file name": "DigestUtils.java",
                    "file old path": "src/java/org/apache/commons/codec/digest/DigestUtils.java",
                    "file new path": "src/java/org/apache/commons/codec/digest/DigestUtils.java",
                    "full name": "src.java.org.apache.commons.codec.digest.DigestUtils.sha512"
                },
                {
                    "function name": "getBytesUtf8",
                    "function params": [
                        "data"
                    ],
                    "file name": "DigestUtils.java",
                    "file old path": "src/java/org/apache/commons/codec/digest/DigestUtils.java",
                    "file new path": "src/java/org/apache/commons/codec/digest/DigestUtils.java",
                    "full name": "src.java.org.apache.commons.codec.digest.DigestUtils.getBytesUtf8"
                },
                {
                    "function name": "sha384",
                    "function params": [
                        "data"
                    ],
                    "file name": "DigestUtils.java",
                    "file old path": "src/java/org/apache/commons/codec/digest/DigestUtils.java",
                    "file new path": "src/java/org/apache/commons/codec/digest/DigestUtils.java",
                    "full name": "src.java.org.apache.commons.codec.digest.DigestUtils.sha384"
                },
                {
                    "function name": "digest",
                    "function params": [
                        "digest",
                        "data"
                    ],
                    "file name": "DigestUtils.java",
                    "file old path": "src/java/org/apache/commons/codec/digest/DigestUtils.java",
                    "file new path": "src/java/org/apache/commons/codec/digest/DigestUtils.java",
                    "full name": "src.java.org.apache.commons.codec.digest.DigestUtils.digest"
                },
                {
                    "function name": "md5",
                    "function params": [
                        "data"
                    ],
                    "file name": "DigestUtils.java",
                    "file old path": "src/java/org/apache/commons/codec/digest/DigestUtils.java",
                    "file new path": "src/java/org/apache/commons/codec/digest/DigestUtils.java",
                    "full name": "src.java.org.apache.commons.codec.digest.DigestUtils.md5"
                },
                {
                    "function name": "sha",
                    "function params": [
                        "data"
                    ],
                    "file name": "DigestUtils.java",
                    "file old path": "src/java/org/apache/commons/codec/digest/DigestUtils.java",
                    "file new path": "src/java/org/apache/commons/codec/digest/DigestUtils.java",
                    "full name": "src.java.org.apache.commons.codec.digest.DigestUtils.sha"
                },
                {
                    "function name": "testMD5HexLength",
                    "function params": [],
                    "file name": "DigestUtilsTest.java",
                    "file old path": "src/test/org/apache/commons/codec/digest/DigestUtilsTest.java",
                    "file new path": "src/test/org/apache/commons/codec/digest/DigestUtilsTest.java",
                    "full name": "src.test.org.apache.commons.codec.digest.DigestUtilsTest.testMD5HexLength"
                },
                {
                    "function name": "getBytesUtf8",
                    "function params": [
                        "hashMe"
                    ],
                    "file name": "DigestUtilsTest.java",
                    "file old path": "src/test/org/apache/commons/codec/digest/DigestUtilsTest.java",
                    "file new path": "src/test/org/apache/commons/codec/digest/DigestUtilsTest.java",
                    "full name": "src.test.org.apache.commons.codec.digest.DigestUtilsTest.getBytesUtf8"
                },
                {
                    "function name": "testShaHex",
                    "function params": [],
                    "file name": "DigestUtilsTest.java",
                    "file old path": "src/test/org/apache/commons/codec/digest/DigestUtilsTest.java",
                    "file new path": "src/test/org/apache/commons/codec/digest/DigestUtilsTest.java",
                    "full name": "src.test.org.apache.commons.codec.digest.DigestUtilsTest.testShaHex"
                },
                {
                    "function name": "testSha384",
                    "function params": [],
                    "file name": "DigestUtilsTest.java",
                    "file old path": "src/test/org/apache/commons/codec/digest/DigestUtilsTest.java",
                    "file new path": "src/test/org/apache/commons/codec/digest/DigestUtilsTest.java",
                    "full name": "src.test.org.apache.commons.codec.digest.DigestUtilsTest.testSha384"
                },
                {
                    "function name": "testSha256",
                    "function params": [],
                    "file name": "DigestUtilsTest.java",
                    "file old path": "src/test/org/apache/commons/codec/digest/DigestUtilsTest.java",
                    "file new path": "src/test/org/apache/commons/codec/digest/DigestUtilsTest.java",
                    "full name": "src.test.org.apache.commons.codec.digest.DigestUtilsTest.testSha256"
                },
                {
                    "function name": "testSha512",
                    "function params": [],
                    "file name": "DigestUtilsTest.java",
                    "file old path": "src/test/org/apache/commons/codec/digest/DigestUtilsTest.java",
                    "file new path": "src/test/org/apache/commons/codec/digest/DigestUtilsTest.java",
                    "full name": "src.test.org.apache.commons.codec.digest.DigestUtilsTest.testSha512"
                },
                {
                    "function name": "testMD5Length",
                    "function params": [],
                    "file name": "DigestUtilsTest.java",
                    "file old path": "src/test/org/apache/commons/codec/digest/DigestUtilsTest.java",
                    "file new path": "src/test/org/apache/commons/codec/digest/DigestUtilsTest.java",
                    "full name": "src.test.org.apache.commons.codec.digest.DigestUtilsTest.testMD5Length"
                },
                {
                    "function name": "testConstructable",
                    "function params": [],
                    "file name": "DigestUtilsTest.java",
                    "file old path": "src/test/org/apache/commons/codec/digest/DigestUtilsTest.java",
                    "file new path": "src/test/org/apache/commons/codec/digest/DigestUtilsTest.java",
                    "full name": "src.test.org.apache.commons.codec.digest.DigestUtilsTest.testConstructable"
                }
            ],
            "files that changed": [
                "src/java/org/apache/commons/codec/digest/DigestUtils.java",
                "src/test/org/apache/commons/codec/digest/DigestUtilsTest.java"
            ]
        },
        {
            "bug index": "159",
            "bug id": "CODEC-84",
            "hexsha": "f3db0de1fe8c429bd3c869108074fed4bdf25b3a",
            "fix_hash": "a5dfe5cbc95d7f3ce0b4829756690c2cb8439f4c",
            "description": "The new test case (CODEC-83) has highlighted a number of issues with the \"alternative\" encoding in the Double Metaphone implementation\n\n1) Bug in the handleG method when \"G\" is followed by \"IER\" \n *  The alternative encoding of \"Angier\" results in \"ANKR\" rather than \"ANJR\"\n *  The alternative encoding of \"rogier\" results in \"RKR\" rather than \"RJR\"\n\nThe problem is in the handleG() method and is caused by the wrong length (4 instead of 3) being used in the contains() method:\n\n{code}\n } else if (contains(value, index + 1, 4, \"IER\")) {\n{code}\n\n...this should be\n\n{code}\n } else if (contains(value, index + 1, 3, \"IER\")) {\n{code}\n\n\n2)  Bug in the handleL method\n * The alternative encoding of \"cabrillo\" results in \"KPRL \" rather than \"KPR\"\n\nThe problem is that the first thing this method does is append an \"L\" to both primary & alternative encoding. When the conditionL0() method returns true then the \"L\" should not be appended for the alternative encoding\n\n{code}\nresult.append('L');\nif (charAt(value, index + 1) == 'L') {\n    if (conditionL0(value, index)) {\n        result.appendAlternate(' ');\n    }\n    index += 2;\n} else {\n    index++;\n}\nreturn index;\n{code}\n\nSuggest refeactoring this to\n\n{code}\nif (charAt(value, index + 1) == 'L') {\n    if (conditionL0(value, index)) {\n        result.appendPrimary('L');\n    } else {\n        result.append('L');\n    }\n    index += 2;\n} else {\n    result.append('L');\n    index++;\n}\nreturn index;\n{code}\n\n3) Bug in the conditionL0() method for words ending in \"AS\" and \"OS\"\n * The alternative encoding of \"gallegos\" results in \"KLKS\" rather than \"KKS\"\n\nThe problem is caused by the wrong start position being used in the contains() method, which means its not checking the last two characters of the word but checks the previous & current position instead:\n\n{code}\n        } else if ((contains(value, index - 1, 2, \"AS\", \"OS\") || \n{code}\n\n...this should be\n\n{code}\n        } else if ((contains(value, value.length() - 2, 2, \"AS\", \"OS\") || \n{code}\n\nI'll attach a patch for review",
            "commit number version hash": 549,
            "commit number": 296,
            "function that changed": [
                {
                    "function name": "conditionL0",
                    "function params": [
                        "value",
                        "index"
                    ],
                    "file name": "DoubleMetaphone.java",
                    "file old path": "src/java/org/apache/commons/codec/language/DoubleMetaphone.java",
                    "file new path": "src/java/org/apache/commons/codec/language/DoubleMetaphone.java",
                    "full name": "src.java.org.apache.commons.codec.language.DoubleMetaphone.conditionL0"
                },
                {
                    "function name": "handleL",
                    "function params": [
                        "value",
                        "result",
                        "index"
                    ],
                    "file name": "DoubleMetaphone.java",
                    "file old path": "src/java/org/apache/commons/codec/language/DoubleMetaphone.java",
                    "file new path": "src/java/org/apache/commons/codec/language/DoubleMetaphone.java",
                    "full name": "src.java.org.apache.commons.codec.language.DoubleMetaphone.handleL"
                },
                {
                    "function name": "handleG",
                    "function params": [
                        "value",
                        "result",
                        "index",
                        "slavoGermanic"
                    ],
                    "file name": "DoubleMetaphone.java",
                    "file old path": "src/java/org/apache/commons/codec/language/DoubleMetaphone.java",
                    "file new path": "src/java/org/apache/commons/codec/language/DoubleMetaphone.java",
                    "full name": "src.java.org.apache.commons.codec.language.DoubleMetaphone.handleG"
                }
            ],
            "files that changed": [
                "src/java/org/apache/commons/codec/language/DoubleMetaphone.java",
                "src/test/org/apache/commons/codec/language/DoubleMetaphone2Test.java"
            ]
        },
        {
            "bug index": "160",
            "bug id": "CODEC-1",
            "hexsha": "71e7260746a902d1070a190fd78bd560464860b9",
            "fix_hash": "9f243610fca08de0998ae66c55bb79eed3c45720",
            "description": "URLCodec causes an IndexOutOfBoundsException in BitSet when encoding non-ASCII\ncharacters.",
            "commit number version hash": 173,
            "commit number": 287,
            "function that changed": [],
            "files that changed": [
                "src/test/org/apache/commons/codec/net/UtilsTest.java"
            ]
        },
        {
            "bug index": "161",
            "bug id": "CODEC-1",
            "hexsha": "71e7260746a902d1070a190fd78bd560464860b9",
            "fix_hash": "4ea5032f95075b87cb8bd68681e4182661e303f1",
            "description": "URLCodec causes an IndexOutOfBoundsException in BitSet when encoding non-ASCII\ncharacters.",
            "commit number version hash": 173,
            "commit number": 286,
            "function that changed": [],
            "files that changed": [
                "src/java/org/apache/commons/codec/net/Utils.java"
            ]
        },
        {
            "bug index": "162",
            "bug id": "CODEC-1",
            "hexsha": "71e7260746a902d1070a190fd78bd560464860b9",
            "fix_hash": "00e030595183922b5157358ec502f4ce4f168753",
            "description": "URLCodec causes an IndexOutOfBoundsException in BitSet when encoding non-ASCII\ncharacters.",
            "commit number version hash": 173,
            "commit number": 277,
            "function that changed": [
                {
                    "function name": "decodeText",
                    "function params": [
                        "text"
                    ],
                    "file name": "RFC1522Codec.java",
                    "file old path": "src/java/org/apache/commons/codec/net/RFC1522Codec.java",
                    "file new path": "src/java/org/apache/commons/codec/net/RFC1522Codec.java",
                    "full name": "src.java.org.apache.commons.codec.net.RFC1522Codec.decodeText"
                },
                {
                    "function name": "testDecodeInvalid",
                    "function params": [],
                    "file name": "RFC1522CodecTest.java",
                    "file old path": "src/test/org/apache/commons/codec/net/RFC1522CodecTest.java",
                    "file new path": "src/test/org/apache/commons/codec/net/RFC1522CodecTest.java",
                    "full name": "src.test.org.apache.commons.codec.net.RFC1522CodecTest.testDecodeInvalid"
                },
                {
                    "function name": "assertExpectedDecoderException",
                    "function params": [
                        "s"
                    ],
                    "file name": "RFC1522CodecTest.java",
                    "file old path": "src/test/org/apache/commons/codec/net/RFC1522CodecTest.java",
                    "file new path": "src/test/org/apache/commons/codec/net/RFC1522CodecTest.java",
                    "full name": "src.test.org.apache.commons.codec.net.RFC1522CodecTest.assertExpectedDecoderException"
                }
            ],
            "files that changed": [
                "src/java/org/apache/commons/codec/net/RFC1522Codec.java",
                "src/test/org/apache/commons/codec/net/RFC1522CodecTest.java"
            ]
        },
        {
            "bug index": "163",
            "bug id": "CODEC-1",
            "hexsha": "71e7260746a902d1070a190fd78bd560464860b9",
            "fix_hash": "81b6c1171a695a42b72220578d50afb3a43dff2b",
            "description": "URLCodec causes an IndexOutOfBoundsException in BitSet when encoding non-ASCII\ncharacters.",
            "commit number version hash": 173,
            "commit number": 276,
            "function that changed": [
                {
                    "function name": "decodeText",
                    "function params": [
                        "text"
                    ],
                    "file name": "RFC1522Codec.java",
                    "file old path": "src/java/org/apache/commons/codec/net/RFC1522Codec.java",
                    "file new path": "src/java/org/apache/commons/codec/net/RFC1522Codec.java",
                    "full name": "src.java.org.apache.commons.codec.net.RFC1522Codec.decodeText"
                }
            ],
            "files that changed": [
                "src/java/org/apache/commons/codec/net/RFC1522Codec.java"
            ]
        },
        {
            "bug index": "164",
            "bug id": "CODEC-81",
            "hexsha": "f3db0de1fe8c429bd3c869108074fed4bdf25b3a",
            "fix_hash": "20a88d9b49beda71ddee69af92872716fd00f13a",
            "description": "Base64's new constructor parameters are ignored (e.g. chunkSize and chunkSeparator) when using the Encoder interface.\n\n",
            "commit number version hash": 549,
            "commit number": 272,
            "function that changed": [
                {
                    "function name": "encode",
                    "function params": [
                        "pArray"
                    ],
                    "file name": "Base64.java",
                    "file old path": "src/java/org/apache/commons/codec/binary/Base64.java",
                    "file new path": "src/java/org/apache/commons/codec/binary/Base64.java",
                    "full name": "src.java.org.apache.commons.codec.binary.Base64.encode"
                },
                {
                    "function name": "decodeBase64",
                    "function params": [
                        "base64Data"
                    ],
                    "file name": "Base64.java",
                    "file old path": "src/java/org/apache/commons/codec/binary/Base64.java",
                    "file new path": "src/java/org/apache/commons/codec/binary/Base64.java",
                    "full name": "src.java.org.apache.commons.codec.binary.Base64.decodeBase64"
                },
                {
                    "function name": "getEncodeLength",
                    "function params": [
                        "pArray",
                        "chunkSize",
                        "chunkSeparator"
                    ],
                    "file name": "Base64.java",
                    "file old path": "src/java/org/apache/commons/codec/binary/Base64.java",
                    "file new path": "src/java/org/apache/commons/codec/binary/Base64.java",
                    "full name": "src.java.org.apache.commons.codec.binary.Base64.getEncodeLength"
                },
                {
                    "function name": "decode",
                    "function params": [
                        "pObject"
                    ],
                    "file name": "Base64.java",
                    "file old path": "src/java/org/apache/commons/codec/binary/Base64.java",
                    "file new path": "src/java/org/apache/commons/codec/binary/Base64.java",
                    "full name": "src.java.org.apache.commons.codec.binary.Base64.decode"
                },
                {
                    "function name": "encodeBase64",
                    "function params": [
                        "binaryData",
                        "isChunked",
                        "urlSafe",
                        "maxResultSize"
                    ],
                    "file name": "Base64.java",
                    "file old path": "src/java/org/apache/commons/codec/binary/Base64.java",
                    "file new path": "src/java/org/apache/commons/codec/binary/Base64.java",
                    "full name": "src.java.org.apache.commons.codec.binary.Base64.encodeBase64"
                },
                {
                    "function name": "Base64",
                    "function params": [
                        "lineLength",
                        "lineSeparator",
                        "urlSafe"
                    ],
                    "file name": "Base64.java",
                    "file old path": "src/java/org/apache/commons/codec/binary/Base64.java",
                    "file new path": "src/java/org/apache/commons/codec/binary/Base64.java",
                    "full name": "src.java.org.apache.commons.codec.binary.Base64.Base64"
                },
                {
                    "function name": "decode",
                    "function params": [
                        "pArray"
                    ],
                    "file name": "Base64.java",
                    "file old path": "src/java/org/apache/commons/codec/binary/Base64.java",
                    "file new path": "src/java/org/apache/commons/codec/binary/Base64.java",
                    "full name": "src.java.org.apache.commons.codec.binary.Base64.decode"
                },
                {
                    "function name": "read",
                    "function params": [
                        "offset",
                        "len"
                    ],
                    "file name": "Base64InputStream.java",
                    "file old path": "src/java/org/apache/commons/codec/binary/Base64InputStream.java",
                    "file new path": "src/java/org/apache/commons/codec/binary/Base64InputStream.java",
                    "full name": "src.java.org.apache.commons.codec.binary.Base64InputStream.read"
                },
                {
                    "function name": "flush",
                    "function params": [],
                    "file name": "Base64OutputStream.java",
                    "file old path": "src/java/org/apache/commons/codec/binary/Base64OutputStream.java",
                    "file new path": "src/java/org/apache/commons/codec/binary/Base64OutputStream.java",
                    "full name": "src.java.org.apache.commons.codec.binary.Base64OutputStream.flush"
                },
                {
                    "function name": "newStringUtf16Be",
                    "function params": [
                        "bytes"
                    ],
                    "file name": "StringUtils.java",
                    "file old path": "src/java/org/apache/commons/codec/binary/StringBytesUtils.java",
                    "file new path": "src/java/org/apache/commons/codec/binary/StringUtils.java",
                    "full name": "src.java.org.apache.commons.codec.binary.StringUtils.newStringUtf16Be"
                },
                {
                    "function name": "getSupportedBytes",
                    "function params": [
                        "string",
                        "charsetName"
                    ],
                    "file name": "StringUtils.java",
                    "file old path": "src/java/org/apache/commons/codec/binary/StringBytesUtils.java",
                    "file new path": "src/java/org/apache/commons/codec/binary/StringUtils.java",
                    "full name": "src.java.org.apache.commons.codec.binary.StringUtils.getSupportedBytes"
                },
                {
                    "function name": "newStringUsAscii",
                    "function params": [
                        "bytes"
                    ],
                    "file name": "StringUtils.java",
                    "file old path": "src/java/org/apache/commons/codec/binary/StringBytesUtils.java",
                    "file new path": "src/java/org/apache/commons/codec/binary/StringUtils.java",
                    "full name": "src.java.org.apache.commons.codec.binary.StringUtils.newStringUsAscii"
                },
                {
                    "function name": "StringUtils",
                    "function params": [],
                    "file name": "StringUtils.java",
                    "file old path": "src/java/org/apache/commons/codec/binary/StringBytesUtils.java",
                    "file new path": "src/java/org/apache/commons/codec/binary/StringUtils.java",
                    "full name": "src.java.org.apache.commons.codec.binary.StringUtils.StringUtils"
                },
                {
                    "function name": "getBytesUtf16Be",
                    "function params": [
                        "string"
                    ],
                    "file name": "StringUtils.java",
                    "file old path": "src/java/org/apache/commons/codec/binary/StringBytesUtils.java",
                    "file new path": "src/java/org/apache/commons/codec/binary/StringUtils.java",
                    "full name": "src.java.org.apache.commons.codec.binary.StringUtils.getBytesUtf16Be"
                },
                {
                    "function name": "getBytesUtf8",
                    "function params": [
                        "string"
                    ],
                    "file name": "StringUtils.java",
                    "file old path": "src/java/org/apache/commons/codec/binary/StringBytesUtils.java",
                    "file new path": "src/java/org/apache/commons/codec/binary/StringUtils.java",
                    "full name": "src.java.org.apache.commons.codec.binary.StringUtils.getBytesUtf8"
                },
                {
                    "function name": "getBytesUtf16",
                    "function params": [
                        "string"
                    ],
                    "file name": "StringUtils.java",
                    "file old path": "src/java/org/apache/commons/codec/binary/StringBytesUtils.java",
                    "file new path": "src/java/org/apache/commons/codec/binary/StringUtils.java",
                    "full name": "src.java.org.apache.commons.codec.binary.StringUtils.getBytesUtf16"
                },
                {
                    "function name": "newString",
                    "function params": [
                        "bytes",
                        "charsetName"
                    ],
                    "file name": "StringUtils.java",
                    "file old path": "src/java/org/apache/commons/codec/binary/StringBytesUtils.java",
                    "file new path": "src/java/org/apache/commons/codec/binary/StringUtils.java",
                    "full name": "src.java.org.apache.commons.codec.binary.StringUtils.newString"
                },
                {
                    "function name": "newStringIso8859_1",
                    "function params": [
                        "bytes"
                    ],
                    "file name": "StringUtils.java",
                    "file old path": "src/java/org/apache/commons/codec/binary/StringBytesUtils.java",
                    "file new path": "src/java/org/apache/commons/codec/binary/StringUtils.java",
                    "full name": "src.java.org.apache.commons.codec.binary.StringUtils.newStringIso8859_1"
                },
                {
                    "function name": "getBytesUsAscii",
                    "function params": [
                        "string"
                    ],
                    "file name": "StringUtils.java",
                    "file old path": "src/java/org/apache/commons/codec/binary/StringBytesUtils.java",
                    "file new path": "src/java/org/apache/commons/codec/binary/StringUtils.java",
                    "full name": "src.java.org.apache.commons.codec.binary.StringUtils.getBytesUsAscii"
                },
                {
                    "function name": "newStringUtf8",
                    "function params": [
                        "bytes"
                    ],
                    "file name": "StringUtils.java",
                    "file old path": "src/java/org/apache/commons/codec/binary/StringBytesUtils.java",
                    "file new path": "src/java/org/apache/commons/codec/binary/StringUtils.java",
                    "full name": "src.java.org.apache.commons.codec.binary.StringUtils.newStringUtf8"
                },
                {
                    "function name": "newStringUtf16",
                    "function params": [
                        "bytes"
                    ],
                    "file name": "StringUtils.java",
                    "file old path": "src/java/org/apache/commons/codec/binary/StringBytesUtils.java",
                    "file new path": "src/java/org/apache/commons/codec/binary/StringUtils.java",
                    "full name": "src.java.org.apache.commons.codec.binary.StringUtils.newStringUtf16"
                },
                {
                    "function name": "getBytesUtf16Le",
                    "function params": [
                        "string"
                    ],
                    "file name": "StringUtils.java",
                    "file old path": "src/java/org/apache/commons/codec/binary/StringBytesUtils.java",
                    "file new path": "src/java/org/apache/commons/codec/binary/StringUtils.java",
                    "full name": "src.java.org.apache.commons.codec.binary.StringUtils.getBytesUtf16Le"
                },
                {
                    "function name": "newStringUtf16Le",
                    "function params": [
                        "bytes"
                    ],
                    "file name": "StringUtils.java",
                    "file old path": "src/java/org/apache/commons/codec/binary/StringBytesUtils.java",
                    "file new path": "src/java/org/apache/commons/codec/binary/StringUtils.java",
                    "full name": "src.java.org.apache.commons.codec.binary.StringUtils.newStringUtf16Le"
                },
                {
                    "function name": "getBytesIso8859_1",
                    "function params": [
                        "string"
                    ],
                    "file name": "StringUtils.java",
                    "file old path": "src/java/org/apache/commons/codec/binary/StringBytesUtils.java",
                    "file new path": "src/java/org/apache/commons/codec/binary/StringUtils.java",
                    "full name": "src.java.org.apache.commons.codec.binary.StringUtils.getBytesIso8859_1"
                },
                {
                    "function name": "decode",
                    "function params": [
                        "pString",
                        "charset"
                    ],
                    "file name": "QuotedPrintableCodec.java",
                    "file old path": "src/java/org/apache/commons/codec/net/QuotedPrintableCodec.java",
                    "file new path": "src/java/org/apache/commons/codec/net/QuotedPrintableCodec.java",
                    "full name": "src.java.org.apache.commons.codec.net.QuotedPrintableCodec.decode"
                },
                {
                    "function name": "encode",
                    "function params": [
                        "pString",
                        "charset"
                    ],
                    "file name": "QuotedPrintableCodec.java",
                    "file old path": "src/java/org/apache/commons/codec/net/QuotedPrintableCodec.java",
                    "file new path": "src/java/org/apache/commons/codec/net/QuotedPrintableCodec.java",
                    "full name": "src.java.org.apache.commons.codec.net.QuotedPrintableCodec.encode"
                },
                {
                    "function name": "encodeText",
                    "function params": [
                        "text",
                        "charset"
                    ],
                    "file name": "RFC1522Codec.java",
                    "file old path": "src/java/org/apache/commons/codec/net/RFC1522Codec.java",
                    "file new path": "src/java/org/apache/commons/codec/net/RFC1522Codec.java",
                    "full name": "src.java.org.apache.commons.codec.net.RFC1522Codec.encodeText"
                },
                {
                    "function name": "decodeText",
                    "function params": [
                        "text"
                    ],
                    "file name": "RFC1522Codec.java",
                    "file old path": "src/java/org/apache/commons/codec/net/RFC1522Codec.java",
                    "file new path": "src/java/org/apache/commons/codec/net/RFC1522Codec.java",
                    "full name": "src.java.org.apache.commons.codec.net.RFC1522Codec.decodeText"
                },
                {
                    "function name": "encode",
                    "function params": [
                        "pString",
                        "charset"
                    ],
                    "file name": "URLCodec.java",
                    "file old path": "src/java/org/apache/commons/codec/net/URLCodec.java",
                    "file new path": "src/java/org/apache/commons/codec/net/URLCodec.java",
                    "full name": "src.java.org.apache.commons.codec.net.URLCodec.encode"
                },
                {
                    "function name": "decode",
                    "function params": [
                        "pString",
                        "charset"
                    ],
                    "file name": "URLCodec.java",
                    "file old path": "src/java/org/apache/commons/codec/net/URLCodec.java",
                    "file new path": "src/java/org/apache/commons/codec/net/URLCodec.java",
                    "full name": "src.java.org.apache.commons.codec.net.URLCodec.decode"
                },
                {
                    "function name": "testReadNull",
                    "function params": [],
                    "file name": "Base64InputStreamTest.java",
                    "file old path": "src/test/org/apache/commons/codec/binary/Base64InputStreamTest.java",
                    "file new path": "src/test/org/apache/commons/codec/binary/Base64InputStreamTest.java",
                    "full name": "src.test.org.apache.commons.codec.binary.Base64InputStreamTest.testReadNull"
                },
                {
                    "function name": "testBase64InputStreamByteByByte",
                    "function params": [],
                    "file name": "Base64InputStreamTest.java",
                    "file old path": "src/test/org/apache/commons/codec/binary/Base64InputStreamTest.java",
                    "file new path": "src/test/org/apache/commons/codec/binary/Base64InputStreamTest.java",
                    "full name": "src.test.org.apache.commons.codec.binary.Base64InputStreamTest.testBase64InputStreamByteByByte"
                },
                {
                    "function name": "testRead0",
                    "function params": [],
                    "file name": "Base64InputStreamTest.java",
                    "file old path": "src/test/org/apache/commons/codec/binary/Base64InputStreamTest.java",
                    "file new path": "src/test/org/apache/commons/codec/binary/Base64InputStreamTest.java",
                    "full name": "src.test.org.apache.commons.codec.binary.Base64InputStreamTest.testRead0"
                },
                {
                    "function name": "testReadOutOfBounds",
                    "function params": [],
                    "file name": "Base64InputStreamTest.java",
                    "file old path": "src/test/org/apache/commons/codec/binary/Base64InputStreamTest.java",
                    "file new path": "src/test/org/apache/commons/codec/binary/Base64InputStreamTest.java",
                    "full name": "src.test.org.apache.commons.codec.binary.Base64InputStreamTest.testReadOutOfBounds"
                },
                {
                    "function name": "testBase64InputStreamByChunk",
                    "function params": [],
                    "file name": "Base64InputStreamTest.java",
                    "file old path": "src/test/org/apache/commons/codec/binary/Base64InputStreamTest.java",
                    "file new path": "src/test/org/apache/commons/codec/binary/Base64InputStreamTest.java",
                    "full name": "src.test.org.apache.commons.codec.binary.Base64InputStreamTest.testBase64InputStreamByChunk"
                },
                {
                    "function name": "testMarkSupported",
                    "function params": [],
                    "file name": "Base64InputStreamTest.java",
                    "file old path": "src/test/org/apache/commons/codec/binary/Base64InputStreamTest.java",
                    "file new path": "src/test/org/apache/commons/codec/binary/Base64InputStreamTest.java",
                    "full name": "src.test.org.apache.commons.codec.binary.Base64InputStreamTest.testMarkSupported"
                },
                {
                    "function name": "testBase64OutputStreamByChunk",
                    "function params": [],
                    "file name": "Base64OutputStreamTest.java",
                    "file old path": "src/test/org/apache/commons/codec/binary/Base64OutputStreamTest.java",
                    "file new path": "src/test/org/apache/commons/codec/binary/Base64OutputStreamTest.java",
                    "full name": "src.test.org.apache.commons.codec.binary.Base64OutputStreamTest.testBase64OutputStreamByChunk"
                },
                {
                    "function name": "testBase64OutputStreamByteByByte",
                    "function params": [],
                    "file name": "Base64OutputStreamTest.java",
                    "file old path": "src/test/org/apache/commons/codec/binary/Base64OutputStreamTest.java",
                    "file new path": "src/test/org/apache/commons/codec/binary/Base64OutputStreamTest.java",
                    "full name": "src.test.org.apache.commons.codec.binary.Base64OutputStreamTest.testBase64OutputStreamByteByByte"
                },
                {
                    "function name": "testConstructor_Int_ByteArray_Boolean",
                    "function params": [],
                    "file name": "Base64Test.java",
                    "file old path": "src/test/org/apache/commons/codec/binary/Base64Test.java",
                    "file new path": "src/test/org/apache/commons/codec/binary/Base64Test.java",
                    "full name": "src.test.org.apache.commons.codec.binary.Base64Test.testConstructor_Int_ByteArray_Boolean"
                },
                {
                    "function name": "testConstructor_Int_ByteArray_Boolean_UrlSafe",
                    "function params": [],
                    "file name": "Base64Test.java",
                    "file old path": "src/test/org/apache/commons/codec/binary/Base64Test.java",
                    "file new path": "src/test/org/apache/commons/codec/binary/Base64Test.java",
                    "full name": "src.test.org.apache.commons.codec.binary.Base64Test.testConstructor_Int_ByteArray_Boolean_UrlSafe"
                },
                {
                    "function name": "testUUID",
                    "function params": [],
                    "file name": "Base64Test.java",
                    "file old path": "src/test/org/apache/commons/codec/binary/Base64Test.java",
                    "file new path": "src/test/org/apache/commons/codec/binary/Base64Test.java",
                    "full name": "src.test.org.apache.commons.codec.binary.Base64Test.testUUID"
                },
                {
                    "function name": "testChunkedEncodeMultipleOf76",
                    "function params": [],
                    "file name": "Base64Test.java",
                    "file old path": "src/test/org/apache/commons/codec/binary/Base64Test.java",
                    "file new path": "src/test/org/apache/commons/codec/binary/Base64Test.java",
                    "full name": "src.test.org.apache.commons.codec.binary.Base64Test.testChunkedEncodeMultipleOf76"
                },
                {
                    "function name": "testObjectEncodeWithValidParameter",
                    "function params": [],
                    "file name": "Base64Test.java",
                    "file old path": "src/test/org/apache/commons/codec/binary/Base64Test.java",
                    "file new path": "src/test/org/apache/commons/codec/binary/Base64Test.java",
                    "full name": "src.test.org.apache.commons.codec.binary.Base64Test.testObjectEncodeWithValidParameter"
                },
                {
                    "function name": "testObjectDecodeWithValidParameter",
                    "function params": [],
                    "file name": "Base64Test.java",
                    "file old path": "src/test/org/apache/commons/codec/binary/Base64Test.java",
                    "file new path": "src/test/org/apache/commons/codec/binary/Base64Test.java",
                    "full name": "src.test.org.apache.commons.codec.binary.Base64Test.testObjectDecodeWithValidParameter"
                },
                {
                    "function name": "testGetBytesIso8859_1",
                    "function params": [],
                    "file name": "StringUtilsTest.java",
                    "file old path": "src/test/org/apache/commons/codec/binary/StringBytesUtilsTest.java",
                    "file new path": "src/test/org/apache/commons/codec/binary/StringUtilsTest.java",
                    "full name": "src.test.org.apache.commons.codec.binary.StringUtilsTest.testGetBytesIso8859_1"
                },
                {
                    "function name": "testNewStringBadEnc",
                    "function params": [],
                    "file name": "StringUtilsTest.java",
                    "file old path": "src/test/org/apache/commons/codec/binary/StringBytesUtilsTest.java",
                    "file new path": "src/test/org/apache/commons/codec/binary/StringUtilsTest.java",
                    "full name": "src.test.org.apache.commons.codec.binary.StringUtilsTest.testNewStringBadEnc"
                },
                {
                    "function name": "testGetSupportedBytes",
                    "function params": [
                        "charsetName"
                    ],
                    "file name": "StringUtilsTest.java",
                    "file old path": "src/test/org/apache/commons/codec/binary/StringBytesUtilsTest.java",
                    "file new path": "src/test/org/apache/commons/codec/binary/StringUtilsTest.java",
                    "full name": "src.test.org.apache.commons.codec.binary.StringUtilsTest.testGetSupportedBytes"
                },
                {
                    "function name": "testNewStringUtf16",
                    "function params": [],
                    "file name": "StringUtilsTest.java",
                    "file old path": "src/test/org/apache/commons/codec/binary/StringBytesUtilsTest.java",
                    "file new path": "src/test/org/apache/commons/codec/binary/StringUtilsTest.java",
                    "full name": "src.test.org.apache.commons.codec.binary.StringUtilsTest.testNewStringUtf16"
                },
                {
                    "function name": "testGetBytesUtf8",
                    "function params": [],
                    "file name": "StringUtilsTest.java",
                    "file old path": "src/test/org/apache/commons/codec/binary/StringBytesUtilsTest.java",
                    "file new path": "src/test/org/apache/commons/codec/binary/StringUtilsTest.java",
                    "full name": "src.test.org.apache.commons.codec.binary.StringUtilsTest.testGetBytesUtf8"
                },
                {
                    "function name": "testNewStringUsAscii",
                    "function params": [],
                    "file name": "StringUtilsTest.java",
                    "file old path": "src/test/org/apache/commons/codec/binary/StringBytesUtilsTest.java",
                    "file new path": "src/test/org/apache/commons/codec/binary/StringUtilsTest.java",
                    "full name": "src.test.org.apache.commons.codec.binary.StringUtilsTest.testNewStringUsAscii"
                },
                {
                    "function name": "testNewStringIso8859_1",
                    "function params": [],
                    "file name": "StringUtilsTest.java",
                    "file old path": "src/test/org/apache/commons/codec/binary/StringBytesUtilsTest.java",
                    "file new path": "src/test/org/apache/commons/codec/binary/StringUtilsTest.java",
                    "full name": "src.test.org.apache.commons.codec.binary.StringUtilsTest.testNewStringIso8859_1"
                },
                {
                    "function name": "testNewString",
                    "function params": [
                        "charsetName"
                    ],
                    "file name": "StringUtilsTest.java",
                    "file old path": "src/test/org/apache/commons/codec/binary/StringBytesUtilsTest.java",
                    "file new path": "src/test/org/apache/commons/codec/binary/StringUtilsTest.java",
                    "full name": "src.test.org.apache.commons.codec.binary.StringUtilsTest.testNewString"
                },
                {
                    "function name": "testGetBytesUtf16Le",
                    "function params": [],
                    "file name": "StringUtilsTest.java",
                    "file old path": "src/test/org/apache/commons/codec/binary/StringBytesUtilsTest.java",
                    "file new path": "src/test/org/apache/commons/codec/binary/StringUtilsTest.java",
                    "full name": "src.test.org.apache.commons.codec.binary.StringUtilsTest.testGetBytesUtf16Le"
                },
                {
                    "function name": "testGetBytesUsAscii",
                    "function params": [],
                    "file name": "StringUtilsTest.java",
                    "file old path": "src/test/org/apache/commons/codec/binary/StringBytesUtilsTest.java",
                    "file new path": "src/test/org/apache/commons/codec/binary/StringUtilsTest.java",
                    "full name": "src.test.org.apache.commons.codec.binary.StringUtilsTest.testGetBytesUsAscii"
                },
                {
                    "function name": "testNewStringUtf16Le",
                    "function params": [],
                    "file name": "StringUtilsTest.java",
                    "file old path": "src/test/org/apache/commons/codec/binary/StringBytesUtilsTest.java",
                    "file new path": "src/test/org/apache/commons/codec/binary/StringUtilsTest.java",
                    "full name": "src.test.org.apache.commons.codec.binary.StringUtilsTest.testNewStringUtf16Le"
                },
                {
                    "function name": "testGetBytesUtf16Be",
                    "function params": [],
                    "file name": "StringUtilsTest.java",
                    "file old path": "src/test/org/apache/commons/codec/binary/StringBytesUtilsTest.java",
                    "file new path": "src/test/org/apache/commons/codec/binary/StringUtilsTest.java",
                    "full name": "src.test.org.apache.commons.codec.binary.StringUtilsTest.testGetBytesUtf16Be"
                },
                {
                    "function name": "testGetSupportedBytesBadEnc",
                    "function params": [],
                    "file name": "StringUtilsTest.java",
                    "file old path": "src/test/org/apache/commons/codec/binary/StringBytesUtilsTest.java",
                    "file new path": "src/test/org/apache/commons/codec/binary/StringUtilsTest.java",
                    "full name": "src.test.org.apache.commons.codec.binary.StringUtilsTest.testGetSupportedBytesBadEnc"
                },
                {
                    "function name": "testNewStringUtf8",
                    "function params": [],
                    "file name": "StringUtilsTest.java",
                    "file old path": "src/test/org/apache/commons/codec/binary/StringBytesUtilsTest.java",
                    "file new path": "src/test/org/apache/commons/codec/binary/StringUtilsTest.java",
                    "full name": "src.test.org.apache.commons.codec.binary.StringUtilsTest.testNewStringUtf8"
                },
                {
                    "function name": "testNewStringUtf16Be",
                    "function params": [],
                    "file name": "StringUtilsTest.java",
                    "file old path": "src/test/org/apache/commons/codec/binary/StringBytesUtilsTest.java",
                    "file new path": "src/test/org/apache/commons/codec/binary/StringUtilsTest.java",
                    "full name": "src.test.org.apache.commons.codec.binary.StringUtilsTest.testNewStringUtf16Be"
                },
                {
                    "function name": "testGetBytesUtf16",
                    "function params": [],
                    "file name": "StringUtilsTest.java",
                    "file old path": "src/test/org/apache/commons/codec/binary/StringBytesUtilsTest.java",
                    "file new path": "src/test/org/apache/commons/codec/binary/StringUtilsTest.java",
                    "full name": "src.test.org.apache.commons.codec.binary.StringUtilsTest.testGetBytesUtf16"
                }
            ],
            "files that changed": [
                "src/java/org/apache/commons/codec/binary/Base64.java",
                "src/java/org/apache/commons/codec/binary/Base64InputStream.java",
                "src/java/org/apache/commons/codec/binary/Base64OutputStream.java",
                "src/java/org/apache/commons/codec/net/QuotedPrintableCodec.java",
                "src/java/org/apache/commons/codec/net/RFC1522Codec.java",
                "src/java/org/apache/commons/codec/net/URLCodec.java",
                "src/test/org/apache/commons/codec/binary/Base64InputStreamTest.java",
                "src/test/org/apache/commons/codec/binary/Base64OutputStreamTest.java",
                "src/test/org/apache/commons/codec/binary/Base64Test.java",
                "src/test/org/apache/commons/codec/binary/Base64TestData.java"
            ]
        },
        {
            "bug index": "165",
            "bug id": "CODEC-1",
            "hexsha": "71e7260746a902d1070a190fd78bd560464860b9",
            "fix_hash": "2eef8dee31bbaa10ffb1264fbbe9aba1bc92c45b",
            "description": "URLCodec causes an IndexOutOfBoundsException in BitSet when encoding non-ASCII\ncharacters.",
            "commit number version hash": 173,
            "commit number": 268,
            "function that changed": [
                {
                    "function name": "DecoderException",
                    "function params": [
                        "message",
                        "cause"
                    ],
                    "file name": "DecoderException.java",
                    "file old path": "src/java/org/apache/commons/codec/DecoderException.java",
                    "file new path": "src/java/org/apache/commons/codec/DecoderException.java",
                    "full name": "src.java.org.apache.commons.codec.DecoderException.DecoderException"
                },
                {
                    "function name": "DecoderException",
                    "function params": [
                        "cause"
                    ],
                    "file name": "DecoderException.java",
                    "file old path": "src/java/org/apache/commons/codec/DecoderException.java",
                    "file new path": "src/java/org/apache/commons/codec/DecoderException.java",
                    "full name": "src.java.org.apache.commons.codec.DecoderException.DecoderException"
                },
                {
                    "function name": "DecoderException",
                    "function params": [],
                    "file name": "DecoderException.java",
                    "file old path": "src/java/org/apache/commons/codec/DecoderException.java",
                    "file new path": "src/java/org/apache/commons/codec/DecoderException.java",
                    "full name": "src.java.org.apache.commons.codec.DecoderException.DecoderException"
                },
                {
                    "function name": "EncoderException",
                    "function params": [
                        "message",
                        "cause"
                    ],
                    "file name": "EncoderException.java",
                    "file old path": "src/java/org/apache/commons/codec/EncoderException.java",
                    "file new path": "src/java/org/apache/commons/codec/EncoderException.java",
                    "full name": "src.java.org.apache.commons.codec.EncoderException.EncoderException"
                },
                {
                    "function name": "EncoderException",
                    "function params": [],
                    "file name": "EncoderException.java",
                    "file old path": "src/java/org/apache/commons/codec/EncoderException.java",
                    "file new path": "src/java/org/apache/commons/codec/EncoderException.java",
                    "full name": "src.java.org.apache.commons.codec.EncoderException.EncoderException"
                },
                {
                    "function name": "EncoderException",
                    "function params": [
                        "cause"
                    ],
                    "file name": "EncoderException.java",
                    "file old path": "src/java/org/apache/commons/codec/EncoderException.java",
                    "file new path": "src/java/org/apache/commons/codec/EncoderException.java",
                    "full name": "src.java.org.apache.commons.codec.EncoderException.EncoderException"
                },
                {
                    "function name": "testConstructorThrowable",
                    "function params": [],
                    "file name": "DecoderExceptionTest.java",
                    "file old path": null,
                    "file new path": "src/test/org/apache/commons/codec/DecoderExceptionTest.java",
                    "full name": "src.test.org.apache.commons.codec.DecoderExceptionTest.testConstructorThrowable"
                },
                {
                    "function name": "testConstructor0",
                    "function params": [],
                    "file name": "DecoderExceptionTest.java",
                    "file old path": null,
                    "file new path": "src/test/org/apache/commons/codec/DecoderExceptionTest.java",
                    "full name": "src.test.org.apache.commons.codec.DecoderExceptionTest.testConstructor0"
                },
                {
                    "function name": "testConstructorStringThrowable",
                    "function params": [],
                    "file name": "DecoderExceptionTest.java",
                    "file old path": null,
                    "file new path": "src/test/org/apache/commons/codec/DecoderExceptionTest.java",
                    "full name": "src.test.org.apache.commons.codec.DecoderExceptionTest.testConstructorStringThrowable"
                },
                {
                    "function name": "testConstructorString",
                    "function params": [],
                    "file name": "DecoderExceptionTest.java",
                    "file old path": null,
                    "file new path": "src/test/org/apache/commons/codec/DecoderExceptionTest.java",
                    "full name": "src.test.org.apache.commons.codec.DecoderExceptionTest.testConstructorString"
                },
                {
                    "function name": "testConstructorString",
                    "function params": [],
                    "file name": "EncoderExceptionTest.java",
                    "file old path": null,
                    "file new path": "src/test/org/apache/commons/codec/EncoderExceptionTest.java",
                    "full name": "src.test.org.apache.commons.codec.EncoderExceptionTest.testConstructorString"
                },
                {
                    "function name": "testConstructorStringThrowable",
                    "function params": [],
                    "file name": "EncoderExceptionTest.java",
                    "file old path": null,
                    "file new path": "src/test/org/apache/commons/codec/EncoderExceptionTest.java",
                    "full name": "src.test.org.apache.commons.codec.EncoderExceptionTest.testConstructorStringThrowable"
                },
                {
                    "function name": "testConstructorThrowable",
                    "function params": [],
                    "file name": "EncoderExceptionTest.java",
                    "file old path": null,
                    "file new path": "src/test/org/apache/commons/codec/EncoderExceptionTest.java",
                    "full name": "src.test.org.apache.commons.codec.EncoderExceptionTest.testConstructorThrowable"
                },
                {
                    "function name": "testConstructor0",
                    "function params": [],
                    "file name": "EncoderExceptionTest.java",
                    "file old path": null,
                    "file new path": "src/test/org/apache/commons/codec/EncoderExceptionTest.java",
                    "full name": "src.test.org.apache.commons.codec.EncoderExceptionTest.testConstructor0"
                },
                {
                    "function name": "testConstructor",
                    "function params": [],
                    "file name": "RequiredCharsetNamesTest.java",
                    "file old path": "src/test/org/apache/commons/codec/RequiredCharsetNamesTest.java",
                    "file new path": "src/test/org/apache/commons/codec/RequiredCharsetNamesTest.java",
                    "full name": "src.test.org.apache.commons.codec.RequiredCharsetNamesTest.testConstructor"
                }
            ],
            "files that changed": [
                "src/java/org/apache/commons/codec/DecoderException.java",
                "src/java/org/apache/commons/codec/EncoderException.java",
                "src/test/org/apache/commons/codec/RequiredCharsetNamesTest.java"
            ]
        },
        {
            "bug index": "166",
            "bug id": "CODEC-1",
            "hexsha": "71e7260746a902d1070a190fd78bd560464860b9",
            "fix_hash": "f7e1454b66dfba0a376ad00162eb741db9bfe7a8",
            "description": "URLCodec causes an IndexOutOfBoundsException in BitSet when encoding non-ASCII\ncharacters.",
            "commit number version hash": 173,
            "commit number": 266,
            "function that changed": [
                {
                    "function name": "EncoderException",
                    "function params": [
                        "message",
                        "cause"
                    ],
                    "file name": "EncoderException.java",
                    "file old path": "src/java/org/apache/commons/codec/EncoderException.java",
                    "file new path": "src/java/org/apache/commons/codec/EncoderException.java",
                    "full name": "src.java.org.apache.commons.codec.EncoderException.EncoderException"
                },
                {
                    "function name": "EncoderException",
                    "function params": [
                        "cause"
                    ],
                    "file name": "EncoderException.java",
                    "file old path": "src/java/org/apache/commons/codec/EncoderException.java",
                    "file new path": "src/java/org/apache/commons/codec/EncoderException.java",
                    "full name": "src.java.org.apache.commons.codec.EncoderException.EncoderException"
                },
                {
                    "function name": "encode",
                    "function params": [
                        "object"
                    ],
                    "file name": "Hex.java",
                    "file old path": "src/java/org/apache/commons/codec/binary/Hex.java",
                    "file new path": "src/java/org/apache/commons/codec/binary/Hex.java",
                    "full name": "src.java.org.apache.commons.codec.binary.Hex.encode"
                },
                {
                    "function name": "encode",
                    "function params": [
                        "value",
                        "charset"
                    ],
                    "file name": "BCodec.java",
                    "file old path": "src/java/org/apache/commons/codec/net/BCodec.java",
                    "file new path": "src/java/org/apache/commons/codec/net/BCodec.java",
                    "full name": "src.java.org.apache.commons.codec.net.BCodec.encode"
                },
                {
                    "function name": "encode",
                    "function params": [
                        "pString",
                        "charset"
                    ],
                    "file name": "QCodec.java",
                    "file old path": "src/java/org/apache/commons/codec/net/QCodec.java",
                    "file new path": "src/java/org/apache/commons/codec/net/QCodec.java",
                    "full name": "src.java.org.apache.commons.codec.net.QCodec.encode"
                },
                {
                    "function name": "encode",
                    "function params": [
                        "pString"
                    ],
                    "file name": "QuotedPrintableCodec.java",
                    "file old path": "src/java/org/apache/commons/codec/net/QuotedPrintableCodec.java",
                    "file new path": "src/java/org/apache/commons/codec/net/QuotedPrintableCodec.java",
                    "full name": "src.java.org.apache.commons.codec.net.QuotedPrintableCodec.encode"
                },
                {
                    "function name": "encode",
                    "function params": [
                        "pString"
                    ],
                    "file name": "URLCodec.java",
                    "file old path": "src/java/org/apache/commons/codec/net/URLCodec.java",
                    "file new path": "src/java/org/apache/commons/codec/net/URLCodec.java",
                    "full name": "src.java.org.apache.commons.codec.net.URLCodec.encode"
                }
            ],
            "files that changed": [
                "src/java/org/apache/commons/codec/EncoderException.java",
                "src/java/org/apache/commons/codec/binary/Hex.java",
                "src/java/org/apache/commons/codec/net/BCodec.java",
                "src/java/org/apache/commons/codec/net/QCodec.java",
                "src/java/org/apache/commons/codec/net/QuotedPrintableCodec.java",
                "src/java/org/apache/commons/codec/net/URLCodec.java"
            ]
        },
        {
            "bug index": "167",
            "bug id": "CODEC-1",
            "hexsha": "71e7260746a902d1070a190fd78bd560464860b9",
            "fix_hash": "695754bb76162e2349c8a6ebb4b29aef0bd6fe8d",
            "description": "URLCodec causes an IndexOutOfBoundsException in BitSet when encoding non-ASCII\ncharacters.",
            "commit number version hash": 173,
            "commit number": 264,
            "function that changed": [
                {
                    "function name": "decode",
                    "function params": [
                        "object"
                    ],
                    "file name": "Hex.java",
                    "file old path": "src/java/org/apache/commons/codec/binary/Hex.java",
                    "file new path": "src/java/org/apache/commons/codec/binary/Hex.java",
                    "full name": "src.java.org.apache.commons.codec.binary.Hex.decode"
                },
                {
                    "function name": "decode",
                    "function params": [
                        "value"
                    ],
                    "file name": "BCodec.java",
                    "file old path": "src/java/org/apache/commons/codec/net/BCodec.java",
                    "file new path": "src/java/org/apache/commons/codec/net/BCodec.java",
                    "full name": "src.java.org.apache.commons.codec.net.BCodec.decode"
                },
                {
                    "function name": "decode",
                    "function params": [
                        "pString"
                    ],
                    "file name": "QCodec.java",
                    "file old path": "src/java/org/apache/commons/codec/net/QCodec.java",
                    "file new path": "src/java/org/apache/commons/codec/net/QCodec.java",
                    "full name": "src.java.org.apache.commons.codec.net.QCodec.decode"
                },
                {
                    "function name": "decode",
                    "function params": [
                        "pString"
                    ],
                    "file name": "QuotedPrintableCodec.java",
                    "file old path": "src/java/org/apache/commons/codec/net/QuotedPrintableCodec.java",
                    "file new path": "src/java/org/apache/commons/codec/net/QuotedPrintableCodec.java",
                    "full name": "src.java.org.apache.commons.codec.net.QuotedPrintableCodec.decode"
                },
                {
                    "function name": "decode",
                    "function params": [
                        "pString"
                    ],
                    "file name": "URLCodec.java",
                    "file old path": "src/java/org/apache/commons/codec/net/URLCodec.java",
                    "file new path": "src/java/org/apache/commons/codec/net/URLCodec.java",
                    "full name": "src.java.org.apache.commons.codec.net.URLCodec.decode"
                }
            ],
            "files that changed": [
                "src/java/org/apache/commons/codec/binary/Hex.java",
                "src/java/org/apache/commons/codec/net/BCodec.java",
                "src/java/org/apache/commons/codec/net/QCodec.java",
                "src/java/org/apache/commons/codec/net/QuotedPrintableCodec.java",
                "src/java/org/apache/commons/codec/net/URLCodec.java"
            ]
        },
        {
            "bug index": "168",
            "bug id": "CODEC-1",
            "hexsha": "71e7260746a902d1070a190fd78bd560464860b9",
            "fix_hash": "a07a2f443a5177ad43b3a0e4e803fc55870af13d",
            "description": "URLCodec causes an IndexOutOfBoundsException in BitSet when encoding non-ASCII\ncharacters.",
            "commit number version hash": 173,
            "commit number": 255,
            "function that changed": [],
            "files that changed": [
                "src/java/org/apache/commons/codec/RequiredCharsetNames.java",
                "src/java/org/apache/commons/codec/binary/StringBytesUtils.java",
                "src/java/org/apache/commons/codec/net/BCodec.java",
                "src/java/org/apache/commons/codec/net/QCodec.java",
                "src/java/org/apache/commons/codec/net/RFC1522Codec.java"
            ]
        },
        {
            "bug index": "169",
            "bug id": "CODEC-1",
            "hexsha": "71e7260746a902d1070a190fd78bd560464860b9",
            "fix_hash": "69187b5e3a500878311f2b67ef7385b385845fb6",
            "description": "URLCodec causes an IndexOutOfBoundsException in BitSet when encoding non-ASCII\ncharacters.",
            "commit number version hash": 173,
            "commit number": 252,
            "function that changed": [],
            "files that changed": [
                "src/java/org/apache/commons/codec/binary/StringBytesUtils.java"
            ]
        },
        {
            "bug index": "170",
            "bug id": "CODEC-80",
            "hexsha": "f3db0de1fe8c429bd3c869108074fed4bdf25b3a",
            "fix_hash": "165d33f8c676d4b5063d1899beab3a352afb7d82",
            "description": "Regression:  Base64.encode(chunk=true) has bug when input length is multiple of 76\n\nThe resulting array is correct except there are two extra 0 bytes appended to the end.",
            "commit number version hash": 549,
            "commit number": 250,
            "function that changed": [
                {
                    "function name": "encodeBase64",
                    "function params": [
                        "binaryData",
                        "isChunked",
                        "urlSafe"
                    ],
                    "file name": "Base64.java",
                    "file old path": "src/java/org/apache/commons/codec/binary/Base64.java",
                    "file new path": "src/java/org/apache/commons/codec/binary/Base64.java",
                    "full name": "src.java.org.apache.commons.codec.binary.Base64.encodeBase64"
                },
                {
                    "function name": "testBase64InputStreamByChunk",
                    "function params": [],
                    "file name": "Base64InputStreamTest.java",
                    "file old path": "src/test/org/apache/commons/codec/binary/Base64InputStreamTest.java",
                    "file new path": "src/test/org/apache/commons/codec/binary/Base64InputStreamTest.java",
                    "full name": "src.test.org.apache.commons.codec.binary.Base64InputStreamTest.testBase64InputStreamByChunk"
                },
                {
                    "function name": "testBase64InputStreamByteByByte",
                    "function params": [],
                    "file name": "Base64InputStreamTest.java",
                    "file old path": "src/test/org/apache/commons/codec/binary/Base64InputStreamTest.java",
                    "file new path": "src/test/org/apache/commons/codec/binary/Base64InputStreamTest.java",
                    "full name": "src.test.org.apache.commons.codec.binary.Base64InputStreamTest.testBase64InputStreamByteByByte"
                },
                {
                    "function name": "testBase64OutputStreamByChunk",
                    "function params": [],
                    "file name": "Base64OutputStreamTest.java",
                    "file old path": "src/test/org/apache/commons/codec/binary/Base64OutputStreamTest.java",
                    "file new path": "src/test/org/apache/commons/codec/binary/Base64OutputStreamTest.java",
                    "full name": "src.test.org.apache.commons.codec.binary.Base64OutputStreamTest.testBase64OutputStreamByChunk"
                },
                {
                    "function name": "testBase64OutputStreamByteByByte",
                    "function params": [],
                    "file name": "Base64OutputStreamTest.java",
                    "file old path": "src/test/org/apache/commons/codec/binary/Base64OutputStreamTest.java",
                    "file new path": "src/test/org/apache/commons/codec/binary/Base64OutputStreamTest.java",
                    "full name": "src.test.org.apache.commons.codec.binary.Base64OutputStreamTest.testBase64OutputStreamByteByByte"
                },
                {
                    "function name": "testObjectEncodeWithInvalidParameter",
                    "function params": [],
                    "file name": "Base64Test.java",
                    "file old path": "src/test/org/apache/commons/codec/binary/Base64Test.java",
                    "file new path": "src/test/org/apache/commons/codec/binary/Base64Test.java",
                    "full name": "src.test.org.apache.commons.codec.binary.Base64Test.testObjectEncodeWithInvalidParameter"
                },
                {
                    "function name": "testChunkedEncodeMultipleOf76",
                    "function params": [],
                    "file name": "Base64Test.java",
                    "file old path": "src/test/org/apache/commons/codec/binary/Base64Test.java",
                    "file new path": "src/test/org/apache/commons/codec/binary/Base64Test.java",
                    "full name": "src.test.org.apache.commons.codec.binary.Base64Test.testChunkedEncodeMultipleOf76"
                }
            ],
            "files that changed": [
                "src/java/org/apache/commons/codec/binary/Base64.java",
                "src/test/org/apache/commons/codec/binary/Base64InputStreamTest.java",
                "src/test/org/apache/commons/codec/binary/Base64OutputStreamTest.java",
                "src/test/org/apache/commons/codec/binary/Base64Test.java",
                "src/test/org/apache/commons/codec/binary/Base64TestData.java"
            ]
        },
        {
            "bug index": "171",
            "bug id": "CODEC-58",
            "hexsha": "f3db0de1fe8c429bd3c869108074fed4bdf25b3a",
            "fix_hash": "93333139710428b579e9b9bfb22a431028df4feb",
            "description": "The Javadoc for the Base64 class does not document which character set is returned by encode() and expected by decode(). The RFC specifies \"characters\", not \"bytes\" as the result of the encoding, and yet Base64 returns bytes. It should provide complete information as to how to convert these bytes to and from Strings. I assume the character set used is ASCII, but that should be made explicit in the Javadoc.",
            "commit number version hash": 549,
            "commit number": 246,
            "function that changed": [
                {
                    "function name": "avail",
                    "function params": [],
                    "file name": "Base64.java",
                    "file old path": "src/java/org/apache/commons/codec/binary/Base64.java",
                    "file new path": "src/java/org/apache/commons/codec/binary/Base64.java",
                    "full name": "src.java.org.apache.commons.codec.binary.Base64.avail"
                },
                {
                    "function name": "encodeInteger",
                    "function params": [
                        "bigInt"
                    ],
                    "file name": "Base64.java",
                    "file old path": "src/java/org/apache/commons/codec/binary/Base64.java",
                    "file new path": "src/java/org/apache/commons/codec/binary/Base64.java",
                    "full name": "src.java.org.apache.commons.codec.binary.Base64.encodeInteger"
                },
                {
                    "function name": "decode",
                    "function params": [
                        "in",
                        "inPos",
                        "inAvail"
                    ],
                    "file name": "Base64.java",
                    "file old path": "src/java/org/apache/commons/codec/binary/Base64.java",
                    "file new path": "src/java/org/apache/commons/codec/binary/Base64.java",
                    "full name": "src.java.org.apache.commons.codec.binary.Base64.decode"
                },
                {
                    "function name": "setInitialBuffer",
                    "function params": [
                        "out",
                        "outPos",
                        "outAvail"
                    ],
                    "file name": "Base64.java",
                    "file old path": "src/java/org/apache/commons/codec/binary/Base64.java",
                    "file new path": "src/java/org/apache/commons/codec/binary/Base64.java",
                    "full name": "src.java.org.apache.commons.codec.binary.Base64.setInitialBuffer"
                },
                {
                    "function name": "hasData",
                    "function params": [],
                    "file name": "Base64.java",
                    "file old path": "src/java/org/apache/commons/codec/binary/Base64.java",
                    "file new path": "src/java/org/apache/commons/codec/binary/Base64.java",
                    "full name": "src.java.org.apache.commons.codec.binary.Base64.hasData"
                },
                {
                    "function name": "resizeBuffer",
                    "function params": [],
                    "file name": "Base64.java",
                    "file old path": "src/java/org/apache/commons/codec/binary/Base64.java",
                    "file new path": "src/java/org/apache/commons/codec/binary/Base64.java",
                    "full name": "src.java.org.apache.commons.codec.binary.Base64.resizeBuffer"
                },
                {
                    "function name": "readResults",
                    "function params": [
                        "b",
                        "bPos",
                        "bAvail"
                    ],
                    "file name": "Base64.java",
                    "file old path": "src/java/org/apache/commons/codec/binary/Base64.java",
                    "file new path": "src/java/org/apache/commons/codec/binary/Base64.java",
                    "full name": "src.java.org.apache.commons.codec.binary.Base64.readResults"
                },
                {
                    "function name": "toIntegerBytes",
                    "function params": [
                        "bigInt"
                    ],
                    "file name": "Base64.java",
                    "file old path": "src/java/org/apache/commons/codec/binary/Base64.java",
                    "file new path": "src/java/org/apache/commons/codec/binary/Base64.java",
                    "full name": "src.java.org.apache.commons.codec.binary.Base64.toIntegerBytes"
                },
                {
                    "function name": "encodeBase64",
                    "function params": [
                        "binaryData",
                        "isChunked",
                        "urlSafe"
                    ],
                    "file name": "Base64.java",
                    "file old path": "src/java/org/apache/commons/codec/binary/Base64.java",
                    "file new path": "src/java/org/apache/commons/codec/binary/Base64.java",
                    "full name": "src.java.org.apache.commons.codec.binary.Base64.encodeBase64"
                },
                {
                    "function name": "encode",
                    "function params": [
                        "in",
                        "inPos",
                        "inAvail"
                    ],
                    "file name": "Base64.java",
                    "file old path": "src/java/org/apache/commons/codec/binary/Base64.java",
                    "file new path": "src/java/org/apache/commons/codec/binary/Base64.java",
                    "full name": "src.java.org.apache.commons.codec.binary.Base64.encode"
                }
            ],
            "files that changed": [
                "src/java/org/apache/commons/codec/binary/Base64.java",
                "src/java/org/apache/commons/codec/binary/Base64InputStream.java",
                "src/java/org/apache/commons/codec/binary/Base64OutputStream.java"
            ]
        },
        {
            "bug index": "172",
            "bug id": "CODEC-1",
            "hexsha": "71e7260746a902d1070a190fd78bd560464860b9",
            "fix_hash": "ee2d79cddbace4618e7ae31f07343f804d800962",
            "description": "URLCodec causes an IndexOutOfBoundsException in BitSet when encoding non-ASCII\ncharacters.",
            "commit number version hash": 173,
            "commit number": 238,
            "function that changed": [],
            "files that changed": [
                "src/java/org/apache/commons/codec/language/Soundex.java"
            ]
        },
        {
            "bug index": "173",
            "bug id": "CODEC-1",
            "hexsha": "71e7260746a902d1070a190fd78bd560464860b9",
            "fix_hash": "eda7f6f9611bd8cf4c1e71f1e16c44611cbfbe7b",
            "description": "URLCodec causes an IndexOutOfBoundsException in BitSet when encoding non-ASCII\ncharacters.",
            "commit number version hash": 173,
            "commit number": 237,
            "function that changed": [],
            "files that changed": [
                "src/java/org/apache/commons/codec/language/RefinedSoundex.java"
            ]
        },
        {
            "bug index": "174",
            "bug id": "CODEC-1",
            "hexsha": "71e7260746a902d1070a190fd78bd560464860b9",
            "fix_hash": "356aee756a4b13c717392032cc70ebfeba2ee0e6",
            "description": "URLCodec causes an IndexOutOfBoundsException in BitSet when encoding non-ASCII\ncharacters.",
            "commit number version hash": 173,
            "commit number": 236,
            "function that changed": [
                {
                    "function name": "encodeHex",
                    "function params": [
                        "data",
                        "toDigits"
                    ],
                    "file name": "Hex.java",
                    "file old path": "src/java/org/apache/commons/codec/binary/Hex.java",
                    "file new path": "src/java/org/apache/commons/codec/binary/Hex.java",
                    "full name": "src.java.org.apache.commons.codec.binary.Hex.encodeHex"
                },
                {
                    "function name": "sha256",
                    "function params": [
                        "data"
                    ],
                    "file name": "DigestUtils.java",
                    "file old path": "src/java/org/apache/commons/codec/digest/DigestUtils.java",
                    "file new path": "src/java/org/apache/commons/codec/digest/DigestUtils.java",
                    "full name": "src.java.org.apache.commons.codec.digest.DigestUtils.sha256"
                },
                {
                    "function name": "sha512",
                    "function params": [
                        "data"
                    ],
                    "file name": "DigestUtils.java",
                    "file old path": "src/java/org/apache/commons/codec/digest/DigestUtils.java",
                    "file new path": "src/java/org/apache/commons/codec/digest/DigestUtils.java",
                    "full name": "src.java.org.apache.commons.codec.digest.DigestUtils.sha512"
                },
                {
                    "function name": "sha256Hex",
                    "function params": [
                        "data"
                    ],
                    "file name": "DigestUtils.java",
                    "file old path": "src/java/org/apache/commons/codec/digest/DigestUtils.java",
                    "file new path": "src/java/org/apache/commons/codec/digest/DigestUtils.java",
                    "full name": "src.java.org.apache.commons.codec.digest.DigestUtils.sha256Hex"
                },
                {
                    "function name": "sha512Hex",
                    "function params": [
                        "data"
                    ],
                    "file name": "DigestUtils.java",
                    "file old path": "src/java/org/apache/commons/codec/digest/DigestUtils.java",
                    "file new path": "src/java/org/apache/commons/codec/digest/DigestUtils.java",
                    "full name": "src.java.org.apache.commons.codec.digest.DigestUtils.sha512Hex"
                },
                {
                    "function name": "md5Hex",
                    "function params": [
                        "data"
                    ],
                    "file name": "DigestUtils.java",
                    "file old path": "src/java/org/apache/commons/codec/digest/DigestUtils.java",
                    "file new path": "src/java/org/apache/commons/codec/digest/DigestUtils.java",
                    "full name": "src.java.org.apache.commons.codec.digest.DigestUtils.md5Hex"
                },
                {
                    "function name": "sha",
                    "function params": [
                        "data"
                    ],
                    "file name": "DigestUtils.java",
                    "file old path": "src/java/org/apache/commons/codec/digest/DigestUtils.java",
                    "file new path": "src/java/org/apache/commons/codec/digest/DigestUtils.java",
                    "full name": "src.java.org.apache.commons.codec.digest.DigestUtils.sha"
                },
                {
                    "function name": "sha384",
                    "function params": [
                        "data"
                    ],
                    "file name": "DigestUtils.java",
                    "file old path": "src/java/org/apache/commons/codec/digest/DigestUtils.java",
                    "file new path": "src/java/org/apache/commons/codec/digest/DigestUtils.java",
                    "full name": "src.java.org.apache.commons.codec.digest.DigestUtils.sha384"
                },
                {
                    "function name": "sha",
                    "function params": [
                        "data"
                    ],
                    "file name": "DigestUtils.java",
                    "file old path": "src/java/org/apache/commons/codec/digest/DigestUtils.java",
                    "file new path": "src/java/org/apache/commons/codec/digest/DigestUtils.java",
                    "full name": "src.java.org.apache.commons.codec.digest.DigestUtils.sha"
                },
                {
                    "function name": "sha256Hex",
                    "function params": [
                        "data"
                    ],
                    "file name": "DigestUtils.java",
                    "file old path": "src/java/org/apache/commons/codec/digest/DigestUtils.java",
                    "file new path": "src/java/org/apache/commons/codec/digest/DigestUtils.java",
                    "full name": "src.java.org.apache.commons.codec.digest.DigestUtils.sha256Hex"
                },
                {
                    "function name": "shaHex",
                    "function params": [
                        "data"
                    ],
                    "file name": "DigestUtils.java",
                    "file old path": "src/java/org/apache/commons/codec/digest/DigestUtils.java",
                    "file new path": "src/java/org/apache/commons/codec/digest/DigestUtils.java",
                    "full name": "src.java.org.apache.commons.codec.digest.DigestUtils.shaHex"
                },
                {
                    "function name": "md5Hex",
                    "function params": [
                        "data"
                    ],
                    "file name": "DigestUtils.java",
                    "file old path": "src/java/org/apache/commons/codec/digest/DigestUtils.java",
                    "file new path": "src/java/org/apache/commons/codec/digest/DigestUtils.java",
                    "full name": "src.java.org.apache.commons.codec.digest.DigestUtils.md5Hex"
                },
                {
                    "function name": "sha384",
                    "function params": [
                        "data"
                    ],
                    "file name": "DigestUtils.java",
                    "file old path": "src/java/org/apache/commons/codec/digest/DigestUtils.java",
                    "file new path": "src/java/org/apache/commons/codec/digest/DigestUtils.java",
                    "full name": "src.java.org.apache.commons.codec.digest.DigestUtils.sha384"
                },
                {
                    "function name": "sha384Hex",
                    "function params": [
                        "data"
                    ],
                    "file name": "DigestUtils.java",
                    "file old path": "src/java/org/apache/commons/codec/digest/DigestUtils.java",
                    "file new path": "src/java/org/apache/commons/codec/digest/DigestUtils.java",
                    "full name": "src.java.org.apache.commons.codec.digest.DigestUtils.sha384Hex"
                },
                {
                    "function name": "sha384",
                    "function params": [
                        "data"
                    ],
                    "file name": "DigestUtils.java",
                    "file old path": "src/java/org/apache/commons/codec/digest/DigestUtils.java",
                    "file new path": "src/java/org/apache/commons/codec/digest/DigestUtils.java",
                    "full name": "src.java.org.apache.commons.codec.digest.DigestUtils.sha384"
                },
                {
                    "function name": "sha384Hex",
                    "function params": [
                        "data"
                    ],
                    "file name": "DigestUtils.java",
                    "file old path": "src/java/org/apache/commons/codec/digest/DigestUtils.java",
                    "file new path": "src/java/org/apache/commons/codec/digest/DigestUtils.java",
                    "full name": "src.java.org.apache.commons.codec.digest.DigestUtils.sha384Hex"
                },
                {
                    "function name": "sha512Hex",
                    "function params": [
                        "data"
                    ],
                    "file name": "DigestUtils.java",
                    "file old path": "src/java/org/apache/commons/codec/digest/DigestUtils.java",
                    "file new path": "src/java/org/apache/commons/codec/digest/DigestUtils.java",
                    "full name": "src.java.org.apache.commons.codec.digest.DigestUtils.sha512Hex"
                },
                {
                    "function name": "digest",
                    "function params": [
                        "digest",
                        "data"
                    ],
                    "file name": "DigestUtils.java",
                    "file old path": "src/java/org/apache/commons/codec/digest/DigestUtils.java",
                    "file new path": "src/java/org/apache/commons/codec/digest/DigestUtils.java",
                    "full name": "src.java.org.apache.commons.codec.digest.DigestUtils.digest"
                },
                {
                    "function name": "shaHex",
                    "function params": [
                        "data"
                    ],
                    "file name": "DigestUtils.java",
                    "file old path": "src/java/org/apache/commons/codec/digest/DigestUtils.java",
                    "file new path": "src/java/org/apache/commons/codec/digest/DigestUtils.java",
                    "full name": "src.java.org.apache.commons.codec.digest.DigestUtils.shaHex"
                },
                {
                    "function name": "sha256",
                    "function params": [
                        "data"
                    ],
                    "file name": "DigestUtils.java",
                    "file old path": "src/java/org/apache/commons/codec/digest/DigestUtils.java",
                    "file new path": "src/java/org/apache/commons/codec/digest/DigestUtils.java",
                    "full name": "src.java.org.apache.commons.codec.digest.DigestUtils.sha256"
                },
                {
                    "function name": "sha512",
                    "function params": [
                        "data"
                    ],
                    "file name": "DigestUtils.java",
                    "file old path": "src/java/org/apache/commons/codec/digest/DigestUtils.java",
                    "file new path": "src/java/org/apache/commons/codec/digest/DigestUtils.java",
                    "full name": "src.java.org.apache.commons.codec.digest.DigestUtils.sha512"
                }
            ],
            "files that changed": [
                "src/java/org/apache/commons/codec/binary/Hex.java",
                "src/java/org/apache/commons/codec/digest/DigestUtils.java",
                "src/java/org/apache/commons/codec/language/Caverphone.java",
                "src/java/org/apache/commons/codec/language/RefinedSoundex.java",
                "src/java/org/apache/commons/codec/language/Soundex.java"
            ]
        },
        {
            "bug index": "175",
            "bug id": "CODEC-1",
            "hexsha": "71e7260746a902d1070a190fd78bd560464860b9",
            "fix_hash": "100d531386e69f70bc73a039b4a5776e4ab36cbf",
            "description": "URLCodec causes an IndexOutOfBoundsException in BitSet when encoding non-ASCII\ncharacters.",
            "commit number version hash": 173,
            "commit number": 235,
            "function that changed": [],
            "files that changed": [
                "src/java/org/apache/commons/codec/binary/Base64InputStream.java",
                "src/java/org/apache/commons/codec/binary/Base64OutputStream.java"
            ]
        },
        {
            "bug index": "176",
            "bug id": "CODEC-1",
            "hexsha": "71e7260746a902d1070a190fd78bd560464860b9",
            "fix_hash": "21a3b8795df1ac6008a592911afaa5118ad3061a",
            "description": "URLCodec causes an IndexOutOfBoundsException in BitSet when encoding non-ASCII\ncharacters.",
            "commit number version hash": 173,
            "commit number": 234,
            "function that changed": [],
            "files that changed": [
                "src/java/org/apache/commons/codec/binary/Base64.java"
            ]
        },
        {
            "bug index": "177",
            "bug id": "CODEC-77",
            "hexsha": "f3db0de1fe8c429bd3c869108074fed4bdf25b3a",
            "fix_hash": "4449af5be0d81e35daef251055eca4cbfffd1d5c",
            "description": "Base64.encode(new byte[0]) doesn't return an empty byte array back!  It returns CRLF.",
            "commit number version hash": 549,
            "commit number": 233,
            "function that changed": [],
            "files that changed": [
                "src/java/org/apache/commons/codec/binary/Base64.java",
                "src/test/org/apache/commons/codec/binary/Base64InputStreamTest.java",
                "src/test/org/apache/commons/codec/binary/Base64OutputStreamTest.java",
                "src/test/org/apache/commons/codec/binary/Base64Test.java"
            ]
        },
        {
            "bug index": "178",
            "bug id": "CODEC-77",
            "hexsha": "f3db0de1fe8c429bd3c869108074fed4bdf25b3a",
            "fix_hash": "b8c2d9d9dc9aab45f83cf49ac93cfa8546e4c08e",
            "description": "Base64.encode(new byte[0]) doesn't return an empty byte array back!  It returns CRLF.",
            "commit number version hash": 549,
            "commit number": 232,
            "function that changed": [
                {
                    "function name": "encode",
                    "function params": [
                        "in",
                        "inPos",
                        "inAvail"
                    ],
                    "file name": "Base64.java",
                    "file old path": "src/java/org/apache/commons/codec/binary/Base64.java",
                    "file new path": "src/java/org/apache/commons/codec/binary/Base64.java",
                    "full name": "src.java.org.apache.commons.codec.binary.Base64.encode"
                },
                {
                    "function name": "testBase64EmptyInputStream",
                    "function params": [],
                    "file name": "Base64InputStreamTest.java",
                    "file old path": "src/test/org/apache/commons/codec/binary/Base64InputStreamTest.java",
                    "file new path": "src/test/org/apache/commons/codec/binary/Base64InputStreamTest.java",
                    "full name": "src.test.org.apache.commons.codec.binary.Base64InputStreamTest.testBase64EmptyInputStream"
                },
                {
                    "function name": "testBase64OutputStreamByChunk",
                    "function params": [],
                    "file name": "Base64OutputStreamTest.java",
                    "file old path": "src/test/org/apache/commons/codec/binary/Base64OutputStreamTest.java",
                    "file new path": "src/test/org/apache/commons/codec/binary/Base64OutputStreamTest.java",
                    "full name": "src.test.org.apache.commons.codec.binary.Base64OutputStreamTest.testBase64OutputStreamByChunk"
                },
                {
                    "function name": "testBase64OutputStreamByteByByte",
                    "function params": [],
                    "file name": "Base64OutputStreamTest.java",
                    "file old path": "src/test/org/apache/commons/codec/binary/Base64OutputStreamTest.java",
                    "file new path": "src/test/org/apache/commons/codec/binary/Base64OutputStreamTest.java",
                    "full name": "src.test.org.apache.commons.codec.binary.Base64OutputStreamTest.testBase64OutputStreamByteByByte"
                },
                {
                    "function name": "testBase64EmptyOutputStream",
                    "function params": [],
                    "file name": "Base64OutputStreamTest.java",
                    "file old path": "src/test/org/apache/commons/codec/binary/Base64OutputStreamTest.java",
                    "file new path": "src/test/org/apache/commons/codec/binary/Base64OutputStreamTest.java",
                    "full name": "src.test.org.apache.commons.codec.binary.Base64OutputStreamTest.testBase64EmptyOutputStream"
                },
                {
                    "function name": "testEmptyBase64",
                    "function params": [],
                    "file name": "Base64Test.java",
                    "file old path": "src/test/org/apache/commons/codec/binary/Base64Test.java",
                    "file new path": "src/test/org/apache/commons/codec/binary/Base64Test.java",
                    "full name": "src.test.org.apache.commons.codec.binary.Base64Test.testEmptyBase64"
                }
            ],
            "files that changed": [
                "src/java/org/apache/commons/codec/binary/Base64.java",
                "src/test/org/apache/commons/codec/binary/Base64InputStreamTest.java",
                "src/test/org/apache/commons/codec/binary/Base64OutputStreamTest.java",
                "src/test/org/apache/commons/codec/binary/Base64Test.java"
            ]
        },
        {
            "bug index": "179",
            "bug id": "CODEC-1",
            "hexsha": "71e7260746a902d1070a190fd78bd560464860b9",
            "fix_hash": "6520641c1051abe4c7ca9f87068be8832ae61a56",
            "description": "URLCodec causes an IndexOutOfBoundsException in BitSet when encoding non-ASCII\ncharacters.",
            "commit number version hash": 173,
            "commit number": 228,
            "function that changed": [],
            "files that changed": [
                "src/java/org/apache/commons/codec/binary/Base64.java"
            ]
        },
        {
            "bug index": "180",
            "bug id": "CODEC-72",
            "hexsha": "f3db0de1fe8c429bd3c869108074fed4bdf25b3a",
            "fix_hash": "cb63f4a959e30de6882b20af10d189c7307a6da2",
            "description": "Soundex and RefinedSoundex both have public US_ENGLISH_MAPPING char arrays. These don't appear to be used externally, so should be made private - or at least package protected.\n\nAlso, the class constructors store externally mutable char arrays; it would be better if these were copied.\n\nPatch to follow.",
            "commit number version hash": 549,
            "commit number": 225,
            "function that changed": [
                {
                    "function name": "RefinedSoundex",
                    "function params": [
                        "mapping"
                    ],
                    "file name": "RefinedSoundex.java",
                    "file old path": "src/java/org/apache/commons/codec/language/RefinedSoundex.java",
                    "file new path": "src/java/org/apache/commons/codec/language/RefinedSoundex.java",
                    "full name": "src.java.org.apache.commons.codec.language.RefinedSoundex.RefinedSoundex"
                },
                {
                    "function name": "RefinedSoundex",
                    "function params": [
                        "mapping"
                    ],
                    "file name": "RefinedSoundex.java",
                    "file old path": "src/java/org/apache/commons/codec/language/RefinedSoundex.java",
                    "file new path": "src/java/org/apache/commons/codec/language/RefinedSoundex.java",
                    "full name": "src.java.org.apache.commons.codec.language.RefinedSoundex.RefinedSoundex"
                },
                {
                    "function name": "RefinedSoundex",
                    "function params": [],
                    "file name": "RefinedSoundex.java",
                    "file old path": "src/java/org/apache/commons/codec/language/RefinedSoundex.java",
                    "file new path": "src/java/org/apache/commons/codec/language/RefinedSoundex.java",
                    "full name": "src.java.org.apache.commons.codec.language.RefinedSoundex.RefinedSoundex"
                },
                {
                    "function name": "Soundex",
                    "function params": [],
                    "file name": "Soundex.java",
                    "file old path": "src/java/org/apache/commons/codec/language/Soundex.java",
                    "file new path": "src/java/org/apache/commons/codec/language/Soundex.java",
                    "full name": "src.java.org.apache.commons.codec.language.Soundex.Soundex"
                },
                {
                    "function name": "Soundex",
                    "function params": [
                        "mapping"
                    ],
                    "file name": "Soundex.java",
                    "file old path": "src/java/org/apache/commons/codec/language/Soundex.java",
                    "file new path": "src/java/org/apache/commons/codec/language/Soundex.java",
                    "full name": "src.java.org.apache.commons.codec.language.Soundex.Soundex"
                },
                {
                    "function name": "Soundex",
                    "function params": [
                        "mapping"
                    ],
                    "file name": "Soundex.java",
                    "file old path": "src/java/org/apache/commons/codec/language/Soundex.java",
                    "file new path": "src/java/org/apache/commons/codec/language/Soundex.java",
                    "full name": "src.java.org.apache.commons.codec.language.Soundex.Soundex"
                },
                {
                    "function name": "testNewInstance2",
                    "function params": [],
                    "file name": "RefinedSoundexTest.java",
                    "file old path": "src/test/org/apache/commons/codec/language/RefinedSoundexTest.java",
                    "file new path": "src/test/org/apache/commons/codec/language/RefinedSoundexTest.java",
                    "full name": "src.test.org.apache.commons.codec.language.RefinedSoundexTest.testNewInstance2"
                },
                {
                    "function name": "testNewInstance3",
                    "function params": [],
                    "file name": "RefinedSoundexTest.java",
                    "file old path": "src/test/org/apache/commons/codec/language/RefinedSoundexTest.java",
                    "file new path": "src/test/org/apache/commons/codec/language/RefinedSoundexTest.java",
                    "full name": "src.test.org.apache.commons.codec.language.RefinedSoundexTest.testNewInstance3"
                },
                {
                    "function name": "testNewInstance",
                    "function params": [],
                    "file name": "RefinedSoundexTest.java",
                    "file old path": "src/test/org/apache/commons/codec/language/RefinedSoundexTest.java",
                    "file new path": "src/test/org/apache/commons/codec/language/RefinedSoundexTest.java",
                    "full name": "src.test.org.apache.commons.codec.language.RefinedSoundexTest.testNewInstance"
                },
                {
                    "function name": "testNewInstance3",
                    "function params": [],
                    "file name": "SoundexTest.java",
                    "file old path": "src/test/org/apache/commons/codec/language/SoundexTest.java",
                    "file new path": "src/test/org/apache/commons/codec/language/SoundexTest.java",
                    "full name": "src.test.org.apache.commons.codec.language.SoundexTest.testNewInstance3"
                },
                {
                    "function name": "testNewInstance",
                    "function params": [],
                    "file name": "SoundexTest.java",
                    "file old path": "src/test/org/apache/commons/codec/language/SoundexTest.java",
                    "file new path": "src/test/org/apache/commons/codec/language/SoundexTest.java",
                    "full name": "src.test.org.apache.commons.codec.language.SoundexTest.testNewInstance"
                },
                {
                    "function name": "testNewInstance2",
                    "function params": [],
                    "file name": "SoundexTest.java",
                    "file old path": "src/test/org/apache/commons/codec/language/SoundexTest.java",
                    "file new path": "src/test/org/apache/commons/codec/language/SoundexTest.java",
                    "full name": "src.test.org.apache.commons.codec.language.SoundexTest.testNewInstance2"
                },
                {
                    "function name": "testUsEnglishStatic",
                    "function params": [],
                    "file name": "SoundexTest.java",
                    "file old path": "src/test/org/apache/commons/codec/language/SoundexTest.java",
                    "file new path": "src/test/org/apache/commons/codec/language/SoundexTest.java",
                    "full name": "src.test.org.apache.commons.codec.language.SoundexTest.testUsEnglishStatic"
                }
            ],
            "files that changed": [
                "src/java/org/apache/commons/codec/language/RefinedSoundex.java",
                "src/java/org/apache/commons/codec/language/Soundex.java",
                "src/test/org/apache/commons/codec/language/RefinedSoundexTest.java",
                "src/test/org/apache/commons/codec/language/SoundexTest.java"
            ]
        },
        {
            "bug index": "181",
            "bug id": "CODEC-68",
            "hexsha": "f3db0de1fe8c429bd3c869108074fed4bdf25b3a",
            "fix_hash": "0148ae493e7a0462e13ea595f2be1dfcc819adba",
            "description": "the following code throws an ArrayIndexOutOfBoundsException although it is perfectly valid (the byte 0x9c should be ignored according to the standard):\n\n{code}\nbyte[x] = new byte[] { 'n', 'A', '=', '=', 0x9c };\nBase64.decodeBase64(x);\n{code}\n\nThe problem is the following method:\n\n{code}\n    private static boolean isBase64(byte octect) {\n        if (octect == PAD) {\n            return true;\n        } else if (base64Alphabet[octect] == -1) {\n            return false;\n        } else {\n            return true;\n        }\n    }\n{code}\n\nin Java octect is a *signed* value, so it is not correct to use it as an offset for an array [0..254] which base64Alphabet is. 0x9c is -100!\n\nFIX:\nuse base64Alphabet[ 0xff & octect ] in the \"else if\" block to convert the octet prior using it as an offset for the lookup table",
            "commit number version hash": 549,
            "commit number": 195,
            "function that changed": [
                {
                    "function name": "testCodec68",
                    "function params": [],
                    "file name": "Base64Test.java",
                    "file old path": "src/test/org/apache/commons/codec/binary/Base64Test.java",
                    "file new path": "src/test/org/apache/commons/codec/binary/Base64Test.java",
                    "full name": "src.test.org.apache.commons.codec.binary.Base64Test.testCodec68"
                }
            ],
            "files that changed": [
                "src/test/org/apache/commons/codec/binary/Base64Test.java"
            ]
        },
        {
            "bug index": "182",
            "bug id": "CODEC-57",
            "hexsha": "f3db0de1fe8c429bd3c869108074fed4bdf25b3a",
            "fix_hash": "dce4ad64d1a0b9b62eea667ba4c7c58cea435d2d",
            "description": "An empty string is returned from the Metaphone.metaphone(String) method when passed the value \"why\". Variations on the value, such as \"wwwhy\" and \"wwhhhy\" also return empty strings.\n\nThis appears to be an issue since other implementations of the metaphone algorithm, namely the PHP version, returns \"H\" when passed the value \"why\".",
            "commit number version hash": 549,
            "commit number": 194,
            "function that changed": [],
            "files that changed": [
                "src/java/org/apache/commons/codec/language/Metaphone.java"
            ]
        },
        {
            "bug index": "183",
            "bug id": "CODEC-65",
            "hexsha": "f3db0de1fe8c429bd3c869108074fed4bdf25b3a",
            "fix_hash": "52d82d1dfff8c2b2ded9d843e0b03017af6d747c",
            "description": "The language codecs are platform-depedent, please see [Common Bug #3|http://www.nabble.com/Re%3A-Common-Bugs-p14931921s177.html] for details.",
            "commit number version hash": 549,
            "commit number": 193,
            "function that changed": [
                {
                    "function name": "caverphone",
                    "function params": [
                        "txt"
                    ],
                    "file name": "Caverphone.java",
                    "file old path": "src/java/org/apache/commons/codec/language/Caverphone.java",
                    "file new path": "src/java/org/apache/commons/codec/language/Caverphone.java",
                    "full name": "src.java.org.apache.commons.codec.language.Caverphone.caverphone"
                },
                {
                    "function name": "cleanInput",
                    "function params": [
                        "input"
                    ],
                    "file name": "DoubleMetaphone.java",
                    "file old path": "src/java/org/apache/commons/codec/language/DoubleMetaphone.java",
                    "file new path": "src/java/org/apache/commons/codec/language/DoubleMetaphone.java",
                    "full name": "src.java.org.apache.commons.codec.language.DoubleMetaphone.cleanInput"
                },
                {
                    "function name": "metaphone",
                    "function params": [
                        "txt"
                    ],
                    "file name": "Metaphone.java",
                    "file old path": "src/java/org/apache/commons/codec/language/Metaphone.java",
                    "file new path": "src/java/org/apache/commons/codec/language/Metaphone.java",
                    "full name": "src.java.org.apache.commons.codec.language.Metaphone.metaphone"
                },
                {
                    "function name": "clean",
                    "function params": [
                        "str"
                    ],
                    "file name": "SoundexUtils.java",
                    "file old path": "src/java/org/apache/commons/codec/language/SoundexUtils.java",
                    "file new path": "src/java/org/apache/commons/codec/language/SoundexUtils.java",
                    "full name": "src.java.org.apache.commons.codec.language.SoundexUtils.clean"
                },
                {
                    "function name": "testLocaleIndependence",
                    "function params": [],
                    "file name": "StringEncoderAbstractTest.java",
                    "file old path": "src/test/org/apache/commons/codec/StringEncoderAbstractTest.java",
                    "file new path": "src/test/org/apache/commons/codec/StringEncoderAbstractTest.java",
                    "full name": "src.test.org.apache.commons.codec.StringEncoderAbstractTest.testLocaleIndependence"
                }
            ],
            "files that changed": [
                "src/java/org/apache/commons/codec/language/Caverphone.java",
                "src/java/org/apache/commons/codec/language/DoubleMetaphone.java",
                "src/java/org/apache/commons/codec/language/Metaphone.java",
                "src/java/org/apache/commons/codec/language/SoundexUtils.java",
                "src/test/org/apache/commons/codec/StringEncoderAbstractTest.java"
            ]
        },
        {
            "bug index": "184",
            "bug id": "CODEC-57",
            "hexsha": "f3db0de1fe8c429bd3c869108074fed4bdf25b3a",
            "fix_hash": "9c0cabead7cf075308b11362172ae1a48d41321c",
            "description": "An empty string is returned from the Metaphone.metaphone(String) method when passed the value \"why\". Variations on the value, such as \"wwwhy\" and \"wwhhhy\" also return empty strings.\n\nThis appears to be an issue since other implementations of the metaphone algorithm, namely the PHP version, returns \"H\" when passed the value \"why\".",
            "commit number version hash": 549,
            "commit number": 192,
            "function that changed": [
                {
                    "function name": "testWhy",
                    "function params": [],
                    "file name": "MetaphoneTest.java",
                    "file old path": "src/test/org/apache/commons/codec/language/MetaphoneTest.java",
                    "file new path": "src/test/org/apache/commons/codec/language/MetaphoneTest.java",
                    "full name": "src.test.org.apache.commons.codec.language.MetaphoneTest.testWhy"
                }
            ],
            "files that changed": [
                "src/java/org/apache/commons/codec/language/Metaphone.java",
                "src/test/org/apache/commons/codec/language/MetaphoneTest.java"
            ]
        },
        {
            "bug index": "185",
            "bug id": "CODEC-2",
            "hexsha": "71e7260746a902d1070a190fd78bd560464860b9",
            "fix_hash": "10dc7484de512026681252138023e017eeba87f9",
            "description": "The net subpackage does not have adequate JavaDoc.  A package.html needs to be\ncreated which acts as a usage guide for the codec in that package.",
            "commit number version hash": 173,
            "commit number": 186,
            "function that changed": [
                {
                    "function name": "testSpecificationExamples",
                    "function params": [],
                    "file name": "CaverphoneTest.java",
                    "file old path": "src/test/org/apache/commons/codec/language/CaverphoneTest.java",
                    "file new path": "src/test/org/apache/commons/codec/language/CaverphoneTest.java",
                    "full name": "src.test.org.apache.commons.codec.language.CaverphoneTest.testSpecificationExamples"
                }
            ],
            "files that changed": [
                "src/test/org/apache/commons/codec/language/CaverphoneTest.java"
            ]
        },
        {
            "bug index": "186",
            "bug id": "CODEC-2",
            "hexsha": "71e7260746a902d1070a190fd78bd560464860b9",
            "fix_hash": "66555de56715ccb185dee4dd2b25b1e93cc5c73e",
            "description": "The net subpackage does not have adequate JavaDoc.  A package.html needs to be\ncreated which acts as a usage guide for the codec in that package.",
            "commit number version hash": 173,
            "commit number": 185,
            "function that changed": [
                {
                    "function name": "caverphone",
                    "function params": [
                        "txt"
                    ],
                    "file name": "Caverphone.java",
                    "file old path": null,
                    "file new path": "src/java/org/apache/commons/codec/language/Caverphone.java",
                    "full name": "src.java.org.apache.commons.codec.language.Caverphone.caverphone"
                },
                {
                    "function name": "encode",
                    "function params": [
                        "pString"
                    ],
                    "file name": "Caverphone.java",
                    "file old path": null,
                    "file new path": "src/java/org/apache/commons/codec/language/Caverphone.java",
                    "full name": "src.java.org.apache.commons.codec.language.Caverphone.encode"
                },
                {
                    "function name": "isCaverphoneEqual",
                    "function params": [
                        "str1",
                        "str2"
                    ],
                    "file name": "Caverphone.java",
                    "file old path": null,
                    "file new path": "src/java/org/apache/commons/codec/language/Caverphone.java",
                    "full name": "src.java.org.apache.commons.codec.language.Caverphone.isCaverphoneEqual"
                },
                {
                    "function name": "encode",
                    "function params": [
                        "pObject"
                    ],
                    "file name": "Caverphone.java",
                    "file old path": null,
                    "file new path": "src/java/org/apache/commons/codec/language/Caverphone.java",
                    "full name": "src.java.org.apache.commons.codec.language.Caverphone.encode"
                },
                {
                    "function name": "Caverphone",
                    "function params": [],
                    "file name": "Caverphone.java",
                    "file old path": null,
                    "file new path": "src/java/org/apache/commons/codec/language/Caverphone.java",
                    "full name": "src.java.org.apache.commons.codec.language.Caverphone.Caverphone"
                },
                {
                    "function name": "CaverphoneTest",
                    "function params": [
                        "name"
                    ],
                    "file name": "CaverphoneTest.java",
                    "file old path": null,
                    "file new path": "src/test/org/apache/commons/codec/language/CaverphoneTest.java",
                    "full name": "src.test.org.apache.commons.codec.language.CaverphoneTest.CaverphoneTest"
                },
                {
                    "function name": "testWikipediaExamples",
                    "function params": [],
                    "file name": "CaverphoneTest.java",
                    "file old path": null,
                    "file new path": "src/test/org/apache/commons/codec/language/CaverphoneTest.java",
                    "full name": "src.test.org.apache.commons.codec.language.CaverphoneTest.testWikipediaExamples"
                },
                {
                    "function name": "suite",
                    "function params": [],
                    "file name": "CaverphoneTest.java",
                    "file old path": null,
                    "file new path": "src/test/org/apache/commons/codec/language/CaverphoneTest.java",
                    "full name": "src.test.org.apache.commons.codec.language.CaverphoneTest.suite"
                },
                {
                    "function name": "makeEncoder",
                    "function params": [],
                    "file name": "CaverphoneTest.java",
                    "file old path": null,
                    "file new path": "src/test/org/apache/commons/codec/language/CaverphoneTest.java",
                    "full name": "src.test.org.apache.commons.codec.language.CaverphoneTest.makeEncoder"
                }
            ],
            "files that changed": []
        },
        {
            "bug index": "187",
            "bug id": "CODEC-61",
            "hexsha": "f3db0de1fe8c429bd3c869108074fed4bdf25b3a",
            "fix_hash": "f5185b0229f93097be2433386c2d4022e70545d1",
            "description": "The NegativeArraySizeException exception is thrown by Base64.EncodeBase64() for arrays larger than 268435455 bytes (2^31/8-1).\n\npublic static byte[] encodeBase64(byte[] binaryData, boolean isChunked)  starts with the following three lines:\n\n        int lengthDataBits = binaryData.length * EIGHTBIT;\n        int fewerThan24bits = lengthDataBits % TWENTYFOURBITGROUP;\n        int numberTriplets = lengthDataBits / TWENTYFOURBITGROUP;\n\nThe first of the lines will cause an integer overflow in lengthDataBits for lengths larger than 2^31/8-1, making it a negative number. The fix is trivial (but not tested on the running code, I just ran through a few numbers to validate that it computes the same results as the original code):\n\n        int lengthData = binaryData.length;\n        int fewerThan24bits = lengthData % (TWENTYFOURBITGROUP / EIGHTBIT) * EIGHTBIT;\n        int numberTriplets = lengthData / (TWENTYFOURBITGROUP / EIGHTBIT);\n\nThis way the encoder will be able to process files of up to 2^31-1 bytes in length, which is much better than ~250MB.\n\nThe issue was found in commons 1.3; the source code above was taken from SVN trunk so I assume it's still present in 1.4: http://svn.apache.org/repos/asf/commons/proper/codec/trunk/src/java/org/apache/commons/codec/binary/Base64.java\n",
            "commit number version hash": 549,
            "commit number": 181,
            "function that changed": [
                {
                    "function name": "encode",
                    "function params": [],
                    "file name": "Base64.java",
                    "file old path": "src/java/org/apache/commons/codec/binary/Base64.java",
                    "file new path": "src/java/org/apache/commons/codec/binary/Base64.java",
                    "full name": "src.java.org.apache.commons.codec.binary.Base64.encode"
                },
                {
                    "function name": "decodeBase64",
                    "function params": [],
                    "file name": "Base64.java",
                    "file old path": "src/java/org/apache/commons/codec/binary/Base64.java",
                    "file new path": "src/java/org/apache/commons/codec/binary/Base64.java",
                    "full name": "src.java.org.apache.commons.codec.binary.Base64.decodeBase64"
                },
                {
                    "function name": "encodeBase64",
                    "function params": [],
                    "file name": "Base64.java",
                    "file old path": "src/java/org/apache/commons/codec/binary/Base64.java",
                    "file new path": "src/java/org/apache/commons/codec/binary/Base64.java",
                    "full name": "src.java.org.apache.commons.codec.binary.Base64.encodeBase64"
                },
                {
                    "function name": "discardWhitespace",
                    "function params": [],
                    "file name": "Base64.java",
                    "file old path": "src/java/org/apache/commons/codec/binary/Base64.java",
                    "file new path": "src/java/org/apache/commons/codec/binary/Base64.java",
                    "full name": "src.java.org.apache.commons.codec.binary.Base64.discardWhitespace"
                }
            ],
            "files that changed": [
                "src/java/org/apache/commons/codec/binary/Base64.java"
            ]
        },
        {
            "bug index": "188",
            "bug id": "CODEC-56",
            "hexsha": "f3db0de1fe8c429bd3c869108074fed4bdf25b3a",
            "fix_hash": "a50a203248662d2b4fe6f5b6952d3066ab3ab8ba",
            "description": "The RefinedSoundex code creates an instance of itself in the variable US_ENGLISH; however this appears before some of the other static final variables.\n\nThe variable US_ENGLISH needs to be moved after the other variables.\n\nSee patch to follow.",
            "commit number version hash": 549,
            "commit number": 179,
            "function that changed": [
                {
                    "function name": "testEncode",
                    "function params": [],
                    "file name": "RefinedSoundexTest.java",
                    "file old path": "src/test/org/apache/commons/codec/language/RefinedSoundexTest.java",
                    "file new path": "src/test/org/apache/commons/codec/language/RefinedSoundexTest.java",
                    "full name": "src.test.org.apache.commons.codec.language.RefinedSoundexTest.testEncode"
                }
            ],
            "files that changed": [
                "src/java/org/apache/commons/codec/language/RefinedSoundex.java",
                "src/test/org/apache/commons/codec/language/RefinedSoundexTest.java"
            ]
        },
        {
            "bug index": "189",
            "bug id": "CODEC-57",
            "hexsha": "f3db0de1fe8c429bd3c869108074fed4bdf25b3a",
            "fix_hash": "e65d67e1c41746e811503255fadacef6de645eec",
            "description": "An empty string is returned from the Metaphone.metaphone(String) method when passed the value \"why\". Variations on the value, such as \"wwwhy\" and \"wwhhhy\" also return empty strings.\n\nThis appears to be an issue since other implementations of the metaphone algorithm, namely the PHP version, returns \"H\" when passed the value \"why\".",
            "commit number version hash": 549,
            "commit number": 178,
            "function that changed": [
                {
                    "function name": "testWhy",
                    "function params": [],
                    "file name": "MetaphoneTest.java",
                    "file old path": "src/test/org/apache/commons/codec/language/MetaphoneTest.java",
                    "file new path": "src/test/org/apache/commons/codec/language/MetaphoneTest.java",
                    "full name": "src.test.org.apache.commons.codec.language.MetaphoneTest.testWhy"
                },
                {
                    "function name": "testWordsWithCIA",
                    "function params": [],
                    "file name": "MetaphoneTest.java",
                    "file old path": "src/test/org/apache/commons/codec/language/MetaphoneTest.java",
                    "file new path": "src/test/org/apache/commons/codec/language/MetaphoneTest.java",
                    "full name": "src.test.org.apache.commons.codec.language.MetaphoneTest.testWordsWithCIA"
                }
            ],
            "files that changed": [
                "src/test/org/apache/commons/codec/language/MetaphoneTest.java"
            ]
        },
        {
            "bug index": "190",
            "bug id": "CODEC-51",
            "hexsha": "f3db0de1fe8c429bd3c869108074fed4bdf25b3a",
            "fix_hash": "c50e0968c219085d042c8d64d30c716830a3622c",
            "description": "Testsuite: org.apache.commons.codec.language.SoundexTest\nTests run: 25, Failures: 2, Errors: 0, Time elapsed: 0.907 sec\n\nTestcase: testUsMappingOWithDiaeresis(org.apache.commons.codec.language.SoundexTest):   FAILED\nexpected:<?000> but was:<>\njunit.framework.ComparisonFailure: expected:<?000> but was:<>\n        at org.apache.commons.codec.language.SoundexTest.testUsMappingOWithDiaeresis(SoundexTest.java:349)\n        at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n        at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39)\n        at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25)\n\n\nTestcase: testUsMappingEWithAcute(org.apache.commons.codec.language.SoundexTest):       FAILED\nexpected:<?000> but was:<>\njunit.framework.ComparisonFailure: expected:<?000> but was:<>\n        at org.apache.commons.codec.language.SoundexTest.testUsMappingEWithAcute(SoundexTest.java:364)\n        at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n        at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39)\n        at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25)",
            "commit number version hash": 549,
            "commit number": 171,
            "function that changed": [
                {
                    "function name": "testUsMappingEWithAcute",
                    "function params": [],
                    "file name": "SoundexTest.java",
                    "file old path": "src/test/org/apache/commons/codec/language/SoundexTest.java",
                    "file new path": "src/test/org/apache/commons/codec/language/SoundexTest.java",
                    "full name": "src.test.org.apache.commons.codec.language.SoundexTest.testUsMappingEWithAcute"
                },
                {
                    "function name": "testUsMappingOWithDiaeresis",
                    "function params": [],
                    "file name": "SoundexTest.java",
                    "file old path": "src/test/org/apache/commons/codec/language/SoundexTest.java",
                    "file new path": "src/test/org/apache/commons/codec/language/SoundexTest.java",
                    "full name": "src.test.org.apache.commons.codec.language.SoundexTest.testUsMappingOWithDiaeresis"
                }
            ],
            "files that changed": [
                "src/test/org/apache/commons/codec/language/SoundexTest.java"
            ]
        },
        {
            "bug index": "191",
            "bug id": "CODEC-2",
            "hexsha": "71e7260746a902d1070a190fd78bd560464860b9",
            "fix_hash": "34257eff5201e50739d1387caeb2ec5c5561984d",
            "description": "The net subpackage does not have adequate JavaDoc.  A package.html needs to be\ncreated which acts as a usage guide for the codec in that package.",
            "commit number version hash": 173,
            "commit number": 140,
            "function that changed": [],
            "files that changed": [
                "src/java/org/apache/commons/codec/language/Soundex.java"
            ]
        },
        {
            "bug index": "192",
            "bug id": "CODEC-2",
            "hexsha": "71e7260746a902d1070a190fd78bd560464860b9",
            "fix_hash": "01ca21405950e0fcc2a724cb34885f930c86c5e2",
            "description": "The net subpackage does not have adequate JavaDoc.  A package.html needs to be\ncreated which acts as a usage guide for the codec in that package.",
            "commit number version hash": 173,
            "commit number": 107,
            "function that changed": [
                {
                    "function name": "testKnownEncodings",
                    "function params": [],
                    "file name": "Base64Test.java",
                    "file old path": "src/test/org/apache/commons/codec/binary/Base64Test.java",
                    "file new path": "src/test/org/apache/commons/codec/binary/Base64Test.java",
                    "full name": "src.test.org.apache.commons.codec.binary.Base64Test.testKnownEncodings"
                },
                {
                    "function name": "testDecodePadOnlyChunked",
                    "function params": [],
                    "file name": "Base64Test.java",
                    "file old path": "src/test/org/apache/commons/codec/binary/Base64Test.java",
                    "file new path": "src/test/org/apache/commons/codec/binary/Base64Test.java",
                    "full name": "src.test.org.apache.commons.codec.binary.Base64Test.testDecodePadOnlyChunked"
                },
                {
                    "function name": "testRfc2045Section2Dot1CrLfDefinition",
                    "function params": [],
                    "file name": "Base64Test.java",
                    "file old path": "src/test/org/apache/commons/codec/binary/Base64Test.java",
                    "file new path": "src/test/org/apache/commons/codec/binary/Base64Test.java",
                    "full name": "src.test.org.apache.commons.codec.binary.Base64Test.testRfc2045Section2Dot1CrLfDefinition"
                },
                {
                    "function name": "testTripletsChunked",
                    "function params": [],
                    "file name": "Base64Test.java",
                    "file old path": "src/test/org/apache/commons/codec/binary/Base64Test.java",
                    "file new path": "src/test/org/apache/commons/codec/binary/Base64Test.java",
                    "full name": "src.test.org.apache.commons.codec.binary.Base64Test.testTripletsChunked"
                },
                {
                    "function name": "testDecodeWithWhitespace",
                    "function params": [],
                    "file name": "Base64Test.java",
                    "file old path": "src/test/org/apache/commons/codec/binary/Base64Test.java",
                    "file new path": "src/test/org/apache/commons/codec/binary/Base64Test.java",
                    "full name": "src.test.org.apache.commons.codec.binary.Base64Test.testDecodeWithWhitespace"
                },
                {
                    "function name": "testSingletonsChunked",
                    "function params": [],
                    "file name": "Base64Test.java",
                    "file old path": "src/test/org/apache/commons/codec/binary/Base64Test.java",
                    "file new path": "src/test/org/apache/commons/codec/binary/Base64Test.java",
                    "full name": "src.test.org.apache.commons.codec.binary.Base64Test.testSingletonsChunked"
                },
                {
                    "function name": "testRfc2045Section6Dot8ChunkSizeDefinition",
                    "function params": [],
                    "file name": "Base64Test.java",
                    "file old path": "src/test/org/apache/commons/codec/binary/Base64Test.java",
                    "file new path": "src/test/org/apache/commons/codec/binary/Base64Test.java",
                    "full name": "src.test.org.apache.commons.codec.binary.Base64Test.testRfc2045Section6Dot8ChunkSizeDefinition"
                }
            ],
            "files that changed": [
                "src/java/org/apache/commons/codec/binary/Base64.java",
                "src/test/org/apache/commons/codec/binary/Base64Test.java"
            ]
        },
        {
            "bug index": "193",
            "bug id": "CODEC-1",
            "hexsha": "71e7260746a902d1070a190fd78bd560464860b9",
            "fix_hash": "68e73bed684f9fc16e9ed2b4c1e6bdad97071ea5",
            "description": "URLCodec causes an IndexOutOfBoundsException in BitSet when encoding non-ASCII\ncharacters.",
            "commit number version hash": 173,
            "commit number": 99,
            "function that changed": [
                {
                    "function name": "toAsciiChars",
                    "function params": [
                        "raw"
                    ],
                    "file name": "Binary.java",
                    "file old path": "src/java/org/apache/commons/codec/binary/Binary.java",
                    "file new path": "src/java/org/apache/commons/codec/binary/Binary.java",
                    "full name": "src.java.org.apache.commons.codec.binary.Binary.toAsciiChars"
                },
                {
                    "function name": "decode",
                    "function params": [
                        "ascii"
                    ],
                    "file name": "Binary.java",
                    "file old path": "src/java/org/apache/commons/codec/binary/Binary.java",
                    "file new path": "src/java/org/apache/commons/codec/binary/Binary.java",
                    "full name": "src.java.org.apache.commons.codec.binary.Binary.decode"
                },
                {
                    "function name": "decode",
                    "function params": [
                        "ascii"
                    ],
                    "file name": "Binary.java",
                    "file old path": "src/java/org/apache/commons/codec/binary/Binary.java",
                    "file new path": "src/java/org/apache/commons/codec/binary/Binary.java",
                    "full name": "src.java.org.apache.commons.codec.binary.Binary.decode"
                },
                {
                    "function name": "toByteArray",
                    "function params": [
                        "ascii"
                    ],
                    "file name": "Binary.java",
                    "file old path": "src/java/org/apache/commons/codec/binary/Binary.java",
                    "file new path": "src/java/org/apache/commons/codec/binary/Binary.java",
                    "full name": "src.java.org.apache.commons.codec.binary.Binary.toByteArray"
                },
                {
                    "function name": "fromAscii",
                    "function params": [
                        "ascii"
                    ],
                    "file name": "Binary.java",
                    "file old path": "src/java/org/apache/commons/codec/binary/Binary.java",
                    "file new path": "src/java/org/apache/commons/codec/binary/Binary.java",
                    "full name": "src.java.org.apache.commons.codec.binary.Binary.fromAscii"
                },
                {
                    "function name": "fromAscii",
                    "function params": [
                        "ascii"
                    ],
                    "file name": "Binary.java",
                    "file old path": "src/java/org/apache/commons/codec/binary/Binary.java",
                    "file new path": "src/java/org/apache/commons/codec/binary/Binary.java",
                    "full name": "src.java.org.apache.commons.codec.binary.Binary.fromAscii"
                },
                {
                    "function name": "toAsciiBytes",
                    "function params": [
                        "raw"
                    ],
                    "file name": "Binary.java",
                    "file old path": "src/java/org/apache/commons/codec/binary/Binary.java",
                    "file new path": "src/java/org/apache/commons/codec/binary/Binary.java",
                    "full name": "src.java.org.apache.commons.codec.binary.Binary.toAsciiBytes"
                },
                {
                    "function name": "testFromAsciicharArray",
                    "function params": [],
                    "file name": "BinaryTest.java",
                    "file old path": "src/test/org/apache/commons/codec/binary/BinaryTest.java",
                    "file new path": "src/test/org/apache/commons/codec/binary/BinaryTest.java",
                    "full name": "src.test.org.apache.commons.codec.binary.BinaryTest.testFromAsciicharArray"
                },
                {
                    "function name": "assertDecodeObject",
                    "function params": [
                        "bits",
                        "encodeMe"
                    ],
                    "file name": "BinaryTest.java",
                    "file old path": "src/test/org/apache/commons/codec/binary/BinaryTest.java",
                    "file new path": "src/test/org/apache/commons/codec/binary/BinaryTest.java",
                    "full name": "src.test.org.apache.commons.codec.binary.BinaryTest.assertDecodeObject"
                },
                {
                    "function name": "testDecodebyteArray",
                    "function params": [],
                    "file name": "BinaryTest.java",
                    "file old path": "src/test/org/apache/commons/codec/binary/BinaryTest.java",
                    "file new path": "src/test/org/apache/commons/codec/binary/BinaryTest.java",
                    "full name": "src.test.org.apache.commons.codec.binary.BinaryTest.testDecodebyteArray"
                },
                {
                    "function name": "testToAsciiChars",
                    "function params": [],
                    "file name": "BinaryTest.java",
                    "file old path": "src/test/org/apache/commons/codec/binary/BinaryTest.java",
                    "file new path": "src/test/org/apache/commons/codec/binary/BinaryTest.java",
                    "full name": "src.test.org.apache.commons.codec.binary.BinaryTest.testToAsciiChars"
                },
                {
                    "function name": "testToByteArrayFromString",
                    "function params": [],
                    "file name": "BinaryTest.java",
                    "file old path": "src/test/org/apache/commons/codec/binary/BinaryTest.java",
                    "file new path": "src/test/org/apache/commons/codec/binary/BinaryTest.java",
                    "full name": "src.test.org.apache.commons.codec.binary.BinaryTest.testToByteArrayFromString"
                },
                {
                    "function name": "testFromAsciibyteArray",
                    "function params": [],
                    "file name": "BinaryTest.java",
                    "file old path": "src/test/org/apache/commons/codec/binary/BinaryTest.java",
                    "file new path": "src/test/org/apache/commons/codec/binary/BinaryTest.java",
                    "full name": "src.test.org.apache.commons.codec.binary.BinaryTest.testFromAsciibyteArray"
                },
                {
                    "function name": "testToAsciiString",
                    "function params": [],
                    "file name": "BinaryTest.java",
                    "file old path": "src/test/org/apache/commons/codec/binary/BinaryTest.java",
                    "file new path": "src/test/org/apache/commons/codec/binary/BinaryTest.java",
                    "full name": "src.test.org.apache.commons.codec.binary.BinaryTest.testToAsciiString"
                },
                {
                    "function name": "testToAsciiBytes",
                    "function params": [],
                    "file name": "BinaryTest.java",
                    "file old path": "src/test/org/apache/commons/codec/binary/BinaryTest.java",
                    "file new path": "src/test/org/apache/commons/codec/binary/BinaryTest.java",
                    "full name": "src.test.org.apache.commons.codec.binary.BinaryTest.testToAsciiBytes"
                },
                {
                    "function name": "testEncodebyteArray",
                    "function params": [],
                    "file name": "BinaryTest.java",
                    "file old path": "src/test/org/apache/commons/codec/binary/BinaryTest.java",
                    "file new path": "src/test/org/apache/commons/codec/binary/BinaryTest.java",
                    "full name": "src.test.org.apache.commons.codec.binary.BinaryTest.testEncodebyteArray"
                },
                {
                    "function name": "testEncodeObject",
                    "function params": [],
                    "file name": "BinaryTest.java",
                    "file old path": "src/test/org/apache/commons/codec/binary/BinaryTest.java",
                    "file new path": "src/test/org/apache/commons/codec/binary/BinaryTest.java",
                    "full name": "src.test.org.apache.commons.codec.binary.BinaryTest.testEncodeObject"
                },
                {
                    "function name": "testDecodeObject",
                    "function params": [],
                    "file name": "BinaryTest.java",
                    "file old path": "src/test/org/apache/commons/codec/binary/BinaryTest.java",
                    "file new path": "src/test/org/apache/commons/codec/binary/BinaryTest.java",
                    "full name": "src.test.org.apache.commons.codec.binary.BinaryTest.testDecodeObject"
                },
                {
                    "function name": "testEncodeObjectNull",
                    "function params": [],
                    "file name": "BinaryTest.java",
                    "file old path": "src/test/org/apache/commons/codec/binary/BinaryTest.java",
                    "file new path": "src/test/org/apache/commons/codec/binary/BinaryTest.java",
                    "full name": "src.test.org.apache.commons.codec.binary.BinaryTest.testEncodeObjectNull"
                }
            ],
            "files that changed": [
                "src/java/org/apache/commons/codec/binary/Binary.java",
                "src/test/org/apache/commons/codec/binary/BinaryTest.java"
            ]
        },
        {
            "bug index": "194",
            "bug id": "CODEC-1",
            "hexsha": "71e7260746a902d1070a190fd78bd560464860b9",
            "fix_hash": "166c9edc5e314ba401e35ae3b50090762a86af9d",
            "description": "URLCodec causes an IndexOutOfBoundsException in BitSet when encoding non-ASCII\ncharacters.",
            "commit number version hash": 173,
            "commit number": 94,
            "function that changed": [],
            "files that changed": [
                "src/java/org/apache/commons/codec/language/RefinedSoundex.java",
                "src/java/org/apache/commons/codec/language/Soundex.java",
                "src/java/org/apache/commons/codec/language/SoundexUtils.java"
            ]
        },
        {
            "bug index": "195",
            "bug id": "CODEC-2",
            "hexsha": "71e7260746a902d1070a190fd78bd560464860b9",
            "fix_hash": "c1b1a1ffca322edf9af7689f40d5ae3e0e889661",
            "description": "The net subpackage does not have adequate JavaDoc.  A package.html needs to be\ncreated which acts as a usage guide for the codec in that package.",
            "commit number version hash": 173,
            "commit number": 89,
            "function that changed": [],
            "files that changed": [
                "src/java/org/apache/commons/codec/BinaryDecoder.java",
                "src/java/org/apache/commons/codec/BinaryEncoder.java",
                "src/java/org/apache/commons/codec/Decoder.java",
                "src/java/org/apache/commons/codec/DecoderException.java",
                "src/java/org/apache/commons/codec/Encoder.java",
                "src/java/org/apache/commons/codec/EncoderException.java",
                "src/java/org/apache/commons/codec/StringDecoder.java",
                "src/java/org/apache/commons/codec/StringEncoder.java",
                "src/java/org/apache/commons/codec/StringEncoderComparator.java",
                "src/java/org/apache/commons/codec/binary/Base64.java",
                "src/java/org/apache/commons/codec/binary/Binary.java",
                "src/java/org/apache/commons/codec/binary/Hex.java",
                "src/java/org/apache/commons/codec/digest/DigestUtils.java",
                "src/java/org/apache/commons/codec/language/DoubleMetaphone.java",
                "src/java/org/apache/commons/codec/language/Metaphone.java",
                "src/java/org/apache/commons/codec/language/RefinedSoundex.java",
                "src/java/org/apache/commons/codec/language/Soundex.java",
                "src/java/org/apache/commons/codec/language/SoundexUtils.java",
                "src/java/org/apache/commons/codec/net/URLCodec.java",
                "src/test/org/apache/commons/codec/BinaryEncoderAbstractTest.java",
                "src/test/org/apache/commons/codec/StringEncoderAbstractTest.java",
                "src/test/org/apache/commons/codec/StringEncoderComparatorTest.java",
                "src/test/org/apache/commons/codec/binary/Base64Test.java",
                "src/test/org/apache/commons/codec/binary/BinaryTest.java",
                "src/test/org/apache/commons/codec/binary/HexTest.java",
                "src/test/org/apache/commons/codec/digest/DigestUtilsTest.java",
                "src/test/org/apache/commons/codec/language/AllTests.java",
                "src/test/org/apache/commons/codec/language/DoubleMetaphoneTest.java",
                "src/test/org/apache/commons/codec/language/MetaphoneTest.java",
                "src/test/org/apache/commons/codec/language/RefinedSoundexTest.java",
                "src/test/org/apache/commons/codec/language/SoundexTest.java",
                "src/test/org/apache/commons/codec/net/URLCodecTest.java"
            ]
        },
        {
            "bug index": "196",
            "bug id": "CODEC-1",
            "hexsha": "71e7260746a902d1070a190fd78bd560464860b9",
            "fix_hash": "63a28b8f0c1936d502d88614a99abf0aac65b49a",
            "description": "URLCodec causes an IndexOutOfBoundsException in BitSet when encoding non-ASCII\ncharacters.",
            "commit number version hash": 173,
            "commit number": 69,
            "function that changed": [],
            "files that changed": [
                "src/java/org/apache/commons/codec/net/URLCodec.java"
            ]
        },
        {
            "bug index": "197",
            "bug id": "CODEC-1",
            "hexsha": "71e7260746a902d1070a190fd78bd560464860b9",
            "fix_hash": "e983a64122755c52935c514c784b85036d685c07",
            "description": "URLCodec causes an IndexOutOfBoundsException in BitSet when encoding non-ASCII\ncharacters.",
            "commit number version hash": 173,
            "commit number": 47,
            "function that changed": [
                {
                    "function name": "getMd5Digest",
                    "function params": [],
                    "file name": "DigestUtils.java",
                    "file old path": "src/java/org/apache/commons/codec/digest/DigestUtils.java",
                    "file new path": "src/java/org/apache/commons/codec/digest/DigestUtils.java",
                    "full name": "src.java.org.apache.commons.codec.digest.DigestUtils.getMd5Digest"
                },
                {
                    "function name": "getShaDigest",
                    "function params": [],
                    "file name": "DigestUtils.java",
                    "file old path": "src/java/org/apache/commons/codec/digest/DigestUtils.java",
                    "file new path": "src/java/org/apache/commons/codec/digest/DigestUtils.java",
                    "full name": "src.java.org.apache.commons.codec.digest.DigestUtils.getShaDigest"
                }
            ],
            "files that changed": [
                "src/java/org/apache/commons/codec/digest/DigestUtils.java",
                "src/test/org/apache/commons/codec/digest/DigestUtilsTest.java"
            ]
        },
        {
            "bug index": "198",
            "bug id": "CODEC-1",
            "hexsha": "71e7260746a902d1070a190fd78bd560464860b9",
            "fix_hash": "3652eb64e9c29bdd83d60376b61ae5fb99feeb26",
            "description": "URLCodec causes an IndexOutOfBoundsException in BitSet when encoding non-ASCII\ncharacters.",
            "commit number version hash": 173,
            "commit number": 43,
            "function that changed": [],
            "files that changed": []
        },
        {
            "bug index": "199",
            "bug id": "CODEC-1",
            "hexsha": "71e7260746a902d1070a190fd78bd560464860b9",
            "fix_hash": "b4bd93b48d45b93077bf1b3bc20b8e39a3a2c0be",
            "description": "URLCodec causes an IndexOutOfBoundsException in BitSet when encoding non-ASCII\ncharacters.",
            "commit number version hash": 173,
            "commit number": 42,
            "function that changed": [],
            "files that changed": []
        },
        {
            "bug index": "200",
            "bug id": "CODEC-1",
            "hexsha": "71e7260746a902d1070a190fd78bd560464860b9",
            "fix_hash": "21804202745423b5fcd0a34a2c8c94064416ab3a",
            "description": "URLCodec causes an IndexOutOfBoundsException in BitSet when encoding non-ASCII\ncharacters.",
            "commit number version hash": 173,
            "commit number": 35,
            "function that changed": [
                {
                    "function name": "testDoubleMetaphone",
                    "function params": [],
                    "file name": "DoubleMetaphoneTest.java",
                    "file old path": "src/test/org/apache/commons/codec/language/DoubleMetaphoneTest.java",
                    "file new path": "src/test/org/apache/commons/codec/language/DoubleMetaphoneTest.java",
                    "full name": "src.test.org.apache.commons.codec.language.DoubleMetaphoneTest.testDoubleMetaphone"
                },
                {
                    "function name": "testIsDoubleMetaphoneEqual",
                    "function params": [],
                    "file name": "DoubleMetaphoneTest.java",
                    "file old path": "src/test/org/apache/commons/codec/language/DoubleMetaphoneTest.java",
                    "file new path": "src/test/org/apache/commons/codec/language/DoubleMetaphoneTest.java",
                    "full name": "src.test.org.apache.commons.codec.language.DoubleMetaphoneTest.testIsDoubleMetaphoneEqual"
                },
                {
                    "function name": "setUp",
                    "function params": [],
                    "file name": "DoubleMetaphoneTest.java",
                    "file old path": "src/test/org/apache/commons/codec/language/DoubleMetaphoneTest.java",
                    "file new path": "src/test/org/apache/commons/codec/language/DoubleMetaphoneTest.java",
                    "full name": "src.test.org.apache.commons.codec.language.DoubleMetaphoneTest.setUp"
                },
                {
                    "function name": "DoubleMetaphoneTest",
                    "function params": [
                        "name"
                    ],
                    "file name": "DoubleMetaphoneTest.java",
                    "file old path": "src/test/org/apache/commons/codec/language/DoubleMetaphoneTest.java",
                    "file new path": "src/test/org/apache/commons/codec/language/DoubleMetaphoneTest.java",
                    "full name": "src.test.org.apache.commons.codec.language.DoubleMetaphoneTest.DoubleMetaphoneTest"
                },
                {
                    "function name": "tearDown",
                    "function params": [],
                    "file name": "DoubleMetaphoneTest.java",
                    "file old path": "src/test/org/apache/commons/codec/language/DoubleMetaphoneTest.java",
                    "file new path": "src/test/org/apache/commons/codec/language/DoubleMetaphoneTest.java",
                    "full name": "src.test.org.apache.commons.codec.language.DoubleMetaphoneTest.tearDown"
                },
                {
                    "function name": "makeEncoder",
                    "function params": [],
                    "file name": "DoubleMetaphoneTest.java",
                    "file old path": "src/test/org/apache/commons/codec/language/DoubleMetaphoneTest.java",
                    "file new path": "src/test/org/apache/commons/codec/language/DoubleMetaphoneTest.java",
                    "full name": "src.test.org.apache.commons.codec.language.DoubleMetaphoneTest.makeEncoder"
                },
                {
                    "function name": "doubleMetaphoneEqualTest",
                    "function params": [
                        "alternate"
                    ],
                    "file name": "DoubleMetaphoneTest.java",
                    "file old path": "src/test/org/apache/commons/codec/language/DoubleMetaphoneTest.java",
                    "file new path": "src/test/org/apache/commons/codec/language/DoubleMetaphoneTest.java",
                    "full name": "src.test.org.apache.commons.codec.language.DoubleMetaphoneTest.doubleMetaphoneEqualTest"
                },
                {
                    "function name": "suite",
                    "function params": [],
                    "file name": "DoubleMetaphoneTest.java",
                    "file old path": "src/test/org/apache/commons/codec/language/DoubleMetaphoneTest.java",
                    "file new path": "src/test/org/apache/commons/codec/language/DoubleMetaphoneTest.java",
                    "full name": "src.test.org.apache.commons.codec.language.DoubleMetaphoneTest.suite"
                }
            ],
            "files that changed": [
                "src/java/org/apache/commons/codec/BinaryDecoder.java",
                "src/java/org/apache/commons/codec/BinaryEncoder.java",
                "src/java/org/apache/commons/codec/Decoder.java",
                "src/java/org/apache/commons/codec/DecoderException.java",
                "src/java/org/apache/commons/codec/Encoder.java",
                "src/java/org/apache/commons/codec/EncoderException.java",
                "src/java/org/apache/commons/codec/StringDecoder.java",
                "src/java/org/apache/commons/codec/StringEncoder.java",
                "src/java/org/apache/commons/codec/StringEncoderComparator.java",
                "src/java/org/apache/commons/codec/base64/Base64.java",
                "src/java/org/apache/commons/codec/binary/Base64.java",
                "src/java/org/apache/commons/codec/binary/Hex.java",
                "src/java/org/apache/commons/codec/digest/DigestUtils.java",
                "src/java/org/apache/commons/codec/language/DoubleMetaphone.java",
                "src/java/org/apache/commons/codec/language/Metaphone.java",
                "src/java/org/apache/commons/codec/language/RefinedSoundex.java",
                "src/java/org/apache/commons/codec/language/Soundex.java",
                "src/java/org/apache/commons/codec/net/URLCodec.java",
                "src/test/org/apache/commons/codec/BinaryEncoderAbstractTest.java",
                "src/test/org/apache/commons/codec/StringEncoderAbstractTest.java",
                "src/test/org/apache/commons/codec/StringEncoderComparatorTest.java",
                "src/test/org/apache/commons/codec/base64/Base64Test.java",
                "src/test/org/apache/commons/codec/binary/Base64Test.java",
                "src/test/org/apache/commons/codec/binary/HexTest.java",
                "src/test/org/apache/commons/codec/digest/DigestUtilsTest.java",
                "src/test/org/apache/commons/codec/language/DoubleMetaphoneTest.java",
                "src/test/org/apache/commons/codec/language/MetaphoneTest.java",
                "src/test/org/apache/commons/codec/language/RefinedSoundexTest.java",
                "src/test/org/apache/commons/codec/language/SoundexTest.java",
                "src/test/org/apache/commons/codec/net/URLCodecTest.java"
            ]
        },
        {
            "bug index": "201",
            "bug id": "CODEC-23",
            "hexsha": "71e7260746a902d1070a190fd78bd560464860b9",
            "fix_hash": "ab75c6affbd6074d64c5205d14d350f18a816318",
            "description": "In [codec] RefinedSoundex.soundex(): unused local variable 'mapped'.\nAttached path removes it.\nAs an Commons committer, do I have commit rights to the Sandbox for nits such \nas these?",
            "commit number version hash": 173,
            "commit number": 23,
            "function that changed": [
                {
                    "function name": "testObjectEncodeWithValidParameter",
                    "function params": [],
                    "file name": "Base64Test.java",
                    "file old path": "src/test/org/apache/commons/codec/binary/Base64Test.java",
                    "file new path": "src/test/org/apache/commons/codec/binary/Base64Test.java",
                    "full name": "src.test.org.apache.commons.codec.binary.Base64Test.testObjectEncodeWithValidParameter"
                },
                {
                    "function name": "testObjectDecodeWithValidParameter",
                    "function params": [],
                    "file name": "Base64Test.java",
                    "file old path": "src/test/org/apache/commons/codec/binary/Base64Test.java",
                    "file new path": "src/test/org/apache/commons/codec/binary/Base64Test.java",
                    "full name": "src.test.org.apache.commons.codec.binary.Base64Test.testObjectDecodeWithValidParameter"
                }
            ],
            "files that changed": [
                "src/test/org/apache/commons/codec/binary/Base64Test.java"
            ]
        },
        {
            "bug index": "202",
            "bug id": "CODEC-23",
            "hexsha": "71e7260746a902d1070a190fd78bd560464860b9",
            "fix_hash": "41d7c62ba2c811904a21f1821cb530ef28b4e547",
            "description": "In [codec] RefinedSoundex.soundex(): unused local variable 'mapped'.\nAttached path removes it.\nAs an Commons committer, do I have commit rights to the Sandbox for nits such \nas these?",
            "commit number version hash": 173,
            "commit number": 18,
            "function that changed": [
                {
                    "function name": "urlencode",
                    "function params": [
                        "urlsafe",
                        "pArray"
                    ],
                    "file name": "URLCodec.java",
                    "file old path": "src/java/org/apache/commons/codec/net/URLCodec.java",
                    "file new path": "src/java/org/apache/commons/codec/net/URLCodec.java",
                    "full name": "src.java.org.apache.commons.codec.net.URLCodec.urlencode"
                }
            ],
            "files that changed": [
                "src/java/org/apache/commons/codec/net/URLCodec.java"
            ]
        },
        {
            "bug index": "203",
            "bug id": "CODEC-23",
            "hexsha": "71e7260746a902d1070a190fd78bd560464860b9",
            "fix_hash": "18f114279392e140081072ef93f3e01b52b07069",
            "description": "In [codec] RefinedSoundex.soundex(): unused local variable 'mapped'.\nAttached path removes it.\nAs an Commons committer, do I have commit rights to the Sandbox for nits such \nas these?",
            "commit number version hash": 173,
            "commit number": 17,
            "function that changed": [
                {
                    "function name": "decode",
                    "function params": [],
                    "file name": "Base64.java",
                    "file old path": "src/java/org/apache/commons/codec/binary/Base64.java",
                    "file new path": "src/java/org/apache/commons/codec/binary/Base64.java",
                    "full name": "src.java.org.apache.commons.codec.binary.Base64.decode"
                }
            ],
            "files that changed": [
                "src/java/org/apache/commons/codec/binary/Base64.java"
            ]
        },
        {
            "bug index": "204",
            "bug id": "CODEC-16",
            "hexsha": "71e7260746a902d1070a190fd78bd560464860b9",
            "fix_hash": "7748f47dcab2b77d0aeceef6af87b13851c3e7f3",
            "description": "Added two new methods for encoding to Strings in\nBase64.  Forgot to add the dual methods for decoding...\nlater...",
            "commit number version hash": 173,
            "commit number": 8,
            "function that changed": [
                {
                    "function name": "encode",
                    "function params": [],
                    "file name": "Base64.java",
                    "file old path": "src/java/org/apache/commons/codec/base64/Base64.java",
                    "file new path": "src/java/org/apache/commons/codec/base64/Base64.java",
                    "full name": "src.java.org.apache.commons.codec.base64.Base64.encode"
                },
                {
                    "function name": "decode",
                    "function params": [],
                    "file name": "Base64.java",
                    "file old path": "src/java/org/apache/commons/codec/base64/Base64.java",
                    "file new path": "src/java/org/apache/commons/codec/base64/Base64.java",
                    "full name": "src.java.org.apache.commons.codec.base64.Base64.decode"
                },
                {
                    "function name": "encode",
                    "function params": [],
                    "file name": "Base64.java",
                    "file old path": "src/java/org/apache/commons/codec/base64/Base64.java",
                    "file new path": "src/java/org/apache/commons/codec/base64/Base64.java",
                    "full name": "src.java.org.apache.commons.codec.base64.Base64.encode"
                },
                {
                    "function name": "encode",
                    "function params": [],
                    "file name": "Base64.java",
                    "file old path": "src/java/org/apache/commons/codec/base64/Base64.java",
                    "file new path": "src/java/org/apache/commons/codec/base64/Base64.java",
                    "full name": "src.java.org.apache.commons.codec.base64.Base64.encode"
                },
                {
                    "function name": "discardNonBase64",
                    "function params": [],
                    "file name": "Base64.java",
                    "file old path": "src/java/org/apache/commons/codec/binary/Base64.java",
                    "file new path": "src/java/org/apache/commons/codec/binary/Base64.java",
                    "full name": "src.java.org.apache.commons.codec.binary.Base64.discardNonBase64"
                },
                {
                    "function name": "decodeBase64",
                    "function params": [],
                    "file name": "Base64.java",
                    "file old path": "src/java/org/apache/commons/codec/binary/Base64.java",
                    "file new path": "src/java/org/apache/commons/codec/binary/Base64.java",
                    "full name": "src.java.org.apache.commons.codec.binary.Base64.decodeBase64"
                },
                {
                    "function name": "encode",
                    "function params": [],
                    "file name": "Base64.java",
                    "file old path": "src/java/org/apache/commons/codec/binary/Base64.java",
                    "file new path": "src/java/org/apache/commons/codec/binary/Base64.java",
                    "full name": "src.java.org.apache.commons.codec.binary.Base64.encode"
                },
                {
                    "function name": "encodeBase64",
                    "function params": [],
                    "file name": "Base64.java",
                    "file old path": "src/java/org/apache/commons/codec/binary/Base64.java",
                    "file new path": "src/java/org/apache/commons/codec/binary/Base64.java",
                    "full name": "src.java.org.apache.commons.codec.binary.Base64.encodeBase64"
                },
                {
                    "function name": "discardWhitespace",
                    "function params": [],
                    "file name": "Base64.java",
                    "file old path": "src/java/org/apache/commons/codec/binary/Base64.java",
                    "file new path": "src/java/org/apache/commons/codec/binary/Base64.java",
                    "full name": "src.java.org.apache.commons.codec.binary.Base64.discardWhitespace"
                },
                {
                    "function name": "isBase64",
                    "function params": [],
                    "file name": "Base64.java",
                    "file old path": "src/java/org/apache/commons/codec/binary/Base64.java",
                    "file new path": "src/java/org/apache/commons/codec/binary/Base64.java",
                    "full name": "src.java.org.apache.commons.codec.binary.Base64.isBase64"
                },
                {
                    "function name": "decode",
                    "function params": [],
                    "file name": "Base64.java",
                    "file old path": "src/java/org/apache/commons/codec/binary/Base64.java",
                    "file new path": "src/java/org/apache/commons/codec/binary/Base64.java",
                    "full name": "src.java.org.apache.commons.codec.binary.Base64.decode"
                },
                {
                    "function name": "getMaxCodeLen",
                    "function params": [],
                    "file name": "Metaphone.java",
                    "file old path": "src/java/org/apache/commons/codec/language/Metaphone.java",
                    "file new path": "src/java/org/apache/commons/codec/language/Metaphone.java",
                    "full name": "src.java.org.apache.commons.codec.language.Metaphone.getMaxCodeLen"
                },
                {
                    "function name": "encode",
                    "function params": [
                        "pObject"
                    ],
                    "file name": "Metaphone.java",
                    "file old path": "src/java/org/apache/commons/codec/language/Metaphone.java",
                    "file new path": "src/java/org/apache/commons/codec/language/Metaphone.java",
                    "full name": "src.java.org.apache.commons.codec.language.Metaphone.encode"
                },
                {
                    "function name": "metaphone",
                    "function params": [
                        "txt"
                    ],
                    "file name": "Metaphone.java",
                    "file old path": "src/java/org/apache/commons/codec/language/Metaphone.java",
                    "file new path": "src/java/org/apache/commons/codec/language/Metaphone.java",
                    "full name": "src.java.org.apache.commons.codec.language.Metaphone.metaphone"
                },
                {
                    "function name": "setMaxCodeLen",
                    "function params": [
                        "maxCodeLen"
                    ],
                    "file name": "Metaphone.java",
                    "file old path": "src/java/org/apache/commons/codec/language/Metaphone.java",
                    "file new path": "src/java/org/apache/commons/codec/language/Metaphone.java",
                    "full name": "src.java.org.apache.commons.codec.language.Metaphone.setMaxCodeLen"
                },
                {
                    "function name": "soundex",
                    "function params": [
                        "str"
                    ],
                    "file name": "RefinedSoundex.java",
                    "file old path": "src/java/org/apache/commons/codec/language/RefinedSoundex.java",
                    "file new path": "src/java/org/apache/commons/codec/language/RefinedSoundex.java",
                    "full name": "src.java.org.apache.commons.codec.language.RefinedSoundex.soundex"
                },
                {
                    "function name": "encode",
                    "function params": [
                        "pObject"
                    ],
                    "file name": "RefinedSoundex.java",
                    "file old path": "src/java/org/apache/commons/codec/language/RefinedSoundex.java",
                    "file new path": "src/java/org/apache/commons/codec/language/RefinedSoundex.java",
                    "full name": "src.java.org.apache.commons.codec.language.RefinedSoundex.encode"
                },
                {
                    "function name": "getMappingCode",
                    "function params": [
                        "c"
                    ],
                    "file name": "RefinedSoundex.java",
                    "file old path": "src/java/org/apache/commons/codec/language/RefinedSoundex.java",
                    "file new path": "src/java/org/apache/commons/codec/language/RefinedSoundex.java",
                    "full name": "src.java.org.apache.commons.codec.language.RefinedSoundex.getMappingCode"
                },
                {
                    "function name": "getMappingCode",
                    "function params": [
                        "c"
                    ],
                    "file name": "Soundex.java",
                    "file old path": "src/java/org/apache/commons/codec/language/Soundex.java",
                    "file new path": "src/java/org/apache/commons/codec/language/Soundex.java",
                    "full name": "src.java.org.apache.commons.codec.language.Soundex.getMappingCode"
                },
                {
                    "function name": "encode",
                    "function params": [
                        "pObject"
                    ],
                    "file name": "Soundex.java",
                    "file old path": "src/java/org/apache/commons/codec/language/Soundex.java",
                    "file new path": "src/java/org/apache/commons/codec/language/Soundex.java",
                    "full name": "src.java.org.apache.commons.codec.language.Soundex.encode"
                }
            ],
            "files that changed": [
                "src/java/org/apache/commons/codec/base64/Base64.java",
                "src/java/org/apache/commons/codec/binary/Base64.java",
                "src/java/org/apache/commons/codec/binary/Hex.java",
                "src/java/org/apache/commons/codec/language/Metaphone.java",
                "src/java/org/apache/commons/codec/language/RefinedSoundex.java",
                "src/java/org/apache/commons/codec/language/Soundex.java"
            ]
        }
    ]
}